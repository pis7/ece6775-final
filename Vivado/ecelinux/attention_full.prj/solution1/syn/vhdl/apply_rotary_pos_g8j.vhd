-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity apply_rotary_pos_g8j_rom is 
    generic(
             DWIDTH     : integer := 21; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of apply_rotary_pos_g8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "100001010100000111111", 1 => "100101010110001010000", 
    2 => "110111101001010000001", 3 => "001010010101111000011", 
    4 => "010111011010110101010", 5 => "011110000111101011011", 
    6 => "011111111111111001011", 7 => "011110111000000010110", 
    8 => "011100001011100110111", 9 => "011000110110100001000", 
    10 => "010101011011010011001", 11 => "010010001110001000001", 
    12 => "001111010101101001001", 13 => "001100110101001110100", 
    14 => "001010101100000110000", 15 => "001000111000011000000", 
    16 => "000111010111000011101", 17 => "000110000101110010110", 
    18 => "000101000010011001110", 19 => "000100001010100101011", 
    20 => "000011011100001100101", 21 => "000010110101110010101", 
    22 => "000010010110001011010", 23 => "000001111011111111001", 
    24 => "000001100110011000010", 25 => "000001010100100000011", 
    26 => "000001000101110000001", 27 => "000000111001100100100", 
    28 => "000000101111100010001", 29 => "000000100111001111000", 
    30 => "000000100000011000011", 31 => "000000011010101101111", 
    32 => "000000010110000100011", 33 => "000000010010001101100", 
    34 => "000000001111000001110", 35 => "000000001100011001101", 
    36 => "000000001010001111100", 37 => "000000001000011100111", 
    38 => "000000000110111110100", 39 => "000000000101110000011", 
    40 => "000000000100110000001", 41 => "000000000011111011000", 
    42 => "000000000011001111001", 43 => "000000000010101011000", 
    44 => "000000000010001101001", 45 => "000000000001110100100", 
    46 => "000000000001100000001", 47 => "000000000001001111011", 
    48 => "100001010100000111111", 49 => "100101010110001010000", 
    50 => "110111101001010000001", 51 => "001010010101111000011", 
    52 => "010111011010110101010", 53 => "011110000111101011011", 
    54 => "011111111111111001011", 55 => "011110111000000010110", 
    56 => "011100001011100110111", 57 => "011000110110100001000", 
    58 => "010101011011010011001", 59 => "010010001110001000001", 
    60 => "001111010101101001001", 61 => "001100110101001110100", 
    62 => "001010101100000110000", 63 => "001000111000011000000", 
    64 => "000111010111000011101", 65 => "000110000101110010110", 
    66 => "000101000010011001110", 67 => "000100001010100101011", 
    68 => "000011011100001100101", 69 => "000010110101110010101", 
    70 => "000010010110001011010", 71 => "000001111011111111001", 
    72 => "000001100110011000010", 73 => "000001010100100000011", 
    74 => "000001000101110000001", 75 => "000000111001100100100", 
    76 => "000000101111100010001", 77 => "000000100111001111000", 
    78 => "000000100000011000011", 79 => "000000011010101101111", 
    80 => "000000010110000100011", 81 => "000000010010001101100", 
    82 => "000000001111000001110", 83 => "000000001100011001101", 
    84 => "000000001010001111100", 85 => "000000001000011100111", 
    86 => "000000000110111110100", 87 => "000000000101110000011", 
    88 => "000000000100110000001", 89 => "000000000011111011000", 
    90 => "000000000011001111001", 91 => "000000000010101011000", 
    92 => "000000000010001101001", 93 => "000000000001110100100", 
    94 => "000000000001100000001", 95 => "000000000001001111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity apply_rotary_pos_g8j is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of apply_rotary_pos_g8j is
    component apply_rotary_pos_g8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    apply_rotary_pos_g8j_rom_U :  component apply_rotary_pos_g8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


