// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_q_0_V_address0,
        input_q_0_V_ce0,
        input_q_0_V_q0,
        input_q_0_V_address1,
        input_q_0_V_ce1,
        input_q_0_V_q1,
        input_k_0_V_address0,
        input_k_0_V_ce0,
        input_k_0_V_q0,
        input_k_0_V_address1,
        input_k_0_V_ce1,
        input_k_0_V_q1,
        output_q_0_0_V_address0,
        output_q_0_0_V_ce0,
        output_q_0_0_V_we0,
        output_q_0_0_V_d0,
        output_q_1_0_V_address0,
        output_q_1_0_V_ce0,
        output_q_1_0_V_we0,
        output_q_1_0_V_d0,
        output_q_2_0_V_address0,
        output_q_2_0_V_ce0,
        output_q_2_0_V_we0,
        output_q_2_0_V_d0,
        output_q_3_0_V_address0,
        output_q_3_0_V_ce0,
        output_q_3_0_V_we0,
        output_q_3_0_V_d0,
        output_k_0_V_address0,
        output_k_0_V_ce0,
        output_k_0_V_we0,
        output_k_0_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_q_0_V_address0;
output   input_q_0_V_ce0;
input  [37:0] input_q_0_V_q0;
output  [6:0] input_q_0_V_address1;
output   input_q_0_V_ce1;
input  [37:0] input_q_0_V_q1;
output  [6:0] input_k_0_V_address0;
output   input_k_0_V_ce0;
input  [37:0] input_k_0_V_q0;
output  [6:0] input_k_0_V_address1;
output   input_k_0_V_ce1;
input  [37:0] input_k_0_V_q1;
output  [4:0] output_q_0_0_V_address0;
output   output_q_0_0_V_ce0;
output   output_q_0_0_V_we0;
output  [37:0] output_q_0_0_V_d0;
output  [4:0] output_q_1_0_V_address0;
output   output_q_1_0_V_ce0;
output   output_q_1_0_V_we0;
output  [37:0] output_q_1_0_V_d0;
output  [4:0] output_q_2_0_V_address0;
output   output_q_2_0_V_ce0;
output   output_q_2_0_V_we0;
output  [37:0] output_q_2_0_V_d0;
output  [4:0] output_q_3_0_V_address0;
output   output_q_3_0_V_ce0;
output   output_q_3_0_V_we0;
output  [37:0] output_q_3_0_V_d0;
output  [6:0] output_k_0_V_address0;
output   output_k_0_V_ce0;
output   output_k_0_V_we0;
output  [37:0] output_k_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] input_q_0_V_address0;
reg input_q_0_V_ce0;
reg input_q_0_V_ce1;
reg[6:0] input_k_0_V_address0;
reg input_k_0_V_ce0;
reg input_k_0_V_ce1;
reg output_q_0_0_V_ce0;
reg output_q_0_0_V_we0;
reg output_q_1_0_V_ce0;
reg output_q_1_0_V_we0;
reg output_q_2_0_V_ce0;
reg output_q_2_0_V_we0;
reg output_q_3_0_V_ce0;
reg output_q_3_0_V_we0;
reg output_k_0_V_ce0;
reg output_k_0_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_tab_V_5_address0;
reg    cos_tab_V_5_ce0;
wire   [20:0] cos_tab_V_5_q0;
wire   [6:0] sin_tab_V_5_address0;
reg    sin_tab_V_5_ce0;
wire   [20:0] sin_tab_V_5_q0;
reg   [37:0] reg_356;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
reg   [37:0] reg_360;
wire    ap_CS_fsm_state11;
wire   [2:0] i_fu_370_p2;
reg   [2:0] i_reg_668;
wire    ap_CS_fsm_state2;
wire   [7:0] sub_ln1265_fu_396_p2;
reg   [7:0] sub_ln1265_reg_673;
wire   [0:0] icmp_ln168_fu_364_p2;
wire   [3:0] add_ln170_fu_412_p2;
reg   [3:0] add_ln170_reg_682;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln203_fu_427_p1;
reg  signed [63:0] sext_ln203_reg_687;
wire   [0:0] icmp_ln170_fu_406_p2;
wire  signed [63:0] sext_ln1265_fu_448_p1;
reg  signed [63:0] sext_ln1265_reg_703;
wire   [2:0] i_2_fu_474_p2;
reg   [2:0] i_2_reg_722;
wire    ap_CS_fsm_state6;
wire   [7:0] sub_ln1116_fu_500_p2;
reg   [7:0] sub_ln1116_reg_727;
wire   [0:0] icmp_ln180_fu_468_p2;
wire   [5:0] sub_ln203_fu_518_p2;
reg   [5:0] sub_ln203_reg_732;
wire   [4:0] add_ln182_fu_530_p2;
reg   [4:0] add_ln182_reg_740;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln182_fu_524_p2;
reg   [6:0] input_k_0_V_addr_2_reg_750;
reg   [6:0] output_k_0_V_addr_reg_755;
reg   [6:0] rotated_k_0_V_addr_2_reg_765;
wire   [1:0] trunc_ln203_fu_560_p1;
reg   [1:0] trunc_ln203_reg_780;
wire   [5:0] add_ln203_8_fu_578_p2;
reg   [5:0] add_ln203_8_reg_784;
reg   [20:0] cos_tab_V_5_load_reg_789;
reg   [20:0] sin_tab_V_5_load_reg_794;
wire   [37:0] rotated_q_0_V_q0;
reg   [37:0] rotated_q_0_V_load_reg_799;
wire  signed [57:0] sext_ln1118_6_fu_587_p1;
reg  signed [57:0] sext_ln1118_6_reg_804;
wire    ap_CS_fsm_state9;
wire   [57:0] mul_ln1118_fu_590_p2;
reg   [57:0] mul_ln1118_reg_809;
wire  signed [57:0] sext_ln1118_8_fu_599_p1;
reg  signed [57:0] sext_ln1118_8_reg_814;
wire   [57:0] mul_ln1118_4_fu_602_p2;
reg   [57:0] mul_ln1118_4_reg_819;
wire   [37:0] rotated_k_0_V_q0;
reg   [37:0] rotated_k_0_V_load_reg_824;
wire   [57:0] mul_ln1118_5_fu_637_p2;
reg   [57:0] mul_ln1118_5_reg_829;
wire    ap_CS_fsm_state12;
wire   [57:0] mul_ln1118_6_fu_645_p2;
reg   [57:0] mul_ln1118_6_reg_834;
reg   [6:0] rotated_q_0_V_address0;
reg    rotated_q_0_V_ce0;
reg    rotated_q_0_V_we0;
reg   [37:0] rotated_q_0_V_d0;
reg   [6:0] rotated_k_0_V_address0;
reg    rotated_k_0_V_ce0;
reg    rotated_k_0_V_we0;
reg   [37:0] rotated_k_0_V_d0;
reg   [2:0] i_0_reg_312;
reg   [3:0] k_0_0_reg_323;
wire    ap_CS_fsm_state5;
reg   [2:0] i14_0_reg_334;
reg   [4:0] k16_0_0_reg_345;
wire    ap_CS_fsm_state13;
wire  signed [63:0] sext_ln1116_fu_551_p1;
wire   [63:0] zext_ln183_fu_536_p1;
wire  signed [63:0] sext_ln203_3_fu_626_p1;
wire    ap_CS_fsm_state10;
wire   [37:0] sub_ln703_fu_454_p2;
wire   [37:0] sub_ln703_38_fu_461_p2;
wire   [5:0] tmp_66_fu_384_p3;
wire   [7:0] tmp_65_fu_376_p3;
wire   [7:0] zext_ln1265_fu_392_p1;
wire   [7:0] zext_ln203_14_fu_418_p1;
wire   [7:0] add_ln203_fu_422_p2;
wire   [4:0] zext_ln170_fu_402_p1;
wire   [4:0] add_ln171_fu_433_p2;
wire   [7:0] zext_ln1265_3_fu_439_p1;
wire   [7:0] add_ln1265_fu_443_p2;
wire   [5:0] tmp_68_fu_488_p3;
wire   [7:0] tmp_67_fu_480_p3;
wire   [7:0] zext_ln1116_fu_496_p1;
wire   [3:0] tmp_69_fu_506_p3;
wire   [5:0] zext_ln203_fu_514_p1;
wire   [7:0] zext_ln1116_1_fu_542_p1;
wire   [7:0] add_ln1116_fu_546_p2;
wire   [2:0] tmp_92_fu_564_p4;
wire   [5:0] zext_ln203_15_fu_574_p1;
wire  signed [20:0] mul_ln1118_fu_590_p0;
wire  signed [37:0] mul_ln1118_fu_590_p1;
wire  signed [20:0] mul_ln1118_4_fu_602_p0;
wire  signed [37:0] mul_ln1118_4_fu_602_p1;
wire   [57:0] add_ln1192_fu_608_p2;
wire  signed [20:0] mul_ln1118_5_fu_637_p0;
wire  signed [37:0] mul_ln1118_5_fu_637_p1;
wire  signed [20:0] mul_ln1118_6_fu_645_p0;
wire  signed [37:0] mul_ln1118_6_fu_645_p1;
wire   [57:0] add_ln1192_1_fu_650_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

apply_rotary_pos_fYi #(
    .DataWidth( 21 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
cos_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_tab_V_5_address0),
    .ce0(cos_tab_V_5_ce0),
    .q0(cos_tab_V_5_q0)
);

apply_rotary_pos_g8j #(
    .DataWidth( 21 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
sin_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_tab_V_5_address0),
    .ce0(sin_tab_V_5_ce0),
    .q0(sin_tab_V_5_q0)
);

apply_rotary_pos_hbi #(
    .DataWidth( 38 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
rotated_q_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_V_address0),
    .ce0(rotated_q_0_V_ce0),
    .we0(rotated_q_0_V_we0),
    .d0(rotated_q_0_V_d0),
    .q0(rotated_q_0_V_q0)
);

apply_rotary_pos_hbi #(
    .DataWidth( 38 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
rotated_k_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_V_address0),
    .ce0(rotated_k_0_V_ce0),
    .we0(rotated_k_0_V_we0),
    .d0(rotated_k_0_V_d0),
    .q0(rotated_k_0_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln168_fu_364_p2 == 1'd1))) begin
        i14_0_reg_334 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln182_fu_524_p2 == 1'd1))) begin
        i14_0_reg_334 <= i_2_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_312 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_406_p2 == 1'd1))) begin
        i_0_reg_312 <= i_reg_668;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k16_0_0_reg_345 <= add_ln182_reg_740;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln180_fu_468_p2 == 1'd0))) begin
        k16_0_0_reg_345 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_323 <= add_ln170_reg_682;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln168_fu_364_p2 == 1'd0))) begin
        k_0_0_reg_323 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln170_reg_682 <= add_ln170_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln182_reg_740 <= add_ln182_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln182_fu_524_p2 == 1'd0))) begin
        add_ln203_8_reg_784 <= add_ln203_8_fu_578_p2;
        input_k_0_V_addr_2_reg_750 <= sext_ln1116_fu_551_p1;
        output_k_0_V_addr_reg_755 <= sext_ln1116_fu_551_p1;
        rotated_k_0_V_addr_2_reg_765 <= sext_ln1116_fu_551_p1;
        trunc_ln203_reg_780 <= trunc_ln203_fu_560_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cos_tab_V_5_load_reg_789 <= cos_tab_V_5_q0;
        rotated_q_0_V_load_reg_799 <= rotated_q_0_V_q0;
        sin_tab_V_5_load_reg_794 <= sin_tab_V_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_722 <= i_2_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_668 <= i_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln1118_4_reg_819 <= mul_ln1118_4_fu_602_p2;
        mul_ln1118_reg_809 <= mul_ln1118_fu_590_p2;
        sext_ln1118_6_reg_804 <= sext_ln1118_6_fu_587_p1;
        sext_ln1118_8_reg_814 <= sext_ln1118_8_fu_599_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln1118_5_reg_829 <= mul_ln1118_5_fu_637_p2;
        mul_ln1118_6_reg_834 <= mul_ln1118_6_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_356 <= input_q_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_360 <= input_k_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        rotated_k_0_V_load_reg_824 <= rotated_k_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_406_p2 == 1'd0))) begin
        sext_ln1265_reg_703 <= sext_ln1265_fu_448_p1;
        sext_ln203_reg_687 <= sext_ln203_fu_427_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln180_fu_468_p2 == 1'd0))) begin
        sub_ln1116_reg_727[7 : 3] <= sub_ln1116_fu_500_p2[7 : 3];
        sub_ln203_reg_732[5 : 1] <= sub_ln203_fu_518_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln168_fu_364_p2 == 1'd0))) begin
        sub_ln1265_reg_673[7 : 3] <= sub_ln1265_fu_396_p2[7 : 3];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln180_fu_468_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln180_fu_468_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cos_tab_V_5_ce0 = 1'b1;
    end else begin
        cos_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_k_0_V_address0 = input_k_0_V_addr_2_reg_750;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_address0 = sext_ln1265_fu_448_p1;
    end else begin
        input_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        input_k_0_V_ce0 = 1'b1;
    end else begin
        input_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_ce1 = 1'b1;
    end else begin
        input_k_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_q_0_V_address0 = sext_ln1116_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_address0 = sext_ln1265_fu_448_p1;
    end else begin
        input_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        input_q_0_V_ce0 = 1'b1;
    end else begin
        input_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_ce1 = 1'b1;
    end else begin
        input_q_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_k_0_V_ce0 = 1'b1;
    end else begin
        output_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_k_0_V_we0 = 1'b1;
    end else begin
        output_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_0_0_V_ce0 = 1'b1;
    end else begin
        output_q_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln203_reg_780 == 2'd0))) begin
        output_q_0_0_V_we0 = 1'b1;
    end else begin
        output_q_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_1_0_V_ce0 = 1'b1;
    end else begin
        output_q_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln203_reg_780 == 2'd1))) begin
        output_q_1_0_V_we0 = 1'b1;
    end else begin
        output_q_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_2_0_V_ce0 = 1'b1;
    end else begin
        output_q_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln203_reg_780 == 2'd2))) begin
        output_q_2_0_V_we0 = 1'b1;
    end else begin
        output_q_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_3_0_V_ce0 = 1'b1;
    end else begin
        output_q_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln203_reg_780 == 2'd3))) begin
        output_q_3_0_V_we0 = 1'b1;
    end else begin
        output_q_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rotated_k_0_V_address0 = rotated_k_0_V_addr_2_reg_765;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_address0 = sext_ln203_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_address0 = sext_ln1265_reg_703;
    end else begin
        rotated_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_k_0_V_ce0 = 1'b1;
    end else begin
        rotated_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_d0 = sub_ln703_38_fu_461_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_d0 = input_k_0_V_q1;
    end else begin
        rotated_k_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_k_0_V_we0 = 1'b1;
    end else begin
        rotated_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rotated_q_0_V_address0 = sext_ln1116_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_address0 = sext_ln203_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_address0 = sext_ln1265_reg_703;
    end else begin
        rotated_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_q_0_V_ce0 = 1'b1;
    end else begin
        rotated_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_d0 = sub_ln703_fu_454_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_d0 = input_q_0_V_q1;
    end else begin
        rotated_q_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_q_0_V_we0 = 1'b1;
    end else begin
        rotated_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sin_tab_V_5_ce0 = 1'b1;
    end else begin
        sin_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln168_fu_364_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln170_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln180_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln182_fu_524_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_546_p2 = (sub_ln1116_reg_727 + zext_ln1116_1_fu_542_p1);

assign add_ln1192_1_fu_650_p2 = (mul_ln1118_5_reg_829 + mul_ln1118_6_reg_834);

assign add_ln1192_fu_608_p2 = (mul_ln1118_reg_809 + mul_ln1118_4_reg_819);

assign add_ln1265_fu_443_p2 = (sub_ln1265_reg_673 + zext_ln1265_3_fu_439_p1);

assign add_ln170_fu_412_p2 = (k_0_0_reg_323 + 4'd1);

assign add_ln171_fu_433_p2 = (zext_ln170_fu_402_p1 + 5'd12);

assign add_ln182_fu_530_p2 = (k16_0_0_reg_345 + 5'd1);

assign add_ln203_8_fu_578_p2 = (sub_ln203_reg_732 + zext_ln203_15_fu_574_p1);

assign add_ln203_fu_422_p2 = (sub_ln1265_reg_673 + zext_ln203_14_fu_418_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cos_tab_V_5_address0 = zext_ln183_fu_536_p1;

assign i_2_fu_474_p2 = (i14_0_reg_334 + 3'd1);

assign i_fu_370_p2 = (i_0_reg_312 + 3'd1);

assign icmp_ln168_fu_364_p2 = ((i_0_reg_312 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_406_p2 = ((k_0_0_reg_323 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_468_p2 = ((i14_0_reg_334 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_524_p2 = ((k16_0_0_reg_345 == 5'd24) ? 1'b1 : 1'b0);

assign input_k_0_V_address1 = sext_ln203_fu_427_p1;

assign input_q_0_V_address1 = sext_ln203_fu_427_p1;

assign mul_ln1118_4_fu_602_p0 = sin_tab_V_5_load_reg_794;

assign mul_ln1118_4_fu_602_p1 = rotated_q_0_V_load_reg_799;

assign mul_ln1118_4_fu_602_p2 = ($signed(mul_ln1118_4_fu_602_p0) * $signed(mul_ln1118_4_fu_602_p1));

assign mul_ln1118_5_fu_637_p0 = sext_ln1118_6_reg_804;

assign mul_ln1118_5_fu_637_p1 = reg_360;

assign mul_ln1118_5_fu_637_p2 = ($signed(mul_ln1118_5_fu_637_p0) * $signed(mul_ln1118_5_fu_637_p1));

assign mul_ln1118_6_fu_645_p0 = sext_ln1118_8_reg_814;

assign mul_ln1118_6_fu_645_p1 = rotated_k_0_V_load_reg_824;

assign mul_ln1118_6_fu_645_p2 = ($signed(mul_ln1118_6_fu_645_p0) * $signed(mul_ln1118_6_fu_645_p1));

assign mul_ln1118_fu_590_p0 = cos_tab_V_5_load_reg_789;

assign mul_ln1118_fu_590_p1 = reg_356;

assign mul_ln1118_fu_590_p2 = ($signed(mul_ln1118_fu_590_p0) * $signed(mul_ln1118_fu_590_p1));

assign output_k_0_V_address0 = output_k_0_V_addr_reg_755;

assign output_k_0_V_d0 = {{add_ln1192_1_fu_650_p2[57:20]}};

assign output_q_0_0_V_address0 = sext_ln203_3_fu_626_p1;

assign output_q_0_0_V_d0 = {{add_ln1192_fu_608_p2[57:20]}};

assign output_q_1_0_V_address0 = sext_ln203_3_fu_626_p1;

assign output_q_1_0_V_d0 = {{add_ln1192_fu_608_p2[57:20]}};

assign output_q_2_0_V_address0 = sext_ln203_3_fu_626_p1;

assign output_q_2_0_V_d0 = {{add_ln1192_fu_608_p2[57:20]}};

assign output_q_3_0_V_address0 = sext_ln203_3_fu_626_p1;

assign output_q_3_0_V_d0 = {{add_ln1192_fu_608_p2[57:20]}};

assign sext_ln1116_fu_551_p1 = $signed(add_ln1116_fu_546_p2);

assign sext_ln1118_6_fu_587_p1 = $signed(cos_tab_V_5_load_reg_789);

assign sext_ln1118_8_fu_599_p1 = $signed(sin_tab_V_5_load_reg_794);

assign sext_ln1265_fu_448_p1 = $signed(add_ln1265_fu_443_p2);

assign sext_ln203_3_fu_626_p1 = $signed(add_ln203_8_reg_784);

assign sext_ln203_fu_427_p1 = $signed(add_ln203_fu_422_p2);

assign sin_tab_V_5_address0 = zext_ln183_fu_536_p1;

assign sub_ln1116_fu_500_p2 = (tmp_67_fu_480_p3 - zext_ln1116_fu_496_p1);

assign sub_ln1265_fu_396_p2 = (tmp_65_fu_376_p3 - zext_ln1265_fu_392_p1);

assign sub_ln203_fu_518_p2 = (tmp_68_fu_488_p3 - zext_ln203_fu_514_p1);

assign sub_ln703_38_fu_461_p2 = (38'd0 - reg_360);

assign sub_ln703_fu_454_p2 = (38'd0 - reg_356);

assign tmp_65_fu_376_p3 = {{i_0_reg_312}, {5'd0}};

assign tmp_66_fu_384_p3 = {{i_0_reg_312}, {3'd0}};

assign tmp_67_fu_480_p3 = {{i14_0_reg_334}, {5'd0}};

assign tmp_68_fu_488_p3 = {{i14_0_reg_334}, {3'd0}};

assign tmp_69_fu_506_p3 = {{i14_0_reg_334}, {1'd0}};

assign tmp_92_fu_564_p4 = {{k16_0_0_reg_345[4:2]}};

assign trunc_ln203_fu_560_p1 = k16_0_0_reg_345[1:0];

assign zext_ln1116_1_fu_542_p1 = k16_0_0_reg_345;

assign zext_ln1116_fu_496_p1 = tmp_68_fu_488_p3;

assign zext_ln1265_3_fu_439_p1 = add_ln171_fu_433_p2;

assign zext_ln1265_fu_392_p1 = tmp_66_fu_384_p3;

assign zext_ln170_fu_402_p1 = k_0_0_reg_323;

assign zext_ln183_fu_536_p1 = k16_0_0_reg_345;

assign zext_ln203_14_fu_418_p1 = k_0_0_reg_323;

assign zext_ln203_15_fu_574_p1 = tmp_92_fu_564_p4;

assign zext_ln203_fu_514_p1 = tmp_69_fu_506_p3;

always @ (posedge ap_clk) begin
    sub_ln1265_reg_673[2:0] <= 3'b000;
    sub_ln1116_reg_727[2:0] <= 3'b000;
    sub_ln203_reg_732[0] <= 1'b0;
end

endmodule //apply_rotary_pos_emb
