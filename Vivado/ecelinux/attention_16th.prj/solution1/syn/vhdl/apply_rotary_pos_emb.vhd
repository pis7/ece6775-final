-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_rotary_pos_emb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_q_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_q_0_V_ce0 : OUT STD_LOGIC;
    input_q_0_V_q0 : IN STD_LOGIC_VECTOR (37 downto 0);
    input_q_0_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_q_0_V_ce1 : OUT STD_LOGIC;
    input_q_0_V_q1 : IN STD_LOGIC_VECTOR (37 downto 0);
    input_k_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_k_0_V_ce0 : OUT STD_LOGIC;
    input_k_0_V_q0 : IN STD_LOGIC_VECTOR (37 downto 0);
    input_k_0_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_k_0_V_ce1 : OUT STD_LOGIC;
    input_k_0_V_q1 : IN STD_LOGIC_VECTOR (37 downto 0);
    output_q_0_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_q_0_0_V_ce0 : OUT STD_LOGIC;
    output_q_0_0_V_we0 : OUT STD_LOGIC;
    output_q_0_0_V_d0 : OUT STD_LOGIC_VECTOR (37 downto 0);
    output_q_1_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_q_1_0_V_ce0 : OUT STD_LOGIC;
    output_q_1_0_V_we0 : OUT STD_LOGIC;
    output_q_1_0_V_d0 : OUT STD_LOGIC_VECTOR (37 downto 0);
    output_q_2_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_q_2_0_V_ce0 : OUT STD_LOGIC;
    output_q_2_0_V_we0 : OUT STD_LOGIC;
    output_q_2_0_V_d0 : OUT STD_LOGIC_VECTOR (37 downto 0);
    output_q_3_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_q_3_0_V_ce0 : OUT STD_LOGIC;
    output_q_3_0_V_we0 : OUT STD_LOGIC;
    output_q_3_0_V_d0 : OUT STD_LOGIC_VECTOR (37 downto 0);
    output_k_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_k_0_V_ce0 : OUT STD_LOGIC;
    output_k_0_V_we0 : OUT STD_LOGIC;
    output_k_0_V_d0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
end;


architecture behav of apply_rotary_pos_emb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_tab_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_tab_V_5_ce0 : STD_LOGIC;
    signal cos_tab_V_5_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal sin_tab_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_tab_V_5_ce0 : STD_LOGIC;
    signal sin_tab_V_5_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_360 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_668 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln1265_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1265_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln168_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln170_fu_412_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln170_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln203_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_reg_687 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln170_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1265_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_474_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_722 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1116_fu_500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1116_reg_727 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln180_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_518_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln203_reg_732 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln182_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln182_reg_740 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln182_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_k_0_V_addr_2_reg_750 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_k_0_V_addr_reg_755 : STD_LOGIC_VECTOR (6 downto 0);
    signal rotated_k_0_V_addr_2_reg_765 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln203_fu_560_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_reg_780 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln203_8_fu_578_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_8_reg_784 : STD_LOGIC_VECTOR (5 downto 0);
    signal cos_tab_V_5_load_reg_789 : STD_LOGIC_VECTOR (20 downto 0);
    signal sin_tab_V_5_load_reg_794 : STD_LOGIC_VECTOR (20 downto 0);
    signal rotated_q_0_V_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal rotated_q_0_V_load_reg_799 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1118_6_fu_587_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal sext_ln1118_6_reg_804 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mul_ln1118_fu_590_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1118_reg_809 : STD_LOGIC_VECTOR (57 downto 0);
    signal sext_ln1118_8_fu_599_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal sext_ln1118_8_reg_814 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1118_4_fu_602_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1118_4_reg_819 : STD_LOGIC_VECTOR (57 downto 0);
    signal rotated_k_0_V_q0 : STD_LOGIC_VECTOR (37 downto 0);
    signal rotated_k_0_V_load_reg_824 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_5_fu_637_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1118_5_reg_829 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln1118_6_fu_645_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1118_6_reg_834 : STD_LOGIC_VECTOR (57 downto 0);
    signal rotated_q_0_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rotated_q_0_V_ce0 : STD_LOGIC;
    signal rotated_q_0_V_we0 : STD_LOGIC;
    signal rotated_q_0_V_d0 : STD_LOGIC_VECTOR (37 downto 0);
    signal rotated_k_0_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rotated_k_0_V_ce0 : STD_LOGIC;
    signal rotated_k_0_V_we0 : STD_LOGIC;
    signal rotated_k_0_V_d0 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_0_reg_312 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_0_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i14_0_reg_334 : STD_LOGIC_VECTOR (2 downto 0);
    signal k16_0_0_reg_345 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln1116_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln183_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_3_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln703_fu_454_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln703_38_fu_461_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_66_fu_384_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1265_fu_392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_14_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln170_fu_402_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln171_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1265_3_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1265_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_488_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1116_fu_496_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_506_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_fu_514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_1_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1116_fu_546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_564_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_15_fu_574_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1118_fu_590_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_fu_590_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_4_fu_602_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_4_fu_602_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln1192_fu_608_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln1118_5_fu_637_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_5_fu_637_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_6_fu_645_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_6_fu_645_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln1192_1_fu_650_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component apply_rotary_pos_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component apply_rotary_pos_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component apply_rotary_pos_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (37 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    cos_tab_V_5_U : component apply_rotary_pos_fYi
    generic map (
        DataWidth => 21,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_tab_V_5_address0,
        ce0 => cos_tab_V_5_ce0,
        q0 => cos_tab_V_5_q0);

    sin_tab_V_5_U : component apply_rotary_pos_g8j
    generic map (
        DataWidth => 21,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_tab_V_5_address0,
        ce0 => sin_tab_V_5_ce0,
        q0 => sin_tab_V_5_q0);

    rotated_q_0_V_U : component apply_rotary_pos_hbi
    generic map (
        DataWidth => 38,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_q_0_V_address0,
        ce0 => rotated_q_0_V_ce0,
        we0 => rotated_q_0_V_we0,
        d0 => rotated_q_0_V_d0,
        q0 => rotated_q_0_V_q0);

    rotated_k_0_V_U : component apply_rotary_pos_hbi
    generic map (
        DataWidth => 38,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_k_0_V_address0,
        ce0 => rotated_k_0_V_ce0,
        we0 => rotated_k_0_V_we0,
        d0 => rotated_k_0_V_d0,
        q0 => rotated_k_0_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i14_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln168_fu_364_p2 = ap_const_lv1_1))) then 
                i14_0_reg_334 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln182_fu_524_p2 = ap_const_lv1_1))) then 
                i14_0_reg_334 <= i_2_reg_722;
            end if; 
        end if;
    end process;

    i_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_312 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_406_p2 = ap_const_lv1_1))) then 
                i_0_reg_312 <= i_reg_668;
            end if; 
        end if;
    end process;

    k16_0_0_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k16_0_0_reg_345 <= add_ln182_reg_740;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln180_fu_468_p2 = ap_const_lv1_0))) then 
                k16_0_0_reg_345 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_0_reg_323 <= add_ln170_reg_682;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln168_fu_364_p2 = ap_const_lv1_0))) then 
                k_0_0_reg_323 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln170_reg_682 <= add_ln170_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln182_reg_740 <= add_ln182_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln182_fu_524_p2 = ap_const_lv1_0))) then
                add_ln203_8_reg_784 <= add_ln203_8_fu_578_p2;
                input_k_0_V_addr_2_reg_750 <= sext_ln1116_fu_551_p1(7 - 1 downto 0);
                output_k_0_V_addr_reg_755 <= sext_ln1116_fu_551_p1(7 - 1 downto 0);
                rotated_k_0_V_addr_2_reg_765 <= sext_ln1116_fu_551_p1(7 - 1 downto 0);
                trunc_ln203_reg_780 <= trunc_ln203_fu_560_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cos_tab_V_5_load_reg_789 <= cos_tab_V_5_q0;
                rotated_q_0_V_load_reg_799 <= rotated_q_0_V_q0;
                sin_tab_V_5_load_reg_794 <= sin_tab_V_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_722 <= i_2_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_668 <= i_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln1118_4_reg_819 <= mul_ln1118_4_fu_602_p2;
                mul_ln1118_reg_809 <= mul_ln1118_fu_590_p2;
                sext_ln1118_6_reg_804 <= sext_ln1118_6_fu_587_p1;
                sext_ln1118_8_reg_814 <= sext_ln1118_8_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln1118_5_reg_829 <= mul_ln1118_5_fu_637_p2;
                mul_ln1118_6_reg_834 <= mul_ln1118_6_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_356 <= input_q_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_360 <= input_k_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                rotated_k_0_V_load_reg_824 <= rotated_k_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_406_p2 = ap_const_lv1_0))) then
                sext_ln1265_reg_703 <= sext_ln1265_fu_448_p1;
                sext_ln203_reg_687 <= sext_ln203_fu_427_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln180_fu_468_p2 = ap_const_lv1_0))) then
                    sub_ln1116_reg_727(7 downto 3) <= sub_ln1116_fu_500_p2(7 downto 3);
                    sub_ln203_reg_732(5 downto 1) <= sub_ln203_fu_518_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln168_fu_364_p2 = ap_const_lv1_0))) then
                    sub_ln1265_reg_673(7 downto 3) <= sub_ln1265_fu_396_p2(7 downto 3);
            end if;
        end if;
    end process;
    sub_ln1265_reg_673(2 downto 0) <= "000";
    sub_ln1116_reg_727(2 downto 0) <= "000";
    sub_ln203_reg_732(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln168_fu_364_p2, ap_CS_fsm_state3, icmp_ln170_fu_406_p2, ap_CS_fsm_state6, icmp_ln180_fu_468_p2, ap_CS_fsm_state7, icmp_ln182_fu_524_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln168_fu_364_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln170_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln180_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln182_fu_524_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1116_fu_546_p2 <= std_logic_vector(unsigned(sub_ln1116_reg_727) + unsigned(zext_ln1116_1_fu_542_p1));
    add_ln1192_1_fu_650_p2 <= std_logic_vector(unsigned(mul_ln1118_5_reg_829) + unsigned(mul_ln1118_6_reg_834));
    add_ln1192_fu_608_p2 <= std_logic_vector(unsigned(mul_ln1118_reg_809) + unsigned(mul_ln1118_4_reg_819));
    add_ln1265_fu_443_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_673) + unsigned(zext_ln1265_3_fu_439_p1));
    add_ln170_fu_412_p2 <= std_logic_vector(unsigned(k_0_0_reg_323) + unsigned(ap_const_lv4_1));
    add_ln171_fu_433_p2 <= std_logic_vector(unsigned(zext_ln170_fu_402_p1) + unsigned(ap_const_lv5_C));
    add_ln182_fu_530_p2 <= std_logic_vector(unsigned(k16_0_0_reg_345) + unsigned(ap_const_lv5_1));
    add_ln203_8_fu_578_p2 <= std_logic_vector(unsigned(sub_ln203_reg_732) + unsigned(zext_ln203_15_fu_574_p1));
    add_ln203_fu_422_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_673) + unsigned(zext_ln203_14_fu_418_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln180_fu_468_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln180_fu_468_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln180_fu_468_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln180_fu_468_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cos_tab_V_5_address0 <= zext_ln183_fu_536_p1(7 - 1 downto 0);

    cos_tab_V_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cos_tab_V_5_ce0 <= ap_const_logic_1;
        else 
            cos_tab_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_474_p2 <= std_logic_vector(unsigned(i14_0_reg_334) + unsigned(ap_const_lv3_1));
    i_fu_370_p2 <= std_logic_vector(unsigned(i_0_reg_312) + unsigned(ap_const_lv3_1));
    icmp_ln168_fu_364_p2 <= "1" when (i_0_reg_312 = ap_const_lv3_4) else "0";
    icmp_ln170_fu_406_p2 <= "1" when (k_0_0_reg_323 = ap_const_lv4_C) else "0";
    icmp_ln180_fu_468_p2 <= "1" when (i14_0_reg_334 = ap_const_lv3_4) else "0";
    icmp_ln182_fu_524_p2 <= "1" when (k16_0_0_reg_345 = ap_const_lv5_18) else "0";

    input_k_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_448_p1, input_k_0_V_addr_2_reg_750, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_k_0_V_address0 <= input_k_0_V_addr_2_reg_750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_address0 <= sext_ln1265_fu_448_p1(7 - 1 downto 0);
        else 
            input_k_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;

    input_k_0_V_address1 <= sext_ln203_fu_427_p1(7 - 1 downto 0);

    input_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_k_0_V_ce0 <= ap_const_logic_1;
        else 
            input_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_k_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_ce1 <= ap_const_logic_1;
        else 
            input_k_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_448_p1, ap_CS_fsm_state7, sext_ln1116_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_q_0_V_address0 <= sext_ln1116_fu_551_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_address0 <= sext_ln1265_fu_448_p1(7 - 1 downto 0);
        else 
            input_q_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;

    input_q_0_V_address1 <= sext_ln203_fu_427_p1(7 - 1 downto 0);

    input_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_q_0_V_ce0 <= ap_const_logic_1;
        else 
            input_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_ce1 <= ap_const_logic_1;
        else 
            input_q_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_4_fu_602_p0 <= sin_tab_V_5_load_reg_794;
    mul_ln1118_4_fu_602_p1 <= rotated_q_0_V_load_reg_799;
    mul_ln1118_4_fu_602_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_4_fu_602_p0) * signed(mul_ln1118_4_fu_602_p1))), 58));
    mul_ln1118_5_fu_637_p0 <= sext_ln1118_6_reg_804(21 - 1 downto 0);
    mul_ln1118_5_fu_637_p1 <= reg_360;
    mul_ln1118_5_fu_637_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_5_fu_637_p0) * signed(mul_ln1118_5_fu_637_p1))), 58));
    mul_ln1118_6_fu_645_p0 <= sext_ln1118_8_reg_814(21 - 1 downto 0);
    mul_ln1118_6_fu_645_p1 <= rotated_k_0_V_load_reg_824;
    mul_ln1118_6_fu_645_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_6_fu_645_p0) * signed(mul_ln1118_6_fu_645_p1))), 58));
    mul_ln1118_fu_590_p0 <= cos_tab_V_5_load_reg_789;
    mul_ln1118_fu_590_p1 <= reg_356;
    mul_ln1118_fu_590_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_590_p0) * signed(mul_ln1118_fu_590_p1))), 58));
    output_k_0_V_address0 <= output_k_0_V_addr_reg_755;

    output_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_k_0_V_ce0 <= ap_const_logic_1;
        else 
            output_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_k_0_V_d0 <= add_ln1192_1_fu_650_p2(57 downto 20);

    output_k_0_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_k_0_V_we0 <= ap_const_logic_1;
        else 
            output_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_0_V_address0 <= sext_ln203_3_fu_626_p1(5 - 1 downto 0);

    output_q_0_0_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_q_0_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_0_V_d0 <= add_ln1192_fu_608_p2(57 downto 20);

    output_q_0_0_V_we0_assign_proc : process(trunc_ln203_reg_780, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln203_reg_780 = ap_const_lv2_0))) then 
            output_q_0_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_0_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_1_0_V_address0 <= sext_ln203_3_fu_626_p1(5 - 1 downto 0);

    output_q_1_0_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_q_1_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_1_0_V_d0 <= add_ln1192_fu_608_p2(57 downto 20);

    output_q_1_0_V_we0_assign_proc : process(trunc_ln203_reg_780, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln203_reg_780 = ap_const_lv2_1))) then 
            output_q_1_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_1_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_2_0_V_address0 <= sext_ln203_3_fu_626_p1(5 - 1 downto 0);

    output_q_2_0_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_q_2_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_2_0_V_d0 <= add_ln1192_fu_608_p2(57 downto 20);

    output_q_2_0_V_we0_assign_proc : process(trunc_ln203_reg_780, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln203_reg_780 = ap_const_lv2_2))) then 
            output_q_2_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_2_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_3_0_V_address0 <= sext_ln203_3_fu_626_p1(5 - 1 downto 0);

    output_q_3_0_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_q_3_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_3_0_V_d0 <= add_ln1192_fu_608_p2(57 downto 20);

    output_q_3_0_V_we0_assign_proc : process(trunc_ln203_reg_780, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln203_reg_780 = ap_const_lv2_3))) then 
            output_q_3_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_3_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_address0_assign_proc : process(ap_CS_fsm_state4, sext_ln203_reg_687, sext_ln1265_reg_703, rotated_k_0_V_addr_2_reg_765, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rotated_k_0_V_address0 <= rotated_k_0_V_addr_2_reg_765;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_V_address0 <= sext_ln203_reg_687(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_address0 <= sext_ln1265_reg_703(7 - 1 downto 0);
        else 
            rotated_k_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    rotated_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            rotated_k_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_d0_assign_proc : process(input_k_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln703_38_fu_461_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_V_d0 <= sub_ln703_38_fu_461_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_d0 <= input_k_0_V_q1;
        else 
            rotated_k_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            rotated_k_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_address0_assign_proc : process(ap_CS_fsm_state4, sext_ln203_reg_687, sext_ln1265_reg_703, ap_CS_fsm_state7, ap_CS_fsm_state5, sext_ln1116_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rotated_q_0_V_address0 <= sext_ln1116_fu_551_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_q_0_V_address0 <= sext_ln203_reg_687(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_address0 <= sext_ln1265_reg_703(7 - 1 downto 0);
        else 
            rotated_q_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    rotated_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            rotated_q_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_d0_assign_proc : process(input_q_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln703_fu_454_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_q_0_V_d0 <= sub_ln703_fu_454_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_d0 <= input_q_0_V_q1;
        else 
            rotated_q_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            rotated_q_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1116_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_fu_546_p2),64));

        sext_ln1118_6_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_tab_V_5_load_reg_789),58));

        sext_ln1118_8_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_tab_V_5_load_reg_794),58));

        sext_ln1265_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1265_fu_443_p2),64));

        sext_ln203_3_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_8_reg_784),64));

        sext_ln203_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_422_p2),64));

    sin_tab_V_5_address0 <= zext_ln183_fu_536_p1(7 - 1 downto 0);

    sin_tab_V_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sin_tab_V_5_ce0 <= ap_const_logic_1;
        else 
            sin_tab_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1116_fu_500_p2 <= std_logic_vector(unsigned(tmp_67_fu_480_p3) - unsigned(zext_ln1116_fu_496_p1));
    sub_ln1265_fu_396_p2 <= std_logic_vector(unsigned(tmp_65_fu_376_p3) - unsigned(zext_ln1265_fu_392_p1));
    sub_ln203_fu_518_p2 <= std_logic_vector(unsigned(tmp_68_fu_488_p3) - unsigned(zext_ln203_fu_514_p1));
    sub_ln703_38_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv38_0) - unsigned(reg_360));
    sub_ln703_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv38_0) - unsigned(reg_356));
    tmp_65_fu_376_p3 <= (i_0_reg_312 & ap_const_lv5_0);
    tmp_66_fu_384_p3 <= (i_0_reg_312 & ap_const_lv3_0);
    tmp_67_fu_480_p3 <= (i14_0_reg_334 & ap_const_lv5_0);
    tmp_68_fu_488_p3 <= (i14_0_reg_334 & ap_const_lv3_0);
    tmp_69_fu_506_p3 <= (i14_0_reg_334 & ap_const_lv1_0);
    tmp_92_fu_564_p4 <= k16_0_0_reg_345(4 downto 2);
    trunc_ln203_fu_560_p1 <= k16_0_0_reg_345(2 - 1 downto 0);
    zext_ln1116_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_345),8));
    zext_ln1116_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_488_p3),8));
    zext_ln1265_3_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln171_fu_433_p2),8));
    zext_ln1265_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_384_p3),8));
    zext_ln170_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_323),5));
    zext_ln183_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_345),64));
    zext_ln203_14_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_323),8));
    zext_ln203_15_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_564_p4),6));
    zext_ln203_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_506_p3),6));
end behav;
