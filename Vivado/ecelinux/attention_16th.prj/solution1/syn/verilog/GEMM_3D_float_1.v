// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_1_0_0_V_address0,
        input_1_0_0_V_ce0,
        input_1_0_0_V_q0,
        input_1_1_0_V_address0,
        input_1_1_0_V_ce0,
        input_1_1_0_V_q0,
        input_1_2_0_V_address0,
        input_1_2_0_V_ce0,
        input_1_2_0_V_q0,
        input_1_3_0_V_address0,
        input_1_3_0_V_ce0,
        input_1_3_0_V_q0,
        input_2_0_V_address0,
        input_2_0_V_ce0,
        input_2_0_V_q0,
        input_2_1_V_address0,
        input_2_1_V_ce0,
        input_2_1_V_q0,
        input_2_2_V_address0,
        input_2_2_V_ce0,
        input_2_2_V_q0,
        input_2_3_V_address0,
        input_2_3_V_ce0,
        input_2_3_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_1_0_0_V_address0;
output   input_1_0_0_V_ce0;
input  [37:0] input_1_0_0_V_q0;
output  [4:0] input_1_1_0_V_address0;
output   input_1_1_0_V_ce0;
input  [37:0] input_1_1_0_V_q0;
output  [4:0] input_1_2_0_V_address0;
output   input_1_2_0_V_ce0;
input  [37:0] input_1_2_0_V_q0;
output  [4:0] input_1_3_0_V_address0;
output   input_1_3_0_V_ce0;
input  [37:0] input_1_3_0_V_q0;
output  [7:0] input_2_0_V_address0;
output   input_2_0_V_ce0;
input  [37:0] input_2_0_V_q0;
output  [7:0] input_2_1_V_address0;
output   input_2_1_V_ce0;
input  [37:0] input_2_1_V_q0;
output  [7:0] input_2_2_V_address0;
output   input_2_2_V_ce0;
input  [37:0] input_2_2_V_q0;
output  [7:0] input_2_3_V_address0;
output   input_2_3_V_ce0;
input  [37:0] input_2_3_V_q0;
output  [4:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [37:0] output_0_V_d0;
input  [37:0] output_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_1_0_0_V_ce0;
reg input_1_1_0_V_ce0;
reg input_1_2_0_V_ce0;
reg input_1_3_0_V_ce0;
reg input_2_0_V_ce0;
reg input_2_1_V_ce0;
reg input_2_2_V_ce0;
reg input_2_3_V_ce0;
reg[4:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg[37:0] output_0_V_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_239_p2;
reg   [2:0] i_reg_530;
wire    ap_CS_fsm_state2;
wire  signed [7:0] sext_ln1116_fu_275_p1;
reg  signed [7:0] sext_ln1116_reg_535;
wire   [0:0] icmp_ln236_fu_233_p2;
wire   [5:0] trunc_ln1116_fu_279_p1;
reg   [5:0] trunc_ln1116_reg_540;
wire   [2:0] add_ln238_fu_289_p2;
reg   [2:0] add_ln238_reg_548;
wire    ap_CS_fsm_state3;
wire   [8:0] zext_ln203_fu_295_p1;
reg   [8:0] zext_ln203_reg_553;
wire   [0:0] icmp_ln238_fu_283_p2;
reg   [4:0] output_0_V_addr_reg_558;
wire  signed [7:0] add_ln1116_fu_333_p2;
reg  signed [7:0] add_ln1116_reg_566;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln240_fu_313_p2;
wire   [8:0] add_ln1117_fu_364_p2;
reg   [8:0] add_ln1117_reg_571;
wire   [4:0] add_ln240_fu_369_p2;
reg   [4:0] add_ln240_reg_576;
wire    ap_CS_fsm_state5;
reg   [37:0] input_1_0_0_V_load_reg_621;
wire    ap_CS_fsm_state6;
reg   [37:0] input_2_0_V_load_reg_626;
reg   [37:0] input_1_1_0_V_load_reg_631;
reg   [37:0] input_2_1_V_load_reg_636;
reg   [37:0] input_1_2_0_V_load_reg_641;
reg   [37:0] input_2_2_V_load_reg_646;
reg   [37:0] input_1_3_0_V_load_reg_651;
reg   [37:0] input_2_3_V_load_reg_656;
wire   [57:0] mul_ln1192_fu_395_p2;
reg   [57:0] mul_ln1192_reg_661;
wire    ap_CS_fsm_state7;
reg   [37:0] output_0_V_load_reg_666;
wire   [57:0] mul_ln1192_1_fu_407_p2;
reg   [57:0] mul_ln1192_1_reg_671;
wire   [57:0] mul_ln1192_2_fu_419_p2;
reg   [57:0] mul_ln1192_2_reg_676;
wire   [57:0] mul_ln1192_3_fu_431_p2;
reg   [57:0] mul_ln1192_3_reg_681;
reg   [37:0] tmp_73_reg_686;
wire    ap_CS_fsm_state8;
reg   [37:0] trunc_ln708_s_reg_691;
wire    ap_CS_fsm_state9;
reg   [2:0] i_0_reg_200;
reg   [2:0] k_0_0_reg_211;
reg   [4:0] l_0_0_0_reg_222;
wire    ap_CS_fsm_state10;
wire  signed [63:0] sext_ln203_fu_308_p1;
wire  signed [63:0] sext_ln1116_2_fu_375_p1;
wire   [63:0] zext_ln1117_fu_382_p1;
wire   [5:0] tmp_70_fu_245_p3;
wire   [3:0] tmp_71_fu_257_p3;
wire   [6:0] zext_ln1116_fu_253_p1;
wire   [6:0] zext_ln1116_2_fu_265_p1;
wire  signed [6:0] sub_ln1116_fu_269_p2;
wire   [5:0] zext_ln203_16_fu_299_p1;
wire   [5:0] add_ln203_fu_303_p2;
wire   [2:0] tmp_93_fu_319_p4;
wire   [7:0] zext_ln1116_3_fu_329_p1;
wire   [5:0] trunc_ln1117_fu_338_p1;
wire   [8:0] p_shl2_cast_fu_342_p3;
wire   [8:0] p_shl3_cast_fu_350_p3;
wire   [8:0] sub_ln1117_fu_358_p2;
wire  signed [37:0] mul_ln1192_fu_395_p0;
wire  signed [37:0] mul_ln1192_fu_395_p1;
wire  signed [37:0] mul_ln1192_1_fu_407_p0;
wire  signed [37:0] mul_ln1192_1_fu_407_p1;
wire  signed [37:0] mul_ln1192_2_fu_419_p0;
wire  signed [37:0] mul_ln1192_2_fu_419_p1;
wire  signed [37:0] mul_ln1192_3_fu_431_p0;
wire  signed [37:0] mul_ln1192_3_fu_431_p1;
wire   [57:0] shl_ln_fu_437_p3;
wire   [57:0] add_ln1192_fu_444_p2;
wire   [37:0] tmp_72_fu_449_p4;
wire   [57:0] shl_ln728_4_fu_459_p3;
wire   [57:0] add_ln1192_2_fu_467_p2;
wire   [57:0] shl_ln728_5_fu_482_p3;
wire   [57:0] add_ln1192_3_fu_489_p2;
wire   [37:0] tmp_74_fu_494_p4;
wire   [57:0] shl_ln728_6_fu_504_p3;
wire   [57:0] add_ln1192_4_fu_512_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln238_fu_283_p2 == 1'd1))) begin
        i_0_reg_200 <= i_reg_530;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_200 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln240_fu_313_p2 == 1'd1))) begin
        k_0_0_reg_211 <= add_ln238_reg_548;
    end else if (((icmp_ln236_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_211 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        l_0_0_0_reg_222 <= add_ln240_reg_576;
    end else if (((icmp_ln238_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l_0_0_0_reg_222 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln1116_reg_566 <= add_ln1116_fu_333_p2;
        add_ln1117_reg_571 <= add_ln1117_fu_364_p2;
        add_ln240_reg_576 <= add_ln240_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln238_reg_548 <= add_ln238_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_530 <= i_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_0_0_V_load_reg_621 <= input_1_0_0_V_q0;
        input_1_1_0_V_load_reg_631 <= input_1_1_0_V_q0;
        input_1_2_0_V_load_reg_641 <= input_1_2_0_V_q0;
        input_1_3_0_V_load_reg_651 <= input_1_3_0_V_q0;
        input_2_0_V_load_reg_626 <= input_2_0_V_q0;
        input_2_1_V_load_reg_636 <= input_2_1_V_q0;
        input_2_2_V_load_reg_646 <= input_2_2_V_q0;
        input_2_3_V_load_reg_656 <= input_2_3_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1192_1_reg_671 <= mul_ln1192_1_fu_407_p2;
        mul_ln1192_2_reg_676 <= mul_ln1192_2_fu_419_p2;
        mul_ln1192_3_reg_681 <= mul_ln1192_3_fu_431_p2;
        mul_ln1192_reg_661 <= mul_ln1192_fu_395_p2;
        output_0_V_load_reg_666 <= output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_addr_reg_558 <= sext_ln203_fu_308_p1;
        zext_ln203_reg_553[2 : 0] <= zext_ln203_fu_295_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln236_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln1116_reg_535[7 : 1] <= sext_ln1116_fu_275_p1[7 : 1];
        trunc_ln1116_reg_540[5 : 1] <= trunc_ln1116_fu_279_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_73_reg_686 <= {{add_ln1192_2_fu_467_p2[57:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln708_s_reg_691 <= {{add_ln1192_4_fu_512_p2[57:20]}};
    end
end

always @ (*) begin
    if ((((icmp_ln236_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln236_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_0_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_2_0_V_ce0 = 1'b1;
    end else begin
        input_1_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_3_0_V_ce0 = 1'b1;
    end else begin
        input_1_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_0_V_ce0 = 1'b1;
    end else begin
        input_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_1_V_ce0 = 1'b1;
    end else begin
        input_2_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_2_V_ce0 = 1'b1;
    end else begin
        input_2_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_3_V_ce0 = 1'b1;
    end else begin
        input_2_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_V_address0 = output_0_V_addr_reg_558;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_V_address0 = sext_ln203_fu_308_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_V_d0 = trunc_ln708_s_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_V_d0 = 38'd0;
    end else begin
        output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((icmp_ln238_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln236_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln238_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln240_fu_313_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_333_p2 = ($signed(zext_ln1116_3_fu_329_p1) + $signed(sext_ln1116_reg_535));

assign add_ln1117_fu_364_p2 = (zext_ln203_reg_553 + sub_ln1117_fu_358_p2);

assign add_ln1192_2_fu_467_p2 = (shl_ln728_4_fu_459_p3 + mul_ln1192_1_reg_671);

assign add_ln1192_3_fu_489_p2 = (shl_ln728_5_fu_482_p3 + mul_ln1192_2_reg_676);

assign add_ln1192_4_fu_512_p2 = (shl_ln728_6_fu_504_p3 + mul_ln1192_3_reg_681);

assign add_ln1192_fu_444_p2 = (shl_ln_fu_437_p3 + mul_ln1192_reg_661);

assign add_ln203_fu_303_p2 = (trunc_ln1116_reg_540 + zext_ln203_16_fu_299_p1);

assign add_ln238_fu_289_p2 = (k_0_0_reg_211 + 3'd1);

assign add_ln240_fu_369_p2 = (5'd4 + l_0_0_0_reg_222);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_239_p2 = (i_0_reg_200 + 3'd1);

assign icmp_ln236_fu_233_p2 = ((i_0_reg_200 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_283_p2 = ((k_0_0_reg_211 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_313_p2 = ((l_0_0_0_reg_222 == 5'd24) ? 1'b1 : 1'b0);

assign input_1_0_0_V_address0 = sext_ln1116_2_fu_375_p1;

assign input_1_1_0_V_address0 = sext_ln1116_2_fu_375_p1;

assign input_1_2_0_V_address0 = sext_ln1116_2_fu_375_p1;

assign input_1_3_0_V_address0 = sext_ln1116_2_fu_375_p1;

assign input_2_0_V_address0 = zext_ln1117_fu_382_p1;

assign input_2_1_V_address0 = zext_ln1117_fu_382_p1;

assign input_2_2_V_address0 = zext_ln1117_fu_382_p1;

assign input_2_3_V_address0 = zext_ln1117_fu_382_p1;

assign mul_ln1192_1_fu_407_p0 = input_1_1_0_V_load_reg_631;

assign mul_ln1192_1_fu_407_p1 = input_2_1_V_load_reg_636;

assign mul_ln1192_1_fu_407_p2 = ($signed(mul_ln1192_1_fu_407_p0) * $signed(mul_ln1192_1_fu_407_p1));

assign mul_ln1192_2_fu_419_p0 = input_1_2_0_V_load_reg_641;

assign mul_ln1192_2_fu_419_p1 = input_2_2_V_load_reg_646;

assign mul_ln1192_2_fu_419_p2 = ($signed(mul_ln1192_2_fu_419_p0) * $signed(mul_ln1192_2_fu_419_p1));

assign mul_ln1192_3_fu_431_p0 = input_1_3_0_V_load_reg_651;

assign mul_ln1192_3_fu_431_p1 = input_2_3_V_load_reg_656;

assign mul_ln1192_3_fu_431_p2 = ($signed(mul_ln1192_3_fu_431_p0) * $signed(mul_ln1192_3_fu_431_p1));

assign mul_ln1192_fu_395_p0 = input_1_0_0_V_load_reg_621;

assign mul_ln1192_fu_395_p1 = input_2_0_V_load_reg_626;

assign mul_ln1192_fu_395_p2 = ($signed(mul_ln1192_fu_395_p0) * $signed(mul_ln1192_fu_395_p1));

assign p_shl2_cast_fu_342_p3 = {{trunc_ln1117_fu_338_p1}, {3'd0}};

assign p_shl3_cast_fu_350_p3 = {{add_ln1116_fu_333_p2}, {1'd0}};

assign sext_ln1116_2_fu_375_p1 = add_ln1116_reg_566;

assign sext_ln1116_fu_275_p1 = sub_ln1116_fu_269_p2;

assign sext_ln203_fu_308_p1 = $signed(add_ln203_fu_303_p2);

assign shl_ln728_4_fu_459_p3 = {{tmp_72_fu_449_p4}, {20'd0}};

assign shl_ln728_5_fu_482_p3 = {{tmp_73_reg_686}, {20'd0}};

assign shl_ln728_6_fu_504_p3 = {{tmp_74_fu_494_p4}, {20'd0}};

assign shl_ln_fu_437_p3 = {{output_0_V_load_reg_666}, {20'd0}};

assign sub_ln1116_fu_269_p2 = (zext_ln1116_fu_253_p1 - zext_ln1116_2_fu_265_p1);

assign sub_ln1117_fu_358_p2 = (p_shl2_cast_fu_342_p3 - p_shl3_cast_fu_350_p3);

assign tmp_70_fu_245_p3 = {{i_0_reg_200}, {3'd0}};

assign tmp_71_fu_257_p3 = {{i_0_reg_200}, {1'd0}};

assign tmp_72_fu_449_p4 = {{add_ln1192_fu_444_p2[57:20]}};

assign tmp_74_fu_494_p4 = {{add_ln1192_3_fu_489_p2[57:20]}};

assign tmp_93_fu_319_p4 = {{l_0_0_0_reg_222[4:2]}};

assign trunc_ln1116_fu_279_p1 = sub_ln1116_fu_269_p2[5:0];

assign trunc_ln1117_fu_338_p1 = add_ln1116_fu_333_p2[5:0];

assign zext_ln1116_2_fu_265_p1 = tmp_71_fu_257_p3;

assign zext_ln1116_3_fu_329_p1 = tmp_93_fu_319_p4;

assign zext_ln1116_fu_253_p1 = tmp_70_fu_245_p3;

assign zext_ln1117_fu_382_p1 = add_ln1117_reg_571;

assign zext_ln203_16_fu_299_p1 = k_0_0_reg_211;

assign zext_ln203_fu_295_p1 = k_0_0_reg_211;

always @ (posedge ap_clk) begin
    sext_ln1116_reg_535[0] <= 1'b0;
    trunc_ln1116_reg_540[0] <= 1'b0;
    zext_ln203_reg_553[8:3] <= 6'b000000;
end

endmodule //GEMM_3D_float_1
