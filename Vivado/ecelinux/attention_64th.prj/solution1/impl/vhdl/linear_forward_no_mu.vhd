-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_forward_no_mu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_0_V_ce0 : OUT STD_LOGIC;
    input_0_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_0_V_ce0 : OUT STD_LOGIC;
    input_1_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_0_V_ce0 : OUT STD_LOGIC;
    input_2_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_0_V_ce0 : OUT STD_LOGIC;
    input_3_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (37 downto 0);
    output_0_V_q0 : IN STD_LOGIC_VECTOR (37 downto 0);
    output_0_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_V_ce1 : OUT STD_LOGIC;
    output_0_V_we1 : OUT STD_LOGIC;
    output_0_V_d1 : OUT STD_LOGIC_VECTOR (37 downto 0);
    scales_0_V_read : IN STD_LOGIC_VECTOR (37 downto 0);
    packed_weights_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    packed_weights_ce0 : OUT STD_LOGIC;
    packed_weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_scale_V : IN STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of linear_forward_no_mu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_0_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal ko_0_0_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1148_fu_238_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal sext_ln1148_reg_647 : STD_LOGIC_VECTOR (77 downto 0);
    signal icmp_ln120_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state83_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state86_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln120_reg_652_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln120_1_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln120_1_reg_656 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln120_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln120_reg_661 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln121_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_fu_266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln124_reg_671 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln124_1_fu_282_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln124_1_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state48_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state57_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state60_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state63_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state69_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state72_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state75_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state78_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state81_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_state84_pp0_stage1_iter27 : BOOLEAN;
    signal ap_block_state87_pp0_stage1_iter28 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal input_0_0_V_load_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_1_0_V_load_reg_715 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_2_0_V_load_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_3_0_V_load_reg_727 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_V_addr_reg_733 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state34_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state37_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state40_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state46_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state49_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state52_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state55_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_state58_pp0_stage2_iter18 : BOOLEAN;
    signal ap_block_state61_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_state64_pp0_stage2_iter20 : BOOLEAN;
    signal ap_block_state67_pp0_stage2_iter21 : BOOLEAN;
    signal ap_block_state70_pp0_stage2_iter22 : BOOLEAN;
    signal ap_block_state73_pp0_stage2_iter23 : BOOLEAN;
    signal ap_block_state76_pp0_stage2_iter24 : BOOLEAN;
    signal ap_block_state79_pp0_stage2_iter25 : BOOLEAN;
    signal ap_block_state82_pp0_stage2_iter26 : BOOLEAN;
    signal ap_block_state85_pp0_stage2_iter27 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal output_0_V_addr_reg_733_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter18_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter19_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter20_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter21_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter22_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter23_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter24_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter25_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter26_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_733_pp0_iter27_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln129_fu_375_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln129_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln126_3_reg_744 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln701_1_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln701_1_reg_750 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_33_fu_530_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln703_33_reg_755 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln121_fu_536_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln121_reg_760 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln703_35_fu_619_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln703_35_reg_766 : STD_LOGIC_VECTOR (37 downto 0);
    signal icmp_ln121_1_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_reg_772_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_194_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_0_phi_fu_205_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_ko_0_0_phi_fu_217_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln124_1_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln124_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln124_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal mul_ln1118_fu_232_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_232_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_fu_232_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_51_fu_292_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_303_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln124_2_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln124_3_fu_310_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln121_fu_288_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln124_fu_314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln124_fu_320_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln126_fu_335_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln128_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln129_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_fu_351_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln126_4_fu_398_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln128_2_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_2_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln129_2_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_2_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_2_fu_437_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln129_2_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_2_fu_452_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln_fu_464_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln128_3_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_3_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_3_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln129_3_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_3_fu_486_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_3_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln129_3_fu_510_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_3_fu_518_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln703_2_fu_460_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln703_3_fu_526_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_541_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln128_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln129_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln128_1_fu_574_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln129_1_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_1_fu_588_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln703_fu_548_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln703_4_fu_606_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln703_1_fu_596_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln703_34_fu_609_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln703_5_fu_615_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln703_fu_600_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_637_p0 : STD_LOGIC_VECTOR (77 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_fu_232_p00 : STD_LOGIC_VECTOR (62 downto 0);

    component dut_sdiv_78ns_63seOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (77 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    dut_sdiv_78ns_63seOg_U16 : component dut_sdiv_78ns_63seOg
    generic map (
        ID => 1,
        NUM_STAGE => 82,
        din0_WIDTH => 78,
        din1_WIDTH => 63,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_637_p0,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_190 <= add_ln120_1_reg_656;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_190 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_0_reg_201 <= select_ln124_1_reg_698;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_0_reg_201 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ko_0_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ko_0_0_reg_213 <= add_ln121_reg_760;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ko_0_0_reg_213 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln120_1_reg_656 <= add_ln120_1_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln120_reg_661 <= add_ln120_fu_254_p2;
                icmp_ln121_reg_666 <= icmp_ln121_fu_260_p2;
                select_ln124_reg_671 <= select_ln124_fu_266_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln121_reg_760 <= add_ln121_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    add_ln703_33_reg_755(28 downto 20) <= add_ln703_33_fu_530_p2(28 downto 20);
                output_0_V_addr_reg_733 <= zext_ln124_fu_331_p1(5 - 1 downto 0);
                select_ln129_reg_739 <= select_ln129_fu_375_p3;
                sub_ln701_1_reg_750 <= sub_ln701_1_fu_393_p2;
                trunc_ln126_3_reg_744 <= packed_weights_q0(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_35_reg_766 <= add_ln703_35_fu_619_p2;
                icmp_ln121_1_reg_772 <= icmp_ln121_1_fu_625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln120_reg_652 <= icmp_ln120_fu_242_p2;
                icmp_ln120_reg_652_pp0_iter1_reg <= icmp_ln120_reg_652;
                icmp_ln121_1_reg_772_pp0_iter10_reg <= icmp_ln121_1_reg_772_pp0_iter9_reg;
                icmp_ln121_1_reg_772_pp0_iter11_reg <= icmp_ln121_1_reg_772_pp0_iter10_reg;
                icmp_ln121_1_reg_772_pp0_iter12_reg <= icmp_ln121_1_reg_772_pp0_iter11_reg;
                icmp_ln121_1_reg_772_pp0_iter13_reg <= icmp_ln121_1_reg_772_pp0_iter12_reg;
                icmp_ln121_1_reg_772_pp0_iter14_reg <= icmp_ln121_1_reg_772_pp0_iter13_reg;
                icmp_ln121_1_reg_772_pp0_iter15_reg <= icmp_ln121_1_reg_772_pp0_iter14_reg;
                icmp_ln121_1_reg_772_pp0_iter16_reg <= icmp_ln121_1_reg_772_pp0_iter15_reg;
                icmp_ln121_1_reg_772_pp0_iter17_reg <= icmp_ln121_1_reg_772_pp0_iter16_reg;
                icmp_ln121_1_reg_772_pp0_iter18_reg <= icmp_ln121_1_reg_772_pp0_iter17_reg;
                icmp_ln121_1_reg_772_pp0_iter19_reg <= icmp_ln121_1_reg_772_pp0_iter18_reg;
                icmp_ln121_1_reg_772_pp0_iter20_reg <= icmp_ln121_1_reg_772_pp0_iter19_reg;
                icmp_ln121_1_reg_772_pp0_iter21_reg <= icmp_ln121_1_reg_772_pp0_iter20_reg;
                icmp_ln121_1_reg_772_pp0_iter22_reg <= icmp_ln121_1_reg_772_pp0_iter21_reg;
                icmp_ln121_1_reg_772_pp0_iter23_reg <= icmp_ln121_1_reg_772_pp0_iter22_reg;
                icmp_ln121_1_reg_772_pp0_iter24_reg <= icmp_ln121_1_reg_772_pp0_iter23_reg;
                icmp_ln121_1_reg_772_pp0_iter25_reg <= icmp_ln121_1_reg_772_pp0_iter24_reg;
                icmp_ln121_1_reg_772_pp0_iter26_reg <= icmp_ln121_1_reg_772_pp0_iter25_reg;
                icmp_ln121_1_reg_772_pp0_iter27_reg <= icmp_ln121_1_reg_772_pp0_iter26_reg;
                icmp_ln121_1_reg_772_pp0_iter28_reg <= icmp_ln121_1_reg_772_pp0_iter27_reg;
                icmp_ln121_1_reg_772_pp0_iter2_reg <= icmp_ln121_1_reg_772;
                icmp_ln121_1_reg_772_pp0_iter3_reg <= icmp_ln121_1_reg_772_pp0_iter2_reg;
                icmp_ln121_1_reg_772_pp0_iter4_reg <= icmp_ln121_1_reg_772_pp0_iter3_reg;
                icmp_ln121_1_reg_772_pp0_iter5_reg <= icmp_ln121_1_reg_772_pp0_iter4_reg;
                icmp_ln121_1_reg_772_pp0_iter6_reg <= icmp_ln121_1_reg_772_pp0_iter5_reg;
                icmp_ln121_1_reg_772_pp0_iter7_reg <= icmp_ln121_1_reg_772_pp0_iter6_reg;
                icmp_ln121_1_reg_772_pp0_iter8_reg <= icmp_ln121_1_reg_772_pp0_iter7_reg;
                icmp_ln121_1_reg_772_pp0_iter9_reg <= icmp_ln121_1_reg_772_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input_0_0_V_load_reg_709 <= input_0_0_V_q0;
                input_1_0_V_load_reg_715 <= input_1_0_V_q0;
                input_2_0_V_load_reg_721 <= input_2_0_V_q0;
                input_3_0_V_load_reg_727 <= input_3_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                output_0_V_addr_reg_733_pp0_iter10_reg <= output_0_V_addr_reg_733_pp0_iter9_reg;
                output_0_V_addr_reg_733_pp0_iter11_reg <= output_0_V_addr_reg_733_pp0_iter10_reg;
                output_0_V_addr_reg_733_pp0_iter12_reg <= output_0_V_addr_reg_733_pp0_iter11_reg;
                output_0_V_addr_reg_733_pp0_iter13_reg <= output_0_V_addr_reg_733_pp0_iter12_reg;
                output_0_V_addr_reg_733_pp0_iter14_reg <= output_0_V_addr_reg_733_pp0_iter13_reg;
                output_0_V_addr_reg_733_pp0_iter15_reg <= output_0_V_addr_reg_733_pp0_iter14_reg;
                output_0_V_addr_reg_733_pp0_iter16_reg <= output_0_V_addr_reg_733_pp0_iter15_reg;
                output_0_V_addr_reg_733_pp0_iter17_reg <= output_0_V_addr_reg_733_pp0_iter16_reg;
                output_0_V_addr_reg_733_pp0_iter18_reg <= output_0_V_addr_reg_733_pp0_iter17_reg;
                output_0_V_addr_reg_733_pp0_iter19_reg <= output_0_V_addr_reg_733_pp0_iter18_reg;
                output_0_V_addr_reg_733_pp0_iter1_reg <= output_0_V_addr_reg_733;
                output_0_V_addr_reg_733_pp0_iter20_reg <= output_0_V_addr_reg_733_pp0_iter19_reg;
                output_0_V_addr_reg_733_pp0_iter21_reg <= output_0_V_addr_reg_733_pp0_iter20_reg;
                output_0_V_addr_reg_733_pp0_iter22_reg <= output_0_V_addr_reg_733_pp0_iter21_reg;
                output_0_V_addr_reg_733_pp0_iter23_reg <= output_0_V_addr_reg_733_pp0_iter22_reg;
                output_0_V_addr_reg_733_pp0_iter24_reg <= output_0_V_addr_reg_733_pp0_iter23_reg;
                output_0_V_addr_reg_733_pp0_iter25_reg <= output_0_V_addr_reg_733_pp0_iter24_reg;
                output_0_V_addr_reg_733_pp0_iter26_reg <= output_0_V_addr_reg_733_pp0_iter25_reg;
                output_0_V_addr_reg_733_pp0_iter27_reg <= output_0_V_addr_reg_733_pp0_iter26_reg;
                output_0_V_addr_reg_733_pp0_iter2_reg <= output_0_V_addr_reg_733_pp0_iter1_reg;
                output_0_V_addr_reg_733_pp0_iter3_reg <= output_0_V_addr_reg_733_pp0_iter2_reg;
                output_0_V_addr_reg_733_pp0_iter4_reg <= output_0_V_addr_reg_733_pp0_iter3_reg;
                output_0_V_addr_reg_733_pp0_iter5_reg <= output_0_V_addr_reg_733_pp0_iter4_reg;
                output_0_V_addr_reg_733_pp0_iter6_reg <= output_0_V_addr_reg_733_pp0_iter5_reg;
                output_0_V_addr_reg_733_pp0_iter7_reg <= output_0_V_addr_reg_733_pp0_iter6_reg;
                output_0_V_addr_reg_733_pp0_iter8_reg <= output_0_V_addr_reg_733_pp0_iter7_reg;
                output_0_V_addr_reg_733_pp0_iter9_reg <= output_0_V_addr_reg_733_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln124_1_reg_698 <= select_ln124_1_fu_282_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_ln1148_reg_647 <= sext_ln1148_fu_238_p1;
            end if;
        end if;
    end process;
    add_ln703_33_reg_755(19 downto 0) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln120_fu_242_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln120_fu_242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln120_fu_242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln120_1_fu_248_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_194_p4) + unsigned(ap_const_lv8_1));
    add_ln120_fu_254_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_j_0_0_phi_fu_205_p4));
    add_ln121_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln124_reg_671));
    add_ln124_fu_320_p2 <= std_logic_vector(unsigned(zext_ln121_fu_288_p1) + unsigned(sub_ln124_fu_314_p2));
    add_ln703_33_fu_530_p2 <= std_logic_vector(signed(sext_ln703_2_fu_460_p1) + signed(sext_ln703_3_fu_526_p1));
    add_ln703_34_fu_609_p2 <= std_logic_vector(signed(sext_ln703_4_fu_606_p1) + signed(sext_ln703_1_fu_596_p1));
    add_ln703_35_fu_619_p2 <= std_logic_vector(signed(sext_ln703_5_fu_615_p1) + signed(add_ln703_fu_600_p2));
    add_ln703_fu_600_p2 <= std_logic_vector(unsigned(output_0_V_q0) + unsigned(sext_ln703_fu_548_p1));
    and_ln129_1_fu_568_p2 <= (xor_ln128_1_fu_562_p2 and icmp_ln129_1_fu_557_p2);
    and_ln129_2_fu_431_p2 <= (xor_ln128_2_fu_425_p2 and icmp_ln129_2_fu_414_p2);
    and_ln129_3_fu_497_p2 <= (xor_ln128_3_fu_491_p2 and icmp_ln129_3_fu_480_p2);
    and_ln129_fu_362_p2 <= (xor_ln128_fu_356_p2 and icmp_ln129_fu_345_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state88 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage2_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage2_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage2_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage2_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage2_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage2_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage2_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage2_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage2_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage1_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage2_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage1_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln120_fu_242_p2)
    begin
        if ((icmp_ln120_fu_242_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_194_p4_assign_proc : process(indvar_flatten_reg_190, icmp_ln120_reg_652, ap_CS_fsm_pp0_stage0, add_ln120_1_reg_656, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_194_p4 <= add_ln120_1_reg_656;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_194_p4 <= indvar_flatten_reg_190;
        end if; 
    end process;


    ap_phi_mux_j_0_0_phi_fu_205_p4_assign_proc : process(j_0_0_reg_201, icmp_ln120_reg_652, ap_CS_fsm_pp0_stage0, select_ln124_1_reg_698, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_0_phi_fu_205_p4 <= select_ln124_1_reg_698;
        else 
            ap_phi_mux_j_0_0_phi_fu_205_p4 <= j_0_0_reg_201;
        end if; 
    end process;


    ap_phi_mux_ko_0_0_phi_fu_217_p4_assign_proc : process(ko_0_0_reg_213, icmp_ln120_reg_652, ap_CS_fsm_pp0_stage0, add_ln121_reg_760, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln120_reg_652 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ko_0_0_phi_fu_217_p4 <= add_ln121_reg_760;
        else 
            ap_phi_mux_ko_0_0_phi_fu_217_p4 <= ko_0_0_reg_213;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_637_p0 <= (add_ln703_35_reg_766 & ap_const_lv40_0);
    grp_fu_637_p1 <= sext_ln1148_reg_647(63 - 1 downto 0);
    icmp_ln120_fu_242_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_194_p4 = ap_const_lv8_90) else "0";
    icmp_ln121_1_fu_625_p2 <= "1" when (add_ln121_reg_760 = ap_const_lv3_6) else "0";
    icmp_ln121_fu_260_p2 <= "1" when (ap_phi_mux_ko_0_0_phi_fu_217_p4 = ap_const_lv3_6) else "0";
    icmp_ln128_1_fu_552_p2 <= "1" when (trunc_ln126_3_reg_744 = ap_const_lv2_1) else "0";
    icmp_ln128_2_fu_408_p2 <= "1" when (trunc_ln126_4_fu_398_p4 = ap_const_lv2_1) else "0";
    icmp_ln128_3_fu_474_p2 <= "1" when (trunc_ln_fu_464_p4 = ap_const_lv2_1) else "0";
    icmp_ln128_fu_339_p2 <= "1" when (trunc_ln126_fu_335_p1 = ap_const_lv2_1) else "0";
    icmp_ln129_1_fu_557_p2 <= "1" when (trunc_ln126_3_reg_744 = ap_const_lv2_2) else "0";
    icmp_ln129_2_fu_414_p2 <= "1" when (trunc_ln126_4_fu_398_p4 = ap_const_lv2_2) else "0";
    icmp_ln129_3_fu_480_p2 <= "1" when (trunc_ln_fu_464_p4 = ap_const_lv2_2) else "0";
    icmp_ln129_fu_345_p2 <= "1" when (trunc_ln126_fu_335_p1 = ap_const_lv2_2) else "0";
    input_0_0_V_address0 <= zext_ln124_1_fu_274_p1(3 - 1 downto 0);

    input_0_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_0_V_address0 <= zext_ln124_1_fu_274_p1(3 - 1 downto 0);

    input_1_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_0_V_address0 <= zext_ln124_1_fu_274_p1(3 - 1 downto 0);

    input_2_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_0_V_ce0 <= ap_const_logic_1;
        else 
            input_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_0_V_address0 <= zext_ln124_1_fu_274_p1(3 - 1 downto 0);

    input_3_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_0_V_ce0 <= ap_const_logic_1;
        else 
            input_3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_fu_232_p0 <= mul_ln1118_fu_232_p00(26 - 1 downto 0);
    mul_ln1118_fu_232_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_scale_V),63));
    mul_ln1118_fu_232_p1 <= scales_0_V_read;
    mul_ln1118_fu_232_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1118_fu_232_p0) * signed(mul_ln1118_fu_232_p1))), 63));

    output_0_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, output_0_V_addr_reg_733, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, zext_ln124_fu_331_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_address0 <= output_0_V_addr_reg_733;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            output_0_V_address0 <= zext_ln124_fu_331_p1(5 - 1 downto 0);
        else 
            output_0_V_address0 <= "XXXXX";
        end if; 
    end process;

    output_0_V_address1 <= output_0_V_addr_reg_733_pp0_iter27_reg;

    output_0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter28)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_ce1 <= ap_const_logic_1;
        else 
            output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= add_ln703_35_reg_766;
    output_0_V_d1 <= grp_fu_637_p2(38 - 1 downto 0);

    output_0_V_we0_assign_proc : process(icmp_ln120_reg_652_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln120_reg_652_pp0_iter1_reg = ap_const_lv1_0))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln121_1_reg_772_pp0_iter28_reg, ap_enable_reg_pp0_iter28)
    begin
        if (((icmp_ln121_1_reg_772_pp0_iter28_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_we1 <= ap_const_logic_1;
        else 
            output_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_address0 <= sext_ln124_fu_326_p1(8 - 1 downto 0);

    packed_weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            packed_weights_ce0 <= ap_const_logic_1;
        else 
            packed_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln124_1_fu_282_p3 <= 
        add_ln120_reg_661 when (icmp_ln121_reg_666(0) = '1') else 
        j_0_0_reg_201;
    select_ln124_fu_266_p3 <= 
        ap_const_lv3_0 when (icmp_ln121_fu_260_p2(0) = '1') else 
        ap_phi_mux_ko_0_0_phi_fu_217_p4;
    select_ln128_1_fu_574_p3 <= 
        input_1_0_V_load_reg_715 when (icmp_ln128_1_fu_552_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln128_2_fu_437_p3 <= 
        input_2_0_V_load_reg_721 when (icmp_ln128_2_fu_408_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln128_3_fu_503_p3 <= 
        input_3_0_V_load_reg_727 when (icmp_ln128_3_fu_474_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln128_fu_368_p3 <= 
        input_0_0_V_load_reg_709 when (icmp_ln128_fu_339_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln129_1_fu_581_p3 <= 
        sub_ln701_1_reg_750 when (and_ln129_1_fu_568_p2(0) = '1') else 
        select_ln128_1_fu_574_p3;
    select_ln129_2_fu_444_p3 <= 
        sub_ln701_2_fu_420_p2 when (and_ln129_2_fu_431_p2(0) = '1') else 
        select_ln128_2_fu_437_p3;
    select_ln129_3_fu_510_p3 <= 
        sub_ln701_3_fu_486_p2 when (and_ln129_3_fu_497_p2(0) = '1') else 
        select_ln128_3_fu_503_p3;
    select_ln129_fu_375_p3 <= 
        sub_ln701_fu_351_p2 when (and_ln129_fu_362_p2(0) = '1') else 
        select_ln128_fu_368_p3;
        sext_ln1148_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_fu_232_p2),78));

        sext_ln124_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln124_fu_320_p2),64));

        sext_ln703_1_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_1_fu_588_p3),30));

        sext_ln703_2_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_2_fu_452_p3),29));

        sext_ln703_3_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_3_fu_518_p3),29));

        sext_ln703_4_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_33_reg_755),30));

        sext_ln703_5_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_34_fu_609_p2),38));

        sext_ln703_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_541_p3),38));

    shl_ln703_1_fu_588_p3 <= (select_ln129_1_fu_581_p3 & ap_const_lv20_0);
    shl_ln703_2_fu_452_p3 <= (select_ln129_2_fu_444_p3 & ap_const_lv20_0);
    shl_ln703_3_fu_518_p3 <= (select_ln129_3_fu_510_p3 & ap_const_lv20_0);
    shl_ln_fu_541_p3 <= (select_ln129_reg_739 & ap_const_lv20_0);
    sub_ln124_fu_314_p2 <= std_logic_vector(unsigned(zext_ln124_2_fu_299_p1) - unsigned(zext_ln124_3_fu_310_p1));
    sub_ln701_1_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_1_0_V_load_reg_715));
    sub_ln701_2_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_2_0_V_load_reg_721));
    sub_ln701_3_fu_486_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_3_0_V_load_reg_727));
    sub_ln701_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_0_0_V_load_reg_709));
    tmp_51_fu_292_p3 <= (select_ln124_reg_671 & ap_const_lv5_0);
    tmp_52_fu_303_p3 <= (select_ln124_reg_671 & ap_const_lv3_0);
    trunc_ln126_4_fu_398_p4 <= packed_weights_q0(5 downto 4);
    trunc_ln126_fu_335_p1 <= packed_weights_q0(2 - 1 downto 0);
    trunc_ln_fu_464_p4 <= packed_weights_q0(7 downto 6);
    xor_ln128_1_fu_562_p2 <= (icmp_ln128_1_fu_552_p2 xor ap_const_lv1_1);
    xor_ln128_2_fu_425_p2 <= (icmp_ln128_2_fu_408_p2 xor ap_const_lv1_1);
    xor_ln128_3_fu_491_p2 <= (icmp_ln128_3_fu_474_p2 xor ap_const_lv1_1);
    xor_ln128_fu_356_p2 <= (icmp_ln128_fu_339_p2 xor ap_const_lv1_1);
    zext_ln121_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_1_fu_282_p3),9));
    zext_ln124_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_fu_266_p3),64));
    zext_ln124_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_292_p3),9));
    zext_ln124_3_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_303_p3),9));
    zext_ln124_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln124_1_reg_698),64));
end behav;
