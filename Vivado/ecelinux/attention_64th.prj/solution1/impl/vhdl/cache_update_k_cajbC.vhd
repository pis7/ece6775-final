-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cache_update_k_cajbC_rom is 
    generic(
             DWIDTH     : integer := 24; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cache_update_k_cajbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000000001010000101101", 1 => "000000010100011111101001", 
    2 => "111111011001001101111101", 3 => "000000010001101010000001", 
    4 => "111111111111010111101001", 5 => "000000010000011001010100", 
    6 => "111110101010100011011101", 7 => "111111100001000110011100", 
    8 => "111111101000101010101111", 9 => "000000000010110101100111", 
    10 => "111111110111011111001010", 11 => "111111111010101000111101", 
    12 => "001010010010010101100001", 13 => "110101000111111101001101", 
    14 => "001010000011101110101101", 15 => "101110111010001101110111", 
    16 => "110010110100111101010001", 17 => "110100110110010010000111", 
    18 => "110001011001000011011100", 19 => "111110100011011001100000", 
    20 => "110001111011001111100100", 21 => "110111010001110110001100", 
    22 => "000100000111100100101111", 23 => "111001110001100100011010", 
    24 => "001111001011010011010111", 25 => "111001110100100001111000", 
    26 => "111100100100100101010000", 27 => "110100011111010101101010", 
    28 => "111000010111110011010011", 29 => "111000110011111001000011", 
    30 => "111000101110000111011010", 31 => "111011010001011000100101", 
    32 => "000001001010001111110001", 33 => "111110010110110111111000", 
    34 => "000011101011100010001010", 35 => "111001111110100001101000", 
    36 => "000110000000011010011011", 37 => "000010010100001110110111", 
    38 => "000100101111101010011010", 39 => "111110011011110011111100", 
    40 => "111011111101110001100110", 41 => "111101101001011111110001", 
    42 => "111111001110000100111000", 43 => "111101110101110101110101", 
    44 => "110100011100001001111101", 45 => "000100000011111011000111", 
    46 => "000100110010000001001111", 47 => "111010000101101011000011", 
    48 => "111010111111010100101001", 49 => "000110100000110100000000", 
    50 => "111100110010000100010110", 51 => "111011101010110101110111", 
    52 => "000000101011001001001100", 53 => "000010001100011001111001", 
    54 => "111010000100010001100110", 55 => "000110101001110011001010", 
    56 => "000011001110100001100000", 57 => "000001011100011001111110", 
    58 => "000110110111101100001010", 59 => "111100000110001110000010", 
    60 => "000000100000011110011100", 61 => "000000000101010111000010", 
    62 => "000000000011110010001001", 63 => "111111011100101011111100", 
    64 => "111110101011110100001011", 65 => "000000001110110100011010", 
    66 => "111111111000000111100001", 67 => "000000000100011010100000", 
    68 => "111111100100111000100110", 69 => "111111100000001001111010", 
    70 => "000000111010111101011111", 71 => "111111101001111011011101", 
    72 => "110101101011011100111011", 73 => "111110001010100010000000", 
    74 => "000111111000001010101001", 75 => "000101001001011110111110", 
    76 => "111101001001010100010000", 77 => "111011100100101011111100", 
    78 => "001101100010011001000100", 79 => "111100101110110101110100", 
    80 => "000100001000110011010010", 81 => "111100111111011010110011", 
    82 => "110111000101011011110111", 83 => "111100101001111011100000", 
    84 => "110110100001001011101101", 85 => "111000011100101010100100", 
    86 => "010001100101000101011001", 87 => "001001001111000010110000", 
    88 => "000010100011001000101100", 89 => "110010000010001110100010", 
    90 => "001010010101011111100001", 91 => "111000001000010000101010", 
    92 => "000100111101010000011011", 93 => "111101110001001011110000", 
    94 => "110011001011011111101001", 95 => "110101110001111111110110", 
    96 => "000001111011101110101111", 97 => "110101101101100101101110", 
    98 => "001011010111100110100111", 99 => "111110110000110100011101", 
    100 => "111101000000000100110100", 101 => "111010011101000010110001", 
    102 => "000011000101001010110010", 103 => "111010111110110010001001", 
    104 => "111110110101011010000000", 105 => "111011011010100111000001", 
    106 => "110111010001110011110001", 107 => "111010010111001110110111", 
    108 => "000101010010001001001110", 109 => "111010011000100001001000", 
    110 => "000000110111110101100011", 111 => "111011110011111110010111", 
    112 => "111100011101001110010111", 113 => "000101100111111100101110", 
    114 => "000001011111111001001101", 115 => "000011110110101011101010", 
    116 => "111100001111100101001010", 117 => "111010010011100000100011", 
    118 => "000000000111000010010001", 119 => "111011010111101010111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cache_update_k_cajbC is
    generic (
        DataWidth : INTEGER := 24;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cache_update_k_cajbC is
    component cache_update_k_cajbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cache_update_k_cajbC_rom_U :  component cache_update_k_cajbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


