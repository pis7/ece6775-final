// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_out_V_address0,
        cache_out_V_ce0,
        cache_out_V_we0,
        cache_out_V_d0,
        update_0_V_address0,
        update_0_V_ce0,
        update_0_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] cache_out_V_address0;
output   cache_out_V_ce0;
output   cache_out_V_we0;
output  [37:0] cache_out_V_d0;
output  [4:0] update_0_V_address0;
output   update_0_V_ce0;
input  [37:0] update_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_out_V_ce0;
reg cache_out_V_we0;
reg update_0_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] k_cache_V_address0;
reg    k_cache_V_ce0;
wire   [23:0] k_cache_V_q0;
wire   [1:0] i_fu_144_p2;
reg   [1:0] i_reg_384;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln204_fu_170_p2;
reg   [4:0] add_ln204_reg_389;
wire   [0:0] icmp_ln201_fu_138_p2;
wire  signed [6:0] sext_ln203_fu_206_p1;
reg  signed [6:0] sext_ln203_reg_394;
wire   [5:0] sub_ln204_fu_218_p2;
reg   [5:0] sub_ln204_reg_399;
wire   [2:0] j_fu_230_p2;
reg   [2:0] j_reg_407;
wire    ap_CS_fsm_state3;
wire   [7:0] sub_ln204_2_fu_273_p2;
reg   [7:0] sub_ln204_2_reg_412;
wire   [0:0] icmp_ln202_fu_224_p2;
wire   [8:0] sub_ln203_5_fu_304_p2;
reg   [8:0] sub_ln203_5_reg_417;
wire   [0:0] icmp_ln204_fu_310_p2;
reg   [0:0] icmp_ln204_reg_422;
wire   [3:0] k_fu_322_p2;
reg   [3:0] k_reg_430;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln203_fu_316_p2;
wire   [8:0] add_ln203_6_fu_350_p2;
reg   [8:0] add_ln203_6_reg_440;
reg   [1:0] i_0_reg_105;
reg   [2:0] j_0_reg_116;
reg   [3:0] k_0_reg_127;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln204_19_fu_345_p1;
wire  signed [63:0] sext_ln204_fu_360_p1;
wire   [63:0] zext_ln203_13_fu_365_p1;
wire   [3:0] tmp_57_fu_154_p3;
wire   [4:0] zext_ln204_fu_150_p1;
wire   [4:0] zext_ln204_11_fu_162_p1;
wire   [4:0] tmp_58_fu_176_p3;
wire   [2:0] tmp_59_fu_188_p3;
wire   [5:0] zext_ln203_fu_184_p1;
wire   [5:0] zext_ln203_12_fu_196_p1;
wire   [5:0] sub_ln203_fu_200_p2;
wire   [5:0] tmp_60_fu_210_p3;
wire   [5:0] zext_ln204_12_fu_166_p1;
wire   [4:0] zext_ln204_14_fu_240_p1;
wire   [4:0] add_ln204_4_fu_244_p2;
wire   [3:0] trunc_ln204_fu_249_p1;
wire   [6:0] tmp_87_fu_261_p3;
wire   [7:0] p_shl7_cast_fu_253_p3;
wire   [7:0] zext_ln204_15_fu_269_p1;
wire   [6:0] zext_ln204_13_fu_236_p1;
wire   [6:0] add_ln203_fu_279_p2;
wire   [4:0] trunc_ln203_fu_284_p1;
wire   [8:0] p_shl5_cast_fu_288_p3;
wire   [8:0] p_shl6_cast_fu_296_p3;
wire   [7:0] zext_ln204_18_fu_336_p1;
wire   [7:0] add_ln204_5_fu_340_p2;
wire   [8:0] zext_ln204_17_fu_332_p1;
wire   [5:0] zext_ln204_16_fu_328_p1;
wire   [5:0] add_ln204_6_fu_355_p2;
wire  signed [37:0] sext_ln203_3_fu_369_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

cache_update_k_cajbC #(
    .DataWidth( 24 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
k_cache_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_cache_V_address0),
    .ce0(k_cache_V_ce0),
    .q0(k_cache_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_105 <= i_reg_384;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_116 <= j_reg_407;
    end else if (((icmp_ln201_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_116 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_127 <= k_reg_430;
    end else if (((icmp_ln202_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_127 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_6_reg_440 <= add_ln203_6_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln201_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln204_reg_389 <= add_ln204_fu_170_p2;
        sext_ln203_reg_394[6 : 1] <= sext_ln203_fu_206_p1[6 : 1];
        sub_ln204_reg_399[5 : 2] <= sub_ln204_fu_218_p2[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_384 <= i_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln204_reg_422 <= icmp_ln204_fu_310_p2;
        sub_ln203_5_reg_417[8 : 2] <= sub_ln203_5_fu_304_p2[8 : 2];
        sub_ln204_2_reg_412[7 : 2] <= sub_ln204_2_fu_273_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_407 <= j_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_430 <= k_fu_322_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln201_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln201_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_ce0 = 1'b1;
    end else begin
        cache_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_we0 = 1'b1;
    end else begin
        cache_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_cache_V_ce0 = 1'b1;
    end else begin
        k_cache_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        update_0_V_ce0 = 1'b1;
    end else begin
        update_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln201_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln202_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln203_fu_316_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_6_fu_350_p2 = (sub_ln203_5_reg_417 + zext_ln204_17_fu_332_p1);

assign add_ln203_fu_279_p2 = ($signed(sext_ln203_reg_394) + $signed(zext_ln204_13_fu_236_p1));

assign add_ln204_4_fu_244_p2 = (add_ln204_reg_389 + zext_ln204_14_fu_240_p1);

assign add_ln204_5_fu_340_p2 = (sub_ln204_2_reg_412 + zext_ln204_18_fu_336_p1);

assign add_ln204_6_fu_355_p2 = (sub_ln204_reg_399 + zext_ln204_16_fu_328_p1);

assign add_ln204_fu_170_p2 = (zext_ln204_fu_150_p1 + zext_ln204_11_fu_162_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign cache_out_V_address0 = zext_ln203_13_fu_365_p1;

assign cache_out_V_d0 = ((icmp_ln204_reg_422[0:0] === 1'b1) ? update_0_V_q0 : sext_ln203_3_fu_369_p1);

assign i_fu_144_p2 = (i_0_reg_105 + 2'd1);

assign icmp_ln201_fu_138_p2 = ((i_0_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_224_p2 = ((j_0_reg_116 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_316_p2 = ((k_0_reg_127 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_310_p2 = ((j_0_reg_116 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_230_p2 = (j_0_reg_116 + 3'd1);

assign k_cache_V_address0 = zext_ln204_19_fu_345_p1;

assign k_fu_322_p2 = (k_0_reg_127 + 4'd1);

assign p_shl5_cast_fu_288_p3 = {{trunc_ln203_fu_284_p1}, {4'd0}};

assign p_shl6_cast_fu_296_p3 = {{add_ln203_fu_279_p2}, {2'd0}};

assign p_shl7_cast_fu_253_p3 = {{trunc_ln204_fu_249_p1}, {4'd0}};

assign sext_ln203_3_fu_369_p1 = $signed(k_cache_V_q0);

assign sext_ln203_fu_206_p1 = $signed(sub_ln203_fu_200_p2);

assign sext_ln204_fu_360_p1 = $signed(add_ln204_6_fu_355_p2);

assign sub_ln203_5_fu_304_p2 = (p_shl5_cast_fu_288_p3 - p_shl6_cast_fu_296_p3);

assign sub_ln203_fu_200_p2 = (zext_ln203_fu_184_p1 - zext_ln203_12_fu_196_p1);

assign sub_ln204_2_fu_273_p2 = (p_shl7_cast_fu_253_p3 - zext_ln204_15_fu_269_p1);

assign sub_ln204_fu_218_p2 = (tmp_60_fu_210_p3 - zext_ln204_12_fu_166_p1);

assign tmp_57_fu_154_p3 = {{i_0_reg_105}, {2'd0}};

assign tmp_58_fu_176_p3 = {{i_0_reg_105}, {3'd0}};

assign tmp_59_fu_188_p3 = {{i_0_reg_105}, {1'd0}};

assign tmp_60_fu_210_p3 = {{i_0_reg_105}, {4'd0}};

assign tmp_87_fu_261_p3 = {{add_ln204_4_fu_244_p2}, {2'd0}};

assign trunc_ln203_fu_284_p1 = add_ln203_fu_279_p2[4:0];

assign trunc_ln204_fu_249_p1 = add_ln204_4_fu_244_p2[3:0];

assign update_0_V_address0 = sext_ln204_fu_360_p1;

assign zext_ln203_12_fu_196_p1 = tmp_59_fu_188_p3;

assign zext_ln203_13_fu_365_p1 = add_ln203_6_reg_440;

assign zext_ln203_fu_184_p1 = tmp_58_fu_176_p3;

assign zext_ln204_11_fu_162_p1 = tmp_57_fu_154_p3;

assign zext_ln204_12_fu_166_p1 = tmp_57_fu_154_p3;

assign zext_ln204_13_fu_236_p1 = j_0_reg_116;

assign zext_ln204_14_fu_240_p1 = j_0_reg_116;

assign zext_ln204_15_fu_269_p1 = tmp_87_fu_261_p3;

assign zext_ln204_16_fu_328_p1 = k_0_reg_127;

assign zext_ln204_17_fu_332_p1 = k_0_reg_127;

assign zext_ln204_18_fu_336_p1 = k_0_reg_127;

assign zext_ln204_19_fu_345_p1 = add_ln204_5_fu_340_p2;

assign zext_ln204_fu_150_p1 = i_0_reg_105;

always @ (posedge ap_clk) begin
    sext_ln203_reg_394[0] <= 1'b0;
    sub_ln204_reg_399[1:0] <= 2'b00;
    sub_ln204_2_reg_412[1:0] <= 2'b00;
    sub_ln203_5_reg_417[1:0] <= 2'b00;
end

endmodule //cache_update
