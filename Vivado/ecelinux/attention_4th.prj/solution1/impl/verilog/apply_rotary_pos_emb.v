// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_q_0_V_address0,
        input_q_0_V_ce0,
        input_q_0_V_q0,
        input_q_0_V_address1,
        input_q_0_V_ce1,
        input_q_0_V_q1,
        input_k_0_V_address0,
        input_k_0_V_ce0,
        input_k_0_V_q0,
        input_k_0_V_address1,
        input_k_0_V_ce1,
        input_k_0_V_q1,
        output_q_0_0_V_address0,
        output_q_0_0_V_ce0,
        output_q_0_0_V_we0,
        output_q_0_0_V_d0,
        output_q_1_0_V_address0,
        output_q_1_0_V_ce0,
        output_q_1_0_V_we0,
        output_q_1_0_V_d0,
        output_q_2_0_V_address0,
        output_q_2_0_V_ce0,
        output_q_2_0_V_we0,
        output_q_2_0_V_d0,
        output_q_3_0_V_address0,
        output_q_3_0_V_ce0,
        output_q_3_0_V_we0,
        output_q_3_0_V_d0,
        output_q_4_0_V_address0,
        output_q_4_0_V_ce0,
        output_q_4_0_V_we0,
        output_q_4_0_V_d0,
        output_q_5_0_V_address0,
        output_q_5_0_V_ce0,
        output_q_5_0_V_we0,
        output_q_5_0_V_d0,
        output_q_6_0_V_address0,
        output_q_6_0_V_ce0,
        output_q_6_0_V_we0,
        output_q_6_0_V_d0,
        output_q_7_0_V_address0,
        output_q_7_0_V_ce0,
        output_q_7_0_V_we0,
        output_q_7_0_V_d0,
        output_q_8_0_V_address0,
        output_q_8_0_V_ce0,
        output_q_8_0_V_we0,
        output_q_8_0_V_d0,
        output_q_9_0_V_address0,
        output_q_9_0_V_ce0,
        output_q_9_0_V_we0,
        output_q_9_0_V_d0,
        output_q_10_0_V_address0,
        output_q_10_0_V_ce0,
        output_q_10_0_V_we0,
        output_q_10_0_V_d0,
        output_q_11_0_V_address0,
        output_q_11_0_V_ce0,
        output_q_11_0_V_we0,
        output_q_11_0_V_d0,
        output_q_12_0_V_address0,
        output_q_12_0_V_ce0,
        output_q_12_0_V_we0,
        output_q_12_0_V_d0,
        output_q_13_0_V_address0,
        output_q_13_0_V_ce0,
        output_q_13_0_V_we0,
        output_q_13_0_V_d0,
        output_q_14_0_V_address0,
        output_q_14_0_V_ce0,
        output_q_14_0_V_we0,
        output_q_14_0_V_d0,
        output_q_15_0_V_address0,
        output_q_15_0_V_ce0,
        output_q_15_0_V_we0,
        output_q_15_0_V_d0,
        output_k_0_V_address0,
        output_k_0_V_ce0,
        output_k_0_V_we0,
        output_k_0_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_q_0_V_address0;
output   input_q_0_V_ce0;
input  [37:0] input_q_0_V_q0;
output  [8:0] input_q_0_V_address1;
output   input_q_0_V_ce1;
input  [37:0] input_q_0_V_q1;
output  [8:0] input_k_0_V_address0;
output   input_k_0_V_ce0;
input  [37:0] input_k_0_V_q0;
output  [8:0] input_k_0_V_address1;
output   input_k_0_V_ce1;
input  [37:0] input_k_0_V_q1;
output  [4:0] output_q_0_0_V_address0;
output   output_q_0_0_V_ce0;
output   output_q_0_0_V_we0;
output  [37:0] output_q_0_0_V_d0;
output  [4:0] output_q_1_0_V_address0;
output   output_q_1_0_V_ce0;
output   output_q_1_0_V_we0;
output  [37:0] output_q_1_0_V_d0;
output  [4:0] output_q_2_0_V_address0;
output   output_q_2_0_V_ce0;
output   output_q_2_0_V_we0;
output  [37:0] output_q_2_0_V_d0;
output  [4:0] output_q_3_0_V_address0;
output   output_q_3_0_V_ce0;
output   output_q_3_0_V_we0;
output  [37:0] output_q_3_0_V_d0;
output  [4:0] output_q_4_0_V_address0;
output   output_q_4_0_V_ce0;
output   output_q_4_0_V_we0;
output  [37:0] output_q_4_0_V_d0;
output  [4:0] output_q_5_0_V_address0;
output   output_q_5_0_V_ce0;
output   output_q_5_0_V_we0;
output  [37:0] output_q_5_0_V_d0;
output  [4:0] output_q_6_0_V_address0;
output   output_q_6_0_V_ce0;
output   output_q_6_0_V_we0;
output  [37:0] output_q_6_0_V_d0;
output  [4:0] output_q_7_0_V_address0;
output   output_q_7_0_V_ce0;
output   output_q_7_0_V_we0;
output  [37:0] output_q_7_0_V_d0;
output  [4:0] output_q_8_0_V_address0;
output   output_q_8_0_V_ce0;
output   output_q_8_0_V_we0;
output  [37:0] output_q_8_0_V_d0;
output  [4:0] output_q_9_0_V_address0;
output   output_q_9_0_V_ce0;
output   output_q_9_0_V_we0;
output  [37:0] output_q_9_0_V_d0;
output  [4:0] output_q_10_0_V_address0;
output   output_q_10_0_V_ce0;
output   output_q_10_0_V_we0;
output  [37:0] output_q_10_0_V_d0;
output  [4:0] output_q_11_0_V_address0;
output   output_q_11_0_V_ce0;
output   output_q_11_0_V_we0;
output  [37:0] output_q_11_0_V_d0;
output  [4:0] output_q_12_0_V_address0;
output   output_q_12_0_V_ce0;
output   output_q_12_0_V_we0;
output  [37:0] output_q_12_0_V_d0;
output  [4:0] output_q_13_0_V_address0;
output   output_q_13_0_V_ce0;
output   output_q_13_0_V_we0;
output  [37:0] output_q_13_0_V_d0;
output  [4:0] output_q_14_0_V_address0;
output   output_q_14_0_V_ce0;
output   output_q_14_0_V_we0;
output  [37:0] output_q_14_0_V_d0;
output  [4:0] output_q_15_0_V_address0;
output   output_q_15_0_V_ce0;
output   output_q_15_0_V_we0;
output  [37:0] output_q_15_0_V_d0;
output  [8:0] output_k_0_V_address0;
output   output_k_0_V_ce0;
output   output_k_0_V_we0;
output  [37:0] output_k_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] input_q_0_V_address0;
reg input_q_0_V_ce0;
reg input_q_0_V_ce1;
reg[8:0] input_k_0_V_address0;
reg input_k_0_V_ce0;
reg input_k_0_V_ce1;
reg output_q_0_0_V_ce0;
reg output_q_0_0_V_we0;
reg output_q_1_0_V_ce0;
reg output_q_1_0_V_we0;
reg output_q_2_0_V_ce0;
reg output_q_2_0_V_we0;
reg output_q_3_0_V_ce0;
reg output_q_3_0_V_we0;
reg output_q_4_0_V_ce0;
reg output_q_4_0_V_we0;
reg output_q_5_0_V_ce0;
reg output_q_5_0_V_we0;
reg output_q_6_0_V_ce0;
reg output_q_6_0_V_we0;
reg output_q_7_0_V_ce0;
reg output_q_7_0_V_we0;
reg output_q_8_0_V_ce0;
reg output_q_8_0_V_we0;
reg output_q_9_0_V_ce0;
reg output_q_9_0_V_we0;
reg output_q_10_0_V_ce0;
reg output_q_10_0_V_we0;
reg output_q_11_0_V_ce0;
reg output_q_11_0_V_we0;
reg output_q_12_0_V_ce0;
reg output_q_12_0_V_we0;
reg output_q_13_0_V_ce0;
reg output_q_13_0_V_we0;
reg output_q_14_0_V_ce0;
reg output_q_14_0_V_we0;
reg output_q_15_0_V_ce0;
reg output_q_15_0_V_we0;
reg output_k_0_V_ce0;
reg output_k_0_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_tab_V_5_address0;
reg    cos_tab_V_5_ce0;
wire   [20:0] cos_tab_V_5_q0;
wire   [6:0] sin_tab_V_5_address0;
reg    sin_tab_V_5_ce0;
wire   [20:0] sin_tab_V_5_q0;
reg   [37:0] reg_554;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
reg   [37:0] reg_558;
wire    ap_CS_fsm_state11;
wire   [3:0] i_fu_568_p2;
reg   [3:0] i_reg_890;
wire    ap_CS_fsm_state2;
wire   [9:0] sub_ln1265_fu_594_p2;
reg   [9:0] sub_ln1265_reg_895;
wire   [0:0] icmp_ln168_fu_562_p2;
wire   [4:0] add_ln170_fu_610_p2;
reg   [4:0] add_ln170_reg_904;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln203_fu_625_p1;
reg  signed [63:0] sext_ln203_reg_909;
wire   [0:0] icmp_ln170_fu_604_p2;
wire  signed [63:0] sext_ln1265_fu_646_p1;
reg  signed [63:0] sext_ln1265_reg_925;
wire   [3:0] i_2_fu_672_p2;
reg   [3:0] i_2_reg_944;
wire    ap_CS_fsm_state6;
wire   [9:0] sub_ln1116_fu_702_p2;
reg   [9:0] sub_ln1116_reg_949;
wire   [0:0] icmp_ln180_fu_666_p2;
wire   [5:0] sub_ln203_fu_716_p2;
reg   [5:0] sub_ln203_reg_954;
wire   [5:0] add_ln182_fu_728_p2;
reg   [5:0] add_ln182_reg_962;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln182_fu_722_p2;
reg   [8:0] input_k_0_V_addr_2_reg_972;
reg   [8:0] output_k_0_V_addr_reg_977;
reg   [8:0] rotated_k_0_V_addr_2_reg_987;
wire   [3:0] trunc_ln203_fu_758_p1;
reg   [3:0] trunc_ln203_reg_1002;
wire   [5:0] add_ln203_6_fu_776_p2;
reg   [5:0] add_ln203_6_reg_1006;
reg   [20:0] cos_tab_V_5_load_reg_1011;
reg   [20:0] sin_tab_V_5_load_reg_1016;
wire   [37:0] rotated_q_0_V_q0;
reg   [37:0] rotated_q_0_V_load_reg_1021;
wire  signed [57:0] sext_ln1118_6_fu_785_p1;
reg  signed [57:0] sext_ln1118_6_reg_1026;
wire    ap_CS_fsm_state9;
wire   [57:0] mul_ln1118_fu_788_p2;
reg   [57:0] mul_ln1118_reg_1031;
wire  signed [57:0] sext_ln1118_8_fu_797_p1;
reg  signed [57:0] sext_ln1118_8_reg_1036;
wire   [57:0] mul_ln1118_4_fu_800_p2;
reg   [57:0] mul_ln1118_4_reg_1041;
wire   [37:0] rotated_k_0_V_q0;
reg   [37:0] rotated_k_0_V_load_reg_1046;
wire   [57:0] mul_ln1118_5_fu_859_p2;
reg   [57:0] mul_ln1118_5_reg_1051;
wire    ap_CS_fsm_state12;
wire   [57:0] mul_ln1118_6_fu_867_p2;
reg   [57:0] mul_ln1118_6_reg_1056;
reg   [8:0] rotated_q_0_V_address0;
reg    rotated_q_0_V_ce0;
reg    rotated_q_0_V_we0;
reg   [37:0] rotated_q_0_V_d0;
reg   [8:0] rotated_k_0_V_address0;
reg    rotated_k_0_V_ce0;
reg    rotated_k_0_V_we0;
reg   [37:0] rotated_k_0_V_d0;
reg   [3:0] i_0_reg_510;
reg   [4:0] k_0_0_reg_521;
wire    ap_CS_fsm_state5;
reg   [3:0] i14_0_reg_532;
reg   [5:0] k16_0_0_reg_543;
wire    ap_CS_fsm_state13;
wire  signed [63:0] sext_ln1116_fu_749_p1;
wire   [63:0] zext_ln183_fu_734_p1;
wire  signed [63:0] sext_ln203_2_fu_836_p1;
wire    ap_CS_fsm_state10;
wire   [37:0] sub_ln703_fu_652_p2;
wire   [37:0] sub_ln703_38_fu_659_p2;
wire   [7:0] tmp_63_fu_582_p3;
wire   [9:0] tmp_62_fu_574_p3;
wire   [9:0] zext_ln1265_fu_590_p1;
wire   [9:0] zext_ln203_fu_616_p1;
wire   [9:0] add_ln203_fu_620_p2;
wire   [5:0] zext_ln170_fu_600_p1;
wire   [5:0] add_ln171_fu_631_p2;
wire   [9:0] zext_ln1265_3_fu_637_p1;
wire   [9:0] add_ln1265_fu_641_p2;
wire   [7:0] tmp_65_fu_690_p3;
wire   [9:0] tmp_64_fu_682_p3;
wire   [9:0] zext_ln1116_1_fu_698_p1;
wire   [5:0] tmp_66_fu_708_p3;
wire   [5:0] zext_ln1116_fu_678_p1;
wire   [9:0] zext_ln1116_2_fu_740_p1;
wire   [9:0] add_ln1116_fu_744_p2;
wire   [1:0] tmp_89_fu_762_p4;
wire   [5:0] zext_ln203_11_fu_772_p1;
wire  signed [20:0] mul_ln1118_fu_788_p0;
wire  signed [37:0] mul_ln1118_fu_788_p1;
wire  signed [20:0] mul_ln1118_4_fu_800_p0;
wire  signed [37:0] mul_ln1118_4_fu_800_p1;
wire   [57:0] add_ln1192_fu_806_p2;
wire  signed [20:0] mul_ln1118_5_fu_859_p0;
wire  signed [37:0] mul_ln1118_5_fu_859_p1;
wire  signed [20:0] mul_ln1118_6_fu_867_p0;
wire  signed [37:0] mul_ln1118_6_fu_867_p1;
wire   [57:0] add_ln1192_1_fu_872_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

apply_rotary_pos_fYi #(
    .DataWidth( 21 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
cos_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_tab_V_5_address0),
    .ce0(cos_tab_V_5_ce0),
    .q0(cos_tab_V_5_q0)
);

apply_rotary_pos_g8j #(
    .DataWidth( 21 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
sin_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_tab_V_5_address0),
    .ce0(sin_tab_V_5_ce0),
    .q0(sin_tab_V_5_q0)
);

apply_rotary_pos_hbi #(
    .DataWidth( 38 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
rotated_q_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_V_address0),
    .ce0(rotated_q_0_V_ce0),
    .we0(rotated_q_0_V_we0),
    .d0(rotated_q_0_V_d0),
    .q0(rotated_q_0_V_q0)
);

apply_rotary_pos_hbi #(
    .DataWidth( 38 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
rotated_k_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_V_address0),
    .ce0(rotated_k_0_V_ce0),
    .we0(rotated_k_0_V_we0),
    .d0(rotated_k_0_V_d0),
    .q0(rotated_k_0_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i14_0_reg_532 <= 4'd0;
    end else if (((icmp_ln182_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i14_0_reg_532 <= i_2_reg_944;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_510 <= 4'd0;
    end else if (((icmp_ln170_fu_604_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_510 <= i_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k16_0_0_reg_543 <= add_ln182_reg_962;
    end else if (((icmp_ln180_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k16_0_0_reg_543 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_521 <= add_ln170_reg_904;
    end else if (((icmp_ln168_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_521 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln170_reg_904 <= add_ln170_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln182_reg_962 <= add_ln182_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_722_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln203_6_reg_1006 <= add_ln203_6_fu_776_p2;
        input_k_0_V_addr_2_reg_972 <= sext_ln1116_fu_749_p1;
        output_k_0_V_addr_reg_977 <= sext_ln1116_fu_749_p1;
        rotated_k_0_V_addr_2_reg_987 <= sext_ln1116_fu_749_p1;
        trunc_ln203_reg_1002 <= trunc_ln203_fu_758_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cos_tab_V_5_load_reg_1011 <= cos_tab_V_5_q0;
        rotated_q_0_V_load_reg_1021 <= rotated_q_0_V_q0;
        sin_tab_V_5_load_reg_1016 <= sin_tab_V_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_944 <= i_2_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_890 <= i_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln1118_4_reg_1041 <= mul_ln1118_4_fu_800_p2;
        mul_ln1118_reg_1031 <= mul_ln1118_fu_788_p2;
        sext_ln1118_6_reg_1026 <= sext_ln1118_6_fu_785_p1;
        sext_ln1118_8_reg_1036 <= sext_ln1118_8_fu_797_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln1118_5_reg_1051 <= mul_ln1118_5_fu_859_p2;
        mul_ln1118_6_reg_1056 <= mul_ln1118_6_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_554 <= input_q_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_558 <= input_k_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        rotated_k_0_V_load_reg_1046 <= rotated_k_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_fu_604_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln1265_reg_925 <= sext_ln1265_fu_646_p1;
        sext_ln203_reg_909 <= sext_ln203_fu_625_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln1116_reg_949[9 : 4] <= sub_ln1116_fu_702_p2[9 : 4];
        sub_ln203_reg_954 <= sub_ln203_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_562_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln1265_reg_895[9 : 4] <= sub_ln1265_fu_594_p2[9 : 4];
    end
end

always @ (*) begin
    if ((((icmp_ln180_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln180_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cos_tab_V_5_ce0 = 1'b1;
    end else begin
        cos_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_k_0_V_address0 = input_k_0_V_addr_2_reg_972;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_address0 = sext_ln1265_fu_646_p1;
    end else begin
        input_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        input_k_0_V_ce0 = 1'b1;
    end else begin
        input_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_ce1 = 1'b1;
    end else begin
        input_k_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_q_0_V_address0 = sext_ln1116_fu_749_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_address0 = sext_ln1265_fu_646_p1;
    end else begin
        input_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        input_q_0_V_ce0 = 1'b1;
    end else begin
        input_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_ce1 = 1'b1;
    end else begin
        input_q_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_k_0_V_ce0 = 1'b1;
    end else begin
        output_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_k_0_V_we0 = 1'b1;
    end else begin
        output_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_0_0_V_ce0 = 1'b1;
    end else begin
        output_q_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_0_0_V_we0 = 1'b1;
    end else begin
        output_q_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_10_0_V_ce0 = 1'b1;
    end else begin
        output_q_10_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd10) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_10_0_V_we0 = 1'b1;
    end else begin
        output_q_10_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_11_0_V_ce0 = 1'b1;
    end else begin
        output_q_11_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd11) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_11_0_V_we0 = 1'b1;
    end else begin
        output_q_11_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_12_0_V_ce0 = 1'b1;
    end else begin
        output_q_12_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd12) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_12_0_V_we0 = 1'b1;
    end else begin
        output_q_12_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_13_0_V_ce0 = 1'b1;
    end else begin
        output_q_13_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd13) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_13_0_V_we0 = 1'b1;
    end else begin
        output_q_13_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_14_0_V_ce0 = 1'b1;
    end else begin
        output_q_14_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd14) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_14_0_V_we0 = 1'b1;
    end else begin
        output_q_14_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_15_0_V_ce0 = 1'b1;
    end else begin
        output_q_15_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd15) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_15_0_V_we0 = 1'b1;
    end else begin
        output_q_15_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_1_0_V_ce0 = 1'b1;
    end else begin
        output_q_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_1_0_V_we0 = 1'b1;
    end else begin
        output_q_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_2_0_V_ce0 = 1'b1;
    end else begin
        output_q_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_2_0_V_we0 = 1'b1;
    end else begin
        output_q_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_3_0_V_ce0 = 1'b1;
    end else begin
        output_q_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_3_0_V_we0 = 1'b1;
    end else begin
        output_q_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_4_0_V_ce0 = 1'b1;
    end else begin
        output_q_4_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd4) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_4_0_V_we0 = 1'b1;
    end else begin
        output_q_4_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_5_0_V_ce0 = 1'b1;
    end else begin
        output_q_5_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd5) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_5_0_V_we0 = 1'b1;
    end else begin
        output_q_5_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_6_0_V_ce0 = 1'b1;
    end else begin
        output_q_6_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd6) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_6_0_V_we0 = 1'b1;
    end else begin
        output_q_6_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_7_0_V_ce0 = 1'b1;
    end else begin
        output_q_7_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd7) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_7_0_V_we0 = 1'b1;
    end else begin
        output_q_7_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_8_0_V_ce0 = 1'b1;
    end else begin
        output_q_8_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd8) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_8_0_V_we0 = 1'b1;
    end else begin
        output_q_8_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_9_0_V_ce0 = 1'b1;
    end else begin
        output_q_9_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_1002 == 4'd9) & (1'b1 == ap_CS_fsm_state10))) begin
        output_q_9_0_V_we0 = 1'b1;
    end else begin
        output_q_9_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rotated_k_0_V_address0 = rotated_k_0_V_addr_2_reg_987;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_address0 = sext_ln203_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_address0 = sext_ln1265_reg_925;
    end else begin
        rotated_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_k_0_V_ce0 = 1'b1;
    end else begin
        rotated_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_d0 = sub_ln703_38_fu_659_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_d0 = input_k_0_V_q1;
    end else begin
        rotated_k_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_k_0_V_we0 = 1'b1;
    end else begin
        rotated_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rotated_q_0_V_address0 = sext_ln1116_fu_749_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_address0 = sext_ln203_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_address0 = sext_ln1265_reg_925;
    end else begin
        rotated_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_q_0_V_ce0 = 1'b1;
    end else begin
        rotated_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_d0 = sub_ln703_fu_652_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_d0 = input_q_0_V_q1;
    end else begin
        rotated_q_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        rotated_q_0_V_we0 = 1'b1;
    end else begin
        rotated_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sin_tab_V_5_ce0 = 1'b1;
    end else begin
        sin_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln168_fu_562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln170_fu_604_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln180_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln182_fu_722_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_744_p2 = (sub_ln1116_reg_949 + zext_ln1116_2_fu_740_p1);

assign add_ln1192_1_fu_872_p2 = (mul_ln1118_5_reg_1051 + mul_ln1118_6_reg_1056);

assign add_ln1192_fu_806_p2 = (mul_ln1118_reg_1031 + mul_ln1118_4_reg_1041);

assign add_ln1265_fu_641_p2 = (sub_ln1265_reg_895 + zext_ln1265_3_fu_637_p1);

assign add_ln170_fu_610_p2 = (k_0_0_reg_521 + 5'd1);

assign add_ln171_fu_631_p2 = (zext_ln170_fu_600_p1 + 6'd24);

assign add_ln182_fu_728_p2 = (k16_0_0_reg_543 + 6'd1);

assign add_ln203_6_fu_776_p2 = (sub_ln203_reg_954 + zext_ln203_11_fu_772_p1);

assign add_ln203_fu_620_p2 = (sub_ln1265_reg_895 + zext_ln203_fu_616_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cos_tab_V_5_address0 = zext_ln183_fu_734_p1;

assign i_2_fu_672_p2 = (i14_0_reg_532 + 4'd1);

assign i_fu_568_p2 = (i_0_reg_510 + 4'd1);

assign icmp_ln168_fu_562_p2 = ((i_0_reg_510 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_604_p2 = ((k_0_0_reg_521 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_666_p2 = ((i14_0_reg_532 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_722_p2 = ((k16_0_0_reg_543 == 6'd48) ? 1'b1 : 1'b0);

assign input_k_0_V_address1 = sext_ln203_fu_625_p1;

assign input_q_0_V_address1 = sext_ln203_fu_625_p1;

assign mul_ln1118_4_fu_800_p0 = sin_tab_V_5_load_reg_1016;

assign mul_ln1118_4_fu_800_p1 = rotated_q_0_V_load_reg_1021;

assign mul_ln1118_4_fu_800_p2 = ($signed(mul_ln1118_4_fu_800_p0) * $signed(mul_ln1118_4_fu_800_p1));

assign mul_ln1118_5_fu_859_p0 = sext_ln1118_6_reg_1026;

assign mul_ln1118_5_fu_859_p1 = reg_558;

assign mul_ln1118_5_fu_859_p2 = ($signed(mul_ln1118_5_fu_859_p0) * $signed(mul_ln1118_5_fu_859_p1));

assign mul_ln1118_6_fu_867_p0 = sext_ln1118_8_reg_1036;

assign mul_ln1118_6_fu_867_p1 = rotated_k_0_V_load_reg_1046;

assign mul_ln1118_6_fu_867_p2 = ($signed(mul_ln1118_6_fu_867_p0) * $signed(mul_ln1118_6_fu_867_p1));

assign mul_ln1118_fu_788_p0 = cos_tab_V_5_load_reg_1011;

assign mul_ln1118_fu_788_p1 = reg_554;

assign mul_ln1118_fu_788_p2 = ($signed(mul_ln1118_fu_788_p0) * $signed(mul_ln1118_fu_788_p1));

assign output_k_0_V_address0 = output_k_0_V_addr_reg_977;

assign output_k_0_V_d0 = {{add_ln1192_1_fu_872_p2[57:20]}};

assign output_q_0_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_0_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_10_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_10_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_11_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_11_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_12_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_12_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_13_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_13_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_14_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_14_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_15_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_15_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_1_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_1_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_2_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_2_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_3_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_3_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_4_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_4_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_5_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_5_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_6_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_6_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_7_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_7_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_8_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_8_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign output_q_9_0_V_address0 = sext_ln203_2_fu_836_p1;

assign output_q_9_0_V_d0 = {{add_ln1192_fu_806_p2[57:20]}};

assign sext_ln1116_fu_749_p1 = $signed(add_ln1116_fu_744_p2);

assign sext_ln1118_6_fu_785_p1 = $signed(cos_tab_V_5_load_reg_1011);

assign sext_ln1118_8_fu_797_p1 = $signed(sin_tab_V_5_load_reg_1016);

assign sext_ln1265_fu_646_p1 = $signed(add_ln1265_fu_641_p2);

assign sext_ln203_2_fu_836_p1 = $signed(add_ln203_6_reg_1006);

assign sext_ln203_fu_625_p1 = $signed(add_ln203_fu_620_p2);

assign sin_tab_V_5_address0 = zext_ln183_fu_734_p1;

assign sub_ln1116_fu_702_p2 = (tmp_64_fu_682_p3 - zext_ln1116_1_fu_698_p1);

assign sub_ln1265_fu_594_p2 = (tmp_62_fu_574_p3 - zext_ln1265_fu_590_p1);

assign sub_ln203_fu_716_p2 = (tmp_66_fu_708_p3 - zext_ln1116_fu_678_p1);

assign sub_ln703_38_fu_659_p2 = (38'd0 - reg_558);

assign sub_ln703_fu_652_p2 = (38'd0 - reg_554);

assign tmp_62_fu_574_p3 = {{i_0_reg_510}, {6'd0}};

assign tmp_63_fu_582_p3 = {{i_0_reg_510}, {4'd0}};

assign tmp_64_fu_682_p3 = {{i14_0_reg_532}, {6'd0}};

assign tmp_65_fu_690_p3 = {{i14_0_reg_532}, {4'd0}};

assign tmp_66_fu_708_p3 = {{i14_0_reg_532}, {2'd0}};

assign tmp_89_fu_762_p4 = {{k16_0_0_reg_543[5:4]}};

assign trunc_ln203_fu_758_p1 = k16_0_0_reg_543[3:0];

assign zext_ln1116_1_fu_698_p1 = tmp_65_fu_690_p3;

assign zext_ln1116_2_fu_740_p1 = k16_0_0_reg_543;

assign zext_ln1116_fu_678_p1 = i14_0_reg_532;

assign zext_ln1265_3_fu_637_p1 = add_ln171_fu_631_p2;

assign zext_ln1265_fu_590_p1 = tmp_63_fu_582_p3;

assign zext_ln170_fu_600_p1 = k_0_0_reg_521;

assign zext_ln183_fu_734_p1 = k16_0_0_reg_543;

assign zext_ln203_11_fu_772_p1 = tmp_89_fu_762_p4;

assign zext_ln203_fu_616_p1 = k_0_0_reg_521;

always @ (posedge ap_clk) begin
    sub_ln1265_reg_895[3:0] <= 4'b0000;
    sub_ln1116_reg_949[3:0] <= 4'b0000;
end

endmodule //apply_rotary_pos_emb
