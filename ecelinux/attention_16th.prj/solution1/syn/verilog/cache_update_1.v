// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_out_V_address0,
        cache_out_V_ce0,
        cache_out_V_we0,
        cache_out_V_d0,
        update_0_V_address0,
        update_0_V_ce0,
        update_0_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] cache_out_V_address0;
output   cache_out_V_ce0;
output   cache_out_V_we0;
output  [39:0] cache_out_V_d0;
output  [6:0] update_0_V_address0;
output   update_0_V_ce0;
input  [39:0] update_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_out_V_ce0;
reg cache_out_V_we0;
reg update_0_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] v_cache_V_address0;
reg    v_cache_V_ce0;
wire   [22:0] v_cache_V_q0;
wire   [2:0] i_fu_140_p2;
reg   [2:0] i_reg_380;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln245_fu_162_p2;
reg   [5:0] add_ln245_reg_385;
wire   [0:0] icmp_ln242_fu_134_p2;
wire  signed [7:0] sext_ln203_fu_202_p1;
reg  signed [7:0] sext_ln203_reg_390;
wire   [7:0] sub_ln245_fu_214_p2;
reg   [7:0] sub_ln245_reg_395;
wire   [2:0] j_fu_226_p2;
reg   [2:0] j_reg_403;
wire    ap_CS_fsm_state3;
wire   [12:0] sub_ln245_1_fu_269_p2;
reg   [12:0] sub_ln245_1_reg_408;
wire   [0:0] icmp_ln243_fu_220_p2;
wire   [10:0] sub_ln203_4_fu_300_p2;
reg   [10:0] sub_ln203_4_reg_413;
wire   [0:0] icmp_ln245_fu_306_p2;
reg   [0:0] icmp_ln245_reg_418;
wire   [4:0] k_fu_318_p2;
reg   [4:0] k_reg_426;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln244_fu_312_p2;
wire   [10:0] add_ln203_4_fu_346_p2;
reg   [10:0] add_ln203_4_reg_436;
reg   [2:0] i_0_reg_101;
reg   [2:0] j_0_reg_112;
reg   [4:0] k_0_reg_123;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln245_9_fu_341_p1;
wire  signed [63:0] sext_ln245_fu_356_p1;
wire   [63:0] zext_ln203_12_fu_361_p1;
wire   [4:0] tmp_59_fu_150_p3;
wire   [5:0] zext_ln245_fu_146_p1;
wire   [5:0] zext_ln245_1_fu_158_p1;
wire   [5:0] tmp_60_fu_168_p3;
wire   [3:0] tmp_61_fu_184_p3;
wire   [6:0] zext_ln203_10_fu_180_p1;
wire   [6:0] zext_ln203_11_fu_192_p1;
wire   [6:0] sub_ln203_fu_196_p2;
wire   [7:0] tmp_62_fu_206_p3;
wire   [7:0] zext_ln203_fu_176_p1;
wire   [5:0] zext_ln245_3_fu_236_p1;
wire   [5:0] add_ln245_1_fu_240_p2;
wire   [10:0] tmp_83_fu_245_p3;
wire   [8:0] tmp_84_fu_257_p3;
wire   [12:0] zext_ln245_4_fu_253_p1;
wire   [12:0] zext_ln245_5_fu_265_p1;
wire   [7:0] zext_ln245_2_fu_232_p1;
wire   [7:0] add_ln203_fu_275_p2;
wire   [5:0] trunc_ln203_fu_280_p1;
wire   [10:0] p_shl5_cast_fu_284_p3;
wire   [10:0] p_shl6_cast_fu_292_p3;
wire   [12:0] zext_ln245_8_fu_332_p1;
wire   [12:0] add_ln245_2_fu_336_p2;
wire   [10:0] zext_ln245_7_fu_328_p1;
wire   [7:0] zext_ln245_6_fu_324_p1;
wire   [7:0] add_ln245_3_fu_351_p2;
wire  signed [39:0] sext_ln203_2_fu_365_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

cache_update_1_v_lbW #(
    .DataWidth( 23 ),
    .AddressRange( 2880 ),
    .AddressWidth( 12 ))
v_cache_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(v_cache_V_address0),
    .ce0(v_cache_V_ce0),
    .q0(v_cache_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln243_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_101 <= i_reg_380;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_101 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln244_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_112 <= j_reg_403;
    end else if (((icmp_ln242_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_112 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_123 <= k_reg_426;
    end else if (((icmp_ln243_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_123 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln244_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_4_reg_436 <= add_ln203_4_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln242_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln245_reg_385 <= add_ln245_fu_162_p2;
        sext_ln203_reg_390[7 : 1] <= sext_ln203_fu_202_p1[7 : 1];
        sub_ln245_reg_395[7 : 3] <= sub_ln245_fu_214_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_380 <= i_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln243_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln245_reg_418 <= icmp_ln245_fu_306_p2;
        sub_ln203_4_reg_413[10 : 3] <= sub_ln203_4_fu_300_p2[10 : 3];
        sub_ln245_1_reg_408[12 : 3] <= sub_ln245_1_fu_269_p2[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_403 <= j_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_426 <= k_fu_318_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln242_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln242_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_ce0 = 1'b1;
    end else begin
        cache_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_we0 = 1'b1;
    end else begin
        cache_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        update_0_V_ce0 = 1'b1;
    end else begin
        update_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_cache_V_ce0 = 1'b1;
    end else begin
        v_cache_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln242_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln243_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln244_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_4_fu_346_p2 = (sub_ln203_4_reg_413 + zext_ln245_7_fu_328_p1);

assign add_ln203_fu_275_p2 = ($signed(sext_ln203_reg_390) + $signed(zext_ln245_2_fu_232_p1));

assign add_ln245_1_fu_240_p2 = (add_ln245_reg_385 + zext_ln245_3_fu_236_p1);

assign add_ln245_2_fu_336_p2 = (sub_ln245_1_reg_408 + zext_ln245_8_fu_332_p1);

assign add_ln245_3_fu_351_p2 = (sub_ln245_reg_395 + zext_ln245_6_fu_324_p1);

assign add_ln245_fu_162_p2 = (zext_ln245_fu_146_p1 + zext_ln245_1_fu_158_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign cache_out_V_address0 = zext_ln203_12_fu_361_p1;

assign cache_out_V_d0 = ((icmp_ln245_reg_418[0:0] === 1'b1) ? update_0_V_q0 : sext_ln203_2_fu_365_p1);

assign i_fu_140_p2 = (i_0_reg_101 + 3'd1);

assign icmp_ln242_fu_134_p2 = ((i_0_reg_101 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_220_p2 = ((j_0_reg_112 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_312_p2 = ((k_0_reg_123 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_306_p2 = ((j_0_reg_112 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_226_p2 = (j_0_reg_112 + 3'd1);

assign k_fu_318_p2 = (k_0_reg_123 + 5'd1);

assign p_shl5_cast_fu_284_p3 = {{trunc_ln203_fu_280_p1}, {5'd0}};

assign p_shl6_cast_fu_292_p3 = {{add_ln203_fu_275_p2}, {3'd0}};

assign sext_ln203_2_fu_365_p1 = $signed(v_cache_V_q0);

assign sext_ln203_fu_202_p1 = $signed(sub_ln203_fu_196_p2);

assign sext_ln245_fu_356_p1 = $signed(add_ln245_3_fu_351_p2);

assign sub_ln203_4_fu_300_p2 = (p_shl5_cast_fu_284_p3 - p_shl6_cast_fu_292_p3);

assign sub_ln203_fu_196_p2 = (zext_ln203_10_fu_180_p1 - zext_ln203_11_fu_192_p1);

assign sub_ln245_1_fu_269_p2 = (zext_ln245_4_fu_253_p1 - zext_ln245_5_fu_265_p1);

assign sub_ln245_fu_214_p2 = (tmp_62_fu_206_p3 - zext_ln203_fu_176_p1);

assign tmp_59_fu_150_p3 = {{i_0_reg_101}, {2'd0}};

assign tmp_60_fu_168_p3 = {{i_0_reg_101}, {3'd0}};

assign tmp_61_fu_184_p3 = {{i_0_reg_101}, {1'd0}};

assign tmp_62_fu_206_p3 = {{i_0_reg_101}, {5'd0}};

assign tmp_83_fu_245_p3 = {{add_ln245_1_fu_240_p2}, {5'd0}};

assign tmp_84_fu_257_p3 = {{add_ln245_1_fu_240_p2}, {3'd0}};

assign trunc_ln203_fu_280_p1 = add_ln203_fu_275_p2[5:0];

assign update_0_V_address0 = sext_ln245_fu_356_p1;

assign v_cache_V_address0 = zext_ln245_9_fu_341_p1;

assign zext_ln203_10_fu_180_p1 = tmp_60_fu_168_p3;

assign zext_ln203_11_fu_192_p1 = tmp_61_fu_184_p3;

assign zext_ln203_12_fu_361_p1 = add_ln203_4_reg_436;

assign zext_ln203_fu_176_p1 = tmp_60_fu_168_p3;

assign zext_ln245_1_fu_158_p1 = tmp_59_fu_150_p3;

assign zext_ln245_2_fu_232_p1 = j_0_reg_112;

assign zext_ln245_3_fu_236_p1 = j_0_reg_112;

assign zext_ln245_4_fu_253_p1 = tmp_83_fu_245_p3;

assign zext_ln245_5_fu_265_p1 = tmp_84_fu_257_p3;

assign zext_ln245_6_fu_324_p1 = k_0_reg_123;

assign zext_ln245_7_fu_328_p1 = k_0_reg_123;

assign zext_ln245_8_fu_332_p1 = k_0_reg_123;

assign zext_ln245_9_fu_341_p1 = add_ln245_2_fu_336_p2;

assign zext_ln245_fu_146_p1 = i_0_reg_101;

always @ (posedge ap_clk) begin
    sext_ln203_reg_390[0] <= 1'b0;
    sub_ln245_reg_395[2:0] <= 3'b000;
    sub_ln245_1_reg_408[2:0] <= 3'b000;
    sub_ln203_4_reg_413[2:0] <= 3'b000;
end

endmodule //cache_update_1
