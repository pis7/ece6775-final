// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_1_0_V_address0,
        input_1_0_V_ce0,
        input_1_0_V_q0,
        input_2_V_address0,
        input_2_V_ce0,
        input_2_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_1_0_V_address0;
output   input_1_0_V_ce0;
input  [39:0] input_1_0_V_q0;
output  [9:0] input_2_V_address0;
output   input_2_V_ce0;
input  [39:0] input_2_V_q0;
output  [6:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_1_0_V_ce0;
reg input_2_V_ce0;
reg output_0_V_ce0;
reg output_0_V_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_158_p2;
reg   [2:0] i_reg_344;
wire    ap_CS_fsm_state2;
wire  signed [7:0] sext_ln1116_fu_198_p1;
reg  signed [7:0] sext_ln1116_reg_349;
wire   [0:0] icmp_ln270_fu_152_p2;
wire   [7:0] sub_ln203_fu_210_p2;
reg   [7:0] sub_ln203_reg_354;
wire   [4:0] add_ln272_fu_222_p2;
reg   [4:0] add_ln272_reg_362;
wire    ap_CS_fsm_state3;
wire   [10:0] zext_ln203_fu_228_p1;
reg   [10:0] zext_ln203_reg_367;
wire   [0:0] icmp_ln272_fu_216_p2;
reg   [6:0] output_0_V_addr_reg_372;
wire   [2:0] add_ln274_fu_252_p2;
reg   [2:0] add_ln274_reg_380;
wire    ap_CS_fsm_state4;
wire  signed [7:0] add_ln1116_fu_262_p2;
reg  signed [7:0] add_ln1116_reg_385;
wire   [0:0] icmp_ln274_fu_246_p2;
wire   [10:0] add_ln1117_fu_293_p2;
reg   [10:0] add_ln1117_reg_390;
wire    ap_CS_fsm_state5;
reg   [39:0] input_1_0_V_load_reg_405;
wire    ap_CS_fsm_state6;
reg   [39:0] input_2_V_load_reg_410;
wire   [55:0] mul_ln1192_fu_312_p2;
reg   [55:0] mul_ln1192_reg_415;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [2:0] i_0_reg_106;
reg   [4:0] k_0_0_reg_117;
reg   [39:0] output_0_V_load_reg_128;
reg   [2:0] l_0_0_reg_141;
wire  signed [63:0] sext_ln203_fu_241_p1;
wire  signed [63:0] sext_ln1116_2_fu_298_p1;
wire   [63:0] zext_ln1117_fu_302_p1;
wire   [5:0] tmp_79_fu_164_p3;
wire   [3:0] tmp_80_fu_180_p3;
wire   [6:0] zext_ln1116_5_fu_176_p1;
wire   [6:0] zext_ln1116_6_fu_188_p1;
wire   [6:0] sub_ln1116_fu_192_p2;
wire   [7:0] tmp_81_fu_202_p3;
wire   [7:0] zext_ln1116_fu_172_p1;
wire   [7:0] zext_ln203_18_fu_232_p1;
wire   [7:0] add_ln203_fu_236_p2;
wire   [7:0] zext_ln1116_7_fu_258_p1;
wire   [5:0] trunc_ln1117_fu_267_p1;
wire   [10:0] p_shl4_cast_fu_271_p3;
wire   [10:0] p_shl5_cast_fu_279_p3;
wire   [10:0] sub_ln1117_fu_287_p2;
wire  signed [39:0] mul_ln1192_fu_312_p0;
wire  signed [39:0] mul_ln1192_fu_312_p1;
wire   [55:0] shl_ln_fu_318_p3;
wire   [55:0] add_ln1192_fu_326_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln272_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_106 <= i_reg_344;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_106 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln274_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_0_reg_117 <= add_ln272_reg_362;
    end else if (((icmp_ln270_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_117 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l_0_0_reg_141 <= add_ln274_reg_380;
    end else if (((icmp_ln272_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l_0_0_reg_141 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_0_V_load_reg_128 <= {{add_ln1192_fu_326_p2[55:16]}};
    end else if (((icmp_ln272_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_load_reg_128 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln274_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln1116_reg_385 <= add_ln1116_fu_262_p2;
        add_ln1117_reg_390 <= add_ln1117_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln272_reg_362 <= add_ln272_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln274_reg_380 <= add_ln274_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_344 <= i_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_0_V_load_reg_405 <= input_1_0_V_q0;
        input_2_V_load_reg_410 <= input_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1192_reg_415 <= mul_ln1192_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln272_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_addr_reg_372 <= sext_ln203_fu_241_p1;
        zext_ln203_reg_367[4 : 0] <= zext_ln203_fu_228_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln270_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln1116_reg_349[7 : 1] <= sext_ln1116_fu_198_p1[7 : 1];
        sub_ln203_reg_354[7 : 3] <= sub_ln203_fu_210_p2[7 : 3];
    end
end

always @ (*) begin
    if ((((icmp_ln270_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln270_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_V_ce0 = 1'b1;
    end else begin
        input_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln270_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln272_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln274_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_262_p2 = ($signed(sext_ln1116_reg_349) + $signed(zext_ln1116_7_fu_258_p1));

assign add_ln1117_fu_293_p2 = (sub_ln1117_fu_287_p2 + zext_ln203_reg_367);

assign add_ln1192_fu_326_p2 = (mul_ln1192_reg_415 + shl_ln_fu_318_p3);

assign add_ln203_fu_236_p2 = (sub_ln203_reg_354 + zext_ln203_18_fu_232_p1);

assign add_ln272_fu_222_p2 = (k_0_0_reg_117 + 5'd1);

assign add_ln274_fu_252_p2 = (l_0_0_reg_141 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_fu_158_p2 = (i_0_reg_106 + 3'd1);

assign icmp_ln270_fu_152_p2 = ((i_0_reg_106 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_216_p2 = ((k_0_0_reg_117 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln274_fu_246_p2 = ((l_0_0_reg_141 == 3'd6) ? 1'b1 : 1'b0);

assign input_1_0_V_address0 = sext_ln1116_2_fu_298_p1;

assign input_2_V_address0 = zext_ln1117_fu_302_p1;

assign mul_ln1192_fu_312_p0 = input_2_V_load_reg_410;

assign mul_ln1192_fu_312_p1 = input_1_0_V_load_reg_405;

assign mul_ln1192_fu_312_p2 = ($signed(mul_ln1192_fu_312_p0) * $signed(mul_ln1192_fu_312_p1));

assign output_0_V_address0 = output_0_V_addr_reg_372;

assign output_0_V_d0 = output_0_V_load_reg_128;

assign p_shl4_cast_fu_271_p3 = {{trunc_ln1117_fu_267_p1}, {5'd0}};

assign p_shl5_cast_fu_279_p3 = {{add_ln1116_fu_262_p2}, {3'd0}};

assign sext_ln1116_2_fu_298_p1 = add_ln1116_reg_385;

assign sext_ln1116_fu_198_p1 = $signed(sub_ln1116_fu_192_p2);

assign sext_ln203_fu_241_p1 = $signed(add_ln203_fu_236_p2);

assign shl_ln_fu_318_p3 = {{output_0_V_load_reg_128}, {16'd0}};

assign sub_ln1116_fu_192_p2 = (zext_ln1116_5_fu_176_p1 - zext_ln1116_6_fu_188_p1);

assign sub_ln1117_fu_287_p2 = (p_shl4_cast_fu_271_p3 - p_shl5_cast_fu_279_p3);

assign sub_ln203_fu_210_p2 = (tmp_81_fu_202_p3 - zext_ln1116_fu_172_p1);

assign tmp_79_fu_164_p3 = {{i_0_reg_106}, {3'd0}};

assign tmp_80_fu_180_p3 = {{i_0_reg_106}, {1'd0}};

assign tmp_81_fu_202_p3 = {{i_0_reg_106}, {5'd0}};

assign trunc_ln1117_fu_267_p1 = add_ln1116_fu_262_p2[5:0];

assign zext_ln1116_5_fu_176_p1 = tmp_79_fu_164_p3;

assign zext_ln1116_6_fu_188_p1 = tmp_80_fu_180_p3;

assign zext_ln1116_7_fu_258_p1 = l_0_0_reg_141;

assign zext_ln1116_fu_172_p1 = tmp_79_fu_164_p3;

assign zext_ln1117_fu_302_p1 = add_ln1117_reg_390;

assign zext_ln203_18_fu_232_p1 = k_0_0_reg_117;

assign zext_ln203_fu_228_p1 = k_0_0_reg_117;

always @ (posedge ap_clk) begin
    sext_ln1116_reg_349[0] <= 1'b0;
    sub_ln203_reg_354[2:0] <= 3'b000;
    zext_ln203_reg_367[10:5] <= 6'b000000;
end

endmodule //GEMM_3D_float
