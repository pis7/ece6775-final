// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_0_0_V_address0,
        input_0_0_0_V_ce0,
        input_0_0_0_V_q0,
        input_0_1_0_V_address0,
        input_0_1_0_V_ce0,
        input_0_1_0_V_q0,
        input_0_2_0_V_address0,
        input_0_2_0_V_ce0,
        input_0_2_0_V_q0,
        input_0_3_0_V_address0,
        input_0_3_0_V_ce0,
        input_0_3_0_V_q0,
        input_1_0_0_V_address0,
        input_1_0_0_V_ce0,
        input_1_0_0_V_q0,
        input_1_1_0_V_address0,
        input_1_1_0_V_ce0,
        input_1_1_0_V_q0,
        input_1_2_0_V_address0,
        input_1_2_0_V_ce0,
        input_1_2_0_V_q0,
        input_1_3_0_V_address0,
        input_1_3_0_V_ce0,
        input_1_3_0_V_q0,
        input_2_0_0_V_address0,
        input_2_0_0_V_ce0,
        input_2_0_0_V_q0,
        input_2_1_0_V_address0,
        input_2_1_0_V_ce0,
        input_2_1_0_V_q0,
        input_2_2_0_V_address0,
        input_2_2_0_V_ce0,
        input_2_2_0_V_q0,
        input_2_3_0_V_address0,
        input_2_3_0_V_ce0,
        input_2_3_0_V_q0,
        input_3_0_0_V_address0,
        input_3_0_0_V_ce0,
        input_3_0_0_V_q0,
        input_3_1_0_V_address0,
        input_3_1_0_V_ce0,
        input_3_1_0_V_q0,
        input_3_2_0_V_address0,
        input_3_2_0_V_ce0,
        input_3_2_0_V_q0,
        input_3_3_0_V_address0,
        input_3_3_0_V_ce0,
        input_3_3_0_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0,
        output_0_V_address1,
        output_0_V_ce1,
        output_0_V_we1,
        output_0_V_d1,
        scales_0_V_read,
        packed_weights_0_address0,
        packed_weights_0_ce0,
        packed_weights_0_q0,
        packed_weights_1_address0,
        packed_weights_1_ce0,
        packed_weights_1_q0,
        packed_weights_2_address0,
        packed_weights_2_ce0,
        packed_weights_2_q0,
        packed_weights_3_address0,
        packed_weights_3_ce0,
        packed_weights_3_q0,
        w_scale_V
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state89 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_0_0_0_V_address0;
output   input_0_0_0_V_ce0;
input  [7:0] input_0_0_0_V_q0;
output  [2:0] input_0_1_0_V_address0;
output   input_0_1_0_V_ce0;
input  [7:0] input_0_1_0_V_q0;
output  [2:0] input_0_2_0_V_address0;
output   input_0_2_0_V_ce0;
input  [7:0] input_0_2_0_V_q0;
output  [2:0] input_0_3_0_V_address0;
output   input_0_3_0_V_ce0;
input  [7:0] input_0_3_0_V_q0;
output  [2:0] input_1_0_0_V_address0;
output   input_1_0_0_V_ce0;
input  [7:0] input_1_0_0_V_q0;
output  [2:0] input_1_1_0_V_address0;
output   input_1_1_0_V_ce0;
input  [7:0] input_1_1_0_V_q0;
output  [2:0] input_1_2_0_V_address0;
output   input_1_2_0_V_ce0;
input  [7:0] input_1_2_0_V_q0;
output  [2:0] input_1_3_0_V_address0;
output   input_1_3_0_V_ce0;
input  [7:0] input_1_3_0_V_q0;
output  [2:0] input_2_0_0_V_address0;
output   input_2_0_0_V_ce0;
input  [7:0] input_2_0_0_V_q0;
output  [2:0] input_2_1_0_V_address0;
output   input_2_1_0_V_ce0;
input  [7:0] input_2_1_0_V_q0;
output  [2:0] input_2_2_0_V_address0;
output   input_2_2_0_V_ce0;
input  [7:0] input_2_2_0_V_q0;
output  [2:0] input_2_3_0_V_address0;
output   input_2_3_0_V_ce0;
input  [7:0] input_2_3_0_V_q0;
output  [2:0] input_3_0_0_V_address0;
output   input_3_0_0_V_ce0;
input  [7:0] input_3_0_0_V_q0;
output  [2:0] input_3_1_0_V_address0;
output   input_3_1_0_V_ce0;
input  [7:0] input_3_1_0_V_q0;
output  [2:0] input_3_2_0_V_address0;
output   input_3_2_0_V_ce0;
input  [7:0] input_3_2_0_V_q0;
output  [2:0] input_3_3_0_V_address0;
output   input_3_3_0_V_ce0;
input  [7:0] input_3_3_0_V_q0;
output  [6:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [37:0] output_0_V_d0;
input  [37:0] output_0_V_q0;
output  [6:0] output_0_V_address1;
output   output_0_V_ce1;
output   output_0_V_we1;
output  [37:0] output_0_V_d1;
input  [37:0] scales_0_V_read;
output  [9:0] packed_weights_0_address0;
output   packed_weights_0_ce0;
input  [7:0] packed_weights_0_q0;
output  [9:0] packed_weights_1_address0;
output   packed_weights_1_ce0;
input  [7:0] packed_weights_1_q0;
output  [9:0] packed_weights_2_address0;
output   packed_weights_2_ce0;
input  [7:0] packed_weights_2_q0;
output  [9:0] packed_weights_3_address0;
output   packed_weights_3_ce0;
input  [7:0] packed_weights_3_q0;
input  [25:0] w_scale_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_0_0_V_ce0;
reg input_0_1_0_V_ce0;
reg input_0_2_0_V_ce0;
reg input_0_3_0_V_ce0;
reg input_1_0_0_V_ce0;
reg input_1_1_0_V_ce0;
reg input_1_2_0_V_ce0;
reg input_1_3_0_V_ce0;
reg input_2_0_0_V_ce0;
reg input_2_1_0_V_ce0;
reg input_2_2_0_V_ce0;
reg input_2_3_0_V_ce0;
reg input_3_0_0_V_ce0;
reg input_3_1_0_V_ce0;
reg input_3_2_0_V_ce0;
reg input_3_3_0_V_ce0;
reg[6:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg output_0_V_ce1;
reg output_0_V_we1;
reg packed_weights_0_ce0;
reg packed_weights_1_ce0;
reg packed_weights_2_ce0;
reg packed_weights_3_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_419;
reg   [6:0] j_0_0_reg_430;
reg   [2:0] ko_0_0_reg_442;
wire  signed [77:0] sext_ln1148_fu_467_p1;
reg  signed [77:0] sext_ln1148_reg_1763;
wire   [0:0] icmp_ln120_fu_471_p2;
reg   [0:0] icmp_ln120_reg_1768;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state20_pp0_stage0_iter6;
wire    ap_block_state23_pp0_stage0_iter7;
wire    ap_block_state26_pp0_stage0_iter8;
wire    ap_block_state29_pp0_stage0_iter9;
wire    ap_block_state32_pp0_stage0_iter10;
wire    ap_block_state35_pp0_stage0_iter11;
wire    ap_block_state38_pp0_stage0_iter12;
wire    ap_block_state41_pp0_stage0_iter13;
wire    ap_block_state44_pp0_stage0_iter14;
wire    ap_block_state47_pp0_stage0_iter15;
wire    ap_block_state50_pp0_stage0_iter16;
wire    ap_block_state53_pp0_stage0_iter17;
wire    ap_block_state56_pp0_stage0_iter18;
wire    ap_block_state59_pp0_stage0_iter19;
wire    ap_block_state62_pp0_stage0_iter20;
wire    ap_block_state65_pp0_stage0_iter21;
wire    ap_block_state68_pp0_stage0_iter22;
wire    ap_block_state71_pp0_stage0_iter23;
wire    ap_block_state74_pp0_stage0_iter24;
wire    ap_block_state77_pp0_stage0_iter25;
wire    ap_block_state80_pp0_stage0_iter26;
wire    ap_block_state83_pp0_stage0_iter27;
wire    ap_block_state86_pp0_stage0_iter28;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_1768_pp0_iter1_reg;
wire   [9:0] add_ln120_1_fu_477_p2;
reg   [9:0] add_ln120_1_reg_1772;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] add_ln120_fu_483_p2;
reg   [6:0] add_ln120_reg_1777;
wire   [0:0] icmp_ln121_fu_489_p2;
reg   [0:0] icmp_ln121_reg_1782;
wire   [2:0] select_ln124_fu_495_p3;
reg   [2:0] select_ln124_reg_1787;
wire   [6:0] select_ln124_1_fu_523_p3;
reg   [6:0] select_ln124_1_reg_1874;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_state15_pp0_stage1_iter4;
wire    ap_block_state18_pp0_stage1_iter5;
wire    ap_block_state21_pp0_stage1_iter6;
wire    ap_block_state24_pp0_stage1_iter7;
wire    ap_block_state27_pp0_stage1_iter8;
wire    ap_block_state30_pp0_stage1_iter9;
wire    ap_block_state33_pp0_stage1_iter10;
wire    ap_block_state36_pp0_stage1_iter11;
wire    ap_block_state39_pp0_stage1_iter12;
wire    ap_block_state42_pp0_stage1_iter13;
wire    ap_block_state45_pp0_stage1_iter14;
wire    ap_block_state48_pp0_stage1_iter15;
wire    ap_block_state51_pp0_stage1_iter16;
wire    ap_block_state54_pp0_stage1_iter17;
wire    ap_block_state57_pp0_stage1_iter18;
wire    ap_block_state60_pp0_stage1_iter19;
wire    ap_block_state63_pp0_stage1_iter20;
wire    ap_block_state66_pp0_stage1_iter21;
wire    ap_block_state69_pp0_stage1_iter22;
wire    ap_block_state72_pp0_stage1_iter23;
wire    ap_block_state75_pp0_stage1_iter24;
wire    ap_block_state78_pp0_stage1_iter25;
wire    ap_block_state81_pp0_stage1_iter26;
wire    ap_block_state84_pp0_stage1_iter27;
wire    ap_block_state87_pp0_stage1_iter28;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] input_0_0_0_V_loa_reg_1900;
reg   [7:0] input_0_1_0_V_loa_reg_1906;
reg   [7:0] input_0_2_0_V_loa_reg_1912;
reg   [7:0] input_0_3_0_V_loa_reg_1918;
reg   [7:0] input_1_0_0_V_loa_reg_1924;
reg   [7:0] input_1_1_0_V_loa_reg_1930;
reg   [7:0] input_1_2_0_V_loa_reg_1936;
reg   [7:0] input_1_3_0_V_loa_reg_1942;
reg   [7:0] input_2_0_0_V_loa_reg_1948;
reg   [7:0] input_2_1_0_V_loa_reg_1954;
reg   [7:0] input_2_2_0_V_loa_reg_1960;
reg   [7:0] input_2_3_0_V_loa_reg_1966;
reg   [7:0] input_3_0_0_V_loa_reg_1972;
reg   [7:0] input_3_1_0_V_loa_reg_1978;
reg   [7:0] input_3_2_0_V_loa_reg_1984;
reg   [7:0] input_3_3_0_V_loa_reg_1990;
reg   [6:0] output_0_V_addr_reg_1996;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_state16_pp0_stage2_iter4;
wire    ap_block_state19_pp0_stage2_iter5;
wire    ap_block_state22_pp0_stage2_iter6;
wire    ap_block_state25_pp0_stage2_iter7;
wire    ap_block_state28_pp0_stage2_iter8;
wire    ap_block_state31_pp0_stage2_iter9;
wire    ap_block_state34_pp0_stage2_iter10;
wire    ap_block_state37_pp0_stage2_iter11;
wire    ap_block_state40_pp0_stage2_iter12;
wire    ap_block_state43_pp0_stage2_iter13;
wire    ap_block_state46_pp0_stage2_iter14;
wire    ap_block_state49_pp0_stage2_iter15;
wire    ap_block_state52_pp0_stage2_iter16;
wire    ap_block_state55_pp0_stage2_iter17;
wire    ap_block_state58_pp0_stage2_iter18;
wire    ap_block_state61_pp0_stage2_iter19;
wire    ap_block_state64_pp0_stage2_iter20;
wire    ap_block_state67_pp0_stage2_iter21;
wire    ap_block_state70_pp0_stage2_iter22;
wire    ap_block_state73_pp0_stage2_iter23;
wire    ap_block_state76_pp0_stage2_iter24;
wire    ap_block_state79_pp0_stage2_iter25;
wire    ap_block_state82_pp0_stage2_iter26;
wire    ap_block_state85_pp0_stage2_iter27;
wire    ap_block_state88_pp0_stage2_iter28;
wire    ap_block_pp0_stage2_11001;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter1_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter2_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter3_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter4_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter5_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter6_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter7_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter8_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter9_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter10_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter11_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter12_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter13_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter14_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter15_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter16_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter17_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter18_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter19_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter20_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter21_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter22_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter23_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter24_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter25_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter26_reg;
reg   [6:0] output_0_V_addr_reg_1996_pp0_iter27_reg;
wire   [7:0] select_ln129_fu_619_p3;
reg   [7:0] select_ln129_reg_2002;
reg   [1:0] trunc_ln_reg_2007;
wire   [1:0] trunc_ln126_2_fu_769_p1;
reg   [1:0] trunc_ln126_2_reg_2013;
reg   [1:0] trunc_ln126_8_reg_2019;
reg   [1:0] trunc_ln126_9_reg_2025;
reg   [1:0] trunc_ln126_s_reg_2031;
wire   [7:0] sub_ln701_13_fu_1187_p2;
reg   [7:0] sub_ln701_13_reg_2037;
wire   [28:0] add_ln703_33_fu_1324_p2;
reg   [28:0] add_ln703_33_reg_2042;
wire   [28:0] add_ln703_39_fu_1330_p2;
reg   [28:0] add_ln703_39_reg_2047;
wire   [28:0] add_ln703_40_fu_1336_p2;
reg   [28:0] add_ln703_40_reg_2052;
wire   [28:0] add_ln703_42_fu_1342_p2;
reg   [28:0] add_ln703_42_reg_2057;
wire   [28:0] add_ln703_43_fu_1348_p2;
reg   [28:0] add_ln703_43_reg_2062;
wire   [2:0] add_ln121_fu_1354_p2;
reg   [2:0] add_ln121_reg_2067;
wire   [37:0] add_ln703_34_fu_1643_p2;
reg   [37:0] add_ln703_34_reg_2073;
wire   [29:0] add_ln703_37_fu_1669_p2;
reg   [29:0] add_ln703_37_reg_2078;
wire   [31:0] add_ln703_46_fu_1717_p2;
reg   [31:0] add_ln703_46_reg_2083;
wire   [37:0] add_ln703_47_fu_1734_p2;
reg   [37:0] add_ln703_47_reg_2088;
wire   [0:0] icmp_ln121_1_fu_1741_p2;
reg   [0:0] icmp_ln121_1_reg_2093;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter2_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter3_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter4_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter5_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter6_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter7_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter8_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter9_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter10_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter11_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter12_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter13_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter14_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter15_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter16_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter17_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter18_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter19_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter20_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter21_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter22_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter23_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter24_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter25_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter26_reg;
reg   [0:0] icmp_ln121_1_reg_2093_pp0_iter27_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_423_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_j_0_0_phi_fu_434_p4;
reg   [2:0] ap_phi_mux_ko_0_0_phi_fu_446_p4;
wire   [63:0] zext_ln124_1_fu_503_p1;
wire  signed [63:0] sext_ln124_fu_567_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln124_fu_575_p1;
wire    ap_block_pp0_stage2;
wire   [25:0] mul_ln1118_fu_461_p0;
wire  signed [37:0] mul_ln1118_fu_461_p1;
wire   [62:0] mul_ln1118_fu_461_p2;
wire   [9:0] tmp_51_fu_533_p3;
wire   [7:0] tmp_52_fu_544_p3;
wire   [10:0] zext_ln124_2_fu_540_p1;
wire   [10:0] zext_ln124_3_fu_551_p1;
wire   [10:0] zext_ln121_fu_529_p1;
wire   [10:0] sub_ln124_fu_555_p2;
wire   [10:0] add_ln124_fu_561_p2;
wire   [1:0] trunc_ln126_fu_579_p1;
wire   [0:0] icmp_ln128_fu_583_p2;
wire   [0:0] icmp_ln129_fu_589_p2;
wire   [0:0] xor_ln128_fu_600_p2;
wire   [0:0] and_ln129_fu_606_p2;
wire   [7:0] sub_ln701_fu_595_p2;
wire   [7:0] select_ln128_fu_612_p3;
wire   [1:0] trunc_ln126_3_fu_627_p4;
wire   [0:0] icmp_ln128_1_fu_637_p2;
wire   [0:0] icmp_ln129_1_fu_643_p2;
wire   [0:0] xor_ln128_1_fu_654_p2;
wire   [0:0] and_ln129_1_fu_660_p2;
wire   [7:0] sub_ln701_1_fu_649_p2;
wire   [7:0] select_ln128_1_fu_666_p3;
wire   [7:0] select_ln129_1_fu_673_p3;
wire   [27:0] shl_ln703_1_fu_681_p3;
wire   [1:0] trunc_ln126_4_fu_693_p4;
wire   [0:0] icmp_ln128_2_fu_703_p2;
wire   [0:0] icmp_ln129_2_fu_709_p2;
wire   [0:0] xor_ln128_2_fu_720_p2;
wire   [0:0] and_ln129_2_fu_726_p2;
wire   [7:0] sub_ln701_2_fu_715_p2;
wire   [7:0] select_ln128_2_fu_732_p3;
wire   [7:0] select_ln129_2_fu_739_p3;
wire   [27:0] shl_ln703_2_fu_747_p3;
wire   [1:0] trunc_ln128_1_fu_793_p4;
wire   [0:0] icmp_ln128_7_fu_803_p2;
wire   [0:0] icmp_ln129_7_fu_809_p2;
wire   [0:0] xor_ln128_7_fu_820_p2;
wire   [0:0] and_ln129_7_fu_826_p2;
wire   [7:0] sub_ln701_7_fu_815_p2;
wire   [7:0] select_ln128_7_fu_832_p3;
wire   [7:0] select_ln129_7_fu_839_p3;
wire   [27:0] shl_ln703_7_fu_847_p3;
wire   [1:0] trunc_ln126_6_fu_859_p1;
wire   [0:0] icmp_ln128_8_fu_863_p2;
wire   [0:0] icmp_ln129_8_fu_869_p2;
wire   [0:0] xor_ln128_8_fu_880_p2;
wire   [0:0] and_ln129_8_fu_886_p2;
wire   [7:0] sub_ln701_8_fu_875_p2;
wire   [7:0] select_ln128_8_fu_892_p3;
wire   [7:0] select_ln129_8_fu_899_p3;
wire   [27:0] shl_ln703_8_fu_907_p3;
wire   [1:0] trunc_ln126_1_fu_919_p4;
wire   [0:0] icmp_ln128_9_fu_929_p2;
wire   [0:0] icmp_ln129_9_fu_935_p2;
wire   [0:0] xor_ln128_9_fu_946_p2;
wire   [0:0] and_ln129_9_fu_952_p2;
wire   [7:0] sub_ln701_9_fu_941_p2;
wire   [7:0] select_ln128_9_fu_958_p3;
wire   [7:0] select_ln129_9_fu_965_p3;
wire   [27:0] shl_ln703_9_fu_973_p3;
wire   [1:0] trunc_ln126_5_fu_985_p4;
wire   [0:0] icmp_ln128_10_fu_995_p2;
wire   [0:0] icmp_ln129_10_fu_1001_p2;
wire   [0:0] xor_ln128_10_fu_1012_p2;
wire   [0:0] and_ln129_10_fu_1018_p2;
wire   [7:0] sub_ln701_10_fu_1007_p2;
wire   [7:0] select_ln128_10_fu_1024_p3;
wire   [7:0] select_ln129_10_fu_1031_p3;
wire   [27:0] shl_ln703_s_fu_1039_p3;
wire   [1:0] trunc_ln128_2_fu_1051_p4;
wire   [0:0] icmp_ln128_11_fu_1061_p2;
wire   [0:0] icmp_ln129_11_fu_1067_p2;
wire   [0:0] xor_ln128_11_fu_1078_p2;
wire   [0:0] and_ln129_11_fu_1084_p2;
wire   [7:0] sub_ln701_11_fu_1073_p2;
wire   [7:0] select_ln128_11_fu_1090_p3;
wire   [7:0] select_ln129_11_fu_1097_p3;
wire   [27:0] shl_ln703_10_fu_1105_p3;
wire   [1:0] trunc_ln126_7_fu_1117_p1;
wire   [0:0] icmp_ln128_12_fu_1121_p2;
wire   [0:0] icmp_ln129_12_fu_1127_p2;
wire   [0:0] xor_ln128_12_fu_1138_p2;
wire   [0:0] and_ln129_12_fu_1144_p2;
wire   [7:0] sub_ln701_12_fu_1133_p2;
wire   [7:0] select_ln128_12_fu_1150_p3;
wire   [7:0] select_ln129_12_fu_1157_p3;
wire   [27:0] shl_ln703_11_fu_1165_p3;
wire   [1:0] trunc_ln126_10_fu_1192_p4;
wire   [0:0] icmp_ln128_14_fu_1202_p2;
wire   [0:0] icmp_ln129_14_fu_1208_p2;
wire   [0:0] xor_ln128_14_fu_1219_p2;
wire   [0:0] and_ln129_14_fu_1225_p2;
wire   [7:0] sub_ln701_14_fu_1214_p2;
wire   [7:0] select_ln128_14_fu_1231_p3;
wire   [7:0] select_ln129_14_fu_1238_p3;
wire   [27:0] shl_ln703_13_fu_1246_p3;
wire   [1:0] trunc_ln128_3_fu_1258_p4;
wire   [0:0] icmp_ln128_15_fu_1268_p2;
wire   [0:0] icmp_ln129_15_fu_1274_p2;
wire   [0:0] xor_ln128_15_fu_1285_p2;
wire   [0:0] and_ln129_15_fu_1291_p2;
wire   [7:0] sub_ln701_15_fu_1280_p2;
wire   [7:0] select_ln128_15_fu_1297_p3;
wire   [7:0] select_ln129_15_fu_1304_p3;
wire   [27:0] shl_ln703_14_fu_1312_p3;
wire  signed [28:0] sext_ln703_1_fu_689_p1;
wire  signed [28:0] sext_ln703_2_fu_755_p1;
wire  signed [28:0] sext_ln703_7_fu_855_p1;
wire  signed [28:0] sext_ln703_8_fu_915_p1;
wire  signed [28:0] sext_ln703_9_fu_981_p1;
wire  signed [28:0] sext_ln703_10_fu_1047_p1;
wire  signed [28:0] sext_ln703_11_fu_1113_p1;
wire  signed [28:0] sext_ln703_12_fu_1173_p1;
wire  signed [28:0] sext_ln703_14_fu_1254_p1;
wire  signed [28:0] sext_ln703_15_fu_1320_p1;
wire   [27:0] shl_ln_fu_1359_p3;
wire   [0:0] icmp_ln128_3_fu_1370_p2;
wire   [0:0] icmp_ln129_3_fu_1375_p2;
wire   [0:0] xor_ln128_3_fu_1385_p2;
wire   [0:0] and_ln129_3_fu_1391_p2;
wire   [7:0] sub_ln701_3_fu_1380_p2;
wire   [7:0] select_ln128_3_fu_1397_p3;
wire   [7:0] select_ln129_3_fu_1404_p3;
wire   [27:0] shl_ln703_3_fu_1412_p3;
wire   [0:0] icmp_ln128_4_fu_1424_p2;
wire   [0:0] icmp_ln129_4_fu_1429_p2;
wire   [0:0] xor_ln128_4_fu_1439_p2;
wire   [0:0] and_ln129_4_fu_1445_p2;
wire   [7:0] sub_ln701_4_fu_1434_p2;
wire   [7:0] select_ln128_4_fu_1451_p3;
wire   [7:0] select_ln129_4_fu_1458_p3;
wire   [27:0] shl_ln703_4_fu_1466_p3;
wire   [0:0] icmp_ln128_5_fu_1478_p2;
wire   [0:0] icmp_ln129_5_fu_1483_p2;
wire   [0:0] xor_ln128_5_fu_1493_p2;
wire   [0:0] and_ln129_5_fu_1499_p2;
wire   [7:0] sub_ln701_5_fu_1488_p2;
wire   [7:0] select_ln128_5_fu_1505_p3;
wire   [7:0] select_ln129_5_fu_1512_p3;
wire   [27:0] shl_ln703_5_fu_1520_p3;
wire   [0:0] icmp_ln128_6_fu_1532_p2;
wire   [0:0] icmp_ln129_6_fu_1537_p2;
wire   [0:0] xor_ln128_6_fu_1547_p2;
wire   [0:0] and_ln129_6_fu_1553_p2;
wire   [7:0] sub_ln701_6_fu_1542_p2;
wire   [7:0] select_ln128_6_fu_1559_p3;
wire   [7:0] select_ln129_6_fu_1566_p3;
wire   [27:0] shl_ln703_6_fu_1574_p3;
wire   [0:0] icmp_ln128_13_fu_1586_p2;
wire   [0:0] icmp_ln129_13_fu_1591_p2;
wire   [0:0] xor_ln128_13_fu_1596_p2;
wire   [0:0] and_ln129_13_fu_1602_p2;
wire   [7:0] select_ln128_13_fu_1608_p3;
wire   [7:0] select_ln129_13_fu_1615_p3;
wire   [27:0] shl_ln703_12_fu_1622_p3;
wire  signed [37:0] sext_ln703_fu_1366_p1;
wire  signed [37:0] sext_ln703_16_fu_1640_p1;
wire   [37:0] add_ln703_fu_1634_p2;
wire  signed [28:0] sext_ln703_3_fu_1420_p1;
wire  signed [28:0] sext_ln703_4_fu_1474_p1;
wire   [28:0] add_ln703_35_fu_1649_p2;
wire  signed [28:0] sext_ln703_5_fu_1528_p1;
wire  signed [28:0] sext_ln703_6_fu_1582_p1;
wire   [28:0] add_ln703_36_fu_1659_p2;
wire  signed [29:0] sext_ln703_18_fu_1665_p1;
wire  signed [29:0] sext_ln703_17_fu_1655_p1;
wire  signed [29:0] sext_ln703_21_fu_1678_p1;
wire  signed [29:0] sext_ln703_20_fu_1675_p1;
wire   [29:0] add_ln703_41_fu_1681_p2;
wire  signed [29:0] sext_ln703_24_fu_1694_p1;
wire  signed [29:0] sext_ln703_13_fu_1630_p1;
wire   [29:0] add_ln703_44_fu_1697_p2;
wire  signed [30:0] sext_ln703_25_fu_1703_p1;
wire  signed [30:0] sext_ln703_23_fu_1691_p1;
wire   [30:0] add_ln703_45_fu_1707_p2;
wire  signed [31:0] sext_ln703_26_fu_1713_p1;
wire  signed [31:0] sext_ln703_22_fu_1687_p1;
wire  signed [37:0] sext_ln703_19_fu_1723_p1;
wire  signed [37:0] sext_ln703_27_fu_1731_p1;
wire   [37:0] add_ln703_38_fu_1726_p2;
wire   [77:0] grp_fu_1753_p0;
wire  signed [62:0] grp_fu_1753_p1;
wire   [37:0] grp_fu_1753_p2;
wire    ap_CS_fsm_state89;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [62:0] mul_ln1118_fu_461_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
end

dut_sdiv_78ns_63seOg #(
    .ID( 1 ),
    .NUM_STAGE( 82 ),
    .din0_WIDTH( 78 ),
    .din1_WIDTH( 63 ),
    .dout_WIDTH( 38 ))
dut_sdiv_78ns_63seOg_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1753_p0),
    .din1(grp_fu_1753_p1),
    .ce(1'b1),
    .dout(grp_fu_1753_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter28 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        indvar_flatten_reg_419 <= add_ln120_1_reg_1772;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_419 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        j_0_0_reg_430 <= select_ln124_1_reg_1874;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_0_reg_430 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        ko_0_0_reg_442 <= add_ln121_reg_2067;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ko_0_0_reg_442 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln120_1_reg_1772 <= add_ln120_1_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_471_p2 == 1'd0))) begin
        add_ln120_reg_1777 <= add_ln120_fu_483_p2;
        icmp_ln121_reg_1782 <= icmp_ln121_fu_489_p2;
        select_ln124_reg_1787 <= select_ln124_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_reg_1768 == 1'd0))) begin
        add_ln121_reg_2067 <= add_ln121_fu_1354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln120_reg_1768 == 1'd0))) begin
        add_ln703_33_reg_2042[28 : 20] <= add_ln703_33_fu_1324_p2[28 : 20];
        add_ln703_39_reg_2047[28 : 20] <= add_ln703_39_fu_1330_p2[28 : 20];
        add_ln703_40_reg_2052[28 : 20] <= add_ln703_40_fu_1336_p2[28 : 20];
        add_ln703_42_reg_2057[28 : 20] <= add_ln703_42_fu_1342_p2[28 : 20];
        add_ln703_43_reg_2062[28 : 20] <= add_ln703_43_fu_1348_p2[28 : 20];
        output_0_V_addr_reg_1996 <= zext_ln124_fu_575_p1;
        select_ln129_reg_2002 <= select_ln129_fu_619_p3;
        sub_ln701_13_reg_2037 <= sub_ln701_13_fu_1187_p2;
        trunc_ln126_2_reg_2013 <= trunc_ln126_2_fu_769_p1;
        trunc_ln126_8_reg_2019 <= {{packed_weights_1_q0[3:2]}};
        trunc_ln126_9_reg_2025 <= {{packed_weights_1_q0[5:4]}};
        trunc_ln126_s_reg_2031 <= {{packed_weights_3_q0[3:2]}};
        trunc_ln_reg_2007 <= {{packed_weights_0_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        add_ln703_34_reg_2073 <= add_ln703_34_fu_1643_p2;
        add_ln703_37_reg_2078[29 : 20] <= add_ln703_37_fu_1669_p2[29 : 20];
        add_ln703_46_reg_2083[31 : 20] <= add_ln703_46_fu_1717_p2[31 : 20];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln120_reg_1768_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln703_47_reg_2088 <= add_ln703_47_fu_1734_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln120_reg_1768 <= icmp_ln120_fu_471_p2;
        icmp_ln120_reg_1768_pp0_iter1_reg <= icmp_ln120_reg_1768;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln120_reg_1768_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln121_1_reg_2093 <= icmp_ln121_1_fu_1741_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln121_1_reg_2093_pp0_iter10_reg <= icmp_ln121_1_reg_2093_pp0_iter9_reg;
        icmp_ln121_1_reg_2093_pp0_iter11_reg <= icmp_ln121_1_reg_2093_pp0_iter10_reg;
        icmp_ln121_1_reg_2093_pp0_iter12_reg <= icmp_ln121_1_reg_2093_pp0_iter11_reg;
        icmp_ln121_1_reg_2093_pp0_iter13_reg <= icmp_ln121_1_reg_2093_pp0_iter12_reg;
        icmp_ln121_1_reg_2093_pp0_iter14_reg <= icmp_ln121_1_reg_2093_pp0_iter13_reg;
        icmp_ln121_1_reg_2093_pp0_iter15_reg <= icmp_ln121_1_reg_2093_pp0_iter14_reg;
        icmp_ln121_1_reg_2093_pp0_iter16_reg <= icmp_ln121_1_reg_2093_pp0_iter15_reg;
        icmp_ln121_1_reg_2093_pp0_iter17_reg <= icmp_ln121_1_reg_2093_pp0_iter16_reg;
        icmp_ln121_1_reg_2093_pp0_iter18_reg <= icmp_ln121_1_reg_2093_pp0_iter17_reg;
        icmp_ln121_1_reg_2093_pp0_iter19_reg <= icmp_ln121_1_reg_2093_pp0_iter18_reg;
        icmp_ln121_1_reg_2093_pp0_iter20_reg <= icmp_ln121_1_reg_2093_pp0_iter19_reg;
        icmp_ln121_1_reg_2093_pp0_iter21_reg <= icmp_ln121_1_reg_2093_pp0_iter20_reg;
        icmp_ln121_1_reg_2093_pp0_iter22_reg <= icmp_ln121_1_reg_2093_pp0_iter21_reg;
        icmp_ln121_1_reg_2093_pp0_iter23_reg <= icmp_ln121_1_reg_2093_pp0_iter22_reg;
        icmp_ln121_1_reg_2093_pp0_iter24_reg <= icmp_ln121_1_reg_2093_pp0_iter23_reg;
        icmp_ln121_1_reg_2093_pp0_iter25_reg <= icmp_ln121_1_reg_2093_pp0_iter24_reg;
        icmp_ln121_1_reg_2093_pp0_iter26_reg <= icmp_ln121_1_reg_2093_pp0_iter25_reg;
        icmp_ln121_1_reg_2093_pp0_iter27_reg <= icmp_ln121_1_reg_2093_pp0_iter26_reg;
        icmp_ln121_1_reg_2093_pp0_iter2_reg <= icmp_ln121_1_reg_2093;
        icmp_ln121_1_reg_2093_pp0_iter3_reg <= icmp_ln121_1_reg_2093_pp0_iter2_reg;
        icmp_ln121_1_reg_2093_pp0_iter4_reg <= icmp_ln121_1_reg_2093_pp0_iter3_reg;
        icmp_ln121_1_reg_2093_pp0_iter5_reg <= icmp_ln121_1_reg_2093_pp0_iter4_reg;
        icmp_ln121_1_reg_2093_pp0_iter6_reg <= icmp_ln121_1_reg_2093_pp0_iter5_reg;
        icmp_ln121_1_reg_2093_pp0_iter7_reg <= icmp_ln121_1_reg_2093_pp0_iter6_reg;
        icmp_ln121_1_reg_2093_pp0_iter8_reg <= icmp_ln121_1_reg_2093_pp0_iter7_reg;
        icmp_ln121_1_reg_2093_pp0_iter9_reg <= icmp_ln121_1_reg_2093_pp0_iter8_reg;
        output_0_V_addr_reg_1996_pp0_iter10_reg <= output_0_V_addr_reg_1996_pp0_iter9_reg;
        output_0_V_addr_reg_1996_pp0_iter11_reg <= output_0_V_addr_reg_1996_pp0_iter10_reg;
        output_0_V_addr_reg_1996_pp0_iter12_reg <= output_0_V_addr_reg_1996_pp0_iter11_reg;
        output_0_V_addr_reg_1996_pp0_iter13_reg <= output_0_V_addr_reg_1996_pp0_iter12_reg;
        output_0_V_addr_reg_1996_pp0_iter14_reg <= output_0_V_addr_reg_1996_pp0_iter13_reg;
        output_0_V_addr_reg_1996_pp0_iter15_reg <= output_0_V_addr_reg_1996_pp0_iter14_reg;
        output_0_V_addr_reg_1996_pp0_iter16_reg <= output_0_V_addr_reg_1996_pp0_iter15_reg;
        output_0_V_addr_reg_1996_pp0_iter17_reg <= output_0_V_addr_reg_1996_pp0_iter16_reg;
        output_0_V_addr_reg_1996_pp0_iter18_reg <= output_0_V_addr_reg_1996_pp0_iter17_reg;
        output_0_V_addr_reg_1996_pp0_iter19_reg <= output_0_V_addr_reg_1996_pp0_iter18_reg;
        output_0_V_addr_reg_1996_pp0_iter1_reg <= output_0_V_addr_reg_1996;
        output_0_V_addr_reg_1996_pp0_iter20_reg <= output_0_V_addr_reg_1996_pp0_iter19_reg;
        output_0_V_addr_reg_1996_pp0_iter21_reg <= output_0_V_addr_reg_1996_pp0_iter20_reg;
        output_0_V_addr_reg_1996_pp0_iter22_reg <= output_0_V_addr_reg_1996_pp0_iter21_reg;
        output_0_V_addr_reg_1996_pp0_iter23_reg <= output_0_V_addr_reg_1996_pp0_iter22_reg;
        output_0_V_addr_reg_1996_pp0_iter24_reg <= output_0_V_addr_reg_1996_pp0_iter23_reg;
        output_0_V_addr_reg_1996_pp0_iter25_reg <= output_0_V_addr_reg_1996_pp0_iter24_reg;
        output_0_V_addr_reg_1996_pp0_iter26_reg <= output_0_V_addr_reg_1996_pp0_iter25_reg;
        output_0_V_addr_reg_1996_pp0_iter27_reg <= output_0_V_addr_reg_1996_pp0_iter26_reg;
        output_0_V_addr_reg_1996_pp0_iter2_reg <= output_0_V_addr_reg_1996_pp0_iter1_reg;
        output_0_V_addr_reg_1996_pp0_iter3_reg <= output_0_V_addr_reg_1996_pp0_iter2_reg;
        output_0_V_addr_reg_1996_pp0_iter4_reg <= output_0_V_addr_reg_1996_pp0_iter3_reg;
        output_0_V_addr_reg_1996_pp0_iter5_reg <= output_0_V_addr_reg_1996_pp0_iter4_reg;
        output_0_V_addr_reg_1996_pp0_iter6_reg <= output_0_V_addr_reg_1996_pp0_iter5_reg;
        output_0_V_addr_reg_1996_pp0_iter7_reg <= output_0_V_addr_reg_1996_pp0_iter6_reg;
        output_0_V_addr_reg_1996_pp0_iter8_reg <= output_0_V_addr_reg_1996_pp0_iter7_reg;
        output_0_V_addr_reg_1996_pp0_iter9_reg <= output_0_V_addr_reg_1996_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_reg_1768 == 1'd0))) begin
        input_0_0_0_V_loa_reg_1900 <= input_0_0_0_V_q0;
        input_0_1_0_V_loa_reg_1906 <= input_0_1_0_V_q0;
        input_0_2_0_V_loa_reg_1912 <= input_0_2_0_V_q0;
        input_0_3_0_V_loa_reg_1918 <= input_0_3_0_V_q0;
        input_1_0_0_V_loa_reg_1924 <= input_1_0_0_V_q0;
        input_1_1_0_V_loa_reg_1930 <= input_1_1_0_V_q0;
        input_1_2_0_V_loa_reg_1936 <= input_1_2_0_V_q0;
        input_1_3_0_V_loa_reg_1942 <= input_1_3_0_V_q0;
        input_2_0_0_V_loa_reg_1948 <= input_2_0_0_V_q0;
        input_2_1_0_V_loa_reg_1954 <= input_2_1_0_V_q0;
        input_2_2_0_V_loa_reg_1960 <= input_2_2_0_V_q0;
        input_2_3_0_V_loa_reg_1966 <= input_2_3_0_V_q0;
        input_3_0_0_V_loa_reg_1972 <= input_3_0_0_V_q0;
        input_3_1_0_V_loa_reg_1978 <= input_3_1_0_V_q0;
        input_3_2_0_V_loa_reg_1984 <= input_3_2_0_V_q0;
        input_3_3_0_V_loa_reg_1990 <= input_3_3_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_reg_1768 == 1'd0))) begin
        select_ln124_1_reg_1874 <= select_ln124_1_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_ln1148_reg_1763 <= sext_ln1148_fu_467_p1;
    end
end

always @ (*) begin
    if ((icmp_ln120_fu_471_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_423_p4 = add_ln120_1_reg_1772;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_423_p4 = indvar_flatten_reg_419;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        ap_phi_mux_j_0_0_phi_fu_434_p4 = select_ln124_1_reg_1874;
    end else begin
        ap_phi_mux_j_0_0_phi_fu_434_p4 = j_0_0_reg_430;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1768 == 1'd0))) begin
        ap_phi_mux_ko_0_0_phi_fu_446_p4 = add_ln121_reg_2067;
    end else begin
        ap_phi_mux_ko_0_0_phi_fu_446_p4 = ko_0_0_reg_442;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_0_0_V_ce0 = 1'b1;
    end else begin
        input_0_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_1_0_V_ce0 = 1'b1;
    end else begin
        input_0_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_2_0_V_ce0 = 1'b1;
    end else begin
        input_0_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_3_0_V_ce0 = 1'b1;
    end else begin
        input_0_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_0_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_2_0_V_ce0 = 1'b1;
    end else begin
        input_1_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_3_0_V_ce0 = 1'b1;
    end else begin
        input_1_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_0_0_V_ce0 = 1'b1;
    end else begin
        input_2_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_1_0_V_ce0 = 1'b1;
    end else begin
        input_2_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_2_0_V_ce0 = 1'b1;
    end else begin
        input_2_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_3_0_V_ce0 = 1'b1;
    end else begin
        input_2_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_0_0_V_ce0 = 1'b1;
    end else begin
        input_3_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_1_0_V_ce0 = 1'b1;
    end else begin
        input_3_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_2_0_V_ce0 = 1'b1;
    end else begin
        input_3_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_3_0_V_ce0 = 1'b1;
    end else begin
        input_3_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_V_address0 = output_0_V_addr_reg_1996;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_0_V_address0 = zext_ln124_fu_575_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter28 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        output_0_V_ce1 = 1'b1;
    end else begin
        output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln120_reg_1768_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_1_reg_2093_pp0_iter27_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter28 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        output_0_V_we1 = 1'b1;
    end else begin
        output_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_0_ce0 = 1'b1;
    end else begin
        packed_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_1_ce0 = 1'b1;
    end else begin
        packed_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_2_ce0 = 1'b1;
    end else begin
        packed_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_3_ce0 = 1'b1;
    end else begin
        packed_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_fu_471_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_fu_471_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter27 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter28 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter27 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter28 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_1_fu_477_p2 = (ap_phi_mux_indvar_flatten_phi_fu_423_p4 + 10'd1);

assign add_ln120_fu_483_p2 = (7'd1 + ap_phi_mux_j_0_0_phi_fu_434_p4);

assign add_ln121_fu_1354_p2 = (3'd1 + select_ln124_reg_1787);

assign add_ln124_fu_561_p2 = (zext_ln121_fu_529_p1 + sub_ln124_fu_555_p2);

assign add_ln703_33_fu_1324_p2 = ($signed(sext_ln703_1_fu_689_p1) + $signed(sext_ln703_2_fu_755_p1));

assign add_ln703_34_fu_1643_p2 = ($signed(sext_ln703_16_fu_1640_p1) + $signed(add_ln703_fu_1634_p2));

assign add_ln703_35_fu_1649_p2 = ($signed(sext_ln703_3_fu_1420_p1) + $signed(sext_ln703_4_fu_1474_p1));

assign add_ln703_36_fu_1659_p2 = ($signed(sext_ln703_5_fu_1528_p1) + $signed(sext_ln703_6_fu_1582_p1));

assign add_ln703_37_fu_1669_p2 = ($signed(sext_ln703_18_fu_1665_p1) + $signed(sext_ln703_17_fu_1655_p1));

assign add_ln703_38_fu_1726_p2 = ($signed(sext_ln703_19_fu_1723_p1) + $signed(add_ln703_34_reg_2073));

assign add_ln703_39_fu_1330_p2 = ($signed(sext_ln703_7_fu_855_p1) + $signed(sext_ln703_8_fu_915_p1));

assign add_ln703_40_fu_1336_p2 = ($signed(sext_ln703_9_fu_981_p1) + $signed(sext_ln703_10_fu_1047_p1));

assign add_ln703_41_fu_1681_p2 = ($signed(sext_ln703_21_fu_1678_p1) + $signed(sext_ln703_20_fu_1675_p1));

assign add_ln703_42_fu_1342_p2 = ($signed(sext_ln703_11_fu_1113_p1) + $signed(sext_ln703_12_fu_1173_p1));

assign add_ln703_43_fu_1348_p2 = ($signed(sext_ln703_14_fu_1254_p1) + $signed(sext_ln703_15_fu_1320_p1));

assign add_ln703_44_fu_1697_p2 = ($signed(sext_ln703_24_fu_1694_p1) + $signed(sext_ln703_13_fu_1630_p1));

assign add_ln703_45_fu_1707_p2 = ($signed(sext_ln703_25_fu_1703_p1) + $signed(sext_ln703_23_fu_1691_p1));

assign add_ln703_46_fu_1717_p2 = ($signed(sext_ln703_26_fu_1713_p1) + $signed(sext_ln703_22_fu_1687_p1));

assign add_ln703_47_fu_1734_p2 = ($signed(sext_ln703_27_fu_1731_p1) + $signed(add_ln703_38_fu_1726_p2));

assign add_ln703_fu_1634_p2 = ($signed(output_0_V_q0) + $signed(sext_ln703_fu_1366_p1));

assign and_ln129_10_fu_1018_p2 = (xor_ln128_10_fu_1012_p2 & icmp_ln129_10_fu_1001_p2);

assign and_ln129_11_fu_1084_p2 = (xor_ln128_11_fu_1078_p2 & icmp_ln129_11_fu_1067_p2);

assign and_ln129_12_fu_1144_p2 = (xor_ln128_12_fu_1138_p2 & icmp_ln129_12_fu_1127_p2);

assign and_ln129_13_fu_1602_p2 = (xor_ln128_13_fu_1596_p2 & icmp_ln129_13_fu_1591_p2);

assign and_ln129_14_fu_1225_p2 = (xor_ln128_14_fu_1219_p2 & icmp_ln129_14_fu_1208_p2);

assign and_ln129_15_fu_1291_p2 = (xor_ln128_15_fu_1285_p2 & icmp_ln129_15_fu_1274_p2);

assign and_ln129_1_fu_660_p2 = (xor_ln128_1_fu_654_p2 & icmp_ln129_1_fu_643_p2);

assign and_ln129_2_fu_726_p2 = (xor_ln128_2_fu_720_p2 & icmp_ln129_2_fu_709_p2);

assign and_ln129_3_fu_1391_p2 = (xor_ln128_3_fu_1385_p2 & icmp_ln129_3_fu_1375_p2);

assign and_ln129_4_fu_1445_p2 = (xor_ln128_4_fu_1439_p2 & icmp_ln129_4_fu_1429_p2);

assign and_ln129_5_fu_1499_p2 = (xor_ln128_5_fu_1493_p2 & icmp_ln129_5_fu_1483_p2);

assign and_ln129_6_fu_1553_p2 = (xor_ln128_6_fu_1547_p2 & icmp_ln129_6_fu_1537_p2);

assign and_ln129_7_fu_826_p2 = (xor_ln128_7_fu_820_p2 & icmp_ln129_7_fu_809_p2);

assign and_ln129_8_fu_886_p2 = (xor_ln128_8_fu_880_p2 & icmp_ln129_8_fu_869_p2);

assign and_ln129_9_fu_952_p2 = (xor_ln128_9_fu_946_p2 & icmp_ln129_9_fu_935_p2);

assign and_ln129_fu_606_p2 = (xor_ln128_fu_600_p2 & icmp_ln129_fu_589_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage2_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage2_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage2_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage2_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage2_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage2_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage2_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage2_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage2_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage2_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage1_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage2_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage2_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage2_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage1_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage2_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage1_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage2_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_1753_p0 = {{add_ln703_47_reg_2088}, {40'd0}};

assign grp_fu_1753_p1 = sext_ln1148_reg_1763;

assign icmp_ln120_fu_471_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_423_p4 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln121_1_fu_1741_p2 = ((add_ln121_reg_2067 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_489_p2 = ((ap_phi_mux_ko_0_0_phi_fu_446_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln128_10_fu_995_p2 = ((trunc_ln126_5_fu_985_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_11_fu_1061_p2 = ((trunc_ln128_2_fu_1051_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_12_fu_1121_p2 = ((trunc_ln126_7_fu_1117_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_13_fu_1586_p2 = ((trunc_ln126_s_reg_2031 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_14_fu_1202_p2 = ((trunc_ln126_10_fu_1192_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_15_fu_1268_p2 = ((trunc_ln128_3_fu_1258_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_1_fu_637_p2 = ((trunc_ln126_3_fu_627_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_2_fu_703_p2 = ((trunc_ln126_4_fu_693_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_3_fu_1370_p2 = ((trunc_ln_reg_2007 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_4_fu_1424_p2 = ((trunc_ln126_2_reg_2013 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_5_fu_1478_p2 = ((trunc_ln126_8_reg_2019 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_6_fu_1532_p2 = ((trunc_ln126_9_reg_2025 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_7_fu_803_p2 = ((trunc_ln128_1_fu_793_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_8_fu_863_p2 = ((trunc_ln126_6_fu_859_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_9_fu_929_p2 = ((trunc_ln126_1_fu_919_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_583_p2 = ((trunc_ln126_fu_579_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln129_10_fu_1001_p2 = ((trunc_ln126_5_fu_985_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_11_fu_1067_p2 = ((trunc_ln128_2_fu_1051_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_12_fu_1127_p2 = ((trunc_ln126_7_fu_1117_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_13_fu_1591_p2 = ((trunc_ln126_s_reg_2031 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_14_fu_1208_p2 = ((trunc_ln126_10_fu_1192_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_15_fu_1274_p2 = ((trunc_ln128_3_fu_1258_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_1_fu_643_p2 = ((trunc_ln126_3_fu_627_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_2_fu_709_p2 = ((trunc_ln126_4_fu_693_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_3_fu_1375_p2 = ((trunc_ln_reg_2007 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_4_fu_1429_p2 = ((trunc_ln126_2_reg_2013 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_5_fu_1483_p2 = ((trunc_ln126_8_reg_2019 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_6_fu_1537_p2 = ((trunc_ln126_9_reg_2025 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_7_fu_809_p2 = ((trunc_ln128_1_fu_793_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_8_fu_869_p2 = ((trunc_ln126_6_fu_859_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_9_fu_935_p2 = ((trunc_ln126_1_fu_919_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_589_p2 = ((trunc_ln126_fu_579_p1 == 2'd2) ? 1'b1 : 1'b0);

assign input_0_0_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_0_1_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_0_2_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_0_3_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_1_0_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_1_1_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_1_2_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_1_3_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_2_0_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_2_1_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_2_2_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_2_3_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_3_0_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_3_1_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_3_2_0_V_address0 = zext_ln124_1_fu_503_p1;

assign input_3_3_0_V_address0 = zext_ln124_1_fu_503_p1;

assign mul_ln1118_fu_461_p0 = mul_ln1118_fu_461_p00;

assign mul_ln1118_fu_461_p00 = w_scale_V;

assign mul_ln1118_fu_461_p1 = scales_0_V_read;

assign mul_ln1118_fu_461_p2 = ($signed({{1'b0}, {mul_ln1118_fu_461_p0}}) * $signed(mul_ln1118_fu_461_p1));

assign output_0_V_address1 = output_0_V_addr_reg_1996_pp0_iter27_reg;

assign output_0_V_d0 = ($signed(sext_ln703_27_fu_1731_p1) + $signed(add_ln703_38_fu_1726_p2));

assign output_0_V_d1 = grp_fu_1753_p2[37:0];

assign packed_weights_0_address0 = sext_ln124_fu_567_p1;

assign packed_weights_1_address0 = sext_ln124_fu_567_p1;

assign packed_weights_2_address0 = sext_ln124_fu_567_p1;

assign packed_weights_3_address0 = sext_ln124_fu_567_p1;

assign select_ln124_1_fu_523_p3 = ((icmp_ln121_reg_1782[0:0] === 1'b1) ? add_ln120_reg_1777 : j_0_0_reg_430);

assign select_ln124_fu_495_p3 = ((icmp_ln121_fu_489_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_ko_0_0_phi_fu_446_p4);

assign select_ln128_10_fu_1024_p3 = ((icmp_ln128_10_fu_995_p2[0:0] === 1'b1) ? input_2_2_0_V_loa_reg_1960 : 8'd0);

assign select_ln128_11_fu_1090_p3 = ((icmp_ln128_11_fu_1061_p2[0:0] === 1'b1) ? input_2_3_0_V_loa_reg_1966 : 8'd0);

assign select_ln128_12_fu_1150_p3 = ((icmp_ln128_12_fu_1121_p2[0:0] === 1'b1) ? input_3_0_0_V_loa_reg_1972 : 8'd0);

assign select_ln128_13_fu_1608_p3 = ((icmp_ln128_13_fu_1586_p2[0:0] === 1'b1) ? input_3_1_0_V_loa_reg_1978 : 8'd0);

assign select_ln128_14_fu_1231_p3 = ((icmp_ln128_14_fu_1202_p2[0:0] === 1'b1) ? input_3_2_0_V_loa_reg_1984 : 8'd0);

assign select_ln128_15_fu_1297_p3 = ((icmp_ln128_15_fu_1268_p2[0:0] === 1'b1) ? input_3_3_0_V_loa_reg_1990 : 8'd0);

assign select_ln128_1_fu_666_p3 = ((icmp_ln128_1_fu_637_p2[0:0] === 1'b1) ? input_0_1_0_V_loa_reg_1906 : 8'd0);

assign select_ln128_2_fu_732_p3 = ((icmp_ln128_2_fu_703_p2[0:0] === 1'b1) ? input_0_2_0_V_loa_reg_1912 : 8'd0);

assign select_ln128_3_fu_1397_p3 = ((icmp_ln128_3_fu_1370_p2[0:0] === 1'b1) ? input_0_3_0_V_loa_reg_1918 : 8'd0);

assign select_ln128_4_fu_1451_p3 = ((icmp_ln128_4_fu_1424_p2[0:0] === 1'b1) ? input_1_0_0_V_loa_reg_1924 : 8'd0);

assign select_ln128_5_fu_1505_p3 = ((icmp_ln128_5_fu_1478_p2[0:0] === 1'b1) ? input_1_1_0_V_loa_reg_1930 : 8'd0);

assign select_ln128_6_fu_1559_p3 = ((icmp_ln128_6_fu_1532_p2[0:0] === 1'b1) ? input_1_2_0_V_loa_reg_1936 : 8'd0);

assign select_ln128_7_fu_832_p3 = ((icmp_ln128_7_fu_803_p2[0:0] === 1'b1) ? input_1_3_0_V_loa_reg_1942 : 8'd0);

assign select_ln128_8_fu_892_p3 = ((icmp_ln128_8_fu_863_p2[0:0] === 1'b1) ? input_2_0_0_V_loa_reg_1948 : 8'd0);

assign select_ln128_9_fu_958_p3 = ((icmp_ln128_9_fu_929_p2[0:0] === 1'b1) ? input_2_1_0_V_loa_reg_1954 : 8'd0);

assign select_ln128_fu_612_p3 = ((icmp_ln128_fu_583_p2[0:0] === 1'b1) ? input_0_0_0_V_loa_reg_1900 : 8'd0);

assign select_ln129_10_fu_1031_p3 = ((and_ln129_10_fu_1018_p2[0:0] === 1'b1) ? sub_ln701_10_fu_1007_p2 : select_ln128_10_fu_1024_p3);

assign select_ln129_11_fu_1097_p3 = ((and_ln129_11_fu_1084_p2[0:0] === 1'b1) ? sub_ln701_11_fu_1073_p2 : select_ln128_11_fu_1090_p3);

assign select_ln129_12_fu_1157_p3 = ((and_ln129_12_fu_1144_p2[0:0] === 1'b1) ? sub_ln701_12_fu_1133_p2 : select_ln128_12_fu_1150_p3);

assign select_ln129_13_fu_1615_p3 = ((and_ln129_13_fu_1602_p2[0:0] === 1'b1) ? sub_ln701_13_reg_2037 : select_ln128_13_fu_1608_p3);

assign select_ln129_14_fu_1238_p3 = ((and_ln129_14_fu_1225_p2[0:0] === 1'b1) ? sub_ln701_14_fu_1214_p2 : select_ln128_14_fu_1231_p3);

assign select_ln129_15_fu_1304_p3 = ((and_ln129_15_fu_1291_p2[0:0] === 1'b1) ? sub_ln701_15_fu_1280_p2 : select_ln128_15_fu_1297_p3);

assign select_ln129_1_fu_673_p3 = ((and_ln129_1_fu_660_p2[0:0] === 1'b1) ? sub_ln701_1_fu_649_p2 : select_ln128_1_fu_666_p3);

assign select_ln129_2_fu_739_p3 = ((and_ln129_2_fu_726_p2[0:0] === 1'b1) ? sub_ln701_2_fu_715_p2 : select_ln128_2_fu_732_p3);

assign select_ln129_3_fu_1404_p3 = ((and_ln129_3_fu_1391_p2[0:0] === 1'b1) ? sub_ln701_3_fu_1380_p2 : select_ln128_3_fu_1397_p3);

assign select_ln129_4_fu_1458_p3 = ((and_ln129_4_fu_1445_p2[0:0] === 1'b1) ? sub_ln701_4_fu_1434_p2 : select_ln128_4_fu_1451_p3);

assign select_ln129_5_fu_1512_p3 = ((and_ln129_5_fu_1499_p2[0:0] === 1'b1) ? sub_ln701_5_fu_1488_p2 : select_ln128_5_fu_1505_p3);

assign select_ln129_6_fu_1566_p3 = ((and_ln129_6_fu_1553_p2[0:0] === 1'b1) ? sub_ln701_6_fu_1542_p2 : select_ln128_6_fu_1559_p3);

assign select_ln129_7_fu_839_p3 = ((and_ln129_7_fu_826_p2[0:0] === 1'b1) ? sub_ln701_7_fu_815_p2 : select_ln128_7_fu_832_p3);

assign select_ln129_8_fu_899_p3 = ((and_ln129_8_fu_886_p2[0:0] === 1'b1) ? sub_ln701_8_fu_875_p2 : select_ln128_8_fu_892_p3);

assign select_ln129_9_fu_965_p3 = ((and_ln129_9_fu_952_p2[0:0] === 1'b1) ? sub_ln701_9_fu_941_p2 : select_ln128_9_fu_958_p3);

assign select_ln129_fu_619_p3 = ((and_ln129_fu_606_p2[0:0] === 1'b1) ? sub_ln701_fu_595_p2 : select_ln128_fu_612_p3);

assign sext_ln1148_fu_467_p1 = $signed(mul_ln1118_fu_461_p2);

assign sext_ln124_fu_567_p1 = $signed(add_ln124_fu_561_p2);

assign sext_ln703_10_fu_1047_p1 = $signed(shl_ln703_s_fu_1039_p3);

assign sext_ln703_11_fu_1113_p1 = $signed(shl_ln703_10_fu_1105_p3);

assign sext_ln703_12_fu_1173_p1 = $signed(shl_ln703_11_fu_1165_p3);

assign sext_ln703_13_fu_1630_p1 = $signed(shl_ln703_12_fu_1622_p3);

assign sext_ln703_14_fu_1254_p1 = $signed(shl_ln703_13_fu_1246_p3);

assign sext_ln703_15_fu_1320_p1 = $signed(shl_ln703_14_fu_1312_p3);

assign sext_ln703_16_fu_1640_p1 = $signed(add_ln703_33_reg_2042);

assign sext_ln703_17_fu_1655_p1 = $signed(add_ln703_35_fu_1649_p2);

assign sext_ln703_18_fu_1665_p1 = $signed(add_ln703_36_fu_1659_p2);

assign sext_ln703_19_fu_1723_p1 = $signed(add_ln703_37_reg_2078);

assign sext_ln703_1_fu_689_p1 = $signed(shl_ln703_1_fu_681_p3);

assign sext_ln703_20_fu_1675_p1 = $signed(add_ln703_39_reg_2047);

assign sext_ln703_21_fu_1678_p1 = $signed(add_ln703_40_reg_2052);

assign sext_ln703_22_fu_1687_p1 = $signed(add_ln703_41_fu_1681_p2);

assign sext_ln703_23_fu_1691_p1 = $signed(add_ln703_42_reg_2057);

assign sext_ln703_24_fu_1694_p1 = $signed(add_ln703_43_reg_2062);

assign sext_ln703_25_fu_1703_p1 = $signed(add_ln703_44_fu_1697_p2);

assign sext_ln703_26_fu_1713_p1 = $signed(add_ln703_45_fu_1707_p2);

assign sext_ln703_27_fu_1731_p1 = $signed(add_ln703_46_reg_2083);

assign sext_ln703_2_fu_755_p1 = $signed(shl_ln703_2_fu_747_p3);

assign sext_ln703_3_fu_1420_p1 = $signed(shl_ln703_3_fu_1412_p3);

assign sext_ln703_4_fu_1474_p1 = $signed(shl_ln703_4_fu_1466_p3);

assign sext_ln703_5_fu_1528_p1 = $signed(shl_ln703_5_fu_1520_p3);

assign sext_ln703_6_fu_1582_p1 = $signed(shl_ln703_6_fu_1574_p3);

assign sext_ln703_7_fu_855_p1 = $signed(shl_ln703_7_fu_847_p3);

assign sext_ln703_8_fu_915_p1 = $signed(shl_ln703_8_fu_907_p3);

assign sext_ln703_9_fu_981_p1 = $signed(shl_ln703_9_fu_973_p3);

assign sext_ln703_fu_1366_p1 = $signed(shl_ln_fu_1359_p3);

assign shl_ln703_10_fu_1105_p3 = {{select_ln129_11_fu_1097_p3}, {20'd0}};

assign shl_ln703_11_fu_1165_p3 = {{select_ln129_12_fu_1157_p3}, {20'd0}};

assign shl_ln703_12_fu_1622_p3 = {{select_ln129_13_fu_1615_p3}, {20'd0}};

assign shl_ln703_13_fu_1246_p3 = {{select_ln129_14_fu_1238_p3}, {20'd0}};

assign shl_ln703_14_fu_1312_p3 = {{select_ln129_15_fu_1304_p3}, {20'd0}};

assign shl_ln703_1_fu_681_p3 = {{select_ln129_1_fu_673_p3}, {20'd0}};

assign shl_ln703_2_fu_747_p3 = {{select_ln129_2_fu_739_p3}, {20'd0}};

assign shl_ln703_3_fu_1412_p3 = {{select_ln129_3_fu_1404_p3}, {20'd0}};

assign shl_ln703_4_fu_1466_p3 = {{select_ln129_4_fu_1458_p3}, {20'd0}};

assign shl_ln703_5_fu_1520_p3 = {{select_ln129_5_fu_1512_p3}, {20'd0}};

assign shl_ln703_6_fu_1574_p3 = {{select_ln129_6_fu_1566_p3}, {20'd0}};

assign shl_ln703_7_fu_847_p3 = {{select_ln129_7_fu_839_p3}, {20'd0}};

assign shl_ln703_8_fu_907_p3 = {{select_ln129_8_fu_899_p3}, {20'd0}};

assign shl_ln703_9_fu_973_p3 = {{select_ln129_9_fu_965_p3}, {20'd0}};

assign shl_ln703_s_fu_1039_p3 = {{select_ln129_10_fu_1031_p3}, {20'd0}};

assign shl_ln_fu_1359_p3 = {{select_ln129_reg_2002}, {20'd0}};

assign sub_ln124_fu_555_p2 = (zext_ln124_2_fu_540_p1 - zext_ln124_3_fu_551_p1);

assign sub_ln701_10_fu_1007_p2 = (8'd0 - input_2_2_0_V_loa_reg_1960);

assign sub_ln701_11_fu_1073_p2 = (8'd0 - input_2_3_0_V_loa_reg_1966);

assign sub_ln701_12_fu_1133_p2 = (8'd0 - input_3_0_0_V_loa_reg_1972);

assign sub_ln701_13_fu_1187_p2 = (8'd0 - input_3_1_0_V_loa_reg_1978);

assign sub_ln701_14_fu_1214_p2 = (8'd0 - input_3_2_0_V_loa_reg_1984);

assign sub_ln701_15_fu_1280_p2 = (8'd0 - input_3_3_0_V_loa_reg_1990);

assign sub_ln701_1_fu_649_p2 = (8'd0 - input_0_1_0_V_loa_reg_1906);

assign sub_ln701_2_fu_715_p2 = (8'd0 - input_0_2_0_V_loa_reg_1912);

assign sub_ln701_3_fu_1380_p2 = (8'd0 - input_0_3_0_V_loa_reg_1918);

assign sub_ln701_4_fu_1434_p2 = (8'd0 - input_1_0_0_V_loa_reg_1924);

assign sub_ln701_5_fu_1488_p2 = (8'd0 - input_1_1_0_V_loa_reg_1930);

assign sub_ln701_6_fu_1542_p2 = (8'd0 - input_1_2_0_V_loa_reg_1936);

assign sub_ln701_7_fu_815_p2 = (8'd0 - input_1_3_0_V_loa_reg_1942);

assign sub_ln701_8_fu_875_p2 = (8'd0 - input_2_0_0_V_loa_reg_1948);

assign sub_ln701_9_fu_941_p2 = (8'd0 - input_2_1_0_V_loa_reg_1954);

assign sub_ln701_fu_595_p2 = (8'd0 - input_0_0_0_V_loa_reg_1900);

assign tmp_51_fu_533_p3 = {{select_ln124_reg_1787}, {7'd0}};

assign tmp_52_fu_544_p3 = {{select_ln124_reg_1787}, {5'd0}};

assign trunc_ln126_10_fu_1192_p4 = {{packed_weights_3_q0[5:4]}};

assign trunc_ln126_1_fu_919_p4 = {{packed_weights_2_q0[3:2]}};

assign trunc_ln126_2_fu_769_p1 = packed_weights_1_q0[1:0];

assign trunc_ln126_3_fu_627_p4 = {{packed_weights_0_q0[3:2]}};

assign trunc_ln126_4_fu_693_p4 = {{packed_weights_0_q0[5:4]}};

assign trunc_ln126_5_fu_985_p4 = {{packed_weights_2_q0[5:4]}};

assign trunc_ln126_6_fu_859_p1 = packed_weights_2_q0[1:0];

assign trunc_ln126_7_fu_1117_p1 = packed_weights_3_q0[1:0];

assign trunc_ln126_fu_579_p1 = packed_weights_0_q0[1:0];

assign trunc_ln128_1_fu_793_p4 = {{packed_weights_1_q0[7:6]}};

assign trunc_ln128_2_fu_1051_p4 = {{packed_weights_2_q0[7:6]}};

assign trunc_ln128_3_fu_1258_p4 = {{packed_weights_3_q0[7:6]}};

assign xor_ln128_10_fu_1012_p2 = (icmp_ln128_10_fu_995_p2 ^ 1'd1);

assign xor_ln128_11_fu_1078_p2 = (icmp_ln128_11_fu_1061_p2 ^ 1'd1);

assign xor_ln128_12_fu_1138_p2 = (icmp_ln128_12_fu_1121_p2 ^ 1'd1);

assign xor_ln128_13_fu_1596_p2 = (icmp_ln128_13_fu_1586_p2 ^ 1'd1);

assign xor_ln128_14_fu_1219_p2 = (icmp_ln128_14_fu_1202_p2 ^ 1'd1);

assign xor_ln128_15_fu_1285_p2 = (icmp_ln128_15_fu_1268_p2 ^ 1'd1);

assign xor_ln128_1_fu_654_p2 = (icmp_ln128_1_fu_637_p2 ^ 1'd1);

assign xor_ln128_2_fu_720_p2 = (icmp_ln128_2_fu_703_p2 ^ 1'd1);

assign xor_ln128_3_fu_1385_p2 = (icmp_ln128_3_fu_1370_p2 ^ 1'd1);

assign xor_ln128_4_fu_1439_p2 = (icmp_ln128_4_fu_1424_p2 ^ 1'd1);

assign xor_ln128_5_fu_1493_p2 = (icmp_ln128_5_fu_1478_p2 ^ 1'd1);

assign xor_ln128_6_fu_1547_p2 = (icmp_ln128_6_fu_1532_p2 ^ 1'd1);

assign xor_ln128_7_fu_820_p2 = (icmp_ln128_7_fu_803_p2 ^ 1'd1);

assign xor_ln128_8_fu_880_p2 = (icmp_ln128_8_fu_863_p2 ^ 1'd1);

assign xor_ln128_9_fu_946_p2 = (icmp_ln128_9_fu_929_p2 ^ 1'd1);

assign xor_ln128_fu_600_p2 = (icmp_ln128_fu_583_p2 ^ 1'd1);

assign zext_ln121_fu_529_p1 = select_ln124_1_fu_523_p3;

assign zext_ln124_1_fu_503_p1 = select_ln124_fu_495_p3;

assign zext_ln124_2_fu_540_p1 = tmp_51_fu_533_p3;

assign zext_ln124_3_fu_551_p1 = tmp_52_fu_544_p3;

assign zext_ln124_fu_575_p1 = select_ln124_1_reg_1874;

always @ (posedge ap_clk) begin
    add_ln703_33_reg_2042[19:0] <= 20'b00000000000000000000;
    add_ln703_39_reg_2047[19:0] <= 20'b00000000000000000000;
    add_ln703_40_reg_2052[19:0] <= 20'b00000000000000000000;
    add_ln703_42_reg_2057[19:0] <= 20'b00000000000000000000;
    add_ln703_43_reg_2062[19:0] <= 20'b00000000000000000000;
    add_ln703_37_reg_2078[19:0] <= 20'b00000000000000000000;
    add_ln703_46_reg_2083[19:0] <= 20'b00000000000000000000;
end

endmodule //linear_forward_no_mu
