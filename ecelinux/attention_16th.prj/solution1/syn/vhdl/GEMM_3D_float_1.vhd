-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GEMM_3D_float_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_1_0_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_1_0_0_V_ce0 : OUT STD_LOGIC;
    input_1_0_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_1_1_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_1_1_0_V_ce0 : OUT STD_LOGIC;
    input_1_1_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_1_2_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_1_2_0_V_ce0 : OUT STD_LOGIC;
    input_1_2_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_1_3_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_1_3_0_V_ce0 : OUT STD_LOGIC;
    input_1_3_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_2_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_0_V_ce0 : OUT STD_LOGIC;
    input_2_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_2_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_1_V_ce0 : OUT STD_LOGIC;
    input_2_1_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_2_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_2_V_ce0 : OUT STD_LOGIC;
    input_2_2_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_2_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_3_V_ce0 : OUT STD_LOGIC;
    input_2_3_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of GEMM_3D_float_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_239_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_530 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln1116_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1116_reg_535 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln236_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1116_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_reg_540 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln238_fu_289_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln238_reg_548 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln203_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_reg_553 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln238_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_V_addr_reg_558 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1116_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1116_reg_566 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln240_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1117_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_reg_571 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln240_fu_369_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln240_reg_576 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_1_0_0_V_load_reg_621 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_2_0_V_load_reg_626 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_1_1_0_V_load_reg_631 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_2_1_V_load_reg_636 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_1_2_0_V_load_reg_641 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_2_2_V_load_reg_646 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_1_3_0_V_load_reg_651 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_2_3_V_load_reg_656 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_395_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_reg_661 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_0_V_load_reg_666 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_1_fu_407_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_1_reg_671 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_2_fu_419_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_2_reg_676 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_3_fu_431_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_3_reg_681 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_79_reg_686 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln708_s_reg_691 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_200 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_0_reg_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_0_0_0_reg_222 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln203_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_1_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_245_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_fu_257_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_fu_253_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_3_fu_265_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1116_fu_269_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_16_fu_299_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_90_fu_319_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1116_4_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1117_fu_338_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_342_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_350_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1117_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1192_fu_395_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_395_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_1_fu_407_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_1_fu_407_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_2_fu_419_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_2_fu_419_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_3_fu_431_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_3_fu_431_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln_fu_437_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_fu_444_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_78_fu_449_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln728_4_fu_459_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_2_fu_467_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln728_5_fu_482_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_3_fu_489_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_80_fu_494_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln728_6_fu_504_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_4_fu_512_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln238_fu_283_p2 = ap_const_lv1_1))) then 
                i_0_reg_200 <= i_reg_530;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_200 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln240_fu_313_p2 = ap_const_lv1_1))) then 
                k_0_0_reg_211 <= add_ln238_reg_548;
            elsif (((icmp_ln236_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_211 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l_0_0_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                l_0_0_0_reg_222 <= add_ln240_reg_576;
            elsif (((icmp_ln238_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                l_0_0_0_reg_222 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln1116_reg_566 <= add_ln1116_fu_333_p2;
                add_ln1117_reg_571 <= add_ln1117_fu_364_p2;
                add_ln240_reg_576 <= add_ln240_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln238_reg_548 <= add_ln238_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_530 <= i_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_1_0_0_V_load_reg_621 <= input_1_0_0_V_q0;
                input_1_1_0_V_load_reg_631 <= input_1_1_0_V_q0;
                input_1_2_0_V_load_reg_641 <= input_1_2_0_V_q0;
                input_1_3_0_V_load_reg_651 <= input_1_3_0_V_q0;
                input_2_0_V_load_reg_626 <= input_2_0_V_q0;
                input_2_1_V_load_reg_636 <= input_2_1_V_q0;
                input_2_2_V_load_reg_646 <= input_2_2_V_q0;
                input_2_3_V_load_reg_656 <= input_2_3_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln1192_1_reg_671 <= mul_ln1192_1_fu_407_p2;
                mul_ln1192_2_reg_676 <= mul_ln1192_2_fu_419_p2;
                mul_ln1192_3_reg_681 <= mul_ln1192_3_fu_431_p2;
                mul_ln1192_reg_661 <= mul_ln1192_fu_395_p2;
                output_0_V_load_reg_666 <= output_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln238_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_0_V_addr_reg_558 <= sext_ln203_fu_308_p1(5 - 1 downto 0);
                    zext_ln203_reg_553(2 downto 0) <= zext_ln203_fu_295_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln1116_reg_535(7 downto 1) <= sext_ln1116_fu_275_p1(7 downto 1);
                    trunc_ln1116_reg_540(5 downto 1) <= trunc_ln1116_fu_279_p1(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_79_reg_686 <= add_ln1192_2_fu_467_p2(55 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln708_s_reg_691 <= add_ln1192_4_fu_512_p2(55 downto 16);
            end if;
        end if;
    end process;
    sext_ln1116_reg_535(0) <= '0';
    trunc_ln1116_reg_540(0) <= '0';
    zext_ln203_reg_553(8 downto 3) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln236_fu_233_p2, ap_CS_fsm_state3, icmp_ln238_fu_283_p2, ap_CS_fsm_state4, icmp_ln240_fu_313_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln236_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln238_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln240_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1116_fu_333_p2 <= std_logic_vector(unsigned(zext_ln1116_4_fu_329_p1) + unsigned(sext_ln1116_reg_535));
    add_ln1117_fu_364_p2 <= std_logic_vector(unsigned(zext_ln203_reg_553) + unsigned(sub_ln1117_fu_358_p2));
    add_ln1192_2_fu_467_p2 <= std_logic_vector(unsigned(shl_ln728_4_fu_459_p3) + unsigned(mul_ln1192_1_reg_671));
    add_ln1192_3_fu_489_p2 <= std_logic_vector(unsigned(shl_ln728_5_fu_482_p3) + unsigned(mul_ln1192_2_reg_676));
    add_ln1192_4_fu_512_p2 <= std_logic_vector(unsigned(shl_ln728_6_fu_504_p3) + unsigned(mul_ln1192_3_reg_681));
    add_ln1192_fu_444_p2 <= std_logic_vector(unsigned(shl_ln_fu_437_p3) + unsigned(mul_ln1192_reg_661));
    add_ln203_fu_303_p2 <= std_logic_vector(unsigned(trunc_ln1116_reg_540) + unsigned(zext_ln203_16_fu_299_p1));
    add_ln238_fu_289_p2 <= std_logic_vector(unsigned(k_0_0_reg_211) + unsigned(ap_const_lv3_1));
    add_ln240_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(l_0_0_0_reg_222));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln236_fu_233_p2)
    begin
        if ((((icmp_ln236_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln236_fu_233_p2)
    begin
        if (((icmp_ln236_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_239_p2 <= std_logic_vector(unsigned(i_0_reg_200) + unsigned(ap_const_lv3_1));
    icmp_ln236_fu_233_p2 <= "1" when (i_0_reg_200 = ap_const_lv3_4) else "0";
    icmp_ln238_fu_283_p2 <= "1" when (k_0_0_reg_211 = ap_const_lv3_6) else "0";
    icmp_ln240_fu_313_p2 <= "1" when (l_0_0_0_reg_222 = ap_const_lv5_18) else "0";
    input_1_0_0_V_address0 <= sext_ln1116_1_fu_375_p1(5 - 1 downto 0);

    input_1_0_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_0_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_1_0_V_address0 <= sext_ln1116_1_fu_375_p1(5 - 1 downto 0);

    input_1_1_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_1_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_2_0_V_address0 <= sext_ln1116_1_fu_375_p1(5 - 1 downto 0);

    input_1_2_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_2_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_3_0_V_address0 <= sext_ln1116_1_fu_375_p1(5 - 1 downto 0);

    input_1_3_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_3_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_0_V_address0 <= zext_ln1117_fu_382_p1(8 - 1 downto 0);

    input_2_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_2_0_V_ce0 <= ap_const_logic_1;
        else 
            input_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_1_V_address0 <= zext_ln1117_fu_382_p1(8 - 1 downto 0);

    input_2_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_2_1_V_ce0 <= ap_const_logic_1;
        else 
            input_2_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_2_V_address0 <= zext_ln1117_fu_382_p1(8 - 1 downto 0);

    input_2_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_2_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_3_V_address0 <= zext_ln1117_fu_382_p1(8 - 1 downto 0);

    input_2_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_2_3_V_ce0 <= ap_const_logic_1;
        else 
            input_2_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1192_1_fu_407_p0 <= input_1_1_0_V_load_reg_631;
    mul_ln1192_1_fu_407_p1 <= input_2_1_V_load_reg_636;
    mul_ln1192_1_fu_407_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_1_fu_407_p0) * signed(mul_ln1192_1_fu_407_p1))), 56));
    mul_ln1192_2_fu_419_p0 <= input_1_2_0_V_load_reg_641;
    mul_ln1192_2_fu_419_p1 <= input_2_2_V_load_reg_646;
    mul_ln1192_2_fu_419_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_2_fu_419_p0) * signed(mul_ln1192_2_fu_419_p1))), 56));
    mul_ln1192_3_fu_431_p0 <= input_1_3_0_V_load_reg_651;
    mul_ln1192_3_fu_431_p1 <= input_2_3_V_load_reg_656;
    mul_ln1192_3_fu_431_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_3_fu_431_p0) * signed(mul_ln1192_3_fu_431_p1))), 56));
    mul_ln1192_fu_395_p0 <= input_1_0_0_V_load_reg_621;
    mul_ln1192_fu_395_p1 <= input_2_0_V_load_reg_626;
    mul_ln1192_fu_395_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_395_p0) * signed(mul_ln1192_fu_395_p1))), 56));

    output_0_V_address0_assign_proc : process(ap_CS_fsm_state3, output_0_V_addr_reg_558, ap_CS_fsm_state6, ap_CS_fsm_state10, sext_ln203_fu_308_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_V_address0 <= output_0_V_addr_reg_558;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_V_address0 <= sext_ln203_fu_308_p1(5 - 1 downto 0);
        else 
            output_0_V_address0 <= "XXXXX";
        end if; 
    end process;


    output_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_d0_assign_proc : process(ap_CS_fsm_state3, trunc_ln708_s_reg_691, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_V_d0 <= trunc_ln708_s_reg_691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_V_d0 <= ap_const_lv40_0;
        else 
            output_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln238_fu_283_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln238_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_342_p3 <= (trunc_ln1117_fu_338_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_350_p3 <= (add_ln1116_fu_333_p2 & ap_const_lv1_0);
        sext_ln1116_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_reg_566),64));

        sext_ln1116_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_269_p2),8));

        sext_ln203_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_303_p2),64));

    shl_ln728_4_fu_459_p3 <= (tmp_78_fu_449_p4 & ap_const_lv16_0);
    shl_ln728_5_fu_482_p3 <= (tmp_79_reg_686 & ap_const_lv16_0);
    shl_ln728_6_fu_504_p3 <= (tmp_80_fu_494_p4 & ap_const_lv16_0);
    shl_ln_fu_437_p3 <= (output_0_V_load_reg_666 & ap_const_lv16_0);
    sub_ln1116_fu_269_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_253_p1) - unsigned(zext_ln1116_3_fu_265_p1));
    sub_ln1117_fu_358_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_342_p3) - unsigned(p_shl3_cast_fu_350_p3));
    tmp_76_fu_245_p3 <= (i_0_reg_200 & ap_const_lv3_0);
    tmp_77_fu_257_p3 <= (i_0_reg_200 & ap_const_lv1_0);
    tmp_78_fu_449_p4 <= add_ln1192_fu_444_p2(55 downto 16);
    tmp_80_fu_494_p4 <= add_ln1192_3_fu_489_p2(55 downto 16);
    tmp_90_fu_319_p4 <= l_0_0_0_reg_222(4 downto 2);
    trunc_ln1116_fu_279_p1 <= sub_ln1116_fu_269_p2(6 - 1 downto 0);
    trunc_ln1117_fu_338_p1 <= add_ln1116_fu_333_p2(6 - 1 downto 0);
    zext_ln1116_3_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_257_p3),7));
    zext_ln1116_4_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_319_p4),8));
    zext_ln1116_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_245_p3),7));
    zext_ln1117_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_reg_571),64));
    zext_ln203_16_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_211),6));
    zext_ln203_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_211),9));
end behav;
