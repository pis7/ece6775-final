-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_38_18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (37 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (37 downto 0) );
end;


architecture behav of exp_38_18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv23_78A013 : STD_LOGIC_VECTOR (22 downto 0) := "11110001010000000010011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv38_1FFFFFFFFF : STD_LOGIC_VECTOR (37 downto 0) := "01111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_4_h_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_h_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_h_table_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_x_msb_4_l_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_l_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_l_table_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_x_lsb_table_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_x_lsb_table_V_ce0 : STD_LOGIC;
    signal f_x_lsb_table_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_V_3_fu_276_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_3_reg_1130 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_306_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_1141 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1141_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1141_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1141_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1141_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1141_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1141_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_reg_1146 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1146_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1146_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1146_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1146_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_600_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1152 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1152_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1152_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1152_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1152_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_2_fu_610_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_V_2_reg_1158 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln612_1_fu_631_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln612_1_reg_1178 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln612_1_reg_1178_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln281_8_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_1188_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_1193_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_4_l_V_reg_1198 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1122_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_x_msb_4_lsb_m_1_s_reg_1203 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln612_2_fu_792_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln612_2_reg_1208 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_V_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1213_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1213_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1213_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_37_fu_796_p7 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_37_reg_1219 : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_37_reg_1219_pp0_iter3_reg : STD_LOGIC_VECTOR (41 downto 0);
    signal p_Result_37_reg_1219_pp0_iter4_reg : STD_LOGIC_VECTOR (41 downto 0);
    signal f_x_msb_3_4_lsb_s_V_reg_1234 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_fu_874_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_reg_1244 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_reg_1244_pp0_iter6_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_reg_1244_pp0_iter7_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_fu_897_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1250 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1250_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1250_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln612_3_fu_903_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_3_reg_1256 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_3_reg_1256_pp0_iter6_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_3_reg_1256_pp0_iter7_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal f_x_msb_2_3_4_lsb_s_s_reg_1272 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_2_3_4_lsb_s_reg_1282 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1287 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1287_pp0_iter9_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1287_pp0_iter10_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_reg_1303 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_l_V_fu_268_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln703_fu_272_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln703_fu_272_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_33_fu_284_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln612_fu_294_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln612_fu_294_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_fu_306_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal x_l_V_fu_268_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Result_s_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_426_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_92_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_468_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_580_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_V_fu_590_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_V_1_fu_600_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_V_2_fu_610_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln612_1_fu_631_p0 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_Result_33_fu_284_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_34_fu_298_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln281_1_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_1_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_3_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_4_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_1_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_2_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_5_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_6_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_8_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_9_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_5_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_7_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_6_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_4_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_7_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_3_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_10_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_11_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_13_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_14_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_10_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_12_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_11_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_9_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_15_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_16_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_18_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_14_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_17_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_15_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_13_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_16_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_12_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_772_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_38_fu_808_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_824_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_824_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal rhs_V_fu_847_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln703_1_fu_844_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln703_2_fu_861_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln703_fu_864_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln728_fu_857_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln703_3_fu_870_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_39_fu_880_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_fu_890_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_1_fu_894_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_40_fu_907_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_920_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_920_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_920_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Result_35_fu_926_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_2_fu_950_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_V_1_fu_947_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln728_1_fu_958_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln703_7_fu_968_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_8_fu_962_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_9_fu_971_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_993_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_993_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_993_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal zext_ln703_8_fu_1009_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_1012_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xor_ln282_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_18_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_1032_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_fu_1017_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_45_fu_1044_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_82_fu_1052_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln456_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_1068_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_1082_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln456_1_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln456_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln456_1_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1104_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_1122_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1122_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1122_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to10 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1122_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1122_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_824_p00 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_824_p10 : STD_LOGIC_VECTOR (85 downto 0);
    signal grp_fu_920_p00 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_920_p10 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_993_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_993_p10 : STD_LOGIC_VECTOR (99 downto 0);

    component dut_mul_42ns_44nsrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (85 downto 0) );
    end component;


    component dut_mul_48ns_50nssc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component dut_mul_50ns_50nstde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component dut_mac_muladd_3nudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component exp_38_18_s_f_x_mlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component exp_38_18_s_f_x_mmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component exp_38_18_s_f_x_lncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component exp_38_18_s_f_x_mocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component exp_38_18_s_f_x_mpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component exp_38_18_s_exp_xqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_4_h_table_V_U : component exp_38_18_s_f_x_mlbW
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_h_table_V_address0,
        ce0 => f_x_msb_4_h_table_V_ce0,
        q0 => f_x_msb_4_h_table_V_q0);

    f_x_msb_4_l_table_V_U : component exp_38_18_s_f_x_mmb6
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_l_table_V_address0,
        ce0 => f_x_msb_4_l_table_V_ce0,
        q0 => f_x_msb_4_l_table_V_q0);

    f_x_lsb_table_V_U : component exp_38_18_s_f_x_lncg
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_lsb_table_V_address0,
        ce0 => f_x_lsb_table_V_ce0,
        q0 => f_x_lsb_table_V_q0);

    f_x_msb_3_table_V_U : component exp_38_18_s_f_x_mocq
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component exp_38_18_s_f_x_mpcA
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component exp_38_18_s_exp_xqcK
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    dut_mul_42ns_44nsrcU_U85 : component dut_mul_42ns_44nsrcU
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 42,
        din1_WIDTH => 44,
        dout_WIDTH => 86)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_824_p0,
        din1 => grp_fu_824_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_824_p2);

    dut_mul_48ns_50nssc4_U86 : component dut_mul_48ns_50nssc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 48,
        din1_WIDTH => 50,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_920_p0,
        din1 => grp_fu_920_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_920_p2);

    dut_mul_50ns_50nstde_U87 : component dut_mul_50ns_50nstde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_993_p0,
        din1 => grp_fu_993_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_993_p2);

    dut_mac_muladd_3nudo_U88 : component dut_mac_muladd_3nudo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 4,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_1122_p0,
        din1 => grp_fu_1122_p1,
        din2 => grp_fu_1122_p2,
        dout => grp_fu_1122_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_1287 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_1287_pp0_iter10_reg <= exp_x_msb_1_V_reg_1287_pp0_iter9_reg;
                exp_x_msb_1_V_reg_1287_pp0_iter9_reg <= exp_x_msb_1_V_reg_1287;
                exp_x_msb_2_3_4_lsb_s_reg_1282 <= ret_V_9_fu_971_p2(55 downto 6);
                exp_x_msb_3_4_lsb_m_s_reg_1244 <= exp_x_msb_3_4_lsb_m_s_fu_874_p2;
                exp_x_msb_3_4_lsb_m_s_reg_1244_pp0_iter6_reg <= exp_x_msb_3_4_lsb_m_s_reg_1244;
                exp_x_msb_3_4_lsb_m_s_reg_1244_pp0_iter7_reg <= exp_x_msb_3_4_lsb_m_s_reg_1244_pp0_iter6_reg;
                f_x_msb_2_3_4_lsb_s_s_reg_1272 <= grp_fu_920_p2(97 downto 52);
                f_x_msb_3_4_lsb_s_V_reg_1234 <= grp_fu_824_p2(85 downto 55);
                f_x_msb_3_V_reg_1213_pp0_iter2_reg <= f_x_msb_3_V_reg_1213;
                f_x_msb_3_V_reg_1213_pp0_iter3_reg <= f_x_msb_3_V_reg_1213_pp0_iter2_reg;
                f_x_msb_3_V_reg_1213_pp0_iter4_reg <= f_x_msb_3_V_reg_1213_pp0_iter3_reg;
                or_ln281_17_reg_1193_pp0_iter10_reg <= or_ln281_17_reg_1193_pp0_iter9_reg;
                or_ln281_17_reg_1193_pp0_iter2_reg <= or_ln281_17_reg_1193_pp0_iter1_reg;
                or_ln281_17_reg_1193_pp0_iter3_reg <= or_ln281_17_reg_1193_pp0_iter2_reg;
                or_ln281_17_reg_1193_pp0_iter4_reg <= or_ln281_17_reg_1193_pp0_iter3_reg;
                or_ln281_17_reg_1193_pp0_iter5_reg <= or_ln281_17_reg_1193_pp0_iter4_reg;
                or_ln281_17_reg_1193_pp0_iter6_reg <= or_ln281_17_reg_1193_pp0_iter5_reg;
                or_ln281_17_reg_1193_pp0_iter7_reg <= or_ln281_17_reg_1193_pp0_iter6_reg;
                or_ln281_17_reg_1193_pp0_iter8_reg <= or_ln281_17_reg_1193_pp0_iter7_reg;
                or_ln281_17_reg_1193_pp0_iter9_reg <= or_ln281_17_reg_1193_pp0_iter8_reg;
                or_ln281_8_reg_1188_pp0_iter10_reg <= or_ln281_8_reg_1188_pp0_iter9_reg;
                or_ln281_8_reg_1188_pp0_iter2_reg <= or_ln281_8_reg_1188_pp0_iter1_reg;
                or_ln281_8_reg_1188_pp0_iter3_reg <= or_ln281_8_reg_1188_pp0_iter2_reg;
                or_ln281_8_reg_1188_pp0_iter4_reg <= or_ln281_8_reg_1188_pp0_iter3_reg;
                or_ln281_8_reg_1188_pp0_iter5_reg <= or_ln281_8_reg_1188_pp0_iter4_reg;
                or_ln281_8_reg_1188_pp0_iter6_reg <= or_ln281_8_reg_1188_pp0_iter5_reg;
                or_ln281_8_reg_1188_pp0_iter7_reg <= or_ln281_8_reg_1188_pp0_iter6_reg;
                or_ln281_8_reg_1188_pp0_iter8_reg <= or_ln281_8_reg_1188_pp0_iter7_reg;
                or_ln281_8_reg_1188_pp0_iter9_reg <= or_ln281_8_reg_1188_pp0_iter8_reg;
                p_Result_18_reg_1141_pp0_iter2_reg <= p_Result_18_reg_1141_pp0_iter1_reg;
                p_Result_18_reg_1141_pp0_iter3_reg <= p_Result_18_reg_1141_pp0_iter2_reg;
                p_Result_18_reg_1141_pp0_iter4_reg <= p_Result_18_reg_1141_pp0_iter3_reg;
                p_Result_18_reg_1141_pp0_iter5_reg <= p_Result_18_reg_1141_pp0_iter4_reg;
                p_Result_18_reg_1141_pp0_iter6_reg <= p_Result_18_reg_1141_pp0_iter5_reg;
                    p_Result_37_reg_1219(6 downto 0) <= p_Result_37_fu_796_p7(6 downto 0);    p_Result_37_reg_1219(25 downto 11) <= p_Result_37_fu_796_p7(25 downto 11);    p_Result_37_reg_1219(41 downto 38) <= p_Result_37_fu_796_p7(41 downto 38);
                    p_Result_37_reg_1219_pp0_iter3_reg(6 downto 0) <= p_Result_37_reg_1219(6 downto 0);    p_Result_37_reg_1219_pp0_iter3_reg(25 downto 11) <= p_Result_37_reg_1219(25 downto 11);    p_Result_37_reg_1219_pp0_iter3_reg(41 downto 38) <= p_Result_37_reg_1219(41 downto 38);
                    p_Result_37_reg_1219_pp0_iter4_reg(6 downto 0) <= p_Result_37_reg_1219_pp0_iter3_reg(6 downto 0);    p_Result_37_reg_1219_pp0_iter4_reg(25 downto 11) <= p_Result_37_reg_1219_pp0_iter3_reg(25 downto 11);    p_Result_37_reg_1219_pp0_iter4_reg(41 downto 38) <= p_Result_37_reg_1219_pp0_iter3_reg(41 downto 38);
                ret_V_reg_1250 <= ret_V_fu_897_p2;
                ret_V_reg_1250_pp0_iter6_reg <= ret_V_reg_1250;
                ret_V_reg_1250_pp0_iter7_reg <= ret_V_reg_1250_pp0_iter6_reg;
                tmp_V_1_reg_1152_pp0_iter2_reg <= tmp_V_1_reg_1152_pp0_iter1_reg;
                tmp_V_1_reg_1152_pp0_iter3_reg <= tmp_V_1_reg_1152_pp0_iter2_reg;
                tmp_V_1_reg_1152_pp0_iter4_reg <= tmp_V_1_reg_1152_pp0_iter3_reg;
                tmp_V_reg_1146_pp0_iter2_reg <= tmp_V_reg_1146_pp0_iter1_reg;
                tmp_V_reg_1146_pp0_iter3_reg <= tmp_V_reg_1146_pp0_iter2_reg;
                tmp_V_reg_1146_pp0_iter4_reg <= tmp_V_reg_1146_pp0_iter3_reg;
                tmp_reg_1135_pp0_iter10_reg <= tmp_reg_1135_pp0_iter9_reg;
                tmp_reg_1135_pp0_iter2_reg <= tmp_reg_1135_pp0_iter1_reg;
                tmp_reg_1135_pp0_iter3_reg <= tmp_reg_1135_pp0_iter2_reg;
                tmp_reg_1135_pp0_iter4_reg <= tmp_reg_1135_pp0_iter3_reg;
                tmp_reg_1135_pp0_iter5_reg <= tmp_reg_1135_pp0_iter4_reg;
                tmp_reg_1135_pp0_iter6_reg <= tmp_reg_1135_pp0_iter5_reg;
                tmp_reg_1135_pp0_iter7_reg <= tmp_reg_1135_pp0_iter6_reg;
                tmp_reg_1135_pp0_iter8_reg <= tmp_reg_1135_pp0_iter7_reg;
                tmp_reg_1135_pp0_iter9_reg <= tmp_reg_1135_pp0_iter8_reg;
                trunc_ln612_3_reg_1256 <= trunc_ln612_3_fu_903_p1;
                trunc_ln612_3_reg_1256_pp0_iter6_reg <= trunc_ln612_3_reg_1256;
                trunc_ln612_3_reg_1256_pp0_iter7_reg <= trunc_ln612_3_reg_1256_pp0_iter6_reg;
                y_lo_s_V_reg_1303 <= grp_fu_993_p2(99 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_x_msb_4_lsb_m_1_s_reg_1203 <= grp_fu_1122_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_1213 <= f_x_msb_3_table_V_q0;
                f_x_msb_4_l_V_reg_1198 <= f_x_msb_4_l_table_V_q0;
                or_ln281_17_reg_1193 <= or_ln281_17_fu_760_p2;
                or_ln281_17_reg_1193_pp0_iter1_reg <= or_ln281_17_reg_1193;
                or_ln281_8_reg_1188 <= or_ln281_8_fu_706_p2;
                or_ln281_8_reg_1188_pp0_iter1_reg <= or_ln281_8_reg_1188;
                p_Result_18_reg_1141 <= p_Result_18_fu_580_p1(23 downto 17);
                p_Result_18_reg_1141_pp0_iter1_reg <= p_Result_18_reg_1141;
                tmp_V_1_reg_1152 <= tmp_V_1_fu_600_p1(8 downto 4);
                tmp_V_1_reg_1152_pp0_iter1_reg <= tmp_V_1_reg_1152;
                tmp_V_2_reg_1158 <= tmp_V_2_fu_610_p1(3 downto 1);
                    tmp_V_3_reg_1130(3) <= tmp_V_3_fu_276_p3(3);
                tmp_V_reg_1146 <= tmp_V_fu_590_p1(16 downto 9);
                tmp_V_reg_1146_pp0_iter1_reg <= tmp_V_reg_1146;
                tmp_reg_1135 <= tmp_fu_306_p1(37 downto 37);
                tmp_reg_1135_pp0_iter1_reg <= tmp_reg_1135;
                trunc_ln612_1_reg_1178 <= trunc_ln612_1_fu_631_p1;
                trunc_ln612_1_reg_1178_pp0_iter1_reg <= trunc_ln612_1_reg_1178;
                trunc_ln612_2_reg_1208 <= trunc_ln612_2_fu_792_p1;
            end if;
        end if;
    end process;
    tmp_V_3_reg_1130(2 downto 0) <= "000";
    p_Result_37_reg_1219(10 downto 7) <= "0000";
    p_Result_37_reg_1219(37 downto 26) <= "000000000000";
    p_Result_37_reg_1219_pp0_iter3_reg(10 downto 7) <= "0000";
    p_Result_37_reg_1219_pp0_iter3_reg(37 downto 26) <= "000000000000";
    p_Result_37_reg_1219_pp0_iter4_reg(10 downto 7) <= "0000";
    p_Result_37_reg_1219_pp0_iter4_reg(37 downto 26) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_fu_864_p2 <= std_logic_vector(unsigned(zext_ln703_1_fu_844_p1) + unsigned(zext_ln703_2_fu_861_p1));
    and_ln281_fu_652_p2 <= (icmp_ln281_fu_640_p2 and icmp_ln281_1_fu_646_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to10)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to10 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv38_1FFFFFFFFF when (or_ln456_1_fu_1098_p2(0) = '1') else 
        tmp_s_fu_1104_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln544_4_fu_942_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_3_4_lsb_m_s_fu_874_p2 <= std_logic_vector(unsigned(zext_ln728_fu_857_p1) + unsigned(zext_ln703_3_fu_870_p1));
    f_x_lsb_table_V_address0 <= zext_ln544_1_fu_626_p1(4 - 1 downto 0);

    f_x_lsb_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_lsb_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_lsb_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_table_V_address0 <= zext_ln544_3_fu_840_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln544_2_fu_635_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_h_table_V_address0 <= zext_ln544_fu_620_p1(3 - 1 downto 0);

    f_x_msb_4_h_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_4_h_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_h_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_l_table_V_address0 <= zext_ln544_fu_620_p1(3 - 1 downto 0);

    f_x_msb_4_l_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_4_l_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_l_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1122_p0 <= grp_fu_1122_p00(3 - 1 downto 0);
    grp_fu_1122_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_1158),7));
    grp_fu_1122_p1 <= grp_fu_1122_p10(4 - 1 downto 0);
    grp_fu_1122_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_reg_1130),7));
    grp_fu_1122_p2 <= ((ap_const_lv1_0 & f_x_msb_4_h_table_V_q0) & p_Result_22_fu_772_p4);
    grp_fu_824_p0 <= grp_fu_824_p00(42 - 1 downto 0);
    grp_fu_824_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_37_fu_796_p7),86));
    grp_fu_824_p1 <= grp_fu_824_p10(44 - 1 downto 0);
    grp_fu_824_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_38_fu_808_p4),86));
    grp_fu_920_p0 <= grp_fu_920_p00(48 - 1 downto 0);
    grp_fu_920_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_s_reg_1244),98));
    grp_fu_920_p1 <= grp_fu_920_p10(50 - 1 downto 0);
    grp_fu_920_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_40_fu_907_p3),98));
    grp_fu_993_p0 <= grp_fu_993_p00(50 - 1 downto 0);
    grp_fu_993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_1287),100));
    grp_fu_993_p1 <= grp_fu_993_p10(50 - 1 downto 0);
    grp_fu_993_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_s_reg_1282),100));
    icmp_ln281_1_fu_646_p2 <= "1" when (unsigned(p_Result_34_fu_298_p3) > unsigned(ap_const_lv23_78A013)) else "0";
    icmp_ln281_fu_640_p2 <= "1" when (p_Result_33_fu_284_p4 = ap_const_lv5_F) else "0";
    icmp_ln456_1_fu_1092_p2 <= "0" when (tmp_84_fu_1082_p4 = ap_const_lv3_0) else "1";
    icmp_ln456_fu_1062_p2 <= "0" when (tmp_82_fu_1052_p4 = ap_const_lv2_0) else "1";
    lhs_V_1_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_2_3_4_lsb_s_s_reg_1272),57));
    lhs_V_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_39_fu_880_p4),9));
    or_ln281_10_fu_718_p2 <= (xor_ln278_14_fu_518_p2 or xor_ln278_13_fu_504_p2);
    or_ln281_11_fu_724_p2 <= (xor_ln278_12_fu_490_p2 or or_ln281_10_fu_718_p2);
    or_ln281_12_fu_730_p2 <= (or_ln281_9_fu_712_p2 or or_ln281_11_fu_724_p2);
    or_ln281_13_fu_736_p2 <= (xor_ln278_16_fu_546_p2 or xor_ln278_15_fu_532_p2);
    or_ln281_14_fu_742_p2 <= (xor_ln278_18_fu_574_p2 or and_ln281_fu_652_p2);
    or_ln281_15_fu_748_p2 <= (xor_ln278_17_fu_560_p2 or or_ln281_14_fu_742_p2);
    or_ln281_16_fu_754_p2 <= (or_ln281_15_fu_748_p2 or or_ln281_13_fu_736_p2);
    or_ln281_17_fu_760_p2 <= (or_ln281_16_fu_754_p2 or or_ln281_12_fu_730_p2);
    or_ln281_18_fu_1040_p2 <= (or_ln281_8_reg_1188_pp0_iter10_reg or or_ln281_17_reg_1193_pp0_iter10_reg);
    or_ln281_1_fu_664_p2 <= (xor_ln278_4_fu_378_p2 or xor_ln278_3_fu_364_p2);
    or_ln281_2_fu_670_p2 <= (xor_ln278_2_fu_350_p2 or or_ln281_1_fu_664_p2);
    or_ln281_3_fu_676_p2 <= (or_ln281_fu_658_p2 or or_ln281_2_fu_670_p2);
    or_ln281_4_fu_682_p2 <= (xor_ln278_6_fu_406_p2 or xor_ln278_5_fu_392_p2);
    or_ln281_5_fu_688_p2 <= (xor_ln278_9_fu_448_p2 or xor_ln278_8_fu_434_p2);
    or_ln281_6_fu_694_p2 <= (xor_ln278_7_fu_420_p2 or or_ln281_5_fu_688_p2);
    or_ln281_7_fu_700_p2 <= (or_ln281_6_fu_694_p2 or or_ln281_4_fu_682_p2);
    or_ln281_8_fu_706_p2 <= (or_ln281_7_fu_700_p2 or or_ln281_3_fu_676_p2);
    or_ln281_9_fu_712_p2 <= (xor_ln278_11_fu_476_p2 or xor_ln278_10_fu_462_p2);
    or_ln281_fu_658_p2 <= (xor_ln278_fu_322_p2 or xor_ln278_1_fu_336_p2);
    or_ln456_1_fu_1098_p2 <= (or_ln456_fu_1076_p2 or icmp_ln456_1_fu_1092_p2);
    or_ln456_fu_1076_p2 <= (tmp_83_fu_1068_p3 or icmp_ln456_fu_1062_p2);
    p_Result_10_fu_468_p3 <= x_l_V_fu_268_p1(35 downto 35);
    p_Result_11_fu_482_p3 <= x_l_V_fu_268_p1(36 downto 36);
    p_Result_12_fu_496_p3 <= x_l_V_fu_268_p1(37 downto 37);
    p_Result_13_fu_510_p3 <= x_l_V_fu_268_p1(38 downto 38);
    p_Result_14_fu_524_p3 <= x_l_V_fu_268_p1(39 downto 39);
    p_Result_15_fu_538_p3 <= x_l_V_fu_268_p1(40 downto 40);
    p_Result_16_fu_552_p3 <= x_l_V_fu_268_p1(41 downto 41);
    p_Result_17_fu_566_p3 <= x_l_V_fu_268_p1(42 downto 42);
    p_Result_18_fu_580_p1 <= x_V;
    p_Result_1_fu_328_p3 <= x_l_V_fu_268_p1(25 downto 25);
    p_Result_22_fu_772_p4 <= f_x_lsb_table_V_q0(7 downto 5);
    p_Result_2_fu_342_p3 <= x_l_V_fu_268_p1(26 downto 26);
    p_Result_33_fu_284_p1 <= x_V;
    p_Result_33_fu_284_p4 <= p_Result_33_fu_284_p1(24 downto 20);
    p_Result_34_fu_298_p3 <= (trunc_ln612_fu_294_p1 & ap_const_lv3_0);
    p_Result_35_fu_926_p3 <= (tmp_reg_1135_pp0_iter6_reg & p_Result_18_reg_1141_pp0_iter6_reg);
    p_Result_37_fu_796_p7 <= (((((trunc_ln612_1_reg_1178_pp0_iter1_reg & ap_const_lv12_0) & exp_x_msb_4_lsb_m_1_s_reg_1203) & trunc_ln612_2_reg_1208) & ap_const_lv4_0) & f_x_msb_4_l_V_reg_1198);
    p_Result_38_fu_808_p4 <= ((tmp_V_1_reg_1152_pp0_iter1_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_1213);
    p_Result_39_fu_880_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_3_fu_356_p3 <= x_l_V_fu_268_p1(27 downto 27);
    p_Result_40_fu_907_p3 <= (ret_V_reg_1250 & trunc_ln612_3_reg_1256);
    p_Result_4_fu_370_p3 <= x_l_V_fu_268_p1(28 downto 28);
    p_Result_5_fu_384_p3 <= x_l_V_fu_268_p1(29 downto 29);
    p_Result_6_fu_398_p3 <= x_l_V_fu_268_p1(30 downto 30);
    p_Result_7_fu_412_p3 <= x_l_V_fu_268_p1(31 downto 31);
    p_Result_8_fu_426_p3 <= x_l_V_fu_268_p1(32 downto 32);
    p_Result_9_fu_440_p3 <= x_l_V_fu_268_p1(33 downto 33);
    p_Result_s_92_fu_454_p3 <= x_l_V_fu_268_p1(34 downto 34);
    p_Result_s_fu_314_p3 <= x_l_V_fu_268_p1(24 downto 24);
    p_Val2_45_fu_1044_p3 <= 
        select_ln282_fu_1032_p3 when (or_ln281_18_fu_1040_p2(0) = '1') else 
        y_V_fu_1017_p4;
    ret_V_8_fu_962_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_947_p1) + unsigned(zext_ln728_1_fu_958_p1));
    ret_V_9_fu_971_p2 <= std_logic_vector(unsigned(zext_ln703_7_fu_968_p1) + unsigned(ret_V_8_fu_962_p2));
    ret_V_fu_897_p2 <= std_logic_vector(unsigned(lhs_V_fu_890_p1) + unsigned(rhs_V_1_fu_894_p1));
    rhs_V_1_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1146_pp0_iter4_reg),9));
    rhs_V_2_fu_950_p4 <= ((ret_V_reg_1250_pp0_iter7_reg & trunc_ln612_3_reg_1256_pp0_iter7_reg) & ap_const_lv6_0);
    rhs_V_fu_847_p5 <= (((tmp_V_1_reg_1152_pp0_iter4_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_1213_pp0_iter4_reg) & ap_const_lv3_0);
    select_ln282_fu_1032_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (xor_ln282_fu_1027_p2(0) = '1') else 
        ap_const_lv46_0;
    tmp_82_fu_1052_p4 <= p_Val2_45_fu_1044_p3(45 downto 44);
    tmp_83_fu_1068_p3 <= p_Val2_45_fu_1044_p3(43 downto 43);
    tmp_84_fu_1082_p4 <= p_Val2_45_fu_1044_p3(42 downto 40);
    tmp_V_1_fu_600_p1 <= x_V;
    tmp_V_1_fu_600_p4 <= tmp_V_1_fu_600_p1(8 downto 4);
    tmp_V_2_fu_610_p1 <= x_V;
    tmp_V_2_fu_610_p4 <= tmp_V_2_fu_610_p1(3 downto 1);
    tmp_V_3_fu_276_p3 <= (trunc_ln703_fu_272_p1 & ap_const_lv3_0);
    tmp_V_fu_590_p1 <= x_V;
    tmp_fu_306_p1 <= x_V;
    tmp_fu_306_p3 <= tmp_fu_306_p1(37 downto 37);
    tmp_s_fu_1104_p4 <= p_Val2_45_fu_1044_p3(40 downto 3);
    trunc_ln612_1_fu_631_p0 <= x_V;
    trunc_ln612_1_fu_631_p1 <= trunc_ln612_1_fu_631_p0(4 - 1 downto 0);
    trunc_ln612_2_fu_792_p1 <= f_x_lsb_table_V_q0(5 - 1 downto 0);
    trunc_ln612_3_fu_903_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln612_fu_294_p0 <= x_V;
    trunc_ln612_fu_294_p1 <= trunc_ln612_fu_294_p0(20 - 1 downto 0);
    trunc_ln703_fu_272_p0 <= x_V;
    trunc_ln703_fu_272_p1 <= trunc_ln703_fu_272_p0(1 - 1 downto 0);
    x_l_V_fu_268_p0 <= x_V;
        x_l_V_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_l_V_fu_268_p0),47));

    xor_ln278_10_fu_462_p2 <= (tmp_fu_306_p3 xor p_Result_s_92_fu_454_p3);
    xor_ln278_11_fu_476_p2 <= (tmp_fu_306_p3 xor p_Result_10_fu_468_p3);
    xor_ln278_12_fu_490_p2 <= (tmp_fu_306_p3 xor p_Result_11_fu_482_p3);
    xor_ln278_13_fu_504_p2 <= (tmp_fu_306_p3 xor p_Result_12_fu_496_p3);
    xor_ln278_14_fu_518_p2 <= (tmp_fu_306_p3 xor p_Result_13_fu_510_p3);
    xor_ln278_15_fu_532_p2 <= (tmp_fu_306_p3 xor p_Result_14_fu_524_p3);
    xor_ln278_16_fu_546_p2 <= (tmp_fu_306_p3 xor p_Result_15_fu_538_p3);
    xor_ln278_17_fu_560_p2 <= (tmp_fu_306_p3 xor p_Result_16_fu_552_p3);
    xor_ln278_18_fu_574_p2 <= (tmp_fu_306_p3 xor p_Result_17_fu_566_p3);
    xor_ln278_1_fu_336_p2 <= (tmp_fu_306_p3 xor p_Result_1_fu_328_p3);
    xor_ln278_2_fu_350_p2 <= (tmp_fu_306_p3 xor p_Result_2_fu_342_p3);
    xor_ln278_3_fu_364_p2 <= (tmp_fu_306_p3 xor p_Result_3_fu_356_p3);
    xor_ln278_4_fu_378_p2 <= (tmp_fu_306_p3 xor p_Result_4_fu_370_p3);
    xor_ln278_5_fu_392_p2 <= (tmp_fu_306_p3 xor p_Result_5_fu_384_p3);
    xor_ln278_6_fu_406_p2 <= (tmp_fu_306_p3 xor p_Result_6_fu_398_p3);
    xor_ln278_7_fu_420_p2 <= (tmp_fu_306_p3 xor p_Result_7_fu_412_p3);
    xor_ln278_8_fu_434_p2 <= (tmp_fu_306_p3 xor p_Result_8_fu_426_p3);
    xor_ln278_9_fu_448_p2 <= (tmp_fu_306_p3 xor p_Result_9_fu_440_p3);
    xor_ln278_fu_322_p2 <= (tmp_fu_306_p3 xor p_Result_s_fu_314_p3);
    xor_ln282_fu_1027_p2 <= (tmp_reg_1135_pp0_iter10_reg xor ap_const_lv1_1);
    y_V_fu_1017_p4 <= y_l_V_fu_1012_p2(49 downto 4);
    y_l_V_fu_1012_p2 <= std_logic_vector(unsigned(zext_ln703_8_fu_1009_p1) + unsigned(exp_x_msb_1_V_reg_1287_pp0_iter10_reg));
    zext_ln544_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_fu_276_p3),64));
    zext_ln544_2_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_600_p4),64));
    zext_ln544_3_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1146_pp0_iter3_reg),64));
    zext_ln544_4_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_35_fu_926_p3),64));
    zext_ln544_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_610_p4),64));
    zext_ln703_1_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_3_4_lsb_s_V_reg_1234),43));
    zext_ln703_2_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_37_reg_1219_pp0_iter4_reg),43));
    zext_ln703_3_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_fu_864_p2),48));
    zext_ln703_7_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_s_reg_1244_pp0_iter7_reg),57));
    zext_ln703_8_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_lo_s_V_reg_1303),50));
    zext_ln728_1_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_2_fu_950_p4),57));
    zext_ln728_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_fu_847_p5),48));
end behav;
