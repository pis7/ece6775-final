// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cache_update_1_HH_
#define _cache_update_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cache_update_1_v_lbW.h"

namespace ap_rtl {

struct cache_update_1 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > cache_out_V_address0;
    sc_out< sc_logic > cache_out_V_ce0;
    sc_out< sc_logic > cache_out_V_we0;
    sc_out< sc_lv<40> > cache_out_V_d0;
    sc_out< sc_lv<7> > update_0_V_address0;
    sc_out< sc_logic > update_0_V_ce0;
    sc_in< sc_lv<40> > update_0_V_q0;


    // Module declarations
    cache_update_1(sc_module_name name);
    SC_HAS_PROCESS(cache_update_1);

    ~cache_update_1();

    sc_trace_file* mVcdFile;

    cache_update_1_v_lbW* v_cache_V_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<12> > v_cache_V_address0;
    sc_signal< sc_logic > v_cache_V_ce0;
    sc_signal< sc_lv<23> > v_cache_V_q0;
    sc_signal< sc_lv<3> > i_fu_140_p2;
    sc_signal< sc_lv<3> > i_reg_380;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > add_ln238_fu_162_p2;
    sc_signal< sc_lv<6> > add_ln238_reg_385;
    sc_signal< sc_lv<1> > icmp_ln235_fu_134_p2;
    sc_signal< sc_lv<8> > sext_ln203_fu_202_p1;
    sc_signal< sc_lv<8> > sext_ln203_reg_390;
    sc_signal< sc_lv<8> > sub_ln238_fu_214_p2;
    sc_signal< sc_lv<8> > sub_ln238_reg_395;
    sc_signal< sc_lv<3> > j_fu_226_p2;
    sc_signal< sc_lv<3> > j_reg_403;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<13> > sub_ln238_1_fu_269_p2;
    sc_signal< sc_lv<13> > sub_ln238_1_reg_408;
    sc_signal< sc_lv<1> > icmp_ln236_fu_220_p2;
    sc_signal< sc_lv<11> > sub_ln203_4_fu_300_p2;
    sc_signal< sc_lv<11> > sub_ln203_4_reg_413;
    sc_signal< sc_lv<1> > icmp_ln238_fu_306_p2;
    sc_signal< sc_lv<1> > icmp_ln238_reg_418;
    sc_signal< sc_lv<5> > k_fu_318_p2;
    sc_signal< sc_lv<5> > k_reg_426;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln237_fu_312_p2;
    sc_signal< sc_lv<11> > add_ln203_4_fu_346_p2;
    sc_signal< sc_lv<11> > add_ln203_4_reg_436;
    sc_signal< sc_lv<3> > i_0_reg_101;
    sc_signal< sc_lv<3> > j_0_reg_112;
    sc_signal< sc_lv<5> > k_0_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln238_9_fu_341_p1;
    sc_signal< sc_lv<64> > sext_ln238_fu_356_p1;
    sc_signal< sc_lv<64> > zext_ln203_12_fu_361_p1;
    sc_signal< sc_lv<5> > tmp_60_fu_150_p3;
    sc_signal< sc_lv<6> > zext_ln238_fu_146_p1;
    sc_signal< sc_lv<6> > zext_ln238_1_fu_158_p1;
    sc_signal< sc_lv<6> > tmp_61_fu_168_p3;
    sc_signal< sc_lv<4> > tmp_62_fu_184_p3;
    sc_signal< sc_lv<7> > zext_ln203_10_fu_180_p1;
    sc_signal< sc_lv<7> > zext_ln203_11_fu_192_p1;
    sc_signal< sc_lv<7> > sub_ln203_fu_196_p2;
    sc_signal< sc_lv<8> > tmp_63_fu_206_p3;
    sc_signal< sc_lv<8> > zext_ln203_fu_176_p1;
    sc_signal< sc_lv<6> > zext_ln238_3_fu_236_p1;
    sc_signal< sc_lv<6> > add_ln238_1_fu_240_p2;
    sc_signal< sc_lv<11> > tmp_77_fu_245_p3;
    sc_signal< sc_lv<9> > tmp_78_fu_257_p3;
    sc_signal< sc_lv<13> > zext_ln238_4_fu_253_p1;
    sc_signal< sc_lv<13> > zext_ln238_5_fu_265_p1;
    sc_signal< sc_lv<8> > zext_ln238_2_fu_232_p1;
    sc_signal< sc_lv<8> > add_ln203_fu_275_p2;
    sc_signal< sc_lv<6> > trunc_ln203_fu_280_p1;
    sc_signal< sc_lv<11> > p_shl5_cast_fu_284_p3;
    sc_signal< sc_lv<11> > p_shl6_cast_fu_292_p3;
    sc_signal< sc_lv<13> > zext_ln238_8_fu_332_p1;
    sc_signal< sc_lv<13> > add_ln238_2_fu_336_p2;
    sc_signal< sc_lv<11> > zext_ln238_7_fu_328_p1;
    sc_signal< sc_lv<8> > zext_ln238_6_fu_324_p1;
    sc_signal< sc_lv<8> > add_ln238_3_fu_351_p2;
    sc_signal< sc_lv<40> > sext_ln203_2_fu_365_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<5> ap_const_lv5_18;
    static const sc_lv<5> ap_const_lv5_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln203_4_fu_346_p2();
    void thread_add_ln203_fu_275_p2();
    void thread_add_ln238_1_fu_240_p2();
    void thread_add_ln238_2_fu_336_p2();
    void thread_add_ln238_3_fu_351_p2();
    void thread_add_ln238_fu_162_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cache_out_V_address0();
    void thread_cache_out_V_ce0();
    void thread_cache_out_V_d0();
    void thread_cache_out_V_we0();
    void thread_i_fu_140_p2();
    void thread_icmp_ln235_fu_134_p2();
    void thread_icmp_ln236_fu_220_p2();
    void thread_icmp_ln237_fu_312_p2();
    void thread_icmp_ln238_fu_306_p2();
    void thread_j_fu_226_p2();
    void thread_k_fu_318_p2();
    void thread_p_shl5_cast_fu_284_p3();
    void thread_p_shl6_cast_fu_292_p3();
    void thread_sext_ln203_2_fu_365_p1();
    void thread_sext_ln203_fu_202_p1();
    void thread_sext_ln238_fu_356_p1();
    void thread_sub_ln203_4_fu_300_p2();
    void thread_sub_ln203_fu_196_p2();
    void thread_sub_ln238_1_fu_269_p2();
    void thread_sub_ln238_fu_214_p2();
    void thread_tmp_60_fu_150_p3();
    void thread_tmp_61_fu_168_p3();
    void thread_tmp_62_fu_184_p3();
    void thread_tmp_63_fu_206_p3();
    void thread_tmp_77_fu_245_p3();
    void thread_tmp_78_fu_257_p3();
    void thread_trunc_ln203_fu_280_p1();
    void thread_update_0_V_address0();
    void thread_update_0_V_ce0();
    void thread_v_cache_V_address0();
    void thread_v_cache_V_ce0();
    void thread_zext_ln203_10_fu_180_p1();
    void thread_zext_ln203_11_fu_192_p1();
    void thread_zext_ln203_12_fu_361_p1();
    void thread_zext_ln203_fu_176_p1();
    void thread_zext_ln238_1_fu_158_p1();
    void thread_zext_ln238_2_fu_232_p1();
    void thread_zext_ln238_3_fu_236_p1();
    void thread_zext_ln238_4_fu_253_p1();
    void thread_zext_ln238_5_fu_265_p1();
    void thread_zext_ln238_6_fu_324_p1();
    void thread_zext_ln238_7_fu_328_p1();
    void thread_zext_ln238_8_fu_332_p1();
    void thread_zext_ln238_9_fu_341_p1();
    void thread_zext_ln238_fu_146_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
