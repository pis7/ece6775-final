-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity apply_rotary_pos_fYi_rom is 
    generic(
             DWIDTH     : integer := 21; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of apply_rotary_pos_fYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "001001000100111100001", 1 => "101110010010101011110", 
    2 => "100001000111000010111", 3 => "100001101101111001110", 
    4 => "101010001100010111001", 5 => "110101001100010111001", 
    6 => "111111101011011111011", 7 => "001000011010000110010", 
    8 => "001111001010001101010", 9 => "010100001010001011011", 
    10 => "010111110001001000011", 11 => "011010010011100101010", 
    12 => "011100000101011010001", 13 => "011101010100001000101", 
    14 => "011110001010010111100", 15 => "011110101111100011001", 
    16 => "011111001001000101110", 17 => "011111011010100100000", 
    18 => "011111100110011101101", 19 => "011111101110100100110", 
    20 => "011111110100001000001", 21 => "011111110111111010100", 
    22 => "011111111010011111001", 23 => "011111111100001111100", 
    24 => "011111111101011100000", 25 => "011111111110010000010", 
    26 => "011111111110110011111", 27 => "011111111111001100001", 
    28 => "011111111111011100101", 29 => "011111111111100111111", 
    30 => "011111111111101111100", 31 => "011111111111110100110", 
    32 => "011111111111111000011", 33 => "011111111111111010110", 
    34 => "011111111111111100011", 35 => "011111111111111101100", 
    36 => "011111111111111110010", 37 => "011111111111111110111", 
    38 => "011111111111111111001", 39 => "011111111111111111011", 
    40 => "011111111111111111101", 41 to 42=> "011111111111111111110", 
    43 to 47=> "011111111111111111111", 48 => "001001000100111100001", 
    49 => "101110010010101011110", 50 => "100001000111000010111", 
    51 => "100001101101111001110", 52 => "101010001100010111001", 
    53 => "110101001100010111001", 54 => "111111101011011111011", 
    55 => "001000011010000110010", 56 => "001111001010001101010", 
    57 => "010100001010001011011", 58 => "010111110001001000011", 
    59 => "011010010011100101010", 60 => "011100000101011010001", 
    61 => "011101010100001000101", 62 => "011110001010010111100", 
    63 => "011110101111100011001", 64 => "011111001001000101110", 
    65 => "011111011010100100000", 66 => "011111100110011101101", 
    67 => "011111101110100100110", 68 => "011111110100001000001", 
    69 => "011111110111111010100", 70 => "011111111010011111001", 
    71 => "011111111100001111100", 72 => "011111111101011100000", 
    73 => "011111111110010000010", 74 => "011111111110110011111", 
    75 => "011111111111001100001", 76 => "011111111111011100101", 
    77 => "011111111111100111111", 78 => "011111111111101111100", 
    79 => "011111111111110100110", 80 => "011111111111111000011", 
    81 => "011111111111111010110", 82 => "011111111111111100011", 
    83 => "011111111111111101100", 84 => "011111111111111110010", 
    85 => "011111111111111110111", 86 => "011111111111111111001", 
    87 => "011111111111111111011", 88 => "011111111111111111101", 
    89 to 90=> "011111111111111111110", 91 to 95=> "011111111111111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity apply_rotary_pos_fYi is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of apply_rotary_pos_fYi is
    component apply_rotary_pos_fYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    apply_rotary_pos_fYi_rom_U :  component apply_rotary_pos_fYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


