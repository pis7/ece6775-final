-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transpose_last_two_d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_1_V_ce0 : OUT STD_LOGIC;
    output_1_V_we0 : OUT STD_LOGIC;
    output_1_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_2_V_ce0 : OUT STD_LOGIC;
    output_2_V_we0 : OUT STD_LOGIC;
    output_2_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_3_V_ce0 : OUT STD_LOGIC;
    output_3_V_we0 : OUT STD_LOGIC;
    output_3_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of transpose_last_two_d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_180_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_361 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln203_fu_216_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln203_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln215_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_226_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_375 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln203_2_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_2_reg_380 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln216_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_1_fu_265_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_1_reg_385 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_fu_277_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln217_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_1_fu_297_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_1_reg_403 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln203_3_fu_346_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln203_3_reg_407 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_141 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_152 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln203_5_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_7_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_186_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_198_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_fu_194_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_1_fu_206_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln203_fu_210_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_3_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln203_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_249_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_257_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_4_fu_283_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_1_fu_287_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_301_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_6_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_2_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln203_2_fu_320_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_332_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_2_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_141 <= i_reg_361;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_141 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln217_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_152 <= j_reg_375;
            elsif (((icmp_ln215_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_152 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_163 <= k_reg_393;
            elsif (((icmp_ln216_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_163 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln217_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln203_3_reg_407 <= add_ln203_3_fu_346_p2;
                trunc_ln203_1_reg_403 <= trunc_ln203_1_fu_297_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_361 <= i_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_375 <= j_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_393 <= k_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln215_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln203_reg_366(7 downto 1) <= sext_ln203_fu_216_p1(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln203_1_reg_385(10 downto 3) <= sub_ln203_1_fu_265_p2(10 downto 3);
                    zext_ln203_2_reg_380(2 downto 0) <= zext_ln203_2_fu_232_p1(2 downto 0);
            end if;
        end if;
    end process;
    sext_ln203_reg_366(0) <= '0';
    zext_ln203_2_reg_380(8 downto 3) <= "000000";
    sub_ln203_1_reg_385(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln215_fu_174_p2, ap_CS_fsm_state3, icmp_ln216_fu_220_p2, ap_CS_fsm_state4, icmp_ln217_fu_271_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln215_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln216_fu_220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln217_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln203_1_fu_287_p2 <= std_logic_vector(unsigned(sub_ln203_1_reg_385) + unsigned(zext_ln203_4_fu_283_p1));
    add_ln203_2_fu_315_p2 <= std_logic_vector(signed(sext_ln203_reg_366) + signed(zext_ln203_6_fu_311_p1));
    add_ln203_3_fu_346_p2 <= std_logic_vector(unsigned(sub_ln203_2_fu_340_p2) + unsigned(zext_ln203_2_reg_380));
    add_ln203_fu_240_p2 <= std_logic_vector(unsigned(zext_ln203_3_fu_236_p1) + unsigned(sext_ln203_reg_366));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln215_fu_174_p2)
    begin
        if ((((icmp_ln215_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln215_fu_174_p2)
    begin
        if (((icmp_ln215_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_180_p2 <= std_logic_vector(unsigned(i_0_reg_141) + unsigned(ap_const_lv3_1));
    icmp_ln215_fu_174_p2 <= "1" when (i_0_reg_141 = ap_const_lv3_4) else "0";
    icmp_ln216_fu_220_p2 <= "1" when (j_0_reg_152 = ap_const_lv3_6) else "0";
    icmp_ln217_fu_271_p2 <= "1" when (k_0_reg_163 = ap_const_lv5_18) else "0";
    input_V_address0 <= zext_ln203_5_fu_292_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_226_p2 <= std_logic_vector(unsigned(j_0_reg_152) + unsigned(ap_const_lv3_1));
    k_fu_277_p2 <= std_logic_vector(unsigned(k_0_reg_163) + unsigned(ap_const_lv5_1));
    output_0_V_address0 <= zext_ln203_7_fu_351_p1(8 - 1 downto 0);

    output_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= input_V_q0;

    output_0_V_we0_assign_proc : process(trunc_ln203_1_reg_403, ap_CS_fsm_state5)
    begin
        if (((trunc_ln203_1_reg_403 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_V_address0 <= zext_ln203_7_fu_351_p1(8 - 1 downto 0);

    output_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_1_V_ce0 <= ap_const_logic_1;
        else 
            output_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_V_d0 <= input_V_q0;

    output_1_V_we0_assign_proc : process(trunc_ln203_1_reg_403, ap_CS_fsm_state5)
    begin
        if (((trunc_ln203_1_reg_403 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_1_V_we0 <= ap_const_logic_1;
        else 
            output_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_V_address0 <= zext_ln203_7_fu_351_p1(8 - 1 downto 0);

    output_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_2_V_ce0 <= ap_const_logic_1;
        else 
            output_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_V_d0 <= input_V_q0;

    output_2_V_we0_assign_proc : process(trunc_ln203_1_reg_403, ap_CS_fsm_state5)
    begin
        if (((trunc_ln203_1_reg_403 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_2_V_we0 <= ap_const_logic_1;
        else 
            output_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_V_address0 <= zext_ln203_7_fu_351_p1(8 - 1 downto 0);

    output_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_3_V_ce0 <= ap_const_logic_1;
        else 
            output_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_V_d0 <= input_V_q0;

    output_3_V_we0_assign_proc : process(trunc_ln203_1_reg_403, ap_CS_fsm_state5)
    begin
        if (((trunc_ln203_1_reg_403 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_3_V_we0 <= ap_const_logic_1;
        else 
            output_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_249_p3 <= (trunc_ln203_fu_245_p1 & ap_const_lv5_0);
    p_shl3_cast_fu_257_p3 <= (add_ln203_fu_240_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_324_p3 <= (trunc_ln203_2_fu_320_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_332_p3 <= (add_ln203_2_fu_315_p2 & ap_const_lv1_0);
        sext_ln203_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln203_fu_210_p2),8));

    sub_ln203_1_fu_265_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_249_p3) - unsigned(p_shl3_cast_fu_257_p3));
    sub_ln203_2_fu_340_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_324_p3) - unsigned(p_shl5_cast_fu_332_p3));
    sub_ln203_fu_210_p2 <= std_logic_vector(unsigned(zext_ln203_fu_194_p1) - unsigned(zext_ln203_1_fu_206_p1));
    tmp_2_fu_186_p3 <= (i_0_reg_141 & ap_const_lv3_0);
    tmp_3_fu_198_p3 <= (i_0_reg_141 & ap_const_lv1_0);
    tmp_4_fu_301_p4 <= k_0_reg_163(4 downto 2);
    trunc_ln203_1_fu_297_p1 <= k_0_reg_163(2 - 1 downto 0);
    trunc_ln203_2_fu_320_p1 <= add_ln203_2_fu_315_p2(6 - 1 downto 0);
    trunc_ln203_fu_245_p1 <= add_ln203_fu_240_p2(6 - 1 downto 0);
    zext_ln203_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_198_p3),7));
    zext_ln203_2_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_152),9));
    zext_ln203_3_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_152),8));
    zext_ln203_4_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_163),11));
    zext_ln203_5_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_287_p2),64));
    zext_ln203_6_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_301_p4),8));
    zext_ln203_7_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_3_reg_407),64));
    zext_ln203_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_186_p3),7));
end behav;
