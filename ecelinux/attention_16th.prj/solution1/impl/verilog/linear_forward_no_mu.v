// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_0_0_V_address0,
        input_0_0_0_V_ce0,
        input_0_0_0_V_q0,
        input_0_1_0_V_address0,
        input_0_1_0_V_ce0,
        input_0_1_0_V_q0,
        input_0_2_0_V_address0,
        input_0_2_0_V_ce0,
        input_0_2_0_V_q0,
        input_0_3_0_V_address0,
        input_0_3_0_V_ce0,
        input_0_3_0_V_q0,
        input_1_0_0_V_address0,
        input_1_0_0_V_ce0,
        input_1_0_0_V_q0,
        input_1_1_0_V_address0,
        input_1_1_0_V_ce0,
        input_1_1_0_V_q0,
        input_1_2_0_V_address0,
        input_1_2_0_V_ce0,
        input_1_2_0_V_q0,
        input_1_3_0_V_address0,
        input_1_3_0_V_ce0,
        input_1_3_0_V_q0,
        input_2_0_0_V_address0,
        input_2_0_0_V_ce0,
        input_2_0_0_V_q0,
        input_2_1_0_V_address0,
        input_2_1_0_V_ce0,
        input_2_1_0_V_q0,
        input_2_2_0_V_address0,
        input_2_2_0_V_ce0,
        input_2_2_0_V_q0,
        input_2_3_0_V_address0,
        input_2_3_0_V_ce0,
        input_2_3_0_V_q0,
        input_3_0_0_V_address0,
        input_3_0_0_V_ce0,
        input_3_0_0_V_q0,
        input_3_1_0_V_address0,
        input_3_1_0_V_ce0,
        input_3_1_0_V_q0,
        input_3_2_0_V_address0,
        input_3_2_0_V_ce0,
        input_3_2_0_V_q0,
        input_3_3_0_V_address0,
        input_3_3_0_V_ce0,
        input_3_3_0_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0,
        output_0_V_address1,
        output_0_V_ce1,
        output_0_V_we1,
        output_0_V_d1,
        scales_0_V_read,
        packed_weights_0_address0,
        packed_weights_0_ce0,
        packed_weights_0_q0,
        packed_weights_1_address0,
        packed_weights_1_ce0,
        packed_weights_1_q0,
        packed_weights_2_address0,
        packed_weights_2_ce0,
        packed_weights_2_q0,
        packed_weights_3_address0,
        packed_weights_3_ce0,
        packed_weights_3_q0,
        w_scale_V
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state83 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_0_0_0_V_address0;
output   input_0_0_0_V_ce0;
input  [7:0] input_0_0_0_V_q0;
output  [2:0] input_0_1_0_V_address0;
output   input_0_1_0_V_ce0;
input  [7:0] input_0_1_0_V_q0;
output  [2:0] input_0_2_0_V_address0;
output   input_0_2_0_V_ce0;
input  [7:0] input_0_2_0_V_q0;
output  [2:0] input_0_3_0_V_address0;
output   input_0_3_0_V_ce0;
input  [7:0] input_0_3_0_V_q0;
output  [2:0] input_1_0_0_V_address0;
output   input_1_0_0_V_ce0;
input  [7:0] input_1_0_0_V_q0;
output  [2:0] input_1_1_0_V_address0;
output   input_1_1_0_V_ce0;
input  [7:0] input_1_1_0_V_q0;
output  [2:0] input_1_2_0_V_address0;
output   input_1_2_0_V_ce0;
input  [7:0] input_1_2_0_V_q0;
output  [2:0] input_1_3_0_V_address0;
output   input_1_3_0_V_ce0;
input  [7:0] input_1_3_0_V_q0;
output  [2:0] input_2_0_0_V_address0;
output   input_2_0_0_V_ce0;
input  [7:0] input_2_0_0_V_q0;
output  [2:0] input_2_1_0_V_address0;
output   input_2_1_0_V_ce0;
input  [7:0] input_2_1_0_V_q0;
output  [2:0] input_2_2_0_V_address0;
output   input_2_2_0_V_ce0;
input  [7:0] input_2_2_0_V_q0;
output  [2:0] input_2_3_0_V_address0;
output   input_2_3_0_V_ce0;
input  [7:0] input_2_3_0_V_q0;
output  [2:0] input_3_0_0_V_address0;
output   input_3_0_0_V_ce0;
input  [7:0] input_3_0_0_V_q0;
output  [2:0] input_3_1_0_V_address0;
output   input_3_1_0_V_ce0;
input  [7:0] input_3_1_0_V_q0;
output  [2:0] input_3_2_0_V_address0;
output   input_3_2_0_V_ce0;
input  [7:0] input_3_2_0_V_q0;
output  [2:0] input_3_3_0_V_address0;
output   input_3_3_0_V_ce0;
input  [7:0] input_3_3_0_V_q0;
output  [6:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;
input  [39:0] output_0_V_q0;
output  [6:0] output_0_V_address1;
output   output_0_V_ce1;
output   output_0_V_we1;
output  [39:0] output_0_V_d1;
input  [39:0] scales_0_V_read;
output  [9:0] packed_weights_0_address0;
output   packed_weights_0_ce0;
input  [7:0] packed_weights_0_q0;
output  [9:0] packed_weights_1_address0;
output   packed_weights_1_ce0;
input  [7:0] packed_weights_1_q0;
output  [9:0] packed_weights_2_address0;
output   packed_weights_2_ce0;
input  [7:0] packed_weights_2_q0;
output  [9:0] packed_weights_3_address0;
output   packed_weights_3_ce0;
input  [7:0] packed_weights_3_q0;
input  [21:0] w_scale_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_0_0_V_ce0;
reg input_0_1_0_V_ce0;
reg input_0_2_0_V_ce0;
reg input_0_3_0_V_ce0;
reg input_1_0_0_V_ce0;
reg input_1_1_0_V_ce0;
reg input_1_2_0_V_ce0;
reg input_1_3_0_V_ce0;
reg input_2_0_0_V_ce0;
reg input_2_1_0_V_ce0;
reg input_2_2_0_V_ce0;
reg input_2_3_0_V_ce0;
reg input_3_0_0_V_ce0;
reg input_3_1_0_V_ce0;
reg input_3_2_0_V_ce0;
reg input_3_3_0_V_ce0;
reg[6:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg output_0_V_ce1;
reg output_0_V_we1;
reg packed_weights_0_ce0;
reg packed_weights_1_ce0;
reg packed_weights_2_ce0;
reg packed_weights_3_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_417;
reg   [6:0] j_0_0_reg_428;
reg   [2:0] ko_0_0_reg_440;
wire  signed [71:0] sext_ln120_fu_465_p1;
reg  signed [71:0] sext_ln120_reg_1761;
wire   [0:0] icmp_ln120_fu_469_p2;
reg   [0:0] icmp_ln120_reg_1766;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state20_pp0_stage0_iter6;
wire    ap_block_state23_pp0_stage0_iter7;
wire    ap_block_state26_pp0_stage0_iter8;
wire    ap_block_state29_pp0_stage0_iter9;
wire    ap_block_state32_pp0_stage0_iter10;
wire    ap_block_state35_pp0_stage0_iter11;
wire    ap_block_state38_pp0_stage0_iter12;
wire    ap_block_state41_pp0_stage0_iter13;
wire    ap_block_state44_pp0_stage0_iter14;
wire    ap_block_state47_pp0_stage0_iter15;
wire    ap_block_state50_pp0_stage0_iter16;
wire    ap_block_state53_pp0_stage0_iter17;
wire    ap_block_state56_pp0_stage0_iter18;
wire    ap_block_state59_pp0_stage0_iter19;
wire    ap_block_state62_pp0_stage0_iter20;
wire    ap_block_state65_pp0_stage0_iter21;
wire    ap_block_state68_pp0_stage0_iter22;
wire    ap_block_state71_pp0_stage0_iter23;
wire    ap_block_state74_pp0_stage0_iter24;
wire    ap_block_state77_pp0_stage0_iter25;
wire    ap_block_state80_pp0_stage0_iter26;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_1766_pp0_iter1_reg;
wire   [9:0] add_ln120_1_fu_475_p2;
reg   [9:0] add_ln120_1_reg_1770;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] add_ln120_fu_481_p2;
reg   [6:0] add_ln120_reg_1775;
wire   [0:0] icmp_ln121_fu_487_p2;
reg   [0:0] icmp_ln121_reg_1780;
wire   [2:0] select_ln124_fu_493_p3;
reg   [2:0] select_ln124_reg_1785;
wire   [6:0] select_ln124_1_fu_521_p3;
reg   [6:0] select_ln124_1_reg_1872;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_state15_pp0_stage1_iter4;
wire    ap_block_state18_pp0_stage1_iter5;
wire    ap_block_state21_pp0_stage1_iter6;
wire    ap_block_state24_pp0_stage1_iter7;
wire    ap_block_state27_pp0_stage1_iter8;
wire    ap_block_state30_pp0_stage1_iter9;
wire    ap_block_state33_pp0_stage1_iter10;
wire    ap_block_state36_pp0_stage1_iter11;
wire    ap_block_state39_pp0_stage1_iter12;
wire    ap_block_state42_pp0_stage1_iter13;
wire    ap_block_state45_pp0_stage1_iter14;
wire    ap_block_state48_pp0_stage1_iter15;
wire    ap_block_state51_pp0_stage1_iter16;
wire    ap_block_state54_pp0_stage1_iter17;
wire    ap_block_state57_pp0_stage1_iter18;
wire    ap_block_state60_pp0_stage1_iter19;
wire    ap_block_state63_pp0_stage1_iter20;
wire    ap_block_state66_pp0_stage1_iter21;
wire    ap_block_state69_pp0_stage1_iter22;
wire    ap_block_state72_pp0_stage1_iter23;
wire    ap_block_state75_pp0_stage1_iter24;
wire    ap_block_state78_pp0_stage1_iter25;
wire    ap_block_state81_pp0_stage1_iter26;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] input_0_0_0_V_loa_reg_1898;
reg   [7:0] input_0_1_0_V_loa_reg_1904;
reg   [7:0] input_0_2_0_V_loa_reg_1910;
reg   [7:0] input_0_3_0_V_loa_reg_1916;
reg   [7:0] input_1_0_0_V_loa_reg_1922;
reg   [7:0] input_1_1_0_V_loa_reg_1928;
reg   [7:0] input_1_2_0_V_loa_reg_1934;
reg   [7:0] input_1_3_0_V_loa_reg_1940;
reg   [7:0] input_2_0_0_V_loa_reg_1946;
reg   [7:0] input_2_1_0_V_loa_reg_1952;
reg   [7:0] input_2_2_0_V_loa_reg_1958;
reg   [7:0] input_2_3_0_V_loa_reg_1964;
reg   [7:0] input_3_0_0_V_loa_reg_1970;
reg   [7:0] input_3_1_0_V_loa_reg_1976;
reg   [7:0] input_3_2_0_V_loa_reg_1982;
reg   [7:0] input_3_3_0_V_loa_reg_1988;
reg   [6:0] output_0_V_addr_reg_1994;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_state16_pp0_stage2_iter4;
wire    ap_block_state19_pp0_stage2_iter5;
wire    ap_block_state22_pp0_stage2_iter6;
wire    ap_block_state25_pp0_stage2_iter7;
wire    ap_block_state28_pp0_stage2_iter8;
wire    ap_block_state31_pp0_stage2_iter9;
wire    ap_block_state34_pp0_stage2_iter10;
wire    ap_block_state37_pp0_stage2_iter11;
wire    ap_block_state40_pp0_stage2_iter12;
wire    ap_block_state43_pp0_stage2_iter13;
wire    ap_block_state46_pp0_stage2_iter14;
wire    ap_block_state49_pp0_stage2_iter15;
wire    ap_block_state52_pp0_stage2_iter16;
wire    ap_block_state55_pp0_stage2_iter17;
wire    ap_block_state58_pp0_stage2_iter18;
wire    ap_block_state61_pp0_stage2_iter19;
wire    ap_block_state64_pp0_stage2_iter20;
wire    ap_block_state67_pp0_stage2_iter21;
wire    ap_block_state70_pp0_stage2_iter22;
wire    ap_block_state73_pp0_stage2_iter23;
wire    ap_block_state76_pp0_stage2_iter24;
wire    ap_block_state79_pp0_stage2_iter25;
wire    ap_block_state82_pp0_stage2_iter26;
wire    ap_block_pp0_stage2_11001;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter1_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter2_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter3_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter4_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter5_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter6_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter7_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter8_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter9_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter10_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter11_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter12_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter13_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter14_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter15_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter16_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter17_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter18_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter19_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter20_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter21_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter22_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter23_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter24_reg;
reg   [6:0] output_0_V_addr_reg_1994_pp0_iter25_reg;
wire   [7:0] select_ln129_fu_617_p3;
reg   [7:0] select_ln129_reg_2000;
reg   [1:0] trunc_ln_reg_2005;
wire   [1:0] trunc_ln126_2_fu_767_p1;
reg   [1:0] trunc_ln126_2_reg_2011;
reg   [1:0] trunc_ln126_8_reg_2017;
reg   [1:0] trunc_ln126_9_reg_2023;
reg   [1:0] trunc_ln126_s_reg_2029;
wire   [7:0] sub_ln701_13_fu_1185_p2;
reg   [7:0] sub_ln701_13_reg_2035;
wire   [24:0] add_ln703_27_fu_1322_p2;
reg   [24:0] add_ln703_27_reg_2040;
wire   [24:0] add_ln703_33_fu_1328_p2;
reg   [24:0] add_ln703_33_reg_2045;
wire   [24:0] add_ln703_34_fu_1334_p2;
reg   [24:0] add_ln703_34_reg_2050;
wire   [24:0] add_ln703_36_fu_1340_p2;
reg   [24:0] add_ln703_36_reg_2055;
wire   [24:0] add_ln703_37_fu_1346_p2;
reg   [24:0] add_ln703_37_reg_2060;
wire   [2:0] add_ln121_fu_1352_p2;
reg   [2:0] add_ln121_reg_2065;
wire   [39:0] add_ln703_28_fu_1641_p2;
reg   [39:0] add_ln703_28_reg_2071;
wire   [25:0] add_ln703_31_fu_1667_p2;
reg   [25:0] add_ln703_31_reg_2076;
wire   [27:0] add_ln703_40_fu_1715_p2;
reg   [27:0] add_ln703_40_reg_2081;
wire   [39:0] add_ln703_41_fu_1732_p2;
reg   [39:0] add_ln703_41_reg_2086;
wire   [0:0] icmp_ln121_1_fu_1739_p2;
reg   [0:0] icmp_ln121_1_reg_2091;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter2_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter3_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter4_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter5_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter6_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter7_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter8_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter9_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter10_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter11_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter12_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter13_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter14_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter15_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter16_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter17_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter18_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter19_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter20_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter21_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter22_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter23_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter24_reg;
reg   [0:0] icmp_ln121_1_reg_2091_pp0_iter25_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_421_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_j_0_0_phi_fu_432_p4;
reg   [2:0] ap_phi_mux_ko_0_0_phi_fu_444_p4;
wire   [63:0] zext_ln124_1_fu_501_p1;
wire  signed [63:0] sext_ln124_fu_565_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln124_fu_573_p1;
wire    ap_block_pp0_stage2;
wire   [21:0] mul_ln1148_fu_459_p0;
wire  signed [39:0] mul_ln1148_fu_459_p1;
wire   [60:0] mul_ln1148_fu_459_p2;
wire   [9:0] tmp_56_fu_531_p3;
wire   [7:0] tmp_57_fu_542_p3;
wire   [10:0] zext_ln124_2_fu_538_p1;
wire   [10:0] zext_ln124_3_fu_549_p1;
wire   [10:0] zext_ln121_fu_527_p1;
wire   [10:0] sub_ln124_fu_553_p2;
wire   [10:0] add_ln124_fu_559_p2;
wire   [1:0] trunc_ln126_fu_577_p1;
wire   [0:0] icmp_ln128_fu_581_p2;
wire   [0:0] icmp_ln129_fu_587_p2;
wire   [0:0] xor_ln128_fu_598_p2;
wire   [0:0] and_ln129_fu_604_p2;
wire   [7:0] sub_ln701_fu_593_p2;
wire   [7:0] select_ln128_fu_610_p3;
wire   [1:0] trunc_ln126_3_fu_625_p4;
wire   [0:0] icmp_ln128_1_fu_635_p2;
wire   [0:0] icmp_ln129_1_fu_641_p2;
wire   [0:0] xor_ln128_1_fu_652_p2;
wire   [0:0] and_ln129_1_fu_658_p2;
wire   [7:0] sub_ln701_1_fu_647_p2;
wire   [7:0] select_ln128_1_fu_664_p3;
wire   [7:0] select_ln129_1_fu_671_p3;
wire   [23:0] shl_ln703_1_fu_679_p3;
wire   [1:0] trunc_ln126_4_fu_691_p4;
wire   [0:0] icmp_ln128_2_fu_701_p2;
wire   [0:0] icmp_ln129_2_fu_707_p2;
wire   [0:0] xor_ln128_2_fu_718_p2;
wire   [0:0] and_ln129_2_fu_724_p2;
wire   [7:0] sub_ln701_2_fu_713_p2;
wire   [7:0] select_ln128_2_fu_730_p3;
wire   [7:0] select_ln129_2_fu_737_p3;
wire   [23:0] shl_ln703_2_fu_745_p3;
wire   [1:0] trunc_ln128_1_fu_791_p4;
wire   [0:0] icmp_ln128_7_fu_801_p2;
wire   [0:0] icmp_ln129_7_fu_807_p2;
wire   [0:0] xor_ln128_7_fu_818_p2;
wire   [0:0] and_ln129_7_fu_824_p2;
wire   [7:0] sub_ln701_7_fu_813_p2;
wire   [7:0] select_ln128_7_fu_830_p3;
wire   [7:0] select_ln129_7_fu_837_p3;
wire   [23:0] shl_ln703_7_fu_845_p3;
wire   [1:0] trunc_ln126_6_fu_857_p1;
wire   [0:0] icmp_ln128_8_fu_861_p2;
wire   [0:0] icmp_ln129_8_fu_867_p2;
wire   [0:0] xor_ln128_8_fu_878_p2;
wire   [0:0] and_ln129_8_fu_884_p2;
wire   [7:0] sub_ln701_8_fu_873_p2;
wire   [7:0] select_ln128_8_fu_890_p3;
wire   [7:0] select_ln129_8_fu_897_p3;
wire   [23:0] shl_ln703_8_fu_905_p3;
wire   [1:0] trunc_ln126_1_fu_917_p4;
wire   [0:0] icmp_ln128_9_fu_927_p2;
wire   [0:0] icmp_ln129_9_fu_933_p2;
wire   [0:0] xor_ln128_9_fu_944_p2;
wire   [0:0] and_ln129_9_fu_950_p2;
wire   [7:0] sub_ln701_9_fu_939_p2;
wire   [7:0] select_ln128_9_fu_956_p3;
wire   [7:0] select_ln129_9_fu_963_p3;
wire   [23:0] shl_ln703_9_fu_971_p3;
wire   [1:0] trunc_ln126_5_fu_983_p4;
wire   [0:0] icmp_ln128_10_fu_993_p2;
wire   [0:0] icmp_ln129_10_fu_999_p2;
wire   [0:0] xor_ln128_10_fu_1010_p2;
wire   [0:0] and_ln129_10_fu_1016_p2;
wire   [7:0] sub_ln701_10_fu_1005_p2;
wire   [7:0] select_ln128_10_fu_1022_p3;
wire   [7:0] select_ln129_10_fu_1029_p3;
wire   [23:0] shl_ln703_s_fu_1037_p3;
wire   [1:0] trunc_ln128_2_fu_1049_p4;
wire   [0:0] icmp_ln128_11_fu_1059_p2;
wire   [0:0] icmp_ln129_11_fu_1065_p2;
wire   [0:0] xor_ln128_11_fu_1076_p2;
wire   [0:0] and_ln129_11_fu_1082_p2;
wire   [7:0] sub_ln701_11_fu_1071_p2;
wire   [7:0] select_ln128_11_fu_1088_p3;
wire   [7:0] select_ln129_11_fu_1095_p3;
wire   [23:0] shl_ln703_10_fu_1103_p3;
wire   [1:0] trunc_ln126_7_fu_1115_p1;
wire   [0:0] icmp_ln128_12_fu_1119_p2;
wire   [0:0] icmp_ln129_12_fu_1125_p2;
wire   [0:0] xor_ln128_12_fu_1136_p2;
wire   [0:0] and_ln129_12_fu_1142_p2;
wire   [7:0] sub_ln701_12_fu_1131_p2;
wire   [7:0] select_ln128_12_fu_1148_p3;
wire   [7:0] select_ln129_12_fu_1155_p3;
wire   [23:0] shl_ln703_11_fu_1163_p3;
wire   [1:0] trunc_ln126_10_fu_1190_p4;
wire   [0:0] icmp_ln128_14_fu_1200_p2;
wire   [0:0] icmp_ln129_14_fu_1206_p2;
wire   [0:0] xor_ln128_14_fu_1217_p2;
wire   [0:0] and_ln129_14_fu_1223_p2;
wire   [7:0] sub_ln701_14_fu_1212_p2;
wire   [7:0] select_ln128_14_fu_1229_p3;
wire   [7:0] select_ln129_14_fu_1236_p3;
wire   [23:0] shl_ln703_13_fu_1244_p3;
wire   [1:0] trunc_ln128_3_fu_1256_p4;
wire   [0:0] icmp_ln128_15_fu_1266_p2;
wire   [0:0] icmp_ln129_15_fu_1272_p2;
wire   [0:0] xor_ln128_15_fu_1283_p2;
wire   [0:0] and_ln129_15_fu_1289_p2;
wire   [7:0] sub_ln701_15_fu_1278_p2;
wire   [7:0] select_ln128_15_fu_1295_p3;
wire   [7:0] select_ln129_15_fu_1302_p3;
wire   [23:0] shl_ln703_14_fu_1310_p3;
wire  signed [24:0] sext_ln703_1_fu_687_p1;
wire  signed [24:0] sext_ln703_2_fu_753_p1;
wire  signed [24:0] sext_ln703_7_fu_853_p1;
wire  signed [24:0] sext_ln703_8_fu_913_p1;
wire  signed [24:0] sext_ln703_9_fu_979_p1;
wire  signed [24:0] sext_ln703_10_fu_1045_p1;
wire  signed [24:0] sext_ln703_11_fu_1111_p1;
wire  signed [24:0] sext_ln703_12_fu_1171_p1;
wire  signed [24:0] sext_ln703_14_fu_1252_p1;
wire  signed [24:0] sext_ln703_15_fu_1318_p1;
wire   [23:0] shl_ln_fu_1357_p3;
wire   [0:0] icmp_ln128_3_fu_1368_p2;
wire   [0:0] icmp_ln129_3_fu_1373_p2;
wire   [0:0] xor_ln128_3_fu_1383_p2;
wire   [0:0] and_ln129_3_fu_1389_p2;
wire   [7:0] sub_ln701_3_fu_1378_p2;
wire   [7:0] select_ln128_3_fu_1395_p3;
wire   [7:0] select_ln129_3_fu_1402_p3;
wire   [23:0] shl_ln703_3_fu_1410_p3;
wire   [0:0] icmp_ln128_4_fu_1422_p2;
wire   [0:0] icmp_ln129_4_fu_1427_p2;
wire   [0:0] xor_ln128_4_fu_1437_p2;
wire   [0:0] and_ln129_4_fu_1443_p2;
wire   [7:0] sub_ln701_4_fu_1432_p2;
wire   [7:0] select_ln128_4_fu_1449_p3;
wire   [7:0] select_ln129_4_fu_1456_p3;
wire   [23:0] shl_ln703_4_fu_1464_p3;
wire   [0:0] icmp_ln128_5_fu_1476_p2;
wire   [0:0] icmp_ln129_5_fu_1481_p2;
wire   [0:0] xor_ln128_5_fu_1491_p2;
wire   [0:0] and_ln129_5_fu_1497_p2;
wire   [7:0] sub_ln701_5_fu_1486_p2;
wire   [7:0] select_ln128_5_fu_1503_p3;
wire   [7:0] select_ln129_5_fu_1510_p3;
wire   [23:0] shl_ln703_5_fu_1518_p3;
wire   [0:0] icmp_ln128_6_fu_1530_p2;
wire   [0:0] icmp_ln129_6_fu_1535_p2;
wire   [0:0] xor_ln128_6_fu_1545_p2;
wire   [0:0] and_ln129_6_fu_1551_p2;
wire   [7:0] sub_ln701_6_fu_1540_p2;
wire   [7:0] select_ln128_6_fu_1557_p3;
wire   [7:0] select_ln129_6_fu_1564_p3;
wire   [23:0] shl_ln703_6_fu_1572_p3;
wire   [0:0] icmp_ln128_13_fu_1584_p2;
wire   [0:0] icmp_ln129_13_fu_1589_p2;
wire   [0:0] xor_ln128_13_fu_1594_p2;
wire   [0:0] and_ln129_13_fu_1600_p2;
wire   [7:0] select_ln128_13_fu_1606_p3;
wire   [7:0] select_ln129_13_fu_1613_p3;
wire   [23:0] shl_ln703_12_fu_1620_p3;
wire  signed [39:0] sext_ln703_fu_1364_p1;
wire  signed [39:0] sext_ln703_16_fu_1638_p1;
wire   [39:0] add_ln703_fu_1632_p2;
wire  signed [24:0] sext_ln703_3_fu_1418_p1;
wire  signed [24:0] sext_ln703_4_fu_1472_p1;
wire   [24:0] add_ln703_29_fu_1647_p2;
wire  signed [24:0] sext_ln703_5_fu_1526_p1;
wire  signed [24:0] sext_ln703_6_fu_1580_p1;
wire   [24:0] add_ln703_30_fu_1657_p2;
wire  signed [25:0] sext_ln703_18_fu_1663_p1;
wire  signed [25:0] sext_ln703_17_fu_1653_p1;
wire  signed [25:0] sext_ln703_21_fu_1676_p1;
wire  signed [25:0] sext_ln703_20_fu_1673_p1;
wire   [25:0] add_ln703_35_fu_1679_p2;
wire  signed [25:0] sext_ln703_24_fu_1692_p1;
wire  signed [25:0] sext_ln703_13_fu_1628_p1;
wire   [25:0] add_ln703_38_fu_1695_p2;
wire  signed [26:0] sext_ln703_25_fu_1701_p1;
wire  signed [26:0] sext_ln703_23_fu_1689_p1;
wire   [26:0] add_ln703_39_fu_1705_p2;
wire  signed [27:0] sext_ln703_26_fu_1711_p1;
wire  signed [27:0] sext_ln703_22_fu_1685_p1;
wire  signed [39:0] sext_ln703_19_fu_1721_p1;
wire  signed [39:0] sext_ln703_27_fu_1729_p1;
wire   [39:0] add_ln703_32_fu_1724_p2;
wire   [71:0] grp_fu_1751_p0;
wire  signed [60:0] grp_fu_1751_p1;
wire   [39:0] grp_fu_1751_p2;
wire    ap_CS_fsm_state83;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] mul_ln1148_fu_459_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
end

dut_sdiv_72ns_61sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 76 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 61 ),
    .dout_WIDTH( 40 ))
dut_sdiv_72ns_61sfYi_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1751_p0),
    .din1(grp_fu_1751_p1),
    .ce(1'b1),
    .dout(grp_fu_1751_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        indvar_flatten_reg_417 <= add_ln120_1_reg_1770;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_417 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        j_0_0_reg_428 <= select_ln124_1_reg_1872;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_0_reg_428 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        ko_0_0_reg_440 <= add_ln121_reg_2065;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ko_0_0_reg_440 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln120_1_reg_1770 <= add_ln120_1_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_469_p2 == 1'd0))) begin
        add_ln120_reg_1775 <= add_ln120_fu_481_p2;
        icmp_ln121_reg_1780 <= icmp_ln121_fu_487_p2;
        select_ln124_reg_1785 <= select_ln124_fu_493_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_reg_1766 == 1'd0))) begin
        add_ln121_reg_2065 <= add_ln121_fu_1352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln120_reg_1766 == 1'd0))) begin
        add_ln703_27_reg_2040[24 : 16] <= add_ln703_27_fu_1322_p2[24 : 16];
        add_ln703_33_reg_2045[24 : 16] <= add_ln703_33_fu_1328_p2[24 : 16];
        add_ln703_34_reg_2050[24 : 16] <= add_ln703_34_fu_1334_p2[24 : 16];
        add_ln703_36_reg_2055[24 : 16] <= add_ln703_36_fu_1340_p2[24 : 16];
        add_ln703_37_reg_2060[24 : 16] <= add_ln703_37_fu_1346_p2[24 : 16];
        output_0_V_addr_reg_1994 <= zext_ln124_fu_573_p1;
        select_ln129_reg_2000 <= select_ln129_fu_617_p3;
        sub_ln701_13_reg_2035 <= sub_ln701_13_fu_1185_p2;
        trunc_ln126_2_reg_2011 <= trunc_ln126_2_fu_767_p1;
        trunc_ln126_8_reg_2017 <= {{packed_weights_1_q0[3:2]}};
        trunc_ln126_9_reg_2023 <= {{packed_weights_1_q0[5:4]}};
        trunc_ln126_s_reg_2029 <= {{packed_weights_3_q0[3:2]}};
        trunc_ln_reg_2005 <= {{packed_weights_0_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        add_ln703_28_reg_2071 <= add_ln703_28_fu_1641_p2;
        add_ln703_31_reg_2076[25 : 16] <= add_ln703_31_fu_1667_p2[25 : 16];
        add_ln703_40_reg_2081[27 : 16] <= add_ln703_40_fu_1715_p2[27 : 16];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln120_reg_1766_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln703_41_reg_2086 <= add_ln703_41_fu_1732_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln120_reg_1766 <= icmp_ln120_fu_469_p2;
        icmp_ln120_reg_1766_pp0_iter1_reg <= icmp_ln120_reg_1766;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln120_reg_1766_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln121_1_reg_2091 <= icmp_ln121_1_fu_1739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln121_1_reg_2091_pp0_iter10_reg <= icmp_ln121_1_reg_2091_pp0_iter9_reg;
        icmp_ln121_1_reg_2091_pp0_iter11_reg <= icmp_ln121_1_reg_2091_pp0_iter10_reg;
        icmp_ln121_1_reg_2091_pp0_iter12_reg <= icmp_ln121_1_reg_2091_pp0_iter11_reg;
        icmp_ln121_1_reg_2091_pp0_iter13_reg <= icmp_ln121_1_reg_2091_pp0_iter12_reg;
        icmp_ln121_1_reg_2091_pp0_iter14_reg <= icmp_ln121_1_reg_2091_pp0_iter13_reg;
        icmp_ln121_1_reg_2091_pp0_iter15_reg <= icmp_ln121_1_reg_2091_pp0_iter14_reg;
        icmp_ln121_1_reg_2091_pp0_iter16_reg <= icmp_ln121_1_reg_2091_pp0_iter15_reg;
        icmp_ln121_1_reg_2091_pp0_iter17_reg <= icmp_ln121_1_reg_2091_pp0_iter16_reg;
        icmp_ln121_1_reg_2091_pp0_iter18_reg <= icmp_ln121_1_reg_2091_pp0_iter17_reg;
        icmp_ln121_1_reg_2091_pp0_iter19_reg <= icmp_ln121_1_reg_2091_pp0_iter18_reg;
        icmp_ln121_1_reg_2091_pp0_iter20_reg <= icmp_ln121_1_reg_2091_pp0_iter19_reg;
        icmp_ln121_1_reg_2091_pp0_iter21_reg <= icmp_ln121_1_reg_2091_pp0_iter20_reg;
        icmp_ln121_1_reg_2091_pp0_iter22_reg <= icmp_ln121_1_reg_2091_pp0_iter21_reg;
        icmp_ln121_1_reg_2091_pp0_iter23_reg <= icmp_ln121_1_reg_2091_pp0_iter22_reg;
        icmp_ln121_1_reg_2091_pp0_iter24_reg <= icmp_ln121_1_reg_2091_pp0_iter23_reg;
        icmp_ln121_1_reg_2091_pp0_iter25_reg <= icmp_ln121_1_reg_2091_pp0_iter24_reg;
        icmp_ln121_1_reg_2091_pp0_iter2_reg <= icmp_ln121_1_reg_2091;
        icmp_ln121_1_reg_2091_pp0_iter3_reg <= icmp_ln121_1_reg_2091_pp0_iter2_reg;
        icmp_ln121_1_reg_2091_pp0_iter4_reg <= icmp_ln121_1_reg_2091_pp0_iter3_reg;
        icmp_ln121_1_reg_2091_pp0_iter5_reg <= icmp_ln121_1_reg_2091_pp0_iter4_reg;
        icmp_ln121_1_reg_2091_pp0_iter6_reg <= icmp_ln121_1_reg_2091_pp0_iter5_reg;
        icmp_ln121_1_reg_2091_pp0_iter7_reg <= icmp_ln121_1_reg_2091_pp0_iter6_reg;
        icmp_ln121_1_reg_2091_pp0_iter8_reg <= icmp_ln121_1_reg_2091_pp0_iter7_reg;
        icmp_ln121_1_reg_2091_pp0_iter9_reg <= icmp_ln121_1_reg_2091_pp0_iter8_reg;
        output_0_V_addr_reg_1994_pp0_iter10_reg <= output_0_V_addr_reg_1994_pp0_iter9_reg;
        output_0_V_addr_reg_1994_pp0_iter11_reg <= output_0_V_addr_reg_1994_pp0_iter10_reg;
        output_0_V_addr_reg_1994_pp0_iter12_reg <= output_0_V_addr_reg_1994_pp0_iter11_reg;
        output_0_V_addr_reg_1994_pp0_iter13_reg <= output_0_V_addr_reg_1994_pp0_iter12_reg;
        output_0_V_addr_reg_1994_pp0_iter14_reg <= output_0_V_addr_reg_1994_pp0_iter13_reg;
        output_0_V_addr_reg_1994_pp0_iter15_reg <= output_0_V_addr_reg_1994_pp0_iter14_reg;
        output_0_V_addr_reg_1994_pp0_iter16_reg <= output_0_V_addr_reg_1994_pp0_iter15_reg;
        output_0_V_addr_reg_1994_pp0_iter17_reg <= output_0_V_addr_reg_1994_pp0_iter16_reg;
        output_0_V_addr_reg_1994_pp0_iter18_reg <= output_0_V_addr_reg_1994_pp0_iter17_reg;
        output_0_V_addr_reg_1994_pp0_iter19_reg <= output_0_V_addr_reg_1994_pp0_iter18_reg;
        output_0_V_addr_reg_1994_pp0_iter1_reg <= output_0_V_addr_reg_1994;
        output_0_V_addr_reg_1994_pp0_iter20_reg <= output_0_V_addr_reg_1994_pp0_iter19_reg;
        output_0_V_addr_reg_1994_pp0_iter21_reg <= output_0_V_addr_reg_1994_pp0_iter20_reg;
        output_0_V_addr_reg_1994_pp0_iter22_reg <= output_0_V_addr_reg_1994_pp0_iter21_reg;
        output_0_V_addr_reg_1994_pp0_iter23_reg <= output_0_V_addr_reg_1994_pp0_iter22_reg;
        output_0_V_addr_reg_1994_pp0_iter24_reg <= output_0_V_addr_reg_1994_pp0_iter23_reg;
        output_0_V_addr_reg_1994_pp0_iter25_reg <= output_0_V_addr_reg_1994_pp0_iter24_reg;
        output_0_V_addr_reg_1994_pp0_iter2_reg <= output_0_V_addr_reg_1994_pp0_iter1_reg;
        output_0_V_addr_reg_1994_pp0_iter3_reg <= output_0_V_addr_reg_1994_pp0_iter2_reg;
        output_0_V_addr_reg_1994_pp0_iter4_reg <= output_0_V_addr_reg_1994_pp0_iter3_reg;
        output_0_V_addr_reg_1994_pp0_iter5_reg <= output_0_V_addr_reg_1994_pp0_iter4_reg;
        output_0_V_addr_reg_1994_pp0_iter6_reg <= output_0_V_addr_reg_1994_pp0_iter5_reg;
        output_0_V_addr_reg_1994_pp0_iter7_reg <= output_0_V_addr_reg_1994_pp0_iter6_reg;
        output_0_V_addr_reg_1994_pp0_iter8_reg <= output_0_V_addr_reg_1994_pp0_iter7_reg;
        output_0_V_addr_reg_1994_pp0_iter9_reg <= output_0_V_addr_reg_1994_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_reg_1766 == 1'd0))) begin
        input_0_0_0_V_loa_reg_1898 <= input_0_0_0_V_q0;
        input_0_1_0_V_loa_reg_1904 <= input_0_1_0_V_q0;
        input_0_2_0_V_loa_reg_1910 <= input_0_2_0_V_q0;
        input_0_3_0_V_loa_reg_1916 <= input_0_3_0_V_q0;
        input_1_0_0_V_loa_reg_1922 <= input_1_0_0_V_q0;
        input_1_1_0_V_loa_reg_1928 <= input_1_1_0_V_q0;
        input_1_2_0_V_loa_reg_1934 <= input_1_2_0_V_q0;
        input_1_3_0_V_loa_reg_1940 <= input_1_3_0_V_q0;
        input_2_0_0_V_loa_reg_1946 <= input_2_0_0_V_q0;
        input_2_1_0_V_loa_reg_1952 <= input_2_1_0_V_q0;
        input_2_2_0_V_loa_reg_1958 <= input_2_2_0_V_q0;
        input_2_3_0_V_loa_reg_1964 <= input_2_3_0_V_q0;
        input_3_0_0_V_loa_reg_1970 <= input_3_0_0_V_q0;
        input_3_1_0_V_loa_reg_1976 <= input_3_1_0_V_q0;
        input_3_2_0_V_loa_reg_1982 <= input_3_2_0_V_q0;
        input_3_3_0_V_loa_reg_1988 <= input_3_3_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_reg_1766 == 1'd0))) begin
        select_ln124_1_reg_1872 <= select_ln124_1_fu_521_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_ln120_reg_1761 <= sext_ln120_fu_465_p1;
    end
end

always @ (*) begin
    if ((icmp_ln120_fu_469_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_421_p4 = add_ln120_1_reg_1770;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_421_p4 = indvar_flatten_reg_417;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        ap_phi_mux_j_0_0_phi_fu_432_p4 = select_ln124_1_reg_1872;
    end else begin
        ap_phi_mux_j_0_0_phi_fu_432_p4 = j_0_0_reg_428;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_1766 == 1'd0))) begin
        ap_phi_mux_ko_0_0_phi_fu_444_p4 = add_ln121_reg_2065;
    end else begin
        ap_phi_mux_ko_0_0_phi_fu_444_p4 = ko_0_0_reg_440;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_0_0_V_ce0 = 1'b1;
    end else begin
        input_0_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_1_0_V_ce0 = 1'b1;
    end else begin
        input_0_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_2_0_V_ce0 = 1'b1;
    end else begin
        input_0_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_3_0_V_ce0 = 1'b1;
    end else begin
        input_0_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_0_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_2_0_V_ce0 = 1'b1;
    end else begin
        input_1_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_3_0_V_ce0 = 1'b1;
    end else begin
        input_1_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_0_0_V_ce0 = 1'b1;
    end else begin
        input_2_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_1_0_V_ce0 = 1'b1;
    end else begin
        input_2_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_2_0_V_ce0 = 1'b1;
    end else begin
        input_2_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_3_0_V_ce0 = 1'b1;
    end else begin
        input_2_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_0_0_V_ce0 = 1'b1;
    end else begin
        input_3_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_1_0_V_ce0 = 1'b1;
    end else begin
        input_3_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_2_0_V_ce0 = 1'b1;
    end else begin
        input_3_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_3_0_V_ce0 = 1'b1;
    end else begin
        input_3_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_V_address0 = output_0_V_addr_reg_1994;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_0_V_address0 = zext_ln124_fu_573_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        output_0_V_ce1 = 1'b1;
    end else begin
        output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln120_reg_1766_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_1_reg_2091_pp0_iter25_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        output_0_V_we1 = 1'b1;
    end else begin
        output_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_0_ce0 = 1'b1;
    end else begin
        packed_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_1_ce0 = 1'b1;
    end else begin
        packed_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_2_ce0 = 1'b1;
    end else begin
        packed_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        packed_weights_3_ce0 = 1'b1;
    end else begin
        packed_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_fu_469_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_1_fu_475_p2 = (ap_phi_mux_indvar_flatten_phi_fu_421_p4 + 10'd1);

assign add_ln120_fu_481_p2 = (7'd1 + ap_phi_mux_j_0_0_phi_fu_432_p4);

assign add_ln121_fu_1352_p2 = (3'd1 + select_ln124_reg_1785);

assign add_ln124_fu_559_p2 = (zext_ln121_fu_527_p1 + sub_ln124_fu_553_p2);

assign add_ln703_27_fu_1322_p2 = ($signed(sext_ln703_1_fu_687_p1) + $signed(sext_ln703_2_fu_753_p1));

assign add_ln703_28_fu_1641_p2 = ($signed(sext_ln703_16_fu_1638_p1) + $signed(add_ln703_fu_1632_p2));

assign add_ln703_29_fu_1647_p2 = ($signed(sext_ln703_3_fu_1418_p1) + $signed(sext_ln703_4_fu_1472_p1));

assign add_ln703_30_fu_1657_p2 = ($signed(sext_ln703_5_fu_1526_p1) + $signed(sext_ln703_6_fu_1580_p1));

assign add_ln703_31_fu_1667_p2 = ($signed(sext_ln703_18_fu_1663_p1) + $signed(sext_ln703_17_fu_1653_p1));

assign add_ln703_32_fu_1724_p2 = ($signed(sext_ln703_19_fu_1721_p1) + $signed(add_ln703_28_reg_2071));

assign add_ln703_33_fu_1328_p2 = ($signed(sext_ln703_7_fu_853_p1) + $signed(sext_ln703_8_fu_913_p1));

assign add_ln703_34_fu_1334_p2 = ($signed(sext_ln703_9_fu_979_p1) + $signed(sext_ln703_10_fu_1045_p1));

assign add_ln703_35_fu_1679_p2 = ($signed(sext_ln703_21_fu_1676_p1) + $signed(sext_ln703_20_fu_1673_p1));

assign add_ln703_36_fu_1340_p2 = ($signed(sext_ln703_11_fu_1111_p1) + $signed(sext_ln703_12_fu_1171_p1));

assign add_ln703_37_fu_1346_p2 = ($signed(sext_ln703_14_fu_1252_p1) + $signed(sext_ln703_15_fu_1318_p1));

assign add_ln703_38_fu_1695_p2 = ($signed(sext_ln703_24_fu_1692_p1) + $signed(sext_ln703_13_fu_1628_p1));

assign add_ln703_39_fu_1705_p2 = ($signed(sext_ln703_25_fu_1701_p1) + $signed(sext_ln703_23_fu_1689_p1));

assign add_ln703_40_fu_1715_p2 = ($signed(sext_ln703_26_fu_1711_p1) + $signed(sext_ln703_22_fu_1685_p1));

assign add_ln703_41_fu_1732_p2 = ($signed(sext_ln703_27_fu_1729_p1) + $signed(add_ln703_32_fu_1724_p2));

assign add_ln703_fu_1632_p2 = ($signed(output_0_V_q0) + $signed(sext_ln703_fu_1364_p1));

assign and_ln129_10_fu_1016_p2 = (xor_ln128_10_fu_1010_p2 & icmp_ln129_10_fu_999_p2);

assign and_ln129_11_fu_1082_p2 = (xor_ln128_11_fu_1076_p2 & icmp_ln129_11_fu_1065_p2);

assign and_ln129_12_fu_1142_p2 = (xor_ln128_12_fu_1136_p2 & icmp_ln129_12_fu_1125_p2);

assign and_ln129_13_fu_1600_p2 = (xor_ln128_13_fu_1594_p2 & icmp_ln129_13_fu_1589_p2);

assign and_ln129_14_fu_1223_p2 = (xor_ln128_14_fu_1217_p2 & icmp_ln129_14_fu_1206_p2);

assign and_ln129_15_fu_1289_p2 = (xor_ln128_15_fu_1283_p2 & icmp_ln129_15_fu_1272_p2);

assign and_ln129_1_fu_658_p2 = (xor_ln128_1_fu_652_p2 & icmp_ln129_1_fu_641_p2);

assign and_ln129_2_fu_724_p2 = (xor_ln128_2_fu_718_p2 & icmp_ln129_2_fu_707_p2);

assign and_ln129_3_fu_1389_p2 = (xor_ln128_3_fu_1383_p2 & icmp_ln129_3_fu_1373_p2);

assign and_ln129_4_fu_1443_p2 = (xor_ln128_4_fu_1437_p2 & icmp_ln129_4_fu_1427_p2);

assign and_ln129_5_fu_1497_p2 = (xor_ln128_5_fu_1491_p2 & icmp_ln129_5_fu_1481_p2);

assign and_ln129_6_fu_1551_p2 = (xor_ln128_6_fu_1545_p2 & icmp_ln129_6_fu_1535_p2);

assign and_ln129_7_fu_824_p2 = (xor_ln128_7_fu_818_p2 & icmp_ln129_7_fu_807_p2);

assign and_ln129_8_fu_884_p2 = (xor_ln128_8_fu_878_p2 & icmp_ln129_8_fu_867_p2);

assign and_ln129_9_fu_950_p2 = (xor_ln128_9_fu_944_p2 & icmp_ln129_9_fu_933_p2);

assign and_ln129_fu_604_p2 = (xor_ln128_fu_598_p2 & icmp_ln129_fu_587_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage2_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage2_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage2_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage2_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage2_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage2_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage2_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage2_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage2_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage2_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage1_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage2_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage2_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage2_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_1751_p0 = {{add_ln703_41_reg_2086}, {32'd0}};

assign grp_fu_1751_p1 = sext_ln120_reg_1761;

assign icmp_ln120_fu_469_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_421_p4 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln121_1_fu_1739_p2 = ((add_ln121_reg_2065 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_487_p2 = ((ap_phi_mux_ko_0_0_phi_fu_444_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln128_10_fu_993_p2 = ((trunc_ln126_5_fu_983_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_11_fu_1059_p2 = ((trunc_ln128_2_fu_1049_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_12_fu_1119_p2 = ((trunc_ln126_7_fu_1115_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_13_fu_1584_p2 = ((trunc_ln126_s_reg_2029 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_14_fu_1200_p2 = ((trunc_ln126_10_fu_1190_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_15_fu_1266_p2 = ((trunc_ln128_3_fu_1256_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_1_fu_635_p2 = ((trunc_ln126_3_fu_625_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_2_fu_701_p2 = ((trunc_ln126_4_fu_691_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_3_fu_1368_p2 = ((trunc_ln_reg_2005 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_4_fu_1422_p2 = ((trunc_ln126_2_reg_2011 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_5_fu_1476_p2 = ((trunc_ln126_8_reg_2017 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_6_fu_1530_p2 = ((trunc_ln126_9_reg_2023 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_7_fu_801_p2 = ((trunc_ln128_1_fu_791_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_8_fu_861_p2 = ((trunc_ln126_6_fu_857_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_9_fu_927_p2 = ((trunc_ln126_1_fu_917_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_581_p2 = ((trunc_ln126_fu_577_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln129_10_fu_999_p2 = ((trunc_ln126_5_fu_983_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_11_fu_1065_p2 = ((trunc_ln128_2_fu_1049_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_12_fu_1125_p2 = ((trunc_ln126_7_fu_1115_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_13_fu_1589_p2 = ((trunc_ln126_s_reg_2029 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_14_fu_1206_p2 = ((trunc_ln126_10_fu_1190_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_15_fu_1272_p2 = ((trunc_ln128_3_fu_1256_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_1_fu_641_p2 = ((trunc_ln126_3_fu_625_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_2_fu_707_p2 = ((trunc_ln126_4_fu_691_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_3_fu_1373_p2 = ((trunc_ln_reg_2005 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_4_fu_1427_p2 = ((trunc_ln126_2_reg_2011 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_5_fu_1481_p2 = ((trunc_ln126_8_reg_2017 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_6_fu_1535_p2 = ((trunc_ln126_9_reg_2023 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_7_fu_807_p2 = ((trunc_ln128_1_fu_791_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_8_fu_867_p2 = ((trunc_ln126_6_fu_857_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_9_fu_933_p2 = ((trunc_ln126_1_fu_917_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_587_p2 = ((trunc_ln126_fu_577_p1 == 2'd2) ? 1'b1 : 1'b0);

assign input_0_0_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_0_1_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_0_2_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_0_3_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_1_0_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_1_1_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_1_2_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_1_3_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_2_0_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_2_1_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_2_2_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_2_3_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_3_0_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_3_1_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_3_2_0_V_address0 = zext_ln124_1_fu_501_p1;

assign input_3_3_0_V_address0 = zext_ln124_1_fu_501_p1;

assign mul_ln1148_fu_459_p0 = mul_ln1148_fu_459_p00;

assign mul_ln1148_fu_459_p00 = w_scale_V;

assign mul_ln1148_fu_459_p1 = scales_0_V_read;

assign mul_ln1148_fu_459_p2 = ($signed({{1'b0}, {mul_ln1148_fu_459_p0}}) * $signed(mul_ln1148_fu_459_p1));

assign output_0_V_address1 = output_0_V_addr_reg_1994_pp0_iter25_reg;

assign output_0_V_d0 = ($signed(sext_ln703_27_fu_1729_p1) + $signed(add_ln703_32_fu_1724_p2));

assign output_0_V_d1 = grp_fu_1751_p2[39:0];

assign packed_weights_0_address0 = sext_ln124_fu_565_p1;

assign packed_weights_1_address0 = sext_ln124_fu_565_p1;

assign packed_weights_2_address0 = sext_ln124_fu_565_p1;

assign packed_weights_3_address0 = sext_ln124_fu_565_p1;

assign select_ln124_1_fu_521_p3 = ((icmp_ln121_reg_1780[0:0] === 1'b1) ? add_ln120_reg_1775 : j_0_0_reg_428);

assign select_ln124_fu_493_p3 = ((icmp_ln121_fu_487_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_ko_0_0_phi_fu_444_p4);

assign select_ln128_10_fu_1022_p3 = ((icmp_ln128_10_fu_993_p2[0:0] === 1'b1) ? input_2_2_0_V_loa_reg_1958 : 8'd0);

assign select_ln128_11_fu_1088_p3 = ((icmp_ln128_11_fu_1059_p2[0:0] === 1'b1) ? input_2_3_0_V_loa_reg_1964 : 8'd0);

assign select_ln128_12_fu_1148_p3 = ((icmp_ln128_12_fu_1119_p2[0:0] === 1'b1) ? input_3_0_0_V_loa_reg_1970 : 8'd0);

assign select_ln128_13_fu_1606_p3 = ((icmp_ln128_13_fu_1584_p2[0:0] === 1'b1) ? input_3_1_0_V_loa_reg_1976 : 8'd0);

assign select_ln128_14_fu_1229_p3 = ((icmp_ln128_14_fu_1200_p2[0:0] === 1'b1) ? input_3_2_0_V_loa_reg_1982 : 8'd0);

assign select_ln128_15_fu_1295_p3 = ((icmp_ln128_15_fu_1266_p2[0:0] === 1'b1) ? input_3_3_0_V_loa_reg_1988 : 8'd0);

assign select_ln128_1_fu_664_p3 = ((icmp_ln128_1_fu_635_p2[0:0] === 1'b1) ? input_0_1_0_V_loa_reg_1904 : 8'd0);

assign select_ln128_2_fu_730_p3 = ((icmp_ln128_2_fu_701_p2[0:0] === 1'b1) ? input_0_2_0_V_loa_reg_1910 : 8'd0);

assign select_ln128_3_fu_1395_p3 = ((icmp_ln128_3_fu_1368_p2[0:0] === 1'b1) ? input_0_3_0_V_loa_reg_1916 : 8'd0);

assign select_ln128_4_fu_1449_p3 = ((icmp_ln128_4_fu_1422_p2[0:0] === 1'b1) ? input_1_0_0_V_loa_reg_1922 : 8'd0);

assign select_ln128_5_fu_1503_p3 = ((icmp_ln128_5_fu_1476_p2[0:0] === 1'b1) ? input_1_1_0_V_loa_reg_1928 : 8'd0);

assign select_ln128_6_fu_1557_p3 = ((icmp_ln128_6_fu_1530_p2[0:0] === 1'b1) ? input_1_2_0_V_loa_reg_1934 : 8'd0);

assign select_ln128_7_fu_830_p3 = ((icmp_ln128_7_fu_801_p2[0:0] === 1'b1) ? input_1_3_0_V_loa_reg_1940 : 8'd0);

assign select_ln128_8_fu_890_p3 = ((icmp_ln128_8_fu_861_p2[0:0] === 1'b1) ? input_2_0_0_V_loa_reg_1946 : 8'd0);

assign select_ln128_9_fu_956_p3 = ((icmp_ln128_9_fu_927_p2[0:0] === 1'b1) ? input_2_1_0_V_loa_reg_1952 : 8'd0);

assign select_ln128_fu_610_p3 = ((icmp_ln128_fu_581_p2[0:0] === 1'b1) ? input_0_0_0_V_loa_reg_1898 : 8'd0);

assign select_ln129_10_fu_1029_p3 = ((and_ln129_10_fu_1016_p2[0:0] === 1'b1) ? sub_ln701_10_fu_1005_p2 : select_ln128_10_fu_1022_p3);

assign select_ln129_11_fu_1095_p3 = ((and_ln129_11_fu_1082_p2[0:0] === 1'b1) ? sub_ln701_11_fu_1071_p2 : select_ln128_11_fu_1088_p3);

assign select_ln129_12_fu_1155_p3 = ((and_ln129_12_fu_1142_p2[0:0] === 1'b1) ? sub_ln701_12_fu_1131_p2 : select_ln128_12_fu_1148_p3);

assign select_ln129_13_fu_1613_p3 = ((and_ln129_13_fu_1600_p2[0:0] === 1'b1) ? sub_ln701_13_reg_2035 : select_ln128_13_fu_1606_p3);

assign select_ln129_14_fu_1236_p3 = ((and_ln129_14_fu_1223_p2[0:0] === 1'b1) ? sub_ln701_14_fu_1212_p2 : select_ln128_14_fu_1229_p3);

assign select_ln129_15_fu_1302_p3 = ((and_ln129_15_fu_1289_p2[0:0] === 1'b1) ? sub_ln701_15_fu_1278_p2 : select_ln128_15_fu_1295_p3);

assign select_ln129_1_fu_671_p3 = ((and_ln129_1_fu_658_p2[0:0] === 1'b1) ? sub_ln701_1_fu_647_p2 : select_ln128_1_fu_664_p3);

assign select_ln129_2_fu_737_p3 = ((and_ln129_2_fu_724_p2[0:0] === 1'b1) ? sub_ln701_2_fu_713_p2 : select_ln128_2_fu_730_p3);

assign select_ln129_3_fu_1402_p3 = ((and_ln129_3_fu_1389_p2[0:0] === 1'b1) ? sub_ln701_3_fu_1378_p2 : select_ln128_3_fu_1395_p3);

assign select_ln129_4_fu_1456_p3 = ((and_ln129_4_fu_1443_p2[0:0] === 1'b1) ? sub_ln701_4_fu_1432_p2 : select_ln128_4_fu_1449_p3);

assign select_ln129_5_fu_1510_p3 = ((and_ln129_5_fu_1497_p2[0:0] === 1'b1) ? sub_ln701_5_fu_1486_p2 : select_ln128_5_fu_1503_p3);

assign select_ln129_6_fu_1564_p3 = ((and_ln129_6_fu_1551_p2[0:0] === 1'b1) ? sub_ln701_6_fu_1540_p2 : select_ln128_6_fu_1557_p3);

assign select_ln129_7_fu_837_p3 = ((and_ln129_7_fu_824_p2[0:0] === 1'b1) ? sub_ln701_7_fu_813_p2 : select_ln128_7_fu_830_p3);

assign select_ln129_8_fu_897_p3 = ((and_ln129_8_fu_884_p2[0:0] === 1'b1) ? sub_ln701_8_fu_873_p2 : select_ln128_8_fu_890_p3);

assign select_ln129_9_fu_963_p3 = ((and_ln129_9_fu_950_p2[0:0] === 1'b1) ? sub_ln701_9_fu_939_p2 : select_ln128_9_fu_956_p3);

assign select_ln129_fu_617_p3 = ((and_ln129_fu_604_p2[0:0] === 1'b1) ? sub_ln701_fu_593_p2 : select_ln128_fu_610_p3);

assign sext_ln120_fu_465_p1 = $signed(mul_ln1148_fu_459_p2);

assign sext_ln124_fu_565_p1 = $signed(add_ln124_fu_559_p2);

assign sext_ln703_10_fu_1045_p1 = $signed(shl_ln703_s_fu_1037_p3);

assign sext_ln703_11_fu_1111_p1 = $signed(shl_ln703_10_fu_1103_p3);

assign sext_ln703_12_fu_1171_p1 = $signed(shl_ln703_11_fu_1163_p3);

assign sext_ln703_13_fu_1628_p1 = $signed(shl_ln703_12_fu_1620_p3);

assign sext_ln703_14_fu_1252_p1 = $signed(shl_ln703_13_fu_1244_p3);

assign sext_ln703_15_fu_1318_p1 = $signed(shl_ln703_14_fu_1310_p3);

assign sext_ln703_16_fu_1638_p1 = $signed(add_ln703_27_reg_2040);

assign sext_ln703_17_fu_1653_p1 = $signed(add_ln703_29_fu_1647_p2);

assign sext_ln703_18_fu_1663_p1 = $signed(add_ln703_30_fu_1657_p2);

assign sext_ln703_19_fu_1721_p1 = $signed(add_ln703_31_reg_2076);

assign sext_ln703_1_fu_687_p1 = $signed(shl_ln703_1_fu_679_p3);

assign sext_ln703_20_fu_1673_p1 = $signed(add_ln703_33_reg_2045);

assign sext_ln703_21_fu_1676_p1 = $signed(add_ln703_34_reg_2050);

assign sext_ln703_22_fu_1685_p1 = $signed(add_ln703_35_fu_1679_p2);

assign sext_ln703_23_fu_1689_p1 = $signed(add_ln703_36_reg_2055);

assign sext_ln703_24_fu_1692_p1 = $signed(add_ln703_37_reg_2060);

assign sext_ln703_25_fu_1701_p1 = $signed(add_ln703_38_fu_1695_p2);

assign sext_ln703_26_fu_1711_p1 = $signed(add_ln703_39_fu_1705_p2);

assign sext_ln703_27_fu_1729_p1 = $signed(add_ln703_40_reg_2081);

assign sext_ln703_2_fu_753_p1 = $signed(shl_ln703_2_fu_745_p3);

assign sext_ln703_3_fu_1418_p1 = $signed(shl_ln703_3_fu_1410_p3);

assign sext_ln703_4_fu_1472_p1 = $signed(shl_ln703_4_fu_1464_p3);

assign sext_ln703_5_fu_1526_p1 = $signed(shl_ln703_5_fu_1518_p3);

assign sext_ln703_6_fu_1580_p1 = $signed(shl_ln703_6_fu_1572_p3);

assign sext_ln703_7_fu_853_p1 = $signed(shl_ln703_7_fu_845_p3);

assign sext_ln703_8_fu_913_p1 = $signed(shl_ln703_8_fu_905_p3);

assign sext_ln703_9_fu_979_p1 = $signed(shl_ln703_9_fu_971_p3);

assign sext_ln703_fu_1364_p1 = $signed(shl_ln_fu_1357_p3);

assign shl_ln703_10_fu_1103_p3 = {{select_ln129_11_fu_1095_p3}, {16'd0}};

assign shl_ln703_11_fu_1163_p3 = {{select_ln129_12_fu_1155_p3}, {16'd0}};

assign shl_ln703_12_fu_1620_p3 = {{select_ln129_13_fu_1613_p3}, {16'd0}};

assign shl_ln703_13_fu_1244_p3 = {{select_ln129_14_fu_1236_p3}, {16'd0}};

assign shl_ln703_14_fu_1310_p3 = {{select_ln129_15_fu_1302_p3}, {16'd0}};

assign shl_ln703_1_fu_679_p3 = {{select_ln129_1_fu_671_p3}, {16'd0}};

assign shl_ln703_2_fu_745_p3 = {{select_ln129_2_fu_737_p3}, {16'd0}};

assign shl_ln703_3_fu_1410_p3 = {{select_ln129_3_fu_1402_p3}, {16'd0}};

assign shl_ln703_4_fu_1464_p3 = {{select_ln129_4_fu_1456_p3}, {16'd0}};

assign shl_ln703_5_fu_1518_p3 = {{select_ln129_5_fu_1510_p3}, {16'd0}};

assign shl_ln703_6_fu_1572_p3 = {{select_ln129_6_fu_1564_p3}, {16'd0}};

assign shl_ln703_7_fu_845_p3 = {{select_ln129_7_fu_837_p3}, {16'd0}};

assign shl_ln703_8_fu_905_p3 = {{select_ln129_8_fu_897_p3}, {16'd0}};

assign shl_ln703_9_fu_971_p3 = {{select_ln129_9_fu_963_p3}, {16'd0}};

assign shl_ln703_s_fu_1037_p3 = {{select_ln129_10_fu_1029_p3}, {16'd0}};

assign shl_ln_fu_1357_p3 = {{select_ln129_reg_2000}, {16'd0}};

assign sub_ln124_fu_553_p2 = (zext_ln124_2_fu_538_p1 - zext_ln124_3_fu_549_p1);

assign sub_ln701_10_fu_1005_p2 = (8'd0 - input_2_2_0_V_loa_reg_1958);

assign sub_ln701_11_fu_1071_p2 = (8'd0 - input_2_3_0_V_loa_reg_1964);

assign sub_ln701_12_fu_1131_p2 = (8'd0 - input_3_0_0_V_loa_reg_1970);

assign sub_ln701_13_fu_1185_p2 = (8'd0 - input_3_1_0_V_loa_reg_1976);

assign sub_ln701_14_fu_1212_p2 = (8'd0 - input_3_2_0_V_loa_reg_1982);

assign sub_ln701_15_fu_1278_p2 = (8'd0 - input_3_3_0_V_loa_reg_1988);

assign sub_ln701_1_fu_647_p2 = (8'd0 - input_0_1_0_V_loa_reg_1904);

assign sub_ln701_2_fu_713_p2 = (8'd0 - input_0_2_0_V_loa_reg_1910);

assign sub_ln701_3_fu_1378_p2 = (8'd0 - input_0_3_0_V_loa_reg_1916);

assign sub_ln701_4_fu_1432_p2 = (8'd0 - input_1_0_0_V_loa_reg_1922);

assign sub_ln701_5_fu_1486_p2 = (8'd0 - input_1_1_0_V_loa_reg_1928);

assign sub_ln701_6_fu_1540_p2 = (8'd0 - input_1_2_0_V_loa_reg_1934);

assign sub_ln701_7_fu_813_p2 = (8'd0 - input_1_3_0_V_loa_reg_1940);

assign sub_ln701_8_fu_873_p2 = (8'd0 - input_2_0_0_V_loa_reg_1946);

assign sub_ln701_9_fu_939_p2 = (8'd0 - input_2_1_0_V_loa_reg_1952);

assign sub_ln701_fu_593_p2 = (8'd0 - input_0_0_0_V_loa_reg_1898);

assign tmp_56_fu_531_p3 = {{select_ln124_reg_1785}, {7'd0}};

assign tmp_57_fu_542_p3 = {{select_ln124_reg_1785}, {5'd0}};

assign trunc_ln126_10_fu_1190_p4 = {{packed_weights_3_q0[5:4]}};

assign trunc_ln126_1_fu_917_p4 = {{packed_weights_2_q0[3:2]}};

assign trunc_ln126_2_fu_767_p1 = packed_weights_1_q0[1:0];

assign trunc_ln126_3_fu_625_p4 = {{packed_weights_0_q0[3:2]}};

assign trunc_ln126_4_fu_691_p4 = {{packed_weights_0_q0[5:4]}};

assign trunc_ln126_5_fu_983_p4 = {{packed_weights_2_q0[5:4]}};

assign trunc_ln126_6_fu_857_p1 = packed_weights_2_q0[1:0];

assign trunc_ln126_7_fu_1115_p1 = packed_weights_3_q0[1:0];

assign trunc_ln126_fu_577_p1 = packed_weights_0_q0[1:0];

assign trunc_ln128_1_fu_791_p4 = {{packed_weights_1_q0[7:6]}};

assign trunc_ln128_2_fu_1049_p4 = {{packed_weights_2_q0[7:6]}};

assign trunc_ln128_3_fu_1256_p4 = {{packed_weights_3_q0[7:6]}};

assign xor_ln128_10_fu_1010_p2 = (icmp_ln128_10_fu_993_p2 ^ 1'd1);

assign xor_ln128_11_fu_1076_p2 = (icmp_ln128_11_fu_1059_p2 ^ 1'd1);

assign xor_ln128_12_fu_1136_p2 = (icmp_ln128_12_fu_1119_p2 ^ 1'd1);

assign xor_ln128_13_fu_1594_p2 = (icmp_ln128_13_fu_1584_p2 ^ 1'd1);

assign xor_ln128_14_fu_1217_p2 = (icmp_ln128_14_fu_1200_p2 ^ 1'd1);

assign xor_ln128_15_fu_1283_p2 = (icmp_ln128_15_fu_1266_p2 ^ 1'd1);

assign xor_ln128_1_fu_652_p2 = (icmp_ln128_1_fu_635_p2 ^ 1'd1);

assign xor_ln128_2_fu_718_p2 = (icmp_ln128_2_fu_701_p2 ^ 1'd1);

assign xor_ln128_3_fu_1383_p2 = (icmp_ln128_3_fu_1368_p2 ^ 1'd1);

assign xor_ln128_4_fu_1437_p2 = (icmp_ln128_4_fu_1422_p2 ^ 1'd1);

assign xor_ln128_5_fu_1491_p2 = (icmp_ln128_5_fu_1476_p2 ^ 1'd1);

assign xor_ln128_6_fu_1545_p2 = (icmp_ln128_6_fu_1530_p2 ^ 1'd1);

assign xor_ln128_7_fu_818_p2 = (icmp_ln128_7_fu_801_p2 ^ 1'd1);

assign xor_ln128_8_fu_878_p2 = (icmp_ln128_8_fu_861_p2 ^ 1'd1);

assign xor_ln128_9_fu_944_p2 = (icmp_ln128_9_fu_927_p2 ^ 1'd1);

assign xor_ln128_fu_598_p2 = (icmp_ln128_fu_581_p2 ^ 1'd1);

assign zext_ln121_fu_527_p1 = select_ln124_1_fu_521_p3;

assign zext_ln124_1_fu_501_p1 = select_ln124_fu_493_p3;

assign zext_ln124_2_fu_538_p1 = tmp_56_fu_531_p3;

assign zext_ln124_3_fu_549_p1 = tmp_57_fu_542_p3;

assign zext_ln124_fu_573_p1 = select_ln124_1_reg_1872;

always @ (posedge ap_clk) begin
    add_ln703_27_reg_2040[15:0] <= 16'b0000000000000000;
    add_ln703_33_reg_2045[15:0] <= 16'b0000000000000000;
    add_ln703_34_reg_2050[15:0] <= 16'b0000000000000000;
    add_ln703_36_reg_2055[15:0] <= 16'b0000000000000000;
    add_ln703_37_reg_2060[15:0] <= 16'b0000000000000000;
    add_ln703_31_reg_2076[15:0] <= 16'b0000000000000000;
    add_ln703_40_reg_2081[15:0] <= 16'b0000000000000000;
end

endmodule //linear_forward_no_mu
