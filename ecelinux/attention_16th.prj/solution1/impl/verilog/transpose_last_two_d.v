// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transpose_last_two_d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_1_V_address0,
        output_1_V_ce0,
        output_1_V_we0,
        output_1_V_d0,
        output_2_V_address0,
        output_2_V_ce0,
        output_2_V_we0,
        output_2_V_d0,
        output_3_V_address0,
        output_3_V_ce0,
        output_3_V_we0,
        output_3_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [39:0] input_V_q0;
output  [7:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;
output  [7:0] output_1_V_address0;
output   output_1_V_ce0;
output   output_1_V_we0;
output  [39:0] output_1_V_d0;
output  [7:0] output_2_V_address0;
output   output_2_V_ce0;
output   output_2_V_we0;
output  [39:0] output_2_V_d0;
output  [7:0] output_3_V_address0;
output   output_3_V_ce0;
output   output_3_V_we0;
output  [39:0] output_3_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg output_1_V_ce0;
reg output_1_V_we0;
reg output_2_V_ce0;
reg output_2_V_we0;
reg output_3_V_ce0;
reg output_3_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_180_p2;
reg   [2:0] i_reg_361;
wire    ap_CS_fsm_state2;
wire  signed [7:0] sext_ln203_fu_216_p1;
reg  signed [7:0] sext_ln203_reg_366;
wire   [0:0] icmp_ln215_fu_174_p2;
wire   [2:0] j_fu_226_p2;
reg   [2:0] j_reg_375;
wire    ap_CS_fsm_state3;
wire   [8:0] zext_ln203_2_fu_232_p1;
reg   [8:0] zext_ln203_2_reg_380;
wire   [0:0] icmp_ln216_fu_220_p2;
wire   [10:0] sub_ln203_1_fu_265_p2;
reg   [10:0] sub_ln203_1_reg_385;
wire   [4:0] k_fu_277_p2;
reg   [4:0] k_reg_393;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln217_fu_271_p2;
wire   [1:0] trunc_ln203_1_fu_297_p1;
reg   [1:0] trunc_ln203_1_reg_403;
wire   [8:0] add_ln203_3_fu_346_p2;
reg   [8:0] add_ln203_3_reg_407;
reg   [2:0] i_0_reg_141;
reg   [2:0] j_0_reg_152;
reg   [4:0] k_0_reg_163;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln203_5_fu_292_p1;
wire   [63:0] zext_ln203_7_fu_351_p1;
wire   [5:0] tmp_2_fu_186_p3;
wire   [3:0] tmp_3_fu_198_p3;
wire   [6:0] zext_ln203_fu_194_p1;
wire   [6:0] zext_ln203_1_fu_206_p1;
wire   [6:0] sub_ln203_fu_210_p2;
wire   [7:0] zext_ln203_3_fu_236_p1;
wire   [7:0] add_ln203_fu_240_p2;
wire   [5:0] trunc_ln203_fu_245_p1;
wire   [10:0] p_shl2_cast_fu_249_p3;
wire   [10:0] p_shl3_cast_fu_257_p3;
wire   [10:0] zext_ln203_4_fu_283_p1;
wire   [10:0] add_ln203_1_fu_287_p2;
wire   [2:0] tmp_4_fu_301_p4;
wire   [7:0] zext_ln203_6_fu_311_p1;
wire   [7:0] add_ln203_2_fu_315_p2;
wire   [5:0] trunc_ln203_2_fu_320_p1;
wire   [8:0] p_shl4_cast_fu_324_p3;
wire   [8:0] p_shl5_cast_fu_332_p3;
wire   [8:0] sub_ln203_2_fu_340_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_141 <= i_reg_361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_141 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln217_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_152 <= j_reg_375;
    end else if (((icmp_ln215_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_152 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_163 <= k_reg_393;
    end else if (((icmp_ln216_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_163 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln217_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_3_reg_407 <= add_ln203_3_fu_346_p2;
        trunc_ln203_1_reg_403 <= trunc_ln203_1_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_361 <= i_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_375 <= j_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_393 <= k_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln215_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln203_reg_366[7 : 1] <= sext_ln203_fu_216_p1[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln203_1_reg_385[10 : 3] <= sub_ln203_1_fu_265_p2[10 : 3];
        zext_ln203_2_reg_380[2 : 0] <= zext_ln203_2_fu_232_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln215_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln215_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_1_reg_403 == 2'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_1_V_ce0 = 1'b1;
    end else begin
        output_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_1_reg_403 == 2'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_1_V_we0 = 1'b1;
    end else begin
        output_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_2_V_ce0 = 1'b1;
    end else begin
        output_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_1_reg_403 == 2'd2) & (1'b1 == ap_CS_fsm_state5))) begin
        output_2_V_we0 = 1'b1;
    end else begin
        output_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_3_V_ce0 = 1'b1;
    end else begin
        output_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_1_reg_403 == 2'd3) & (1'b1 == ap_CS_fsm_state5))) begin
        output_3_V_we0 = 1'b1;
    end else begin
        output_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln215_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln216_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln217_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_287_p2 = (sub_ln203_1_reg_385 + zext_ln203_4_fu_283_p1);

assign add_ln203_2_fu_315_p2 = ($signed(sext_ln203_reg_366) + $signed(zext_ln203_6_fu_311_p1));

assign add_ln203_3_fu_346_p2 = (sub_ln203_2_fu_340_p2 + zext_ln203_2_reg_380);

assign add_ln203_fu_240_p2 = ($signed(zext_ln203_3_fu_236_p1) + $signed(sext_ln203_reg_366));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_180_p2 = (i_0_reg_141 + 3'd1);

assign icmp_ln215_fu_174_p2 = ((i_0_reg_141 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_220_p2 = ((j_0_reg_152 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_271_p2 = ((k_0_reg_163 == 5'd24) ? 1'b1 : 1'b0);

assign input_V_address0 = zext_ln203_5_fu_292_p1;

assign j_fu_226_p2 = (j_0_reg_152 + 3'd1);

assign k_fu_277_p2 = (k_0_reg_163 + 5'd1);

assign output_0_V_address0 = zext_ln203_7_fu_351_p1;

assign output_0_V_d0 = input_V_q0;

assign output_1_V_address0 = zext_ln203_7_fu_351_p1;

assign output_1_V_d0 = input_V_q0;

assign output_2_V_address0 = zext_ln203_7_fu_351_p1;

assign output_2_V_d0 = input_V_q0;

assign output_3_V_address0 = zext_ln203_7_fu_351_p1;

assign output_3_V_d0 = input_V_q0;

assign p_shl2_cast_fu_249_p3 = {{trunc_ln203_fu_245_p1}, {5'd0}};

assign p_shl3_cast_fu_257_p3 = {{add_ln203_fu_240_p2}, {3'd0}};

assign p_shl4_cast_fu_324_p3 = {{trunc_ln203_2_fu_320_p1}, {3'd0}};

assign p_shl5_cast_fu_332_p3 = {{add_ln203_2_fu_315_p2}, {1'd0}};

assign sext_ln203_fu_216_p1 = $signed(sub_ln203_fu_210_p2);

assign sub_ln203_1_fu_265_p2 = (p_shl2_cast_fu_249_p3 - p_shl3_cast_fu_257_p3);

assign sub_ln203_2_fu_340_p2 = (p_shl4_cast_fu_324_p3 - p_shl5_cast_fu_332_p3);

assign sub_ln203_fu_210_p2 = (zext_ln203_fu_194_p1 - zext_ln203_1_fu_206_p1);

assign tmp_2_fu_186_p3 = {{i_0_reg_141}, {3'd0}};

assign tmp_3_fu_198_p3 = {{i_0_reg_141}, {1'd0}};

assign tmp_4_fu_301_p4 = {{k_0_reg_163[4:2]}};

assign trunc_ln203_1_fu_297_p1 = k_0_reg_163[1:0];

assign trunc_ln203_2_fu_320_p1 = add_ln203_2_fu_315_p2[5:0];

assign trunc_ln203_fu_245_p1 = add_ln203_fu_240_p2[5:0];

assign zext_ln203_1_fu_206_p1 = tmp_3_fu_198_p3;

assign zext_ln203_2_fu_232_p1 = j_0_reg_152;

assign zext_ln203_3_fu_236_p1 = j_0_reg_152;

assign zext_ln203_4_fu_283_p1 = k_0_reg_163;

assign zext_ln203_5_fu_292_p1 = add_ln203_1_fu_287_p2;

assign zext_ln203_6_fu_311_p1 = tmp_4_fu_301_p4;

assign zext_ln203_7_fu_351_p1 = add_ln203_3_reg_407;

assign zext_ln203_fu_194_p1 = tmp_2_fu_186_p3;

always @ (posedge ap_clk) begin
    sext_ln203_reg_366[0] <= 1'b0;
    zext_ln203_2_reg_380[8:3] <= 6'b000000;
    sub_ln203_1_reg_385[2:0] <= 3'b000;
end

endmodule //transpose_last_two_d
