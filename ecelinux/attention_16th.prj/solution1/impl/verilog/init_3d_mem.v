// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module init_3d_mem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mem_0_0_0_V_address0,
        mem_0_0_0_V_ce0,
        mem_0_0_0_V_we0,
        mem_0_0_0_V_d0,
        mem_0_1_0_V_address0,
        mem_0_1_0_V_ce0,
        mem_0_1_0_V_we0,
        mem_0_1_0_V_d0,
        mem_0_2_0_V_address0,
        mem_0_2_0_V_ce0,
        mem_0_2_0_V_we0,
        mem_0_2_0_V_d0,
        mem_0_3_0_V_address0,
        mem_0_3_0_V_ce0,
        mem_0_3_0_V_we0,
        mem_0_3_0_V_d0,
        mem_1_0_0_V_address0,
        mem_1_0_0_V_ce0,
        mem_1_0_0_V_we0,
        mem_1_0_0_V_d0,
        mem_1_1_0_V_address0,
        mem_1_1_0_V_ce0,
        mem_1_1_0_V_we0,
        mem_1_1_0_V_d0,
        mem_1_2_0_V_address0,
        mem_1_2_0_V_ce0,
        mem_1_2_0_V_we0,
        mem_1_2_0_V_d0,
        mem_1_3_0_V_address0,
        mem_1_3_0_V_ce0,
        mem_1_3_0_V_we0,
        mem_1_3_0_V_d0,
        mem_2_0_0_V_address0,
        mem_2_0_0_V_ce0,
        mem_2_0_0_V_we0,
        mem_2_0_0_V_d0,
        mem_2_1_0_V_address0,
        mem_2_1_0_V_ce0,
        mem_2_1_0_V_we0,
        mem_2_1_0_V_d0,
        mem_2_2_0_V_address0,
        mem_2_2_0_V_ce0,
        mem_2_2_0_V_we0,
        mem_2_2_0_V_d0,
        mem_2_3_0_V_address0,
        mem_2_3_0_V_ce0,
        mem_2_3_0_V_we0,
        mem_2_3_0_V_d0,
        mem_3_0_0_V_address0,
        mem_3_0_0_V_ce0,
        mem_3_0_0_V_we0,
        mem_3_0_0_V_d0,
        mem_3_1_0_V_address0,
        mem_3_1_0_V_ce0,
        mem_3_1_0_V_we0,
        mem_3_1_0_V_d0,
        mem_3_2_0_V_address0,
        mem_3_2_0_V_ce0,
        mem_3_2_0_V_we0,
        mem_3_2_0_V_d0,
        mem_3_3_0_V_address0,
        mem_3_3_0_V_ce0,
        mem_3_3_0_V_we0,
        mem_3_3_0_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] mem_0_0_0_V_address0;
output   mem_0_0_0_V_ce0;
output   mem_0_0_0_V_we0;
output  [7:0] mem_0_0_0_V_d0;
output  [2:0] mem_0_1_0_V_address0;
output   mem_0_1_0_V_ce0;
output   mem_0_1_0_V_we0;
output  [7:0] mem_0_1_0_V_d0;
output  [2:0] mem_0_2_0_V_address0;
output   mem_0_2_0_V_ce0;
output   mem_0_2_0_V_we0;
output  [7:0] mem_0_2_0_V_d0;
output  [2:0] mem_0_3_0_V_address0;
output   mem_0_3_0_V_ce0;
output   mem_0_3_0_V_we0;
output  [7:0] mem_0_3_0_V_d0;
output  [2:0] mem_1_0_0_V_address0;
output   mem_1_0_0_V_ce0;
output   mem_1_0_0_V_we0;
output  [7:0] mem_1_0_0_V_d0;
output  [2:0] mem_1_1_0_V_address0;
output   mem_1_1_0_V_ce0;
output   mem_1_1_0_V_we0;
output  [7:0] mem_1_1_0_V_d0;
output  [2:0] mem_1_2_0_V_address0;
output   mem_1_2_0_V_ce0;
output   mem_1_2_0_V_we0;
output  [7:0] mem_1_2_0_V_d0;
output  [2:0] mem_1_3_0_V_address0;
output   mem_1_3_0_V_ce0;
output   mem_1_3_0_V_we0;
output  [7:0] mem_1_3_0_V_d0;
output  [2:0] mem_2_0_0_V_address0;
output   mem_2_0_0_V_ce0;
output   mem_2_0_0_V_we0;
output  [7:0] mem_2_0_0_V_d0;
output  [2:0] mem_2_1_0_V_address0;
output   mem_2_1_0_V_ce0;
output   mem_2_1_0_V_we0;
output  [7:0] mem_2_1_0_V_d0;
output  [2:0] mem_2_2_0_V_address0;
output   mem_2_2_0_V_ce0;
output   mem_2_2_0_V_we0;
output  [7:0] mem_2_2_0_V_d0;
output  [2:0] mem_2_3_0_V_address0;
output   mem_2_3_0_V_ce0;
output   mem_2_3_0_V_we0;
output  [7:0] mem_2_3_0_V_d0;
output  [2:0] mem_3_0_0_V_address0;
output   mem_3_0_0_V_ce0;
output   mem_3_0_0_V_we0;
output  [7:0] mem_3_0_0_V_d0;
output  [2:0] mem_3_1_0_V_address0;
output   mem_3_1_0_V_ce0;
output   mem_3_1_0_V_we0;
output  [7:0] mem_3_1_0_V_d0;
output  [2:0] mem_3_2_0_V_address0;
output   mem_3_2_0_V_ce0;
output   mem_3_2_0_V_we0;
output  [7:0] mem_3_2_0_V_d0;
output  [2:0] mem_3_3_0_V_address0;
output   mem_3_3_0_V_ce0;
output   mem_3_3_0_V_we0;
output  [7:0] mem_3_3_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mem_0_0_0_V_ce0;
reg mem_0_0_0_V_we0;
reg mem_0_1_0_V_ce0;
reg mem_0_1_0_V_we0;
reg mem_0_2_0_V_ce0;
reg mem_0_2_0_V_we0;
reg mem_0_3_0_V_ce0;
reg mem_0_3_0_V_we0;
reg mem_1_0_0_V_ce0;
reg mem_1_0_0_V_we0;
reg mem_1_1_0_V_ce0;
reg mem_1_1_0_V_we0;
reg mem_1_2_0_V_ce0;
reg mem_1_2_0_V_we0;
reg mem_1_3_0_V_ce0;
reg mem_1_3_0_V_we0;
reg mem_2_0_0_V_ce0;
reg mem_2_0_0_V_we0;
reg mem_2_1_0_V_ce0;
reg mem_2_1_0_V_we0;
reg mem_2_2_0_V_ce0;
reg mem_2_2_0_V_we0;
reg mem_2_3_0_V_ce0;
reg mem_2_3_0_V_we0;
reg mem_3_0_0_V_ce0;
reg mem_3_0_0_V_we0;
reg mem_3_1_0_V_ce0;
reg mem_3_1_0_V_we0;
reg mem_3_2_0_V_ce0;
reg mem_3_2_0_V_we0;
reg mem_3_3_0_V_ce0;
reg mem_3_3_0_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] add_ln50_fu_314_p2;
reg   [4:0] add_ln50_reg_373;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln180_fu_320_p1;
reg   [1:0] trunc_ln180_reg_378;
wire   [0:0] icmp_ln50_fu_308_p2;
reg   [2:0] mem_0_0_0_V_addr_reg_382;
reg   [2:0] mem_0_1_0_V_addr_reg_387;
reg   [2:0] mem_0_2_0_V_addr_reg_392;
reg   [2:0] mem_0_3_0_V_addr_reg_397;
reg   [2:0] mem_1_0_0_V_addr_reg_402;
reg   [2:0] mem_1_1_0_V_addr_reg_407;
reg   [2:0] mem_1_2_0_V_addr_reg_412;
reg   [2:0] mem_1_3_0_V_addr_reg_417;
reg   [2:0] mem_2_0_0_V_addr_reg_422;
reg   [2:0] mem_2_1_0_V_addr_reg_427;
reg   [2:0] mem_2_2_0_V_addr_reg_432;
reg   [2:0] mem_2_3_0_V_addr_reg_437;
reg   [2:0] mem_3_0_0_V_addr_reg_442;
reg   [2:0] mem_3_1_0_V_addr_reg_447;
reg   [2:0] mem_3_2_0_V_addr_reg_452;
reg   [2:0] mem_3_3_0_V_addr_reg_457;
wire   [2:0] add_ln51_fu_360_p2;
wire    ap_CS_fsm_state3;
reg   [4:0] j_0_0_reg_286;
wire   [0:0] icmp_ln51_fu_354_p2;
reg   [2:0] k_0_0_reg_297;
wire   [63:0] zext_ln180_fu_334_p1;
wire   [1:0] trunc_ln180_1_fu_366_p1;
wire   [2:0] lshr_ln_fu_324_p4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd1))) begin
        j_0_0_reg_286 <= add_ln50_reg_373;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_286 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0))) begin
        k_0_0_reg_297 <= add_ln51_fu_360_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_308_p2 == 1'd0))) begin
        k_0_0_reg_297 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln50_reg_373 <= add_ln50_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_308_p2 == 1'd0))) begin
        mem_0_0_0_V_addr_reg_382 <= zext_ln180_fu_334_p1;
        mem_0_1_0_V_addr_reg_387 <= zext_ln180_fu_334_p1;
        mem_0_2_0_V_addr_reg_392 <= zext_ln180_fu_334_p1;
        mem_0_3_0_V_addr_reg_397 <= zext_ln180_fu_334_p1;
        mem_1_0_0_V_addr_reg_402 <= zext_ln180_fu_334_p1;
        mem_1_1_0_V_addr_reg_407 <= zext_ln180_fu_334_p1;
        mem_1_2_0_V_addr_reg_412 <= zext_ln180_fu_334_p1;
        mem_1_3_0_V_addr_reg_417 <= zext_ln180_fu_334_p1;
        mem_2_0_0_V_addr_reg_422 <= zext_ln180_fu_334_p1;
        mem_2_1_0_V_addr_reg_427 <= zext_ln180_fu_334_p1;
        mem_2_2_0_V_addr_reg_432 <= zext_ln180_fu_334_p1;
        mem_2_3_0_V_addr_reg_437 <= zext_ln180_fu_334_p1;
        mem_3_0_0_V_addr_reg_442 <= zext_ln180_fu_334_p1;
        mem_3_1_0_V_addr_reg_447 <= zext_ln180_fu_334_p1;
        mem_3_2_0_V_addr_reg_452 <= zext_ln180_fu_334_p1;
        mem_3_3_0_V_addr_reg_457 <= zext_ln180_fu_334_p1;
        trunc_ln180_reg_378 <= trunc_ln180_fu_320_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_308_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_308_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_0_0_0_V_ce0 = 1'b1;
    end else begin
        mem_0_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd0))) begin
        mem_0_0_0_V_we0 = 1'b1;
    end else begin
        mem_0_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_0_1_0_V_ce0 = 1'b1;
    end else begin
        mem_0_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd0))) begin
        mem_0_1_0_V_we0 = 1'b1;
    end else begin
        mem_0_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_0_2_0_V_ce0 = 1'b1;
    end else begin
        mem_0_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd0))) begin
        mem_0_2_0_V_we0 = 1'b1;
    end else begin
        mem_0_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_0_3_0_V_ce0 = 1'b1;
    end else begin
        mem_0_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd0))) begin
        mem_0_3_0_V_we0 = 1'b1;
    end else begin
        mem_0_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_1_0_0_V_ce0 = 1'b1;
    end else begin
        mem_1_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd1))) begin
        mem_1_0_0_V_we0 = 1'b1;
    end else begin
        mem_1_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_1_1_0_V_ce0 = 1'b1;
    end else begin
        mem_1_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd1))) begin
        mem_1_1_0_V_we0 = 1'b1;
    end else begin
        mem_1_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_1_2_0_V_ce0 = 1'b1;
    end else begin
        mem_1_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd1))) begin
        mem_1_2_0_V_we0 = 1'b1;
    end else begin
        mem_1_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_1_3_0_V_ce0 = 1'b1;
    end else begin
        mem_1_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd1))) begin
        mem_1_3_0_V_we0 = 1'b1;
    end else begin
        mem_1_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_2_0_0_V_ce0 = 1'b1;
    end else begin
        mem_2_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd2))) begin
        mem_2_0_0_V_we0 = 1'b1;
    end else begin
        mem_2_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_2_1_0_V_ce0 = 1'b1;
    end else begin
        mem_2_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd2))) begin
        mem_2_1_0_V_we0 = 1'b1;
    end else begin
        mem_2_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_2_2_0_V_ce0 = 1'b1;
    end else begin
        mem_2_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd2))) begin
        mem_2_2_0_V_we0 = 1'b1;
    end else begin
        mem_2_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_2_3_0_V_ce0 = 1'b1;
    end else begin
        mem_2_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd2))) begin
        mem_2_3_0_V_we0 = 1'b1;
    end else begin
        mem_2_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_3_0_0_V_ce0 = 1'b1;
    end else begin
        mem_3_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd3))) begin
        mem_3_0_0_V_we0 = 1'b1;
    end else begin
        mem_3_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_3_1_0_V_ce0 = 1'b1;
    end else begin
        mem_3_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd3))) begin
        mem_3_1_0_V_we0 = 1'b1;
    end else begin
        mem_3_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_3_2_0_V_ce0 = 1'b1;
    end else begin
        mem_3_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd3))) begin
        mem_3_2_0_V_we0 = 1'b1;
    end else begin
        mem_3_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_3_3_0_V_ce0 = 1'b1;
    end else begin
        mem_3_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_1_fu_366_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd0) & (trunc_ln180_reg_378 == 2'd3))) begin
        mem_3_3_0_V_we0 = 1'b1;
    end else begin
        mem_3_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln50_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln51_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_314_p2 = (j_0_0_reg_286 + 5'd1);

assign add_ln51_fu_360_p2 = (k_0_0_reg_297 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign icmp_ln50_fu_308_p2 = ((j_0_0_reg_286 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_354_p2 = ((k_0_0_reg_297 == 3'd4) ? 1'b1 : 1'b0);

assign lshr_ln_fu_324_p4 = {{j_0_0_reg_286[4:2]}};

assign mem_0_0_0_V_address0 = mem_0_0_0_V_addr_reg_382;

assign mem_0_0_0_V_d0 = 8'd0;

assign mem_0_1_0_V_address0 = mem_0_1_0_V_addr_reg_387;

assign mem_0_1_0_V_d0 = 8'd0;

assign mem_0_2_0_V_address0 = mem_0_2_0_V_addr_reg_392;

assign mem_0_2_0_V_d0 = 8'd0;

assign mem_0_3_0_V_address0 = mem_0_3_0_V_addr_reg_397;

assign mem_0_3_0_V_d0 = 8'd0;

assign mem_1_0_0_V_address0 = mem_1_0_0_V_addr_reg_402;

assign mem_1_0_0_V_d0 = 8'd0;

assign mem_1_1_0_V_address0 = mem_1_1_0_V_addr_reg_407;

assign mem_1_1_0_V_d0 = 8'd0;

assign mem_1_2_0_V_address0 = mem_1_2_0_V_addr_reg_412;

assign mem_1_2_0_V_d0 = 8'd0;

assign mem_1_3_0_V_address0 = mem_1_3_0_V_addr_reg_417;

assign mem_1_3_0_V_d0 = 8'd0;

assign mem_2_0_0_V_address0 = mem_2_0_0_V_addr_reg_422;

assign mem_2_0_0_V_d0 = 8'd0;

assign mem_2_1_0_V_address0 = mem_2_1_0_V_addr_reg_427;

assign mem_2_1_0_V_d0 = 8'd0;

assign mem_2_2_0_V_address0 = mem_2_2_0_V_addr_reg_432;

assign mem_2_2_0_V_d0 = 8'd0;

assign mem_2_3_0_V_address0 = mem_2_3_0_V_addr_reg_437;

assign mem_2_3_0_V_d0 = 8'd0;

assign mem_3_0_0_V_address0 = mem_3_0_0_V_addr_reg_442;

assign mem_3_0_0_V_d0 = 8'd0;

assign mem_3_1_0_V_address0 = mem_3_1_0_V_addr_reg_447;

assign mem_3_1_0_V_d0 = 8'd0;

assign mem_3_2_0_V_address0 = mem_3_2_0_V_addr_reg_452;

assign mem_3_2_0_V_d0 = 8'd0;

assign mem_3_3_0_V_address0 = mem_3_3_0_V_addr_reg_457;

assign mem_3_3_0_V_d0 = 8'd0;

assign trunc_ln180_1_fu_366_p1 = k_0_0_reg_297[1:0];

assign trunc_ln180_fu_320_p1 = j_0_0_reg_286[1:0];

assign zext_ln180_fu_334_p1 = lshr_ln_fu_324_p4;

endmodule //init_3d_mem
