// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_out_V_address0,
        cache_out_V_ce0,
        cache_out_V_we0,
        cache_out_V_d0,
        update_0_V_address0,
        update_0_V_ce0,
        update_0_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] cache_out_V_address0;
output   cache_out_V_ce0;
output   cache_out_V_we0;
output  [39:0] cache_out_V_d0;
output  [6:0] update_0_V_address0;
output   update_0_V_ce0;
input  [39:0] update_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_out_V_ce0;
reg cache_out_V_we0;
reg update_0_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] k_cache_V_address0;
reg    k_cache_V_ce0;
wire   [19:0] k_cache_V_q0;
wire   [2:0] i_fu_142_p2;
reg   [2:0] i_reg_382;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln204_fu_164_p2;
reg   [5:0] add_ln204_reg_387;
wire   [0:0] icmp_ln201_fu_136_p2;
wire  signed [7:0] sext_ln203_fu_204_p1;
reg  signed [7:0] sext_ln203_reg_392;
wire   [7:0] sub_ln204_fu_216_p2;
reg   [7:0] sub_ln204_reg_397;
wire   [2:0] j_fu_228_p2;
reg   [2:0] j_reg_405;
wire    ap_CS_fsm_state3;
wire   [9:0] sub_ln204_2_fu_271_p2;
reg   [9:0] sub_ln204_2_reg_410;
wire   [0:0] icmp_ln202_fu_222_p2;
wire   [10:0] sub_ln203_4_fu_302_p2;
reg   [10:0] sub_ln203_4_reg_415;
wire   [0:0] icmp_ln204_fu_308_p2;
reg   [0:0] icmp_ln204_reg_420;
wire   [4:0] k_fu_320_p2;
reg   [4:0] k_reg_428;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln203_fu_314_p2;
wire   [10:0] add_ln203_6_fu_348_p2;
reg   [10:0] add_ln203_6_reg_438;
reg   [2:0] i_0_reg_103;
reg   [2:0] j_0_reg_114;
reg   [4:0] k_0_reg_125;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln204_17_fu_343_p1;
wire  signed [63:0] sext_ln204_fu_358_p1;
wire   [63:0] zext_ln203_13_fu_363_p1;
wire   [4:0] tmp_63_fu_152_p3;
wire   [5:0] zext_ln204_fu_148_p1;
wire   [5:0] zext_ln204_10_fu_160_p1;
wire   [5:0] tmp_64_fu_170_p3;
wire   [3:0] tmp_65_fu_186_p3;
wire   [6:0] zext_ln203_11_fu_182_p1;
wire   [6:0] zext_ln203_12_fu_194_p1;
wire   [6:0] sub_ln203_fu_198_p2;
wire   [7:0] tmp_66_fu_208_p3;
wire   [7:0] zext_ln203_fu_178_p1;
wire   [5:0] zext_ln204_12_fu_238_p1;
wire   [5:0] add_ln204_4_fu_242_p2;
wire   [4:0] trunc_ln204_fu_247_p1;
wire   [8:0] tmp_85_fu_259_p3;
wire   [9:0] p_shl7_cast_fu_251_p3;
wire   [9:0] zext_ln204_13_fu_267_p1;
wire   [7:0] zext_ln204_11_fu_234_p1;
wire   [7:0] add_ln203_fu_277_p2;
wire   [5:0] trunc_ln203_fu_282_p1;
wire   [10:0] p_shl5_cast_fu_286_p3;
wire   [10:0] p_shl6_cast_fu_294_p3;
wire   [9:0] zext_ln204_16_fu_334_p1;
wire   [9:0] add_ln204_5_fu_338_p2;
wire   [10:0] zext_ln204_15_fu_330_p1;
wire   [7:0] zext_ln204_14_fu_326_p1;
wire   [7:0] add_ln204_6_fu_353_p2;
wire  signed [39:0] sext_ln203_2_fu_367_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

cache_update_k_cakbM #(
    .DataWidth( 20 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
k_cache_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_cache_V_address0),
    .ce0(k_cache_V_ce0),
    .q0(k_cache_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_103 <= i_reg_382;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_103 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_114 <= j_reg_405;
    end else if (((icmp_ln201_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_114 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_125 <= k_reg_428;
    end else if (((icmp_ln202_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_125 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_6_reg_438 <= add_ln203_6_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln201_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln204_reg_387 <= add_ln204_fu_164_p2;
        sext_ln203_reg_392[7 : 1] <= sext_ln203_fu_204_p1[7 : 1];
        sub_ln204_reg_397[7 : 3] <= sub_ln204_fu_216_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_382 <= i_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln204_reg_420 <= icmp_ln204_fu_308_p2;
        sub_ln203_4_reg_415[10 : 3] <= sub_ln203_4_fu_302_p2[10 : 3];
        sub_ln204_2_reg_410[9 : 3] <= sub_ln204_2_fu_271_p2[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_405 <= j_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_428 <= k_fu_320_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln201_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln201_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_ce0 = 1'b1;
    end else begin
        cache_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_we0 = 1'b1;
    end else begin
        cache_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_cache_V_ce0 = 1'b1;
    end else begin
        k_cache_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        update_0_V_ce0 = 1'b1;
    end else begin
        update_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln201_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln202_fu_222_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln203_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_6_fu_348_p2 = (sub_ln203_4_reg_415 + zext_ln204_15_fu_330_p1);

assign add_ln203_fu_277_p2 = ($signed(sext_ln203_reg_392) + $signed(zext_ln204_11_fu_234_p1));

assign add_ln204_4_fu_242_p2 = (add_ln204_reg_387 + zext_ln204_12_fu_238_p1);

assign add_ln204_5_fu_338_p2 = (sub_ln204_2_reg_410 + zext_ln204_16_fu_334_p1);

assign add_ln204_6_fu_353_p2 = (sub_ln204_reg_397 + zext_ln204_14_fu_326_p1);

assign add_ln204_fu_164_p2 = (zext_ln204_fu_148_p1 + zext_ln204_10_fu_160_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign cache_out_V_address0 = zext_ln203_13_fu_363_p1;

assign cache_out_V_d0 = ((icmp_ln204_reg_420[0:0] === 1'b1) ? update_0_V_q0 : sext_ln203_2_fu_367_p1);

assign i_fu_142_p2 = (i_0_reg_103 + 3'd1);

assign icmp_ln201_fu_136_p2 = ((i_0_reg_103 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_222_p2 = ((j_0_reg_114 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_314_p2 = ((k_0_reg_125 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_308_p2 = ((j_0_reg_114 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_228_p2 = (j_0_reg_114 + 3'd1);

assign k_cache_V_address0 = zext_ln204_17_fu_343_p1;

assign k_fu_320_p2 = (k_0_reg_125 + 5'd1);

assign p_shl5_cast_fu_286_p3 = {{trunc_ln203_fu_282_p1}, {5'd0}};

assign p_shl6_cast_fu_294_p3 = {{add_ln203_fu_277_p2}, {3'd0}};

assign p_shl7_cast_fu_251_p3 = {{trunc_ln204_fu_247_p1}, {5'd0}};

assign sext_ln203_2_fu_367_p1 = $signed(k_cache_V_q0);

assign sext_ln203_fu_204_p1 = $signed(sub_ln203_fu_198_p2);

assign sext_ln204_fu_358_p1 = $signed(add_ln204_6_fu_353_p2);

assign sub_ln203_4_fu_302_p2 = (p_shl5_cast_fu_286_p3 - p_shl6_cast_fu_294_p3);

assign sub_ln203_fu_198_p2 = (zext_ln203_11_fu_182_p1 - zext_ln203_12_fu_194_p1);

assign sub_ln204_2_fu_271_p2 = (p_shl7_cast_fu_251_p3 - zext_ln204_13_fu_267_p1);

assign sub_ln204_fu_216_p2 = (tmp_66_fu_208_p3 - zext_ln203_fu_178_p1);

assign tmp_63_fu_152_p3 = {{i_0_reg_103}, {2'd0}};

assign tmp_64_fu_170_p3 = {{i_0_reg_103}, {3'd0}};

assign tmp_65_fu_186_p3 = {{i_0_reg_103}, {1'd0}};

assign tmp_66_fu_208_p3 = {{i_0_reg_103}, {5'd0}};

assign tmp_85_fu_259_p3 = {{add_ln204_4_fu_242_p2}, {3'd0}};

assign trunc_ln203_fu_282_p1 = add_ln203_fu_277_p2[5:0];

assign trunc_ln204_fu_247_p1 = add_ln204_4_fu_242_p2[4:0];

assign update_0_V_address0 = sext_ln204_fu_358_p1;

assign zext_ln203_11_fu_182_p1 = tmp_64_fu_170_p3;

assign zext_ln203_12_fu_194_p1 = tmp_65_fu_186_p3;

assign zext_ln203_13_fu_363_p1 = add_ln203_6_reg_438;

assign zext_ln203_fu_178_p1 = tmp_64_fu_170_p3;

assign zext_ln204_10_fu_160_p1 = tmp_63_fu_152_p3;

assign zext_ln204_11_fu_234_p1 = j_0_reg_114;

assign zext_ln204_12_fu_238_p1 = j_0_reg_114;

assign zext_ln204_13_fu_267_p1 = tmp_85_fu_259_p3;

assign zext_ln204_14_fu_326_p1 = k_0_reg_125;

assign zext_ln204_15_fu_330_p1 = k_0_reg_125;

assign zext_ln204_16_fu_334_p1 = k_0_reg_125;

assign zext_ln204_17_fu_343_p1 = add_ln204_5_fu_338_p2;

assign zext_ln204_fu_148_p1 = i_0_reg_103;

always @ (posedge ap_clk) begin
    sext_ln203_reg_392[0] <= 1'b0;
    sub_ln204_reg_397[2:0] <= 3'b000;
    sub_ln204_2_reg_410[2:0] <= 3'b000;
    sub_ln203_4_reg_415[2:0] <= 3'b000;
end

endmodule //cache_update
