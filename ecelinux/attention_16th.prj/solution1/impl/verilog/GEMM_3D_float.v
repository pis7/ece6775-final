// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_1_0_V_address0,
        input_1_0_V_ce0,
        input_1_0_V_q0,
        input_1_0_V_address1,
        input_1_0_V_ce1,
        input_1_0_V_q1,
        input_2_V_address0,
        input_2_V_ce0,
        input_2_V_q0,
        input_2_V_address1,
        input_2_V_ce1,
        input_2_V_q1,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_1_0_V_address0;
output   input_1_0_V_ce0;
input  [37:0] input_1_0_V_q0;
output  [4:0] input_1_0_V_address1;
output   input_1_0_V_ce1;
input  [37:0] input_1_0_V_q1;
output  [9:0] input_2_V_address0;
output   input_2_V_ce0;
input  [37:0] input_2_V_q0;
output  [9:0] input_2_V_address1;
output   input_2_V_ce1;
input  [37:0] input_2_V_q1;
output  [6:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [37:0] output_0_V_d0;
input  [37:0] output_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_1_0_V_address0;
reg input_1_0_V_ce0;
reg input_1_0_V_ce1;
reg[9:0] input_2_V_address0;
reg input_2_V_ce0;
reg input_2_V_ce1;
reg[6:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg[37:0] output_0_V_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [37:0] reg_200;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
reg   [37:0] reg_204;
wire   [2:0] i_fu_214_p2;
reg   [2:0] i_reg_663;
wire    ap_CS_fsm_state2;
wire  signed [7:0] sext_ln1116_fu_254_p1;
reg  signed [7:0] sext_ln1116_reg_668;
wire   [0:0] icmp_ln236_fu_208_p2;
reg   [4:0] input_1_0_V_addr_3_reg_675;
wire   [10:0] sub_ln1117_fu_289_p2;
reg   [10:0] sub_ln1117_reg_680;
wire   [7:0] sub_ln203_fu_303_p2;
reg   [7:0] sub_ln203_reg_685;
wire   [4:0] add_ln238_fu_315_p2;
reg   [4:0] add_ln238_reg_693;
wire    ap_CS_fsm_state3;
wire   [10:0] zext_ln1117_1_fu_325_p1;
reg   [10:0] zext_ln1117_1_reg_698;
wire   [0:0] icmp_ln238_fu_309_p2;
reg   [9:0] input_2_V_addr_3_reg_705;
reg   [6:0] output_0_V_addr_reg_710;
wire  signed [7:0] add_ln1116_1_fu_353_p2;
reg  signed [7:0] add_ln1116_1_reg_715;
wire    ap_CS_fsm_state4;
wire   [5:0] trunc_ln1117_1_fu_358_p1;
reg   [5:0] trunc_ln1117_1_reg_721;
wire    ap_CS_fsm_state5;
wire  signed [7:0] add_ln1116_2_fu_406_p2;
reg  signed [7:0] add_ln1116_2_reg_736;
wire   [5:0] trunc_ln1117_2_fu_411_p1;
reg   [5:0] trunc_ln1117_2_reg_742;
wire   [57:0] mul_ln1192_fu_457_p2;
reg   [57:0] mul_ln1192_reg_757;
wire   [57:0] mul_ln1192_1_fu_484_p2;
reg   [57:0] mul_ln1192_1_reg_762;
wire    ap_CS_fsm_state8;
reg   [37:0] tmp_78_reg_767;
reg   [37:0] trunc_ln708_s_reg_772;
wire    ap_CS_fsm_state9;
wire  signed [7:0] add_ln1116_3_fu_539_p2;
reg  signed [7:0] add_ln1116_3_reg_780;
wire   [0:0] icmp_ln240_fu_529_p2;
wire   [10:0] add_ln1117_3_fu_570_p2;
reg   [10:0] add_ln1117_3_reg_785;
wire   [2:0] xor_ln240_fu_575_p2;
reg   [2:0] xor_ln240_reg_790;
wire    ap_CS_fsm_state10;
reg   [37:0] input_1_0_V_load_3_reg_805;
reg   [37:0] input_2_V_load_3_reg_810;
wire   [57:0] mul_ln1192_2_fu_597_p2;
reg   [57:0] mul_ln1192_2_reg_815;
wire    ap_CS_fsm_state12;
wire   [57:0] mul_ln1192_3_fu_609_p2;
reg   [57:0] mul_ln1192_3_reg_820;
reg   [37:0] trunc_ln708_30_reg_825;
wire    ap_CS_fsm_state13;
reg   [2:0] i_0_reg_166;
reg   [4:0] k_0_0_reg_177;
reg   [2:0] l_0_0_0_reg_188;
wire    ap_CS_fsm_state14;
wire  signed [63:0] sext_ln1116_3_fu_264_p1;
wire   [63:0] zext_ln1117_2_fu_334_p1;
wire  signed [63:0] sext_ln203_fu_344_p1;
wire  signed [63:0] sext_ln1116_4_fu_362_p1;
wire   [63:0] zext_ln1117_3_fu_391_p1;
wire  signed [63:0] sext_ln1116_5_fu_415_p1;
wire   [63:0] zext_ln1117_4_fu_444_p1;
wire  signed [63:0] sext_ln1116_6_fu_581_p1;
wire   [63:0] zext_ln1117_5_fu_585_p1;
wire   [5:0] tmp_75_fu_220_p3;
wire   [3:0] tmp_76_fu_236_p3;
wire   [6:0] zext_ln1116_4_fu_232_p1;
wire   [6:0] zext_ln1116_5_fu_244_p1;
wire   [6:0] sub_ln1116_fu_248_p2;
wire  signed [7:0] add_ln1116_fu_258_p2;
wire   [5:0] trunc_ln1117_fu_269_p1;
wire   [10:0] p_shl2_cast_fu_273_p3;
wire   [10:0] p_shl3_cast_fu_281_p3;
wire   [7:0] tmp_77_fu_295_p3;
wire   [7:0] zext_ln1116_fu_228_p1;
wire   [10:0] add_ln1117_fu_329_p2;
wire   [7:0] zext_ln1117_fu_321_p1;
wire   [7:0] add_ln203_fu_339_p2;
wire   [7:0] zext_ln1116_6_fu_349_p1;
wire   [10:0] p_shl8_cast_fu_366_p3;
wire   [10:0] p_shl9_cast_fu_373_p3;
wire   [10:0] sub_ln1117_1_fu_380_p2;
wire   [10:0] add_ln1117_1_fu_386_p2;
wire   [2:0] or_ln240_fu_396_p2;
wire   [7:0] zext_ln1116_7_fu_402_p1;
wire   [10:0] p_shl6_cast_fu_419_p3;
wire   [10:0] p_shl7_cast_fu_426_p3;
wire   [10:0] sub_ln1117_2_fu_433_p2;
wire   [10:0] add_ln1117_2_fu_439_p2;
wire  signed [37:0] mul_ln1192_fu_457_p0;
wire  signed [37:0] mul_ln1192_fu_457_p1;
wire   [57:0] shl_ln_fu_463_p3;
wire  signed [37:0] mul_ln1192_1_fu_484_p0;
wire  signed [37:0] mul_ln1192_1_fu_484_p1;
wire   [57:0] add_ln1192_fu_471_p2;
wire   [57:0] shl_ln728_1_fu_500_p3;
wire   [57:0] add_ln1192_2_fu_507_p2;
wire   [2:0] or_ln240_1_fu_523_p2;
wire   [7:0] zext_ln1116_8_fu_535_p1;
wire   [5:0] trunc_ln1117_3_fu_544_p1;
wire   [10:0] p_shl_cast_fu_548_p3;
wire   [10:0] p_shl1_cast_fu_556_p3;
wire   [10:0] sub_ln1117_3_fu_564_p2;
wire  signed [37:0] mul_ln1192_2_fu_597_p0;
wire  signed [37:0] mul_ln1192_2_fu_597_p1;
wire  signed [37:0] mul_ln1192_3_fu_609_p0;
wire  signed [37:0] mul_ln1192_3_fu_609_p1;
wire   [57:0] shl_ln728_2_fu_615_p3;
wire   [57:0] add_ln1192_3_fu_622_p2;
wire   [37:0] tmp_79_fu_627_p4;
wire   [57:0] shl_ln728_3_fu_637_p3;
wire   [57:0] add_ln1192_4_fu_645_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln238_fu_309_p2 == 1'd1))) begin
        i_0_reg_166 <= i_reg_663;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_166 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln240_fu_529_p2 == 1'd1))) begin
        k_0_0_reg_177 <= add_ln238_reg_693;
    end else if (((icmp_ln236_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_177 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        l_0_0_0_reg_188 <= xor_ln240_reg_790;
    end else if (((icmp_ln238_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l_0_0_0_reg_188 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln1116_1_reg_715 <= add_ln1116_1_fu_353_p2;
        trunc_ln1117_1_reg_721 <= trunc_ln1117_1_fu_358_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln1116_2_reg_736[7 : 1] <= add_ln1116_2_fu_406_p2[7 : 1];
        trunc_ln1117_2_reg_742[5 : 1] <= trunc_ln1117_2_fu_411_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln1116_3_reg_780 <= add_ln1116_3_fu_539_p2;
        add_ln1117_3_reg_785 <= add_ln1117_3_fu_570_p2;
        xor_ln240_reg_790 <= xor_ln240_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln238_reg_693 <= add_ln238_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_663 <= i_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln236_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_1_0_V_addr_3_reg_675[4 : 1] <= sext_ln1116_3_fu_264_p1[4 : 1];
        sext_ln1116_reg_668[7 : 1] <= sext_ln1116_fu_254_p1[7 : 1];
        sub_ln1117_reg_680[10 : 4] <= sub_ln1117_fu_289_p2[10 : 4];
        sub_ln203_reg_685[7 : 3] <= sub_ln203_fu_303_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_1_0_V_load_3_reg_805 <= input_1_0_V_q1;
        input_2_V_load_3_reg_810 <= input_2_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_2_V_addr_3_reg_705 <= zext_ln1117_2_fu_334_p1;
        output_0_V_addr_reg_710 <= sext_ln203_fu_344_p1;
        zext_ln1117_1_reg_698[4 : 0] <= zext_ln1117_1_fu_325_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln1192_1_reg_762 <= mul_ln1192_1_fu_484_p2;
        tmp_78_reg_767 <= {{add_ln1192_fu_471_p2[57:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln1192_2_reg_815 <= mul_ln1192_2_fu_597_p2;
        mul_ln1192_3_reg_820 <= mul_ln1192_3_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1192_reg_757 <= mul_ln1192_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_200 <= input_1_0_V_q0;
        reg_204 <= input_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln708_30_reg_825 <= {{add_ln1192_4_fu_645_p2[57:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln708_s_reg_772 <= {{add_ln1192_2_fu_507_p2[57:20]}};
    end
end

always @ (*) begin
    if ((((icmp_ln236_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln236_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_1_0_V_address0 = sext_ln1116_6_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_0_V_address0 = sext_ln1116_5_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_0_V_address0 = sext_ln1116_4_fu_362_p1;
    end else begin
        input_1_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        input_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_1_0_V_ce1 = 1'b1;
    end else begin
        input_1_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_2_V_address0 = zext_ln1117_5_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_2_V_address0 = zext_ln1117_4_fu_444_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_V_address0 = zext_ln1117_3_fu_391_p1;
    end else begin
        input_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        input_2_V_ce0 = 1'b1;
    end else begin
        input_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_2_V_ce1 = 1'b1;
    end else begin
        input_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        output_0_V_address0 = output_0_V_addr_reg_710;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_V_address0 = sext_ln203_fu_344_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_V_d0 = trunc_ln708_30_reg_825;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_0_V_d0 = {{add_ln1192_2_fu_507_p2[57:20]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_V_d0 = 38'd0;
    end else begin
        output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln238_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln236_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln238_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln240_fu_529_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_1_fu_353_p2 = ($signed(zext_ln1116_6_fu_349_p1) + $signed(sext_ln1116_reg_668));

assign add_ln1116_2_fu_406_p2 = ($signed(zext_ln1116_7_fu_402_p1) + $signed(sext_ln1116_reg_668));

assign add_ln1116_3_fu_539_p2 = ($signed(zext_ln1116_8_fu_535_p1) + $signed(sext_ln1116_reg_668));

assign add_ln1116_fu_258_p2 = ($signed(8'd3) + $signed(sext_ln1116_fu_254_p1));

assign add_ln1117_1_fu_386_p2 = (zext_ln1117_1_reg_698 + sub_ln1117_1_fu_380_p2);

assign add_ln1117_2_fu_439_p2 = (zext_ln1117_1_reg_698 + sub_ln1117_2_fu_433_p2);

assign add_ln1117_3_fu_570_p2 = (zext_ln1117_1_reg_698 + sub_ln1117_3_fu_564_p2);

assign add_ln1117_fu_329_p2 = (sub_ln1117_reg_680 + zext_ln1117_1_fu_325_p1);

assign add_ln1192_2_fu_507_p2 = (shl_ln728_1_fu_500_p3 + mul_ln1192_1_reg_762);

assign add_ln1192_3_fu_622_p2 = (shl_ln728_2_fu_615_p3 + mul_ln1192_2_reg_815);

assign add_ln1192_4_fu_645_p2 = (shl_ln728_3_fu_637_p3 + mul_ln1192_3_reg_820);

assign add_ln1192_fu_471_p2 = (shl_ln_fu_463_p3 + mul_ln1192_reg_757);

assign add_ln203_fu_339_p2 = (sub_ln203_reg_685 + zext_ln1117_fu_321_p1);

assign add_ln238_fu_315_p2 = (k_0_0_reg_177 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_214_p2 = (i_0_reg_166 + 3'd1);

assign icmp_ln236_fu_208_p2 = ((i_0_reg_166 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_309_p2 = ((k_0_0_reg_177 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_529_p2 = ((or_ln240_1_fu_523_p2 == 3'd6) ? 1'b1 : 1'b0);

assign input_1_0_V_address1 = input_1_0_V_addr_3_reg_675;

assign input_2_V_address1 = input_2_V_addr_3_reg_705;

assign mul_ln1192_1_fu_484_p0 = reg_200;

assign mul_ln1192_1_fu_484_p1 = reg_204;

assign mul_ln1192_1_fu_484_p2 = ($signed(mul_ln1192_1_fu_484_p0) * $signed(mul_ln1192_1_fu_484_p1));

assign mul_ln1192_2_fu_597_p0 = reg_200;

assign mul_ln1192_2_fu_597_p1 = reg_204;

assign mul_ln1192_2_fu_597_p2 = ($signed(mul_ln1192_2_fu_597_p0) * $signed(mul_ln1192_2_fu_597_p1));

assign mul_ln1192_3_fu_609_p0 = input_1_0_V_load_3_reg_805;

assign mul_ln1192_3_fu_609_p1 = input_2_V_load_3_reg_810;

assign mul_ln1192_3_fu_609_p2 = ($signed(mul_ln1192_3_fu_609_p0) * $signed(mul_ln1192_3_fu_609_p1));

assign mul_ln1192_fu_457_p0 = reg_200;

assign mul_ln1192_fu_457_p1 = reg_204;

assign mul_ln1192_fu_457_p2 = ($signed(mul_ln1192_fu_457_p0) * $signed(mul_ln1192_fu_457_p1));

assign or_ln240_1_fu_523_p2 = (l_0_0_0_reg_188 | 3'd2);

assign or_ln240_fu_396_p2 = (l_0_0_0_reg_188 | 3'd1);

assign p_shl1_cast_fu_556_p3 = {{add_ln1116_3_fu_539_p2}, {3'd0}};

assign p_shl2_cast_fu_273_p3 = {{trunc_ln1117_fu_269_p1}, {5'd0}};

assign p_shl3_cast_fu_281_p3 = {{add_ln1116_fu_258_p2}, {3'd0}};

assign p_shl6_cast_fu_419_p3 = {{trunc_ln1117_2_reg_742}, {5'd0}};

assign p_shl7_cast_fu_426_p3 = {{add_ln1116_2_reg_736}, {3'd0}};

assign p_shl8_cast_fu_366_p3 = {{trunc_ln1117_1_reg_721}, {5'd0}};

assign p_shl9_cast_fu_373_p3 = {{add_ln1116_1_reg_715}, {3'd0}};

assign p_shl_cast_fu_548_p3 = {{trunc_ln1117_3_fu_544_p1}, {5'd0}};

assign sext_ln1116_3_fu_264_p1 = add_ln1116_fu_258_p2;

assign sext_ln1116_4_fu_362_p1 = add_ln1116_1_reg_715;

assign sext_ln1116_5_fu_415_p1 = add_ln1116_2_reg_736;

assign sext_ln1116_6_fu_581_p1 = add_ln1116_3_reg_780;

assign sext_ln1116_fu_254_p1 = $signed(sub_ln1116_fu_248_p2);

assign sext_ln203_fu_344_p1 = $signed(add_ln203_fu_339_p2);

assign shl_ln728_1_fu_500_p3 = {{tmp_78_reg_767}, {20'd0}};

assign shl_ln728_2_fu_615_p3 = {{trunc_ln708_s_reg_772}, {20'd0}};

assign shl_ln728_3_fu_637_p3 = {{tmp_79_fu_627_p4}, {20'd0}};

assign shl_ln_fu_463_p3 = {{output_0_V_q0}, {20'd0}};

assign sub_ln1116_fu_248_p2 = (zext_ln1116_4_fu_232_p1 - zext_ln1116_5_fu_244_p1);

assign sub_ln1117_1_fu_380_p2 = (p_shl8_cast_fu_366_p3 - p_shl9_cast_fu_373_p3);

assign sub_ln1117_2_fu_433_p2 = (p_shl6_cast_fu_419_p3 - p_shl7_cast_fu_426_p3);

assign sub_ln1117_3_fu_564_p2 = (p_shl_cast_fu_548_p3 - p_shl1_cast_fu_556_p3);

assign sub_ln1117_fu_289_p2 = (p_shl2_cast_fu_273_p3 - p_shl3_cast_fu_281_p3);

assign sub_ln203_fu_303_p2 = (tmp_77_fu_295_p3 - zext_ln1116_fu_228_p1);

assign tmp_75_fu_220_p3 = {{i_0_reg_166}, {3'd0}};

assign tmp_76_fu_236_p3 = {{i_0_reg_166}, {1'd0}};

assign tmp_77_fu_295_p3 = {{i_0_reg_166}, {5'd0}};

assign tmp_79_fu_627_p4 = {{add_ln1192_3_fu_622_p2[57:20]}};

assign trunc_ln1117_1_fu_358_p1 = add_ln1116_1_fu_353_p2[5:0];

assign trunc_ln1117_2_fu_411_p1 = add_ln1116_2_fu_406_p2[5:0];

assign trunc_ln1117_3_fu_544_p1 = add_ln1116_3_fu_539_p2[5:0];

assign trunc_ln1117_fu_269_p1 = add_ln1116_fu_258_p2[5:0];

assign xor_ln240_fu_575_p2 = (l_0_0_0_reg_188 ^ 3'd4);

assign zext_ln1116_4_fu_232_p1 = tmp_75_fu_220_p3;

assign zext_ln1116_5_fu_244_p1 = tmp_76_fu_236_p3;

assign zext_ln1116_6_fu_349_p1 = l_0_0_0_reg_188;

assign zext_ln1116_7_fu_402_p1 = or_ln240_fu_396_p2;

assign zext_ln1116_8_fu_535_p1 = or_ln240_1_fu_523_p2;

assign zext_ln1116_fu_228_p1 = tmp_75_fu_220_p3;

assign zext_ln1117_1_fu_325_p1 = k_0_0_reg_177;

assign zext_ln1117_2_fu_334_p1 = add_ln1117_fu_329_p2;

assign zext_ln1117_3_fu_391_p1 = add_ln1117_1_fu_386_p2;

assign zext_ln1117_4_fu_444_p1 = add_ln1117_2_fu_439_p2;

assign zext_ln1117_5_fu_585_p1 = add_ln1117_3_reg_785;

assign zext_ln1117_fu_321_p1 = k_0_0_reg_177;

always @ (posedge ap_clk) begin
    sext_ln1116_reg_668[0] <= 1'b0;
    input_1_0_V_addr_3_reg_675[0] <= 1'b1;
    sub_ln1117_reg_680[3:0] <= 4'b1000;
    sub_ln203_reg_685[2:0] <= 3'b000;
    zext_ln1117_1_reg_698[10:5] <= 6'b000000;
    add_ln1116_2_reg_736[0] <= 1'b1;
    trunc_ln1117_2_reg_742[0] <= 1'b1;
end

endmodule //GEMM_3D_float
