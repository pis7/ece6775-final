-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cache_update_k_cakbM_rom is 
    generic(
             DWIDTH     : integer := 20; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cache_update_k_cakbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000101000010", 1 => "00000001010001111110", 
    2 => "11111101100100110111", 3 => "00000001000110101000", 
    4 => "11111111111101011110", 5 => "00000001000001100101", 
    6 => "11111010101010001101", 7 => "11111110000100011001", 
    8 => "11111110100010101010", 9 => "00000000001011010110", 
    10 => "11111111011101111100", 11 => "11111111101010100011", 
    12 => "00101001001001010110", 13 => "11010100011111110100", 
    14 => "00101000001110111010", 15 => "10111011101000110111", 
    16 => "11001011010011110101", 17 => "11010011011001001000", 
    18 => "11000101100100001101", 19 => "11111010001101100110", 
    20 => "11000111101100111110", 21 => "11011101000111011000", 
    22 => "00010000011110010010", 23 => "11100111000110010001", 
    24 => "00111100101101001101", 25 => "11100111010010000111", 
    26 => "11110010010010010101", 27 => "11010001111101010110", 
    28 => "11100001011111001101", 29 => "11100011001111100100", 
    30 => "11100010111000011101", 31 => "11101101000101100010", 
    32 => "00000100101000111111", 33 => "11111001011011011111", 
    34 => "00001110101110001000", 35 => "11100111111010000110", 
    36 => "00011000000001101001", 37 => "00001001010000111011", 
    38 => "00010010111110101001", 39 => "11111001101111001111", 
    40 => "11101111110111000110", 41 => "11110110100101111111", 
    42 => "11111100111000010011", 43 => "11110111010111010111", 
    44 => "11010001110000100111", 45 => "00010000001111101100", 
    46 => "00010011001000000100", 47 => "11101000010110101100", 
    48 => "11101011111101010010", 49 => "00011010000011010000", 
    50 => "11110011001000010001", 51 => "11101110101011010111", 
    52 => "00000010101100100100", 53 => "00001000110001100111", 
    54 => "11101000010001000110", 55 => "00011010100111001100", 
    56 => "00001100111010000110", 57 => "00000101110001100111", 
    58 => "00011011011110110000", 59 => "11110000011000111000", 
    60 => "00000010000001111001", 61 => "00000000010101011100", 
    62 => "00000000001111001000", 63 => "11111101110010101111", 
    64 => "11111010101111010000", 65 => "00000000111011010001", 
    66 => "11111111100000011110", 67 => "00000000010001101010", 
    68 => "11111110010011100010", 69 => "11111110000000100111", 
    70 => "00000011101011110101", 71 => "11111110100111101101", 
    72 => "11010110101101110011", 73 => "11111000101010001000", 
    74 => "00011111100000101010", 75 => "00010100100101111011", 
    76 => "11110100100101010001", 77 => "11101110010010101111", 
    78 => "00110110001001100100", 79 => "11110010111011010111", 
    80 => "00010000100011001101", 81 => "11110011111101101011", 
    82 => "11011100010101101111", 83 => "11110010100111101110", 
    84 => "11011010000100101110", 85 => "11100001110010101010", 
    86 => "01000110010100010101", 87 => "00100100111100001011", 
    88 => "00001010001100100010", 89 => "11001000001000111010", 
    90 => "00101001010101111110", 91 => "11100000100001000010", 
    92 => "00010011110101000001", 93 => "11110111000100101111", 
    94 => "11001100101101111110", 95 => "11010111000111111111", 
    96 => "00000111101110111010", 97 => "11010110110110010110", 
    98 => "00101101011110011010", 99 => "11111011000011010001", 
    100 => "11110100000000010011", 101 => "11101001110100001011", 
    102 => "00001100010100101011", 103 => "11101011111011001000", 
    104 => "11111011010101101000", 105 => "11101101101010011100", 
    106 => "11011101000111001111", 107 => "11101001011100111011", 
    108 => "00010101001000100100", 109 => "11101001100010000100", 
    110 => "00000011011111010110", 111 => "11101111001111111001", 
    112 => "11110001110100111001", 113 => "00010110011111110010", 
    114 => "00000101111111100100", 115 => "00001111011010101110", 
    116 => "11110000111110010100", 117 => "11101001001110000010", 
    118 => "00000000011100001001", 119 => "11101101011110101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cache_update_k_cakbM is
    generic (
        DataWidth : INTEGER := 20;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cache_update_k_cakbM is
    component cache_update_k_cakbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cache_update_k_cakbM_rom_U :  component cache_update_k_cakbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


