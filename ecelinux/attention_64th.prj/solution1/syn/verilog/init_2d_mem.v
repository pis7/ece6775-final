// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module init_2d_mem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mem_0_V_address0,
        mem_0_V_ce0,
        mem_0_V_we0,
        mem_0_V_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] mem_0_V_address0;
output   mem_0_V_ce0;
output   mem_0_V_we0;
output  [37:0] mem_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mem_0_V_ce0;
reg mem_0_V_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] add_ln25_fu_57_p2;
wire    ap_CS_fsm_state2;
reg   [4:0] j_0_0_reg_40;
wire   [0:0] icmp_ln25_fu_51_p2;
wire   [63:0] zext_ln26_fu_63_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_51_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_0_reg_40 <= add_ln25_fu_57_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_40 <= 5'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln25_fu_51_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_51_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mem_0_V_ce0 = 1'b1;
    end else begin
        mem_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_51_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_0_V_we0 = 1'b1;
    end else begin
        mem_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_51_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_57_p2 = (j_0_0_reg_40 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln25_fu_51_p2 = ((j_0_0_reg_40 == 5'd24) ? 1'b1 : 1'b0);

assign mem_0_V_address0 = zext_ln26_fu_63_p1;

assign mem_0_V_d0 = 38'd0;

assign zext_ln26_fu_63_p1 = j_0_0_reg_40;

endmodule //init_2d_mem
