-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_rotary_pos_emb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_q_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_q_0_V_ce0 : OUT STD_LOGIC;
    input_q_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_q_0_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_q_0_V_ce1 : OUT STD_LOGIC;
    input_q_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_k_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_k_0_V_ce0 : OUT STD_LOGIC;
    input_k_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_k_0_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_k_0_V_ce1 : OUT STD_LOGIC;
    input_k_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_q_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_q_0_V_ce0 : OUT STD_LOGIC;
    output_q_0_V_we0 : OUT STD_LOGIC;
    output_q_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_k_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_k_0_V_ce0 : OUT STD_LOGIC;
    output_k_0_V_we0 : OUT STD_LOGIC;
    output_k_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of apply_rotary_pos_emb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_tab_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_tab_V_5_ce0 : STD_LOGIC;
    signal cos_tab_V_5_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_tab_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_tab_V_5_ce0 : STD_LOGIC;
    signal sin_tab_V_5_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_558 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln1265_fu_338_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1265_reg_563 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln202_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln204_fu_354_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln204_reg_572 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln203_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln204_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1265_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_416_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_612 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln1116_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1116_reg_617 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln214_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln216_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln216_reg_625 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sext_ln1116_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln216_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_tab_V_5_load_reg_666 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_q_0_V_load_2_reg_671 : STD_LOGIC_VECTOR (39 downto 0);
    signal sin_tab_V_5_load_reg_676 : STD_LOGIC_VECTOR (16 downto 0);
    signal rotated_q_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_q_0_V_load_reg_681 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_k_0_V_load_2_reg_686 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_load_reg_691 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_fu_489_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_reg_696 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln1118_1_fu_501_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_1_reg_701 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_2_fu_510_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_2_reg_706 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_3_fu_519_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_3_reg_711 : STD_LOGIC_VECTOR (55 downto 0);
    signal rotated_q_0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rotated_q_0_V_ce0 : STD_LOGIC;
    signal rotated_q_0_V_we0 : STD_LOGIC;
    signal rotated_q_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_q_0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rotated_q_0_V_ce1 : STD_LOGIC;
    signal rotated_q_0_V_we1 : STD_LOGIC;
    signal rotated_k_0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rotated_k_0_V_ce0 : STD_LOGIC;
    signal rotated_k_0_V_we0 : STD_LOGIC;
    signal rotated_k_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rotated_k_0_V_ce1 : STD_LOGIC;
    signal rotated_k_0_V_we1 : STD_LOGIC;
    signal i_0_reg_262 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_0_0_reg_273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i14_0_reg_284 : STD_LOGIC_VECTOR (1 downto 0);
    signal k16_0_0_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln217_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_326_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_72_fu_318_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1265_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_fu_360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_fu_364_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln204_fu_344_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln205_fu_375_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1265_3_fu_381_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1265_fu_385_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_75_fu_430_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_74_fu_422_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_fu_438_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_2_fu_466_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_470_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1118_fu_489_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_2_fu_486_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_fu_489_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_1_fu_501_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_4_fu_498_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_1_fu_501_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_2_fu_510_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_510_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_3_fu_519_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_519_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln1192_fu_525_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_1_fu_540_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component apply_rotary_pos_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component apply_rotary_pos_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component apply_rotary_pos_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (39 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    cos_tab_V_5_U : component apply_rotary_pos_g8j
    generic map (
        DataWidth => 17,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_tab_V_5_address0,
        ce0 => cos_tab_V_5_ce0,
        q0 => cos_tab_V_5_q0);

    sin_tab_V_5_U : component apply_rotary_pos_hbi
    generic map (
        DataWidth => 17,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_tab_V_5_address0,
        ce0 => sin_tab_V_5_ce0,
        q0 => sin_tab_V_5_q0);

    rotated_q_0_V_U : component apply_rotary_pos_ibs
    generic map (
        DataWidth => 40,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_q_0_V_address0,
        ce0 => rotated_q_0_V_ce0,
        we0 => rotated_q_0_V_we0,
        d0 => rotated_q_0_V_d0,
        q0 => rotated_q_0_V_q0,
        address1 => rotated_q_0_V_address1,
        ce1 => rotated_q_0_V_ce1,
        we1 => rotated_q_0_V_we1,
        d1 => input_q_0_V_q1);

    rotated_k_0_V_U : component apply_rotary_pos_ibs
    generic map (
        DataWidth => 40,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_k_0_V_address0,
        ce0 => rotated_k_0_V_ce0,
        we0 => rotated_k_0_V_we0,
        d0 => rotated_k_0_V_d0,
        q0 => rotated_k_0_V_q0,
        address1 => rotated_k_0_V_address1,
        ce1 => rotated_k_0_V_ce1,
        we1 => rotated_k_0_V_we1,
        d1 => input_k_0_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i14_0_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i14_0_reg_284 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln216_fu_448_p2 = ap_const_lv1_1))) then 
                i14_0_reg_284 <= i_2_reg_612;
            end if; 
        end if;
    end process;

    i_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_262 <= ap_const_lv2_0;
            elsif (((icmp_ln204_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_262 <= i_reg_558;
            end if; 
        end if;
    end process;

    k16_0_0_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k16_0_0_reg_295 <= add_ln216_reg_625;
            elsif (((icmp_ln214_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k16_0_0_reg_295 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_0_0_reg_273 <= add_ln204_reg_572;
            elsif (((icmp_ln202_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_273 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln204_reg_572 <= add_ln204_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln216_reg_625 <= add_ln216_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                cos_tab_V_5_load_reg_666 <= cos_tab_V_5_q0;
                input_k_0_V_load_2_reg_686 <= input_k_0_V_q0;
                input_q_0_V_load_2_reg_671 <= input_q_0_V_q0;
                rotated_k_0_V_load_reg_691 <= rotated_k_0_V_q0;
                rotated_q_0_V_load_reg_681 <= rotated_q_0_V_q0;
                sin_tab_V_5_load_reg_676 <= sin_tab_V_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_612 <= i_2_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_558 <= i_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln1118_1_reg_701 <= mul_ln1118_1_fu_501_p2;
                mul_ln1118_2_reg_706 <= mul_ln1118_2_fu_510_p2;
                mul_ln1118_3_reg_711 <= mul_ln1118_3_fu_519_p2;
                mul_ln1118_reg_696 <= mul_ln1118_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sext_ln1116_reg_630 <= sext_ln1116_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln204_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln1265_reg_593 <= sext_ln1265_fu_390_p1;
                sext_ln203_reg_577 <= sext_ln203_fu_369_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sub_ln1116_reg_617(5 downto 2) <= sub_ln1116_fu_442_p2(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln1265_reg_563(5 downto 2) <= sub_ln1265_fu_338_p2(5 downto 2);
            end if;
        end if;
    end process;
    sub_ln1265_reg_563(1 downto 0) <= "00";
    sub_ln1116_reg_617(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln202_fu_306_p2, ap_CS_fsm_state3, icmp_ln204_fu_348_p2, ap_CS_fsm_state5, icmp_ln214_fu_410_p2, ap_CS_fsm_state6, icmp_ln216_fu_448_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln202_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln204_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln214_fu_410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln216_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln1116_fu_470_p2 <= std_logic_vector(unsigned(sub_ln1116_reg_617) + unsigned(zext_ln1116_2_fu_466_p1));
    add_ln1192_1_fu_540_p2 <= std_logic_vector(unsigned(mul_ln1118_2_reg_706) + unsigned(mul_ln1118_3_reg_711));
    add_ln1192_fu_525_p2 <= std_logic_vector(unsigned(mul_ln1118_reg_696) + unsigned(mul_ln1118_1_reg_701));
    add_ln1265_fu_385_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_563) + unsigned(zext_ln1265_3_fu_381_p1));
    add_ln203_fu_364_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_563) + unsigned(zext_ln203_fu_360_p1));
    add_ln204_fu_354_p2 <= std_logic_vector(unsigned(k_0_0_reg_273) + unsigned(ap_const_lv3_1));
    add_ln205_fu_375_p2 <= std_logic_vector(unsigned(zext_ln204_fu_344_p1) + unsigned(ap_const_lv4_6));
    add_ln216_fu_454_p2 <= std_logic_vector(unsigned(k16_0_0_reg_295) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln214_fu_410_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln214_fu_410_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln214_fu_410_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln214_fu_410_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cos_tab_V_5_address0 <= zext_ln217_fu_460_p1(7 - 1 downto 0);

    cos_tab_V_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cos_tab_V_5_ce0 <= ap_const_logic_1;
        else 
            cos_tab_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_416_p2 <= std_logic_vector(unsigned(i14_0_reg_284) + unsigned(ap_const_lv2_1));
    i_fu_312_p2 <= std_logic_vector(unsigned(i_0_reg_262) + unsigned(ap_const_lv2_1));
    icmp_ln202_fu_306_p2 <= "1" when (i_0_reg_262 = ap_const_lv2_2) else "0";
    icmp_ln204_fu_348_p2 <= "1" when (k_0_0_reg_273 = ap_const_lv3_6) else "0";
    icmp_ln214_fu_410_p2 <= "1" when (i14_0_reg_284 = ap_const_lv2_2) else "0";
    icmp_ln216_fu_448_p2 <= "1" when (k16_0_0_reg_295 = ap_const_lv4_C) else "0";

    input_k_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_390_p1, ap_CS_fsm_state6, sext_ln1116_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_k_0_V_address0 <= sext_ln1116_fu_475_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_address0 <= sext_ln1265_fu_390_p1(5 - 1 downto 0);
        else 
            input_k_0_V_address0 <= "XXXXX";
        end if; 
    end process;

    input_k_0_V_address1 <= sext_ln203_fu_369_p1(5 - 1 downto 0);

    input_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_k_0_V_ce0 <= ap_const_logic_1;
        else 
            input_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_k_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_ce1 <= ap_const_logic_1;
        else 
            input_k_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_390_p1, ap_CS_fsm_state6, sext_ln1116_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_q_0_V_address0 <= sext_ln1116_fu_475_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_address0 <= sext_ln1265_fu_390_p1(5 - 1 downto 0);
        else 
            input_q_0_V_address0 <= "XXXXX";
        end if; 
    end process;

    input_q_0_V_address1 <= sext_ln203_fu_369_p1(5 - 1 downto 0);

    input_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_q_0_V_ce0 <= ap_const_logic_1;
        else 
            input_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_ce1 <= ap_const_logic_1;
        else 
            input_q_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_501_p0 <= sext_ln1118_4_fu_498_p1(17 - 1 downto 0);
    mul_ln1118_1_fu_501_p1 <= rotated_q_0_V_load_reg_681;
    mul_ln1118_1_fu_501_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_501_p0) * signed(mul_ln1118_1_fu_501_p1))), 56));
    mul_ln1118_2_fu_510_p0 <= sext_ln1118_2_fu_486_p1(17 - 1 downto 0);
    mul_ln1118_2_fu_510_p1 <= input_k_0_V_load_2_reg_686;
    mul_ln1118_2_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_2_fu_510_p0) * signed(mul_ln1118_2_fu_510_p1))), 56));
    mul_ln1118_3_fu_519_p0 <= sext_ln1118_4_fu_498_p1(17 - 1 downto 0);
    mul_ln1118_3_fu_519_p1 <= rotated_k_0_V_load_reg_691;
    mul_ln1118_3_fu_519_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_3_fu_519_p0) * signed(mul_ln1118_3_fu_519_p1))), 56));
    mul_ln1118_fu_489_p0 <= sext_ln1118_2_fu_486_p1(17 - 1 downto 0);
    mul_ln1118_fu_489_p1 <= input_q_0_V_load_2_reg_671;
    mul_ln1118_fu_489_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_489_p0) * signed(mul_ln1118_fu_489_p1))), 56));
    output_k_0_V_address0 <= sext_ln1116_reg_630(5 - 1 downto 0);

    output_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_k_0_V_ce0 <= ap_const_logic_1;
        else 
            output_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_k_0_V_d0 <= add_ln1192_1_fu_540_p2(55 downto 16);

    output_k_0_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_k_0_V_we0 <= ap_const_logic_1;
        else 
            output_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_V_address0 <= sext_ln1116_reg_630(5 - 1 downto 0);

    output_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_q_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_V_d0 <= add_ln1192_fu_525_p2(55 downto 16);

    output_q_0_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_q_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_address0_assign_proc : process(sext_ln203_reg_577, ap_CS_fsm_state6, sext_ln1116_fu_475_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_V_address0 <= sext_ln1116_fu_475_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_address0 <= sext_ln203_reg_577(5 - 1 downto 0);
        else 
            rotated_k_0_V_address0 <= "XXXXX";
        end if; 
    end process;

    rotated_k_0_V_address1 <= sext_ln1265_reg_593(5 - 1 downto 0);

    rotated_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rotated_k_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_ce1 <= ap_const_logic_1;
        else 
            rotated_k_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rotated_k_0_V_d0 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(input_k_0_V_q0));

    rotated_k_0_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_we1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_we1 <= ap_const_logic_1;
        else 
            rotated_k_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_address0_assign_proc : process(sext_ln203_reg_577, ap_CS_fsm_state6, sext_ln1116_fu_475_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_V_address0 <= sext_ln1116_fu_475_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_address0 <= sext_ln203_reg_577(5 - 1 downto 0);
        else 
            rotated_q_0_V_address0 <= "XXXXX";
        end if; 
    end process;

    rotated_q_0_V_address1 <= sext_ln1265_reg_593(5 - 1 downto 0);

    rotated_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rotated_q_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_ce1 <= ap_const_logic_1;
        else 
            rotated_q_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rotated_q_0_V_d0 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(input_q_0_V_q0));

    rotated_q_0_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_we1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_we1 <= ap_const_logic_1;
        else 
            rotated_q_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1116_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_fu_470_p2),64));

        sext_ln1118_2_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_tab_V_5_load_reg_666),56));

        sext_ln1118_4_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_tab_V_5_load_reg_676),56));

        sext_ln1265_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1265_fu_385_p2),64));

        sext_ln203_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_364_p2),64));

    sin_tab_V_5_address0 <= zext_ln217_fu_460_p1(7 - 1 downto 0);

    sin_tab_V_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sin_tab_V_5_ce0 <= ap_const_logic_1;
        else 
            sin_tab_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1116_fu_442_p2 <= std_logic_vector(unsigned(tmp_74_fu_422_p3) - unsigned(zext_ln1116_fu_438_p1));
    sub_ln1265_fu_338_p2 <= std_logic_vector(unsigned(tmp_72_fu_318_p3) - unsigned(zext_ln1265_fu_334_p1));
    tmp_72_fu_318_p3 <= (i_0_reg_262 & ap_const_lv4_0);
    tmp_73_fu_326_p3 <= (i_0_reg_262 & ap_const_lv2_0);
    tmp_74_fu_422_p3 <= (i14_0_reg_284 & ap_const_lv4_0);
    tmp_75_fu_430_p3 <= (i14_0_reg_284 & ap_const_lv2_0);
    zext_ln1116_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_295),6));
    zext_ln1116_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_430_p3),6));
    zext_ln1265_3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_fu_375_p2),6));
    zext_ln1265_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_fu_326_p3),6));
    zext_ln203_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_273),6));
    zext_ln204_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_273),4));
    zext_ln217_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_295),64));
end behav;
