-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_forward_no_mu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_0_V_ce0 : OUT STD_LOGIC;
    input_0_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_0_V_ce0 : OUT STD_LOGIC;
    input_1_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_0_V_ce0 : OUT STD_LOGIC;
    input_2_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_0_V_ce0 : OUT STD_LOGIC;
    input_3_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_V_ce1 : OUT STD_LOGIC;
    output_0_V_we1 : OUT STD_LOGIC;
    output_0_V_d1 : OUT STD_LOGIC_VECTOR (39 downto 0);
    scales_0_V_read : IN STD_LOGIC_VECTOR (39 downto 0);
    packed_weights_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    packed_weights_ce0 : OUT STD_LOGIC;
    packed_weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_scale_V : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of linear_forward_no_mu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_0_reg_199 : STD_LOGIC_VECTOR (4 downto 0);
    signal ko_0_0_reg_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln161_fu_236_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal sext_ln161_reg_645 : STD_LOGIC_VECTOR (71 downto 0);
    signal icmp_ln161_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln161_reg_650_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln161_1_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_1_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln161_fu_252_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln161_reg_659 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln162_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_fu_264_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln165_reg_669 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln165_1_fu_280_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln165_1_reg_696 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state48_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state57_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state60_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state63_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state69_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state72_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state75_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state78_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state81_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal input_0_0_V_load_reg_707 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_1_0_V_load_reg_713 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_2_0_V_load_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_3_0_V_load_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_0_V_addr_reg_731 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state34_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state37_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state40_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state46_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state49_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state52_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state55_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_state58_pp0_stage2_iter18 : BOOLEAN;
    signal ap_block_state61_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_state64_pp0_stage2_iter20 : BOOLEAN;
    signal ap_block_state67_pp0_stage2_iter21 : BOOLEAN;
    signal ap_block_state70_pp0_stage2_iter22 : BOOLEAN;
    signal ap_block_state73_pp0_stage2_iter23 : BOOLEAN;
    signal ap_block_state76_pp0_stage2_iter24 : BOOLEAN;
    signal ap_block_state79_pp0_stage2_iter25 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal output_0_V_addr_reg_731_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter18_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter19_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter20_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter21_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter22_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter23_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter24_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_0_V_addr_reg_731_pp0_iter25_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln170_fu_373_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln170_reg_737 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_3_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln701_1_fu_391_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln701_1_reg_748 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_27_fu_528_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_27_reg_753 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln162_fu_534_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln162_reg_758 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln703_29_fu_617_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_29_reg_764 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln162_1_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_770_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_192_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_0_phi_fu_203_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_ko_0_0_phi_fu_215_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln165_1_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln165_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln165_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal mul_ln1148_fu_230_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1148_fu_230_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1148_fu_230_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_56_fu_290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_301_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln165_2_fu_297_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln165_3_fu_308_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln162_fu_286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln165_fu_312_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln165_fu_318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln167_fu_333_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln169_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln169_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln169_fu_366_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_4_fu_396_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln169_2_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_2_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln169_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_2_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_2_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln169_2_fu_435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln170_2_fu_442_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_2_fu_450_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_462_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln169_3_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_3_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln169_3_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_3_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_3_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln169_3_fu_501_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln170_3_fu_508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_3_fu_516_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_2_fu_458_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_3_fu_524_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln_fu_539_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln169_1_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln169_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln169_1_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln170_1_fu_579_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_1_fu_586_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_fu_546_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln703_4_fu_604_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_1_fu_594_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_28_fu_607_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_5_fu_613_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_fu_598_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_635_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_635_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1148_fu_230_p00 : STD_LOGIC_VECTOR (60 downto 0);

    component dut_sdiv_72ns_61sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (60 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    dut_sdiv_72ns_61sfYi_U22 : component dut_sdiv_72ns_61sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 76,
        din0_WIDTH => 72,
        din1_WIDTH => 61,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_635_p0,
        din1 => grp_fu_635_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_635_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_188 <= add_ln161_1_reg_654;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_188 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_0_reg_199 <= select_ln165_1_reg_696;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_0_reg_199 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ko_0_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ko_0_0_reg_211 <= add_ln162_reg_758;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ko_0_0_reg_211 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln161_1_reg_654 <= add_ln161_1_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln161_reg_659 <= add_ln161_fu_252_p2;
                icmp_ln162_reg_664 <= icmp_ln162_fu_258_p2;
                select_ln165_reg_669 <= select_ln165_fu_264_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln162_reg_758 <= add_ln162_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    add_ln703_27_reg_753(24 downto 16) <= add_ln703_27_fu_528_p2(24 downto 16);
                output_0_V_addr_reg_731 <= zext_ln165_fu_329_p1(5 - 1 downto 0);
                select_ln170_reg_737 <= select_ln170_fu_373_p3;
                sub_ln701_1_reg_748 <= sub_ln701_1_fu_391_p2;
                trunc_ln167_3_reg_742 <= packed_weights_q0(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_29_reg_764 <= add_ln703_29_fu_617_p2;
                icmp_ln162_1_reg_770 <= icmp_ln162_1_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln161_reg_650 <= icmp_ln161_fu_240_p2;
                icmp_ln161_reg_650_pp0_iter1_reg <= icmp_ln161_reg_650;
                icmp_ln162_1_reg_770_pp0_iter10_reg <= icmp_ln162_1_reg_770_pp0_iter9_reg;
                icmp_ln162_1_reg_770_pp0_iter11_reg <= icmp_ln162_1_reg_770_pp0_iter10_reg;
                icmp_ln162_1_reg_770_pp0_iter12_reg <= icmp_ln162_1_reg_770_pp0_iter11_reg;
                icmp_ln162_1_reg_770_pp0_iter13_reg <= icmp_ln162_1_reg_770_pp0_iter12_reg;
                icmp_ln162_1_reg_770_pp0_iter14_reg <= icmp_ln162_1_reg_770_pp0_iter13_reg;
                icmp_ln162_1_reg_770_pp0_iter15_reg <= icmp_ln162_1_reg_770_pp0_iter14_reg;
                icmp_ln162_1_reg_770_pp0_iter16_reg <= icmp_ln162_1_reg_770_pp0_iter15_reg;
                icmp_ln162_1_reg_770_pp0_iter17_reg <= icmp_ln162_1_reg_770_pp0_iter16_reg;
                icmp_ln162_1_reg_770_pp0_iter18_reg <= icmp_ln162_1_reg_770_pp0_iter17_reg;
                icmp_ln162_1_reg_770_pp0_iter19_reg <= icmp_ln162_1_reg_770_pp0_iter18_reg;
                icmp_ln162_1_reg_770_pp0_iter20_reg <= icmp_ln162_1_reg_770_pp0_iter19_reg;
                icmp_ln162_1_reg_770_pp0_iter21_reg <= icmp_ln162_1_reg_770_pp0_iter20_reg;
                icmp_ln162_1_reg_770_pp0_iter22_reg <= icmp_ln162_1_reg_770_pp0_iter21_reg;
                icmp_ln162_1_reg_770_pp0_iter23_reg <= icmp_ln162_1_reg_770_pp0_iter22_reg;
                icmp_ln162_1_reg_770_pp0_iter24_reg <= icmp_ln162_1_reg_770_pp0_iter23_reg;
                icmp_ln162_1_reg_770_pp0_iter25_reg <= icmp_ln162_1_reg_770_pp0_iter24_reg;
                icmp_ln162_1_reg_770_pp0_iter26_reg <= icmp_ln162_1_reg_770_pp0_iter25_reg;
                icmp_ln162_1_reg_770_pp0_iter2_reg <= icmp_ln162_1_reg_770;
                icmp_ln162_1_reg_770_pp0_iter3_reg <= icmp_ln162_1_reg_770_pp0_iter2_reg;
                icmp_ln162_1_reg_770_pp0_iter4_reg <= icmp_ln162_1_reg_770_pp0_iter3_reg;
                icmp_ln162_1_reg_770_pp0_iter5_reg <= icmp_ln162_1_reg_770_pp0_iter4_reg;
                icmp_ln162_1_reg_770_pp0_iter6_reg <= icmp_ln162_1_reg_770_pp0_iter5_reg;
                icmp_ln162_1_reg_770_pp0_iter7_reg <= icmp_ln162_1_reg_770_pp0_iter6_reg;
                icmp_ln162_1_reg_770_pp0_iter8_reg <= icmp_ln162_1_reg_770_pp0_iter7_reg;
                icmp_ln162_1_reg_770_pp0_iter9_reg <= icmp_ln162_1_reg_770_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input_0_0_V_load_reg_707 <= input_0_0_V_q0;
                input_1_0_V_load_reg_713 <= input_1_0_V_q0;
                input_2_0_V_load_reg_719 <= input_2_0_V_q0;
                input_3_0_V_load_reg_725 <= input_3_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                output_0_V_addr_reg_731_pp0_iter10_reg <= output_0_V_addr_reg_731_pp0_iter9_reg;
                output_0_V_addr_reg_731_pp0_iter11_reg <= output_0_V_addr_reg_731_pp0_iter10_reg;
                output_0_V_addr_reg_731_pp0_iter12_reg <= output_0_V_addr_reg_731_pp0_iter11_reg;
                output_0_V_addr_reg_731_pp0_iter13_reg <= output_0_V_addr_reg_731_pp0_iter12_reg;
                output_0_V_addr_reg_731_pp0_iter14_reg <= output_0_V_addr_reg_731_pp0_iter13_reg;
                output_0_V_addr_reg_731_pp0_iter15_reg <= output_0_V_addr_reg_731_pp0_iter14_reg;
                output_0_V_addr_reg_731_pp0_iter16_reg <= output_0_V_addr_reg_731_pp0_iter15_reg;
                output_0_V_addr_reg_731_pp0_iter17_reg <= output_0_V_addr_reg_731_pp0_iter16_reg;
                output_0_V_addr_reg_731_pp0_iter18_reg <= output_0_V_addr_reg_731_pp0_iter17_reg;
                output_0_V_addr_reg_731_pp0_iter19_reg <= output_0_V_addr_reg_731_pp0_iter18_reg;
                output_0_V_addr_reg_731_pp0_iter1_reg <= output_0_V_addr_reg_731;
                output_0_V_addr_reg_731_pp0_iter20_reg <= output_0_V_addr_reg_731_pp0_iter19_reg;
                output_0_V_addr_reg_731_pp0_iter21_reg <= output_0_V_addr_reg_731_pp0_iter20_reg;
                output_0_V_addr_reg_731_pp0_iter22_reg <= output_0_V_addr_reg_731_pp0_iter21_reg;
                output_0_V_addr_reg_731_pp0_iter23_reg <= output_0_V_addr_reg_731_pp0_iter22_reg;
                output_0_V_addr_reg_731_pp0_iter24_reg <= output_0_V_addr_reg_731_pp0_iter23_reg;
                output_0_V_addr_reg_731_pp0_iter25_reg <= output_0_V_addr_reg_731_pp0_iter24_reg;
                output_0_V_addr_reg_731_pp0_iter2_reg <= output_0_V_addr_reg_731_pp0_iter1_reg;
                output_0_V_addr_reg_731_pp0_iter3_reg <= output_0_V_addr_reg_731_pp0_iter2_reg;
                output_0_V_addr_reg_731_pp0_iter4_reg <= output_0_V_addr_reg_731_pp0_iter3_reg;
                output_0_V_addr_reg_731_pp0_iter5_reg <= output_0_V_addr_reg_731_pp0_iter4_reg;
                output_0_V_addr_reg_731_pp0_iter6_reg <= output_0_V_addr_reg_731_pp0_iter5_reg;
                output_0_V_addr_reg_731_pp0_iter7_reg <= output_0_V_addr_reg_731_pp0_iter6_reg;
                output_0_V_addr_reg_731_pp0_iter8_reg <= output_0_V_addr_reg_731_pp0_iter7_reg;
                output_0_V_addr_reg_731_pp0_iter9_reg <= output_0_V_addr_reg_731_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln165_1_reg_696 <= select_ln165_1_fu_280_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_ln161_reg_645 <= sext_ln161_fu_236_p1;
            end if;
        end if;
    end process;
    add_ln703_27_reg_753(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln161_fu_240_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln161_fu_240_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln161_fu_240_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln161_1_fu_246_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_192_p4) + unsigned(ap_const_lv8_1));
    add_ln161_fu_252_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_j_0_0_phi_fu_203_p4));
    add_ln162_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln165_reg_669));
    add_ln165_fu_318_p2 <= std_logic_vector(unsigned(zext_ln162_fu_286_p1) + unsigned(sub_ln165_fu_312_p2));
    add_ln703_27_fu_528_p2 <= std_logic_vector(signed(sext_ln703_2_fu_458_p1) + signed(sext_ln703_3_fu_524_p1));
    add_ln703_28_fu_607_p2 <= std_logic_vector(signed(sext_ln703_4_fu_604_p1) + signed(sext_ln703_1_fu_594_p1));
    add_ln703_29_fu_617_p2 <= std_logic_vector(signed(sext_ln703_5_fu_613_p1) + signed(add_ln703_fu_598_p2));
    add_ln703_fu_598_p2 <= std_logic_vector(unsigned(output_0_V_q0) + unsigned(sext_ln703_fu_546_p1));
    and_ln170_1_fu_566_p2 <= (xor_ln169_1_fu_560_p2 and icmp_ln170_1_fu_555_p2);
    and_ln170_2_fu_429_p2 <= (xor_ln169_2_fu_423_p2 and icmp_ln170_2_fu_412_p2);
    and_ln170_3_fu_495_p2 <= (xor_ln169_3_fu_489_p2 and icmp_ln170_3_fu_478_p2);
    and_ln170_fu_360_p2 <= (xor_ln169_fu_354_p2 and icmp_ln170_fu_343_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state82 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage2_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage2_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage2_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage2_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage2_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage2_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage2_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage2_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln161_fu_240_p2)
    begin
        if ((icmp_ln161_fu_240_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_192_p4_assign_proc : process(indvar_flatten_reg_188, icmp_ln161_reg_650, ap_CS_fsm_pp0_stage0, add_ln161_1_reg_654, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_192_p4 <= add_ln161_1_reg_654;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_192_p4 <= indvar_flatten_reg_188;
        end if; 
    end process;


    ap_phi_mux_j_0_0_phi_fu_203_p4_assign_proc : process(j_0_0_reg_199, icmp_ln161_reg_650, ap_CS_fsm_pp0_stage0, select_ln165_1_reg_696, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_0_phi_fu_203_p4 <= select_ln165_1_reg_696;
        else 
            ap_phi_mux_j_0_0_phi_fu_203_p4 <= j_0_0_reg_199;
        end if; 
    end process;


    ap_phi_mux_ko_0_0_phi_fu_215_p4_assign_proc : process(ko_0_0_reg_211, icmp_ln161_reg_650, ap_CS_fsm_pp0_stage0, add_ln162_reg_758, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln161_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ko_0_0_phi_fu_215_p4 <= add_ln162_reg_758;
        else 
            ap_phi_mux_ko_0_0_phi_fu_215_p4 <= ko_0_0_reg_211;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_635_p0 <= (add_ln703_29_reg_764 & ap_const_lv32_0);
    grp_fu_635_p1 <= sext_ln161_reg_645(61 - 1 downto 0);
    icmp_ln161_fu_240_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_192_p4 = ap_const_lv8_90) else "0";
    icmp_ln162_1_fu_623_p2 <= "1" when (add_ln162_reg_758 = ap_const_lv3_6) else "0";
    icmp_ln162_fu_258_p2 <= "1" when (ap_phi_mux_ko_0_0_phi_fu_215_p4 = ap_const_lv3_6) else "0";
    icmp_ln169_1_fu_550_p2 <= "1" when (trunc_ln167_3_reg_742 = ap_const_lv2_1) else "0";
    icmp_ln169_2_fu_406_p2 <= "1" when (trunc_ln167_4_fu_396_p4 = ap_const_lv2_1) else "0";
    icmp_ln169_3_fu_472_p2 <= "1" when (trunc_ln_fu_462_p4 = ap_const_lv2_1) else "0";
    icmp_ln169_fu_337_p2 <= "1" when (trunc_ln167_fu_333_p1 = ap_const_lv2_1) else "0";
    icmp_ln170_1_fu_555_p2 <= "1" when (trunc_ln167_3_reg_742 = ap_const_lv2_2) else "0";
    icmp_ln170_2_fu_412_p2 <= "1" when (trunc_ln167_4_fu_396_p4 = ap_const_lv2_2) else "0";
    icmp_ln170_3_fu_478_p2 <= "1" when (trunc_ln_fu_462_p4 = ap_const_lv2_2) else "0";
    icmp_ln170_fu_343_p2 <= "1" when (trunc_ln167_fu_333_p1 = ap_const_lv2_2) else "0";
    input_0_0_V_address0 <= zext_ln165_1_fu_272_p1(3 - 1 downto 0);

    input_0_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_0_V_address0 <= zext_ln165_1_fu_272_p1(3 - 1 downto 0);

    input_1_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_0_V_address0 <= zext_ln165_1_fu_272_p1(3 - 1 downto 0);

    input_2_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_0_V_ce0 <= ap_const_logic_1;
        else 
            input_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_0_V_address0 <= zext_ln165_1_fu_272_p1(3 - 1 downto 0);

    input_3_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_0_V_ce0 <= ap_const_logic_1;
        else 
            input_3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1148_fu_230_p0 <= mul_ln1148_fu_230_p00(22 - 1 downto 0);
    mul_ln1148_fu_230_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_scale_V),61));
    mul_ln1148_fu_230_p1 <= scales_0_V_read;
    mul_ln1148_fu_230_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1148_fu_230_p0) * signed(mul_ln1148_fu_230_p1))), 61));

    output_0_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, output_0_V_addr_reg_731, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, zext_ln165_fu_329_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_address0 <= output_0_V_addr_reg_731;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            output_0_V_address0 <= zext_ln165_fu_329_p1(5 - 1 downto 0);
        else 
            output_0_V_address0 <= "XXXXX";
        end if; 
    end process;

    output_0_V_address1 <= output_0_V_addr_reg_731_pp0_iter25_reg;

    output_0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_ce1 <= ap_const_logic_1;
        else 
            output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= add_ln703_29_reg_764;
    output_0_V_d1 <= grp_fu_635_p2(40 - 1 downto 0);

    output_0_V_we0_assign_proc : process(icmp_ln161_reg_650_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln161_reg_650_pp0_iter1_reg = ap_const_lv1_0))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln162_1_reg_770_pp0_iter26_reg, ap_enable_reg_pp0_iter26)
    begin
        if (((icmp_ln162_1_reg_770_pp0_iter26_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_we1 <= ap_const_logic_1;
        else 
            output_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_address0 <= sext_ln165_fu_324_p1(8 - 1 downto 0);

    packed_weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            packed_weights_ce0 <= ap_const_logic_1;
        else 
            packed_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln165_1_fu_280_p3 <= 
        add_ln161_reg_659 when (icmp_ln162_reg_664(0) = '1') else 
        j_0_0_reg_199;
    select_ln165_fu_264_p3 <= 
        ap_const_lv3_0 when (icmp_ln162_fu_258_p2(0) = '1') else 
        ap_phi_mux_ko_0_0_phi_fu_215_p4;
    select_ln169_1_fu_572_p3 <= 
        input_1_0_V_load_reg_713 when (icmp_ln169_1_fu_550_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln169_2_fu_435_p3 <= 
        input_2_0_V_load_reg_719 when (icmp_ln169_2_fu_406_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln169_3_fu_501_p3 <= 
        input_3_0_V_load_reg_725 when (icmp_ln169_3_fu_472_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln169_fu_366_p3 <= 
        input_0_0_V_load_reg_707 when (icmp_ln169_fu_337_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln170_1_fu_579_p3 <= 
        sub_ln701_1_reg_748 when (and_ln170_1_fu_566_p2(0) = '1') else 
        select_ln169_1_fu_572_p3;
    select_ln170_2_fu_442_p3 <= 
        sub_ln701_2_fu_418_p2 when (and_ln170_2_fu_429_p2(0) = '1') else 
        select_ln169_2_fu_435_p3;
    select_ln170_3_fu_508_p3 <= 
        sub_ln701_3_fu_484_p2 when (and_ln170_3_fu_495_p2(0) = '1') else 
        select_ln169_3_fu_501_p3;
    select_ln170_fu_373_p3 <= 
        sub_ln701_fu_349_p2 when (and_ln170_fu_360_p2(0) = '1') else 
        select_ln169_fu_366_p3;
        sext_ln161_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1148_fu_230_p2),72));

        sext_ln165_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln165_fu_318_p2),64));

        sext_ln703_1_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_1_fu_586_p3),26));

        sext_ln703_2_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_2_fu_450_p3),25));

        sext_ln703_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_3_fu_516_p3),25));

        sext_ln703_4_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_27_reg_753),26));

        sext_ln703_5_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_28_fu_607_p2),40));

        sext_ln703_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_539_p3),40));

    shl_ln703_1_fu_586_p3 <= (select_ln170_1_fu_579_p3 & ap_const_lv16_0);
    shl_ln703_2_fu_450_p3 <= (select_ln170_2_fu_442_p3 & ap_const_lv16_0);
    shl_ln703_3_fu_516_p3 <= (select_ln170_3_fu_508_p3 & ap_const_lv16_0);
    shl_ln_fu_539_p3 <= (select_ln170_reg_737 & ap_const_lv16_0);
    sub_ln165_fu_312_p2 <= std_logic_vector(unsigned(zext_ln165_2_fu_297_p1) - unsigned(zext_ln165_3_fu_308_p1));
    sub_ln701_1_fu_391_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_1_0_V_load_reg_713));
    sub_ln701_2_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_2_0_V_load_reg_719));
    sub_ln701_3_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_3_0_V_load_reg_725));
    sub_ln701_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_0_0_V_load_reg_707));
    tmp_56_fu_290_p3 <= (select_ln165_reg_669 & ap_const_lv5_0);
    tmp_57_fu_301_p3 <= (select_ln165_reg_669 & ap_const_lv3_0);
    trunc_ln167_4_fu_396_p4 <= packed_weights_q0(5 downto 4);
    trunc_ln167_fu_333_p1 <= packed_weights_q0(2 - 1 downto 0);
    trunc_ln_fu_462_p4 <= packed_weights_q0(7 downto 6);
    xor_ln169_1_fu_560_p2 <= (icmp_ln169_1_fu_550_p2 xor ap_const_lv1_1);
    xor_ln169_2_fu_423_p2 <= (icmp_ln169_2_fu_406_p2 xor ap_const_lv1_1);
    xor_ln169_3_fu_489_p2 <= (icmp_ln169_3_fu_472_p2 xor ap_const_lv1_1);
    xor_ln169_fu_354_p2 <= (icmp_ln169_fu_337_p2 xor ap_const_lv1_1);
    zext_ln162_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln165_1_fu_280_p3),9));
    zext_ln165_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln165_fu_264_p3),64));
    zext_ln165_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_290_p3),9));
    zext_ln165_3_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_301_p3),9));
    zext_ln165_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln165_1_reg_696),64));
end behav;
