// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cache_update_HH_
#define _cache_update_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cache_update_k_cakbM.h"

namespace ap_rtl {

struct cache_update : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > cache_out_V_address0;
    sc_out< sc_logic > cache_out_V_ce0;
    sc_out< sc_logic > cache_out_V_we0;
    sc_out< sc_lv<40> > cache_out_V_d0;
    sc_out< sc_lv<5> > update_0_V_address0;
    sc_out< sc_logic > update_0_V_ce0;
    sc_in< sc_lv<40> > update_0_V_q0;


    // Module declarations
    cache_update(sc_module_name name);
    SC_HAS_PROCESS(cache_update);

    ~cache_update();

    sc_trace_file* mVcdFile;

    cache_update_k_cakbM* k_cache_V_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > k_cache_V_address0;
    sc_signal< sc_logic > k_cache_V_ce0;
    sc_signal< sc_lv<20> > k_cache_V_q0;
    sc_signal< sc_lv<2> > i_fu_144_p2;
    sc_signal< sc_lv<2> > i_reg_384;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > add_ln204_fu_170_p2;
    sc_signal< sc_lv<5> > add_ln204_reg_389;
    sc_signal< sc_lv<1> > icmp_ln201_fu_138_p2;
    sc_signal< sc_lv<7> > sext_ln203_fu_206_p1;
    sc_signal< sc_lv<7> > sext_ln203_reg_394;
    sc_signal< sc_lv<6> > sub_ln204_fu_218_p2;
    sc_signal< sc_lv<6> > sub_ln204_reg_399;
    sc_signal< sc_lv<3> > j_fu_230_p2;
    sc_signal< sc_lv<3> > j_reg_407;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > sub_ln204_2_fu_273_p2;
    sc_signal< sc_lv<8> > sub_ln204_2_reg_412;
    sc_signal< sc_lv<1> > icmp_ln202_fu_224_p2;
    sc_signal< sc_lv<9> > sub_ln203_5_fu_304_p2;
    sc_signal< sc_lv<9> > sub_ln203_5_reg_417;
    sc_signal< sc_lv<1> > icmp_ln204_fu_310_p2;
    sc_signal< sc_lv<1> > icmp_ln204_reg_422;
    sc_signal< sc_lv<4> > k_fu_322_p2;
    sc_signal< sc_lv<4> > k_reg_430;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln203_fu_316_p2;
    sc_signal< sc_lv<9> > add_ln203_6_fu_350_p2;
    sc_signal< sc_lv<9> > add_ln203_6_reg_440;
    sc_signal< sc_lv<2> > i_0_reg_105;
    sc_signal< sc_lv<3> > j_0_reg_116;
    sc_signal< sc_lv<4> > k_0_reg_127;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln204_19_fu_345_p1;
    sc_signal< sc_lv<64> > sext_ln204_fu_360_p1;
    sc_signal< sc_lv<64> > zext_ln203_13_fu_365_p1;
    sc_signal< sc_lv<4> > tmp_63_fu_154_p3;
    sc_signal< sc_lv<5> > zext_ln204_fu_150_p1;
    sc_signal< sc_lv<5> > zext_ln204_11_fu_162_p1;
    sc_signal< sc_lv<5> > tmp_64_fu_176_p3;
    sc_signal< sc_lv<3> > tmp_65_fu_188_p3;
    sc_signal< sc_lv<6> > zext_ln203_fu_184_p1;
    sc_signal< sc_lv<6> > zext_ln203_12_fu_196_p1;
    sc_signal< sc_lv<6> > sub_ln203_fu_200_p2;
    sc_signal< sc_lv<6> > tmp_66_fu_210_p3;
    sc_signal< sc_lv<6> > zext_ln204_12_fu_166_p1;
    sc_signal< sc_lv<5> > zext_ln204_14_fu_240_p1;
    sc_signal< sc_lv<5> > add_ln204_4_fu_244_p2;
    sc_signal< sc_lv<4> > trunc_ln204_fu_249_p1;
    sc_signal< sc_lv<7> > tmp_85_fu_261_p3;
    sc_signal< sc_lv<8> > p_shl7_cast_fu_253_p3;
    sc_signal< sc_lv<8> > zext_ln204_15_fu_269_p1;
    sc_signal< sc_lv<7> > zext_ln204_13_fu_236_p1;
    sc_signal< sc_lv<7> > add_ln203_fu_279_p2;
    sc_signal< sc_lv<5> > trunc_ln203_fu_284_p1;
    sc_signal< sc_lv<9> > p_shl5_cast_fu_288_p3;
    sc_signal< sc_lv<9> > p_shl6_cast_fu_296_p3;
    sc_signal< sc_lv<8> > zext_ln204_18_fu_336_p1;
    sc_signal< sc_lv<8> > add_ln204_5_fu_340_p2;
    sc_signal< sc_lv<9> > zext_ln204_17_fu_332_p1;
    sc_signal< sc_lv<6> > zext_ln204_16_fu_328_p1;
    sc_signal< sc_lv<6> > add_ln204_6_fu_355_p2;
    sc_signal< sc_lv<40> > sext_ln203_3_fu_369_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln203_6_fu_350_p2();
    void thread_add_ln203_fu_279_p2();
    void thread_add_ln204_4_fu_244_p2();
    void thread_add_ln204_5_fu_340_p2();
    void thread_add_ln204_6_fu_355_p2();
    void thread_add_ln204_fu_170_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cache_out_V_address0();
    void thread_cache_out_V_ce0();
    void thread_cache_out_V_d0();
    void thread_cache_out_V_we0();
    void thread_i_fu_144_p2();
    void thread_icmp_ln201_fu_138_p2();
    void thread_icmp_ln202_fu_224_p2();
    void thread_icmp_ln203_fu_316_p2();
    void thread_icmp_ln204_fu_310_p2();
    void thread_j_fu_230_p2();
    void thread_k_cache_V_address0();
    void thread_k_cache_V_ce0();
    void thread_k_fu_322_p2();
    void thread_p_shl5_cast_fu_288_p3();
    void thread_p_shl6_cast_fu_296_p3();
    void thread_p_shl7_cast_fu_253_p3();
    void thread_sext_ln203_3_fu_369_p1();
    void thread_sext_ln203_fu_206_p1();
    void thread_sext_ln204_fu_360_p1();
    void thread_sub_ln203_5_fu_304_p2();
    void thread_sub_ln203_fu_200_p2();
    void thread_sub_ln204_2_fu_273_p2();
    void thread_sub_ln204_fu_218_p2();
    void thread_tmp_63_fu_154_p3();
    void thread_tmp_64_fu_176_p3();
    void thread_tmp_65_fu_188_p3();
    void thread_tmp_66_fu_210_p3();
    void thread_tmp_85_fu_261_p3();
    void thread_trunc_ln203_fu_284_p1();
    void thread_trunc_ln204_fu_249_p1();
    void thread_update_0_V_address0();
    void thread_update_0_V_ce0();
    void thread_zext_ln203_12_fu_196_p1();
    void thread_zext_ln203_13_fu_365_p1();
    void thread_zext_ln203_fu_184_p1();
    void thread_zext_ln204_11_fu_162_p1();
    void thread_zext_ln204_12_fu_166_p1();
    void thread_zext_ln204_13_fu_236_p1();
    void thread_zext_ln204_14_fu_240_p1();
    void thread_zext_ln204_15_fu_269_p1();
    void thread_zext_ln204_16_fu_328_p1();
    void thread_zext_ln204_17_fu_332_p1();
    void thread_zext_ln204_18_fu_336_p1();
    void thread_zext_ln204_19_fu_345_p1();
    void thread_zext_ln204_fu_150_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
