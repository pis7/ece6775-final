-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_40_24_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (39 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of exp_40_24_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv23_78A013 : STD_LOGIC_VECTOR (22 downto 0) := "11110001010000000010011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv40_7FFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "0111111111111111111111111111111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_829_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_836 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_836_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_491_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_841 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_501_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_846 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_846_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln281_8_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_861_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_866_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_3_V_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_658_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_876 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_876_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_876_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln612_2_fu_664_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_2_reg_882 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_2_reg_882_pp0_iter2_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_2_reg_882_pp0_iter3_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal rhs_V_3_fu_668_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_V_3_reg_888 : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_V_3_reg_888_pp0_iter3_reg : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_s_reg_903 : STD_LOGIC_VECTOR (44 downto 0);
    signal exp_x_msb_2_3_4_lsb_s_reg_913 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_918 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_918_pp0_iter5_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_918_pp0_iter6_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_reg_934 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln612_fu_195_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln727_fu_181_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Result_s_fu_215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_243_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_97_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_185_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_28_fu_199_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln281_1_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_3_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_4_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_2_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_2_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_5_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_6_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_8_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_9_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_5_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_7_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_6_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_4_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_7_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_3_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_10_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_11_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_13_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_14_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_10_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_12_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_11_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_9_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_15_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_16_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_18_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_14_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_17_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_15_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_13_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_16_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_12_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_641_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_fu_655_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_fu_651_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_31_fu_678_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_692_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_692_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal p_Result_29_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_1_fu_722_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln728_fu_730_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal lhs_V_1_fu_719_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_4_fu_734_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln703_fu_740_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_5_fu_743_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_765_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_765_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_765_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal zext_ln703_4_fu_781_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal and_ln_fu_793_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal y_l_V_fu_784_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_58_fu_807_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal or_ln281_18_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln282_fu_801_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln708_fu_817_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_692_p00 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_692_p10 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_765_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_765_p10 : STD_LOGIC_VECTOR (99 downto 0);

    component dut_mul_50ns_47nsncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (46 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component dut_mul_50ns_50nsocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component exp_40_24_s_f_x_mkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component exp_40_24_s_f_x_mlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component exp_40_24_s_exp_xmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_3_table_V_U : component exp_40_24_s_f_x_mkbM
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component exp_40_24_s_f_x_mlbW
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component exp_40_24_s_exp_xmb6
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    dut_mul_50ns_47nsncg_U180 : component dut_mul_50ns_47nsncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 47,
        dout_WIDTH => 97)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_692_p0,
        din1 => grp_fu_692_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_692_p2);

    dut_mul_50ns_50nsocq_U181 : component dut_mul_50ns_50nsocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_765_p0,
        din1 => grp_fu_765_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_765_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_918 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_918_pp0_iter5_reg <= exp_x_msb_1_V_reg_918;
                exp_x_msb_1_V_reg_918_pp0_iter6_reg <= exp_x_msb_1_V_reg_918_pp0_iter5_reg;
                exp_x_msb_2_3_4_lsb_s_reg_913 <= ret_V_5_fu_743_p2(55 downto 6);
                or_ln281_17_reg_866_pp0_iter2_reg <= or_ln281_17_reg_866_pp0_iter1_reg;
                or_ln281_17_reg_866_pp0_iter3_reg <= or_ln281_17_reg_866_pp0_iter2_reg;
                or_ln281_17_reg_866_pp0_iter4_reg <= or_ln281_17_reg_866_pp0_iter3_reg;
                or_ln281_17_reg_866_pp0_iter5_reg <= or_ln281_17_reg_866_pp0_iter4_reg;
                or_ln281_17_reg_866_pp0_iter6_reg <= or_ln281_17_reg_866_pp0_iter5_reg;
                or_ln281_8_reg_861_pp0_iter2_reg <= or_ln281_8_reg_861_pp0_iter1_reg;
                or_ln281_8_reg_861_pp0_iter3_reg <= or_ln281_8_reg_861_pp0_iter2_reg;
                or_ln281_8_reg_861_pp0_iter4_reg <= or_ln281_8_reg_861_pp0_iter3_reg;
                or_ln281_8_reg_861_pp0_iter5_reg <= or_ln281_8_reg_861_pp0_iter4_reg;
                or_ln281_8_reg_861_pp0_iter6_reg <= or_ln281_8_reg_861_pp0_iter5_reg;
                p_Result_18_reg_836_pp0_iter2_reg <= p_Result_18_reg_836_pp0_iter1_reg;
                ret_V_reg_876_pp0_iter2_reg <= ret_V_reg_876;
                ret_V_reg_876_pp0_iter3_reg <= ret_V_reg_876_pp0_iter2_reg;
                    rhs_V_3_reg_888(34 downto 3) <= rhs_V_3_fu_668_p5(34 downto 3);    rhs_V_3_reg_888(46 downto 42) <= rhs_V_3_fu_668_p5(46 downto 42);
                    rhs_V_3_reg_888_pp0_iter3_reg(34 downto 3) <= rhs_V_3_reg_888(34 downto 3);    rhs_V_3_reg_888_pp0_iter3_reg(46 downto 42) <= rhs_V_3_reg_888(46 downto 42);
                tmp_reg_829_pp0_iter2_reg <= tmp_reg_829_pp0_iter1_reg;
                tmp_reg_829_pp0_iter3_reg <= tmp_reg_829_pp0_iter2_reg;
                tmp_reg_829_pp0_iter4_reg <= tmp_reg_829_pp0_iter3_reg;
                tmp_reg_829_pp0_iter5_reg <= tmp_reg_829_pp0_iter4_reg;
                tmp_reg_829_pp0_iter6_reg <= tmp_reg_829_pp0_iter5_reg;
                tmp_s_reg_903 <= grp_fu_692_p2(96 downto 52);
                trunc_ln612_2_reg_882_pp0_iter2_reg <= trunc_ln612_2_reg_882;
                trunc_ln612_2_reg_882_pp0_iter3_reg <= trunc_ln612_2_reg_882_pp0_iter2_reg;
                y_lo_s_V_reg_934 <= grp_fu_765_p2(99 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_871 <= f_x_msb_3_table_V_q0;
                or_ln281_17_reg_866 <= or_ln281_17_fu_635_p2;
                or_ln281_17_reg_866_pp0_iter1_reg <= or_ln281_17_reg_866;
                or_ln281_8_reg_861 <= or_ln281_8_fu_581_p2;
                or_ln281_8_reg_861_pp0_iter1_reg <= or_ln281_8_reg_861;
                p_Result_18_reg_836 <= x_V(19 downto 13);
                p_Result_18_reg_836_pp0_iter1_reg <= p_Result_18_reg_836;
                ret_V_reg_876 <= ret_V_fu_658_p2;
                tmp_V_1_reg_846 <= tmp_V_1_fu_501_p1;
                tmp_V_1_reg_846_pp0_iter1_reg <= tmp_V_1_reg_846;
                tmp_V_reg_841 <= x_V(12 downto 5);
                tmp_reg_829 <= x_V(39 downto 39);
                tmp_reg_829_pp0_iter1_reg <= tmp_reg_829;
                trunc_ln612_2_reg_882 <= trunc_ln612_2_fu_664_p1;
            end if;
        end if;
    end process;
    rhs_V_3_reg_888(2 downto 0) <= "000";
    rhs_V_3_reg_888(41 downto 35) <= "0000000";
    rhs_V_3_reg_888_pp0_iter3_reg(2 downto 0) <= "000";
    rhs_V_3_reg_888_pp0_iter3_reg(41 downto 35) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln282_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv40_7FFFFFFFFF) + unsigned(and_ln_fu_793_p4));
    and_ln281_fu_527_p2 <= (icmp_ln281_fu_515_p2 and icmp_ln281_1_fu_521_p2);
    and_ln_fu_793_p4 <= ((tmp_reg_829_pp0_iter6_reg & ap_const_lv38_0) & tmp_reg_829_pp0_iter6_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        add_ln282_fu_801_p2 when (or_ln281_18_fu_789_p2(0) = '1') else 
        zext_ln708_fu_817_p1;
    exp_x_msb_1_table_V_address0 <= zext_ln544_2_fu_714_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_table_V_address0 <= zext_ln544_1_fu_510_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln544_fu_505_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_692_p0 <= grp_fu_692_p00(50 - 1 downto 0);
    grp_fu_692_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_31_fu_678_p3),97));
    grp_fu_692_p1 <= grp_fu_692_p10(47 - 1 downto 0);
    grp_fu_692_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_3_fu_668_p5),97));
    grp_fu_765_p0 <= grp_fu_765_p00(50 - 1 downto 0);
    grp_fu_765_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_s_reg_913),100));
    grp_fu_765_p1 <= grp_fu_765_p10(50 - 1 downto 0);
    grp_fu_765_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_918),100));
    icmp_ln281_1_fu_521_p2 <= "1" when (unsigned(p_Result_28_fu_199_p3) > unsigned(ap_const_lv23_78A013)) else "0";
    icmp_ln281_fu_515_p2 <= "1" when (p_Result_27_fu_185_p4 = ap_const_lv5_F) else "0";
    lhs_V_1_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_903),57));
    lhs_V_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_30_fu_641_p4),9));
    or_ln281_10_fu_593_p2 <= (xor_ln278_14_fu_419_p2 or xor_ln278_13_fu_405_p2);
    or_ln281_11_fu_599_p2 <= (xor_ln278_12_fu_391_p2 or or_ln281_10_fu_593_p2);
    or_ln281_12_fu_605_p2 <= (or_ln281_9_fu_587_p2 or or_ln281_11_fu_599_p2);
    or_ln281_13_fu_611_p2 <= (xor_ln278_16_fu_447_p2 or xor_ln278_15_fu_433_p2);
    or_ln281_14_fu_617_p2 <= (xor_ln278_18_fu_475_p2 or and_ln281_fu_527_p2);
    or_ln281_15_fu_623_p2 <= (xor_ln278_17_fu_461_p2 or or_ln281_14_fu_617_p2);
    or_ln281_16_fu_629_p2 <= (or_ln281_15_fu_623_p2 or or_ln281_13_fu_611_p2);
    or_ln281_17_fu_635_p2 <= (or_ln281_16_fu_629_p2 or or_ln281_12_fu_605_p2);
    or_ln281_18_fu_789_p2 <= (or_ln281_8_reg_861_pp0_iter6_reg or or_ln281_17_reg_866_pp0_iter6_reg);
    or_ln281_1_fu_539_p2 <= (xor_ln278_4_fu_279_p2 or xor_ln278_3_fu_265_p2);
    or_ln281_2_fu_545_p2 <= (xor_ln278_2_fu_251_p2 or or_ln281_1_fu_539_p2);
    or_ln281_3_fu_551_p2 <= (or_ln281_fu_533_p2 or or_ln281_2_fu_545_p2);
    or_ln281_4_fu_557_p2 <= (xor_ln278_6_fu_307_p2 or xor_ln278_5_fu_293_p2);
    or_ln281_5_fu_563_p2 <= (xor_ln278_9_fu_349_p2 or xor_ln278_8_fu_335_p2);
    or_ln281_6_fu_569_p2 <= (xor_ln278_7_fu_321_p2 or or_ln281_5_fu_563_p2);
    or_ln281_7_fu_575_p2 <= (or_ln281_6_fu_569_p2 or or_ln281_4_fu_557_p2);
    or_ln281_8_fu_581_p2 <= (or_ln281_7_fu_575_p2 or or_ln281_3_fu_551_p2);
    or_ln281_9_fu_587_p2 <= (xor_ln278_11_fu_377_p2 or xor_ln278_10_fu_363_p2);
    or_ln281_fu_533_p2 <= (xor_ln278_fu_223_p2 or xor_ln278_1_fu_237_p2);
    p_Result_10_fu_369_p3 <= zext_ln727_fu_181_p1(31 downto 31);
    p_Result_11_fu_383_p3 <= zext_ln727_fu_181_p1(32 downto 32);
    p_Result_12_fu_397_p3 <= zext_ln727_fu_181_p1(33 downto 33);
    p_Result_13_fu_411_p3 <= zext_ln727_fu_181_p1(34 downto 34);
    p_Result_14_fu_425_p3 <= zext_ln727_fu_181_p1(35 downto 35);
    p_Result_15_fu_439_p3 <= zext_ln727_fu_181_p1(36 downto 36);
    p_Result_16_fu_453_p3 <= zext_ln727_fu_181_p1(37 downto 37);
    p_Result_17_fu_467_p3 <= zext_ln727_fu_181_p1(38 downto 38);
    p_Result_1_fu_229_p3 <= zext_ln727_fu_181_p1(21 downto 21);
    p_Result_27_fu_185_p4 <= x_V(20 downto 16);
    p_Result_28_fu_199_p3 <= (trunc_ln612_fu_195_p1 & ap_const_lv7_0);
    p_Result_29_fu_698_p3 <= (tmp_reg_829_pp0_iter2_reg & p_Result_18_reg_836_pp0_iter2_reg);
    p_Result_2_fu_243_p3 <= zext_ln727_fu_181_p1(22 downto 22);
    p_Result_30_fu_641_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_31_fu_678_p3 <= (ret_V_reg_876 & trunc_ln612_2_reg_882);
    p_Result_3_fu_257_p3 <= zext_ln727_fu_181_p1(23 downto 23);
    p_Result_4_fu_271_p3 <= zext_ln727_fu_181_p1(24 downto 24);
    p_Result_5_fu_285_p3 <= zext_ln727_fu_181_p1(25 downto 25);
    p_Result_6_fu_299_p3 <= zext_ln727_fu_181_p1(26 downto 26);
    p_Result_7_fu_313_p3 <= zext_ln727_fu_181_p1(27 downto 27);
    p_Result_8_fu_327_p3 <= zext_ln727_fu_181_p1(28 downto 28);
    p_Result_9_fu_341_p3 <= zext_ln727_fu_181_p1(29 downto 29);
    p_Result_s_97_fu_355_p3 <= zext_ln727_fu_181_p1(30 downto 30);
    p_Result_s_fu_215_p3 <= zext_ln727_fu_181_p1(20 downto 20);
    ret_V_4_fu_734_p2 <= std_logic_vector(unsigned(zext_ln728_fu_730_p1) + unsigned(lhs_V_1_fu_719_p1));
    ret_V_5_fu_743_p2 <= std_logic_vector(unsigned(ret_V_4_fu_734_p2) + unsigned(zext_ln703_fu_740_p1));
    ret_V_fu_658_p2 <= std_logic_vector(unsigned(rhs_V_fu_655_p1) + unsigned(lhs_V_fu_651_p1));
    rhs_V_1_fu_722_p4 <= ((ret_V_reg_876_pp0_iter3_reg & trunc_ln612_2_reg_882_pp0_iter3_reg) & ap_const_lv6_0);
    rhs_V_3_fu_668_p5 <= (((tmp_V_1_reg_846_pp0_iter1_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_871) & ap_const_lv3_0);
    rhs_V_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_841),9));
    tmp_58_fu_807_p4 <= y_l_V_fu_784_p2(49 downto 11);
    tmp_V_1_fu_501_p1 <= x_V(5 - 1 downto 0);
    tmp_V_fu_491_p4 <= x_V(12 downto 5);
    tmp_fu_207_p3 <= x_V(39 downto 39);
    trunc_ln612_2_fu_664_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln612_fu_195_p1 <= x_V(16 - 1 downto 0);
    xor_ln278_10_fu_363_p2 <= (tmp_fu_207_p3 xor p_Result_s_97_fu_355_p3);
    xor_ln278_11_fu_377_p2 <= (tmp_fu_207_p3 xor p_Result_10_fu_369_p3);
    xor_ln278_12_fu_391_p2 <= (tmp_fu_207_p3 xor p_Result_11_fu_383_p3);
    xor_ln278_13_fu_405_p2 <= (tmp_fu_207_p3 xor p_Result_12_fu_397_p3);
    xor_ln278_14_fu_419_p2 <= (tmp_fu_207_p3 xor p_Result_13_fu_411_p3);
    xor_ln278_15_fu_433_p2 <= (tmp_fu_207_p3 xor p_Result_14_fu_425_p3);
    xor_ln278_16_fu_447_p2 <= (tmp_fu_207_p3 xor p_Result_15_fu_439_p3);
    xor_ln278_17_fu_461_p2 <= (tmp_fu_207_p3 xor p_Result_16_fu_453_p3);
    xor_ln278_18_fu_475_p2 <= (tmp_fu_207_p3 xor p_Result_17_fu_467_p3);
    xor_ln278_1_fu_237_p2 <= (tmp_fu_207_p3 xor p_Result_1_fu_229_p3);
    xor_ln278_2_fu_251_p2 <= (tmp_fu_207_p3 xor p_Result_2_fu_243_p3);
    xor_ln278_3_fu_265_p2 <= (tmp_fu_207_p3 xor p_Result_3_fu_257_p3);
    xor_ln278_4_fu_279_p2 <= (tmp_fu_207_p3 xor p_Result_4_fu_271_p3);
    xor_ln278_5_fu_293_p2 <= (tmp_fu_207_p3 xor p_Result_5_fu_285_p3);
    xor_ln278_6_fu_307_p2 <= (tmp_fu_207_p3 xor p_Result_6_fu_299_p3);
    xor_ln278_7_fu_321_p2 <= (tmp_fu_207_p3 xor p_Result_7_fu_313_p3);
    xor_ln278_8_fu_335_p2 <= (tmp_fu_207_p3 xor p_Result_8_fu_327_p3);
    xor_ln278_9_fu_349_p2 <= (tmp_fu_207_p3 xor p_Result_9_fu_341_p3);
    xor_ln278_fu_223_p2 <= (tmp_fu_207_p3 xor p_Result_s_fu_215_p3);
    y_l_V_fu_784_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_918_pp0_iter6_reg) + unsigned(zext_ln703_4_fu_781_p1));
    zext_ln544_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_491_p4),64));
    zext_ln544_2_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_29_fu_698_p3),64));
    zext_ln544_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_501_p1),64));
    zext_ln703_4_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_lo_s_V_reg_934),50));
    zext_ln703_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_3_reg_888_pp0_iter3_reg),57));
    zext_ln708_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_807_p4),40));
    zext_ln727_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V),47));
    zext_ln728_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_1_fu_722_p4),57));
end behav;
