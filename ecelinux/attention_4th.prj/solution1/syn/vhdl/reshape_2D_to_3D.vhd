-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reshape_2D_to_3D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of reshape_2D_to_3D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln148_fu_99_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln148_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln203_fu_125_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln203_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln148_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln150_fu_159_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln150_reg_217 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln149_fu_175_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln149_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_fu_181_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_reg_230 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln149_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_0_reg_71 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_0_reg_82 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln150_2_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_113_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_105_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_fu_121_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln150_fu_131_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_135_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln150_1_fu_147_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln150_fu_143_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln150_1_fu_155_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln149_fu_165_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln150_fu_186_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln150_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_0_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln149_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_0_reg_71 <= add_ln148_reg_207;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_0_reg_71 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_0_0_reg_82 <= add_ln149_reg_225;
            elsif (((icmp_ln148_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_82 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln148_reg_207 <= add_ln148_fu_99_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln149_reg_225 <= add_ln149_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln149_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln203_reg_230 <= add_ln203_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln150_reg_217(9 downto 4) <= sub_ln150_fu_159_p2(9 downto 4);
                    sub_ln203_reg_212(9 downto 4) <= sub_ln203_fu_125_p2(9 downto 4);
            end if;
        end if;
    end process;
    sub_ln203_reg_212(3 downto 0) <= "0000";
    sub_ln150_reg_217(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln148_fu_93_p2, ap_CS_fsm_state3, icmp_ln149_fu_169_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln148_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln149_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln148_fu_99_p2 <= std_logic_vector(unsigned(i_0_0_reg_71) + unsigned(ap_const_lv4_1));
    add_ln149_fu_175_p2 <= std_logic_vector(unsigned(k_0_0_reg_82) + unsigned(ap_const_lv6_1));
    add_ln150_fu_186_p2 <= std_logic_vector(unsigned(zext_ln149_fu_165_p1) + unsigned(sub_ln150_reg_217));
    add_ln203_fu_181_p2 <= std_logic_vector(unsigned(sub_ln203_reg_212) + unsigned(zext_ln149_fu_165_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln148_fu_93_p2)
    begin
        if ((((icmp_ln148_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln148_fu_93_p2)
    begin
        if (((icmp_ln148_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln148_fu_93_p2 <= "1" when (i_0_0_reg_71 = ap_const_lv4_8) else "0";
    icmp_ln149_fu_169_p2 <= "1" when (k_0_0_reg_82 = ap_const_lv6_30) else "0";
    input_0_V_address0 <= zext_ln150_2_fu_195_p1(9 - 1 downto 0);

    input_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_address0 <= sext_ln203_fu_200_p1(9 - 1 downto 0);

    output_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= input_0_V_q0;

    output_0_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln150_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln150_fu_186_p2),32));

        sext_ln203_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_reg_230),64));

    shl_ln150_1_fu_147_p3 <= (trunc_ln150_fu_131_p1 & ap_const_lv4_0);
    shl_ln_fu_135_p3 <= (trunc_ln150_fu_131_p1 & ap_const_lv6_0);
    sub_ln150_fu_159_p2 <= std_logic_vector(unsigned(zext_ln150_fu_143_p1) - unsigned(zext_ln150_1_fu_155_p1));
    sub_ln203_fu_125_p2 <= std_logic_vector(unsigned(tmp_54_fu_105_p3) - unsigned(zext_ln203_fu_121_p1));
    tmp_54_fu_105_p3 <= (i_0_0_reg_71 & ap_const_lv6_0);
    tmp_55_fu_113_p3 <= (i_0_0_reg_71 & ap_const_lv4_0);
    trunc_ln150_fu_131_p1 <= i_0_0_reg_71(3 - 1 downto 0);
    zext_ln149_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_82),10));
    zext_ln150_1_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln150_1_fu_147_p3),10));
    zext_ln150_2_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln150_fu_191_p1),64));
    zext_ln150_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_135_p3),10));
    zext_ln203_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_113_p3),10));
end behav;
