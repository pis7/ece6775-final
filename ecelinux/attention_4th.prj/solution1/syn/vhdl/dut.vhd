-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=90385,HLS_SYN_TPT=none,HLS_SYN_MEM=221,HLS_SYN_DSP=92,HLS_SYN_FF=22371,HLS_SYN_LUT=35920,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln19_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln19_fu_421_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal add_ln51_fu_453_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_reg_488 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln51_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_0_V_ce0 : STD_LOGIC;
    signal input_0_V_we0 : STD_LOGIC;
    signal input_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_0_V_ce1 : STD_LOGIC;
    signal input_0_V_q1 : STD_LOGIC_VECTOR (39 downto 0);
    signal output_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_0_ce0 : STD_LOGIC;
    signal output_0_we0 : STD_LOGIC;
    signal output_0_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal output_0_ce1 : STD_LOGIC;
    signal output_0_we1 : STD_LOGIC;
    signal grp_attention_fu_263_ap_start : STD_LOGIC;
    signal grp_attention_fu_263_ap_done : STD_LOGIC;
    signal grp_attention_fu_263_ap_idle : STD_LOGIC;
    signal grp_attention_fu_263_ap_ready : STD_LOGIC;
    signal grp_attention_fu_263_hidden_states_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_attention_fu_263_hidden_states_0_V_ce0 : STD_LOGIC;
    signal grp_attention_fu_263_hidden_states_0_V_we0 : STD_LOGIC;
    signal grp_attention_fu_263_hidden_states_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_attention_fu_263_hidden_states_0_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_attention_fu_263_hidden_states_0_V_ce1 : STD_LOGIC;
    signal grp_attention_fu_263_final_output_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_attention_fu_263_final_output_0_V_ce0 : STD_LOGIC;
    signal grp_attention_fu_263_final_output_0_V_we0 : STD_LOGIC;
    signal grp_attention_fu_263_final_output_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_attention_fu_263_final_output_0_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_attention_fu_263_final_output_0_V_ce1 : STD_LOGIC;
    signal grp_attention_fu_263_final_output_0_V_we1 : STD_LOGIC;
    signal grp_attention_fu_263_final_output_0_V_d1 : STD_LOGIC_VECTOR (39 downto 0);
    signal j_0_0_reg_241 : STD_LOGIC_VECTOR (8 downto 0);
    signal j9_0_0_reg_252 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_attention_fu_263_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call0 : BOOLEAN;
    signal zext_ln20_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln708_fu_442_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln_fu_432_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln731_fu_464_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component attention IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hidden_states_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        hidden_states_0_V_ce0 : OUT STD_LOGIC;
        hidden_states_0_V_we0 : OUT STD_LOGIC;
        hidden_states_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
        hidden_states_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
        hidden_states_0_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        hidden_states_0_V_ce1 : OUT STD_LOGIC;
        hidden_states_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
        final_output_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        final_output_0_V_ce0 : OUT STD_LOGIC;
        final_output_0_V_we0 : OUT STD_LOGIC;
        final_output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
        final_output_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
        final_output_0_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        final_output_0_V_ce1 : OUT STD_LOGIC;
        final_output_0_V_we1 : OUT STD_LOGIC;
        final_output_0_V_d1 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component dut_input_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (39 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component dut_output_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (39 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    input_0_V_U : component dut_input_0_V
    generic map (
        DataWidth => 40,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_0_V_address0,
        ce0 => input_0_V_ce0,
        we0 => input_0_V_we0,
        d0 => input_0_V_d0,
        q0 => input_0_V_q0,
        address1 => grp_attention_fu_263_hidden_states_0_V_address1,
        ce1 => input_0_V_ce1,
        q1 => input_0_V_q1);

    output_0_U : component dut_output_0
    generic map (
        DataWidth => 40,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_0_address0,
        ce0 => output_0_ce0,
        we0 => output_0_we0,
        d0 => grp_attention_fu_263_final_output_0_V_d0,
        q0 => output_0_q0,
        address1 => grp_attention_fu_263_final_output_0_V_address1,
        ce1 => output_0_ce1,
        we1 => output_0_we1,
        d1 => grp_attention_fu_263_final_output_0_V_d1);

    grp_attention_fu_263 : component attention
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_attention_fu_263_ap_start,
        ap_done => grp_attention_fu_263_ap_done,
        ap_idle => grp_attention_fu_263_ap_idle,
        ap_ready => grp_attention_fu_263_ap_ready,
        hidden_states_0_V_address0 => grp_attention_fu_263_hidden_states_0_V_address0,
        hidden_states_0_V_ce0 => grp_attention_fu_263_hidden_states_0_V_ce0,
        hidden_states_0_V_we0 => grp_attention_fu_263_hidden_states_0_V_we0,
        hidden_states_0_V_d0 => grp_attention_fu_263_hidden_states_0_V_d0,
        hidden_states_0_V_q0 => input_0_V_q0,
        hidden_states_0_V_address1 => grp_attention_fu_263_hidden_states_0_V_address1,
        hidden_states_0_V_ce1 => grp_attention_fu_263_hidden_states_0_V_ce1,
        hidden_states_0_V_q1 => input_0_V_q1,
        final_output_0_V_address0 => grp_attention_fu_263_final_output_0_V_address0,
        final_output_0_V_ce0 => grp_attention_fu_263_final_output_0_V_ce0,
        final_output_0_V_we0 => grp_attention_fu_263_final_output_0_V_we0,
        final_output_0_V_d0 => grp_attention_fu_263_final_output_0_V_d0,
        final_output_0_V_q0 => output_0_q0,
        final_output_0_V_address1 => grp_attention_fu_263_final_output_0_V_address1,
        final_output_0_V_ce1 => grp_attention_fu_263_final_output_0_V_ce1,
        final_output_0_V_we1 => grp_attention_fu_263_final_output_0_V_we1,
        final_output_0_V_d1 => grp_attention_fu_263_final_output_0_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_attention_fu_263_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_attention_fu_263_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_attention_fu_263_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_attention_fu_263_ap_ready = ap_const_logic_1)) then 
                    grp_attention_fu_263_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j9_0_0_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_attention_fu_263_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j9_0_0_reg_252 <= ap_const_lv9_0;
            elsif (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j9_0_0_reg_252 <= add_ln51_reg_488;
            end if; 
        end if;
    end process;

    j_0_0_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_0_reg_241 <= ap_const_lv9_0;
            elsif ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_0_reg_241 <= add_ln19_fu_421_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln51_reg_488 <= add_ln51_fu_453_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_CS_fsm_state2, icmp_ln19_fu_415_p2, ap_CS_fsm_state5, ap_CS_fsm_state4, icmp_ln51_fu_447_p2, grp_attention_fu_263_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_attention_fu_263_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln51_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln19_fu_421_p2 <= std_logic_vector(unsigned(j_0_0_reg_241) + unsigned(ap_const_lv9_1));
    add_ln51_fu_453_p2 <= std_logic_vector(unsigned(j9_0_0_reg_252) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_assign_proc : process(strm_in_V_V_empty_n, icmp_ln19_fu_415_p2)
    begin
                ap_block_state2 <= ((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call0_assign_proc : process(strm_in_V_V_empty_n, icmp_ln19_fu_415_p2)
    begin
                ap_block_state2_ignore_call0 <= ((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln51_fu_447_p2)
    begin
        if (((icmp_ln51_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln51_fu_447_p2)
    begin
        if (((icmp_ln51_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_attention_fu_263_ap_start <= grp_attention_fu_263_ap_start_reg;
    icmp_ln19_fu_415_p2 <= "1" when (j_0_0_reg_241 = ap_const_lv9_180) else "0";
    icmp_ln51_fu_447_p2 <= "1" when (j9_0_0_reg_252 = ap_const_lv9_180) else "0";

    input_0_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_415_p2, grp_attention_fu_263_hidden_states_0_V_address0, ap_CS_fsm_state3, zext_ln20_fu_427_p1)
    begin
        if (((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_0_V_address0 <= zext_ln20_fu_427_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_address0 <= grp_attention_fu_263_hidden_states_0_V_address0;
        else 
            input_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_0_V_ce0_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln19_fu_415_p2, grp_attention_fu_263_hidden_states_0_V_ce0, ap_CS_fsm_state3)
    begin
        if ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_ce0 <= grp_attention_fu_263_hidden_states_0_V_ce0;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_V_ce1_assign_proc : process(grp_attention_fu_263_hidden_states_0_V_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_ce1 <= grp_attention_fu_263_hidden_states_0_V_ce1;
        else 
            input_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_V_d0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_415_p2, grp_attention_fu_263_hidden_states_0_V_d0, ap_CS_fsm_state3, sext_ln708_fu_442_p1)
    begin
        if (((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_0_V_d0 <= sext_ln708_fu_442_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_d0 <= grp_attention_fu_263_hidden_states_0_V_d0;
        else 
            input_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_0_V_we0_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln19_fu_415_p2, grp_attention_fu_263_hidden_states_0_V_we0, ap_CS_fsm_state3)
    begin
        if ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_we0 <= grp_attention_fu_263_hidden_states_0_V_we0;
        else 
            input_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_address0_assign_proc : process(ap_CS_fsm_state4, grp_attention_fu_263_final_output_0_V_address0, ap_CS_fsm_state3, zext_ln52_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_0_address0 <= zext_ln52_fu_459_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_address0 <= grp_attention_fu_263_final_output_0_V_address0;
        else 
            output_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state4, grp_attention_fu_263_final_output_0_V_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_ce0 <= grp_attention_fu_263_final_output_0_V_ce0;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_ce1_assign_proc : process(grp_attention_fu_263_final_output_0_V_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_ce1 <= grp_attention_fu_263_final_output_0_V_ce1;
        else 
            output_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_we0_assign_proc : process(grp_attention_fu_263_final_output_0_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_we0 <= grp_attention_fu_263_final_output_0_V_we0;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_we1_assign_proc : process(grp_attention_fu_263_final_output_0_V_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_0_we1 <= grp_attention_fu_263_final_output_0_V_we1;
        else 
            output_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln708_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_432_p4),40));


    strm_in_V_V_blk_n_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln19_fu_415_p2)
    begin
        if (((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(strm_in_V_V_empty_n, ap_CS_fsm_state2, icmp_ln19_fu_415_p2)
    begin
        if ((not(((icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0))) and (icmp_ln19_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_V_V_din <= (trunc_ln731_fu_464_p1 & ap_const_lv2_0);

    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state5)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln731_fu_464_p1 <= output_0_q0(30 - 1 downto 0);
    trunc_ln_fu_432_p4 <= strm_in_V_V_dout(31 downto 2);
    zext_ln20_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_241),64));
    zext_ln52_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j9_0_0_reg_252),64));
end behav;
