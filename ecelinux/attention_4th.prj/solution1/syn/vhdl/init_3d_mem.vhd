-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity init_3d_mem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mem_0_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mem_0_0_V_ce0 : OUT STD_LOGIC;
    mem_0_0_V_we0 : OUT STD_LOGIC;
    mem_0_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mem_1_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mem_1_0_V_ce0 : OUT STD_LOGIC;
    mem_1_0_V_we0 : OUT STD_LOGIC;
    mem_1_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mem_2_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mem_2_0_V_ce0 : OUT STD_LOGIC;
    mem_2_0_V_we0 : OUT STD_LOGIC;
    mem_2_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mem_3_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mem_3_0_V_ce0 : OUT STD_LOGIC;
    mem_3_0_V_we0 : OUT STD_LOGIC;
    mem_3_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of init_3d_mem is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln50_fu_128_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln50_reg_161 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mem_0_0_V_addr_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln50_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_1_0_V_addr_reg_171 : STD_LOGIC_VECTOR (6 downto 0);
    signal mem_2_0_V_addr_reg_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal mem_3_0_V_addr_reg_181 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln51_fu_148_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_0_reg_100 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln51_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_0_reg_111 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln52_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln180_fu_154_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_0_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_0_reg_100 <= add_ln50_reg_161;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_100 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_0_reg_111 <= add_ln51_fu_148_p2;
            elsif (((icmp_ln50_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_111 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln50_reg_161 <= add_ln50_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mem_0_0_V_addr_reg_166 <= zext_ln52_fu_134_p1(7 - 1 downto 0);
                mem_1_0_V_addr_reg_171 <= zext_ln52_fu_134_p1(7 - 1 downto 0);
                mem_2_0_V_addr_reg_176 <= zext_ln52_fu_134_p1(7 - 1 downto 0);
                mem_3_0_V_addr_reg_181 <= zext_ln52_fu_134_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln50_fu_122_p2, ap_CS_fsm_state3, icmp_ln51_fu_142_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln50_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln51_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln50_fu_128_p2 <= std_logic_vector(unsigned(j_0_0_reg_100) + unsigned(ap_const_lv7_1));
    add_ln51_fu_148_p2 <= std_logic_vector(unsigned(k_0_0_reg_111) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln50_fu_122_p2)
    begin
        if ((((icmp_ln50_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln50_fu_122_p2)
    begin
        if (((icmp_ln50_fu_122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln50_fu_122_p2 <= "1" when (j_0_0_reg_100 = ap_const_lv7_60) else "0";
    icmp_ln51_fu_142_p2 <= "1" when (k_0_0_reg_111 = ap_const_lv3_4) else "0";
    mem_0_0_V_address0 <= mem_0_0_V_addr_reg_166;

    mem_0_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_0_0_V_ce0 <= ap_const_logic_1;
        else 
            mem_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_0_0_V_d0 <= ap_const_lv8_0;

    mem_0_0_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln51_fu_142_p2, trunc_ln180_fu_154_p1)
    begin
        if (((trunc_ln180_fu_154_p1 = ap_const_lv2_0) and (icmp_ln51_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mem_0_0_V_we0 <= ap_const_logic_1;
        else 
            mem_0_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_1_0_V_address0 <= mem_1_0_V_addr_reg_171;

    mem_1_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_1_0_V_ce0 <= ap_const_logic_1;
        else 
            mem_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_1_0_V_d0 <= ap_const_lv8_0;

    mem_1_0_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln51_fu_142_p2, trunc_ln180_fu_154_p1)
    begin
        if (((trunc_ln180_fu_154_p1 = ap_const_lv2_1) and (icmp_ln51_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mem_1_0_V_we0 <= ap_const_logic_1;
        else 
            mem_1_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_2_0_V_address0 <= mem_2_0_V_addr_reg_176;

    mem_2_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_2_0_V_ce0 <= ap_const_logic_1;
        else 
            mem_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_2_0_V_d0 <= ap_const_lv8_0;

    mem_2_0_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln51_fu_142_p2, trunc_ln180_fu_154_p1)
    begin
        if (((trunc_ln180_fu_154_p1 = ap_const_lv2_2) and (icmp_ln51_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mem_2_0_V_we0 <= ap_const_logic_1;
        else 
            mem_2_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_3_0_V_address0 <= mem_3_0_V_addr_reg_181;

    mem_3_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_3_0_V_ce0 <= ap_const_logic_1;
        else 
            mem_3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_3_0_V_d0 <= ap_const_lv8_0;

    mem_3_0_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln51_fu_142_p2, trunc_ln180_fu_154_p1)
    begin
        if (((trunc_ln180_fu_154_p1 = ap_const_lv2_3) and (icmp_ln51_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mem_3_0_V_we0 <= ap_const_logic_1;
        else 
            mem_3_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln180_fu_154_p1 <= k_0_0_reg_111(2 - 1 downto 0);
    zext_ln52_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_100),64));
end behav;
