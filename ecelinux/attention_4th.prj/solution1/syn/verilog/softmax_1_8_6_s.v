// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_1_8_6_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_we0,
        input_0_V_d0,
        input_0_V_q0
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_0_V_address0;
output   input_0_V_ce0;
output   input_0_V_we0;
output  [39:0] input_0_V_d0;
input  [39:0] input_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] input_0_V_address0;
reg input_0_V_ce0;
reg input_0_V_we0;
reg[39:0] input_0_V_d0;

(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_181_p2;
reg   [3:0] i_reg_347;
wire    ap_CS_fsm_state2;
wire  signed [6:0] sub_ln203_fu_207_p2;
reg  signed [6:0] sub_ln203_reg_352;
wire   [0:0] icmp_ln280_fu_175_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln283_fu_218_p2;
wire   [2:0] add_ln283_fu_238_p2;
reg   [2:0] add_ln283_reg_377;
wire   [39:0] select_ln284_fu_250_p3;
wire    ap_CS_fsm_state5;
wire   [2:0] add_ln286_fu_264_p2;
reg   [2:0] add_ln286_reg_390;
wire    ap_CS_fsm_state6;
reg   [5:0] input_0_V_addr_2_reg_395;
wire   [0:0] icmp_ln286_fu_258_p2;
wire  signed [55:0] sext_ln1148_fu_284_p1;
reg  signed [55:0] sext_ln1148_reg_400;
wire   [39:0] sub_ln703_fu_288_p2;
reg   [39:0] sub_ln703_reg_405;
wire    ap_CS_fsm_state7;
wire   [39:0] add_ln703_fu_294_p2;
wire    ap_CS_fsm_state15;
wire   [2:0] add_ln291_fu_306_p2;
reg   [2:0] add_ln291_reg_418;
wire    ap_CS_fsm_state16;
reg   [5:0] input_0_V_addr_3_reg_423;
wire   [0:0] icmp_ln291_fu_300_p2;
wire    ap_CS_fsm_state17;
wire    grp_exp_40_24_s_fu_163_ap_start;
wire    grp_exp_40_24_s_fu_163_ap_done;
wire    grp_exp_40_24_s_fu_163_ap_idle;
wire    grp_exp_40_24_s_fu_163_ap_ready;
wire   [39:0] grp_exp_40_24_s_fu_163_ap_return;
reg   [3:0] i_0_reg_97;
reg   [39:0] p_Val2_33_0_reg_108;
reg   [2:0] k_0_0_reg_118;
reg  signed [39:0] p_Val2_34_0_reg_129;
reg   [2:0] k1_0_0_reg_141;
reg   [2:0] k2_0_0_reg_152;
wire    ap_CS_fsm_state76;
reg    grp_exp_40_24_s_fu_163_ap_start_reg;
reg   [75:0] ap_NS_fsm;
wire    ap_NS_fsm_state8;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln203_fu_213_p1;
wire  signed [63:0] sext_ln1494_fu_233_p1;
wire  signed [63:0] sext_ln1265_fu_279_p1;
wire  signed [63:0] sext_ln1265_1_fu_321_p1;
wire   [39:0] trunc_ln703_fu_339_p1;
wire   [4:0] tmp_53_fu_195_p3;
wire   [6:0] tmp_s_fu_187_p3;
wire   [6:0] zext_ln203_fu_203_p1;
wire   [6:0] zext_ln1494_fu_224_p1;
wire   [6:0] add_ln1494_fu_228_p2;
wire   [0:0] icmp_ln1494_fu_244_p2;
wire   [6:0] zext_ln1265_fu_270_p1;
wire   [6:0] add_ln1265_fu_274_p2;
wire   [6:0] zext_ln1265_1_fu_312_p1;
wire   [6:0] add_ln1265_1_fu_316_p2;
wire   [55:0] grp_fu_334_p0;
wire  signed [39:0] grp_fu_334_p1;
wire   [39:0] grp_fu_334_p2;
reg    grp_fu_334_ap_start;
wire    grp_fu_334_ap_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 76'd1;
#0 grp_exp_40_24_s_fu_163_ap_start_reg = 1'b0;
end

exp_40_24_s grp_exp_40_24_s_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_40_24_s_fu_163_ap_start),
    .ap_done(grp_exp_40_24_s_fu_163_ap_done),
    .ap_idle(grp_exp_40_24_s_fu_163_ap_idle),
    .ap_ready(grp_exp_40_24_s_fu_163_ap_ready),
    .x_V(sub_ln703_reg_405),
    .ap_return(grp_exp_40_24_s_fu_163_ap_return)
);

dut_sdiv_56ns_40spcA #(
    .ID( 1 ),
    .NUM_STAGE( 60 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 40 ))
dut_sdiv_56ns_40spcA_U188(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_334_ap_start),
    .done(grp_fu_334_ap_done),
    .din0(grp_fu_334_p0),
    .din1(grp_fu_334_p1),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_40_24_s_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state8) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_exp_40_24_s_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_exp_40_24_s_fu_163_ap_ready == 1'b1)) begin
            grp_exp_40_24_s_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln291_fu_300_p2 == 1'd1))) begin
        i_0_reg_97 <= i_reg_347;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln283_fu_218_p2 == 1'd1))) begin
        k1_0_0_reg_141 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        k1_0_0_reg_141 <= add_ln286_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln286_fu_258_p2 == 1'd1))) begin
        k2_0_0_reg_152 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        k2_0_0_reg_152 <= add_ln291_reg_418;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_118 <= add_ln283_reg_377;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_0_reg_118 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_33_0_reg_108 <= select_ln284_fu_250_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_33_0_reg_108 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln283_fu_218_p2 == 1'd1))) begin
        p_Val2_34_0_reg_129 <= 40'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_34_0_reg_129 <= add_ln703_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln283_fu_218_p2 == 1'd0))) begin
        add_ln283_reg_377 <= add_ln283_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln286_reg_390 <= add_ln286_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln291_reg_418 <= add_ln291_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_347 <= i_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln286_fu_258_p2 == 1'd0))) begin
        input_0_V_addr_2_reg_395 <= sext_ln1265_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln291_fu_300_p2 == 1'd0))) begin
        input_0_V_addr_3_reg_423 <= sext_ln1265_1_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln286_fu_258_p2 == 1'd1))) begin
        sext_ln1148_reg_400 <= sext_ln1148_fu_284_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln280_fu_175_p2 == 1'd0))) begin
        sub_ln203_reg_352[6 : 1] <= sub_ln203_fu_207_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_ln703_reg_405 <= sub_ln703_fu_288_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln280_fu_175_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln280_fu_175_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_334_ap_start = 1'b1;
    end else begin
        grp_fu_334_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        input_0_V_address0 = input_0_V_addr_3_reg_423;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        input_0_V_address0 = sext_ln1265_1_fu_321_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        input_0_V_address0 = input_0_V_addr_2_reg_395;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_0_V_address0 = sext_ln1265_fu_279_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_V_address0 = sext_ln1494_fu_233_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_0_V_address0 = sext_ln203_fu_213_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        input_0_V_d0 = trunc_ln703_fu_339_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        input_0_V_d0 = grp_exp_40_24_s_fu_163_ap_return;
    end else begin
        input_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state15))) begin
        input_0_V_we0 = 1'b1;
    end else begin
        input_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln280_fu_175_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln283_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln286_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln291_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1265_1_fu_316_p2 = ($signed(sub_ln203_reg_352) + $signed(zext_ln1265_1_fu_312_p1));

assign add_ln1265_fu_274_p2 = ($signed(sub_ln203_reg_352) + $signed(zext_ln1265_fu_270_p1));

assign add_ln1494_fu_228_p2 = ($signed(sub_ln203_reg_352) + $signed(zext_ln1494_fu_224_p1));

assign add_ln283_fu_238_p2 = (k_0_0_reg_118 + 3'd1);

assign add_ln286_fu_264_p2 = (k1_0_0_reg_141 + 3'd1);

assign add_ln291_fu_306_p2 = (k2_0_0_reg_152 + 3'd1);

assign add_ln703_fu_294_p2 = ($signed(p_Val2_34_0_reg_129) + $signed(grp_exp_40_24_s_fu_163_ap_return));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_NS_fsm_state8 = ap_NS_fsm[32'd7];

assign grp_exp_40_24_s_fu_163_ap_start = grp_exp_40_24_s_fu_163_ap_start_reg;

assign grp_fu_334_p0 = {{input_0_V_q0}, {16'd0}};

assign grp_fu_334_p1 = sext_ln1148_reg_400;

assign i_fu_181_p2 = (i_0_reg_97 + 4'd1);

assign icmp_ln1494_fu_244_p2 = (($signed(input_0_V_q0) > $signed(p_Val2_33_0_reg_108)) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_175_p2 = ((i_0_reg_97 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln283_fu_218_p2 = ((k_0_0_reg_118 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln286_fu_258_p2 = ((k1_0_0_reg_141 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_300_p2 = ((k2_0_0_reg_152 == 3'd6) ? 1'b1 : 1'b0);

assign select_ln284_fu_250_p3 = ((icmp_ln1494_fu_244_p2[0:0] === 1'b1) ? input_0_V_q0 : p_Val2_33_0_reg_108);

assign sext_ln1148_fu_284_p1 = p_Val2_34_0_reg_129;

assign sext_ln1265_1_fu_321_p1 = $signed(add_ln1265_1_fu_316_p2);

assign sext_ln1265_fu_279_p1 = $signed(add_ln1265_fu_274_p2);

assign sext_ln1494_fu_233_p1 = $signed(add_ln1494_fu_228_p2);

assign sext_ln203_fu_213_p1 = sub_ln203_fu_207_p2;

assign sub_ln203_fu_207_p2 = (tmp_s_fu_187_p3 - zext_ln203_fu_203_p1);

assign sub_ln703_fu_288_p2 = (input_0_V_q0 - p_Val2_33_0_reg_108);

assign tmp_53_fu_195_p3 = {{i_0_reg_97}, {1'd0}};

assign tmp_s_fu_187_p3 = {{i_0_reg_97}, {3'd0}};

assign trunc_ln703_fu_339_p1 = grp_fu_334_p2[39:0];

assign zext_ln1265_1_fu_312_p1 = k2_0_0_reg_152;

assign zext_ln1265_fu_270_p1 = k1_0_0_reg_141;

assign zext_ln1494_fu_224_p1 = k_0_0_reg_118;

assign zext_ln203_fu_203_p1 = tmp_53_fu_195_p3;

always @ (posedge ap_clk) begin
    sub_ln203_reg_352[0] <= 1'b0;
end

endmodule //softmax_1_8_6_s
