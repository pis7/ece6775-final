// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_1_0_V_address0,
        input_1_0_V_ce0,
        input_1_0_V_q0,
        input_2_V_address0,
        input_2_V_ce0,
        input_2_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_1_0_V_address0;
output   input_1_0_V_ce0;
input  [39:0] input_1_0_V_q0;
output  [11:0] input_2_V_address0;
output   input_2_V_ce0;
input  [39:0] input_2_V_q0;
output  [8:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;
input  [39:0] output_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_1_0_V_ce0;
reg input_2_V_ce0;
reg output_0_V_ce0;
reg output_0_V_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_149_p2;
reg   [3:0] i_reg_343;
wire    ap_CS_fsm_state2;
wire  signed [8:0] sext_ln1116_fu_185_p1;
reg  signed [8:0] sext_ln1116_reg_348;
wire   [0:0] icmp_ln250_fu_143_p2;
wire   [9:0] sub_ln1265_fu_209_p2;
reg   [9:0] sub_ln1265_reg_353;
wire   [5:0] add_ln252_fu_221_p2;
reg   [5:0] add_ln252_reg_361;
wire    ap_CS_fsm_state3;
wire   [12:0] zext_ln1265_6_fu_227_p1;
reg   [12:0] zext_ln1265_6_reg_366;
wire   [0:0] icmp_ln252_fu_215_p2;
reg   [8:0] output_0_V_addr_reg_371;
wire   [2:0] add_ln253_fu_251_p2;
reg   [2:0] add_ln253_reg_379;
wire    ap_CS_fsm_state4;
wire  signed [8:0] add_ln1116_fu_261_p2;
reg  signed [8:0] add_ln1116_reg_384;
wire   [0:0] icmp_ln253_fu_245_p2;
wire   [12:0] add_ln1117_fu_292_p2;
reg   [12:0] add_ln1117_reg_389;
wire    ap_CS_fsm_state5;
reg   [39:0] input_1_0_V_load_reg_404;
wire    ap_CS_fsm_state6;
reg   [39:0] input_2_V_load_reg_409;
wire   [55:0] mul_ln1192_fu_311_p2;
reg   [55:0] mul_ln1192_reg_414;
wire    ap_CS_fsm_state7;
reg   [39:0] output_0_V_load_reg_419;
reg   [3:0] i_0_reg_110;
reg   [5:0] k_0_0_reg_121;
reg   [2:0] l_0_0_reg_132;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln1265_fu_240_p1;
wire  signed [63:0] sext_ln1116_2_fu_297_p1;
wire   [63:0] zext_ln1117_fu_301_p1;
wire   [6:0] tmp_80_fu_155_p3;
wire   [4:0] tmp_81_fu_167_p3;
wire   [7:0] zext_ln1116_fu_163_p1;
wire   [7:0] zext_ln1116_5_fu_175_p1;
wire   [7:0] sub_ln1116_fu_179_p2;
wire   [7:0] tmp_83_fu_197_p3;
wire   [9:0] tmp_82_fu_189_p3;
wire   [9:0] zext_ln1265_fu_205_p1;
wire   [9:0] zext_ln1265_7_fu_231_p1;
wire   [9:0] add_ln1265_fu_235_p2;
wire   [8:0] zext_ln1116_6_fu_257_p1;
wire   [6:0] trunc_ln1117_fu_266_p1;
wire   [12:0] p_shl4_cast_fu_270_p3;
wire   [12:0] p_shl5_cast_fu_278_p3;
wire   [12:0] sub_ln1117_fu_286_p2;
wire  signed [39:0] mul_ln1192_fu_311_p0;
wire  signed [39:0] mul_ln1192_fu_311_p1;
wire   [55:0] shl_ln_fu_317_p3;
wire   [55:0] add_ln1192_fu_324_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_110 <= i_reg_343;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_110 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln253_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_0_reg_121 <= add_ln252_reg_361;
    end else if (((icmp_ln250_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_121 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l_0_0_reg_132 <= add_ln253_reg_379;
    end else if (((icmp_ln252_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l_0_0_reg_132 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln253_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln1116_reg_384 <= add_ln1116_fu_261_p2;
        add_ln1117_reg_389 <= add_ln1117_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln252_reg_361 <= add_ln252_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln253_reg_379 <= add_ln253_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_343 <= i_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_0_V_load_reg_404 <= input_1_0_V_q0;
        input_2_V_load_reg_409 <= input_2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1192_reg_414 <= mul_ln1192_fu_311_p2;
        output_0_V_load_reg_419 <= output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_addr_reg_371 <= sext_ln1265_fu_240_p1;
        zext_ln1265_6_reg_366[5 : 0] <= zext_ln1265_6_fu_227_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln1116_reg_348[8 : 1] <= sext_ln1116_fu_185_p1[8 : 1];
        sub_ln1265_reg_353[9 : 4] <= sub_ln1265_fu_209_p2[9 : 4];
    end
end

always @ (*) begin
    if ((((icmp_ln250_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln250_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_V_ce0 = 1'b1;
    end else begin
        input_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln250_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln252_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln253_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_261_p2 = ($signed(sext_ln1116_reg_348) + $signed(zext_ln1116_6_fu_257_p1));

assign add_ln1117_fu_292_p2 = (sub_ln1117_fu_286_p2 + zext_ln1265_6_reg_366);

assign add_ln1192_fu_324_p2 = (mul_ln1192_reg_414 + shl_ln_fu_317_p3);

assign add_ln1265_fu_235_p2 = (sub_ln1265_reg_353 + zext_ln1265_7_fu_231_p1);

assign add_ln252_fu_221_p2 = (k_0_0_reg_121 + 6'd1);

assign add_ln253_fu_251_p2 = (l_0_0_reg_132 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_fu_149_p2 = (i_0_reg_110 + 4'd1);

assign icmp_ln250_fu_143_p2 = ((i_0_reg_110 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_215_p2 = ((k_0_0_reg_121 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln253_fu_245_p2 = ((l_0_0_reg_132 == 3'd6) ? 1'b1 : 1'b0);

assign input_1_0_V_address0 = sext_ln1116_2_fu_297_p1;

assign input_2_V_address0 = zext_ln1117_fu_301_p1;

assign mul_ln1192_fu_311_p0 = input_2_V_load_reg_409;

assign mul_ln1192_fu_311_p1 = input_1_0_V_load_reg_404;

assign mul_ln1192_fu_311_p2 = ($signed(mul_ln1192_fu_311_p0) * $signed(mul_ln1192_fu_311_p1));

assign output_0_V_address0 = output_0_V_addr_reg_371;

assign output_0_V_d0 = {{add_ln1192_fu_324_p2[55:16]}};

assign p_shl4_cast_fu_270_p3 = {{trunc_ln1117_fu_266_p1}, {6'd0}};

assign p_shl5_cast_fu_278_p3 = {{add_ln1116_fu_261_p2}, {4'd0}};

assign sext_ln1116_2_fu_297_p1 = add_ln1116_reg_384;

assign sext_ln1116_fu_185_p1 = $signed(sub_ln1116_fu_179_p2);

assign sext_ln1265_fu_240_p1 = $signed(add_ln1265_fu_235_p2);

assign shl_ln_fu_317_p3 = {{output_0_V_load_reg_419}, {16'd0}};

assign sub_ln1116_fu_179_p2 = (zext_ln1116_fu_163_p1 - zext_ln1116_5_fu_175_p1);

assign sub_ln1117_fu_286_p2 = (p_shl4_cast_fu_270_p3 - p_shl5_cast_fu_278_p3);

assign sub_ln1265_fu_209_p2 = (tmp_82_fu_189_p3 - zext_ln1265_fu_205_p1);

assign tmp_80_fu_155_p3 = {{i_0_reg_110}, {3'd0}};

assign tmp_81_fu_167_p3 = {{i_0_reg_110}, {1'd0}};

assign tmp_82_fu_189_p3 = {{i_0_reg_110}, {6'd0}};

assign tmp_83_fu_197_p3 = {{i_0_reg_110}, {4'd0}};

assign trunc_ln1117_fu_266_p1 = add_ln1116_fu_261_p2[6:0];

assign zext_ln1116_5_fu_175_p1 = tmp_81_fu_167_p3;

assign zext_ln1116_6_fu_257_p1 = l_0_0_reg_132;

assign zext_ln1116_fu_163_p1 = tmp_80_fu_155_p3;

assign zext_ln1117_fu_301_p1 = add_ln1117_reg_389;

assign zext_ln1265_6_fu_227_p1 = k_0_0_reg_121;

assign zext_ln1265_7_fu_231_p1 = k_0_0_reg_121;

assign zext_ln1265_fu_205_p1 = tmp_83_fu_197_p3;

always @ (posedge ap_clk) begin
    sext_ln1116_reg_348[0] <= 1'b0;
    sub_ln1265_reg_353[3:0] <= 4'b0000;
    zext_ln1265_6_reg_366[12:6] <= 7'b0000000;
end

endmodule //GEMM_3D_float
