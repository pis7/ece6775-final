// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cache_update_HH_
#define _cache_update_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct cache_update : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > cache_in_V_address0;
    sc_out< sc_logic > cache_in_V_ce0;
    sc_in< sc_lv<40> > cache_in_V_q0;
    sc_out< sc_lv<12> > cache_out_V_address0;
    sc_out< sc_logic > cache_out_V_ce0;
    sc_out< sc_logic > cache_out_V_we0;
    sc_out< sc_lv<40> > cache_out_V_d0;
    sc_out< sc_lv<9> > update_0_V_address0;
    sc_out< sc_logic > update_0_V_ce0;
    sc_in< sc_lv<40> > update_0_V_q0;


    // Module declarations
    cache_update(sc_module_name name);
    SC_HAS_PROCESS(cache_update);

    ~cache_update();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_fu_148_p2;
    sc_signal< sc_lv<4> > i_reg_392;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > add_ln245_fu_170_p2;
    sc_signal< sc_lv<7> > add_ln245_reg_397;
    sc_signal< sc_lv<1> > icmp_ln242_fu_142_p2;
    sc_signal< sc_lv<9> > sext_ln203_fu_206_p1;
    sc_signal< sc_lv<9> > sext_ln203_reg_402;
    sc_signal< sc_lv<10> > sub_ln245_fu_230_p2;
    sc_signal< sc_lv<10> > sub_ln245_reg_407;
    sc_signal< sc_lv<3> > j_fu_242_p2;
    sc_signal< sc_lv<3> > j_reg_415;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<12> > sub_ln245_1_fu_285_p2;
    sc_signal< sc_lv<12> > sub_ln245_1_reg_420;
    sc_signal< sc_lv<1> > icmp_ln243_fu_236_p2;
    sc_signal< sc_lv<13> > sub_ln203_4_fu_316_p2;
    sc_signal< sc_lv<13> > sub_ln203_4_reg_425;
    sc_signal< sc_lv<1> > icmp_ln245_fu_322_p2;
    sc_signal< sc_lv<1> > icmp_ln245_reg_430;
    sc_signal< sc_lv<6> > k_fu_334_p2;
    sc_signal< sc_lv<6> > k_reg_438;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln244_fu_328_p2;
    sc_signal< sc_lv<13> > add_ln203_4_fu_362_p2;
    sc_signal< sc_lv<13> > add_ln203_4_reg_448;
    sc_signal< sc_lv<4> > i_0_reg_109;
    sc_signal< sc_lv<3> > j_0_reg_120;
    sc_signal< sc_lv<6> > k_0_reg_131;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln245_9_fu_357_p1;
    sc_signal< sc_lv<64> > sext_ln245_fu_372_p1;
    sc_signal< sc_lv<64> > zext_ln203_11_fu_377_p1;
    sc_signal< sc_lv<6> > tmp_59_fu_158_p3;
    sc_signal< sc_lv<7> > zext_ln245_fu_154_p1;
    sc_signal< sc_lv<7> > zext_ln245_1_fu_166_p1;
    sc_signal< sc_lv<7> > tmp_60_fu_176_p3;
    sc_signal< sc_lv<5> > tmp_61_fu_188_p3;
    sc_signal< sc_lv<8> > zext_ln203_fu_184_p1;
    sc_signal< sc_lv<8> > zext_ln203_10_fu_196_p1;
    sc_signal< sc_lv<8> > sub_ln203_fu_200_p2;
    sc_signal< sc_lv<8> > tmp_63_fu_218_p3;
    sc_signal< sc_lv<10> > tmp_62_fu_210_p3;
    sc_signal< sc_lv<10> > zext_ln245_2_fu_226_p1;
    sc_signal< sc_lv<7> > zext_ln245_4_fu_252_p1;
    sc_signal< sc_lv<7> > add_ln245_1_fu_256_p2;
    sc_signal< sc_lv<6> > trunc_ln245_fu_261_p1;
    sc_signal< sc_lv<11> > tmp_83_fu_273_p3;
    sc_signal< sc_lv<12> > p_shl7_cast_fu_265_p3;
    sc_signal< sc_lv<12> > zext_ln245_5_fu_281_p1;
    sc_signal< sc_lv<9> > zext_ln245_3_fu_248_p1;
    sc_signal< sc_lv<9> > add_ln203_fu_291_p2;
    sc_signal< sc_lv<7> > trunc_ln203_fu_296_p1;
    sc_signal< sc_lv<13> > p_shl5_cast_fu_300_p3;
    sc_signal< sc_lv<13> > p_shl6_cast_fu_308_p3;
    sc_signal< sc_lv<12> > zext_ln245_8_fu_348_p1;
    sc_signal< sc_lv<12> > add_ln245_2_fu_352_p2;
    sc_signal< sc_lv<13> > zext_ln245_7_fu_344_p1;
    sc_signal< sc_lv<10> > zext_ln245_6_fu_340_p1;
    sc_signal< sc_lv<10> > add_ln245_3_fu_367_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<6> ap_const_lv6_30;
    static const sc_lv<6> ap_const_lv6_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln203_4_fu_362_p2();
    void thread_add_ln203_fu_291_p2();
    void thread_add_ln245_1_fu_256_p2();
    void thread_add_ln245_2_fu_352_p2();
    void thread_add_ln245_3_fu_367_p2();
    void thread_add_ln245_fu_170_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cache_in_V_address0();
    void thread_cache_in_V_ce0();
    void thread_cache_out_V_address0();
    void thread_cache_out_V_ce0();
    void thread_cache_out_V_d0();
    void thread_cache_out_V_we0();
    void thread_i_fu_148_p2();
    void thread_icmp_ln242_fu_142_p2();
    void thread_icmp_ln243_fu_236_p2();
    void thread_icmp_ln244_fu_328_p2();
    void thread_icmp_ln245_fu_322_p2();
    void thread_j_fu_242_p2();
    void thread_k_fu_334_p2();
    void thread_p_shl5_cast_fu_300_p3();
    void thread_p_shl6_cast_fu_308_p3();
    void thread_p_shl7_cast_fu_265_p3();
    void thread_sext_ln203_fu_206_p1();
    void thread_sext_ln245_fu_372_p1();
    void thread_sub_ln203_4_fu_316_p2();
    void thread_sub_ln203_fu_200_p2();
    void thread_sub_ln245_1_fu_285_p2();
    void thread_sub_ln245_fu_230_p2();
    void thread_tmp_59_fu_158_p3();
    void thread_tmp_60_fu_176_p3();
    void thread_tmp_61_fu_188_p3();
    void thread_tmp_62_fu_210_p3();
    void thread_tmp_63_fu_218_p3();
    void thread_tmp_83_fu_273_p3();
    void thread_trunc_ln203_fu_296_p1();
    void thread_trunc_ln245_fu_261_p1();
    void thread_update_0_V_address0();
    void thread_update_0_V_ce0();
    void thread_zext_ln203_10_fu_196_p1();
    void thread_zext_ln203_11_fu_377_p1();
    void thread_zext_ln203_fu_184_p1();
    void thread_zext_ln245_1_fu_166_p1();
    void thread_zext_ln245_2_fu_226_p1();
    void thread_zext_ln245_3_fu_248_p1();
    void thread_zext_ln245_4_fu_252_p1();
    void thread_zext_ln245_5_fu_281_p1();
    void thread_zext_ln245_6_fu_340_p1();
    void thread_zext_ln245_7_fu_344_p1();
    void thread_zext_ln245_8_fu_348_p1();
    void thread_zext_ln245_9_fu_357_p1();
    void thread_zext_ln245_fu_154_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
