// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_q_0_V_address0,
        input_q_0_V_ce0,
        input_q_0_V_q0,
        input_q_0_V_address1,
        input_q_0_V_ce1,
        input_q_0_V_q1,
        input_k_0_V_address0,
        input_k_0_V_ce0,
        input_k_0_V_q0,
        input_k_0_V_address1,
        input_k_0_V_ce1,
        input_k_0_V_q1,
        output_q_0_V_address0,
        output_q_0_V_ce0,
        output_q_0_V_we0,
        output_q_0_V_d0,
        output_k_0_V_address0,
        output_k_0_V_ce0,
        output_k_0_V_we0,
        output_k_0_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_q_0_V_address0;
output   input_q_0_V_ce0;
input  [39:0] input_q_0_V_q0;
output  [8:0] input_q_0_V_address1;
output   input_q_0_V_ce1;
input  [39:0] input_q_0_V_q1;
output  [8:0] input_k_0_V_address0;
output   input_k_0_V_ce0;
input  [39:0] input_k_0_V_q0;
output  [8:0] input_k_0_V_address1;
output   input_k_0_V_ce1;
input  [39:0] input_k_0_V_q1;
output  [8:0] output_q_0_V_address0;
output   output_q_0_V_ce0;
output   output_q_0_V_we0;
output  [39:0] output_q_0_V_d0;
output  [8:0] output_k_0_V_address0;
output   output_k_0_V_ce0;
output   output_k_0_V_we0;
output  [39:0] output_k_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] input_q_0_V_address0;
reg input_q_0_V_ce0;
reg input_q_0_V_ce1;
reg[8:0] input_k_0_V_address0;
reg input_k_0_V_ce0;
reg input_k_0_V_ce1;
reg output_q_0_V_ce0;
reg output_q_0_V_we0;
reg output_k_0_V_ce0;
reg output_k_0_V_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_tab_V_5_address0;
reg    cos_tab_V_5_ce0;
wire   [16:0] cos_tab_V_5_q0;
wire   [6:0] sin_tab_V_5_address0;
reg    sin_tab_V_5_ce0;
wire   [16:0] sin_tab_V_5_q0;
reg   [39:0] reg_298;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
reg   [39:0] reg_302;
wire   [3:0] i_fu_312_p2;
reg   [3:0] i_reg_560;
wire    ap_CS_fsm_state2;
wire   [9:0] sub_ln1265_fu_338_p2;
reg   [9:0] sub_ln1265_reg_565;
wire   [0:0] icmp_ln182_fu_306_p2;
wire   [4:0] add_ln184_fu_354_p2;
reg   [4:0] add_ln184_reg_574;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln203_fu_369_p1;
reg  signed [63:0] sext_ln203_reg_579;
wire   [0:0] icmp_ln184_fu_348_p2;
wire  signed [63:0] sext_ln1265_fu_390_p1;
reg  signed [63:0] sext_ln1265_reg_595;
wire   [3:0] i_3_fu_416_p2;
reg   [3:0] i_3_reg_614;
wire    ap_CS_fsm_state6;
wire   [9:0] sub_ln1116_fu_442_p2;
reg   [9:0] sub_ln1116_reg_619;
wire   [0:0] icmp_ln194_fu_410_p2;
wire   [5:0] add_ln196_fu_454_p2;
reg   [5:0] add_ln196_reg_627;
wire    ap_CS_fsm_state7;
wire  signed [63:0] sext_ln1116_fu_475_p1;
reg  signed [63:0] sext_ln1116_reg_632;
wire   [0:0] icmp_ln196_fu_448_p2;
reg   [16:0] cos_tab_V_5_load_reg_668;
reg   [16:0] sin_tab_V_5_load_reg_673;
wire   [39:0] rotated_q_0_V_q0;
reg   [39:0] rotated_q_0_V_load_reg_678;
wire   [39:0] rotated_k_0_V_q0;
reg   [39:0] rotated_k_0_V_load_reg_683;
wire   [55:0] mul_ln1118_fu_490_p2;
reg   [55:0] mul_ln1118_reg_688;
wire    ap_CS_fsm_state9;
wire   [55:0] mul_ln1118_4_fu_502_p2;
reg   [55:0] mul_ln1118_4_reg_693;
wire   [55:0] mul_ln1118_5_fu_512_p2;
reg   [55:0] mul_ln1118_5_reg_698;
wire   [55:0] mul_ln1118_6_fu_521_p2;
reg   [55:0] mul_ln1118_6_reg_703;
reg   [8:0] rotated_q_0_V_address0;
reg    rotated_q_0_V_ce0;
reg    rotated_q_0_V_we0;
reg   [39:0] rotated_q_0_V_d0;
reg   [8:0] rotated_k_0_V_address0;
reg    rotated_k_0_V_ce0;
reg    rotated_k_0_V_we0;
reg   [39:0] rotated_k_0_V_d0;
reg   [3:0] i_0_reg_254;
reg   [4:0] k_0_0_reg_265;
wire    ap_CS_fsm_state5;
reg   [3:0] i14_0_reg_276;
reg   [5:0] k16_0_0_reg_287;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln197_fu_460_p1;
wire   [39:0] sub_ln703_fu_396_p2;
wire   [39:0] sub_ln703_35_fu_403_p2;
wire   [7:0] tmp_73_fu_326_p3;
wire   [9:0] tmp_72_fu_318_p3;
wire   [9:0] zext_ln1265_fu_334_p1;
wire   [9:0] zext_ln203_fu_360_p1;
wire   [9:0] add_ln203_fu_364_p2;
wire   [5:0] zext_ln184_fu_344_p1;
wire   [5:0] add_ln185_fu_375_p2;
wire   [9:0] zext_ln1265_3_fu_381_p1;
wire   [9:0] add_ln1265_fu_385_p2;
wire   [7:0] tmp_75_fu_430_p3;
wire   [9:0] tmp_74_fu_422_p3;
wire   [9:0] zext_ln1116_fu_438_p1;
wire   [9:0] zext_ln1116_2_fu_466_p1;
wire   [9:0] add_ln1116_fu_470_p2;
wire  signed [16:0] mul_ln1118_fu_490_p0;
wire  signed [55:0] sext_ln1118_5_fu_487_p1;
wire  signed [39:0] mul_ln1118_fu_490_p1;
wire  signed [16:0] mul_ln1118_4_fu_502_p0;
wire  signed [55:0] sext_ln1118_7_fu_499_p1;
wire  signed [39:0] mul_ln1118_4_fu_502_p1;
wire  signed [16:0] mul_ln1118_5_fu_512_p0;
wire  signed [39:0] mul_ln1118_5_fu_512_p1;
wire  signed [16:0] mul_ln1118_6_fu_521_p0;
wire  signed [39:0] mul_ln1118_6_fu_521_p1;
wire   [55:0] add_ln1192_fu_527_p2;
wire   [55:0] add_ln1192_1_fu_542_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

apply_rotary_pos_g8j #(
    .DataWidth( 17 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
cos_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_tab_V_5_address0),
    .ce0(cos_tab_V_5_ce0),
    .q0(cos_tab_V_5_q0)
);

apply_rotary_pos_hbi #(
    .DataWidth( 17 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
sin_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_tab_V_5_address0),
    .ce0(sin_tab_V_5_ce0),
    .q0(sin_tab_V_5_q0)
);

apply_rotary_pos_ibs #(
    .DataWidth( 40 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
rotated_q_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_V_address0),
    .ce0(rotated_q_0_V_ce0),
    .we0(rotated_q_0_V_we0),
    .d0(rotated_q_0_V_d0),
    .q0(rotated_q_0_V_q0)
);

apply_rotary_pos_ibs #(
    .DataWidth( 40 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
rotated_k_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_V_address0),
    .ce0(rotated_k_0_V_ce0),
    .we0(rotated_k_0_V_we0),
    .d0(rotated_k_0_V_d0),
    .q0(rotated_k_0_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i14_0_reg_276 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln196_fu_448_p2 == 1'd1))) begin
        i14_0_reg_276 <= i_3_reg_614;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_254 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln184_fu_348_p2 == 1'd1))) begin
        i_0_reg_254 <= i_reg_560;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k16_0_0_reg_287 <= add_ln196_reg_627;
    end else if (((icmp_ln194_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k16_0_0_reg_287 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_265 <= add_ln184_reg_574;
    end else if (((icmp_ln182_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_265 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln184_reg_574 <= add_ln184_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln196_reg_627 <= add_ln196_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cos_tab_V_5_load_reg_668 <= cos_tab_V_5_q0;
        rotated_k_0_V_load_reg_683 <= rotated_k_0_V_q0;
        rotated_q_0_V_load_reg_678 <= rotated_q_0_V_q0;
        sin_tab_V_5_load_reg_673 <= sin_tab_V_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_614 <= i_3_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_560 <= i_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln1118_4_reg_693 <= mul_ln1118_4_fu_502_p2;
        mul_ln1118_5_reg_698 <= mul_ln1118_5_fu_512_p2;
        mul_ln1118_6_reg_703 <= mul_ln1118_6_fu_521_p2;
        mul_ln1118_reg_688 <= mul_ln1118_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_298 <= input_q_0_V_q0;
        reg_302 <= input_k_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sext_ln1116_reg_632 <= sext_ln1116_fu_475_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln184_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln1265_reg_595 <= sext_ln1265_fu_390_p1;
        sext_ln203_reg_579 <= sext_ln203_fu_369_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln194_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln1116_reg_619[9 : 4] <= sub_ln1116_fu_442_p2[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln1265_reg_565[9 : 4] <= sub_ln1265_fu_338_p2[9 : 4];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln194_fu_410_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln194_fu_410_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cos_tab_V_5_ce0 = 1'b1;
    end else begin
        cos_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_k_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_address0 = sext_ln1265_fu_390_p1;
    end else begin
        input_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        input_k_0_V_ce0 = 1'b1;
    end else begin
        input_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_ce1 = 1'b1;
    end else begin
        input_k_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_q_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_address0 = sext_ln1265_fu_390_p1;
    end else begin
        input_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        input_q_0_V_ce0 = 1'b1;
    end else begin
        input_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_ce1 = 1'b1;
    end else begin
        input_q_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_k_0_V_ce0 = 1'b1;
    end else begin
        output_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_k_0_V_we0 = 1'b1;
    end else begin
        output_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_0_V_ce0 = 1'b1;
    end else begin
        output_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_q_0_V_we0 = 1'b1;
    end else begin
        output_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rotated_k_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_address0 = sext_ln203_reg_579;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_address0 = sext_ln1265_reg_595;
    end else begin
        rotated_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        rotated_k_0_V_ce0 = 1'b1;
    end else begin
        rotated_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_d0 = sub_ln703_35_fu_403_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_d0 = input_k_0_V_q1;
    end else begin
        rotated_k_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        rotated_k_0_V_we0 = 1'b1;
    end else begin
        rotated_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rotated_q_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_address0 = sext_ln203_reg_579;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_address0 = sext_ln1265_reg_595;
    end else begin
        rotated_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        rotated_q_0_V_ce0 = 1'b1;
    end else begin
        rotated_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_d0 = sub_ln703_fu_396_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_d0 = input_q_0_V_q1;
    end else begin
        rotated_q_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        rotated_q_0_V_we0 = 1'b1;
    end else begin
        rotated_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sin_tab_V_5_ce0 = 1'b1;
    end else begin
        sin_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln182_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln184_fu_348_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln194_fu_410_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln196_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_470_p2 = (sub_ln1116_reg_619 + zext_ln1116_2_fu_466_p1);

assign add_ln1192_1_fu_542_p2 = (mul_ln1118_5_reg_698 + mul_ln1118_6_reg_703);

assign add_ln1192_fu_527_p2 = (mul_ln1118_reg_688 + mul_ln1118_4_reg_693);

assign add_ln1265_fu_385_p2 = (sub_ln1265_reg_565 + zext_ln1265_3_fu_381_p1);

assign add_ln184_fu_354_p2 = (k_0_0_reg_265 + 5'd1);

assign add_ln185_fu_375_p2 = (zext_ln184_fu_344_p1 + 6'd24);

assign add_ln196_fu_454_p2 = (k16_0_0_reg_287 + 6'd1);

assign add_ln203_fu_364_p2 = (sub_ln1265_reg_565 + zext_ln203_fu_360_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cos_tab_V_5_address0 = zext_ln197_fu_460_p1;

assign i_3_fu_416_p2 = (i14_0_reg_276 + 4'd1);

assign i_fu_312_p2 = (i_0_reg_254 + 4'd1);

assign icmp_ln182_fu_306_p2 = ((i_0_reg_254 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_348_p2 = ((k_0_0_reg_265 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_410_p2 = ((i14_0_reg_276 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_448_p2 = ((k16_0_0_reg_287 == 6'd48) ? 1'b1 : 1'b0);

assign input_k_0_V_address1 = sext_ln203_fu_369_p1;

assign input_q_0_V_address1 = sext_ln203_fu_369_p1;

assign mul_ln1118_4_fu_502_p0 = sext_ln1118_7_fu_499_p1;

assign mul_ln1118_4_fu_502_p1 = rotated_q_0_V_load_reg_678;

assign mul_ln1118_4_fu_502_p2 = ($signed(mul_ln1118_4_fu_502_p0) * $signed(mul_ln1118_4_fu_502_p1));

assign mul_ln1118_5_fu_512_p0 = sext_ln1118_5_fu_487_p1;

assign mul_ln1118_5_fu_512_p1 = reg_302;

assign mul_ln1118_5_fu_512_p2 = ($signed(mul_ln1118_5_fu_512_p0) * $signed(mul_ln1118_5_fu_512_p1));

assign mul_ln1118_6_fu_521_p0 = sext_ln1118_7_fu_499_p1;

assign mul_ln1118_6_fu_521_p1 = rotated_k_0_V_load_reg_683;

assign mul_ln1118_6_fu_521_p2 = ($signed(mul_ln1118_6_fu_521_p0) * $signed(mul_ln1118_6_fu_521_p1));

assign mul_ln1118_fu_490_p0 = sext_ln1118_5_fu_487_p1;

assign mul_ln1118_fu_490_p1 = reg_298;

assign mul_ln1118_fu_490_p2 = ($signed(mul_ln1118_fu_490_p0) * $signed(mul_ln1118_fu_490_p1));

assign output_k_0_V_address0 = sext_ln1116_reg_632;

assign output_k_0_V_d0 = {{add_ln1192_1_fu_542_p2[55:16]}};

assign output_q_0_V_address0 = sext_ln1116_reg_632;

assign output_q_0_V_d0 = {{add_ln1192_fu_527_p2[55:16]}};

assign sext_ln1116_fu_475_p1 = $signed(add_ln1116_fu_470_p2);

assign sext_ln1118_5_fu_487_p1 = $signed(cos_tab_V_5_load_reg_668);

assign sext_ln1118_7_fu_499_p1 = $signed(sin_tab_V_5_load_reg_673);

assign sext_ln1265_fu_390_p1 = $signed(add_ln1265_fu_385_p2);

assign sext_ln203_fu_369_p1 = $signed(add_ln203_fu_364_p2);

assign sin_tab_V_5_address0 = zext_ln197_fu_460_p1;

assign sub_ln1116_fu_442_p2 = (tmp_74_fu_422_p3 - zext_ln1116_fu_438_p1);

assign sub_ln1265_fu_338_p2 = (tmp_72_fu_318_p3 - zext_ln1265_fu_334_p1);

assign sub_ln703_35_fu_403_p2 = (40'd0 - reg_302);

assign sub_ln703_fu_396_p2 = (40'd0 - reg_298);

assign tmp_72_fu_318_p3 = {{i_0_reg_254}, {6'd0}};

assign tmp_73_fu_326_p3 = {{i_0_reg_254}, {4'd0}};

assign tmp_74_fu_422_p3 = {{i14_0_reg_276}, {6'd0}};

assign tmp_75_fu_430_p3 = {{i14_0_reg_276}, {4'd0}};

assign zext_ln1116_2_fu_466_p1 = k16_0_0_reg_287;

assign zext_ln1116_fu_438_p1 = tmp_75_fu_430_p3;

assign zext_ln1265_3_fu_381_p1 = add_ln185_fu_375_p2;

assign zext_ln1265_fu_334_p1 = tmp_73_fu_326_p3;

assign zext_ln184_fu_344_p1 = k_0_0_reg_265;

assign zext_ln197_fu_460_p1 = k16_0_0_reg_287;

assign zext_ln203_fu_360_p1 = k_0_0_reg_265;

always @ (posedge ap_clk) begin
    sub_ln1265_reg_565[3:0] <= 4'b0000;
    sub_ln1116_reg_619[3:0] <= 4'b0000;
end

endmodule //apply_rotary_pos_emb
