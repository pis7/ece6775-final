// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantize_activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_0_V_address1,
        input_0_V_ce1,
        input_0_V_q1,
        output_states_0_0_0_V_address0,
        output_states_0_0_0_V_ce0,
        output_states_0_0_0_V_we0,
        output_states_0_0_0_V_d0,
        output_states_0_1_0_V_address0,
        output_states_0_1_0_V_ce0,
        output_states_0_1_0_V_we0,
        output_states_0_1_0_V_d0,
        output_states_0_2_0_V_address0,
        output_states_0_2_0_V_ce0,
        output_states_0_2_0_V_we0,
        output_states_0_2_0_V_d0,
        output_states_0_3_0_V_address0,
        output_states_0_3_0_V_ce0,
        output_states_0_3_0_V_we0,
        output_states_0_3_0_V_d0,
        output_states_1_0_0_V_address0,
        output_states_1_0_0_V_ce0,
        output_states_1_0_0_V_we0,
        output_states_1_0_0_V_d0,
        output_states_1_1_0_V_address0,
        output_states_1_1_0_V_ce0,
        output_states_1_1_0_V_we0,
        output_states_1_1_0_V_d0,
        output_states_1_2_0_V_address0,
        output_states_1_2_0_V_ce0,
        output_states_1_2_0_V_we0,
        output_states_1_2_0_V_d0,
        output_states_1_3_0_V_address0,
        output_states_1_3_0_V_ce0,
        output_states_1_3_0_V_we0,
        output_states_1_3_0_V_d0,
        output_states_2_0_0_V_address0,
        output_states_2_0_0_V_ce0,
        output_states_2_0_0_V_we0,
        output_states_2_0_0_V_d0,
        output_states_2_1_0_V_address0,
        output_states_2_1_0_V_ce0,
        output_states_2_1_0_V_we0,
        output_states_2_1_0_V_d0,
        output_states_2_2_0_V_address0,
        output_states_2_2_0_V_ce0,
        output_states_2_2_0_V_we0,
        output_states_2_2_0_V_d0,
        output_states_2_3_0_V_address0,
        output_states_2_3_0_V_ce0,
        output_states_2_3_0_V_we0,
        output_states_2_3_0_V_d0,
        output_states_3_0_0_V_address0,
        output_states_3_0_0_V_ce0,
        output_states_3_0_0_V_we0,
        output_states_3_0_0_V_d0,
        output_states_3_1_0_V_address0,
        output_states_3_1_0_V_ce0,
        output_states_3_1_0_V_we0,
        output_states_3_1_0_V_d0,
        output_states_3_2_0_V_address0,
        output_states_3_2_0_V_ce0,
        output_states_3_2_0_V_we0,
        output_states_3_2_0_V_d0,
        output_states_3_3_0_V_address0,
        output_states_3_3_0_V_ce0,
        output_states_3_3_0_V_we0,
        output_states_3_3_0_V_d0,
        output_states_4_0_0_V_address0,
        output_states_4_0_0_V_ce0,
        output_states_4_0_0_V_we0,
        output_states_4_0_0_V_d0,
        output_states_4_1_0_V_address0,
        output_states_4_1_0_V_ce0,
        output_states_4_1_0_V_we0,
        output_states_4_1_0_V_d0,
        output_states_4_2_0_V_address0,
        output_states_4_2_0_V_ce0,
        output_states_4_2_0_V_we0,
        output_states_4_2_0_V_d0,
        output_states_4_3_0_V_address0,
        output_states_4_3_0_V_ce0,
        output_states_4_3_0_V_we0,
        output_states_4_3_0_V_d0,
        output_states_5_0_0_V_address0,
        output_states_5_0_0_V_ce0,
        output_states_5_0_0_V_we0,
        output_states_5_0_0_V_d0,
        output_states_5_1_0_V_address0,
        output_states_5_1_0_V_ce0,
        output_states_5_1_0_V_we0,
        output_states_5_1_0_V_d0,
        output_states_5_2_0_V_address0,
        output_states_5_2_0_V_ce0,
        output_states_5_2_0_V_we0,
        output_states_5_2_0_V_d0,
        output_states_5_3_0_V_address0,
        output_states_5_3_0_V_ce0,
        output_states_5_3_0_V_we0,
        output_states_5_3_0_V_d0,
        output_states_6_0_0_V_address0,
        output_states_6_0_0_V_ce0,
        output_states_6_0_0_V_we0,
        output_states_6_0_0_V_d0,
        output_states_6_1_0_V_address0,
        output_states_6_1_0_V_ce0,
        output_states_6_1_0_V_we0,
        output_states_6_1_0_V_d0,
        output_states_6_2_0_V_address0,
        output_states_6_2_0_V_ce0,
        output_states_6_2_0_V_we0,
        output_states_6_2_0_V_d0,
        output_states_6_3_0_V_address0,
        output_states_6_3_0_V_ce0,
        output_states_6_3_0_V_we0,
        output_states_6_3_0_V_d0,
        output_states_7_0_0_V_address0,
        output_states_7_0_0_V_ce0,
        output_states_7_0_0_V_we0,
        output_states_7_0_0_V_d0,
        output_states_7_1_0_V_address0,
        output_states_7_1_0_V_ce0,
        output_states_7_1_0_V_we0,
        output_states_7_1_0_V_d0,
        output_states_7_2_0_V_address0,
        output_states_7_2_0_V_ce0,
        output_states_7_2_0_V_we0,
        output_states_7_2_0_V_d0,
        output_states_7_3_0_V_address0,
        output_states_7_3_0_V_ce0,
        output_states_7_3_0_V_we0,
        output_states_7_3_0_V_d0,
        output_states_8_0_0_V_address0,
        output_states_8_0_0_V_ce0,
        output_states_8_0_0_V_we0,
        output_states_8_0_0_V_d0,
        output_states_8_1_0_V_address0,
        output_states_8_1_0_V_ce0,
        output_states_8_1_0_V_we0,
        output_states_8_1_0_V_d0,
        output_states_8_2_0_V_address0,
        output_states_8_2_0_V_ce0,
        output_states_8_2_0_V_we0,
        output_states_8_2_0_V_d0,
        output_states_8_3_0_V_address0,
        output_states_8_3_0_V_ce0,
        output_states_8_3_0_V_we0,
        output_states_8_3_0_V_d0,
        output_states_9_0_0_V_address0,
        output_states_9_0_0_V_ce0,
        output_states_9_0_0_V_we0,
        output_states_9_0_0_V_d0,
        output_states_9_1_0_V_address0,
        output_states_9_1_0_V_ce0,
        output_states_9_1_0_V_we0,
        output_states_9_1_0_V_d0,
        output_states_9_2_0_V_address0,
        output_states_9_2_0_V_ce0,
        output_states_9_2_0_V_we0,
        output_states_9_2_0_V_d0,
        output_states_9_3_0_V_address0,
        output_states_9_3_0_V_ce0,
        output_states_9_3_0_V_we0,
        output_states_9_3_0_V_d0,
        output_states_10_0_0_V_address0,
        output_states_10_0_0_V_ce0,
        output_states_10_0_0_V_we0,
        output_states_10_0_0_V_d0,
        output_states_10_1_0_V_address0,
        output_states_10_1_0_V_ce0,
        output_states_10_1_0_V_we0,
        output_states_10_1_0_V_d0,
        output_states_10_2_0_V_address0,
        output_states_10_2_0_V_ce0,
        output_states_10_2_0_V_we0,
        output_states_10_2_0_V_d0,
        output_states_10_3_0_V_address0,
        output_states_10_3_0_V_ce0,
        output_states_10_3_0_V_we0,
        output_states_10_3_0_V_d0,
        output_states_11_0_0_V_address0,
        output_states_11_0_0_V_ce0,
        output_states_11_0_0_V_we0,
        output_states_11_0_0_V_d0,
        output_states_11_1_0_V_address0,
        output_states_11_1_0_V_ce0,
        output_states_11_1_0_V_we0,
        output_states_11_1_0_V_d0,
        output_states_11_2_0_V_address0,
        output_states_11_2_0_V_ce0,
        output_states_11_2_0_V_we0,
        output_states_11_2_0_V_d0,
        output_states_11_3_0_V_address0,
        output_states_11_3_0_V_ce0,
        output_states_11_3_0_V_we0,
        output_states_11_3_0_V_d0,
        output_states_12_0_0_V_address0,
        output_states_12_0_0_V_ce0,
        output_states_12_0_0_V_we0,
        output_states_12_0_0_V_d0,
        output_states_12_1_0_V_address0,
        output_states_12_1_0_V_ce0,
        output_states_12_1_0_V_we0,
        output_states_12_1_0_V_d0,
        output_states_12_2_0_V_address0,
        output_states_12_2_0_V_ce0,
        output_states_12_2_0_V_we0,
        output_states_12_2_0_V_d0,
        output_states_12_3_0_V_address0,
        output_states_12_3_0_V_ce0,
        output_states_12_3_0_V_we0,
        output_states_12_3_0_V_d0,
        output_states_13_0_0_V_address0,
        output_states_13_0_0_V_ce0,
        output_states_13_0_0_V_we0,
        output_states_13_0_0_V_d0,
        output_states_13_1_0_V_address0,
        output_states_13_1_0_V_ce0,
        output_states_13_1_0_V_we0,
        output_states_13_1_0_V_d0,
        output_states_13_2_0_V_address0,
        output_states_13_2_0_V_ce0,
        output_states_13_2_0_V_we0,
        output_states_13_2_0_V_d0,
        output_states_13_3_0_V_address0,
        output_states_13_3_0_V_ce0,
        output_states_13_3_0_V_we0,
        output_states_13_3_0_V_d0,
        output_states_14_0_0_V_address0,
        output_states_14_0_0_V_ce0,
        output_states_14_0_0_V_we0,
        output_states_14_0_0_V_d0,
        output_states_14_1_0_V_address0,
        output_states_14_1_0_V_ce0,
        output_states_14_1_0_V_we0,
        output_states_14_1_0_V_d0,
        output_states_14_2_0_V_address0,
        output_states_14_2_0_V_ce0,
        output_states_14_2_0_V_we0,
        output_states_14_2_0_V_d0,
        output_states_14_3_0_V_address0,
        output_states_14_3_0_V_ce0,
        output_states_14_3_0_V_we0,
        output_states_14_3_0_V_d0,
        output_states_15_0_0_V_address0,
        output_states_15_0_0_V_ce0,
        output_states_15_0_0_V_we0,
        output_states_15_0_0_V_d0,
        output_states_15_1_0_V_address0,
        output_states_15_1_0_V_ce0,
        output_states_15_1_0_V_we0,
        output_states_15_1_0_V_d0,
        output_states_15_2_0_V_address0,
        output_states_15_2_0_V_ce0,
        output_states_15_2_0_V_we0,
        output_states_15_2_0_V_d0,
        output_states_15_3_0_V_address0,
        output_states_15_3_0_V_ce0,
        output_states_15_3_0_V_we0,
        output_states_15_3_0_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_0_V_address0;
output   input_0_V_ce0;
input  [37:0] input_0_V_q0;
output  [8:0] input_0_V_address1;
output   input_0_V_ce1;
input  [37:0] input_0_V_q1;
output  [2:0] output_states_0_0_0_V_address0;
output   output_states_0_0_0_V_ce0;
output   output_states_0_0_0_V_we0;
output  [7:0] output_states_0_0_0_V_d0;
output  [2:0] output_states_0_1_0_V_address0;
output   output_states_0_1_0_V_ce0;
output   output_states_0_1_0_V_we0;
output  [7:0] output_states_0_1_0_V_d0;
output  [2:0] output_states_0_2_0_V_address0;
output   output_states_0_2_0_V_ce0;
output   output_states_0_2_0_V_we0;
output  [7:0] output_states_0_2_0_V_d0;
output  [2:0] output_states_0_3_0_V_address0;
output   output_states_0_3_0_V_ce0;
output   output_states_0_3_0_V_we0;
output  [7:0] output_states_0_3_0_V_d0;
output  [2:0] output_states_1_0_0_V_address0;
output   output_states_1_0_0_V_ce0;
output   output_states_1_0_0_V_we0;
output  [7:0] output_states_1_0_0_V_d0;
output  [2:0] output_states_1_1_0_V_address0;
output   output_states_1_1_0_V_ce0;
output   output_states_1_1_0_V_we0;
output  [7:0] output_states_1_1_0_V_d0;
output  [2:0] output_states_1_2_0_V_address0;
output   output_states_1_2_0_V_ce0;
output   output_states_1_2_0_V_we0;
output  [7:0] output_states_1_2_0_V_d0;
output  [2:0] output_states_1_3_0_V_address0;
output   output_states_1_3_0_V_ce0;
output   output_states_1_3_0_V_we0;
output  [7:0] output_states_1_3_0_V_d0;
output  [2:0] output_states_2_0_0_V_address0;
output   output_states_2_0_0_V_ce0;
output   output_states_2_0_0_V_we0;
output  [7:0] output_states_2_0_0_V_d0;
output  [2:0] output_states_2_1_0_V_address0;
output   output_states_2_1_0_V_ce0;
output   output_states_2_1_0_V_we0;
output  [7:0] output_states_2_1_0_V_d0;
output  [2:0] output_states_2_2_0_V_address0;
output   output_states_2_2_0_V_ce0;
output   output_states_2_2_0_V_we0;
output  [7:0] output_states_2_2_0_V_d0;
output  [2:0] output_states_2_3_0_V_address0;
output   output_states_2_3_0_V_ce0;
output   output_states_2_3_0_V_we0;
output  [7:0] output_states_2_3_0_V_d0;
output  [2:0] output_states_3_0_0_V_address0;
output   output_states_3_0_0_V_ce0;
output   output_states_3_0_0_V_we0;
output  [7:0] output_states_3_0_0_V_d0;
output  [2:0] output_states_3_1_0_V_address0;
output   output_states_3_1_0_V_ce0;
output   output_states_3_1_0_V_we0;
output  [7:0] output_states_3_1_0_V_d0;
output  [2:0] output_states_3_2_0_V_address0;
output   output_states_3_2_0_V_ce0;
output   output_states_3_2_0_V_we0;
output  [7:0] output_states_3_2_0_V_d0;
output  [2:0] output_states_3_3_0_V_address0;
output   output_states_3_3_0_V_ce0;
output   output_states_3_3_0_V_we0;
output  [7:0] output_states_3_3_0_V_d0;
output  [2:0] output_states_4_0_0_V_address0;
output   output_states_4_0_0_V_ce0;
output   output_states_4_0_0_V_we0;
output  [7:0] output_states_4_0_0_V_d0;
output  [2:0] output_states_4_1_0_V_address0;
output   output_states_4_1_0_V_ce0;
output   output_states_4_1_0_V_we0;
output  [7:0] output_states_4_1_0_V_d0;
output  [2:0] output_states_4_2_0_V_address0;
output   output_states_4_2_0_V_ce0;
output   output_states_4_2_0_V_we0;
output  [7:0] output_states_4_2_0_V_d0;
output  [2:0] output_states_4_3_0_V_address0;
output   output_states_4_3_0_V_ce0;
output   output_states_4_3_0_V_we0;
output  [7:0] output_states_4_3_0_V_d0;
output  [2:0] output_states_5_0_0_V_address0;
output   output_states_5_0_0_V_ce0;
output   output_states_5_0_0_V_we0;
output  [7:0] output_states_5_0_0_V_d0;
output  [2:0] output_states_5_1_0_V_address0;
output   output_states_5_1_0_V_ce0;
output   output_states_5_1_0_V_we0;
output  [7:0] output_states_5_1_0_V_d0;
output  [2:0] output_states_5_2_0_V_address0;
output   output_states_5_2_0_V_ce0;
output   output_states_5_2_0_V_we0;
output  [7:0] output_states_5_2_0_V_d0;
output  [2:0] output_states_5_3_0_V_address0;
output   output_states_5_3_0_V_ce0;
output   output_states_5_3_0_V_we0;
output  [7:0] output_states_5_3_0_V_d0;
output  [2:0] output_states_6_0_0_V_address0;
output   output_states_6_0_0_V_ce0;
output   output_states_6_0_0_V_we0;
output  [7:0] output_states_6_0_0_V_d0;
output  [2:0] output_states_6_1_0_V_address0;
output   output_states_6_1_0_V_ce0;
output   output_states_6_1_0_V_we0;
output  [7:0] output_states_6_1_0_V_d0;
output  [2:0] output_states_6_2_0_V_address0;
output   output_states_6_2_0_V_ce0;
output   output_states_6_2_0_V_we0;
output  [7:0] output_states_6_2_0_V_d0;
output  [2:0] output_states_6_3_0_V_address0;
output   output_states_6_3_0_V_ce0;
output   output_states_6_3_0_V_we0;
output  [7:0] output_states_6_3_0_V_d0;
output  [2:0] output_states_7_0_0_V_address0;
output   output_states_7_0_0_V_ce0;
output   output_states_7_0_0_V_we0;
output  [7:0] output_states_7_0_0_V_d0;
output  [2:0] output_states_7_1_0_V_address0;
output   output_states_7_1_0_V_ce0;
output   output_states_7_1_0_V_we0;
output  [7:0] output_states_7_1_0_V_d0;
output  [2:0] output_states_7_2_0_V_address0;
output   output_states_7_2_0_V_ce0;
output   output_states_7_2_0_V_we0;
output  [7:0] output_states_7_2_0_V_d0;
output  [2:0] output_states_7_3_0_V_address0;
output   output_states_7_3_0_V_ce0;
output   output_states_7_3_0_V_we0;
output  [7:0] output_states_7_3_0_V_d0;
output  [2:0] output_states_8_0_0_V_address0;
output   output_states_8_0_0_V_ce0;
output   output_states_8_0_0_V_we0;
output  [7:0] output_states_8_0_0_V_d0;
output  [2:0] output_states_8_1_0_V_address0;
output   output_states_8_1_0_V_ce0;
output   output_states_8_1_0_V_we0;
output  [7:0] output_states_8_1_0_V_d0;
output  [2:0] output_states_8_2_0_V_address0;
output   output_states_8_2_0_V_ce0;
output   output_states_8_2_0_V_we0;
output  [7:0] output_states_8_2_0_V_d0;
output  [2:0] output_states_8_3_0_V_address0;
output   output_states_8_3_0_V_ce0;
output   output_states_8_3_0_V_we0;
output  [7:0] output_states_8_3_0_V_d0;
output  [2:0] output_states_9_0_0_V_address0;
output   output_states_9_0_0_V_ce0;
output   output_states_9_0_0_V_we0;
output  [7:0] output_states_9_0_0_V_d0;
output  [2:0] output_states_9_1_0_V_address0;
output   output_states_9_1_0_V_ce0;
output   output_states_9_1_0_V_we0;
output  [7:0] output_states_9_1_0_V_d0;
output  [2:0] output_states_9_2_0_V_address0;
output   output_states_9_2_0_V_ce0;
output   output_states_9_2_0_V_we0;
output  [7:0] output_states_9_2_0_V_d0;
output  [2:0] output_states_9_3_0_V_address0;
output   output_states_9_3_0_V_ce0;
output   output_states_9_3_0_V_we0;
output  [7:0] output_states_9_3_0_V_d0;
output  [2:0] output_states_10_0_0_V_address0;
output   output_states_10_0_0_V_ce0;
output   output_states_10_0_0_V_we0;
output  [7:0] output_states_10_0_0_V_d0;
output  [2:0] output_states_10_1_0_V_address0;
output   output_states_10_1_0_V_ce0;
output   output_states_10_1_0_V_we0;
output  [7:0] output_states_10_1_0_V_d0;
output  [2:0] output_states_10_2_0_V_address0;
output   output_states_10_2_0_V_ce0;
output   output_states_10_2_0_V_we0;
output  [7:0] output_states_10_2_0_V_d0;
output  [2:0] output_states_10_3_0_V_address0;
output   output_states_10_3_0_V_ce0;
output   output_states_10_3_0_V_we0;
output  [7:0] output_states_10_3_0_V_d0;
output  [2:0] output_states_11_0_0_V_address0;
output   output_states_11_0_0_V_ce0;
output   output_states_11_0_0_V_we0;
output  [7:0] output_states_11_0_0_V_d0;
output  [2:0] output_states_11_1_0_V_address0;
output   output_states_11_1_0_V_ce0;
output   output_states_11_1_0_V_we0;
output  [7:0] output_states_11_1_0_V_d0;
output  [2:0] output_states_11_2_0_V_address0;
output   output_states_11_2_0_V_ce0;
output   output_states_11_2_0_V_we0;
output  [7:0] output_states_11_2_0_V_d0;
output  [2:0] output_states_11_3_0_V_address0;
output   output_states_11_3_0_V_ce0;
output   output_states_11_3_0_V_we0;
output  [7:0] output_states_11_3_0_V_d0;
output  [2:0] output_states_12_0_0_V_address0;
output   output_states_12_0_0_V_ce0;
output   output_states_12_0_0_V_we0;
output  [7:0] output_states_12_0_0_V_d0;
output  [2:0] output_states_12_1_0_V_address0;
output   output_states_12_1_0_V_ce0;
output   output_states_12_1_0_V_we0;
output  [7:0] output_states_12_1_0_V_d0;
output  [2:0] output_states_12_2_0_V_address0;
output   output_states_12_2_0_V_ce0;
output   output_states_12_2_0_V_we0;
output  [7:0] output_states_12_2_0_V_d0;
output  [2:0] output_states_12_3_0_V_address0;
output   output_states_12_3_0_V_ce0;
output   output_states_12_3_0_V_we0;
output  [7:0] output_states_12_3_0_V_d0;
output  [2:0] output_states_13_0_0_V_address0;
output   output_states_13_0_0_V_ce0;
output   output_states_13_0_0_V_we0;
output  [7:0] output_states_13_0_0_V_d0;
output  [2:0] output_states_13_1_0_V_address0;
output   output_states_13_1_0_V_ce0;
output   output_states_13_1_0_V_we0;
output  [7:0] output_states_13_1_0_V_d0;
output  [2:0] output_states_13_2_0_V_address0;
output   output_states_13_2_0_V_ce0;
output   output_states_13_2_0_V_we0;
output  [7:0] output_states_13_2_0_V_d0;
output  [2:0] output_states_13_3_0_V_address0;
output   output_states_13_3_0_V_ce0;
output   output_states_13_3_0_V_we0;
output  [7:0] output_states_13_3_0_V_d0;
output  [2:0] output_states_14_0_0_V_address0;
output   output_states_14_0_0_V_ce0;
output   output_states_14_0_0_V_we0;
output  [7:0] output_states_14_0_0_V_d0;
output  [2:0] output_states_14_1_0_V_address0;
output   output_states_14_1_0_V_ce0;
output   output_states_14_1_0_V_we0;
output  [7:0] output_states_14_1_0_V_d0;
output  [2:0] output_states_14_2_0_V_address0;
output   output_states_14_2_0_V_ce0;
output   output_states_14_2_0_V_we0;
output  [7:0] output_states_14_2_0_V_d0;
output  [2:0] output_states_14_3_0_V_address0;
output   output_states_14_3_0_V_ce0;
output   output_states_14_3_0_V_we0;
output  [7:0] output_states_14_3_0_V_d0;
output  [2:0] output_states_15_0_0_V_address0;
output   output_states_15_0_0_V_ce0;
output   output_states_15_0_0_V_we0;
output  [7:0] output_states_15_0_0_V_d0;
output  [2:0] output_states_15_1_0_V_address0;
output   output_states_15_1_0_V_ce0;
output   output_states_15_1_0_V_we0;
output  [7:0] output_states_15_1_0_V_d0;
output  [2:0] output_states_15_2_0_V_address0;
output   output_states_15_2_0_V_ce0;
output   output_states_15_2_0_V_we0;
output  [7:0] output_states_15_2_0_V_d0;
output  [2:0] output_states_15_3_0_V_address0;
output   output_states_15_3_0_V_ce0;
output   output_states_15_3_0_V_we0;
output  [7:0] output_states_15_3_0_V_d0;
output  [37:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] input_0_V_address0;
reg input_0_V_ce0;
reg[8:0] input_0_V_address1;
reg input_0_V_ce1;
reg output_states_0_0_0_V_ce0;
reg output_states_0_0_0_V_we0;
reg output_states_0_1_0_V_ce0;
reg output_states_0_1_0_V_we0;
reg output_states_0_2_0_V_ce0;
reg output_states_0_2_0_V_we0;
reg output_states_0_3_0_V_ce0;
reg output_states_0_3_0_V_we0;
reg output_states_1_0_0_V_ce0;
reg output_states_1_0_0_V_we0;
reg output_states_1_1_0_V_ce0;
reg output_states_1_1_0_V_we0;
reg output_states_1_2_0_V_ce0;
reg output_states_1_2_0_V_we0;
reg output_states_1_3_0_V_ce0;
reg output_states_1_3_0_V_we0;
reg output_states_2_0_0_V_ce0;
reg output_states_2_0_0_V_we0;
reg output_states_2_1_0_V_ce0;
reg output_states_2_1_0_V_we0;
reg output_states_2_2_0_V_ce0;
reg output_states_2_2_0_V_we0;
reg output_states_2_3_0_V_ce0;
reg output_states_2_3_0_V_we0;
reg output_states_3_0_0_V_ce0;
reg output_states_3_0_0_V_we0;
reg output_states_3_1_0_V_ce0;
reg output_states_3_1_0_V_we0;
reg output_states_3_2_0_V_ce0;
reg output_states_3_2_0_V_we0;
reg output_states_3_3_0_V_ce0;
reg output_states_3_3_0_V_we0;
reg output_states_4_0_0_V_ce0;
reg output_states_4_0_0_V_we0;
reg output_states_4_1_0_V_ce0;
reg output_states_4_1_0_V_we0;
reg output_states_4_2_0_V_ce0;
reg output_states_4_2_0_V_we0;
reg output_states_4_3_0_V_ce0;
reg output_states_4_3_0_V_we0;
reg output_states_5_0_0_V_ce0;
reg output_states_5_0_0_V_we0;
reg output_states_5_1_0_V_ce0;
reg output_states_5_1_0_V_we0;
reg output_states_5_2_0_V_ce0;
reg output_states_5_2_0_V_we0;
reg output_states_5_3_0_V_ce0;
reg output_states_5_3_0_V_we0;
reg output_states_6_0_0_V_ce0;
reg output_states_6_0_0_V_we0;
reg output_states_6_1_0_V_ce0;
reg output_states_6_1_0_V_we0;
reg output_states_6_2_0_V_ce0;
reg output_states_6_2_0_V_we0;
reg output_states_6_3_0_V_ce0;
reg output_states_6_3_0_V_we0;
reg output_states_7_0_0_V_ce0;
reg output_states_7_0_0_V_we0;
reg output_states_7_1_0_V_ce0;
reg output_states_7_1_0_V_we0;
reg output_states_7_2_0_V_ce0;
reg output_states_7_2_0_V_we0;
reg output_states_7_3_0_V_ce0;
reg output_states_7_3_0_V_we0;
reg output_states_8_0_0_V_ce0;
reg output_states_8_0_0_V_we0;
reg output_states_8_1_0_V_ce0;
reg output_states_8_1_0_V_we0;
reg output_states_8_2_0_V_ce0;
reg output_states_8_2_0_V_we0;
reg output_states_8_3_0_V_ce0;
reg output_states_8_3_0_V_we0;
reg output_states_9_0_0_V_ce0;
reg output_states_9_0_0_V_we0;
reg output_states_9_1_0_V_ce0;
reg output_states_9_1_0_V_we0;
reg output_states_9_2_0_V_ce0;
reg output_states_9_2_0_V_we0;
reg output_states_9_3_0_V_ce0;
reg output_states_9_3_0_V_we0;
reg output_states_10_0_0_V_ce0;
reg output_states_10_0_0_V_we0;
reg output_states_10_1_0_V_ce0;
reg output_states_10_1_0_V_we0;
reg output_states_10_2_0_V_ce0;
reg output_states_10_2_0_V_we0;
reg output_states_10_3_0_V_ce0;
reg output_states_10_3_0_V_we0;
reg output_states_11_0_0_V_ce0;
reg output_states_11_0_0_V_we0;
reg output_states_11_1_0_V_ce0;
reg output_states_11_1_0_V_we0;
reg output_states_11_2_0_V_ce0;
reg output_states_11_2_0_V_we0;
reg output_states_11_3_0_V_ce0;
reg output_states_11_3_0_V_we0;
reg output_states_12_0_0_V_ce0;
reg output_states_12_0_0_V_we0;
reg output_states_12_1_0_V_ce0;
reg output_states_12_1_0_V_we0;
reg output_states_12_2_0_V_ce0;
reg output_states_12_2_0_V_we0;
reg output_states_12_3_0_V_ce0;
reg output_states_12_3_0_V_we0;
reg output_states_13_0_0_V_ce0;
reg output_states_13_0_0_V_we0;
reg output_states_13_1_0_V_ce0;
reg output_states_13_1_0_V_we0;
reg output_states_13_2_0_V_ce0;
reg output_states_13_2_0_V_we0;
reg output_states_13_3_0_V_ce0;
reg output_states_13_3_0_V_we0;
reg output_states_14_0_0_V_ce0;
reg output_states_14_0_0_V_we0;
reg output_states_14_1_0_V_ce0;
reg output_states_14_1_0_V_we0;
reg output_states_14_2_0_V_ce0;
reg output_states_14_2_0_V_we0;
reg output_states_14_3_0_V_ce0;
reg output_states_14_3_0_V_we0;
reg output_states_15_0_0_V_ce0;
reg output_states_15_0_0_V_we0;
reg output_states_15_1_0_V_ce0;
reg output_states_15_1_0_V_we0;
reg output_states_15_2_0_V_ce0;
reg output_states_15_2_0_V_we0;
reg output_states_15_3_0_V_ce0;
reg output_states_15_3_0_V_we0;

(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [37:0] reg_1213;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
reg   [37:0] reg_1218;
wire   [37:0] grp_fu_1205_p3;
reg   [37:0] p_Val2_13_reg_2019;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln87_fu_1223_p2;
wire   [8:0] add_ln87_fu_1234_p2;
reg   [8:0] add_ln87_reg_2032;
reg   [37:0] p_Val2_15_reg_2042;
wire    ap_CS_fsm_state5;
wire   [37:0] p_Val2_16_fu_1273_p3;
wire    ap_CS_fsm_state6;
wire  signed [37:0] trunc_ln703_fu_1280_p1;
reg  signed [37:0] trunc_ln703_reg_2053;
wire    ap_CS_fsm_state56;
wire  signed [57:0] sext_ln94_fu_1284_p1;
reg  signed [57:0] sext_ln94_reg_2057;
wire   [2:0] add_ln94_fu_1294_p2;
reg   [2:0] add_ln94_reg_2068;
wire    ap_CS_fsm_state57;
wire   [6:0] shl_ln_fu_1300_p3;
reg   [6:0] shl_ln_reg_2073;
wire   [0:0] icmp_ln94_fu_1288_p2;
wire   [4:0] add_ln95_fu_1318_p2;
reg   [4:0] add_ln95_reg_2081;
wire    ap_CS_fsm_state58;
wire   [3:0] trunc_ln96_fu_1324_p1;
reg   [3:0] trunc_ln96_reg_2086;
wire   [0:0] icmp_ln95_fu_1312_p2;
wire   [8:0] shl_ln1_fu_1333_p3;
reg   [8:0] shl_ln1_reg_2090;
reg   [2:0] lshr_ln_reg_2101;
reg   [37:0] p_Val2_9_reg_2121;
reg   [37:0] p_Val2_17_reg_2127;
wire   [17:0] select_ln850_fu_1485_p3;
reg   [17:0] select_ln850_reg_2133;
wire    ap_CS_fsm_state61;
reg   [10:0] tmp_75_reg_2139;
wire   [17:0] select_ln850_1_fu_1563_p3;
reg   [17:0] select_ln850_1_reg_2144;
reg   [10:0] tmp_77_reg_2150;
reg   [37:0] p_Val2_18_reg_2155;
reg   [37:0] p_Val2_19_reg_2161;
wire   [7:0] select_ln887_1_fu_1646_p3;
reg   [7:0] select_ln887_1_reg_2167;
wire    ap_CS_fsm_state62;
wire   [7:0] select_ln887_3_fu_1681_p3;
reg   [7:0] select_ln887_3_reg_2187;
wire   [17:0] select_ln850_2_fu_1749_p3;
reg   [17:0] select_ln850_2_reg_2207;
reg   [10:0] tmp_79_reg_2213;
wire   [17:0] select_ln850_3_fu_1827_p3;
reg   [17:0] select_ln850_3_reg_2218;
reg   [10:0] tmp_81_reg_2224;
reg   [37:0] max_val_V_0_0_reg_1148;
wire    ap_CS_fsm_state3;
reg   [8:0] j_0_0_reg_1158;
reg   [2:0] jo_0_0_reg_1169;
reg   [4:0] ji_0_0_reg_1180;
wire    ap_CS_fsm_state63;
wire   [63:0] zext_ln88_fu_1229_p1;
wire   [63:0] zext_ln98_fu_1341_p1;
wire   [63:0] zext_ln98_1_fu_1362_p1;
wire   [63:0] zext_ln98_2_fu_1372_p1;
wire   [63:0] zext_ln98_3_fu_1382_p1;
wire   [63:0] zext_ln180_fu_1845_p1;
wire   [7:0] select_ln887_5_fu_1939_p3;
wire   [7:0] select_ln887_7_fu_1990_p3;
wire   [0:0] grp_fu_1191_p3;
wire   [37:0] grp_fu_1199_p2;
wire   [0:0] icmp_ln1494_32_fu_1244_p2;
wire   [36:0] trunc_ln87_fu_1240_p1;
wire   [36:0] select_ln60_fu_1250_p3;
wire   [36:0] grp_fu_1262_p1;
wire   [0:0] icmp_ln1494_fu_1268_p2;
wire   [37:0] grp_fu_1262_p2;
wire   [6:0] zext_ln95_fu_1308_p1;
wire   [6:0] add_ln96_fu_1328_p2;
wire   [8:0] or_ln98_fu_1356_p2;
wire   [8:0] or_ln98_1_fu_1367_p2;
wire   [8:0] or_ln98_2_fu_1377_p2;
wire  signed [37:0] mul_ln1118_fu_1391_p0;
wire  signed [37:0] mul_ln1118_fu_1391_p1;
wire   [57:0] mul_ln1118_fu_1391_p2;
wire  signed [37:0] mul_ln1118_1_fu_1410_p0;
wire  signed [37:0] mul_ln1118_1_fu_1410_p1;
wire   [57:0] mul_ln1118_1_fu_1410_p2;
wire   [0:0] icmp_ln1494_33_fu_1425_p2;
wire   [37:0] select_ln67_fu_1430_p3;
wire   [37:0] add_ln67_fu_1438_p2;
wire   [19:0] trunc_ln851_fu_1461_p1;
wire   [17:0] p_Result_s_fu_1443_p4;
wire   [0:0] icmp_ln851_fu_1465_p2;
wire   [17:0] add_ln700_fu_1471_p2;
wire   [0:0] tmp_74_fu_1453_p3;
wire   [17:0] select_ln851_fu_1477_p3;
wire   [0:0] icmp_ln1494_34_fu_1503_p2;
wire   [37:0] select_ln67_1_fu_1508_p3;
wire   [37:0] add_ln67_1_fu_1516_p2;
wire   [19:0] trunc_ln851_1_fu_1539_p1;
wire   [17:0] p_Result_0_1_fu_1521_p4;
wire   [0:0] icmp_ln851_1_fu_1543_p2;
wire   [17:0] add_ln700_1_fu_1549_p2;
wire   [0:0] tmp_76_fu_1531_p3;
wire   [17:0] select_ln851_1_fu_1555_p3;
wire  signed [37:0] mul_ln1118_2_fu_1585_p0;
wire  signed [37:0] mul_ln1118_2_fu_1585_p1;
wire   [57:0] mul_ln1118_2_fu_1585_p2;
wire  signed [37:0] mul_ln1118_3_fu_1604_p0;
wire  signed [37:0] mul_ln1118_3_fu_1604_p1;
wire   [57:0] mul_ln1118_3_fu_1604_p2;
wire   [0:0] icmp_ln887_fu_1619_p2;
wire   [0:0] icmp_ln895_fu_1624_p2;
wire   [0:0] or_ln887_fu_1640_p2;
wire   [7:0] select_ln887_fu_1632_p3;
wire   [7:0] trunc_ln99_fu_1629_p1;
wire   [0:0] icmp_ln887_1_fu_1654_p2;
wire   [0:0] icmp_ln895_1_fu_1659_p2;
wire   [0:0] or_ln887_1_fu_1675_p2;
wire   [7:0] select_ln887_2_fu_1667_p3;
wire   [7:0] trunc_ln99_1_fu_1664_p1;
wire   [0:0] icmp_ln1494_35_fu_1689_p2;
wire   [37:0] select_ln67_2_fu_1694_p3;
wire   [37:0] add_ln67_2_fu_1702_p2;
wire   [19:0] trunc_ln851_2_fu_1725_p1;
wire   [17:0] p_Result_0_2_fu_1707_p4;
wire   [0:0] icmp_ln851_2_fu_1729_p2;
wire   [17:0] add_ln700_2_fu_1735_p2;
wire   [0:0] tmp_78_fu_1717_p3;
wire   [17:0] select_ln851_2_fu_1741_p3;
wire   [0:0] icmp_ln1494_36_fu_1767_p2;
wire   [37:0] select_ln67_3_fu_1772_p3;
wire   [37:0] add_ln67_3_fu_1780_p2;
wire   [19:0] trunc_ln851_3_fu_1803_p1;
wire   [17:0] p_Result_0_3_fu_1785_p4;
wire   [0:0] icmp_ln851_3_fu_1807_p2;
wire   [17:0] add_ln700_3_fu_1813_p2;
wire   [0:0] tmp_80_fu_1795_p3;
wire   [17:0] select_ln851_3_fu_1819_p3;
wire   [0:0] icmp_ln887_2_fu_1912_p2;
wire   [0:0] icmp_ln895_2_fu_1917_p2;
wire   [0:0] or_ln887_2_fu_1933_p2;
wire   [7:0] select_ln887_4_fu_1925_p3;
wire   [7:0] trunc_ln99_2_fu_1922_p1;
wire   [0:0] icmp_ln887_3_fu_1963_p2;
wire   [0:0] icmp_ln895_3_fu_1968_p2;
wire   [0:0] or_ln887_3_fu_1984_p2;
wire   [7:0] select_ln887_6_fu_1976_p3;
wire   [7:0] trunc_ln99_3_fu_1973_p1;
reg    grp_fu_1262_ap_start;
wire    grp_fu_1262_ap_done;
reg   [62:0] ap_NS_fsm;
wire   [46:0] grp_fu_1262_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
end

dut_udiv_47s_37nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 51 ),
    .din0_WIDTH( 47 ),
    .din1_WIDTH( 37 ),
    .dout_WIDTH( 38 ))
dut_udiv_47s_37nsdEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1262_ap_start),
    .done(grp_fu_1262_ap_done),
    .din0(47'd139637976727552),
    .din1(grp_fu_1262_p1),
    .ce(1'b1),
    .dout(grp_fu_1262_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_0_reg_1158 <= add_ln87_reg_2032;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_0_reg_1158 <= 9'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        ji_0_0_reg_1180 <= add_ln95_reg_2081;
    end else if (((icmp_ln94_fu_1288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state57))) begin
        ji_0_0_reg_1180 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_1312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        jo_0_0_reg_1169 <= add_ln94_reg_2068;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        jo_0_0_reg_1169 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_val_V_0_0_reg_1148 <= p_Val2_16_fu_1273_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_val_V_0_0_reg_1148 <= p_Val2_13_reg_2019;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        reg_1213 <= input_0_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        reg_1213 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        reg_1218 <= input_0_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        reg_1218 <= input_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_1223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln87_reg_2032 <= add_ln87_fu_1234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        add_ln94_reg_2068 <= add_ln94_fu_1294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        add_ln95_reg_2081 <= add_ln95_fu_1318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_1312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        lshr_ln_reg_2101 <= {{add_ln96_fu_1328_p2[6:4]}};
        shl_ln1_reg_2090[8 : 2] <= shl_ln1_fu_1333_p3[8 : 2];
        trunc_ln96_reg_2086 <= trunc_ln96_fu_1324_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_13_reg_2019 <= grp_fu_1205_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_15_reg_2042 <= grp_fu_1205_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        p_Val2_17_reg_2127 <= {{mul_ln1118_1_fu_1410_p2[57:20]}};
        p_Val2_9_reg_2121 <= {{mul_ln1118_fu_1391_p2[57:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        p_Val2_18_reg_2155 <= {{mul_ln1118_2_fu_1585_p2[57:20]}};
        p_Val2_19_reg_2161 <= {{mul_ln1118_3_fu_1604_p2[57:20]}};
        select_ln850_1_reg_2144 <= select_ln850_1_fu_1563_p3;
        select_ln850_reg_2133 <= select_ln850_fu_1485_p3;
        tmp_75_reg_2139 <= {{select_ln850_fu_1485_p3[17:7]}};
        tmp_77_reg_2150 <= {{select_ln850_1_fu_1563_p3[17:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        select_ln850_2_reg_2207 <= select_ln850_2_fu_1749_p3;
        select_ln850_3_reg_2218 <= select_ln850_3_fu_1827_p3;
        select_ln887_1_reg_2167 <= select_ln887_1_fu_1646_p3;
        select_ln887_3_reg_2187 <= select_ln887_3_fu_1681_p3;
        tmp_79_reg_2213 <= {{select_ln850_2_fu_1749_p3[17:7]}};
        tmp_81_reg_2224 <= {{select_ln850_3_fu_1827_p3[17:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        sext_ln94_reg_2057 <= sext_ln94_fu_1284_p1;
        trunc_ln703_reg_2053 <= trunc_ln703_fu_1280_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_1288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state57))) begin
        shl_ln_reg_2073[6 : 4] <= shl_ln_fu_1300_p3[6 : 4];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln94_fu_1288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln94_fu_1288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_1223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_1262_ap_start = 1'b1;
    end else begin
        grp_fu_1262_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        input_0_V_address0 = zext_ln98_3_fu_1382_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        input_0_V_address0 = zext_ln98_fu_1341_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_V_address0 = zext_ln88_fu_1229_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_0_V_address0 = 64'd0;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        input_0_V_address1 = zext_ln98_2_fu_1372_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        input_0_V_address1 = zext_ln98_1_fu_1362_p1;
    end else begin
        input_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state59) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state59))) begin
        input_0_V_ce1 = 1'b1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_0_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_0_0_0_V_we0 = 1'b1;
    end else begin
        output_states_0_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_0_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_0_1_0_V_we0 = 1'b1;
    end else begin
        output_states_0_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_0_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_0_2_0_V_we0 = 1'b1;
    end else begin
        output_states_0_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_0_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_0_3_0_V_we0 = 1'b1;
    end else begin
        output_states_0_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_10_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_10_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd10) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_10_0_0_V_we0 = 1'b1;
    end else begin
        output_states_10_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_10_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_10_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd10) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_10_1_0_V_we0 = 1'b1;
    end else begin
        output_states_10_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_10_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_10_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd10) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_10_2_0_V_we0 = 1'b1;
    end else begin
        output_states_10_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_10_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_10_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd10) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_10_3_0_V_we0 = 1'b1;
    end else begin
        output_states_10_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_11_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_11_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd11) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_11_0_0_V_we0 = 1'b1;
    end else begin
        output_states_11_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_11_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_11_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd11) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_11_1_0_V_we0 = 1'b1;
    end else begin
        output_states_11_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_11_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_11_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd11) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_11_2_0_V_we0 = 1'b1;
    end else begin
        output_states_11_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_11_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_11_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd11) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_11_3_0_V_we0 = 1'b1;
    end else begin
        output_states_11_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_12_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_12_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd12) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_12_0_0_V_we0 = 1'b1;
    end else begin
        output_states_12_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_12_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_12_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd12) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_12_1_0_V_we0 = 1'b1;
    end else begin
        output_states_12_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_12_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_12_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd12) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_12_2_0_V_we0 = 1'b1;
    end else begin
        output_states_12_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_12_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_12_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd12) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_12_3_0_V_we0 = 1'b1;
    end else begin
        output_states_12_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_13_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_13_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd13) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_13_0_0_V_we0 = 1'b1;
    end else begin
        output_states_13_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_13_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_13_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd13) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_13_1_0_V_we0 = 1'b1;
    end else begin
        output_states_13_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_13_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_13_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd13) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_13_2_0_V_we0 = 1'b1;
    end else begin
        output_states_13_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_13_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_13_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd13) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_13_3_0_V_we0 = 1'b1;
    end else begin
        output_states_13_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_14_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_14_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd14) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_14_0_0_V_we0 = 1'b1;
    end else begin
        output_states_14_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_14_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_14_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd14) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_14_1_0_V_we0 = 1'b1;
    end else begin
        output_states_14_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_14_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_14_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd14) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_14_2_0_V_we0 = 1'b1;
    end else begin
        output_states_14_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_14_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_14_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd14) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_14_3_0_V_we0 = 1'b1;
    end else begin
        output_states_14_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_15_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_15_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd15) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_15_0_0_V_we0 = 1'b1;
    end else begin
        output_states_15_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_15_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_15_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd15) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_15_1_0_V_we0 = 1'b1;
    end else begin
        output_states_15_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_15_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_15_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd15) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_15_2_0_V_we0 = 1'b1;
    end else begin
        output_states_15_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_15_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_15_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd15) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_15_3_0_V_we0 = 1'b1;
    end else begin
        output_states_15_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_1_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_1_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_1_0_0_V_we0 = 1'b1;
    end else begin
        output_states_1_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_1_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_1_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_1_1_0_V_we0 = 1'b1;
    end else begin
        output_states_1_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_1_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_1_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_1_2_0_V_we0 = 1'b1;
    end else begin
        output_states_1_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_1_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_1_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_1_3_0_V_we0 = 1'b1;
    end else begin
        output_states_1_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_2_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_2_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd2) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_2_0_0_V_we0 = 1'b1;
    end else begin
        output_states_2_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_2_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_2_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd2) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_2_1_0_V_we0 = 1'b1;
    end else begin
        output_states_2_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_2_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_2_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd2) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_2_2_0_V_we0 = 1'b1;
    end else begin
        output_states_2_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_2_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_2_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd2) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_2_3_0_V_we0 = 1'b1;
    end else begin
        output_states_2_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_3_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_3_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd3) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_3_0_0_V_we0 = 1'b1;
    end else begin
        output_states_3_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_3_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_3_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd3) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_3_1_0_V_we0 = 1'b1;
    end else begin
        output_states_3_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_3_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_3_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd3) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_3_2_0_V_we0 = 1'b1;
    end else begin
        output_states_3_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_3_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_3_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd3) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_3_3_0_V_we0 = 1'b1;
    end else begin
        output_states_3_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_4_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_4_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd4) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_4_0_0_V_we0 = 1'b1;
    end else begin
        output_states_4_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_4_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_4_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd4) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_4_1_0_V_we0 = 1'b1;
    end else begin
        output_states_4_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_4_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_4_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd4) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_4_2_0_V_we0 = 1'b1;
    end else begin
        output_states_4_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_4_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_4_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd4) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_4_3_0_V_we0 = 1'b1;
    end else begin
        output_states_4_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_5_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_5_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd5) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_5_0_0_V_we0 = 1'b1;
    end else begin
        output_states_5_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_5_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_5_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd5) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_5_1_0_V_we0 = 1'b1;
    end else begin
        output_states_5_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_5_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_5_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd5) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_5_2_0_V_we0 = 1'b1;
    end else begin
        output_states_5_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_5_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_5_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd5) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_5_3_0_V_we0 = 1'b1;
    end else begin
        output_states_5_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_6_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_6_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd6) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_6_0_0_V_we0 = 1'b1;
    end else begin
        output_states_6_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_6_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_6_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd6) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_6_1_0_V_we0 = 1'b1;
    end else begin
        output_states_6_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_6_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_6_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd6) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_6_2_0_V_we0 = 1'b1;
    end else begin
        output_states_6_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_6_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_6_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd6) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_6_3_0_V_we0 = 1'b1;
    end else begin
        output_states_6_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_7_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_7_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd7) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_7_0_0_V_we0 = 1'b1;
    end else begin
        output_states_7_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_7_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_7_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd7) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_7_1_0_V_we0 = 1'b1;
    end else begin
        output_states_7_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_7_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_7_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd7) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_7_2_0_V_we0 = 1'b1;
    end else begin
        output_states_7_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_7_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_7_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd7) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_7_3_0_V_we0 = 1'b1;
    end else begin
        output_states_7_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_8_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_8_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd8) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_8_0_0_V_we0 = 1'b1;
    end else begin
        output_states_8_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_8_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_8_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd8) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_8_1_0_V_we0 = 1'b1;
    end else begin
        output_states_8_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_8_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_8_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd8) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_8_2_0_V_we0 = 1'b1;
    end else begin
        output_states_8_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_8_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_8_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd8) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_8_3_0_V_we0 = 1'b1;
    end else begin
        output_states_8_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_9_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_9_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd9) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_9_0_0_V_we0 = 1'b1;
    end else begin
        output_states_9_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_9_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_9_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd9) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_9_1_0_V_we0 = 1'b1;
    end else begin
        output_states_9_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_9_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_9_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd9) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_9_2_0_V_we0 = 1'b1;
    end else begin
        output_states_9_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        output_states_9_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_9_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln96_reg_2086 == 4'd9) & (1'b1 == ap_CS_fsm_state63))) begin
        output_states_9_3_0_V_we0 = 1'b1;
    end else begin
        output_states_9_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln87_fu_1223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((icmp_ln94_fu_1288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln95_fu_1312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_1_fu_1516_p2 = (select_ln67_1_fu_1508_p3 + p_Val2_17_reg_2127);

assign add_ln67_2_fu_1702_p2 = (select_ln67_2_fu_1694_p3 + p_Val2_18_reg_2155);

assign add_ln67_3_fu_1780_p2 = (select_ln67_3_fu_1772_p3 + p_Val2_19_reg_2161);

assign add_ln67_fu_1438_p2 = (select_ln67_fu_1430_p3 + p_Val2_9_reg_2121);

assign add_ln700_1_fu_1549_p2 = (18'd1 + p_Result_0_1_fu_1521_p4);

assign add_ln700_2_fu_1735_p2 = (18'd1 + p_Result_0_2_fu_1707_p4);

assign add_ln700_3_fu_1813_p2 = (18'd1 + p_Result_0_3_fu_1785_p4);

assign add_ln700_fu_1471_p2 = (18'd1 + p_Result_s_fu_1443_p4);

assign add_ln87_fu_1234_p2 = (j_0_0_reg_1158 + 9'd1);

assign add_ln94_fu_1294_p2 = (jo_0_0_reg_1169 + 3'd1);

assign add_ln95_fu_1318_p2 = (ji_0_0_reg_1180 + 5'd1);

assign add_ln96_fu_1328_p2 = (shl_ln_reg_2073 + zext_ln95_fu_1308_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_return = trunc_ln703_reg_2053;

assign grp_fu_1191_p3 = input_0_V_q0[32'd37];

assign grp_fu_1199_p2 = (38'd0 - input_0_V_q0);

assign grp_fu_1205_p3 = ((grp_fu_1191_p3[0:0] === 1'b1) ? grp_fu_1199_p2 : input_0_V_q0);

assign grp_fu_1262_p1 = grp_fu_1262_p10;

assign grp_fu_1262_p10 = select_ln60_fu_1250_p3;

assign icmp_ln1494_32_fu_1244_p2 = (($signed(max_val_V_0_0_reg_1148) > $signed(38'd10)) ? 1'b1 : 1'b0);

assign icmp_ln1494_33_fu_1425_p2 = (($signed(p_Val2_9_reg_2121) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_34_fu_1503_p2 = (($signed(p_Val2_17_reg_2127) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_35_fu_1689_p2 = (($signed(p_Val2_18_reg_2155) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_36_fu_1767_p2 = (($signed(p_Val2_19_reg_2161) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1268_p2 = (($signed(p_Val2_15_reg_2042) > $signed(max_val_V_0_0_reg_1148)) ? 1'b1 : 1'b0);

assign icmp_ln851_1_fu_1543_p2 = ((trunc_ln851_1_fu_1539_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_2_fu_1729_p2 = ((trunc_ln851_2_fu_1725_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_3_fu_1807_p2 = ((trunc_ln851_3_fu_1803_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_1465_p2 = ((trunc_ln851_fu_1461_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1223_p2 = ((j_0_0_reg_1158 == 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_1654_p2 = (($signed(select_ln850_1_reg_2144) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_1912_p2 = (($signed(select_ln850_2_reg_2207) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_1963_p2 = (($signed(select_ln850_3_reg_2218) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1619_p2 = (($signed(select_ln850_reg_2133) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_1659_p2 = (($signed(tmp_77_reg_2150) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_1917_p2 = (($signed(tmp_79_reg_2213) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_1968_p2 = (($signed(tmp_81_reg_2224) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_1624_p2 = (($signed(tmp_75_reg_2139) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1288_p2 = ((jo_0_0_reg_1169 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1312_p2 = ((ji_0_0_reg_1180 == 5'd16) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_1410_p0 = reg_1218;

assign mul_ln1118_1_fu_1410_p1 = sext_ln94_reg_2057;

assign mul_ln1118_1_fu_1410_p2 = ($signed(mul_ln1118_1_fu_1410_p0) * $signed(mul_ln1118_1_fu_1410_p1));

assign mul_ln1118_2_fu_1585_p0 = reg_1213;

assign mul_ln1118_2_fu_1585_p1 = sext_ln94_reg_2057;

assign mul_ln1118_2_fu_1585_p2 = ($signed(mul_ln1118_2_fu_1585_p0) * $signed(mul_ln1118_2_fu_1585_p1));

assign mul_ln1118_3_fu_1604_p0 = reg_1218;

assign mul_ln1118_3_fu_1604_p1 = sext_ln94_reg_2057;

assign mul_ln1118_3_fu_1604_p2 = ($signed(mul_ln1118_3_fu_1604_p0) * $signed(mul_ln1118_3_fu_1604_p1));

assign mul_ln1118_fu_1391_p0 = reg_1213;

assign mul_ln1118_fu_1391_p1 = sext_ln94_reg_2057;

assign mul_ln1118_fu_1391_p2 = ($signed(mul_ln1118_fu_1391_p0) * $signed(mul_ln1118_fu_1391_p1));

assign or_ln887_1_fu_1675_p2 = (icmp_ln895_1_fu_1659_p2 | icmp_ln887_1_fu_1654_p2);

assign or_ln887_2_fu_1933_p2 = (icmp_ln895_2_fu_1917_p2 | icmp_ln887_2_fu_1912_p2);

assign or_ln887_3_fu_1984_p2 = (icmp_ln895_3_fu_1968_p2 | icmp_ln887_3_fu_1963_p2);

assign or_ln887_fu_1640_p2 = (icmp_ln895_fu_1624_p2 | icmp_ln887_fu_1619_p2);

assign or_ln98_1_fu_1367_p2 = (shl_ln1_reg_2090 | 9'd2);

assign or_ln98_2_fu_1377_p2 = (shl_ln1_reg_2090 | 9'd3);

assign or_ln98_fu_1356_p2 = (shl_ln1_fu_1333_p3 | 9'd1);

assign output_states_0_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_0_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_0_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_0_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_0_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_0_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_0_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_0_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_10_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_10_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_10_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_10_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_10_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_10_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_10_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_10_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_11_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_11_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_11_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_11_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_11_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_11_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_11_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_11_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_12_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_12_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_12_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_12_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_12_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_12_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_12_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_12_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_13_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_13_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_13_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_13_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_13_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_13_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_13_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_13_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_14_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_14_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_14_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_14_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_14_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_14_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_14_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_14_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_15_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_15_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_15_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_15_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_15_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_15_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_15_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_15_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_1_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_1_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_1_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_1_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_1_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_1_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_1_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_1_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_2_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_2_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_2_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_2_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_2_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_2_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_2_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_2_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_3_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_3_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_3_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_3_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_3_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_3_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_3_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_3_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_4_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_4_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_4_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_4_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_4_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_4_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_4_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_4_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_5_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_5_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_5_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_5_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_5_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_5_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_5_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_5_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_6_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_6_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_6_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_6_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_6_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_6_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_6_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_6_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_7_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_7_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_7_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_7_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_7_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_7_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_7_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_7_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_8_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_8_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_8_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_8_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_8_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_8_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_8_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_8_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign output_states_9_0_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_9_0_0_V_d0 = select_ln887_1_reg_2167;

assign output_states_9_1_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_9_1_0_V_d0 = select_ln887_3_reg_2187;

assign output_states_9_2_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_9_2_0_V_d0 = select_ln887_5_fu_1939_p3;

assign output_states_9_3_0_V_address0 = zext_ln180_fu_1845_p1;

assign output_states_9_3_0_V_d0 = select_ln887_7_fu_1990_p3;

assign p_Result_0_1_fu_1521_p4 = {{add_ln67_1_fu_1516_p2[37:20]}};

assign p_Result_0_2_fu_1707_p4 = {{add_ln67_2_fu_1702_p2[37:20]}};

assign p_Result_0_3_fu_1785_p4 = {{add_ln67_3_fu_1780_p2[37:20]}};

assign p_Result_s_fu_1443_p4 = {{add_ln67_fu_1438_p2[37:20]}};

assign p_Val2_16_fu_1273_p3 = ((icmp_ln1494_fu_1268_p2[0:0] === 1'b1) ? p_Val2_15_reg_2042 : max_val_V_0_0_reg_1148);

assign select_ln60_fu_1250_p3 = ((icmp_ln1494_32_fu_1244_p2[0:0] === 1'b1) ? trunc_ln87_fu_1240_p1 : 37'd10);

assign select_ln67_1_fu_1508_p3 = ((icmp_ln1494_34_fu_1503_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln67_2_fu_1694_p3 = ((icmp_ln1494_35_fu_1689_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln67_3_fu_1772_p3 = ((icmp_ln1494_36_fu_1767_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln67_fu_1430_p3 = ((icmp_ln1494_33_fu_1425_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln850_1_fu_1563_p3 = ((tmp_76_fu_1531_p3[0:0] === 1'b1) ? select_ln851_1_fu_1555_p3 : p_Result_0_1_fu_1521_p4);

assign select_ln850_2_fu_1749_p3 = ((tmp_78_fu_1717_p3[0:0] === 1'b1) ? select_ln851_2_fu_1741_p3 : p_Result_0_2_fu_1707_p4);

assign select_ln850_3_fu_1827_p3 = ((tmp_80_fu_1795_p3[0:0] === 1'b1) ? select_ln851_3_fu_1819_p3 : p_Result_0_3_fu_1785_p4);

assign select_ln850_fu_1485_p3 = ((tmp_74_fu_1453_p3[0:0] === 1'b1) ? select_ln851_fu_1477_p3 : p_Result_s_fu_1443_p4);

assign select_ln851_1_fu_1555_p3 = ((icmp_ln851_1_fu_1543_p2[0:0] === 1'b1) ? p_Result_0_1_fu_1521_p4 : add_ln700_1_fu_1549_p2);

assign select_ln851_2_fu_1741_p3 = ((icmp_ln851_2_fu_1729_p2[0:0] === 1'b1) ? p_Result_0_2_fu_1707_p4 : add_ln700_2_fu_1735_p2);

assign select_ln851_3_fu_1819_p3 = ((icmp_ln851_3_fu_1807_p2[0:0] === 1'b1) ? p_Result_0_3_fu_1785_p4 : add_ln700_3_fu_1813_p2);

assign select_ln851_fu_1477_p3 = ((icmp_ln851_fu_1465_p2[0:0] === 1'b1) ? p_Result_s_fu_1443_p4 : add_ln700_fu_1471_p2);

assign select_ln887_1_fu_1646_p3 = ((or_ln887_fu_1640_p2[0:0] === 1'b1) ? select_ln887_fu_1632_p3 : trunc_ln99_fu_1629_p1);

assign select_ln887_2_fu_1667_p3 = ((icmp_ln887_1_fu_1654_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln887_3_fu_1681_p3 = ((or_ln887_1_fu_1675_p2[0:0] === 1'b1) ? select_ln887_2_fu_1667_p3 : trunc_ln99_1_fu_1664_p1);

assign select_ln887_4_fu_1925_p3 = ((icmp_ln887_2_fu_1912_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln887_5_fu_1939_p3 = ((or_ln887_2_fu_1933_p2[0:0] === 1'b1) ? select_ln887_4_fu_1925_p3 : trunc_ln99_2_fu_1922_p1);

assign select_ln887_6_fu_1976_p3 = ((icmp_ln887_3_fu_1963_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln887_7_fu_1990_p3 = ((or_ln887_3_fu_1984_p2[0:0] === 1'b1) ? select_ln887_6_fu_1976_p3 : trunc_ln99_3_fu_1973_p1);

assign select_ln887_fu_1632_p3 = ((icmp_ln887_fu_1619_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign sext_ln94_fu_1284_p1 = trunc_ln703_fu_1280_p1;

assign shl_ln1_fu_1333_p3 = {{add_ln96_fu_1328_p2}, {2'd0}};

assign shl_ln_fu_1300_p3 = {{jo_0_0_reg_1169}, {4'd0}};

assign tmp_74_fu_1453_p3 = add_ln67_fu_1438_p2[32'd37];

assign tmp_76_fu_1531_p3 = add_ln67_1_fu_1516_p2[32'd37];

assign tmp_78_fu_1717_p3 = add_ln67_2_fu_1702_p2[32'd37];

assign tmp_80_fu_1795_p3 = add_ln67_3_fu_1780_p2[32'd37];

assign trunc_ln703_fu_1280_p1 = grp_fu_1262_p2[37:0];

assign trunc_ln851_1_fu_1539_p1 = add_ln67_1_fu_1516_p2[19:0];

assign trunc_ln851_2_fu_1725_p1 = add_ln67_2_fu_1702_p2[19:0];

assign trunc_ln851_3_fu_1803_p1 = add_ln67_3_fu_1780_p2[19:0];

assign trunc_ln851_fu_1461_p1 = add_ln67_fu_1438_p2[19:0];

assign trunc_ln87_fu_1240_p1 = max_val_V_0_0_reg_1148[36:0];

assign trunc_ln96_fu_1324_p1 = ji_0_0_reg_1180[3:0];

assign trunc_ln99_1_fu_1664_p1 = select_ln850_1_reg_2144[7:0];

assign trunc_ln99_2_fu_1922_p1 = select_ln850_2_reg_2207[7:0];

assign trunc_ln99_3_fu_1973_p1 = select_ln850_3_reg_2218[7:0];

assign trunc_ln99_fu_1629_p1 = select_ln850_reg_2133[7:0];

assign zext_ln180_fu_1845_p1 = lshr_ln_reg_2101;

assign zext_ln88_fu_1229_p1 = j_0_0_reg_1158;

assign zext_ln95_fu_1308_p1 = ji_0_0_reg_1180;

assign zext_ln98_1_fu_1362_p1 = or_ln98_fu_1356_p2;

assign zext_ln98_2_fu_1372_p1 = or_ln98_1_fu_1367_p2;

assign zext_ln98_3_fu_1382_p1 = or_ln98_2_fu_1377_p2;

assign zext_ln98_fu_1341_p1 = shl_ln1_fu_1333_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_2073[3:0] <= 4'b0000;
    shl_ln1_reg_2090[1:0] <= 2'b00;
end

endmodule //quantize_activation
