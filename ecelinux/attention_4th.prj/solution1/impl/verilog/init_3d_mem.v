// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module init_3d_mem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mem_0_0_V_address0,
        mem_0_0_V_ce0,
        mem_0_0_V_we0,
        mem_0_0_V_d0,
        mem_1_0_V_address0,
        mem_1_0_V_ce0,
        mem_1_0_V_we0,
        mem_1_0_V_d0,
        mem_2_0_V_address0,
        mem_2_0_V_ce0,
        mem_2_0_V_we0,
        mem_2_0_V_d0,
        mem_3_0_V_address0,
        mem_3_0_V_ce0,
        mem_3_0_V_we0,
        mem_3_0_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] mem_0_0_V_address0;
output   mem_0_0_V_ce0;
output   mem_0_0_V_we0;
output  [7:0] mem_0_0_V_d0;
output  [6:0] mem_1_0_V_address0;
output   mem_1_0_V_ce0;
output   mem_1_0_V_we0;
output  [7:0] mem_1_0_V_d0;
output  [6:0] mem_2_0_V_address0;
output   mem_2_0_V_ce0;
output   mem_2_0_V_we0;
output  [7:0] mem_2_0_V_d0;
output  [6:0] mem_3_0_V_address0;
output   mem_3_0_V_ce0;
output   mem_3_0_V_we0;
output  [7:0] mem_3_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mem_0_0_V_ce0;
reg mem_0_0_V_we0;
reg mem_1_0_V_ce0;
reg mem_1_0_V_we0;
reg mem_2_0_V_ce0;
reg mem_2_0_V_we0;
reg mem_3_0_V_ce0;
reg mem_3_0_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln50_fu_128_p2;
reg   [6:0] add_ln50_reg_161;
wire    ap_CS_fsm_state2;
reg   [6:0] mem_0_0_V_addr_reg_166;
wire   [0:0] icmp_ln50_fu_122_p2;
reg   [6:0] mem_1_0_V_addr_reg_171;
reg   [6:0] mem_2_0_V_addr_reg_176;
reg   [6:0] mem_3_0_V_addr_reg_181;
wire   [2:0] add_ln51_fu_148_p2;
wire    ap_CS_fsm_state3;
reg   [6:0] j_0_0_reg_100;
wire   [0:0] icmp_ln51_fu_142_p2;
reg   [2:0] k_0_0_reg_111;
wire   [63:0] zext_ln52_fu_134_p1;
wire   [1:0] trunc_ln180_fu_154_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_0_reg_100 <= add_ln50_reg_161;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_100 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_0_reg_111 <= add_ln51_fu_148_p2;
    end else if (((icmp_ln50_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_111 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln50_reg_161 <= add_ln50_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mem_0_0_V_addr_reg_166 <= zext_ln52_fu_134_p1;
        mem_1_0_V_addr_reg_171 <= zext_ln52_fu_134_p1;
        mem_2_0_V_addr_reg_176 <= zext_ln52_fu_134_p1;
        mem_3_0_V_addr_reg_181 <= zext_ln52_fu_134_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln50_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_0_0_V_ce0 = 1'b1;
    end else begin
        mem_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_fu_154_p1 == 2'd0) & (icmp_ln51_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mem_0_0_V_we0 = 1'b1;
    end else begin
        mem_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_1_0_V_ce0 = 1'b1;
    end else begin
        mem_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_fu_154_p1 == 2'd1) & (icmp_ln51_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mem_1_0_V_we0 = 1'b1;
    end else begin
        mem_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_2_0_V_ce0 = 1'b1;
    end else begin
        mem_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_fu_154_p1 == 2'd2) & (icmp_ln51_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mem_2_0_V_we0 = 1'b1;
    end else begin
        mem_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_3_0_V_ce0 = 1'b1;
    end else begin
        mem_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln180_fu_154_p1 == 2'd3) & (icmp_ln51_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mem_3_0_V_we0 = 1'b1;
    end else begin
        mem_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln50_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln51_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_128_p2 = (j_0_0_reg_100 + 7'd1);

assign add_ln51_fu_148_p2 = (k_0_0_reg_111 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign icmp_ln50_fu_122_p2 = ((j_0_0_reg_100 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_142_p2 = ((k_0_0_reg_111 == 3'd4) ? 1'b1 : 1'b0);

assign mem_0_0_V_address0 = mem_0_0_V_addr_reg_166;

assign mem_0_0_V_d0 = 8'd0;

assign mem_1_0_V_address0 = mem_1_0_V_addr_reg_171;

assign mem_1_0_V_d0 = 8'd0;

assign mem_2_0_V_address0 = mem_2_0_V_addr_reg_176;

assign mem_2_0_V_d0 = 8'd0;

assign mem_3_0_V_address0 = mem_3_0_V_addr_reg_181;

assign mem_3_0_V_d0 = 8'd0;

assign trunc_ln180_fu_154_p1 = k_0_0_reg_111[1:0];

assign zext_ln52_fu_134_p1 = j_0_0_reg_100;

endmodule //init_3d_mem
