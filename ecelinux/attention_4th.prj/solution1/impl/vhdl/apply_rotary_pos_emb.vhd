-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_rotary_pos_emb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_q_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_q_0_V_ce0 : OUT STD_LOGIC;
    input_q_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_q_0_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_q_0_V_ce1 : OUT STD_LOGIC;
    input_q_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_k_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_k_0_V_ce0 : OUT STD_LOGIC;
    input_k_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_k_0_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_k_0_V_ce1 : OUT STD_LOGIC;
    input_k_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_q_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_q_0_V_ce0 : OUT STD_LOGIC;
    output_q_0_V_we0 : OUT STD_LOGIC;
    output_q_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_k_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_k_0_V_ce0 : OUT STD_LOGIC;
    output_k_0_V_we0 : OUT STD_LOGIC;
    output_k_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of apply_rotary_pos_emb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_tab_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_tab_V_5_ce0 : STD_LOGIC;
    signal cos_tab_V_5_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_tab_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sin_tab_V_5_ce0 : STD_LOGIC;
    signal sin_tab_V_5_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_298 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_302 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln1265_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1265_reg_565 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln209_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln211_fu_354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln211_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln203_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_reg_579 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln211_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1265_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_416_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_614 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1116_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1116_reg_619 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln221_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln223_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln223_reg_627 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln1116_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_tab_V_5_load_reg_668 : STD_LOGIC_VECTOR (16 downto 0);
    signal sin_tab_V_5_load_reg_673 : STD_LOGIC_VECTOR (16 downto 0);
    signal rotated_q_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_q_0_V_load_reg_678 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_load_reg_683 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_fu_490_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_reg_688 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mul_ln1118_1_fu_502_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_1_reg_693 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_2_fu_512_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_2_reg_698 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_3_fu_521_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_3_reg_703 : STD_LOGIC_VECTOR (55 downto 0);
    signal rotated_q_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal rotated_q_0_V_ce0 : STD_LOGIC;
    signal rotated_q_0_V_we0 : STD_LOGIC;
    signal rotated_q_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal rotated_k_0_V_ce0 : STD_LOGIC;
    signal rotated_k_0_V_we0 : STD_LOGIC;
    signal rotated_k_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_0_reg_254 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_0_reg_265 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i14_0_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal k16_0_0_reg_287 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln224_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln703_fu_396_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln703_35_fu_403_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_101_fu_326_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_318_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1265_fu_334_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_fu_360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_fu_364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln211_fu_344_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln212_fu_375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1265_3_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1265_fu_385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_103_fu_430_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_422_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_2_fu_466_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_fu_470_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_490_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_2_fu_487_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_fu_490_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_1_fu_502_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_4_fu_499_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1118_1_fu_502_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_2_fu_512_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_512_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_3_fu_521_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_521_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln1192_fu_527_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_1_fu_542_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component apply_rotary_pos_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component apply_rotary_pos_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component apply_rotary_pos_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (39 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    cos_tab_V_5_U : component apply_rotary_pos_g8j
    generic map (
        DataWidth => 17,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_tab_V_5_address0,
        ce0 => cos_tab_V_5_ce0,
        q0 => cos_tab_V_5_q0);

    sin_tab_V_5_U : component apply_rotary_pos_hbi
    generic map (
        DataWidth => 17,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_tab_V_5_address0,
        ce0 => sin_tab_V_5_ce0,
        q0 => sin_tab_V_5_q0);

    rotated_q_0_V_U : component apply_rotary_pos_ibs
    generic map (
        DataWidth => 40,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_q_0_V_address0,
        ce0 => rotated_q_0_V_ce0,
        we0 => rotated_q_0_V_we0,
        d0 => rotated_q_0_V_d0,
        q0 => rotated_q_0_V_q0);

    rotated_k_0_V_U : component apply_rotary_pos_ibs
    generic map (
        DataWidth => 40,
        AddressRange => 384,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_k_0_V_address0,
        ce0 => rotated_k_0_V_ce0,
        we0 => rotated_k_0_V_we0,
        d0 => rotated_k_0_V_d0,
        q0 => rotated_k_0_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i14_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln209_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i14_0_reg_276 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln223_fu_448_p2 = ap_const_lv1_1))) then 
                i14_0_reg_276 <= i_2_reg_614;
            end if; 
        end if;
    end process;

    i_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_254 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln211_fu_348_p2 = ap_const_lv1_1))) then 
                i_0_reg_254 <= i_reg_560;
            end if; 
        end if;
    end process;

    k16_0_0_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k16_0_0_reg_287 <= add_ln223_reg_627;
            elsif (((icmp_ln221_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k16_0_0_reg_287 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_0_reg_265 <= add_ln211_reg_574;
            elsif (((icmp_ln209_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_265 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln211_reg_574 <= add_ln211_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln223_reg_627 <= add_ln223_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cos_tab_V_5_load_reg_668 <= cos_tab_V_5_q0;
                rotated_k_0_V_load_reg_683 <= rotated_k_0_V_q0;
                rotated_q_0_V_load_reg_678 <= rotated_q_0_V_q0;
                sin_tab_V_5_load_reg_673 <= sin_tab_V_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_614 <= i_2_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_560 <= i_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln1118_1_reg_693 <= mul_ln1118_1_fu_502_p2;
                mul_ln1118_2_reg_698 <= mul_ln1118_2_fu_512_p2;
                mul_ln1118_3_reg_703 <= mul_ln1118_3_fu_521_p2;
                mul_ln1118_reg_688 <= mul_ln1118_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_298 <= input_q_0_V_q0;
                reg_302 <= input_k_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln223_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                sext_ln1116_reg_632 <= sext_ln1116_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln1265_reg_595 <= sext_ln1265_fu_390_p1;
                sext_ln203_reg_579 <= sext_ln203_fu_369_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln1116_reg_619(9 downto 4) <= sub_ln1116_fu_442_p2(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln209_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln1265_reg_565(9 downto 4) <= sub_ln1265_fu_338_p2(9 downto 4);
            end if;
        end if;
    end process;
    sub_ln1265_reg_565(3 downto 0) <= "0000";
    sub_ln1116_reg_619(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln209_fu_306_p2, ap_CS_fsm_state3, icmp_ln211_fu_348_p2, ap_CS_fsm_state6, icmp_ln221_fu_410_p2, ap_CS_fsm_state7, icmp_ln223_fu_448_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln209_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln211_fu_348_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln221_fu_410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln223_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1116_fu_470_p2 <= std_logic_vector(unsigned(sub_ln1116_reg_619) + unsigned(zext_ln1116_2_fu_466_p1));
    add_ln1192_1_fu_542_p2 <= std_logic_vector(unsigned(mul_ln1118_2_reg_698) + unsigned(mul_ln1118_3_reg_703));
    add_ln1192_fu_527_p2 <= std_logic_vector(unsigned(mul_ln1118_reg_688) + unsigned(mul_ln1118_1_reg_693));
    add_ln1265_fu_385_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_565) + unsigned(zext_ln1265_3_fu_381_p1));
    add_ln203_fu_364_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_565) + unsigned(zext_ln203_fu_360_p1));
    add_ln211_fu_354_p2 <= std_logic_vector(unsigned(k_0_0_reg_265) + unsigned(ap_const_lv5_1));
    add_ln212_fu_375_p2 <= std_logic_vector(unsigned(zext_ln211_fu_344_p1) + unsigned(ap_const_lv6_18));
    add_ln223_fu_454_p2 <= std_logic_vector(unsigned(k16_0_0_reg_287) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln221_fu_410_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln221_fu_410_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln221_fu_410_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln221_fu_410_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cos_tab_V_5_address0 <= zext_ln224_fu_460_p1(7 - 1 downto 0);

    cos_tab_V_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cos_tab_V_5_ce0 <= ap_const_logic_1;
        else 
            cos_tab_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_416_p2 <= std_logic_vector(unsigned(i14_0_reg_276) + unsigned(ap_const_lv4_1));
    i_fu_312_p2 <= std_logic_vector(unsigned(i_0_reg_254) + unsigned(ap_const_lv4_1));
    icmp_ln209_fu_306_p2 <= "1" when (i_0_reg_254 = ap_const_lv4_8) else "0";
    icmp_ln211_fu_348_p2 <= "1" when (k_0_0_reg_265 = ap_const_lv5_18) else "0";
    icmp_ln221_fu_410_p2 <= "1" when (i14_0_reg_276 = ap_const_lv4_8) else "0";
    icmp_ln223_fu_448_p2 <= "1" when (k16_0_0_reg_287 = ap_const_lv6_30) else "0";

    input_k_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_390_p1, ap_CS_fsm_state7, sext_ln1116_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_k_0_V_address0 <= sext_ln1116_fu_475_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_address0 <= sext_ln1265_fu_390_p1(9 - 1 downto 0);
        else 
            input_k_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    input_k_0_V_address1 <= sext_ln203_fu_369_p1(9 - 1 downto 0);

    input_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_k_0_V_ce0 <= ap_const_logic_1;
        else 
            input_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_k_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_ce1 <= ap_const_logic_1;
        else 
            input_k_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_390_p1, ap_CS_fsm_state7, sext_ln1116_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_q_0_V_address0 <= sext_ln1116_fu_475_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_address0 <= sext_ln1265_fu_390_p1(9 - 1 downto 0);
        else 
            input_q_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    input_q_0_V_address1 <= sext_ln203_fu_369_p1(9 - 1 downto 0);

    input_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_q_0_V_ce0 <= ap_const_logic_1;
        else 
            input_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_ce1 <= ap_const_logic_1;
        else 
            input_q_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_502_p0 <= sext_ln1118_4_fu_499_p1(17 - 1 downto 0);
    mul_ln1118_1_fu_502_p1 <= rotated_q_0_V_load_reg_678;
    mul_ln1118_1_fu_502_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_502_p0) * signed(mul_ln1118_1_fu_502_p1))), 56));
    mul_ln1118_2_fu_512_p0 <= sext_ln1118_2_fu_487_p1(17 - 1 downto 0);
    mul_ln1118_2_fu_512_p1 <= reg_302;
    mul_ln1118_2_fu_512_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_2_fu_512_p0) * signed(mul_ln1118_2_fu_512_p1))), 56));
    mul_ln1118_3_fu_521_p0 <= sext_ln1118_4_fu_499_p1(17 - 1 downto 0);
    mul_ln1118_3_fu_521_p1 <= rotated_k_0_V_load_reg_683;
    mul_ln1118_3_fu_521_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_3_fu_521_p0) * signed(mul_ln1118_3_fu_521_p1))), 56));
    mul_ln1118_fu_490_p0 <= sext_ln1118_2_fu_487_p1(17 - 1 downto 0);
    mul_ln1118_fu_490_p1 <= reg_298;
    mul_ln1118_fu_490_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_490_p0) * signed(mul_ln1118_fu_490_p1))), 56));
    output_k_0_V_address0 <= sext_ln1116_reg_632(9 - 1 downto 0);

    output_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_k_0_V_ce0 <= ap_const_logic_1;
        else 
            output_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_k_0_V_d0 <= add_ln1192_1_fu_542_p2(55 downto 16);

    output_k_0_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_k_0_V_we0 <= ap_const_logic_1;
        else 
            output_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_V_address0 <= sext_ln1116_reg_632(9 - 1 downto 0);

    output_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_q_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_V_d0 <= add_ln1192_fu_527_p2(55 downto 16);

    output_q_0_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_q_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_address0_assign_proc : process(ap_CS_fsm_state4, sext_ln203_reg_579, sext_ln1265_reg_595, ap_CS_fsm_state7, sext_ln1116_fu_475_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rotated_k_0_V_address0 <= sext_ln1116_fu_475_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_V_address0 <= sext_ln203_reg_579(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_address0 <= sext_ln1265_reg_595(9 - 1 downto 0);
        else 
            rotated_k_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rotated_k_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_d0_assign_proc : process(input_k_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln703_35_fu_403_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_V_d0 <= sub_ln703_35_fu_403_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_d0 <= input_k_0_V_q1;
        else 
            rotated_k_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            rotated_k_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_address0_assign_proc : process(ap_CS_fsm_state4, sext_ln203_reg_579, sext_ln1265_reg_595, ap_CS_fsm_state7, sext_ln1116_fu_475_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rotated_q_0_V_address0 <= sext_ln1116_fu_475_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_q_0_V_address0 <= sext_ln203_reg_579(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_address0 <= sext_ln1265_reg_595(9 - 1 downto 0);
        else 
            rotated_q_0_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rotated_q_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_d0_assign_proc : process(input_q_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln703_fu_396_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_q_0_V_d0 <= sub_ln703_fu_396_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_d0 <= input_q_0_V_q1;
        else 
            rotated_q_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            rotated_q_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1116_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_fu_470_p2),64));

        sext_ln1118_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_tab_V_5_load_reg_668),56));

        sext_ln1118_4_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_tab_V_5_load_reg_673),56));

        sext_ln1265_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1265_fu_385_p2),64));

        sext_ln203_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_364_p2),64));

    sin_tab_V_5_address0 <= zext_ln224_fu_460_p1(7 - 1 downto 0);

    sin_tab_V_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sin_tab_V_5_ce0 <= ap_const_logic_1;
        else 
            sin_tab_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1116_fu_442_p2 <= std_logic_vector(unsigned(tmp_102_fu_422_p3) - unsigned(zext_ln1116_fu_438_p1));
    sub_ln1265_fu_338_p2 <= std_logic_vector(unsigned(tmp_100_fu_318_p3) - unsigned(zext_ln1265_fu_334_p1));
    sub_ln703_35_fu_403_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(reg_302));
    sub_ln703_fu_396_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(reg_298));
    tmp_100_fu_318_p3 <= (i_0_reg_254 & ap_const_lv6_0);
    tmp_101_fu_326_p3 <= (i_0_reg_254 & ap_const_lv4_0);
    tmp_102_fu_422_p3 <= (i14_0_reg_276 & ap_const_lv6_0);
    tmp_103_fu_430_p3 <= (i14_0_reg_276 & ap_const_lv4_0);
    zext_ln1116_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_287),10));
    zext_ln1116_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_430_p3),10));
    zext_ln1265_3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln212_fu_375_p2),10));
    zext_ln1265_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_326_p3),10));
    zext_ln203_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_265),10));
    zext_ln211_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_265),6));
    zext_ln224_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_287),64));
end behav;
