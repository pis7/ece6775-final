# 1 "attention.cpp"
# 1 "attention.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1







# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "attention.cpp" 2





# 1 "./attention.h" 1








# 1 "./model.h" 1








# 1 "./typedefs.h" 1








# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 54 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 1
# 57 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h" 1
# 100 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 2
# 157 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 2
# 562 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h" 1
# 80 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h" 1
# 73 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h" 1
# 61 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2







# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 1
# 55 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h" 1
# 62 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 63 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h" 2
# 133 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1192 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h" 1
# 70 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  }
# 311 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h" 1
# 61 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_fixed.h" 2
# 368 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 2
# 9 "./typedefs.h" 2
# 20 "./typedefs.h"
typedef ap_uint<4> bit4_t;
typedef ap_uint<6> bit6_t;
typedef ap_uint<8> bit8_t;
typedef ap_int<8> sbit8_t;
typedef ap_int<16> sbit16_t;
typedef ap_uint<32> bit32_t;
typedef ap_int<32> sbit32_t;
typedef ap_uint<64> bit64_t;
typedef ap_fixed<32, 14> st_fixed32_t;
typedef ap_fixed<40, 24> attn_fixed_t;
# 10 "./model.h" 2

const int CACHE_SIZE_INIT = 5;
const int SEQ_LEN_DECODE = 1;
# 26 "./model.h"
const int HS_COLS_BASIC = 384;
const int PROJ_COLS_BASIC = 384;
const int NUM_HEADS_BASIC = 8;
const int HEAD_DIM_BASIC = 48;
const attn_fixed_t HEAD_DIM_BASIC_SQRT = 6.92820323;
# 54 "./model.h"
const attn_fixed_t NORM_EPSILON = 1e-5;
const int P_ID = CACHE_SIZE_INIT;
const attn_fixed_t FIXED32_MIN = -32768.0;
# 10 "./attention.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 1 3
# 33 "/opt/xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 416 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 417 "/usr/include/features.h" 2 3 4
# 438 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 501 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 502 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 503 "/usr/include/sys/cdefs.h" 2 3 4
# 439 "/usr/include/features.h" 2 3 4
# 462 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 463 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 140 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 141 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 34 "/opt/xilinx/Vivado/2019.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 2 3
# 11 "./attention.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h" 1
# 66 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 88 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) bool empty() const {

        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;



    }

    inline __attribute__((always_inline)) bool full() const {

        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;



    }


    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {
        __STREAM_T__ tmp;

        _ssdm_StreamRead(&V, &tmp);



        return tmp;
    }


    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;



    }


    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }


    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;



    }



    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V ;
};


}
# 12 "./attention.h" 2


void dut(hls::stream<st_fixed32_t> &strm_in, hls::stream<st_fixed32_t> &strm_out);


template <
  int CACHE_SIZE_INIT,
  int SEQ_LEN,
  int HS_COLS,
  int PROJ_COLS,
  int NUM_HEADS,
  int HEAD_DIM
> void attention (
  attn_fixed_t hidden_states[SEQ_LEN][HS_COLS],
  attn_fixed_t final_output[SEQ_LEN][PROJ_COLS],
  const uint8_t q_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t q_scale,
  const uint8_t k_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t k_scale,
  const uint8_t v_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t v_scale,
  const uint8_t o_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t o_scale,
  const attn_fixed_t k_cache[NUM_HEADS][CACHE_SIZE_INIT][HEAD_DIM],
  const attn_fixed_t v_cache[NUM_HEADS][CACHE_SIZE_INIT][HEAD_DIM],
  const attn_fixed_t ln_weight_in[HS_COLS],
  const attn_fixed_t ln_weight[PROJ_COLS],
  const attn_fixed_t p_id
);
# 7 "attention.cpp" 2
# 1 "./layer.h" 1








typedef bit32_t HLS_SIZE_T;



# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h"
# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3

# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 1 3
# 153 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 393 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 1 3
# 394 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 397 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3
# 43 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 2 3
# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 1 3
# 36 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 36 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 68 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 198 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 422 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
}
# 44 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 2 3
# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 1 3
# 33 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3
# 33 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 45 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 2 3
# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {






# 1 "/usr/include/bits/math-vector.h" 1 3 4
# 25 "/usr/include/bits/math-vector.h" 3 4
# 1 "/usr/include/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinf (double __value) throw () __attribute__ ((__const__));




extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw (); extern double __nan (const char *__tagb) throw ();
# 211 "/usr/include/bits/mathcalls.h" 3 4
extern int isnan (double __value) throw () __attribute__ ((__const__));





extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ();



extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int totalorder (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw (); extern float __nanf (const char *__tagb) throw ();
# 211 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ();



extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw (); extern long double __nanl (const char *__tagb) throw ();
# 211 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ();



extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ();





extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw (); extern _Float32 __nanf32 (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();



extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ();





extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw (); extern _Float64 __nanf64 (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();



extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ();





extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw (); extern _Float32x __nanf32x (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();



extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ();





extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw (); extern _Float64x __nanf64x (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();



extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 503 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) throw ();


extern float fdiv (double __x, double __y) throw ();


extern float fmul (double __x, double __y) throw ();


extern float fsub (double __x, double __y) throw ();
# 504 "/usr/include/math.h" 2 3 4
# 517 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) throw ();


extern float fdivl (long double __x, long double __y) throw ();


extern float fmull (long double __x, long double __y) throw ();


extern float fsubl (long double __x, long double __y) throw ();
# 518 "/usr/include/math.h" 2 3 4
# 537 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) throw ();


extern double ddivl (long double __x, long double __y) throw ();


extern double dmull (long double __x, long double __y) throw ();


extern double dsubl (long double __x, long double __y) throw ();
# 538 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) throw ();
# 617 "/usr/include/math.h" 2 3 4
# 626 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) throw ();
# 627 "/usr/include/math.h" 2 3 4
# 636 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) throw ();
# 637 "/usr/include/math.h" 2 3 4
# 666 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) throw ();
# 667 "/usr/include/math.h" 2 3 4
# 676 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) throw ();
# 677 "/usr/include/math.h" 2 3 4
# 706 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) throw ();
# 707 "/usr/include/math.h" 2 3 4
# 773 "/usr/include/math.h" 3 4
extern int signgam;
# 853 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 973 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 974 "/usr/include/math.h" 2 3 4
# 985 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1016 "/usr/include/math.h" 3 4
extern "C++" {
# 1047 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1498 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1541 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{



  typedef __typeof (((__x) + (__y) + 0.0f)) _T3;

  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 2 3
# 76 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 480 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 730 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(0, 1, 4,
      3, 2, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 37 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_half.h" 1
# 3274 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_half.h"
extern half half_nan(const char *tagp);





extern half half_atan(half t);
extern half half_atan2(half y, half x);
extern half half_copysign(half x, half y);

extern half half_fabs(half x);

extern half half_abs(half x);
extern half half_fma(half x, half y, half z);
extern half half_mad(half x, half y, half z);
extern half half_frexp (half x, int* exp);
extern half half_ldexp (half x, int exp);
extern half half_fmax(half x, half y);

extern half half_fmin(half x, half y);

extern half half_asin(half t_in);
extern half half_acos(half t_in);
extern half half_sin(half t_in);
extern half half_cos(half t_in);
extern void half_sincos(half x, half *sin, half *cos);
extern half half_sinh(half t_in);
extern half half_cosh(half t_in);
extern half half_sinpi(half t_in);
extern half half_cospi(half t_in);
extern half half_recip(half x);
extern half half_sqrt(half x);
extern half half_rsqrt(half x);
extern half half_cbrt(half x);
extern half half_hypot(half x, half y);
extern half half_log(half x);
extern half half_log10(half x);
extern half half_log2(half x);
extern half half_logb(half x);
extern half half_log1p(half x);
extern int half_ilogb(half x);
extern half half_exp(half x);
extern half half_exp10(half x);
extern half half_exp2(half x);
extern half half_expm1(half x);
extern half half_pow(half x, half y);
extern half half_powr(half x, half y);
extern half half_pown(half x, int y);
extern half half_rootn(half x, int y);
extern half half_floor(half x);

extern half half_ceil(half x);

extern half half_trunc(half x);

extern half half_round(half x);

extern half half_nearbyint(half x);
extern half half_rint(half x);
extern long int half_lrint(half x);
extern long long int half_llrint(half x);
extern long int half_lround(half x);
extern long long int half_llround(half x);
extern half half_modf(half x, half *intpart);

extern half half_fract(half x, half *intpart);
extern half half_nextafter(half x, half y);
extern half half_fmod(half x, half y);
extern half half_remainder(half x, half y);
extern half half_remquo(half x, half y, int* quo);
extern half half_divide(half x, half y);
# 38 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fpo.h" 1
# 62 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fpo.h"
# 1 "/usr/include/assert.h" 1 3 4
# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 63 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fpo.h" 2
# 39 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2


namespace hls {


  int signbit(double);
  int signbit(float);
  int signbit(half);
  int signbitf(float);
  int half_signbit(half);


  double nan(const char*);
  float nanf(const char*);
  half half_nan(const char *);


  int isfinite(double);
  int isfinite(float);
  int isfinite(half);
  int isfinitef(float);
  int half_isfinite(half);


  int __isfinite(double);
  int __isfinite(float);
  int __isfinite(half);
  int __isfinitef(float);


  int isinf(double);
  int isinf(float);
  int isinf(half);
  int isinff(float);
  int half_isinf(half);


  int __isinf(double);
  int __isinf(float);
  int __isinf(half);
  int __isinff(float);


  int isnan(double);
  int isnan(float);
  int isnan(half);
  int isnanf(float);
  int half_isnan(half);


  int __isnan(double);
  int __isnan(float);
  int __isnan(half);
  int __isnanf(float);


  int isnormal(double);
  int isnormal(float);
  int isnormal(half);
  int isnormalf(float);
  int half_isnormal(half);


  int __isnormal(double);
  int __isnormal(float);
  int __isnormal(half);
  int __isnormalf(float);


  int fpclassify(double);
  int fpclassify(float);
  int fpclassify(half);
  int fpclassifyf(float);
  int half_fpclassify(half);


  int __fpclassify(double);
  int __fpclassify(float);
  int __fpclassify(half);
  int __fpclassifyf(float);


  double copysign(double, double);
  float copysign(float, float);
  half copysign(half, half);
  float copysignf(float, float);
  half half_copysign(half, half);
  int8_t copysign(int8_t, int8_t);
  uint8_t copysign(uint8_t, uint8_t);
  int16_t copysign(int16_t, int16_t);
  uint16_t copysign(uint16_t, uint16_t);
  int32_t copysign(int32_t, int32_t);
  uint32_t copysign(uint32_t, uint32_t);


  double fabs(double);
  float fabs(float);
  half fabs(half);
  float fabsf(float);
  half half_fabs(half);
  int8_t fabs(int8_t);
  uint8_t fabs(uint8_t);
  int16_t fabs(int16_t);
  uint16_t fabs(uint16_t);
  int32_t fabs(int32_t);
  uint32_t fabs(uint32_t);


  double abs(double);
  float abs(float);
  half abs(half);
  float absf(float);
  half half_abs(half);
  int8_t abs(int8_t);
  uint8_t abs(uint8_t);
  int16_t abs(int16_t);
  uint16_t abs(uint16_t);
  int32_t abs(int32_t);
  uint32_t abs(uint32_t);


  double fma(double, double, double);
  float fma(float, float, float);
  half fma(half, half, half);
  float fmaf(float, float, float);
  half half_fma(half, half, half);


  double mad(double, double, double);
  float mad(float, float, float);
  half mad(half, half, half);
  float madf(float, float, float);
  half half_mad(half, half, half);


  int isequal(double, double);
  int isequal(float, float);
  int isequal(half, half);
  int isequalf(float, float);
  int half_isequal(half, half);


  int isgreater(double, double);
  int isgreater(float, float);
  int isgreater(half, half);
  int isgreaterf(float, float);
  int half_isgreater(half, half);


  int isgreaterequal(double, double);
  int isgreaterequal(float, float);
  int isgreaterequal(half, half);
  int isgreaterequalf(float, float);
  int half_isgreaterequal(half, half);


  int isless(double, double);
  int isless(float, float);
  int isless(half, half);
  int islessf(float, float);
  int half_isless(half, half);


  int islessequal(double, double);
  int islessequal(float, float);
  int islessequal(half, half);
  int islessequalf(float, float);
  int half_islessequal(half, half);


  int islessgreater(double, double);
  int islessgreater(float, float);
  int islessgreater(half, half);
  int islessgreaterf(float, float);
  int half_islessgreater(half, half);


  int isnotequal(double, double);
  int isnotequal(float, float);
  int isnotequal(half, half);
  int isnotequalf(float, float);
  int half_isnotequal(half, half);


  double fmax(double, double);
  float fmax(float, float);
  half fmax(half, half);
  float fmaxf(float, float);
  half half_fmax(half, half);
  int8_t fmax(int8_t,int8_t);
  uint8_t fmax(uint8_t, uint8_t);
  int16_t fmax(int16_t, int16_t);
  uint16_t fmax(uint16_t, uint16_t);
  int32_t fmax(int32_t, int32_t);
  uint32_t fmax(uint32_t, uint32_t);


  double fmin(double, double);
  float fmin(float, float);
  half fmin(half, half);
  float fminf(float, float);
  half half_fmin(half, half);
  int8_t fmin(int8_t,int8_t);
  uint8_t fmin(uint8_t, uint8_t);
  int16_t fmin(int16_t, int16_t);
  uint16_t fmin(uint16_t, uint16_t);
  int32_t fmin(int32_t, int32_t);
  uint32_t fmin(uint32_t, uint32_t);


  template <class T>
  T max(T x, T y){
 return (x > y) ? x : y;
  }


  template <class T>
  T min(T x, T y){
 return (x < y) ? x : y;
  }


  double fdim(double, double);
  float fdim(float, float);
  half fdim(half, half);
  float fdimf(float, float);
  half half_fdim(half, half);
  int8_t fdim(int8_t,int8_t);
  uint8_t fdim(uint8_t, uint8_t);
  int16_t fdim(int16_t, int16_t);
  uint16_t fdim(uint16_t, uint16_t);
  int32_t fdim(int32_t, int32_t);
  uint32_t fdim(uint32_t, uint32_t);


  double maxmag(double, double);
  float maxmag(float, float);
  half maxmag(half, half);
  float maxmagf(float, float);
  half half_maxmag(half, half);
  int8_t maxmag(int8_t,int8_t);
  uint8_t maxmag(uint8_t, uint8_t);
  int16_t maxmag(int16_t, int16_t);
  uint16_t maxmag(uint16_t, uint16_t);
  int32_t maxmag(int32_t, int32_t);
  uint32_t maxmag(uint32_t, uint32_t);


  double minmag(double, double);
  float minmag(float, float);
  half minmag(half, half);
  float minmagf(float, float);
  half half_minmag(half, half);
  int8_t minmag(int8_t,int8_t);
  uint8_t minmag(uint8_t, uint8_t);
  int16_t minmag(int16_t, int16_t);
  uint16_t minmag(uint16_t, uint16_t);
  int32_t minmag(int32_t, int32_t);
  uint32_t minmag(uint32_t, uint32_t);



  double frexp(double, int*);
  float frexp(float, int*);
  half frexp(half, int*);
  float frexpf(float, int*);
  half half_frexp(half, int*);


  double ldexp(double, int);
  float ldexp(float, int);
  half ldexp(half, int);
  float ldexpf(float, int);
  half half_ldexp(half, int);


  int ilogb(double);
  int ilogb(float);
  int ilogb(half);
  int ilogbf(float);
  int half_ilogb(half);


  double scalbn(double, int);
  float scalbn(float, int);
  half scalbn(half, int);
  float scalbnf(float, int);
  half half_scalbn(half, int);


  double scalbln(double, long int);
  float scalbln(float, long int);
  half scalbln(half, long int);
  float scalblnf(float, long int);
  half half_scalbln(half, long int);


  double ceil(double);
  float ceil(float);
  half ceil(half);
  float ceilf(float);
  half half_ceil(half);


  double floor(double);
  float floor(float);
  half floor(half);
  float floorf(float);
  half half_floor(half);


  double trunc(double);
  float trunc(float);
  half trunc(half);
  float truncf(float);
  half half_trunc(half);


  double round(double);
  float round(float);
  half round(half);
  float roundf(float);
  half half_round(half);


  double rint(double);
  float rint(float);
  half rint(half);
  float rintf(float);
  half half_rint(half);


  long int lround(double);
  long int lround(float);
  long int lround(half);
  long int lroundf(float);
  long int half_lround(half);


  long long int llround(double);
  long long int llround(float);
  long long int llround(half);
  long long int llroundf(float);
  long long int half_llround(half);


  long int lrint(double);
  long int lrint(float);
  long int lrint(half);
  long int lrintf(float);
  long int half_lrint(half);


  long long int llrint(double);
  long long int llrint(float);
  long long int llrint(half);
  long long int llrintf(float);
  long long int half_llrint(half);


  template<class T>
  T cast_IEEE754(double, bool);
  template<class T>
  T cast_IEEE754(float, bool);
  template<class T>
  T cast_IEEE754(half, bool);

  template<class T>
  T cast_IEEE754(double);
  template<class T>
  T cast_IEEE754(float);
  template<class T>
  T cast_IEEE754(half);



  template<>
  char cast_IEEE754<char>(double, bool);
  template<>
  char cast_IEEE754<char>(float, bool);
  template<>
  char cast_IEEE754<char>(half, bool);
  template<>
  char cast_IEEE754<char>(double);
  template<>
  char cast_IEEE754<char>(float);
  template<>
  char cast_IEEE754<char>(half);


  template<>
  int8_t cast_IEEE754<int8_t>(double, bool);
  template<>
  int8_t cast_IEEE754<int8_t>(float, bool);
  template<>
  int8_t cast_IEEE754<int8_t>(half, bool);
  template<>
  int8_t cast_IEEE754<int8_t>(double);
  template<>
  int8_t cast_IEEE754<int8_t>(float);
  template<>
  int8_t cast_IEEE754<int8_t>(half);


  template<>
  uint8_t cast_IEEE754<uint8_t>(double, bool);
  template<>
  uint8_t cast_IEEE754<uint8_t>(float, bool);
  template<>
  uint8_t cast_IEEE754<uint8_t>(half, bool);
  template<>
  uint8_t cast_IEEE754<uint8_t>(double);
  template<>
  uint8_t cast_IEEE754<uint8_t>(float);
  template<>
  uint8_t cast_IEEE754<uint8_t>(half);


  template<>
  int16_t cast_IEEE754<int16_t>(double, bool);
  template<>
  int16_t cast_IEEE754<int16_t>(float, bool);
  template<>
  int16_t cast_IEEE754<int16_t>(half, bool);
  template<>
  int16_t cast_IEEE754<int16_t>(double);
  template<>
  int16_t cast_IEEE754<int16_t>(float);
  template<>
  int16_t cast_IEEE754<int16_t>(half);


  template<>
  uint16_t cast_IEEE754<uint16_t>(double, bool);
  template<>
  uint16_t cast_IEEE754<uint16_t>(float, bool);
  template<>
  uint16_t cast_IEEE754<uint16_t>(half, bool);
  template<>
  uint16_t cast_IEEE754<uint16_t>(double);
  template<>
  uint16_t cast_IEEE754<uint16_t>(float);
  template<>
  uint16_t cast_IEEE754<uint16_t>(half);


  template<>
  int32_t cast_IEEE754<int32_t>(double, bool);
  template<>
  int32_t cast_IEEE754<int32_t>(float, bool);
  template<>
  int32_t cast_IEEE754<int32_t>(half, bool);
  template<>
  int32_t cast_IEEE754<int32_t>(double);
  template<>
  int32_t cast_IEEE754<int32_t>(float);
  template<>
  int32_t cast_IEEE754<int32_t>(half);


  template<>
  uint32_t cast_IEEE754<uint32_t>(double, bool);
  template<>
  uint32_t cast_IEEE754<uint32_t>(float, bool);
  template<>
  uint32_t cast_IEEE754<uint32_t>(half, bool);
  template<>
  uint32_t cast_IEEE754<uint32_t>(double);
  template<>
  uint32_t cast_IEEE754<uint32_t>(float);
  template<>
  uint32_t cast_IEEE754<uint32_t>(half);


  template<>
  int64_t cast_IEEE754<int64_t>(double, bool);
  template<>
  int64_t cast_IEEE754<int64_t>(float, bool);
  template<>
  int64_t cast_IEEE754<int64_t>(half, bool);
  template<>
  int64_t cast_IEEE754<int64_t>(double);
  template<>
  int64_t cast_IEEE754<int64_t>(float);
  template<>
  int64_t cast_IEEE754<int64_t>(half);


  template<>
  uint64_t cast_IEEE754<uint64_t>(double, bool);
  template<>
  uint64_t cast_IEEE754<uint64_t>(float, bool);
  template<>
  uint64_t cast_IEEE754<uint64_t>(half, bool);
  template<>
  uint64_t cast_IEEE754<uint64_t>(double);
  template<>
  uint64_t cast_IEEE754<uint64_t>(float);
  template<>
  uint64_t cast_IEEE754<uint64_t>(half);



  double nearbyint(double);
  float nearbyint(float);
  half nearbyint(half);
  float nearbyintf(float);
  half half_nearbyint(half);


  double modf(double, double*);
  float modf(float, float*);
  half modf(half, half*);
  float modff(float, float*);
  half half_modf(half, half*);


  double fract(double, double*);
  float fract(float, float*);
  half fract(half, half*);
  float fractf(float, float*);
  half half_fract(half, half*);


  int isordered(double, double);
  int isordered(float, float);
  int isordered(half, half);
  int isorderedf(float, float);
  int half_isordered(half, half);


  int isunordered(double, double);
  int isunordered(float, float);
  int isunordered(half, half);
  int isunorderedf(float, float);
  int half_isunordered(half, half);


  double bitselect(double, double, double);
  float bitselect(float, float, float);
  int bitselect(int, int, int);
  uint32_t bitselect(uint32_t, uint32_t, uint32_t);
  half bitselect(half, half, half);
  float bitselectf(float, float, float);
  half half_bitselect(half, half, half);


  namespace hotbm {
 double sin(double);
 float sin(float);
 half sin(half);
 float sinf(float);
 half half_sin(half);

 double cos(double);
 float cos(float);
 half cos(half);
 float cosf(float);
 half half_cos(half);

 void sincos(double, double*, double*);
 void sincos(float, float*, float*);
 void sincos(half, half*, half*);
 void sincosf(float, float*, float*);
 void half_sincos(half, half*, half*);
  }


  namespace cordic {
 double sin(double);
 float sin(float);
 half sin(half);
 float sinf(float);
 half half_sin(half);

 double cos(double);
 float cos(float);
 half cos(half);
 float cosf(float);
 half half_cos(half);

 void sincos(double, double*, double*);
 void sincos(float, float*, float*);
 void sincos(half, half*, half*);
 void sincosf(float, float*, float*);
 void half_sincos(half, half*, half*);
  }


  double sin(double);
  float sin(float);
  half sin(half);
  float sinf(float);
  half half_sin(half);

  double cos(double);
  float cos(float);
  half cos(half);
  float cosf(float);
  half half_cos(half);


  void sincos(double, double*, double*);
  void sincos(float, float*, float*);
  void sincos(half, half*, half*);
  void sincosf(float, float*, float*);
  void half_sincos(half, half*, half*);


  double sinpi(double);
  float sinpi(float);
  half sinpi(half);
  float sinpif(float);
  half half_sinpi(half);


  double cospi(double);
  float cospi(float);
  half cospi(half);
  float cospif(float);
  half half_cospi(half);


  double tanpi(double);
  float tanpi(float);
  half tanpi(half);
  float tanpif(float);
  half half_tanpi(half);


  double atan(double);
  float atan(float);
  half atan(half);
  float atanf(float);
  half half_atan(half);


  double atan2(double, double);
  float atan2(float, float);
  half atan2(half, half);
  float atan2f(float, float);
  half half_atan2(half, half);


  double tan(double);
  float tan(float);
  half tan(half);
  float tanf(float);
  half half_tan(half);


  double sinh(double);
  float sinh(float);
  half sinh(half);
  float sinhf(float);
  half half_sinh(half);


  double cosh(double);
  float cosh(float);
  half cosh(half);
  float coshf(float);
  half half_cosh(half);


  double exp(double);
  float exp(float);
  half exp(half);
  float expf(float);
  half half_exp(half);
  int8_t exp(int8_t);
  uint8_t exp(uint8_t);
  int16_t exp(int16_t);
  uint16_t exp(uint16_t);
  int32_t exp(int32_t);
  uint32_t exp(uint32_t);


  double exp2(double);
  float exp2(float);
  half exp2(half);
  float exp2f(float);
  half half_exp2(half);


  double exp10(double);
  float exp10(float);
  half exp10(half);
  float exp10f(float);
  half half_exp10(half);


  double expm1(double);
  float expm1(float);
  half expm1(half);
  float expm1f(float);
  half half_expm1(half);


  double log(double);
  float log(float);
  half log(half);
  float logf(float);
  half half_log(half);
  int8_t log(int8_t);
  uint8_t log(uint8_t);
  int16_t log(int16_t);
  uint16_t log(uint16_t);
  int32_t log(int32_t);
  uint32_t log(uint32_t);


  double log2(double);
  float log2(float);
  half log2(half);
  float log2f(float);
  half half_log2(half);


  double log10(double);
  float log10(float);
  half log10(half);
  float log10f(float);
  half half_log10(half);
  int8_t log10(int8_t);
  uint8_t log10(uint8_t);
  int16_t log10(int16_t);
  uint16_t log10(uint16_t);
  int32_t log10(int32_t);
  uint32_t log10(uint32_t);


  double logb(double);
  float logb(float);
  half logb(half);
  float logbf(float);
  half half_logb(half);

  double log1p(double);
  float log1p(float);
  half log1p(half);
  float log1pf(float);
  half half_log1p(half);


  half pow(half, half);
  float pow(float, float);
  double pow(double, double);
  float powf(float, float);
  half half_pow(half, half);
  int8_t pow(int8_t, int8_t);
  uint8_t pow(uint8_t, uint8_t);
  int16_t pow(int16_t, int16_t);
  uint16_t pow(uint16_t, uint16_t);
  int32_t pow(int32_t, int32_t);
  uint32_t pow(uint32_t, uint32_t);
  int8_t powr(int8_t, int8_t);
  uint8_t powr(uint8_t, uint8_t);
  int16_t powr(int16_t, int16_t);
  uint16_t powr(uint16_t, uint16_t);
  int32_t powr(int32_t, int32_t);
  uint32_t powr(uint32_t, uint32_t);


  half powr(half, half);
  float powr(float, float);
  double powr(double, double);
  float powrf(float, float);
  half half_powr(half, half);


  half pown(half, int);
  float pown(float, int);
  double pown(double, int);
  float pownf(float, int);
  half half_pown(half, int);


  half rootn(half, int);
  float rootn(float, int);
  double rootn(double, int);
  float rootnf(float, int);
  half half_rootn(half, int);


  double sqrt(double);
  float sqrt(float);
  half sqrt(half);
  float sqrtf(float);
  half half_sqrt(half);
  int8_t sqrt(int8_t);
  uint8_t sqrt(uint8_t);
  int16_t sqrt(int16_t);
  uint16_t sqrt(uint16_t);
  int32_t sqrt(int32_t);
  uint32_t sqrt(uint32_t);
# 854 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h"
  double recip(double);
  float recip(float);
  half recip(half);
  float recipf(float);
  half half_recip(half);
  int8_t recip(int8_t);
  uint8_t recip(uint8_t);
  int16_t recip(int16_t);
  uint16_t recip(uint16_t);
  int32_t recip(int32_t);
  uint32_t recip(uint32_t);


  double rsqrt(double);
  float rsqrt(float);
  half rsqrt(half);
  float rsqrtf(float);
  half half_rsqrt(half);
  int8_t rsqrt(int8_t);
  uint8_t rsqrt(uint8_t);
  int16_t rsqrt(int16_t);
  uint16_t rsqrt(uint16_t);
  int32_t rsqrt(int32_t);
  uint32_t rsqrt(uint32_t);


  double cbrt(double);
  float cbrt(float);
  half cbrt(half);
  float cbrtf(float);
  half half_cbrt(half);


  double hypot(double, double);
  float hypot(float, float);
  half hypot(half, half);
  float hypotf(float, float);
  half half_hypot(half, half);


  double erf(double);
  float erf(float);
  half erf(half);
  float erff(float);
  half half_erf(half);
  int8_t erf(int8_t);
  uint8_t erf(uint8_t);
  int16_t erf(int16_t);
  uint16_t erf(uint16_t);
  int32_t erf(int32_t);
  uint32_t erf(uint32_t);


  double erfc(double);
  float erfc(float);
  half erfc(half);
  float erfcf(float);
  half half_erfc(half);
  int8_t erfc(int8_t);
  uint8_t erfc(uint8_t);
  int16_t erfc(int16_t);
  uint16_t erfc(uint16_t);
  int32_t erfc(int32_t);
  uint32_t erfc(uint32_t);


  double fmod(double, double);
  float fmod(float, float);
  half fmod(half, half);
  float fmodf(float, float);
  half half_fmod(half, half);


  double remainder(double, double);
  float remainder(float, float);
  half remainder(half, half);
  float remainderf(float, float);
  half half_remainder(half, half);


  double remquo(double, double, int*);
  float remquo(float, float, int*);
  half remquo(half, half, int*);
  float remquof(float, float, int*);
  half half_remquo(half, half, int*);


  double divide(double, double);
  float divide(float, float);
  half divide(half, half);
  float dividef(float, float);
  half half_divide(half, half);


  double nextafter(double, double);
  float nextafter(float, float);
  half nextafter(half, half);
  float nextafterf(float, float);
  half half_nextafter(half, half);


  double tanh(double);
  float tanh(float);
  half tanh(half);
  float tanhf(float);
  half half_tanh(half);


  double atanh(double);
  float atanh(float);
  half atanh(half);
  float atanhf(float);
  half half_atanh(half);


  double asinh(double);
  float asinh(float);
  half asinh(half);
  float asinhf(float);
  half half_asinh(half);


  double acosh(double);
  float acosh(float);
  half acosh(half);
  float acoshf(float);
  half half_acosh(half);


  double asin(double);
  float asin(float);
  half asin(half);
  float asinf(float);
  half half_asin(half);


  double acos(double);
  float acos(float);
  half acos(half);
  float acosf(float);
  half half_acos(half);


  double asinpi(double);
  float asinpi(float);
  half asinpi(half);
  float asinpif(float);
  half half_asinpi(half);


  double acospi(double);
  float acospi(float);
  half acospi(half);
  float acospif(float);
  half half_acospi(half);


  double atanpi(double);
  float atanpi(float);
  half atanpi(half);
  float atanpif(float);
  half half_atanpi(half);
}


# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h" 1
# 43 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 44 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_defines.h" 1
# 39 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_defines.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 40 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_defines.h" 2
# 107 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_defines.h"
template<int M, int E>
struct float_struct {
    ap_uint<M> mant;
    ap_uint<E> exp;
    ap_uint<1> sign;
};




template<int M, int E>
struct float_struct2 {
    ap_int<M> mant;
    ap_uint<E> exp;
};
# 45 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h" 1
# 37 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
# 1 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 1 3
# 41 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 41 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 147 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;


    static const int digits10 = 0;
# 212 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
    static const bool is_signed = false;



    static const bool is_integer = false;





    static const bool is_exact = false;



    static const int radix = 0;



    static const int min_exponent = 0;



    static const int min_exponent10 = 0;




    static const int max_exponent = 0;



    static const int max_exponent10 = 0;


    static const bool has_infinity = false;



    static const bool has_quiet_NaN = false;



    static const bool has_signaling_NaN = false;


    static const float_denorm_style has_denorm = denorm_absent;



    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;




    static const bool is_bounded = false;





    static const bool is_modulo = false;


    static const bool traps = false;


    static const bool tinyness_before = false;




    static const float_round_style round_style =
          round_toward_zero;
  };
# 302 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp
      min() throw() { return static_cast<_Tp>(0); }


      static _Tp
      max() throw() { return static_cast<_Tp>(0); }
# 323 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
      static _Tp
      epsilon() throw() { return static_cast<_Tp>(0); }


      static _Tp
      round_error() throw() { return static_cast<_Tp>(0); }


      static _Tp
      infinity() throw() { return static_cast<_Tp>(0); }



      static _Tp
      quiet_NaN() throw() { return static_cast<_Tp>(0); }



      static _Tp
      signaling_NaN() throw() { return static_cast<_Tp>(0); }




      static _Tp
      denorm_min() throw() { return static_cast<_Tp>(0); }
    };
# 369 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool
      min() throw() { return false; }

      static bool
      max() throw() { return true; }





      static const int digits = 1;
      static const int digits10 = 0;



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static bool
      epsilon() throw() { return false; }

      static bool
      round_error() throw() { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool
      infinity() throw() { return false; }

      static bool
      quiet_NaN() throw() { return false; }

      static bool
      signaling_NaN() throw() { return false; }

      static bool
      denorm_min() throw() { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char
      min() throw() { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }

      static char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }






      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static char
      epsilon() throw() { return 0; }

      static char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static
      char infinity() throw() { return char(); }

      static char
      quiet_NaN() throw() { return char(); }

      static char
      signaling_NaN() throw() { return char(); }

      static char
      denorm_min() throw() { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char
      min() throw() { return -127 - 1; }

      static signed char
      max() throw() { return 127; }






      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static signed char
      epsilon() throw() { return 0; }

      static signed char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      signaling_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      denorm_min() throw() { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char
      min() throw() { return 0; }

      static unsigned char
      max() throw() { return 127 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned char
      epsilon() throw() { return 0; }

      static unsigned char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char
      infinity() throw() { return static_cast<unsigned char>(0); }

      static unsigned char
      quiet_NaN() throw() { return static_cast<unsigned char>(0); }

      static unsigned char
      signaling_NaN() throw() { return static_cast<unsigned char>(0); }

      static unsigned char
      denorm_min() throw() { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }

      static wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }






      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static wchar_t
      epsilon() throw() { return 0; }

      static wchar_t
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t
      infinity() throw() { return wchar_t(); }

      static wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static wchar_t
      denorm_min() throw() { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 851 "/opt/xilinx/Vivado/2019.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short
      min() throw() { return -32767 - 1; }

      static short
      max() throw() { return 32767; }






      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static short
      epsilon() throw() { return 0; }

      static short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static short
      infinity() throw() { return short(); }

      static short
      quiet_NaN() throw() { return short(); }

      static short
      signaling_NaN() throw() { return short(); }

      static short
      denorm_min() throw() { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short
      min() throw() { return 0; }

      static unsigned short
      max() throw() { return 32767 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned short
      epsilon() throw() { return 0; }

      static unsigned short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short
      infinity() throw() { return static_cast<unsigned short>(0); }

      static unsigned short
      quiet_NaN() throw() { return static_cast<unsigned short>(0); }

      static unsigned short
      signaling_NaN() throw() { return static_cast<unsigned short>(0); }

      static unsigned short
      denorm_min() throw() { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int
      min() throw() { return -2147483647 - 1; }

      static int
      max() throw() { return 2147483647; }






      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static int
      epsilon() throw() { return 0; }

      static int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static int
      infinity() throw() { return static_cast<int>(0); }

      static int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static int
      denorm_min() throw() { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int
      min() throw() { return 0; }

      static unsigned int
      max() throw() { return 2147483647 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned int
      epsilon() throw() { return 0; }

      static unsigned int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      quiet_NaN() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      signaling_NaN() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      denorm_min() throw() { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long
      min() throw() { return -9223372036854775807L - 1; }

      static long
      max() throw() { return 9223372036854775807L; }






      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long
      epsilon() throw() { return 0; }

      static long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long
      infinity() throw() { return static_cast<long>(0); }

      static long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static long
      denorm_min() throw() { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long
      min() throw() { return 0; }

      static unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }






      static const int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long
      epsilon() throw() { return 0; }

      static unsigned long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long
      infinity() throw() { return static_cast<unsigned long>(0); }

      static unsigned long
      quiet_NaN() throw() { return static_cast<unsigned long>(0); }

      static unsigned long
      signaling_NaN() throw() { return static_cast<unsigned long>(0); }

      static unsigned long
      denorm_min() throw() { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long
      min() throw() { return -9223372036854775807LL - 1; }

      static long long
      max() throw() { return 9223372036854775807LL; }






      static const int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long long
      epsilon() throw() { return 0; }

      static long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long
      infinity() throw() { return static_cast<long long>(0); }

      static long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static long long
      signaling_NaN() throw() { return static_cast<long long>(0); }

      static long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long
      min() throw() { return 0; }

      static unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }






      static const int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long long
      epsilon() throw() { return 0; }

      static unsigned long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long
      infinity() throw() { return static_cast<unsigned long long>(0); }

      static unsigned long long
      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }

      static unsigned long long
      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }

      static unsigned long long
      denorm_min() throw() { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float
      min() throw() { return 1.17549435e-38F; }

      static float
      max() throw() { return 3.40282347e+38F; }






      static const int digits = 24;
      static const int digits10 = 6;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static float
      epsilon() throw() { return 1.19209290e-7F; }

      static float
      round_error() throw() { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
       = false;

      static float
      infinity() throw() { return __builtin_huge_valf (); }

      static float
      quiet_NaN() throw() { return __builtin_nanf (""); }

      static float
      signaling_NaN() throw() { return __builtin_nansf (""); }

      static float
      denorm_min() throw() { return 1.40129846e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double
      min() throw() { return 2.2250738585072014e-308; }

      static double
      max() throw() { return 1.7976931348623157e+308; }






      static const int digits = 53;
      static const int digits10 = 15;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static double
      round_error() throw() { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
        = false;

      static double
      infinity() throw() { return __builtin_huge_val(); }

      static double
      quiet_NaN() throw() { return __builtin_nan (""); }

      static double
      signaling_NaN() throw() { return __builtin_nans (""); }

      static double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static long double
      max() throw() { return 1.18973149535723176502e+4932L; }






      static const int digits = 64;
      static const int digits10 = 18;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static long double
      round_error() throw() { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double
      infinity() throw() { return __builtin_huge_vall (); }

      static long double
      quiet_NaN() throw() { return __builtin_nanl (""); }

      static long double
      signaling_NaN() throw() { return __builtin_nansl (""); }

      static long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before =
      false;
      static const float_round_style round_style =
            round_to_nearest;
    };






}
# 38 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h" 2
# 68 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
namespace hls {

    template<typename T>
    class numeric_limits {
    public:
        static T max() { return std::numeric_limits<T>::max(); }
        static T min() { return std::numeric_limits<T>::min(); }
        static T epsilon() { return std::numeric_limits<T>::epsilon(); }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_fixed<W,I,Q,O> > {
    public:
        static ap_fixed<W,I,Q,O> max() {
            ap_int<W> m = ::hls::numeric_limits<ap_int<W> >::max();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> min() {
            ap_int<W> m = ::hls::numeric_limits<ap_int<W> >::min();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> epsilon() {
          ap_fixed<W,I,Q,O> x = 0;
          x[0] = 1;

          return x;
        }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_ufixed<W,I,Q,O> > {
    public:
        static ap_ufixed<W,I,Q,O> max() {
            ap_uint<W> m = ::hls::numeric_limits<ap_uint<W> >::max();
            ap_ufixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_ufixed<W,I,Q,O> min() { return 0; }
        static ap_ufixed<W,I,Q,O> epsilon() {
          ap_ufixed<W,I,Q,O> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_int<W> > {
    public:
        static ap_int<W> max() { ap_int<W> m = min(); return ~m; }
        static ap_int<W> min() { ap_int<W> m = 0; m[W-1] = 1; return m; }
        static ap_int<W> epsilon() {
          ap_int<W> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_uint<W> > {
    public:
        static ap_uint<W> max() { ap_uint<W> zero = 0; return ~zero; }
        static ap_uint<W> min() { return 0; }
        static ap_uint<W> epsilon() {
          ap_uint<W> x = 0;
          x[0] = 1;
          return x;
        }
    };
}


namespace hlstmp {

    template<typename T>
    class numeric_limits {
    public:
        static T max() { return std::numeric_limits<T>::max(); }
        static T min() { return std::numeric_limits<T>::min(); }
        static T epsilon() { return std::numeric_limits<T>::epsilon(); }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_fixed<W,I,Q,O> > {
    public:
        static ap_fixed<W,I,Q,O> max() {
            ap_int<W> m = ::hlstmp::numeric_limits<ap_int<W> >::max();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> min() {
            ap_int<W> m = ::hlstmp::numeric_limits<ap_int<W> >::min();
            ap_fixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_fixed<W,I,Q,O> epsilon() {
          ap_fixed<W,I,Q,O> x = 0;
          x[0] = 1;

          return x;
        }
    };

    template <int W, int I, ap_q_mode Q, ap_o_mode O>
    class numeric_limits<ap_ufixed<W,I,Q,O> > {
    public:
        static ap_ufixed<W,I,Q,O> max() {
            ap_uint<W> m = ::hlstmp::numeric_limits<ap_uint<W> >::max();
            ap_ufixed<W,I,Q,O> x;
            x(W-1,0) = m(W-1,0);
            return x;
        }
        static ap_ufixed<W,I,Q,O> min() { return 0; }
        static ap_ufixed<W,I,Q,O> epsilon() {
          ap_ufixed<W,I,Q,O> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_int<W> > {
    public:
        static ap_int<W> max() { ap_int<W> m = min(); return ~m; }
        static ap_int<W> min() { ap_int<W> m = 0; m[W-1] = 1; return m; }
        static ap_int<W> epsilon() {
          ap_int<W> x = 0;
          x[0] = 1;
          return x;
        }
    };

    template <int W>
    class numeric_limits<ap_uint<W> > {
    public:
        static ap_uint<W> max() { ap_uint<W> zero = 0; return ~zero; }
        static ap_uint<W> min() { return 0; }
        static ap_uint<W> epsilon() {
          ap_uint<W> x = 0;
          x[0] = 1;
          return x;
        }
    };
}


static inline
const
uint32_t pow2(uint32_t e)
{
    switch(e) {
        case 0: return 1; break;
        case 1: return 2; break;
        case 2: return 4; break;
        case 3: return 8; break;
        case 4: return 16; break;
        case 5: return 32; break;
        case 6: return 64; break;
        case 7: return 128; break;
        case 8: return 256; break;
        case 9: return 512; break;
        case 10: return 1024; break;
        case 11: return 2048; break;
        default: return 0;
    }
}

template<class T>
T reg(T in)
{

_ssdm_InlineSelf(2, "");
_ssdm_op_SpecInterface(0, "ap_none", 1, 1, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");

    return in;
}
# 264 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
static inline
float to_float(float v)
{
    return v;
}

template<int _W, int _I>
float to_float(ap_fixed<_W, _I> v)
{
    return v.to_float();
}
# 283 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template <typename T>
class fp_struct
{
};

union single_cast {
    float f;
    uint32_t i;
};

template <>
class fp_struct<float>
{
public:
    const static int EXP_INFNAN = 255;
    const static int EXP_BIAS = 127;
    const static int EXP_BITS = 8;
    const static int SIG_BITS = 23;
    const static int BITS = 32;

    fp_struct() {
    }
    fp_struct(float f) {


        union single_cast dc;
        dc.f = f;
        ap_uint<32> data = dc.i;





        sign[0] = data[31];
        exp(7,0)= data(30,23);
        sig(22,0)= data(22,0);
    }
    fp_struct(ap_uint<32> data) {
        sign[0] = data[31];
        exp(7,0)= data(30,23);
        sig(22,0)= data(22,0);
    }
    fp_struct(uint32_t i) {
        ap_uint<32> data = i;
        sign[0] = data[31];
        exp(7,0)= data(30,23);
        sig(22,0)= data(22,0);
    }
    inline ap_uint<32> data() const {
        ap_uint<32> t;
        t[31] = sign[0];
        t(30,23) = exp(7,0);
        t(22,0) = sig(22,0);
        return t;
    }
    inline int expv() const {
        return exp-127;
    }
    inline int32_t to_int() const {
        return data().to_int();
    }
    inline float to_float() const {


        union single_cast ret;
        ret.i = data().to_uint();
        return ret.f;







    }
    inline void set_mantissa(ap_ufixed<1+SIG_BITS,1> mantissa) {
        ap_ufixed<SIG_BITS,0> significand = mantissa;
        sig = significand(SIG_BITS-1,0);
    }
    inline ap_ufixed<1+SIG_BITS,1> mantissa() const {
        ap_ufixed<1+SIG_BITS,1> y = 0;
        y(y.wl()-1,0) = sig(SIG_BITS-1,0);
        y[y.wl()-1] = 1;
        return y;
    }
    inline float to_ieee() const {
        return to_float();
    }
    inline int __signbit() const {
        return sign.to_int();
    }

    static float infinity() {
        fp_struct<float> x;
        x.sign = 0;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    static float minus_infinity() {
        fp_struct<float> x;
        x.sign = 1;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    typedef uint32_t inttype;
    typedef ap_uint<32> data_type;
    ap_uint<1> sign;
    ap_uint<EXP_BITS> exp;
    ap_uint<SIG_BITS> sig;
};
# 413 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
static inline
void
castSingle(
    float din,
    fp_struct<float> &dout)
{
    fp_struct<float> t(din);
    dout = t;
}

static inline
float
castSingle(
    fp_struct<float> din)
{
    return din.to_float();
}

static inline
void
dumpSingle(
    float da,
    fp_struct<float> ds)
{
# 447 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
}







union double_cast {
    double d;
    uint64_t i;
};

template <>
class fp_struct<double>
{
public:
    const static int EXP_INFNAN = 2047;
    const static int EXP_BIAS = 1023;
    const static int EXP_BITS = 11;
    const static int SIG_BITS = 52;
    const static int BITS = 64;

    fp_struct() {
    }
    fp_struct(double f) {
        union double_cast dc;
        dc.d = f;
        ap_uint<64> data = dc.i;
        sign[0] = data[63];
        exp(10,0) = data(62,52);
        sig(51,0) = data(51,0);
    }
    fp_struct(ap_uint<64> data) {
        sign[0] = data[63];
        exp(10,0) = data(62,52);
        sig(51,0) = data(51,0);
    }
    fp_struct(uint64_t i) {
        ap_uint<64> data = i;
        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    inline ap_uint<64> data() const {
        ap_uint<64> t;
        t[EXP_BITS+SIG_BITS+1-1] = sign[0];
        t(EXP_BITS-1+SIG_BITS,SIG_BITS) = exp(EXP_BITS-1,0);
        t(SIG_BITS-1,0) = sig(SIG_BITS-1,0);
        return t;
    }
    inline int64_t to_int() const {
        return data().to_int64();
    }
    inline int expv() const {
        return exp-1023;
    }
    inline ap_uint<20> sig_msb() const {
        return sig(51,32);
    }
    inline ap_uint<32> sig_lsb() const {
        return sig(31,0);
    }
    inline double to_double() const {
        union double_cast ret;
        ret.i = data().to_uint64();
        return ret.d;
    }
    inline void set_mantissa(ap_ufixed<1+SIG_BITS,1> mantissa) {
        ap_ufixed<SIG_BITS,0> significand = mantissa;
        sig = significand(SIG_BITS-1,0);
    }
    inline ap_ufixed<1+SIG_BITS,1> mantissa() const {
        ap_ufixed<1+SIG_BITS,1> y = 0;
        y(y.wl()-1,0) = sig(SIG_BITS-1,0);
        y[y.wl()-1] = 1;
        return y;
    }
    inline double to_ieee() const {
        return to_double();
    }
    inline int __signbit() const {
        return sign.to_int();
    }

    static double infinity() {
        fp_struct<double> x;
        x.sign = 0;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    static double minus_infinity() {
        fp_struct<double> x;
        x.sign = 1;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    typedef uint64_t inttype;
    typedef ap_uint<64> data_type;
    ap_uint<1> sign;
    ap_uint<EXP_BITS> exp;
    ap_uint<SIG_BITS> sig;
};
# 566 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
static inline
void
castDouble(
    double din,
    fp_struct<double> &dout)
{
    fp_struct<double> t(din);
    dout = t;
}

static inline
double
castDouble(
    fp_struct<double> din)
{
    return din.to_double();
}

static inline
void
dumpDouble(
    double da,
    fp_struct<double> ds)
{
# 600 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
}
# 610 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
union half_cast {
    half d;
    uint16_t i;
};


template <>
class fp_struct<half>
{
public:
    const static int EXP_INFNAN = 31;
    const static int EXP_BIAS = 15;
    const static int EXP_BITS = 5;
    const static int SIG_BITS = 10;
    const static int BITS = 16;

    fp_struct() {
    }
    fp_struct(half f) {

        union half_cast dc;
        dc.d = f;
        ap_uint<16> data = dc.i;



        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    fp_struct(ap_uint<16> data) {
        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    fp_struct(uint16_t i) {
        ap_uint<16> data = i;
        sign[0] = data[EXP_BITS+SIG_BITS+1-1];
        exp(EXP_BITS-1,0) = data(EXP_BITS-1+SIG_BITS,SIG_BITS);
        sig(SIG_BITS-1,0) = data(SIG_BITS-1,0);
    }
    inline ap_uint<16> data() const {
        ap_uint<16> t;
        t[EXP_BITS+SIG_BITS+1-1] = sign[0];
        t(EXP_BITS-1+SIG_BITS,SIG_BITS) = exp(EXP_BITS-1,0);
        t(SIG_BITS-1,0) = sig(SIG_BITS-1,0);
        return t;
    }
    inline int expv() const {
        return exp-EXP_BIAS;
    }
    inline int16_t to_int() const {
        return uint16_t(data().to_int());
    }
    inline half to_half() const {

        union half_cast ret;
        ret.i = data().to_uint64();
        return ret.d;





    }
    inline void set_mantissa(ap_ufixed<1+SIG_BITS,1> mantissa) {
        ap_ufixed<SIG_BITS,0> significand = mantissa;
        sig = significand(SIG_BITS-1,0);
    }
    inline ap_ufixed<1+SIG_BITS,1> mantissa() const {
        ap_ufixed<1+SIG_BITS,1> y = 0;
        y(y.wl()-1,0) = sig(SIG_BITS-1,0);
        y[y.wl()-1] = 1;
        return y;
    }
    inline half to_ieee() const {
        return to_half();
    }
    inline int __signbit() const {
        return sign.to_int();
    }

    static half infinity() {
        fp_struct<half> x;
        x.sign = 0;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    static half minus_infinity() {
        fp_struct<half> x;
        x.sign = 1;
        x.exp = -1;
        x.sig = 0;
        return x.to_ieee();
    }

    typedef uint16_t inttype;
    typedef ap_uint<16> data_type;
    ap_uint<1> sign;
    ap_uint<EXP_BITS> exp;
    ap_uint<SIG_BITS> sig;
};
# 726 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
static inline
void
castHalf(
    half din,
    fp_struct<half> &dout)
{
    fp_struct<half> t(din);
    dout = t;
}

static inline
half
castHalf(
    fp_struct<half> din)
{
    return din.to_half();
}

static inline
void
dumpHalf(
    half da,
    fp_struct<half> ds)
{
# 760 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
}
# 775 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template < unsigned int _Base, unsigned int _Num >
class Power
{
public:
    static const unsigned int Value = _Base * Power< _Base, _Num - 1 >::Value;
};

template < unsigned int _Base >
class Power< _Base, 0 >
{
public:
    static const unsigned int Value = 1;
};
# 797 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template < unsigned int _Num, unsigned int _I=_Num/2>
class BitWidth
{
public:
    static const unsigned int Value = 1 + BitWidth<_Num,_I/2>::Value;
};

template <unsigned int _Num>
class BitWidth<_Num, 0>
{
public:
    static const unsigned int Value = 1;
};
# 819 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template < unsigned int _Num, unsigned int _I=_Num/2>
class UnsignedBitWidth
{
public:
    static const unsigned int Value = 1 + UnsignedBitWidth<_Num,_I/2>::Value;
};

template <unsigned int _Num>
class UnsignedBitWidth<_Num, 0>
{
public:
    static const unsigned int Value = 0;
};
# 840 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template < typename T >
class Type_BitWidth
{
public:
    static const unsigned int Value = 8*sizeof(T);
};

template <int W >
class Type_BitWidth< ap_uint<W> >
{
public:
    static const unsigned int Value = W;
};

template < int W >
class Type_BitWidth< ap_int<W> >
{
public:
    static const unsigned int Value = W;
};

template < int W, int I >
class Type_BitWidth< ap_ufixed<W, I> >
{
public:
    static const unsigned int Value = W;
};

template < int W, int I >
class Type_BitWidth< ap_fixed<W, I> >
{
public:
    static const unsigned int Value = W;
};
# 888 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template <typename _T, int _Num, int _I=_Num-1>
class Table : public Table<_T, _Num, _I-1>
{
public:
    typedef typename _T::TableType TableType;
    static const typename _T::TableType dummy;
    static const int size = _Num;

};

template <typename _T, int _Num>
class Table<_T, _Num, 0>
{
public:
    static const typename _T::TableType dummy;
    static typename _T::TableType array[_Num];
};
# 915 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_utils.h"
template <typename _T, int _Num, int _I>
const typename _T::TableType Table<_T, _Num, _I>::dummy
    = Table<_T, _Num, 0>::array[_I] = _T::apply(_I,_Num) + 0*Table<_T, _Num, _I-1>::dummy;

template <typename _T, int _Num>
const typename _T::TableType Table<_T, _Num, 0>::dummy
    = Table<_T, _Num, 0>::array[0] = _T::apply(0,_Num);




template <typename _T, int _Num>
typename _T::TableType Table<_T, _Num, 0>::array[_Num];



template <class T>
struct is_fptype { static const bool value = false; };
template <> struct is_fptype<float> { static const bool value = true; };
template <> struct is_fptype<double> { static const bool value = true; };
template <> struct is_fptype<half> { static const bool value = true; };

template <class T>
struct is_integraltype { static const bool value = false; };
template <> struct is_integraltype<int> { static const bool value = true; };
template <> struct is_integraltype<unsigned int> { static const bool value = true; };
template <> struct is_integraltype<char> { static const bool value = true; };
template <> struct is_integraltype<signed char> { static const bool value = true; };
template <> struct is_integraltype<unsigned char> { static const bool value = true; };
template <> struct is_integraltype<short> { static const bool value = true; };
template <> struct is_integraltype<unsigned short> { static const bool value = true; };
template <> struct is_integraltype<long> { static const bool value = true; };
template <> struct is_integraltype<unsigned long> { static const bool value = true; };
template <> struct is_integraltype<long long> { static const bool value = true; };
template <> struct is_integraltype<unsigned long long> { static const bool value = true; };
template <int W> struct is_integraltype<ap_int<W> > { static const bool value = true; };
template <int W> struct is_integraltype<ap_uint<W> > { static const bool value = true; };

template <class T>
struct is_fixedtype { static const bool value = false; };
template <int W, int I, ap_q_mode Q, ap_o_mode O> struct is_fixedtype<ap_fixed<W,I,Q,O> > { static const bool value = true; };
template <int W, int I, ap_q_mode Q, ap_o_mode O> struct is_fixedtype<ap_ufixed<W,I,Q,O> > { static const bool value = true; };

namespace hls {
    template<bool B, class T = void>
    struct enable_if {};

    template<class T>
    struct enable_if<true, T> { typedef T type; };
    template<typename T, T _v>
    struct integral_constant
    {
        static const T value = _v;
        typedef T value_type;
        typedef integral_constant<T,_v> type;
        operator value_type() { return value; }
    };

    typedef integral_constant<bool, true> true_type;
    typedef integral_constant<bool, false> false_type;

    template<typename T1, typename T2>
    struct is_same;

    template<typename T1, typename T2>
    struct is_same : public false_type { };

    template<typename T1>
    struct is_same<T1,T1> : public true_type { };

    template<typename T>
    struct is_arithmetic : public integral_constant<bool, (is_integraltype<T>::value || is_fptype<T>::value)> { };
}

template<typename T1, typename T2>
struct enable_or { static const bool value = T1::value || T2::value; };

template<typename T1, typename T2>
struct enable_and { static const bool value = T1::value && T2::value; };



template<typename T, bool = is_integraltype<T>::value>
struct __promote { typedef double type; };

template<typename T>
struct __promote<T, false> { };

template<>
struct __promote<double> { typedef double type; };

template<>
struct __promote<float> { typedef float type; };

template<>
struct __promote<half> { typedef half type; };
# 46 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h" 2






namespace hotbm_apfixed
{

  namespace first_order_fixed_16{
 extern const ap_fixed<19,2> sin_cos_K0[256];
 extern const ap_fixed<11,2> sin_cos_K1[256];
  };

  namespace second_order_float{
 extern const ap_fixed<29,0> cos_K0[128];
 extern const ap_fixed<23,1> cos_K1[128];
 extern const ap_fixed<15,0> cos_K2[128];
 extern const ap_fixed<30,1> sin_K0[128];
 extern const ap_fixed<21,-1> sin_K1[128];
 extern const ap_fixed<13,-2> sin_K2[128];
 extern const ap_ufixed<30,1> sin_cos_K0[256];
 extern const ap_fixed<23,1> sin_cos_K1[256];
 extern const ap_fixed<15,0> sin_cos_K2[256];
  };

  namespace fourth_order_double{
 extern const ap_fixed<59,0> cos_K0[128];
 extern const ap_fixed<53,1> cos_K1[128];
 extern const ap_fixed<45,0> cos_K2[128];
 extern const ap_fixed<35,-3> cos_K3[128];
 extern const ap_fixed<27,-4> cos_K4[128];
 extern const ap_fixed<60,1> sin_K0[128];
 extern const ap_fixed<51,-1> sin_K1[128];
 extern const ap_fixed<43,-2> sin_K2[128];
 extern const ap_fixed<33,-5> sin_K3[128];
 extern const ap_fixed<24,-7> sin_K4[128];
 extern const ap_fixed<59,1> sin_cos_K0[256];
 extern const ap_fixed<52,1> sin_cos_K1[256];
 extern const ap_fixed<44,0> sin_cos_K2[256];
 extern const ap_fixed<34,-3> sin_cos_K3[256];
 extern const ap_fixed<26,-4> sin_cos_K4[256];
  };

  template<class T>
  struct value_list{
  };

  template<>
  struct value_list<double>{
    typedef double T;
 static const int g = 10;
 static const int p1 = 61;
 static const int alpha = 7;

 static const int beta1 = 0;

 static const int beta2 = alpha;

    static const int W_dout = fp_struct<T>::SIG_BITS+1+g;
    static const int W_Mx = fp_struct<T>::SIG_BITS+1+g;

    template <int Wx, int Wr>
    static ap_ufixed<Wx, 1> sin_or_cos_approximation(bool do_cos,
              ap_uint<3> &k,
              ap_ufixed<Wx, 0> &x,
              ap_ufixed<Wr, 0> &Mx,
              ap_int<fp_struct<double>::EXP_BITS> &Ex){

   const bool swap_table[8] = {0,1,1,0,0,1,1,0};
_ssdm_SpecConstant(swap_table);
# 115 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

#pragma HLS array_partition variable=&swap_table complete
#pragma HLS RESOURCE variable=&fourth_order_double::sin_cos_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_cos_K1 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_cos_K2 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_cos_K3 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_cos_K4 core=ROM_1P_LUTRAM

 ap_uint<alpha+1> A = x(x.wl()-x.iwl()-1,x.wl()-x.iwl()-alpha);
   ap_ufixed<Wx-alpha-beta1, -alpha> B = x;
   ap_ufixed<Wx-alpha-beta2, -alpha> B_trunc = B;
   ap_ufixed<Wx-2*alpha, -2*alpha> B_squared = B_trunc*B_trunc;
   ap_ufixed<Wx-3*alpha, -3*alpha> B_third_power = B_trunc*B_squared;
   ap_ufixed<Wx-4*alpha, -4*alpha> B_fourth_power = B_squared*B_squared;

   bool sin_basis = do_cos? swap_table[k]:!swap_table[k];
   A[alpha] = sin_basis;

   ap_fixed<Wx, 1> t1 = fourth_order_double::sin_cos_K0[A];
   ap_fixed<Wx, 1> t2 = B*fourth_order_double::sin_cos_K1[A];
   ap_fixed<Wx, 1> t3 = B_squared*fourth_order_double::sin_cos_K2[A];
   ap_fixed<Wx, 1> t4 = B_third_power*fourth_order_double::sin_cos_K3[A];
   ap_fixed<Wx, 1> t5 = B_fourth_power*fourth_order_double::sin_cos_K4[A];
   ap_ufixed<Wx, 1> result = Mx*(t1+t2+t3+t4+t5);
   return result;
    }

    template <int Wx, int Wr>
    static void sincos_approximation(ap_uint<3> &k,
          ap_ufixed<Wx, 0> &x,
          ap_ufixed<Wr, 0> Mx,
          ap_int<fp_struct<double>::EXP_BITS> Ex,
          ap_ufixed<Wr, 1> &sin_result,
          ap_ufixed<Wr, 1> &cos_result
          ) {
#pragma HLS RESOURCE variable=&fourth_order_double::cos_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::cos_K1 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::cos_K2 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::cos_K3 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::cos_K4 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_K1 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_K2 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_K3 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&fourth_order_double::sin_K4 core=ROM_1P_LUTRAM

 ap_uint<alpha> A = x(x.wl()-x.iwl()-1,
         x.wl()-x.iwl()-alpha);
   ap_ufixed<Wx-alpha-beta1, -alpha> B = x;
   ap_ufixed<Wx-alpha-beta2, -alpha> B_trunc = B;
   ap_ufixed<Wx-2*alpha, -2*alpha> B_squared = B_trunc*B_trunc;
   ap_ufixed<Wx-3*alpha, -3*alpha> B_third_power = B_trunc*B_squared;
   ap_ufixed<Wx-4*alpha, -4*alpha> B_fourth_power = B_squared*B_squared;

   ap_fixed<Wx, 1> cos_t1 = fourth_order_double::cos_K0[A];
   ap_fixed<Wx, 1> cos_t2 = B*fourth_order_double::cos_K1[A];
   ap_fixed<Wx, 1> cos_t3 = B_squared*fourth_order_double::cos_K2[A];
   ap_fixed<Wx, 1> cos_t4 = B_third_power*fourth_order_double::cos_K3[A];
   ap_fixed<Wx, 1> cos_t5 = B_fourth_power*fourth_order_double::cos_K4[A];
   cos_result = 1 - (cos_t1 + cos_t2 + cos_t3 + cos_t4 + cos_t5);

   ap_fixed<Wx, 1> sin_t1 = fourth_order_double::sin_K0[A];
   ap_fixed<Wx, 1> sin_t2 = B*fourth_order_double::sin_K1[A];
   ap_fixed<Wx, 1> sin_t3 = B_squared*fourth_order_double::sin_K2[A];
   ap_fixed<Wx, 1> sin_t4 = B_third_power*fourth_order_double::sin_K3[A];
   ap_fixed<Wx, 1> sin_t5 = B_fourth_power*fourth_order_double::sin_K4[A];
   sin_result = Mx * (sin_t1 + sin_t2 + sin_t3 + sin_t4 + sin_t5);
    }
  };

  template<>
  struct value_list<float> {
 typedef float T;
 static const int g = 5;
 static const int p1 = 29;
 static const int alpha = 7;
 static const int beta1 = 0;
 static const int beta2 = 7;

 static const int W_dout = fp_struct<T>::SIG_BITS+1+g;
 static const int W_Mx = fp_struct<T>::SIG_BITS+1+g;

 template <int Wx, int Wr>
 static ap_ufixed<Wx, 1> sin_or_cos_approximation(bool do_cos,
              ap_uint<3> &k,
              ap_ufixed<Wx, 0> &x,
              ap_ufixed<Wr, 0> &Mx,
              ap_int<fp_struct<float>::EXP_BITS> &Ex){

   const bool swap_table[8] = {0,1,1,0,0,1,1,0};
_ssdm_SpecConstant(swap_table);
# 204 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"


#pragma HLS array_partition variable=&swap_table complete
#pragma HLS RESOURCE variable=&second_order_float::sin_cos_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::sin_cos_K1 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::sin_cos_K2 core=ROM_1P_LUTRAM

 ap_uint<alpha+1> A = x(x.wl()-x.iwl()-1,x.wl()-x.iwl()-alpha);
   ap_ufixed<Wx-alpha-beta1, -alpha> B = x;
   ap_ufixed<Wx-alpha-beta2, -alpha> B_trunc = B;
   ap_ufixed<Wx-2*alpha, -2*alpha> B_squared = B_trunc*B_trunc;

   bool sin_basis = do_cos? swap_table[k]:!swap_table[k];
   A[alpha] = sin_basis;

   ap_fixed<Wx, 1> t1 = second_order_float::sin_cos_K0[A];
   ap_fixed<Wx, 1> t2 = B*second_order_float::sin_cos_K1[A];
   ap_fixed<Wx, 1> t3 = B_squared*second_order_float::sin_cos_K2[A];
   ap_ufixed<Wx, 1> result = (t1+t2+t3) * Mx;

   return result;
 }

 template <int Wx, int Wr>
 static void sincos_approximation(ap_uint<3> &k,
          ap_ufixed<Wx, 0> &x,
          ap_ufixed<Wr, 0> &Mx,
          ap_int<fp_struct<float>::EXP_BITS> &Ex,
          ap_ufixed<Wr, 1> &sin_result,
          ap_ufixed<Wr, 1> &cos_result
          ) {
#pragma HLS RESOURCE variable=&second_order_float::cos_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::cos_K1 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::cos_K2 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::sin_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::sin_K1 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&second_order_float::sin_K2 core=ROM_1P_LUTRAM

 ap_uint<alpha> A = x(x.wl()-x.iwl()-1,
         x.wl()-x.iwl()-alpha);
   ap_ufixed<Wx-alpha-beta1, -alpha> B = x;
   ap_ufixed<Wx-alpha-beta2, -alpha> B_trunc = B;
   ap_ufixed<Wx-2*alpha, -2*alpha> B_squared = B_trunc*B_trunc;


   ap_ufixed<Wx, 1> cos_t1 = second_order_float::cos_K0[A];
   ap_ufixed<Wx, 1> cos_t2 = B*second_order_float::cos_K1[A];
   ap_ufixed<Wx, 1> cos_t3 = B_squared*second_order_float::cos_K2[A];
   cos_result = 1 - (cos_t1 + cos_t2 + cos_t3);

   ap_fixed<Wx, 1> sin_t1 = second_order_float::sin_K0[A];
   ap_fixed<Wx, 1> sin_t2 = B*second_order_float::sin_K1[A];
   ap_fixed<Wx, 1> sin_t3 = B_squared*second_order_float::sin_K2[A];
   sin_result = Mx * (sin_t1 + sin_t2 + sin_t3);
 }
  };

  struct sin_cos_fixed_16 {

 typedef half T;
 static const int g = 3;
 static const int p1 = 12;
 static const int alpha = 8;
 static const int beta1 = 4;

 template <int W_dout>
 static ap_ufixed<W_dout, 1> sin_or_cos_approximation(bool do_cos,
               ap_uint<2> &k,
               ap_ufixed<W_dout, 0> &x){

#pragma HLS RESOURCE variable=&first_order_fixed_16::sin_cos_K0 core=ROM_1P_LUTRAM
#pragma HLS RESOURCE variable=&first_order_fixed_16::sin_cos_K1 core=ROM_1P_LUTRAM

 ap_uint<alpha> A = x(x.wl()-x.iwl()-1,x.wl()-x.iwl()-alpha);

   const int BW = (W_dout-alpha-beta1)>1 ? W_dout-alpha-beta1 : 2;
   ap_ufixed<BW, -alpha> B = x;

   ap_fixed<W_dout, 1> t1 = first_order_fixed_16::sin_cos_K0[A];
   ap_fixed<W_dout, 1> t2 = B*first_order_fixed_16::sin_cos_K1[A];
   ap_ufixed<W_dout, 1> result = (t1+t2);

   return result;
 };
  };

  template<int W, int I>
  ap_fixed<W,2>
  sinf_or_cosf(ap_fixed<W,I> t_in, bool do_cos, bool do_pi,
      typename hls::enable_if<(W > 16) && (W <= 32), bool>::type dummy = true)
  {
 const int WO = W;
 const int g = 3;

 const bool swap_table[8] = {0,1,1,0,0,1,1,0};
_ssdm_SpecConstant(swap_table);
# 298 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

 const bool neg_sin_table[16] = {0,0,1,0,1,1,0,1, 1,0,1,1,0,1,0,0};
_ssdm_SpecConstant(neg_sin_table);
# 299 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

 const bool neg_cos_table[16] = {0,0,0,1,1,1,1,0, 0,1,1,1,1,0,0,0};
_ssdm_SpecConstant(neg_cos_table);
# 300 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"


#pragma HLS array_partition variable=&swap_table complete
#pragma HLS array_partition variable=&neg_sin_table complete
#pragma HLS array_partition variable=&neg_cos_table complete

 ap_uint<3> k;
 ap_ufixed<WO+1+g, 0> x;
 ap_ufixed<WO+1+g, 0> Mx;
 ap_int<fp_struct<float>::EXP_BITS> Ex = 0;

 int exactly_pi_over_4 = 0;
 bool is_negative = t_in[t_in.wl()-1];
 ap_ufixed<W, I> din = is_negative ? ap_fixed<W, I>(-t_in) : t_in;

 if(do_pi) {
   k = din*4;
   x = din*4;
   ap_ufixed<W, 1> Mx_bits_extended = din*4;



   exactly_pi_over_4 = (Mx_bits_extended == 1);
 } else {
   ap_ufixed<WO+1+g+3, 3> Wx = din * ap_ufixed<W+1+g,2>(4/3.14159265358979323846);
   k = Wx;
   x = Wx;
 }




 if(k[0] == 1) {
   x = 1-x;
 }
 Mx = x;

 bool cos_basis = do_cos?!swap_table[k]: swap_table[k];
 if(cos_basis) {


   Mx = ap_ufixed<value_list<float>::W_dout, 0, AP_RND, AP_SAT>(1);
   Ex = 0;
 }

 ap_ufixed<WO+1+g, 1> result = value_list<float>::sin_or_cos_approximation(do_cos,k,x,Mx,Ex);

 if(exactly_pi_over_4) {
   result = 0.7071067811865475244008443;
 }

 ap_uint<4> index = k;
 index[3] = is_negative;

 if(cos_basis ? neg_cos_table[index] : neg_sin_table[index]) {
   return -result;
 } else {
   return result;
 }
  }


  template<int W, int I>
  ap_fixed<W,2>
  sinf_or_cosf(ap_fixed<W,I> t_in, bool do_cos, bool do_pi,
      typename hls::enable_if<(W > 32) && (W <= 64), bool>::type dummy = true)
  {
 const int WO = W;
 const int g = 3;

 const bool swap_table[8] = {0,1,1,0,0,1,1,0};
_ssdm_SpecConstant(swap_table);
# 370 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

 const bool neg_sin_table[16] = {0,0,1,0,1,1,0,1, 1,0,1,1,0,1,0,0};
_ssdm_SpecConstant(neg_sin_table);
# 371 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

 const bool neg_cos_table[16] = {0,0,0,1,1,1,1,0, 0,1,1,1,1,0,0,0};
_ssdm_SpecConstant(neg_cos_table);
# 372 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

#pragma HLS array_partition variable=&swap_table complete
#pragma HLS array_partition variable=&neg_sin_table complete
#pragma HLS array_partition variable=&neg_cos_table complete

 ap_uint<3> k;
 ap_ufixed<WO+1+g, 0> x;
 ap_ufixed<WO+1+g, 0> Mx;
 ap_int<fp_struct<double>::EXP_BITS> Ex = 0;

 int exactly_pi_over_4 = 0;
 bool is_negative = t_in[t_in.wl()-1];
 ap_ufixed<W, I> din = is_negative ? ap_fixed<W, I>(-t_in) : t_in;

 if(do_pi) {
   k = din*4;
   x = din*4;
   ap_ufixed<W, 1> Mx_bits_extended = din*4;



   exactly_pi_over_4 = (Mx_bits_extended == 1);
 } else {
   ap_ufixed<WO+1+g+3, 3> Wx = din * ap_ufixed<W+1+g,2>(4/3.14159265358979323846);
   k = Wx;
   x = Wx;
 }




 if(k[0] == 1) {
   x = 1-x;
 }
 Mx = x;

 bool cos_basis = do_cos?!swap_table[k]: swap_table[k];
 if(cos_basis) {


   Mx = ap_ufixed<value_list<double>::W_dout, 0, AP_RND, AP_SAT>(1);
   Ex = 0;
 }

 ap_ufixed<WO+1+g, 1> result = value_list<double>::sin_or_cos_approximation(do_cos,k,x,Mx,Ex);

 if(exactly_pi_over_4) {
   result = 0.7071067811865475244008443;
 }

 ap_uint<4> index = k;
 index[3] = is_negative;

 if(cos_basis ? neg_cos_table[index] : neg_sin_table[index]) {
   return -result;
 } else {
   return result;
 }
  };


  template<int W, int I>
  ap_fixed<W,2>
  sinf_or_cosf(ap_fixed<W,I> t_in, bool do_cos, bool do_pi,
      typename hls::enable_if<W <= 16, bool>::type dummy = true)
  {
 const int WO = W;
 const int g = 4;

 const bool neg_sin_table[8] = {0,0,1,1, 1,1,0,0};
_ssdm_SpecConstant(neg_sin_table);
# 441 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

 const bool neg_cos_table[8] = {0,1,1,0, 0,1,1,0};
_ssdm_SpecConstant(neg_cos_table);
# 442 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

#pragma HLS array_partition variable=&neg_sin_table complete
#pragma HLS array_partition variable=&neg_cos_table complete

 ap_uint<2> k;
 ap_ufixed<WO+1+g, 0> x;

 bool is_negative = t_in[t_in.wl()-1];
 ap_ufixed<W, I> din = is_negative ? ap_fixed<W, I>(-t_in) : t_in;

 if(do_pi) {
   k = din*2;
   x = din*2;
   ap_ufixed<W, 1> Mx_bits_extended = din*2;
 }
 else {
   ap_ufixed<WO+1+g+2, 2> Wx = din * ap_ufixed<W+1+g,2>(2/3.14159265358979323846);
   k = Wx;
   x = Wx;
 }

 bool is_special_case = false;

 if((k[0] == 1) ^ !do_cos) {
   ap_ufixed<WO+1+g+1, 1> Wx = 1-x;
   x = Wx;
   is_special_case = (Wx[Wx.wl()-1] == 1);
 }

 ap_ufixed<WO+1+g, 1> result = sin_cos_fixed_16::sin_or_cos_approximation(do_cos,k,x);

 if(is_special_case) {
   ap_uint<3> index = k;
   index[2] = do_cos;
   const bool special_case_table[8] = {0,1,0,1,1,0,1,0};
_ssdm_SpecConstant(special_case_table);
# 476 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hotbm_apfixed.h"

   result(result.wl()-2,0) = 0;
   result[result.wl()-1] = special_case_table[index];
 }

 {
   ap_uint<3> index = k;
   index[2] = is_negative;

   if(do_cos ? neg_cos_table[index] : neg_sin_table[index]) {
  return -result;
   } else {
  return result;
   }
 }
  };

};
# 1019 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h" 1
# 41 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 42 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h" 2





namespace cordic_apfixed {

  extern const ap_ufixed<128,2> circ_table_arctan_128[128];
  extern const int hyperb_table_tau_128[128];
  extern const ap_ufixed<128,4> hyperb_table_arctanh_128[128];





  template<int W, int I, int Wo>
  void circ_range_redux( ap_ufixed<W,I> x,
                         ap_uint<2> &k,
                         ap_ufixed<Wo,1> &r) {

    ap_ufixed<(Wo+I),0> inv_pi2("0x0.A2F9836E4E43FC715BBF");
    ap_ufixed<Wo+1,1> pi2("1.5707963267948966192313216916397514420985846996876");
    ap_ufixed<Wo+I,I> prod = x * inv_pi2;
    ap_uint<I> kint = prod;

    k = kint;
    r = x - kint * pi2;
  };






  template<int W, int I, int MODE>
  void cordic_circ_apfixed( ap_fixed<W,I> &x,
                            ap_fixed<W,I> &y,
                            ap_fixed<W,I> &z) {

    const int Nmax = W;

    ap_fixed<W,I> tx, ty, tz;
    ap_fixed<W,I> x_s, y_s, z_s;
    ap_uint<1> d;

    for (int n=0; n<Nmax; n++){
#pragma HLS pipeline

 if(MODE == 1) {
        d = ~y[W-1];
      }
      else {
        d = z[W-1];
      }

      x_s = x >> n;
      y_s = y >> n;
      z_s = circ_table_arctan_128[n];

      if(d){
        tx = x + y_s;
        ty = y - x_s;
        tz = z + z_s;
      }
      else{
        tx = x - y_s;
        ty = y + x_s;
        tz = z - z_s;
      }

      x = tx;
      y = ty;
      z = tz;
# 126 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
    }
  };







  template<int W, int I, int MODE, int INTYPE>
  void doublecordic_apfixed( ap_fixed<W,I> &x,
                             ap_fixed<W,I> &y,
                             ap_fixed<W,I> &z,
                             ap_fixed<W,I> &t) {

    const int Nmax = W - I + 1;

    for (int n=0; n<Nmax; n++){

      if(INTYPE==64){
#pragma HLS pipeline II=5
 }
      else if(INTYPE==32){
#pragma HLS pipeline II=3
 }
      else if(INTYPE==16){
#pragma HLS pipeline II=1
 }
      else{
#pragma HLS pipeline II=4
 }

      ap_uint<1> d;
      if(MODE == 0) {
        if(y<=t){
          d = x[W-1];
        }
        else{
          d = ~x[W-1];
        }
      }
      else {
        if(x>=t){
          d = y[W-1];
        }
        else{
          d = ~y[W-1];
        }
      }

      ap_fixed<W,I> x_s = x >> (n-1);
      ap_fixed<W,I> y_s = y >> (n-1);
      ap_fixed<W,I> x_s2 = x_s >> (n+1);
      ap_fixed<W,I> y_s2 = y_s >> (n+1);

      x = x - x_s2;
      y = y - y_s2;
      if(d){
        x = x + y_s;
        y = y - x_s;
      }
      else{
        x = x - y_s;
        y = y + x_s;
      }


      ap_fixed<W,I> t_s;
      int n2 = (n << 1);
      if(n2<W){
        t_s = (t >> n2);
        t = t + t_s;
      }


      ap_fixed<W,I> ca = circ_table_arctan_128[n];
      ap_fixed<W,I> z_s = (ca << 1);
      ap_fixed<W,I> tz;
      if(d){
        tz = z - z_s;
      }
      else{
        tz = z + z_s;
      }
      z = tz;
# 221 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
    }
  };



  template<int W, int I>
  void generic_sincos(ap_fixed<W,I> in,
                      ap_fixed<W-I+2,2> & outsin, ap_fixed<W-I+2,2> & outcos){

    ap_uint<1> sign0 = (in > 0) ? 1: 0;


    ap_ufixed<W,I> inabs;
    if(sign0)
      inabs = in;
    else
      inabs = -in;


    const int Fr = (W - I) + I + 1;
    ap_uint<2> k;
    ap_ufixed<Fr,1> r;
    circ_range_redux(inabs, k, r);

    ap_fixed<W+2,3> x, y, z;

    const ap_fixed<W+2,3> K1("0x0.9B74EDA8435E47F277F7");
    x = K1;
    y = 0;

    if(k==1 or k==3){
      ap_ufixed<Fr,1> pi2("0x1.921FB54442D1846");

      z = pi2 - r;
    }
    else{
      z = r;
    }







    cordic_circ_apfixed<W+2,3,0>(x,y,z);







    if(k==0){
      outsin = y;
      outcos = x;
    }
    else if(k==1){
      outsin = y;
      outcos = -x;
    }
    else if(k==2){
      outsin = -y;
      outcos = -x;
    }
    else{
      outsin = -y;
      outcos = x;
    }

    if(sign0==0)
      outsin = -outsin;
  };


  template<int W, int I>
  ap_fixed<W,I> generic_tan(ap_fixed<W,I> x){

    const int Ix = I;
    const int Fx = (((W-I)>(I-1)) ? (W-I): (I-1)) + I;
    const int Wx = I + Fx;

    ap_fixed<Wx,Ix> xs = x;

    ap_fixed<Wx-Ix+2,2> outsin;
    ap_fixed<Wx-Ix+2,2> outcos;
    generic_sincos(xs, outsin, outcos);

    ap_fixed<W,I> out = outsin / outcos;


    if(I==1){
      if(out[W-1]==1){
        out[W-1] = 0;
        for(int i=0;i<W-1;i++){
#pragma HLS UNROLL
 out[i] = 1;
        }
      }
    }

    return out;
  };


  template<int W, int I>
  ap_ufixed<W,I> generic_tan(ap_ufixed<W,I> in) {
    ap_fixed<W+1,I+1> fin = in;
    ap_fixed<W+1,I+1> fout = generic_tan(fin);
    ap_ufixed<W,I> out = 0;
    if(fout[W]==0){
        out = fout;
    }
    return out;
  };


  template<int I>
  ap_int<I> generic_tan(ap_int<I> in) {
    ap_fixed<I,I> fin = in;
    ap_fixed<I,I> fout = generic_tan(fin);
    ap_int<I> out = fout;
    return out;
  };


  template<int I>
  ap_uint<I> generic_tan(ap_uint<I> in) {
    ap_fixed<I+1,I+1> fin = in;
    ap_fixed<I+1,I+1> fout = generic_tan(fin);
    ap_uint<I> out = 0;
    if(fout[I]==0){
        out = fout;
    }
    return out;
  };
# 366 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
  template<int W, int I, int Wo>
  void circ_range_redux_pi( ap_ufixed<W,I> x,
                             ap_uint<2> &k,
                             ap_ufixed<Wo,1> &r) {

    ap_ufixed<Wo+1,1> pi2("1.5707963267948966192313216916397514420985846996876");
    ap_ufixed<W+1,I+1> prod = x << 1;
    ap_uint<I+1> kint = prod;

    k = kint;
    r = (prod - kint) * pi2;
  };

  template<int W, int I>
  void generic_sincospi(ap_fixed<W,I> in,
                      ap_fixed<W-I+2,2> & outsin, ap_fixed<W-I+2,2> & outcos){

    ap_uint<1> sign0 = (in > 0) ? 1: 0;


    ap_ufixed<W,I> inabs;
    if(sign0)
      inabs = in;
    else
      inabs = -in;


    const int Fr = (W - I) + I + 1;
    ap_uint<2> k;
    ap_ufixed<Fr,1> r;
    circ_range_redux_pi(inabs, k, r);

    ap_fixed<W+2,3> x, y, z;

    const ap_fixed<W+2,3> K1("0x0.9B74EDA8435E47F277F7");
    x = K1;
    y = 0;

    if(k==1 or k==3){
      ap_ufixed<Fr,1> pi2("0x1.921FB54442D1846");
      z = pi2 - r;
    }
    else{
      z = r;
    }







    cordic_circ_apfixed<W+2,3,0>(x,y,z);







    if(k==0){
      outsin = y;
      outcos = x;
    }
    else if(k==1){
      outsin = y;
      outcos = -x;
    }
    else if(k==2){
      outsin = -y;
      outcos = -x;
    }
    else{
      outsin = -y;
      outcos = x;
    }

    if(sign0==0)
      outsin = -outsin;
  };


  template<int W, int I>
  ap_fixed<W,I> generic_tanpi(ap_fixed<W,I> x){

    const int Ix = I;
    const int Fx = (((W-I)>(I-1)) ? (W-I): (I-1)) + I;
    const int Wx = I + Fx;

    ap_fixed<Wx,Ix> xs = x;

    ap_fixed<Wx-Ix+2,2> outsin;
    ap_fixed<Wx-Ix+2,2> outcos;
    generic_sincospi(xs, outsin, outcos);

    ap_fixed<W,I> out;
    ap_int<1> bpoint=0;
    if(!outcos){
        bpoint = 1;
    }else{
        out = outsin / outcos;
    }




    if(I==1||bpoint){
      if( out[W-1]==1 ){
        out[W-1] = 0;
        for(int i=0;i<W-1;i++){
#pragma HLS UNROLL
 out[i] = 1;
        }
      }
    }

    return out;
  };


  template<int W, int I>
  ap_ufixed<W,I> generic_tanpi(ap_ufixed<W,I> in) {
    ap_fixed<W+1,I+1> fin = in;
    ap_fixed<W+1,I+1> fout = generic_tanpi(fin);
    ap_ufixed<W,I> out = 0;
    if(fout[W]==0){
        out = fout;
    }
    return out;
  };


  template<int I>
  ap_int<I> generic_tanpi(ap_int<I> in) {
    return ap_int<I>(0);
  };


  template<int I>
  ap_uint<I> generic_tanpi(ap_uint<I> in) {
    return ap_uint<I>(0);
  };


  template<int W, int I>
  ap_fixed<W,2> generic_atan(ap_fixed<W,I> in){

    ap_uint<1> sign0 = (in > 0) ? 1: 0;


    ap_fixed<W+1,I+1> inabs;
    if(sign0)
      inabs = in;
    else
      inabs = -in;


    ap_uint<1> sign1 = (inabs > 1) ? 1: 0;

    ap_fixed<W+2,3> x, y, z;
    if(sign1){
      x = 1;

      y = 1.0 / inabs.to_double();
      z = 0;
    }
    else{
      x = 1;
      y = inabs;
      z = 0;
    }
    cordic_circ_apfixed<W+2,3,1>(x,y,z);

    ap_fixed<W,2> out;
    if(sign1){
      const ap_fixed<W,2> pi2("0x1.921FB54442D1846");
      out = pi2 - z;
    }
    else{
      out = z;
    }


    if(sign0){
      return out;
    }
    else{
      return -out;
    }
  };


  template<int W, int I>
  ap_ufixed<W,2> generic_atan(ap_ufixed<W,I> in){
    ap_fixed<W+1,I+1> fin = in;
    ap_fixed<W+1,2> fout = generic_atan(fin);
    ap_ufixed<W,2> out = 0;
    if(fout[W]==0){
        out = fout;
    }
    return out;
  };


  template<int I>
  ap_int<2> generic_atan(ap_int<I> in){
    if(in<-1)
      return ap_int<2>(-1);
    else if(in>1)
      return ap_int<2>(1);
    else
      return ap_int<2>(0);
  };


  template<int I>
  ap_uint<1> generic_atan(ap_uint<I> in){
    if(in>1)
      return ap_uint<1>(1);
    else
      return ap_uint<1>(0);
  };


  template<int W, int I>
  ap_fixed<W,3> generic_atan2(ap_fixed<W,I> in1,
                              ap_fixed<W,I> in2){

    const ap_fixed<W+1,3> pi("0x3.243F6A8885A308D3");
    const ap_fixed<W+2,3> pi2("0x1.921FB54442D1846");
    const ap_fixed<W+1,3> pi4("0x0.C90FDAA22168C23");
    const ap_fixed<W+1,3> pi3_("-0x2.5B2F8FE6643A469");

    ap_uint<2> signin1 = (in1 > 0) ? 2: (in1==0) ? 1: 0;
    ap_uint<2> signin2 = (in2 > 0) ? 2: (in2==0) ? 1: 0;

    ap_fixed<W,3> out;



    if(signin1==1 and signin2==2){
      out = 0;
      return out;
    }
    else if(signin1==1 and signin2==0){
      out = pi;
      return out;
    }
    else if(signin1==2 and signin2==1){
      out = pi2;
      return out;
    }
    else if(signin1==0 and signin2==1){
      out = -pi2;
      return out;
    }
    else if(in1==in2){
      if(signin1==2){
        out = pi4;
        return out;
      }
      else if(signin1==1){
        out = 0;
        return out;
      }
      else{
        out = pi3_;
        return out;
      }
    }



    ap_fixed<W+1,I+1> in1abs;
    if(signin1==0)
      in1abs = -in1;
    else
      in1abs = in1;

    ap_fixed<W+1,I+1> in2abs;
    if(signin2==0)
      in2abs = -in2;
    else
      in2abs = in2;

    ap_fixed<W+1,2> in1abs_sft;
    ap_fixed<W+1,2> in2abs_sft;
    for(int i=0;i<W+1;i++){
#pragma HLS UNROLL
 in1abs_sft[i] = in1abs[i];
    }
    for(int i=0;i<W+1;i++){
#pragma HLS UNROLL
 in2abs_sft[i] = in2abs[i];
    }

    ap_fixed<W+7,3> x, y, z;
    if(in1abs > in2abs){
      x = in1abs_sft;
      y = in2abs_sft;
      z = 0;
    }
    else{
      x = in2abs_sft;
      y = in1abs_sft;
      z = 0;
    }
    cordic_circ_apfixed<W+7,3,1>(x,y,z);

    if(in1abs > in2abs){
      z = pi2 - z;
    }

    if(signin2==0 and signin1==2){
      out = pi - z;
    }
    else if(signin2==0 and signin1==0){
      out = z - pi;
    }
    else if(signin2==2 and signin1==0){
      out = -z;
    }
    else{
      out = z;
    }

    return out;
  };


  template<int W, int I>
  ap_ufixed<W,3> generic_atan2(ap_ufixed<W,I> in1,
                               ap_ufixed<W,I> in2){
    ap_fixed<W+1,I+1> fin1 = in1;
    ap_fixed<W+1,I+1> fin2 = in2;
    ap_fixed<W+1,3> fout = generic_atan2(fin1, fin2);
    ap_ufixed<W,3> out = 0;
    if(fout[W]==0){
        out = fout;
    }
    return out;
  }


  template<int I>
  ap_int<3> generic_atan2(ap_int<I> in1,
                          ap_int<I> in2){
    ap_fixed<I+1,I+1> fin1 = in1;
    ap_fixed<I+1,I+1> fin2 = in2;
    ap_fixed<I+1,3> fout = generic_atan2(fin1, fin2);
    ap_int<3> out = fout;
    return out;
  }


  template<int I>
  ap_uint<2> generic_atan2(ap_uint<I> in1,
                           ap_uint<I> in2){
    ap_fixed<I+1,I+1> fin1 = in1;
    ap_fixed<I+1,I+1> fin2 = in2;
    ap_fixed<I+1,3> fout = generic_atan2(fin1, fin2);
    ap_uint<2> out = 0;
    if(fout[I]==0){
        out = fout;
    }
    return out;
  }





  template<int W, int I, int Wo>
  void hyperb_range_redux( ap_ufixed<W,I> x,
                           ap_uint<I+1> &k,
                           ap_ufixed<Wo,0> &r) {

    ap_ufixed<(Wo+I)+1,1> inv_ln2("0x1.71547652b82fe1777d0ffda0d23a7d11d6aef551cp0");
    ap_ufixed<Wo,0> ln2("0xb.17217f7d1cf79abc9e3b39803f2f6af40f343267p-4");
    ap_ufixed<Wo+(I+1),I+1> prod = x * inv_ln2;
    ap_ufixed<Wo,0> prod_dec = prod;
    k = prod;
    r = prod_dec * ln2;
  };






  template<int W, int I, int MODE>
  void cordic_hyperb_apfixed( ap_fixed<W,I> &x,
                              ap_fixed<W,I> &y,
                              ap_fixed<W,I> &z) {

    const int Nmax = W + 1;

    ap_fixed<W,I> tx, ty, tz;
    ap_fixed<W,I> x_s, y_s, z_s;
    ap_uint<1> d;

    for (int n=0; n<Nmax; n++){

      int k = hyperb_table_tau_128[n];

      if(MODE == 1) {
        d = ~y[W-1];
      }
      else {
        d = z[W-1];
      }

      x_s = x >> k;
      y_s = y >> k;
      z_s = hyperb_table_arctanh_128[k-1];

      if(d){
        tx = x - y_s;
        ty = y - x_s;
        tz = z + z_s;
      }
      else{
        tx = x + y_s;
        ty = y + x_s;
        tz = z - z_s;
      }

      x = tx;
      y = ty;
      z = tz;
# 804 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
    }
  }


  template <int W, int I>
  void sinh_cosh_range_redux_cordic( ap_fixed<W,I> in,
                                     ap_fixed<W,I> &s_out,
                                     ap_fixed<W,I> &c_out){

    ap_uint<1> sign0 = in[W-1];

    ap_ufixed<W,I> inabs;
    if(sign0 == 0)
      inabs = in;
    else
      inabs = -in;

    const int Fr = (W - I) + I;

    if(in==0){
      s_out = 0;
      c_out = 1;
      return;
    }


    ap_uint<I+1> k;
    ap_ufixed<Fr,0> r;
    hyperb_range_redux(inabs, k, r);

    ap_fixed<Fr+2,2> x("1.20749706776307212887772");
    ap_fixed<Fr+2,2> y(0);
    ap_fixed<Fr+2,2> z(r);




    cordic_hyperb_apfixed<Fr+2,2,0>(x,y,z);



    ap_fixed<Fr+(I+2),I+2> er, e_r;
    er = x + y;
    e_r = x - y;



    er <<= (k-1);
    e_r >>= (k+1);



    ap_fixed<W+1,I+1> s_out_tmp = er - e_r;
    ap_fixed<W+1,I+1> c_out_tmp = er + e_r;




    if(s_out_tmp[W-1]==1){
      s_out_tmp[W-1] = 0;
      for(int i=0;i<W-1;i++){
#pragma HLS UNROLL
 s_out_tmp[i] = 1;
      }
    }


    if(sign0 == 0){
      s_out = s_out_tmp;
    }
    else{
      s_out = -s_out_tmp;
    }




    if(c_out_tmp[W-1]==1){
      c_out[W-1] = 0;
      for(int i=0;i<W-1;i++){
#pragma HLS UNROLL
 c_out[i] = 1;
      }
    }
    else{
      c_out = c_out_tmp;
    }
  };

    template<int W, int I>
    void tanh_range_redux_cordic(ap_fixed<W,I> in, ap_fixed<W,I> &tan_out) {

        ap_uint<1> sign0 = in[W-1];

        ap_ufixed<W,I> inabs;
        if(sign0 == 0)
            inabs = in;
        else
            inabs = -in;

        const int Fr = (W - I) + I;

        if(in==0){
            tan_out = 0;
            return;
        }

        ap_uint<I+1> k;
        ap_ufixed<Fr,0> r;
        hyperb_range_redux(inabs, k, r);

        ap_fixed<Fr+2,2> x("1.20749706776307212887772");
        ap_fixed<Fr+2,2> y(0);
        ap_fixed<Fr+2,2> z(r);

        cordic_hyperb_apfixed<Fr+2,2,0>(x,y,z);
        ap_fixed<Fr+(I+2),I+2> er, e_r;
        er = x + y;
        e_r = x - y;
        er <<= k;
        e_r >>= k;
        tan_out = (er/(er+e_r))*2 - 1;
    }

    template<int W, int I>
    ap_fixed<W,I> generic_tanh(ap_fixed<W,I> in) {
        ap_fixed<W,I> tan_out;
        tanh_range_redux_cordic(in, tan_out);
        return tan_out;
    }

    template<int W, int I>
    ap_ufixed<W,I> generic_tanh(ap_ufixed<W,I> in) {
        ap_fixed<W+1,I+1> fin = in;
        ap_fixed<W+1,I+1> fout = generic_tanh(fin);
        ap_ufixed<W,I> tan_out = fout;
        return tan_out;
    }

    template<int I>
    ap_int<I> generic_tanh(ap_int<I> in) {
        ap_fixed<I,I> fin = in;
        ap_fixed<I,I> fout = generic_tanh(fin);
        ap_int<I> tan_out = fout;
        return tan_out;
    }

    template<int I>
    ap_uint<I> generic_tanh(ap_uint<I> in) {
        ap_fixed<I+1,I+1> fin = in;
        ap_fixed<I+1,I+1> fout = generic_tanh(fin);
        ap_uint<I> tan_out = fout;
        return tan_out;
    }

  template<int W, int I>
  ap_fixed<W,I> generic_sinh(ap_fixed<W,I> in) {
    ap_fixed<W,I> s_out, c_out;
    sinh_cosh_range_redux_cordic(in,s_out,c_out);
    return s_out;
  }


  template<int W, int I>
  ap_ufixed<W,I> generic_sinh(ap_ufixed<W,I> in) {
    ap_fixed<W+1,I+1> fin = in;
    ap_fixed<W+1,I+1> fout = generic_sinh(fin);
    ap_ufixed<W,I> out = 0;
    if(fout[W]==0){
        out = fout;
    }
    return out;
  };


  template<int I>
  ap_int<I> generic_sinh(ap_int<I> in) {
    ap_fixed<I,I> fin = in;
    ap_fixed<I,I> fout = generic_sinh(fin);
    ap_int<I> out = fout;
    return out;
  };


  template<int I>
  ap_uint<I> generic_sinh(ap_uint<I> in) {
    ap_fixed<I+1,I+1> fin = in;
    ap_fixed<I+1,I+1> fout = generic_sinh(fin);
    ap_uint<I> out = 0;
    if(fout[I]==0){
        out = fout;
    }
    return out;
  };


  template<int W, int I>
  ap_fixed<W, I> generic_cosh(ap_fixed<W,I> in) {
    ap_fixed<W,I> s_out, c_out;
    sinh_cosh_range_redux_cordic(in,s_out,c_out);
    return c_out;
  }


  template<int W, int I>
  ap_ufixed<W,I> generic_cosh(ap_ufixed<W,I> in) {
    ap_fixed<W+1,I+1> fin = in;
    ap_fixed<W+1,I+1> fout = generic_cosh(fin);
    ap_ufixed<W,I> out = 0;
    if(fout[W]==0){
        out = fout;
    }
    return out;
  };


  template<int I>
  ap_int<I> generic_cosh(ap_int<I> in) {
    ap_fixed<I,I> fin = in;
    ap_fixed<I,I> fout = generic_cosh(fin);
    ap_int<I> out = fout;
    return out;
  };


  template<int I>
  ap_uint<I> generic_cosh(ap_uint<I> in) {
    ap_fixed<I+1,I+1> fin = in;
    ap_fixed<I+1,I+1> fout = generic_cosh(fin);
    ap_uint<I> out = 0;
    if(fout[I]==0){
        out = fout;
    }
    return out;
  };



  template<int W, int I>
  ap_fixed<W-I+3,3> generic_asin(ap_fixed<W,I> in){

    const int I0 = 3;
    const int W0 = W - I + I0 + 6;

    const ap_fixed<W+1,I+1> cst1("0x1");
    const ap_fixed<W,I> cst0("0x0");
    const ap_fixed<W,I> cst_1("-0x1");
# 1062 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
    ap_fixed<W-I+3,3> out;


    if(in==cst1){
      out = ap_fixed<W-I+3,3>("0x1.921FB54442D1846");
      return out;
    }
    else if(in==cst_1){
      out = ap_fixed<W-I+3,3>("-0x1.921FB54442D1846");
      return out;
    }
    else if(in==cst0){
      out = ap_fixed<W-I+3,3>("0x0");
      return out;
    }


    ap_uint<1> sign0 = (in >= 0) ? 1: 0;


    ap_fixed<W,I> inabs;
    if(sign0)
      inabs = in;
    else
      inabs = -in;

    ap_fixed<W,I> absout;


    if(inabs[W-I-1]==0){
      ap_fixed<W0,I0> x("0x1");
      ap_fixed<W0,I0> y("0x0");
      ap_fixed<W0,I0> z("0x0");
      ap_fixed<W0,I0> t = inabs;
      doublecordic_apfixed<W0,I0,0,0>(x,y,z,t);
      absout = z;
    }
    else{
      const int F1 = W - I;
      const int W1 = F1 + F1 + I;
      ap_fixed<W1,I> one("0x1");
      ap_fixed<W1,I> onex = one - inabs * inabs;
      ap_fixed<W1,I> sqrtonex = ::__builtin_sqrt(onex.to_double());
      ap_fixed<W1,I> xsqrtonex = inabs / (one + sqrtonex);
      absout = generic_atan(xsqrtonex) << 1;
    }


    if(sign0)
      out = absout;
    else
      out = -absout;

    return out;
  }



  template<int W, int I>
  ap_fixed<W-I+3,3> generic_acos(ap_fixed<W,I> in){

    const int I0 = 3;
    const int W0 = W - I + I0;
# 1140 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"
    const ap_fixed<W0,I0> pi2("0x1.921FB54442D1846");
    ap_fixed<W0,I0> out = pi2 - generic_asin(in);

    if(out[W0-1]==1){
      out = -out;
    }

    return out;
  }

  template<int W, int I>
  void cordic_semi_recovery_asinh(ap_fixed<W,I> in_top, ap_fixed<W,I>& out) {

    if(in_top == 0) {
      out = 0;
      return;
    }

    ap_fixed<W,I> in;
    if(in_top >= 0) {
      in = in_top;
    }
    else {
      in = -in_top;
    }

    int m = in.countLeadingZeros();
    int k = I-m;

    if(W-I-2 >= k) {

      ap_fixed<W,I> boundk = 1.0;
      ap_fixed<W,I> bound_k_2 = 1.0;
      boundk <<= k;
      bound_k_2 >>= k;
      bound_k_2 >>= 2;

      if(in >= (boundk - bound_k_2)) {
        k+=1;
      }

    }

    if(k < 0) {
      k = 0;
    }

    const int Nmax = W - I + 1;
    int tau;
    ap_fixed<W,I> x_r(1);
    ap_fixed<W,I> y_r(0);
    ap_fixed<W,I> z_r(0);
    ap_fixed<W,I> x1_tau, x_2tau, y1_tau, y_2tau, z_s;
    ap_fixed<W,I> xk, x_k, yk, y_k;
    ap_fixed<W,I> y_semi_recovery;
    ap_fixed<W,I> in_s;

    for(int i=0; i<Nmax; i++) {

      xk = x_r << k;
      x_k = x_r >> k;
      yk = y_r << k;
      y_k = y_r >> k;

      y_semi_recovery = (xk - x_k + yk + y_k) >> 1;

      tau = hyperb_table_tau_128[i+1];
      z_s = hyperb_table_arctanh_128[tau-1] << 1;

      x1_tau = ((x_r >> tau) << 1);
      x_2tau = (x_r >> (tau << 1));
      y1_tau = ((y_r >> tau) << 1);
      y_2tau = (y_r >> (tau << 1));

      if(y_semi_recovery <= in) {
        x_r += x_2tau + y1_tau;
        y_r += y_2tau + x1_tau;
        z_r += z_s;
      }
      else {
        x_r += x_2tau - y1_tau;
        y_r += y_2tau - x1_tau;
        z_r -= z_s;
      }

      in_s = in >> (tau << 1);
      in -= in_s;
    }

    ap_ufixed<W,0> ln2("0xb.17217f7d1cf79abc9e3b39803f2f6af40f343267p-4");
    if(in_top >= 0) {
      out = z_r + k*ln2;
    }
    else {
      out = -z_r - k*ln2;
    }
  }

  template<int W, int I>
  void cordic_semi_recovery_acosh(ap_fixed<W,I> in, ap_fixed<W,I>& out) {






    if(in == 1) {
      out = 0;
      return;
    }

    int m = in.countLeadingZeros();
    int k = I-m;


    ap_fixed<W,I> boundk = 1.0;
    ap_fixed<W,I> bound_k_1 = 1.0;
    boundk <<= k;
    boundk >>= 1;
    bound_k_1 >>= k;
    bound_k_1 >>= 1;

      if(in < (boundk - bound_k_1)) {
        k-=1;
      }

    if(k < 0) {
      k = 0;
    }

    const int Nmax = W - I + 1;
    int tau;
    ap_fixed<W,I> x_r(1);
    ap_fixed<W,I> y_r(0);
    ap_fixed<W,I> z_r(0);
    ap_fixed<W,I> x1_tau, x_2tau, y1_tau, y_2tau, z_s;
    ap_fixed<W,I> xk, x_k, yk, y_k;
    ap_fixed<W,I> x_semi_recovery;
    ap_fixed<W,I> in_s;

    for(int i=0; i<Nmax; i++) {

      xk = x_r << k;
      x_k = x_r >> k;
      yk = y_r << k;
      y_k = y_r >> k;

      x_semi_recovery = (xk + x_k + yk - y_k) >> 1;

      tau = hyperb_table_tau_128[i+1];
      z_s = hyperb_table_arctanh_128[tau-1] << 1;

      x1_tau = ((x_r >> tau) << 1);
      x_2tau = (x_r >> (tau << 1));
      y1_tau = ((y_r >> tau) << 1);
      y_2tau = (y_r >> (tau << 1));

      if(x_semi_recovery <= in) {
        x_r += x_2tau + y1_tau;
        y_r += y_2tau + x1_tau;
        z_r += z_s;
      }
      else {
        x_r += x_2tau - y1_tau;
        y_r += y_2tau - x1_tau;
        z_r -= z_s;
      }

      in_s = in >> (tau << 1);
      in -= in_s;
    }

    ap_ufixed<W,0> ln2("0xb.17217f7d1cf79abc9e3b39803f2f6af40f343267p-4");
    out = z_r + k*ln2;
  }


  template<int W, int I>
  ap_fixed<W,I> generic_asinh(ap_fixed<W,I> in) {
    ap_fixed<W+1,I+1> input, output; input = in;
    cordic_semi_recovery_asinh(input, output);
    return output;
  }


  template<int W, int I>
  ap_ufixed<W,I> generic_asinh(ap_ufixed<W,I> in) {
    ap_fixed<W+1,I+1> input, output;
    input = in;
    cordic_semi_recovery_asinh(input, output);
    return output;
  };


  template<int I>
  ap_int<I> generic_asinh(ap_int<I> in) {
    ap_fixed<I+1,I+1> input, output;
    input = in;
    cordic_semi_recovery_asinh(input, output);
    return output;
  };


  template<int I>
  ap_uint<I> generic_asinh(ap_uint<I> in) {
    ap_fixed<I+1,I+1> input, output;
    input = in;
    cordic_semi_recovery_asinh(input, output);
    return output;
  };


  template<int W, int I>
  ap_fixed<W,I> generic_acosh(ap_fixed<W,I> in) {
    ap_fixed<W+1,I+1> input, output;
    input = in;
    cordic_semi_recovery_acosh(input, output);
    return output;
  }


  template<int W, int I>
  ap_ufixed<W,I> generic_acosh(ap_ufixed<W,I> in) {
    ap_fixed<W+1,I+1> input, output;
    input = in;
    cordic_semi_recovery_acosh(input, output);
    return output;
  };


  template<int I>
  ap_int<I> generic_acosh(ap_int<I> in) {
    ap_fixed<I,I> input, output;
    input = in;
    cordic_semi_recovery_acosh(input, output);
    return output;
  };


  template<int I>
  ap_uint<I> generic_acosh(ap_uint<I> in) {
    ap_fixed<I+1,I+1> input, output;
    input = in;
    cordic_semi_recovery_acosh(input, output);
    return output;
  };


  template<int W, int I>
  ap_fixed<W,I> generic_asinpi(ap_fixed<W,I> x) {
      const static int we = I < 3? 3: I;
_ssdm_SpecConstant(&we);
# 1390 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"

      ap_fixed<W-I+we, we> xi = x;
      ap_fixed<W-I+3,3> asin_x = generic_asin(xi);






      static const int F = W - I;
_ssdm_SpecConstant(&F);
# 1399 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"






      static const int wf = F < 1? 0: F - 1;
_ssdm_SpecConstant(&wf);
# 1405 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"

      ap_ufixed<2+wf,2> pi = 3.14159265358979323846;





      ap_fixed<W,I> r = asin_x/pi;





      return r;
  }
  template<int W, int I>
  ap_ufixed<W,I> generic_asinpi(ap_ufixed<W,I> x) {
      ap_fixed<W+1,I+1> xi = x;
      return generic_asinpi(xi);
  }
  template<int I>
  ap_int<I> generic_asinpi(ap_int<I> x) {

      if(x==-1){

        return -1;
      }else if(x==0){
        return 0;
      }else if(x==1){

        return 1;
      }else{




        return 0;
      };
  }
  template<int I>
  ap_uint<I> generic_asinpi(ap_uint<I> x) {

      if(x==0){
        return 0;

      } else if(x==1){
        return 1;
      } else{




        return 0;
      };
  }

  template<int W, int I>
  ap_fixed<W,I> generic_acospi(ap_fixed<W,I> x) {





      const static int we = I < 3? 3 : I;
_ssdm_SpecConstant(&we);
# 1468 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"

      ap_fixed<W-I+we,we> xi = x;
      ap_fixed<W-I+3,3> acos_x = generic_acos(xi);





      static const int F = W - I;
_ssdm_SpecConstant(&F);
# 1476 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"






      static const int wf = F;
_ssdm_SpecConstant(&wf);
# 1482 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"

      ap_ufixed<2+wf,2> pi = 3.14159265358979323846;





      ap_fixed<W,I> r = acos_x/pi;





      return r;
  }
  template<int W, int I>
  ap_ufixed<W,I> generic_acospi(ap_ufixed<W,I> x) {
      ap_fixed<W+1,I+1> xi = x;
      return generic_acospi(xi);
  }
  template<int I>
  ap_int<I> generic_acospi(ap_int<I> x) {

      if(x==-1){
        return 1;

      } else if(x==0){
        return 1;
      } else if(x==1){
        return 0;
      } else{




        return 0;
      };
  }
  template<int I>
  ap_uint<I> generic_acospi(ap_uint<I> x) {

      if(x==0){
        return 1;
      } else if(x==1){
        return 0;
      } else{




        return 0;
      };
  }

  template<int W, int I>
  ap_fixed<W,I> generic_atanpi(ap_fixed<W,I> x) {
      ap_fixed<W-I+3,3> atan_x = generic_atan(x);





      static const int F = W - I;
_ssdm_SpecConstant(&F);
# 1544 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"






      static const int wf = F < 1? 0: F - 1;
_ssdm_SpecConstant(&wf);
# 1550 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"

      ap_ufixed<2+wf,2> pi = 3.14159265358979323846;
      ap_fixed<W,I> r = atan_x/pi;






      return r;
  }
  template<int W, int I>
  ap_ufixed<W,I> generic_atanpi(ap_ufixed<W,I> x) {
      ap_fixed<W+1,I+1> xi = x;
      return generic_atanpi(xi);
  }
  template<int I>
  ap_int<I> generic_atanpi(ap_int<I> x) {

      return 0;
  }
  template<int I>
  ap_uint<I> generic_atanpi(ap_uint<I> x) {

      return 0;
  }

  template<int W, int I>
  ap_fixed<W,I> generic_atan2pi(ap_fixed<W,I> y, ap_fixed<W, I> x) {
      ap_fixed<W-I+3,3> atan2_x = generic_atan2(y, x);
      static const int F = W - I;
_ssdm_SpecConstant(&F);
# 1580 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"






      static const int wf = F;
_ssdm_SpecConstant(&wf);
# 1586 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cordic_apfixed.h"

      ap_ufixed<2+wf,2> pi = 3.14159265358979323846;
      ap_fixed<W,I> r = atan2_x/pi;
      return r;
  }
  template<int W, int I>
  ap_ufixed<W,I> generic_atan2pi(ap_ufixed<W,I> y, ap_ufixed<W,I> x) {
      ap_fixed<W+1,I+1> xi = x;
      ap_fixed<W+1,I+1> yi = y;
      return generic_atan2pi(yi, xi);
  }
  template<int I>
  ap_int<I> generic_atan2pi(ap_int<I> y, ap_int<I> x) {

      bool x_sig = x[I-1];
      bool y_sig = y[I-1];
      if(y==0 && x==0) return 0;


      else if(y_sig && x==0) return -1;

      else if(!y_sig && x==0) return 1;

      else if(!y_sig && x_sig) return 1;

      else if(y_sig && x_sig) return -1;
      else return 0;
  }
  template<int I>
  ap_uint<I> generic_atan2pi(ap_uint<I> y, ap_uint<I> x) {


      if(y!=0 && x==0) return 1;
      else return 0;
  }

}
# 1020 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"
namespace exp_reduce {

template<int W_, int I_>
ap_fixed<W_,I_> exp(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline

 int F_ = W_ - I_;
    if (I_>33) return 0;
    else if (F_>32) return 0;




    int I_s_;
    int M_ = (I_-1>F_) ? (I_-1) : F_;
    if (M_==1) I_s_ = 1;
    else if (M_==2) I_s_ = 2;
    else if (M_<6) I_s_ = 3;
    else if (M_<12) I_s_ = 4;
    else if (M_<24) I_s_ = 5;
    else I_s_ = 6;

    ap_fixed<W_,I_> r;
    if (I_s_==1) {
        ap_fixed<3,2> x_l = x;
        ap_ufixed<2,1> y = 0;
        if (x_l[2]!=x_l[1]) {
            if (!x_l[2]) y = "0x1.8p0";
        } else {
            if (!x_l[2]) y[1] = 1;
            if (x_l[2]|x_l[0]) y[0] = 1;
        }
        if (I_<2) {
            if (y[1]) {
                y[1] = 0;
                y[0] = 1;
            }
        }
        r = y;
    } else if (I_s_==2) {
        ap_fixed<5,3> x_l = x;
        ap_ufixed<4,2> y = 0;
        ap_fixed<2,2> x_l_int;
        x_l_int(1,0) = x_l(3,2);
        ap_ufixed<2,0> x_l_fract;
        x_l_fract(1,0) = x_l(1,0);

        if ((x_l[4]!=x_l[3])||((x_l_int==1)&&(x_l_fract>=ap_ufixed<2,0>("0x0.8p0")))) {
            if (!x_l[4]) y = "0x3.cp0";
        } else {
            if (!x_l[4]&((x_l[1]&x_l[0])|x_l[2])) y[3] = 1;
            if (!x_l[4]&((!x_l[2]&!x_l[0])|(!x_l[1]&x_l[0]))) y[2] = 1;
            if ((!x_l[4]&x_l[1]&!x_l[0])|(!x_l[4]&x_l[2])|(x_l[2]&x_l[0])|(x_l[2]&x_l[1])) y[1] = 1;
            if ((!x_l[2]&!x_l[1]&x_l[0])|(!x_l[2]&x_l[1]&!x_l[0])|(x_l[2]&!x_l[1]&!x_l[0])|(x_l[2]&x_l[1]&x_l[0])|(x_l[4]&!x_l[3])) y[0] = 1;
        }
        if (I_<3) {
            bool overf = 0;
#pragma unroll
 for (int j = 3; j >= I_+1; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 3; j >= I_+1; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_; j >= 0; j--)
                    y[j] = 1;
            }
        }
        r = y;
    } else if (I_s_==3) {
        ap_fixed<11,6> x_l = x;
        ap_ufixed<10,5> y = 0;
        ap_fixed<3,3> x_l_int;
        x_l_int(2,0) = x_l(7,5);
        ap_ufixed<5,0> x_l_fract;
        x_l_fract(4,0) = x_l(4,0);

        if ((x_l[10]!=x_l[9])||(x_l[10]!=x_l[8])||(x_l[10]!=x_l[7])||((x_l_int==3)&&(x_l_fract>ap_fixed<5,0>("0x0.7p0")))) {
            if (!x_l[10]) y = "0x1f.f8p0";
        } else {





            ap_uint<4> x_msb_ind;
            x_msb_ind[3] = x_l[10];
            x_msb_ind(2,0) = x_l(6,4);
            ap_uint<4> x_lsb_ind;
            x_lsb_ind(3,0) = x_l(3,0);
            ap_ufixed<4,-1> x_lsb = x_l;
# 151 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"
            const static ap_ufixed<12,0> exp_x_lsb_m_1_table[16] = {
                "0x0.0p0", "0x0.082p0", "0x0.108p0", "0x0.193p0", "0x0.221p0", "0x0.2b5p0", "0x0.34dp0", "0x0.3eap0",
                "0x0.48bp0", "0x0.532p0", "0x0.5dfp0", "0x0.69p0", "0x0.748p0", "0x0.805p0", "0x0.8c8p0", "0x0.991p0",
            };
_ssdm_SpecConstant(exp_x_lsb_m_1_table);
# 151 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<12, 0> exp_x_lsb_m_1 = exp_x_lsb_m_1_table[x_lsb_ind];

            const static ap_ufixed<12,5> exp_x_msb_table[16] = {
                "0x1.0p0", "0x1.a6p0", "0x2.b8p0", "0x4.7cp0", "0x7.64p0", "0xc.2ep0", "0x14.16p0", "0x21.1ep0",
                "0x0.04p0", "0x0.08p0", "0x0.0cp0", "0x0.16p0", "0x0.22p0", "0x0.3ap0", "0x0.5ep0", "0x0.9cp0",
            };
_ssdm_SpecConstant(exp_x_msb_table);
# 157 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<12,5> exp_x_msb = exp_x_msb_table[x_msb_ind];
            ap_ufixed<24,5> y_lo = exp_x_msb * exp_x_lsb_m_1;
            ap_ufixed<12,5> y_lo_s = y_lo;
            ap_ufixed<12,5> y_l = y_lo_s + exp_x_msb;
            y = y_l;
        }
        if (I_<6) {
            bool overf = 0;
#pragma unroll
 for (int j = 9; j >= I_+4; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 9; j >= I_+4; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+3; j >= 0; j--)
                    y[j] = 1;
            }
        }
        r = y;
    } else if (I_s_==4) {
        ap_fixed<23,12> x_l = x;
        ap_ufixed<22,11> y = 0;
        ap_fixed<4,4> x_l_int;
        x_l_int(3,0) = x_l(14,11);
        ap_ufixed<11,0> x_l_fract;
        x_l_fract(10,0) = x_l(10,0);
        bool overf = 0;
#pragma unroll
 for (int j = 14; j < 22; j++)
            if (x_l[22]!=x_l[j])
                overf = 1;

        if (overf||((x_l_int==7)&&(x_l_fract>ap_ufixed<11,0>("0x0.ap0")))) {
            if (!x_l[22]) {
#pragma unroll
 for (int j = 0; j < 22; j++) y[j] = 1;
            }
        } else {
            ap_uint<5> x_msb_ind_1;
            x_msb_ind_1[4] = x_l[22];
            x_msb_ind_1(3,0) = x_l(13,10);
            ap_uint<5> x_msb_ind_2;
            x_msb_ind_2(4,0) = x_l(9,5);
            ap_ufixed<5,-1> x_msb_2 = x_l;
            ap_uint<5> x_lsb_ind;
            x_lsb_ind(4,0) = x_l(4,0);


            const static ap_ufixed<11,-13> f_x_lsb_table[32] = {
                "0x0.0p0", "0x0.000002p0", "0x0.000008p0", "0x0.000012p0",
                "0x0.00002p0", "0x0.000032p0", "0x0.000048p0", "0x0.000062p0",
                "0x0.00008p0", "0x0.0000a2p0", "0x0.0000c9p0", "0x0.0000f3p0",
                "0x0.000121p0", "0x0.000153p0", "0x0.000189p0", "0x0.0001c3p0",
                "0x0.000202p0", "0x0.000244p0", "0x0.00028ap0", "0x0.0002d4p0",
                "0x0.000323p0", "0x0.000375p0", "0x0.0003ccp0", "0x0.000426p0",
                "0x0.000485p0", "0x0.0004e7p0", "0x0.00054ep0", "0x0.0005b9p0",
                "0x0.000627p0", "0x0.00069ap0", "0x0.000711p0", "0x0.00078cp0",
            };
_ssdm_SpecConstant(f_x_lsb_table);
# 213 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<11,-13> f_x_lsb = f_x_lsb_table[x_lsb_ind];
            ap_ufixed<18, -6> exp_x_lsb_m_1 = 0;
            exp_x_lsb_m_1(17,13) = x_lsb_ind(4,0);
            exp_x_lsb_m_1(10,0) = f_x_lsb(10,0);

            const static ap_ufixed<25,0> exp_x_msb_2_m_1_table[32] = {
                "0x0.0000000p0", "0x0.04080a8p0", "0x0.0820560p0", "0x0.0c49238p0",
                "0x0.1082b58p0", "0x0.14cd500p0", "0x0.1929370p0", "0x0.1d96b10p0",
                "0x0.2216048p0", "0x0.26a7790p0", "0x0.2b4b588p0", "0x0.3001ed0p0",
                "0x0.34cb818p0", "0x0.39a8628p0", "0x0.3e98de8p0", "0x0.439d440p0",
                "0x0.48b5e40p0", "0x0.4de30f0p0", "0x0.5325180p0", "0x0.587c540p0",
                "0x0.5de9178p0", "0x0.636bb98p0", "0x0.6904930p0", "0x0.6eb3fc8p0",
                "0x0.747a510p0", "0x0.7a57ee0p0", "0x0.804d300p0", "0x0.865a778p0",
                "0x0.8c80248p0", "0x0.92be998p0", "0x0.99163b0p0", "0x0.9f876e8p0",
            };
_ssdm_SpecConstant(exp_x_msb_2_m_1_table);
# 228 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<25, 0> exp_x_msb_2_m_1 = exp_x_msb_2_m_1_table[x_msb_ind_2];

            ap_ufixed<43,-6> f_x_msb_2_lsb = exp_x_msb_2_m_1 * exp_x_lsb_m_1;
            ap_ufixed<19,-6> f_x_msb_2_lsb_s = f_x_msb_2_lsb;
            ap_ufixed<25, 0> exp_x_msb_2_lsb_m_1 = f_x_msb_2_lsb_s + exp_x_lsb_m_1 + exp_x_msb_2_m_1;

            const static ap_ufixed<25,11> exp_x_msb_1_table[32] = {
                "0x1.0000p0", "0x1.a614p0", "0x2.b7e0p0", "0x4.7b50p0",
                "0x7.6398p0", "0xc.2eb8p0", "0x14.15e4p0", "0x21.1d90p0",
                "0x36.9920p0", "0x5a.0464p0", "0x94.69c4p0", "0xf4.b124p0",
                "0x193.6dc4p0", "0x299.2444p0", "0x448.a218p0", "0x710.0adcp0",
                "0x0.0014p0", "0x0.0024p0", "0x0.003cp0", "0x0.0064p0",
                "0x0.00a4p0", "0x0.010cp0", "0x0.01b8p0", "0x0.02d8p0",
                "0x0.04b0p0", "0x0.07bcp0", "0x0.0cc0p0", "0x0.1504p0",
                "0x0.22a4p0", "0x0.3920p0", "0x0.5e2cp0", "0x0.9b44p0",
            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 244 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<25,11> exp_x_msb_1 = exp_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<50,11> y_lo = exp_x_msb_1 * exp_x_msb_2_lsb_m_1;
            ap_ufixed<25,11> y_lo_s = y_lo;
            ap_ufixed<25,11> y_l = y_lo_s + exp_x_msb_1;
            y = y_l;
        }
        if (I_<12) {
            bool overf = 0;
#pragma unroll
 for (int j = 21; j >= I_+10; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 21; j >= I_+10; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+9; j >= 0; j--)
                    y[j] = 1;
            }
        }
        r = y;
    } else if (I_s_==5) {
        ap_fixed<47,24> x_l = x;
        ap_ufixed<46,23> y = 0;
        ap_fixed<5,5> x_l_int;
        x_l_int(4,0) = x_l(27,23);
        ap_ufixed<23,0> x_l_fract;
        x_l_fract(22,0) = x_l(22,0);
        bool overf = 0;
#pragma unroll
 for (int j = 27; j < 46; j++)
            if (x_l[46]!=x_l[j])
                overf = 1;

        if (overf||((x_l_int==15)&&(x_l_fract>=ap_ufixed<23,0>("0x0.f14028p0")))) {
            if (!x_l[46]) {
#pragma unroll
 for (int j = 0; j < 46; j++) y[j] = 1;
            }
        } else {
            ap_uint<8> x_msb_ind_1;
            x_msb_ind_1[7] = x_l[46];
            x_msb_ind_1(6,0) = x_l(26,20);
            ap_uint<8> x_msb_ind_2;
            x_msb_ind_2(7,0) = x_l(19,12);
            ap_uint<5> x_msb_ind_3;
            x_msb_ind_3(4,0) = x_l(11,7);
            ap_uint<3> x_msb_ind_4;
            x_msb_ind_4(2,0) = x_l(6,4);
            ap_uint<4> x_lsb_ind;
            x_lsb_ind(3,0) = x_l(3,0);

            ap_ufixed<8, -3> x_msb_2 = x_l;
            ap_ufixed<5,-11> x_msb_3 = x_l;
            ap_ufixed<3,-16> x_msb_4 = x_l;
            ap_ufixed<4,-19> x_lsb = x_l;

            const static ap_ufixed< 6,-33> f_x_msb_4_h_table[8] = {
"0x0.0000000000p0", "0x0.0000000002p0", "0x0.0000000008p0", "0x0.0000000012p0",
"0x0.0000000020p0", "0x0.0000000032p0", "0x0.0000000048p0", "0x0.0000000062p0",
            };
_ssdm_SpecConstant(f_x_msb_4_h_table);
# 313 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            const static ap_ufixed< 7,-51> f_x_msb_4_l_table[8] = {
"0x0.000000000000000p0", "0x0.000000000000000p0", "0x0.00000000000000cp0", "0x0.000000000000024p0",
"0x0.000000000000054p0", "0x0.0000000000000a8p0", "0x0.000000000000120p0", "0x0.0000000000001c8p0",
            };
_ssdm_SpecConstant(f_x_msb_4_l_table);
# 317 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed< 6,-33> f_x_msb_4_h = f_x_msb_4_h_table[x_msb_ind_4];
            ap_ufixed< 7,-51> f_x_msb_4_l = f_x_msb_4_l_table[x_msb_ind_4];

            const static ap_ufixed< 8,-39> f_x_lsb_table[16] = {
"0x0.000000000000p0", "0x0.000000000002p0", "0x0.000000000008p0", "0x0.000000000012p0",
"0x0.000000000020p0", "0x0.000000000032p0", "0x0.000000000048p0", "0x0.000000000062p0",
"0x0.000000000080p0", "0x0.0000000000a2p0", "0x0.0000000000c8p0", "0x0.0000000000f2p0",
"0x0.000000000120p0", "0x0.000000000152p0", "0x0.000000000188p0", "0x0.0000000001c2p0",
            };
_ssdm_SpecConstant(f_x_lsb_table);
# 324 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed< 8,-39> f_x_lsb = f_x_lsb_table[x_lsb_ind];

            ap_ufixed< 7,-35> f_x_msb_4_lsb = x_msb_4 * x_lsb;

            ap_ufixed<10,-32> exp_x_msb_4_lsb_m_1_m = 0;
            exp_x_msb_4_lsb_m_1_m(8,3) = f_x_msb_4_h(5,0);
            exp_x_msb_4_lsb_m_1_m(2,0) = f_x_lsb(7,5);
            exp_x_msb_4_lsb_m_1_m = exp_x_msb_4_lsb_m_1_m + f_x_msb_4_lsb;

            ap_ufixed<42,-16> exp_x_msb_4_lsb_m_1 = 0;
            exp_x_msb_4_lsb_m_1(41,35) = x_l(6,0);
            exp_x_msb_4_lsb_m_1(25,16) = exp_x_msb_4_lsb_m_1_m(9,0);
            exp_x_msb_4_lsb_m_1(15,11) = f_x_lsb(4,0);
            exp_x_msb_4_lsb_m_1( 6, 0) = f_x_msb_4_l(6,0);


            const static ap_ufixed<32,-23> f_x_msb_3_table[32] = {
"0x0.00000000000000p0", "0x0.0000000080002ap0", "0x0.00000002000156p0", "0x0.00000004800480p0",
"0x0.00000008000aaap0", "0x0.0000000c8014d6p0", "0x0.00000012002400p0", "0x0.0000001880392cp0",
"0x0.00000020005556p0", "0x0.00000028807982p0", "0x0.0000003200a6acp0", "0x0.0000003c80ddd8p0",
"0x0.00000048012004p0", "0x0.00000054816e30p0", "0x0.0000006201c95cp0", "0x0.00000070823288p0",
"0x0.0000008002aab6p0", "0x0.000000908332e2p0", "0x0.000000a203cc12p0", "0x0.000000b4847740p0",
"0x0.000000c8053570p0", "0x0.000000dc8607a0p0", "0x0.000000f206eed0p0", "0x0.0000010887ec02p0",
"0x0.00000120090036p0", "0x0.000001388a2c6ap0", "0x0.000001520b71a0p0", "0x0.0000016c8cd0d6p0",
"0x0.000001880e4b0ep0", "0x0.000001a48fe148p0", "0x0.000001c2119484p0", "0x0.000001e09365c0p0",
            };
_ssdm_SpecConstant(f_x_msb_3_table);
# 346 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


            ap_ufixed<32,-23> f_x_msb_3 = f_x_msb_3_table[x_msb_ind_3];
            ap_ufixed<44,-11> exp_x_msb_3_m_1 = 0;
            exp_x_msb_3_m_1(43,39) = x_msb_3(4,0);
            exp_x_msb_3_m_1(31, 0) = f_x_msb_3(31,0);

            ap_ufixed<86,-27> f_x_msb_3_4_lsb = exp_x_msb_3_m_1 * exp_x_msb_4_lsb_m_1;
            ap_ufixed<31,-27> f_x_msb_3_4_lsb_s = f_x_msb_3_4_lsb;
            ap_ufixed<48,-10> exp_x_msb_3_4_lsb_m_1 = f_x_msb_3_4_lsb_s + exp_x_msb_3_m_1 + exp_x_msb_4_lsb_m_1;


            const static ap_ufixed<46,-6> f_x_msb_2_table[256] = {
"0x0", "0x0.0000020015560p0", "0x0.00000800AAB55p0", "0x0.0000120240360p0",
"0x0.0000200556001p0", "0x0.0000320A6C4B8p0", "0x0.0000481203608p0", "0x0.0000621C9B971p0",
"0x0.0000802AB5577p0", "0x0.0000A23CD119Dp0", "0x0.0000C8536F668p0", "0x0.0000F26F10D5Dp0",
"0x0.0001209036103p0", "0x0.000152B75FCE3p0", "0x0.000188E50ED86p0", "0x0.0001C319C4077p0",
"0x0.0002015600445p0", "0x0.0002439A4487Ep0", "0x0.000289E711DB3p0", "0x0.0002D43CE9577p0",
"0x0.0003229C4C260p0", "0x0.00037505BB805p0", "0x0.0003CB79B8B01p0", "0x0.000425F8C50F2p0",
"0x0.0004848362076p0", "0x0.0004E71A11131p0", "0x0.00054DBD53BC8p0", "0x0.0005B86DAB9E3p0",
"0x0.0006272B9A630p0", "0x0.000699F7A1C5Dp0", "0x0.000710D24391Ep0", "0x0.00078BBC01A29p0",
"0x0.00080AB55DE39p0", "0x0.00088DBEDA50Bp0", "0x0.000914D8F8F63p0", "0x0.0009A0043BF07p0",
"0x0.000A2F41256C2p0", "0x0.000AC29037A63p0", "0x0.000B59F1F4EBDp0", "0x0.000BF566DF9AAp0",
"0x0.000C94EF7A206p0", "0x0.000D388C46FB4p0", "0x0.000DE03DC8B9Bp0", "0x0.000E8C0481FA7p0",
"0x0.000F3BE0F56CAp0", "0x0.000FEFD3A5CFAp0", "0x0.0010A7DD15F36p0", "0x0.001163FDC8B7Fp0",
"0x0.00122436410DDp0", "0x0.0012E88701F5Ep0", "0x0.0013B0F08E817p0", "0x0.00147D7369D22p0",
"0x0.00154E101719Fp0", "0x0.001622C7199B7p0", "0x0.0016FB98F4A96p0", "0x0.0017D8862BA72p0",
"0x0.0018B98F42084p0", "0x0.00199EB4BB511p0", "0x0.001A87F71B161p0", "0x0.001B7556E4FC4p0",
"0x0.001C66D49CB93p0", "0x0.001D5C70C612Dp0", "0x0.001E562BE4DFAp0", "0x0.001F54067D067p0",
"0x0.00205601127ECp0", "0x0.00215C1C29507p0", "0x0.0022665845940p0", "0x0.002374B5EB724p0",
"0x0.002487359F24Cp0", "0x0.00259DD7E4F57p0", "0x0.0026B89D413EFp0", "0x0.0027D786386C4p0",
"0x0.0028FA934EF90p0", "0x0.002A21C509717p0", "0x0.002B4D1BEC726p0", "0x0.002C7C987CA92p0",
"0x0.002DB03B3ED3Ap0", "0x0.002EE804B7C07p0", "0x0.003023F56C4ECp0", "0x0.0031640DE16E3p0",
"0x0.0032A84E9C1F5p0", "0x0.0033F0B821730p0", "0x0.00353D4AF68B0p0", "0x0.00368E07A0999p0",
"0x0.0037E2EEA4E19p0", "0x0.00393C0088B6Cp0", "0x0.003A993DD17D5p0", "0x0.003BFAA704AA3p0",
"0x0.003D603CA7C32p0", "0x0.003EC9FF405E6p0", "0x0.004037EF54230p0", "0x0.0041AA0D68C8Cp0",
"0x0.0043205A04182p0", "0x0.00449AD5ABEA5p0", "0x0.00461980E6294p0", "0x0.00479C5C38CF9p0",
"0x0.0049236829E8Bp0", "0x0.004AAEA53F90Ep0", "0x0.004C3E13FFF51p0", "0x0.004DD1B4F152Fp0",
"0x0.004F698899F90p0", "0x0.0051058F8046Ap0", "0x0.0052A5CA2AABFp0", "0x0.00544A391FA9Cp0",
"0x0.0055F2DCE5D1Ep0", "0x0.00579FB603C6Ep0", "0x0.005950C5003C2p0", "0x0.005B060A61F5Dp0",
"0x0.005CBF86AFC91p0", "0x0.005E7D3A709BEp0", "0x0.00603F262B650p0", "0x0.0062054A672C2p0",
"0x0.0063CFA7AB09Dp0", "0x0.00659E3E7E278p0", "0x0.0067710F67BFAp0", "0x0.0069481AEF1D5p0",
"0x0.006B23619B9CFp0", "0x0.006D02E3F4AB7p0", "0x0.006EE6A281C6Fp0", "0x0.0070CE9DCA7E6p0",
"0x0.0072BAD65671Bp0", "0x0.0074AB4CAD51Cp0", "0x0.0076A00156E07p0", "0x0.007898F4DAF09p0",
"0x0.007A9627C165Fp0", "0x0.007C979A92356p0", "0x0.007E9D4DD564Ap0", "0x0.0080A742130A8p0",
"0x0.0082B577D34EDp0", "0x0.0084C7EF9E6A7p0", "0x0.0086DEA9FCA73p0", "0x0.0088F9A776601p0",
"0x0.008B18E894010p0", "0x0.008D3C6DDE06Fp0", "0x0.008F6437DD000p0", "0x0.00919047198B6p0",
"0x0.0093C09C1C595p0", "0x0.0095F5376E2B2p0", "0x0.00982E1997D33p0", "0x0.009A6B4322352p0",
"0x0.009CACB496458p0", "0x0.009EF26E7D0A2p0", "0x0.00A13C715F99Ep0", "0x0.00A38ABDC71CEp0",
"0x0.00A5DD543CCC4p0", "0x0.00A8343549F26p0", "0x0.00AA8F6177EADp0", "0x0.00ACEED950222p0",
"0x0.00AF529D5C165p0", "0x0.00B1BAAE25566p0", "0x0.00B4270C3582Ap0", "0x0.00B697B8164C7p0",
"0x0.00B90CB25176Ap0", "0x0.00BB85FB70D50p0", "0x0.00BE0393FE4CCp0", "0x0.00C0857C83D44p0",
"0x0.00C30BB58B732p0", "0x0.00C5963F9F424p0", "0x0.00C8251B496BEp0", "0x0.00CAB849142B5p0",
"0x0.00CD4FC989CD6p0", "0x0.00CFEB9D34B00p0", "0x0.00D28BC49F428p0", "0x0.00D5304054059p0",
"0x0.00D7D910DD8B1p0", "0x0.00DA8636C6764p0", "0x0.00DD37B2997BCp0", "0x0.00DFED84E1618p0",
"0x0.00E2A7AE28FECp0", "0x0.00E5662EFB3C3p0", "0x0.00E82907E313Dp0", "0x0.00EAF0396B910p0",
"0x0.00EDBBC41FD08p0", "0x0.00F08BA88B009p0", "0x0.00F35FE73860Bp0", "0x0.00F63880B341Ep0",
"0x0.00F9157587069p0", "0x0.00FBF6C63F228p0", "0x0.00FEDC73671B0p0", "0x0.0101C67D8A86Cp0",
"0x0.0104B4E5350DFp0", "0x0.0107A7AAF26A2p0", "0x0.010A9ECF4E667p0", "0x0.010D9A52D4DF8p0",
"0x0.01109A3611C34p0", "0x0.01139E7991116p0", "0x0.0116A71DDEDADp0", "0x0.0119B42387423p0",
"0x0.011CC58B167B9p0", "0x0.011FDB5518CCAp0", "0x0.0122F5821A8C7p0", "0x0.01261412A823Cp0",
"0x0.012937074E0CDp0", "0x0.012C5E6098D37p0", "0x0.012F8A1F15151p0", "0x0.0132BA434F80Ap0",
"0x0.0135EECDD4D6Cp0", "0x0.013927BF31E98p0", "0x0.013C6517F39CCp0", "0x0.013FA6D8A6E5Dp0",
"0x0.0142ED01D8CBCp0", "0x0.0146379416673p0", "0x0.0149868FECE26p0", "0x0.014CD9F5E9795p0",
"0x0.015031C699799p0", "0x0.01538E028A426p0", "0x0.0156EEAA4944Bp0", "0x0.015A53BE64033p0",
"0x0.015DBD3F68122p0", "0x0.01612B2DE3178p0", "0x0.01649D8A62CB1p0", "0x0.0168145574F65p0",
"0x0.016B8F8FA7745p0", "0x0.016F0F3988321p0", "0x0.01729353A52E4p0", "0x0.01761BDE8C792p0",
"0x0.0179A8DACC350p0", "0x0.017D3A48F295Dp0", "0x0.0180D0298DE13p0", "0x0.01846A7D2C6ECp0",
"0x0.018809445CA7Bp0", "0x0.018BAC7FAD074p0", "0x0.018F542FAC1A4p0", "0x0.01930054E87F8p0",
"0x0.0196B0EFF0E79p0", "0x0.019A66015414Dp0", "0x0.019E1F89A0DBAp0", "0x0.01A1DD8966221p0",
"0x0.01A5A00132E02p0", "0x0.01A966F1961FCp0", "0x0.01AD325B1EFC9p0", "0x0.01B1023E5CA45p0",
"0x0.01B4D69BDE569p0", "0x0.01B8AF743364Cp0", "0x0.01BC8CC7EB323p0", "0x0.01C06E9795345p0",
"0x0.01C454E3C0F24p0", "0x0.01C83FACFE054p0", "0x0.01CC2EF3DC187p0", "0x0.01D022B8EAE8Fp0",
"0x0.01D41AFCBA45Ep0", "0x0.01D817BFDA104p0", "0x0.01DC1902DA3B1p0", "0x0.01E01EC64ACB7p0",
"0x0.01E4290ABBD87p0", "0x0.01E837D0BD8B2p0", "0x0.01EC4B18E01E9p0", "0x0.01F062E3B3DFEp0",
"0x0.01F47F31C92E4p0", "0x0.01F8A003B07AFp0", "0x0.01FCC559FA492p0", "0x0.0200EF35372E4p0",
"0x0.02051D95F7D1Cp0", "0x0.0209507CCCED1p0", "0x0.020D87EA474BEp0", "0x0.0211C3DEF7CBDp0",
            };
_ssdm_SpecConstant(f_x_msb_2_table);
# 367 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<46,-6> f_x_msb_2 = f_x_msb_2_table[x_msb_ind_2];
            ap_ufixed< 5,-6> f_x_msb_2_h;
            f_x_msb_2_h(4,0) = f_x_msb_2(45,41);
            ap_ufixed< 9,-2> exp_x_msb_2_m_1_h = f_x_msb_2_h + x_msb_2;
            ap_ufixed<50,-2> exp_x_msb_2_m_1;
            exp_x_msb_2_m_1(49,41) = exp_x_msb_2_m_1_h(8,0);
            exp_x_msb_2_m_1(40, 0) = f_x_msb_2(40,0);

            ap_ufixed<98,-12> f_x_msb_2_3_4_lsb = exp_x_msb_2_m_1 * exp_x_msb_3_4_lsb_m_1;
            ap_ufixed<46,-12> f_x_msb_2_3_4_lsb_s = f_x_msb_2_3_4_lsb;
            ap_ufixed<50,-2> exp_x_msb_2_3_4_lsb_m_1 = f_x_msb_2_3_4_lsb_s + exp_x_msb_2_m_1 + exp_x_msb_3_4_lsb_m_1;

            const static ap_ufixed<50,23> exp_x_msb_1_table[256] = {
"0x1.0000000p0", "0x1.2216045p0", "0x1.48B5E3Cp0", "0x1.747A513p0",
"0x1.A61298Ep0", "0x1.DE455DFp0", "0x2.1DF3B68p0", "0x2.661CB0Fp0",
"0x2.B7E1516p0", "0x3.1489176p0", "0x3.7D871DBp0", "0x3.F47FE87p0",
"0x4.7B4FF99p0", "0x5.1413452p0", "0x5.C12DA41p0", "0x6.855466Ep0",
"0x7.63992E3p0", "0x8.5F7635Bp0", "0x9.7CDC417p0", "0xA.C042667p0",
"0xC.2EB7EC9p0", "0xD.CDF892Ep0", "0xF.A48385Ep0", "0x11.B9B5652p0",
"0x14.15E5BF6p0", "0x16.C2887C1p0", "0x19.CA53B78p0", "0x1D.396AA97p0",
"0x21.1D8E427p0", "0x25.865441Cp0", "0x2A.8565A14p0", "0x30.2EC550Bp0",
"0x36.99205C4p0", "0x3D.DE28BF3p0", "0x46.1AFC4DBp0", "0x4F.7099532p0",
"0x5A.0462B78p0", "0x66.00B5BC9p0", "0x73.9593ABBp0", "0x82.F9621ADp0",
"0x94.69C4CB8p0", "0xA8.2C948C1p0", "0xBE.90F6F83p0", "0xD7.F09B78Cp0",
"0xF4.B122790p0", "0x115.45B4704p0", "0x13A.30CF1CCp0", "0x164.0650296p0",
"0x193.6DC5690p0", "0x1C9.250BEDCp0", "0x206.03487A3p0", "0x24A.FC4533Cp0",
"0x299.2442102p0", "0x2F1.B447462p0", "0x356.0F0B0F9p0", "0x3C7.C67E5BEp0",
"0x448.A216ABBp0", "0x4DA.A5EE46Ap0", "0x580.1AD754Fp0", "0x63B.9782341p0",
"0x710.0ADBAC7p0", "0x800.C7CC8E3p0", "0x911.9289C39p0", "0xA46.AFAA2ADp0",
"0xBA4.F53EA38p0", "0xD31.DE30C52p0", "0xEF3.A035D57p0", "0x10F1.44ADE60p0",
"0x1332.C4D2B7Cp0", "0x15C1.29A744Cp0", "0x18A6.B027DA0p0", "0x1BEE.F24BB12p0",
"0x1FA7.157C470p0", "0x23DD.FF3C8BAp0", "0x28A4.90D2CCEp0", "0x2E0D.EAE454Bp0",
"0x342F.BA11823p0", "0x3B22.8DC5359p0", "0x4302.3A933EEp0", "0x4BEE.49AFCDCp0",
"0x560A.773E541p0", "0x617F.4171BF9p0", "0x6E7A.8ABB4A8p0", "0x7D30.5191764p0",
"0x8DDB.80AF426p0", "0xA0BE.DB0DB10p0", "0xB626.0748BAEp0", "0xCE66.BE9EAADp0",
"0xE9E2.2447727p0", "0x10906.4A831F8p0", "0x12C4F.EB75B2Ap0", "0x1544C.5CB6133p0",
"0x1819B.C560F61p0", "0x1B4F3.9F8AF64p0", "0x1EF21.8F1B001p0", "0x2310E.996C40Fp0",
"0x27BC2.CA9A6F9p0", "0x2D069.571279Ap0", "0x33055.49F35D9p0", "0x39D06.D2FEF17p0",
"0x41831.49596E9p0", "0x4A3C1.FB2AC39p0", "0x541E7.E56949Dp0", "0x5F51C.72B7532p0",
"0x6C02D.645AB25p0", "0x7A648.0CFF534p0", "0x8AB06.0A3EE9Fp0", "0x9D27B.AFE4CF1p0",
"0xB2148.5EAE56Cp0", "0xC9CA9.07F86EFp0", "0xE4A8D.2881EDBp0", "0x1031AE.8E4996Cp0",
"0x1259AC.48BF05Dp0", "0x14CB29.2F2B31Fp0", "0x178FEE.7792E44p0", "0x1AB312.E89CD0Dp0",
"0x1E4127.437732Bp0", "0x224868.979FC2Ep0", "0x26D8F9.4A204BEp0", "0x2C0521.B4A8E0Bp0",
"0x31E199.5F5A550p0", "0x3885D9.FA89D00p0", "0x400C7D.64D3386p0", "0x4893A8.361032Dp0",
"0x523D82.79EDAEFp0", "0x5D30C0.7DAB686p0", "0x69993D.D4F2D95p0", "0x77A8AD.02A7C71p0",
"0x0.000001Ep0", "0x0.0000022p0", "0x0.0000026p0", "0x0.000002Bp0",
"0x0.0000031p0", "0x0.0000038p0", "0x0.000003Fp0", "0x0.0000048p0",
"0x0.0000052p0", "0x0.000005Dp0", "0x0.0000069p0", "0x0.0000077p0",
"0x0.0000087p0", "0x0.0000099p0", "0x0.00000ADp0", "0x0.00000C4p0",
"0x0.00000DFp0", "0x0.00000FCp0", "0x0.000011Ep0", "0x0.0000144p0",
"0x0.0000170p0", "0x0.00001A1p0", "0x0.00001D8p0", "0x0.0000217p0",
"0x0.000025Ep0", "0x0.00002AFp0", "0x0.000030Bp0", "0x0.0000372p0",
"0x0.00003E8p0", "0x0.000046Dp0", "0x0.0000504p0", "0x0.00005AFp0",
"0x0.0000671p0", "0x0.000074Cp0", "0x0.0000845p0", "0x0.000095Fp0",
"0x0.0000A9Fp0", "0x0.0000C09p0", "0x0.0000DA3p0", "0x0.0000F74p0",
"0x0.0001183p0", "0x0.00013D8p0", "0x0.000167Cp0", "0x0.000197Bp0",
"0x0.0001CDFp0", "0x0.00020B7p0", "0x0.0002513p0", "0x0.0002A02p0",
"0x0.0002F9Ap0", "0x0.00035F1p0", "0x0.0003D20p0", "0x0.0004543p0",
"0x0.0004E7Cp0", "0x0.00058F0p0", "0x0.00064C7p0", "0x0.0007232p0",
"0x0.0008167p0", "0x0.00092A2p0", "0x0.000A628p0", "0x0.000BC48p0",
"0x0.000D55Ap0", "0x0.000F1C2p0", "0x0.00111F3p0", "0x0.001366Cp0",
"0x0.0015FC2p0", "0x0.0018E98p0", "0x0.001C3AAp0", "0x0.001FFCEp0",
"0x0.00243F3p0", "0x0.002912Bp0", "0x0.002E8ABp0", "0x0.0034BD2p0",
"0x0.003BC2Dp0", "0x0.0043B7Dp0", "0x0.004CBC1p0", "0x0.0056F3Ap0",
"0x0.0062878p0", "0x0.006FA5Fp0", "0x0.007E83Ap0", "0x0.008F5C0p0",
"0x0.00A2728p0", "0x0.00B813Bp0", "0x0.00D0963p0", "0x0.00EC5C1p0",
"0x0.010BD4Ap0", "0x0.012F7DEp0", "0x0.0157E6Bp0", "0x0.0185B0Fp0",
"0x0.01B993Fp0", "0x0.01F45F9p0", "0x0.0236FF5p0", "0x0.02827E0p0",
"0x0.02D80A0p0", "0x0.0338F9Fp0", "0x0.03A6D22p0", "0x0.04234A7p0",
"0x0.04B0556p0", "0x0.0550280p0", "0x0.0605424p0", "0x0.06D279Ap0",
"0x0.07BB040p0", "0x0.08C284Cp0", "0x0.09ED1B4p0", "0x0.0B3F736p0",
"0x0.0CBED86p0", "0x0.0E7149Cp0", "0x0.105D938p0", "0x0.128B697p0",
"0x0.150385Cp0", "0x0.17CFCC2p0", "0x0.1AFB718p0", "0x0.1E9328Bp0",
"0x0.22A5554p0", "0x0.2742456p0", "0x0.2C7C72Fp0", "0x0.3268CDBp0",
"0x0.391F0EEp0", "0x0.40BA188p0", "0x0.495860Dp0", "0x0.531C6C9p0",
"0x0.5E2D58Dp0", "0x0.6AB7782p0", "0x0.78ED03Ap0", "0x0.8906E49p0",
"0x0.9B4597Ep0", "0x0.AFF230Ap0", "0x0.C75F7CFp0", "0x0.E1EB512p0",
            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 445 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<50,23> exp_x_msb_1 = exp_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<100,21> y_lo = exp_x_msb_1 * exp_x_msb_2_3_4_lsb_m_1;
            ap_ufixed<48,21> y_lo_s = y_lo;
            ap_ufixed<50,23> y_l = y_lo_s + exp_x_msb_1;
            y = y_l;
        }
        if (I_<24) {
            bool overf = 0;
#pragma unroll
 for (int j = 45; j >= I_+22; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 45; j >= I_+22; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+21; j >= 0; j--)
                    y[j] = 1;
            }
        }
        r = y;
    } else {

        ap_fixed<65,33> x_l = 0;
#pragma unroll
 for (int j = 32-F_; j < 32+I_; j++)
            x_l[j] = x[j-(32-F_)];
#pragma unroll
 for (int j = 32+I_; j <= 64; j++)
            x_l[j] = x[W_-1];
        ap_ufixed<64,32> y = 0;
        ap_fixed<6,6> x_l_int;
        x_l_int(5,0) = x_l(37,32);
        ap_ufixed<32,0> x_l_fract;
        x_l_fract(31,0) = x_l(31,0);
        bool overf = 0;
#pragma unroll
 for (int j = 37; j < 64; j++)
            if (x_l[64]!=x_l[j])
                overf = 1;

        if (overf||(x_l_int>22)||((x_l_int==22)&&(x_l_fract>=ap_ufixed<32,0>("0x0.2e42fefap0")))) {
            if (!x_l[64]) {
#pragma unroll
 for (int j = 0; j < 64; j++) y[j] = 1;
            }
        } else {
            ap_uint<8> x_msb_ind_1;
            x_msb_ind_1[7] = x_l[64];
            x_msb_ind_1(6,0) = x_l(36,30);
            ap_uint<8> x_msb_ind_2;
            x_msb_ind_2(7,0) = x_l(29,22);
            ap_uint<8> x_msb_ind_3;
            x_msb_ind_3(7,0) = x_l(21,14);
            ap_uint<8> x_msb_ind_4;
            x_msb_ind_4(7,0) = x_l(13,6);
            ap_uint<6> x_lsb_ind;
            x_lsb_ind(5,0) = x_l(5,0);

            ap_ufixed<8, -2> x_msb_2 = x_l;
            ap_ufixed<8,-10> x_msb_3 = x_l;
            ap_ufixed<8,-18> x_msb_4 = x_l;
            ap_ufixed<6,-26> x_lsb = x_l;

            const static ap_ufixed<31,-37> f_x_msb_4_table[256] = {
"0x0.000000000000000000p0", "0x0.000000000000080000p0", "0x0.000000000000200000p0", "0x0.000000000000480000p0",
"0x0.000000000000800000p0", "0x0.000000000000C80000p0", "0x0.000000000001200000p0", "0x0.000000000001880000p0",
"0x0.000000000002000001p0", "0x0.000000000002880001p0", "0x0.000000000003200002p0", "0x0.000000000003C80003p0",
"0x0.000000000004800004p0", "0x0.000000000005480005p0", "0x0.000000000006200007p0", "0x0.000000000007080008p0",
"0x0.00000000000800000Ap0", "0x0.00000000000908000Cp0", "0x0.00000000000A20000Fp0", "0x0.00000000000B480011p0",
"0x0.00000000000C800014p0", "0x0.00000000000DC80018p0", "0x0.00000000000F20001Bp0", "0x0.00000000001088001Fp0",
"0x0.000000000012000024p0", "0x0.000000000013880028p0", "0x0.00000000001520002Dp0", "0x0.000000000016C80033p0",
"0x0.000000000018800039p0", "0x0.00000000001A48003Fp0", "0x0.00000000001C200046p0", "0x0.00000000001E08004Dp0",
"0x0.000000000020000055p0", "0x0.00000000002208005Dp0", "0x0.000000000024200066p0", "0x0.00000000002648006Fp0",
"0x0.000000000028800079p0", "0x0.00000000002AC80083p0", "0x0.00000000002D20008Ep0", "0x0.00000000002F88009Ap0",
"0x0.0000000000320000A6p0", "0x0.0000000000348800B3p0", "0x0.0000000000372000C0p0", "0x0.000000000039C800CFp0",
"0x0.00000000003C8000DDp0", "0x0.00000000003F4800EDp0", "0x0.0000000000422000FDp0", "0x0.00000000004508010Ep0",
"0x0.000000000048000120p0", "0x0.00000000004B080132p0", "0x0.00000000004E200145p0", "0x0.000000000051480159p0",
"0x0.00000000005480016Ep0", "0x0.000000000057C80183p0", "0x0.00000000005B20019Ap0", "0x0.00000000005E8801B1p0",
"0x0.0000000000620001C9p0", "0x0.0000000000658801E2p0", "0x0.0000000000692001FCp0", "0x0.00000000006CC80216p0",
"0x0.000000000070800232p0", "0x0.00000000007448024Fp0", "0x0.00000000007820026Cp0", "0x0.00000000007C08028Bp0",
"0x0.0000000000800002AAp0", "0x0.0000000000840802CBp0", "0x0.0000000000882002ECp0", "0x0.00000000008C48030Fp0",
"0x0.000000000090800332p0", "0x0.000000000094C80357p0", "0x0.00000000009920037Dp0", "0x0.00000000009D8803A4p0",
"0x0.0000000000A20003CCp0", "0x0.0000000000A68803F5p0", "0x0.0000000000AB20041Fp0", "0x0.0000000000AFC8044Ap0",
"0x0.0000000000B4800477p0", "0x0.0000000000B94804A4p0", "0x0.0000000000BE2004D3p0", "0x0.0000000000C3080503p0",
"0x0.0000000000C8000535p0", "0x0.0000000000CD080567p0", "0x0.0000000000D220059Bp0", "0x0.0000000000D74805D1p0",
"0x0.0000000000DC800607p0", "0x0.0000000000E1C8063Fp0", "0x0.0000000000E7200678p0", "0x0.0000000000EC8806B2p0",
"0x0.0000000000F20006EEp0", "0x0.0000000000F788072Bp0", "0x0.0000000000FD20076Ap0", "0x0.000000000102C807AAp0",
"0x0.0000000001088007EBp0", "0x0.00000000010E48082Ep0", "0x0.000000000114200872p0", "0x0.00000000011A0808B8p0",
"0x0.000000000120000900p0", "0x0.000000000126080948p0", "0x0.00000000012C200993p0", "0x0.0000000001324809DEp0",
"0x0.000000000138800A2Cp0", "0x0.00000000013EC80A7Bp0", "0x0.000000000145200ACBp0", "0x0.00000000014B880B1Dp0",
"0x0.000000000152000B71p0", "0x0.000000000158880BC6p0", "0x0.00000000015F200C1Dp0", "0x0.000000000165C80C76p0",
"0x0.00000000016C800CD0p0", "0x0.000000000173480D2Cp0", "0x0.00000000017A200D8Ap0", "0x0.000000000181080DE9p0",
"0x0.000000000188000E4Ap0", "0x0.00000000018F080EADp0", "0x0.000000000196200F12p0", "0x0.00000000019D480F78p0",
"0x0.0000000001A4800FE0p0", "0x0.0000000001ABC8104Ap0", "0x0.0000000001B32010B6p0", "0x0.0000000001BA881124p0",
"0x0.0000000001C2001194p0", "0x0.0000000001C9881205p0", "0x0.0000000001D1201278p0", "0x0.0000000001D8C812EEp0",
"0x0.0000000001E0801365p0", "0x0.0000000001E84813DEp0", "0x0.0000000001F0201459p0", "0x0.0000000001F80814D6p0",
"0x0.000000000200001555p0", "0x0.0000000002080815D6p0", "0x0.000000000210201659p0", "0x0.0000000002184816DEp0",
"0x0.000000000220801765p0", "0x0.000000000228C817EEp0", "0x0.000000000231201879p0", "0x0.000000000239881907p0",
"0x0.000000000242001996p0", "0x0.00000000024A881A28p0", "0x0.000000000253201ABBp0", "0x0.00000000025BC81B51p0",
"0x0.000000000264801BE9p0", "0x0.00000000026D481C84p0", "0x0.000000000276201D20p0", "0x0.00000000027F081DBFp0",
"0x0.000000000288001E60p0", "0x0.000000000291081F03p0", "0x0.00000000029A201FA8p0", "0x0.0000000002A3482050p0",
"0x0.0000000002AC8020FAp0", "0x0.0000000002B5C821A6p0", "0x0.0000000002BF202255p0", "0x0.0000000002C8882306p0",
"0x0.0000000002D20023B9p0", "0x0.0000000002DB88246Fp0", "0x0.0000000002E5202527p0", "0x0.0000000002EEC825E1p0",
"0x0.0000000002F880269Ep0", "0x0.00000000030248275Dp0", "0x0.00000000030C20281Fp0", "0x0.0000000003160828E3p0",
"0x0.0000000003200029AAp0", "0x0.00000000032A082A73p0", "0x0.000000000334202B3Fp0", "0x0.00000000033E482C0Dp0",
"0x0.000000000348802CDEp0", "0x0.000000000352C82DB2p0", "0x0.00000000035D202E88p0", "0x0.000000000367882F60p0",
"0x0.00000000037200303Cp0", "0x0.00000000037C883119p0", "0x0.0000000003872031FAp0", "0x0.000000000391C832DDp0",
"0x0.00000000039C8033C3p0", "0x0.0000000003A74834ABp0", "0x0.0000000003B2203596p0", "0x0.0000000003BD083684p0",
"0x0.0000000003C8003775p0", "0x0.0000000003D3083868p0", "0x0.0000000003DE20395Ep0", "0x0.0000000003E9483A57p0",
"0x0.0000000003F4803B53p0", "0x0.0000000003FFC83C52p0", "0x0.00000000040B203D53p0", "0x0.000000000416883E57p0",
"0x0.000000000422003F5Ep0", "0x0.00000000042D884068p0", "0x0.000000000439204175p0", "0x0.000000000444C84285p0",
"0x0.000000000450804397p0", "0x0.00000000045C4844ADp0", "0x0.0000000004682045C5p0", "0x0.0000000004740846E1p0",
"0x0.000000000480004800p0", "0x0.00000000048C084921p0", "0x0.000000000498204A46p0", "0x0.0000000004A4484B6Dp0",
"0x0.0000000004B0804C98p0", "0x0.0000000004BCC84DC5p0", "0x0.0000000004C9204EF6p0", "0x0.0000000004D588502Ap0",
"0x0.0000000004E2005161p0", "0x0.0000000004EE88529Bp0", "0x0.0000000004FB2053D8p0", "0x0.000000000507C85518p0",
"0x0.00000000051480565Cp0", "0x0.0000000005214857A3p0", "0x0.00000000052E2058EDp0", "0x0.00000000053B085A3Ap0",
"0x0.000000000548005B8Ap0", "0x0.000000000555085CDEp0", "0x0.000000000562205E35p0", "0x0.00000000056F485F8Fp0",
"0x0.00000000057C8060ECp0", "0x0.000000000589C8624Dp0", "0x0.0000000005972063B1p0", "0x0.0000000005A4886519p0",
"0x0.0000000005B2006684p0", "0x0.0000000005BF8867F2p0", "0x0.0000000005CD206963p0", "0x0.0000000005DAC86AD8p0",
"0x0.0000000005E8806C51p0", "0x0.0000000005F6486DCDp0", "0x0.000000000604206F4Cp0", "0x0.0000000006120870CFp0",
"0x0.000000000620007255p0", "0x0.00000000062E0873DFp0", "0x0.00000000063C20756Cp0", "0x0.00000000064A4876FDp0",
"0x0.000000000658807891p0", "0x0.000000000666C87A29p0", "0x0.000000000675207BC4p0", "0x0.000000000683887D64p0",
"0x0.000000000692007F06p0", "0x0.0000000006A08880ADp0", "0x0.0000000006AF208256p0", "0x0.0000000006BDC88404p0",
"0x0.0000000006CC8085B5p0", "0x0.0000000006DB48876Ap0", "0x0.0000000006EA208923p0", "0x0.0000000006F9088ADFp0",
"0x0.000000000708008CA0p0", "0x0.000000000717088E63p0", "0x0.00000000072620902Bp0", "0x0.0000000007354891F6p0",
"0x0.0000000007448093C6p0", "0x0.000000000753C89599p0", "0x0.000000000763209770p0", "0x0.00000000077288994Ap0",
"0x0.000000000782009B29p0", "0x0.000000000791889D0Bp0", "0x0.0000000007A1209EF2p0", "0x0.0000000007B0C8A0DCp0",
"0x0.0000000007C080A2CAp0", "0x0.0000000007D048A4BCp0", "0x0.0000000007E020A6B2p0", "0x0.0000000007F008A8ACp0",
            };
_ssdm_SpecConstant(f_x_msb_4_table);
# 577 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<31,-37> f_x_msb_4 = f_x_msb_4_table[x_msb_ind_4];

            const static ap_ufixed<12,-53> f_x_lsb_table[64] = {
"0x0.00000000000000000p0", "0x0.00000000000000008p0", "0x0.00000000000000020p0", "0x0.00000000000000048p0",
"0x0.00000000000000080p0", "0x0.000000000000000c8p0", "0x0.00000000000000120p0", "0x0.00000000000000188p0",
"0x0.00000000000000200p0", "0x0.00000000000000288p0", "0x0.00000000000000320p0", "0x0.000000000000003c8p0",
"0x0.00000000000000480p0", "0x0.00000000000000548p0", "0x0.00000000000000620p0", "0x0.00000000000000708p0",
"0x0.00000000000000800p0", "0x0.00000000000000908p0", "0x0.00000000000000a20p0", "0x0.00000000000000b48p0",
"0x0.00000000000000c80p0", "0x0.00000000000000dc8p0", "0x0.00000000000000f20p0", "0x0.00000000000001088p0",
"0x0.00000000000001200p0", "0x0.00000000000001388p0", "0x0.00000000000001520p0", "0x0.000000000000016c8p0",
"0x0.00000000000001880p0", "0x0.00000000000001a48p0", "0x0.00000000000001c20p0", "0x0.00000000000001e08p0",
"0x0.00000000000002000p0", "0x0.00000000000002208p0", "0x0.00000000000002420p0", "0x0.00000000000002648p0",
"0x0.00000000000002880p0", "0x0.00000000000002ac8p0", "0x0.00000000000002d20p0", "0x0.00000000000002f88p0",
"0x0.00000000000003200p0", "0x0.00000000000003488p0", "0x0.00000000000003720p0", "0x0.000000000000039c8p0",
"0x0.00000000000003c80p0", "0x0.00000000000003f48p0", "0x0.00000000000004220p0", "0x0.00000000000004508p0",
"0x0.00000000000004800p0", "0x0.00000000000004b08p0", "0x0.00000000000004e20p0", "0x0.00000000000005148p0",
"0x0.00000000000005480p0", "0x0.000000000000057c8p0", "0x0.00000000000005b20p0", "0x0.00000000000005e88p0",
"0x0.00000000000006200p0", "0x0.00000000000006588p0", "0x0.00000000000006920p0", "0x0.00000000000006cc8p0",
"0x0.00000000000007080p0", "0x0.00000000000007448p0", "0x0.00000000000007820p0", "0x0.00000000000007c08p0",
            };
_ssdm_SpecConstant(f_x_lsb_table);
# 645 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<12,-53> f_x_lsb = f_x_lsb_table[x_lsb_ind];

            ap_ufixed<14,-44> f_x_msb_4_lsb = x_msb_4 * x_lsb;

            ap_ufixed<15,-43> exp_x_msb_4_lsb_m_1_m1 = 0;
            exp_x_msb_4_lsb_m_1_m1(4,0) = f_x_lsb(11,7);
            exp_x_msb_4_lsb_m_1_m1 = exp_x_msb_4_lsb_m_1_m1 + f_x_msb_4_lsb;

            ap_ufixed<22,-43> exp_x_msb_4_lsb_m_1_m2 = exp_x_msb_4_lsb_m_1_m1;
            exp_x_msb_4_lsb_m_1_m2(6,0) = f_x_lsb(6,0);

            ap_ufixed<29,-36> exp_x_msb_4_lsb_m_1_m3 = 0;
            exp_x_msb_4_lsb_m_1_m3(27,0) = f_x_msb_4(30,3);
            exp_x_msb_4_lsb_m_1_m3 = exp_x_msb_4_lsb_m_1_m3 + exp_x_msb_4_lsb_m_1_m2;

            ap_ufixed<32,-36> exp_x_msb_4_lsb_m_1_m = exp_x_msb_4_lsb_m_1_m3;
            exp_x_msb_4_lsb_m_1_m(2,0) = f_x_msb_4(2,0);

            ap_ufixed<50,-18> exp_x_msb_4_lsb_m_1 = 0;
            exp_x_msb_4_lsb_m_1(49,36) = x_l(13,0);
            exp_x_msb_4_lsb_m_1(31, 0) = exp_x_msb_4_lsb_m_1_m(31,0);


            const static ap_ufixed<51,-21> f_x_msb_3_table[256] = {
"0x0", "0x0.00000000080000AAAAp0", "0x0.000000002000055556p0", "0x0.000000004800120003p0",
"0x0.0000000080002AAAB5p0", "0x0.00000000C80053556Fp0", "0x0.000000012000900036p0", "0x0.000000018800E4AB0Ep0",
"0x0.000000020001555600p0", "0x0.000000028801E60111p0", "0x0.0000000320029AAC4Bp0", "0x0.00000003C8037757B7p0",
"0x0.000000048004800360p0", "0x0.000000054805B8AF50p0", "0x0.000000062007255B96p0", "0x0.000000070808CA083Dp0",
"0x0.00000008000AAAB555p0", "0x0.00000009080CCB62EDp0", "0x0.0000000A200F301116p0", "0x0.0000000B4811DCBFE0p0",
"0x0.0000000C8014D56F60p0", "0x0.0000000DC8181E1FA7p0", "0x0.0000000F201BBAD0CBp0", "0x0.00000010881FAF82E1p0",
"0x0.000000120024003600p0", "0x0.000000138828B0EA3Fp0", "0x0.00000015202DC59FB6p0", "0x0.00000016C83342567Fp0",
"0x0.0000001880392B0EB5p0", "0x0.0000001A483F83C874p0", "0x0.0000001C20465083D6p0", "0x0.0000001E084D9540FBp0",
"0x0.000000200055560001p0", "0x0.00000022085D96C106p0", "0x0.0000002420665B842Cp0", "0x0.00000026486FA84995p0",
"0x0.000000288079811161p0", "0x0.0000002AC883E9DBB6p0", "0x0.0000002D208EE6A8B8p0", "0x0.0000002F889A7B788Cp0",
"0x0.0000003200A6AC4B58p0", "0x0.0000003488B37D2145p0", "0x0.0000003720C0F1FA7Ap0", "0x0.00000039C8CF0ED721p0",
"0x0.0000003C80DDD7B765p0", "0x0.0000003F48ED509B71p0", "0x0.0000004220FD7D8371p0", "0x0.00000045090E626F94p0",
"0x0.000000480120036008p0", "0x0.0000004B09326454FBp0", "0x0.0000004E2145894E9Fp0", "0x0.000000514959764D26p0",
"0x0.00000054816E2F50C1p0", "0x0.00000057C983B859A4p0", "0x0.0000005B219A156804p0", "0x0.0000005E89B14A7C16p0",
"0x0.0000006201C95B9611p0", "0x0.0000006589E24CB62Cp0", "0x0.0000006921FC21DCA0p0", "0x0.0000006CCA16DF09A6p0",
"0x0.000000708232883D78p0", "0x0.000000744A4F217853p0", "0x0.00000078226CAEBA73p0", "0x0.0000007C0A8B340414p0",
"0x0.0000008002AAB55577p0", "0x0.000000840ACB36AEDAp0", "0x0.0000008822ECBC107Dp0", "0x0.0000008C4B0F497AA3p0",
"0x0.000000908332E2ED8Ep0", "0x0.00000094CB578C6981p0", "0x0.00000099237D49EEC0p0", "0x0.0000009D8BA41F7D92p0",
"0x0.000000A203CC11163Dp0", "0x0.000000A68BF522B908p0", "0x0.000000AB241F58663Cp0", "0x0.000000AFCC4AB61E22p0",
"0x0.000000B484773FE105p0", "0x0.000000B94CA4F9AF31p0", "0x0.000000BE24D3E788F1p0", "0x0.000000C30D040D6E94p0",
"0x0.000000C805356F6068p0", "0x0.000000CD0D68115EBCp0", "0x0.000000D2259BF769E1p0", "0x0.000000D74DD1258228p0",
"0x0.000000DC86079FA7E4p0", "0x0.000000E1CE3F69DB69p0", "0x0.000000E72678881D0Bp0", "0x0.000000EC8EB2FE6D1Fp0",
"0x0.000000F206EED0CBFDp0", "0x0.000000F78F2C0339FAp0", "0x0.000000FD276A99B771p0", "0x0.00000102CFAA9844BBp0",
"0x0.0000010887EC02E231p0", "0x0.0000010E502EDD9030p0", "0x0.0000011428732C4F14p0", "0x0.0000011A10B8F31F3Bp0",
"0x0.000001200900360103p0", "0x0.000001261148F8F4CBp0", "0x0.0000012C29933FFAF5p0", "0x0.0000013251DF0F13E1p0",
"0x0.000001388A2C6A3FF3p0", "0x0.0000013ED27B557F8Dp0", "0x0.000001452ACBD4D315p0", "0x0.0000014B931DEC3AEFp0",
"0x0.000001520B719FB782p0", "0x0.0000015893C6F34937p0", "0x0.0000015F2C1DEAF074p0", "0x0.00000165D4768AADA5p0",
"0x0.0000016C8CD0D68133p0", "0x0.00000173552CD26B89p0", "0x0.0000017A2D8A826D16p0", "0x0.0000018115E9EA8645p0",
"0x0.000001880E4B0EB785p0", "0x0.0000018F16ADF30147p0", "0x0.000001962F129B63FAp0", "0x0.0000019D57790BE010p0",
"0x0.000001A48FE14875FBp0", "0x0.000001ABD84B552630p0", "0x0.000001B330B735F122p0", "0x0.000001BA9924EED748p0",
"0x0.000001C2119483D917p0", "0x0.000001C99A05F8F707p0", "0x0.000001D13279523191p0", "0x0.000001D8DAEE93892Ep0",
"0x0.000001E09365C0FE59p0", "0x0.000001E85BDEDE918Dp0", "0x0.000001F03459F04347p0", "0x0.000001F81CD6FA1405p0",
"0x0.000002001556000444p0", "0x0.000002081DD7061485p0", "0x0.00000210365A104547p0", "0x0.000002185EDF22970Dp0",
"0x0.000002209766410A5Ap0", "0x0.00000228DFEF6F9FAFp0", "0x0.00000231387AB25793p0", "0x0.00000239A1080D328Ap0",
"0x0.00000242199784311Cp0", "0x0.0000024AA2291B53CFp0", "0x0.000002533ABCD69B2Dp0", "0x0.0000025BE352BA07BEp0",
"0x0.000002649BEAC99A0Dp0", "0x0.0000026D64850952A7p0", "0x0.000002763D217D3216p0", "0x0.0000027F25C02938EAp0",
"0x0.000002881E611167B0p0", "0x0.00000291270439BEF8p0", "0x0.0000029A3FA9A63F53p0", "0x0.000002A368515AE951p0",
"0x0.000002ACA0FB5BBD86p0", "0x0.000002B5E9A7ACBC86p0", "0x0.000002BF425651E6E4p0", "0x0.000002C8AB074F3D36p0",
"0x0.000002D223BAA8C013p0", "0x0.000002DBAC70627012p0", "0x0.000002E54528804DCDp0", "0x0.000002EEEDE30659DBp0",
"0x0.000002F8A69FF894D9p0", "0x0.000003026F5F5AFF61p0", "0x0.0000030C4821319A10p0", "0x0.0000031630E5806584p0",
"0x0.0000032029AC4B625Bp0", "0x0.0000032A3275969134p0", "0x0.000003344B4165F2B1p0", "0x0.0000033E740FBD8772p0",
"0x0.00000348ACE0A1501Bp0", "0x0.00000352F5B4154D4Fp0", "0x0.0000035D4E8A1D7FB2p0", "0x0.00000367B762BDE7EAp0",
"0x0.00000372303DFA869Ep0", "0x0.0000037CB91BD75C75p0", "0x0.0000038751FC586A18p0", "0x0.00000391FADF81B02Fp0",
"0x0.0000039CB3C5572F67p0", "0x0.000003A77CADDCE86Ap0", "0x0.000003B2559916DBE4p0", "0x0.000003BD3E87090A84p0",
"0x0.000003C83777B774F8p0", "0x0.000003D3406B261BF0p0", "0x0.000003DE596159001Cp0", "0x0.000003E9825A54222Dp0",
"0x0.000003F4BB561B82D7p0", "0x0.000004000454B322CCp0", "0x0.0000040B5D561F02C2p0", "0x0.00000416C65A63236Ep0",
"0x0.000004223F61838586p0", "0x0.0000042DC86B8429C2p0", "0x0.0000043961786910DBp0", "0x0.000004450A88363B8Ap0",
"0x0.00000450C39AEFAA8Ap0", "0x0.0000045C8CB0995E96p0", "0x0.0000046865C937586Bp0", "0x0.000004744EE4CD98C6p0",
"0x0.000004804803602067p0", "0x0.0000048C5124F2F00Cp0", "0x0.000004986A498A0876p0", "0x0.000004A49371296A67p0",
"0x0.000004B0CC9BD516A1p0", "0x0.000004BD15C9910DE8p0", "0x0.000004C96EFA615101p0", "0x0.000004D5D82E49E0B0p0",
"0x0.000004E251654EBDBDp0", "0x0.000004EEDA9F73E8F0p0", "0x0.000004FB73DCBD6310p0", "0x0.000005081D1D2F2CE7p0",
"0x0.00000514D660CD4740p0", "0x0.000005219FA79BB2E7p0", "0x0.0000052E78F19E70A8p0", "0x0.0000053B623ED98150p0",
"0x0.000005485B8F50E5AFp0", "0x0.0000055564E3089E93p0", "0x0.000005627E3A04ACCEp0", "0x0.0000056FA794491131p0",
"0x0.0000057CE0F1D9CC8Ep0", "0x0.0000058A2A52BADFBAp0", "0x0.0000059783B6F04B88p0", "0x0.000005A4ED1E7E10CFp0",
"0x0.000005B26689683064p0", "0x0.000005BFEFF7B2AB20p0", "0x0.000005CD89696181DBp0", "0x0.000005DB32DE78B56Fp0",
"0x0.000005E8EC56FC46B6p0", "0x0.000005F6B5D2F0368Cp0", "0x0.000006048F525885CDp0", "0x0.0000061278D5393558p0",
"0x0.00000620725B96460Ap0", "0x0.0000062E7BE573B8C3p0", "0x0.0000063C9572D58E64p0", "0x0.0000064ABF03BFC7CEp0",
"0x0.00000658F8983665E5p0", "0x0.0000066742303D698Bp0", "0x0.000006759BCBD8D3A5p0", "0x0.00000684056B0CA519p0",
"0x0.000006927F0DDCDECEp0", "0x0.000006A108B44D81AAp0", "0x0.000006AFA25E628E98p0", "0x0.000006BE4C0C20067Fp0",
"0x0.000006CD05BD89EA4Bp0", "0x0.000006DBCF72A43AE8p0", "0x0.000006EAA92B72F942p0", "0x0.000006F992E7FA2646p0",
"0x0.000007088CA83DC2E4p0", "0x0.00000717966C41D00Ap0", "0x0.00000726B0340A4EAAp0", "0x0.00000735D9FF9B3FB6p0",
"0x0.0000074513CEF8A41Ep0", "0x0.000007545DA2267CD9p0", "0x0.00000763B77928CAD9p0", "0x0.000007732154038F14p0",
"0x0.000007829B32BACA82p0", "0x0.000007922515527E1Ap0", "0x0.000007A1BEFBCEAAD4p0", "0x0.000007B168E63351AAp0",
"0x0.000007C122D4847397p0", "0x0.000007D0ECC6C61195p0", "0x0.000007E0C6BCFC2CA3p0", "0x0.000007F0B0B72AC5BEp0",
            };
_ssdm_SpecConstant(f_x_msb_3_table);
# 686 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<51,-21> f_x_msb_3 = f_x_msb_3_table[x_msb_ind_3];
            ap_ufixed<62,-10> exp_x_msb_3_m_1 = 0;
            exp_x_msb_3_m_1(61,54) = x_msb_3(7,0);
            exp_x_msb_3_m_1(50, 0) = f_x_msb_3(50,0);

            ap_ufixed<50,-10> exp_x_msb_3_m_1_s = exp_x_msb_3_m_1;
            ap_ufixed<100,-28> f_x_msb_3_4_lsb = exp_x_msb_3_m_1_s * exp_x_msb_4_lsb_m_1;
            ap_ufixed<44,-28> f_x_msb_3_4_lsb_s = f_x_msb_3_4_lsb;
            ap_ufixed<63, -9> exp_x_msb_3_4_lsb_m_1 = f_x_msb_3_4_lsb_s + exp_x_msb_3_m_1 + exp_x_msb_4_lsb_m_1;


            const static ap_ufixed<64,-4> f_x_msb_2_table[256] = {
"0x0.0p0", "0x0.00000800AAB555DDEp0", "0x0.00002005560011127p0", "0x0.00004812036081A9Cp0",
"0x0.0000802AB55777D28p0", "0x0.0000C8536F6684062p0", "0x0.0001209036103740Dp0", "0x0.000188E50ED8634A0p0",
"0x0.0002015600445B0C3p0", "0x0.000289E711DB32FD7p0", "0x0.0003229C4C260197Ep0", "0x0.0003CB79B8B01FE26p0",
"0x0.0004848362076A08Dp0", "0x0.00054DBD53BC80058p0", "0x0.0006272B9A630659Dp0", "0x0.000710D24391E6D7Ap0",
"0x0.00080AB55DE3917ABp0", "0x0.000914D8F8F63D524p0", "0x0.000A2F41256C297AFp0", "0x0.000B59F1F4EBDE291p0",
"0x0.000C94EF7A206DC2Dp0", "0x0.000DE03DC8B9B60B1p0", "0x0.000F3BE0F56CA15C4p0", "0x0.0010A7DD15F367F40p0",
"0x0.00122436410DD14E5p0", "0x0.0013B0F08E817591Ep0", "0x0.00154E101719FF0C5p0", "0x0.0016FB98F4A96BBEFp0",
"0x0.0018B98F42084EFBDp0", "0x0.001A87F71B1613137p0", "0x0.001C66D49CB93B127p0", "0x0.001E562BE4DFA4904p0",
"0x0.00205601127EC98E0p0", "0x0.00226658459402659p0", "0x0.002487359F24C7C99p0", "0x0.0026B89D413EF4D5Ep0",
"0x0.0028FA934EF909304p0", "0x0.002B4D1BEC726B39Cp0", "0x0.002DB03B3ED3AA50Ep0", "0x0.003023F56C4EC123Fp0",
"0x0.0032A84E9C1F58145p0", "0x0.00353D4AF68B07AA1p0", "0x0.0037E2EEA4E19B185p0", "0x0.003A993DD17D52D25p0",
"0x0.003D603CA7C32730Fp0", "0x0.004037EF54230B293p0", "0x0.0043205A04182F12Fp0", "0x0.00461980E62943810p0",
"0x0.0049236829E8BC292p0", "0x0.004C3E13FFF512DD8p0", "0x0.004F698899F90A966p0", "0x0.0052A5CA2AABF28D0p0",
"0x0.0055F2DCE5D1E966Ep0", "0x0.005950C5003C20723p0", "0x0.005CBF86AFC91EF2Bp0", "0x0.00603F262B65057FCp0",
"0x0.0063CFA7AB09D1732p0", "0x0.0067710F67BFA0687p0", "0x0.006B23619B9CF3CDEp0", "0x0.006EE6A281C6F4857p0",
"0x0.0072BAD65671B6977p0", "0x0.0076A00156E07CF57p0", "0x0.007A9627C165FD4EDp0", "0x0.007E9D4DD564A3F5Ep0",
"0x0.0082B577D34ED7D5Bp0", "0x0.0086DEA9FCA73E799p0", "0x0.008B18E8940100253p0", "0x0.008F6437DD000BFDAp0",
"0x0.0093C09C1C595C43Ep0", "0x0.00982E1997D33A9FCp0", "0x0.009CACB49645847CCp0", "0x0.00A13C715F99EF773p0",
"0x0.00A5DD543CCC4DDAFp0", "0x0.00AA8F6177EAD3336p0", "0x0.00AF529D5C1658EBCp0", "0x0.00B4270C3582A301Dp0",
"0x0.00B90CB25176A4C8Bp0", "0x0.00BE0393FE4CC5BD7p0", "0x0.00C30BB58B73266CAp0", "0x0.00C8251B496BE5696p0",
"0x0.00CD4FC989CD64555p0", "0x0.00D28BC49F428CFA3p0", "0x0.00D7D910DD8B16743p0", "0x0.00DD37B2997BCA6E6p0",
"0x0.00E2A7AE28FECA6FBp0", "0x0.00E82907E313D5399p0", "0x0.00EDBBC41FD08C383p0", "0x0.00F35FE73860B9038p0",
"0x0.00F91575870692F24p0", "0x0.00FEDC73671B04BDFp0", "0x0.0104B4E5350DF2386p0", "0x0.010A9ECF4E667E12Dp0",
"0x0.01109A3611C34FB64p0", "0x0.0116A71DDEDAD92D8p0", "0x0.011CC58B167B9D206p0", "0x0.0122F5821A8C74E0Dp0",
"0x0.012937074E0CD6893p0", "0x0.012F8A1F15151B2C6p0", "0x0.0135EECDD4D6C5172p0", "0x0.013C6517F39CC6233p0",
"0x0.0142ED01D8CBC61C4p0", "0x0.0149868FECE26935Dp0", "0x0.015031C6997996937p0", "0x0.0156EEAA4944BEE23p0",
"0x0.015DBD3F68122303Ep0", "0x0.01649D8A62CB1ACBEp0", "0x0.016B8F8FA7745BCDBp0", "0x0.01729353A52E403D8p0",
"0x0.0179A8DACC350DE1Dp0", "0x0.0180D0298DE13D179p0", "0x0.018809445CA7BFE78p0", "0x0.018F542FAC1A492D6p0",
"0x0.0196B0EFF0E793D15p0", "0x0.019E1F89A0DBAA128p0", "0x0.01A5A00132E02CE42p0", "0x0.01AD325B1EFC9B5BCp0",
"0x0.01B4D69BDE569A322p0", "0x0.01BC8CC7EB323B553p0", "0x0.01C454E3C0F2458C8p0", "0x0.01CC2EF3DC187C2F6p0",
"0x0.01D41AFCBA45E6ED2p0", "0x0.01DC1902DA3B19A6Dp0", "0x0.01E4290ABBD87C5BCp0", "0x0.01EC4B18E01E9326Fp0",
"0x0.01F47F31C92E464FCp0", "0x0.01FCC559FA492A6B6p0", "0x0.02051D95F7D1C8917p0", "0x0.020D87EA474BE6A1Cp0",
"0x0.0216045B6F5CCF9CEp0", "0x0.021E92EDF7CB9C0E4p0", "0x0.022733A669817A88Ap0", "0x0.022FE6894E89F834Cp0",
"0x0.0238AB9B321349722p0", "0x0.024182E0A06E9289Bp0", "0x0.024A6C5E271030733p0", "0x0.02536818549001AC1p0",
"0x0.025C7613B8A9AF215p0", "0x0.02659654E43CF52B1p0", "0x0.026EC8E0694DEC9A9p0", "0x0.02780DBADB0553DA6p0",
"0x0.028164E8CDB0D8211p0", "0x0.028ACE6ED6C35EB5Fp0", "0x0.02944A518CD54E484p0", "0x0.029DD89587A4D858Dp0",
"0x0.02A7793F601642B5Dp0", "0x0.02B12C53B03431090p0", "0x0.02BAF1D7132FEE788p0", "0x0.02C4C9CE2561B759Fp0",
"0x0.02CEB43D844902F7Ap0", "0x0.02D8B129CE8CCD68Fp0", "0x0.02E2C097A3FBE17C9p0", "0x0.02ECE28BA58D22B56p0",
"0x0.02F7170A755FD759Ep0", "0x0.03015E18B6BBF2966p0", "0x0.030BB7BB0E125EB13p0", "0x0.031623F620FD4751Ep0",
"0x0.0320A2CE964063DACp0", "0x0.032B344915C941D54p0", "0x0.0335D86A48AF8F70Cp0", "0x0.03408F36D93566140p0",
"0x0.034B58B372C795013p0", "0x0.035634E4C1FDEC0D0p0", "0x0.036123CF749B8667Cp0", "0x0.036C2578398F157A0p0",
"0x0.037739E3C0F32BD30p0", "0x0.03826116BC0E882ACp0", "0x0.038D9B15DD5460763p0", "0x0.0398E7E5D864AD0E9p0",
"0x0.03A4478B620C73EB5p0", "0x0.03AFBA0B304613EEDp0", "0x0.03BB3F69FA3990464p0", "0x0.03C6D7AC783CDBDBFp0",
"0x0.03D282D763D424DCDp0", "0x0.03DE40EF77B220509p0", "0x0.03EA11F96FB855C4Fp0", "0x0.03F5F5FA08F76B0BBp0",
"0x0.0401ECF601AF700BDp0", "0x0.040DF6F219502AA55p0", "0x0.041A13F3107962A88p0", "0x0.042643FDA8FB2DDFBp0",
"0x0.04328716A5D63C2C4p0", "0x0.043EDD42CB3C23B6Dp0", "0x0.044B4686DE8FAD325p0", "0x0.0457C2E7A66520322p0",
"0x0.04645269EA828F932p0", "0x0.0470F51273E025F89p0", "0x0.047DAAE60CA8725B3p0", "0x0.048A73E98038B4ABFp0",
"0x0.049750219B212A8A0p0", "0x0.04A43F932B255C0B7p0", "0x0.04B14242FF3C689A0p0", "0x0.04BE5835E79153E1Dp0",
"0x0.04CB8170B58352D4Ep0", "0x0.04D8BDF83BA618C04p0", "0x0.04E60DD14DC22475Ep0", "0x0.04F37100C0D50D88Ep0",
"0x0.0500E78B6B11D19D6p0", "0x0.050E717623E121CBAp0", "0x0.051C0EC5C3E1B016Cp0", "0x0.0529BF7F24E87CF6Ap0",
"0x0.053783A7220124F51p0", "0x0.05455B42976E2E5EAp0", "0x0.0553465662A95706Bp0", "0x0.056144E76263E21F4p0",
"0x0.056F56FA7686E623Ep0", "0x0.057D7C9480339AD83p0", "0x0.058BB5BA61C3A75A3p0", "0x0.059A0270FEC97047Ap0",
"0x0.05A862BD3C1065F74p0", "0x0.05B6D6A3FF9D52C58p0", "0x0.05C55E2A30AEA974Ep0", "0x0.05D3F954B7BCD3A1Bp0",
"0x0.05E2A8287E7A8049Ep0", "0x0.05F16AAA6FD4F267Bp0", "0x0.060040DF77F44FA13p0", "0x0.060F2ACC843BEF0A0p0",
"0x0.061E2876834AA7FA4p0", "0x0.062D39E264FB20F7Ep0", "0x0.063C5F151A641EB4Cp0", "0x0.064B981395D8D31FEp0",
"0x0.065AE4E2CAE92C8AAp0", "0x0.066A4587AE6224E1Cp0", "0x0.0679BA07364E10FA3p0", "0x0.0689426659F4EFF1Bp0",
"0x0.0698DEAA11DCBAA37p0", "0x0.06A88ED757C9B3304p0", "0x0.06B852F326BEB49B0p0", "0x0.06C82B027AFD8278Ap0",
"0x0.06D8170A520718B46p0", "0x0.06E8170FAA9BFB67Ep0", "0x0.06F82B1784BC86C72p0", "0x0.07085326E1A93F207p0",
"0x0.07188F42C3E320F0Bp0", "0x0.0728DF702F2BF10B2p0", "0x0.073943B428868CD5Ap0", "0x0.0749BC13B6373A98Fp0",
"0x0.075A4893DFC3F9E4Cp0", "0x0.076AE939ADF4D4083p0", "0x0.077B9E0A2AD42C9E8p0", "0x0.078C670A61AF122F4p0",
"0x0.079D443F5F158EE3Ap0", "0x0.07AE35AE30DAF94F1p0", "0x0.07BF3B5BE616454CBp0", "0x0.07D0554D8F2254F0Cp0",
"0x0.07E183883D9E498E2p0", "0x0.07F2C611046DD4D06p0", "0x0.08041CECF7B989EA2p0", "0x0.081588212CEF2ED73p0",
"0x0.082707B2BAC20DB40p0", "0x0.08389BA6B92B46284p0", "0x0.084A4402416A1EE6Fp0", "0x0.085C00CA6E045741Fp0",
"0x0.086DD2045AC678D2Bp0", "0x0.087FB7B524C42936Cp0", "0x0.0891B1E1EA587BE12p0", "0x0.08A3C08FCB2643FFEp0",
            };
_ssdm_SpecConstant(f_x_msb_2_table);
# 763 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<64,-4> f_x_msb_2 = f_x_msb_2_table[x_msb_ind_2];
            ap_ufixed< 6,-4> f_x_msb_2_h;
            f_x_msb_2_h(5,0) = f_x_msb_2(63,58);
            ap_ufixed< 9,-1> exp_x_msb_2_m_1_h = f_x_msb_2_h + x_msb_2;
            ap_ufixed<67,-1> exp_x_msb_2_m_1;
            exp_x_msb_2_m_1(66,58) = exp_x_msb_2_m_1_h(8,0);
            exp_x_msb_2_m_1(57, 0) = f_x_msb_2(57,0);

            ap_ufixed<130,-10> f_x_msb_2_3_4_lsb = exp_x_msb_2_m_1 * exp_x_msb_3_4_lsb_m_1;
            ap_ufixed<62,-10> f_x_msb_2_3_4_lsb_s = f_x_msb_2_3_4_lsb;
            ap_ufixed<72,0> exp_x_msb_2_3_4_lsb_m_1 = f_x_msb_2_3_4_lsb_s + exp_x_msb_2_m_1 + exp_x_msb_3_4_lsb_m_1;

            const static ap_ufixed<68,32> exp_x_msb_1_table[256] = {
"0x1.000000000p0", "0x1.48B5E3C3Ep0", "0x1.A61298E1Ep0", "0x2.1DF3B68CFp0",
"0x2.B7E151628p0", "0x3.7D871DB61p0", "0x4.7B4FF993Fp0", "0x5.C12DA416Ep0",
"0x7.63992E353p0", "0x9.7CDC417A3p0", "0xC.2EB7EC98Fp0", "0xF.A48385EDFp0",
"0x14.15E5BF6FBp0", "0x19.CA53B7811p0", "0x21.1D8E4272Dp0", "0x2A.8565A144Cp0",
"0x36.99205C4E7p0", "0x46.1AFC4DB59p0", "0x5A.0462B7877p0", "0x73.9593ABB7Dp0",
"0x94.69C4CB819p0", "0xBE.90F6F83E9p0", "0xF4.B122790DDp0", "0x13A.30CF1CCBBp0",
"0x193.6DC5690C0p0", "0x206.03487A3B1p0", "0x299.2442102D9p0", "0x356.0F0B0F980p0",
"0x448.A216ABB76p0", "0x580.1AD754FA3p0", "0x710.0ADBAC7DAp0", "0x911.9289C3923p0",
"0xBA4.F53EA3863p0", "0xEF3.A035D5798p0", "0x1332.C4D2B7C4Ap0", "0x18A6.B027DA0A7p0",
"0x1FA7.157C470F8p0", "0x28A4.90D2CCEF1p0", "0x342F.BA11823B8p0", "0x4302.3A933EE5Cp0",
"0x560A.773E54157p0", "0x6E7A.8ABB4A83Cp0", "0x8DDB.80AF4269Dp0", "0xB626.0748BAEC7p0",
"0xE9E2.2447727BFp0", "0x12C4F.EB75B2AB0p0", "0x1819B.C560F6113p0", "0x1EF21.8F1B001A4p0",
"0x27BC2.CA9A6F934p0", "0x33055.49F35D91Fp0", "0x41831.49596E996p0", "0x541E7.E56949D58p0",
"0x6C02D.645AB2554p0", "0x8AB06.0A3EE9FB1p0", "0xB2148.5EAE56C5Bp0", "0xE4A8D.2881EDBE8p0",
"0x1259AC.48BF05D6Ep0", "0x178FEE.7792E44B3p0", "0x1E4127.437732B71p0", "0x26D8F9.4A204BEA5p0",
"0x31E199.5F5A550DDp0", "0x400C7D.64D3386CBp0", "0x523D82.79EDAEF9Cp0", "0x69993D.D4F2D9524p0",
"0x87975E.854001024p0", "0xAE1A47.C38A42CD0p0", "0xDF8D5F.6DCFE5CEAp0", "0x11F0BF8.1E99FDEB6p0",
"0x1709348.C0EA4F8CEp0", "0x1D94295.464477ACCp0", "0x25FAD90.65C78E342p0", "0x30C4623.616ED2BE2p0",
"0x3E9E441.232817A61p0", "0x506744D.3B342FC94p0", "0x673D70B.C00F1F76Dp0", "0x849012B.C127FC962p0",
"0xAA36C7C.F69370B94p0", "0xDA8F202.DD9ACE661p0", "0x118A2AAE.0AA05236Bp0", "0x16857CFA.1AA8A5555p0",
"0x1CEB088B.68E804021p0", "0x2521AEDA.32CD52BE5p0", "0x2FAD89E1.79BAB8EADp0", "0x3D3838C6.BE0F13F06p0",
"0x4E9B87F6.7BB3F5597p0", "0x64EF201B.01109A4A5p0", "0x819A1801.9394C0D96p0", "0xA6698403.CF5D9E663p0",
"0xD5AD6DCE.21AFFC0DDp0", "0x1125E066B.0B19418CCp0", "0x1604B68CF.05F65FAA9p0", "0x1C45AED0A.D0C934CDCp0",
"0x244D5E676.3FB814AF0p0", "0x2E9CEBF49.9C21839C7p0", "0x3BDA2CBD0.9F5AC2146p0", "0x4CDA0FD41.989F004E7p0",
"0x62ADFED51.D7EDCCDE6p0", "0x7EB50B520.76F91D6E8p0", "0xA2B1FD3D9.A57B6C33Cp0", "0xD0E7A50F4.EF0D7447Fp0",
"0x10C3D39209.62C88AAFBp0", "0x1586D0722B.3EEB27301p0", "0x1BA4068AAC.2B6E3EE34p0", "0x237DCBF1E5.709A9F9C1p0",
"0x2D9264D2D4.D6B94153Bp0", "0x3A83F23B18.FE5BD524Ap0", "0x4B22A1B5C3.27A2FD85Ap0", "0x6079C1866C.71A93951Dp0",
"0x7BE08BDFD9.CC72249ABp0", "0x9F0FB7309C.B446D3919p0", "0xCC3D265776.C3D25779Ep0", "0x1063F7612B0.C0831CA6Cp0",
"0x150BBA37963.79A4FB6ADp0", "0x1B05FA9B62E.737D935B8p0", "0x22B2DC5C41D.AD89559EBp0", "0x2C8DD1AB28B.404414BE7p0",
"0x39355C8C638.0AC5631B1p0", "0x49750434675.301B8D0E7p0", "0x5E521E7A16E.51F9CD3C2p0", "0x791C3B06F8B.EA2DEC48Cp0",
"0x9B823857614.764F43E20p0", "0xC7AD559D438.E7C270C30p0", "0x10063F4E687B.A1A43A35Bp0", "0x149363C905BA.3641D0164p0",
"0x1A6B765D8CDF.6CDBF1C63p0", "0x21EC75240E66.E2891CE63p0", "0x2B8F1073A6AF.BA219DB61p0", "0x37EE3FFC0063.E360F931Fp0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000001p0", "0x0.000000001p0", "0x0.000000002p0",
"0x0.000000002p0", "0x0.000000003p0", "0x0.000000004p0", "0x0.000000005p0",
"0x0.000000007p0", "0x0.000000009p0", "0x0.00000000Bp0", "0x0.00000000Ep0",
"0x0.000000013p0", "0x0.000000018p0", "0x0.00000001Fp0", "0x0.000000028p0",
"0x0.000000034p0", "0x0.000000042p0", "0x0.000000055p0", "0x0.00000006Ep0",
"0x0.00000008Dp0", "0x0.0000000B5p0", "0x0.0000000E9p0", "0x0.00000012Bp0",
"0x0.000000181p0", "0x0.0000001EEp0", "0x0.00000027Ap0", "0x0.00000032Fp0",
"0x0.000000416p0", "0x0.00000053Fp0", "0x0.0000006BDp0", "0x0.0000008A7p0",
"0x0.000000B1Cp0", "0x0.000000E44p0", "0x0.000001252p0", "0x0.000001786p0",
"0x0.000001E35p0", "0x0.0000026C9p0", "0x0.0000031CEp0", "0x0.000003FF3p0",
"0x0.00000521Dp0", "0x0.000006970p0", "0x0.000008762p0", "0x0.00000ADD6p0",
"0x0.00000DF36p0", "0x0.000011E9Cp0", "0x0.000017003p0", "0x0.00001D88Ap0",
"0x0.000025EC0p0", "0x0.000030B15p0", "0x0.00003E85Dp0", "0x0.00005047Ep0",
"0x0.000067153p0", "0x0.0000845C6p0", "0x0.0000A9F46p0", "0x0.0000DA39Ep0",
"0x0.000118354p0", "0x0.000167CB5p0", "0x0.0001CDFC2p0", "0x0.000251334p0",
"0x0.0002F9AF3p0", "0x0.0003D205Ap0", "0x0.0004E7CE2p0", "0x0.00064C7C6p0",
"0x0.000816791p0", "0x0.000A628A3p0", "0x0.000D55A1Fp0", "0x0.00111F30Fp0",
"0x0.0015FC210p0", "0x0.001C3AA91p0", "0x0.00243F374p0", "0x0.002E8ABFCp0",
"0x0.003BC2D73p0", "0x0.004CBC19Ap0", "0x0.006287862p0", "0x0.007E83A56p0",
"0x0.00A2728F8p0", "0x0.00D096336p0", "0x0.010BD4A5Ap0", "0x0.0157E6BFEp0",
"0x0.01B993FE0p0", "0x0.0236FF5BFp0", "0x0.02D80A08Dp0", "0x0.03A6D2222p0",
"0x0.04B0556E0p0", "0x0.0605424D5p0", "0x0.07BB04063p0", "0x0.09ED1B429p0",
"0x0.0CBED8666p0", "0x0.105D93892p0", "0x0.150385C09p0", "0x0.1AFB718E8p0",
"0x0.22A555477p0", "0x0.2C7C72FC0p0", "0x0.391F0EE49p0", "0x0.495860DCAp0",
"0x0.5E2D58D8Bp0", "0x0.78ED03AFBp0", "0x0.9B4597E37p0", "0x0.C75F7CF56p0",
            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 841 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<68,32> exp_x_msb_1 = exp_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<140,32> y_lo = exp_x_msb_1 * exp_x_msb_2_3_4_lsb_m_1;
            ap_ufixed<68,32> y_lo_s = y_lo;
            ap_ufixed<68,32> y_l = y_lo_s + exp_x_msb_1;
            y = y_l;
        }
        if (I_<33) {
            bool overf = 0;
#pragma unroll
 for (int j = 63; j >= I_+31; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 63; j >= I_+31; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+30; j >= 0; j--)
                    y[j] = 1;
            }
        }
        r = y;
    }
    return r;
}


template<int WO_, int I_, int WI_>
ap_fixed<WO_,I_> exp_core(ap_fixed<WI_,I_> x)
{
#pragma HLS pipeline

 const static int FO_ = WO_ - I_;
_ssdm_SpecConstant(&FO_);
# 940 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

    const static int FI_ = WI_ - I_;
_ssdm_SpecConstant(&FI_);
# 941 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"



    if (I_>33) return 0;
    else if (FO_>32) return 0;
    else if (FI_>100) return 0;




    int I_s_;
    int M_ = (I_-1>FO_) ? (I_-1) : FO_;
    if (M_==1) I_s_ = 1;
    else if (M_==2) I_s_ = 2;
    else if (M_<6) I_s_ = 3;
    else if (M_<12) I_s_ = 4;
    else if (M_<24) I_s_ = 5;
    else I_s_ = 6;

    ap_fixed<WO_,I_> r = 0;

    ap_ufixed<1,-FO_> delta = 0;
    delta[0] = 1;

    if (I_s_==1) {






        const static int w = 7;
_ssdm_SpecConstant(&w);
# 972 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int we = 2;
_ssdm_SpecConstant(&we);
# 973 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int wf = 5;
_ssdm_SpecConstant(&wf);
# 974 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


        ap_fixed<w,we> x_l = x;
        ap_ufixed<3,2> y = 0;
        ap_ufixed<5,0> x_l_fract=0;
        x_l_fract(4,0) = x_l(4,0);


        if (x_l[6]!=x_l[5]) {
            if (!x_l[6]) y = "0x1.8p0";
        } else {
            if (!x_l[6]) y[1] = 1;

            if (!x_l[6]&(x_l[4]|(x_l[2]&x_l[3]))) y[0]=1;
            if (!x_l[6]&x_l[2]&x_l[3]) y[0]=1;
            if (x_l[6]&((x_l[4]&x_l[3])|x_l[5])) y[0] = 1;
            if (x_l[6]&x_l[5]&!x_l[4]&x_l[3]&!x_l[2]&x_l[1]) y[0] = 1;
        }
        y += delta;

            if (y[1]|y[2]) {
                y[2] = 0;
                y[1] = 0;
                y[0] = 1;
            }

        r = y;

    } else if (I_s_==2) {
        const static int w = 10;
_ssdm_SpecConstant(&w);
# 1003 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int we = 3;
_ssdm_SpecConstant(&we);
# 1004 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int wf = 7;
_ssdm_SpecConstant(&wf);
# 1005 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"



        ap_fixed<w,we> x_l = x;
        ap_ufixed<5,3> y = 0;
        ap_fixed<2,2> x_l_int;
        x_l_int(1,0) = x_l(wf+1,wf);
        ap_ufixed<7,0> x_l_fract;
        x_l_fract(6,0) = x_l(6,0);

        ap_uint<5> x_msb_ind;
        x_msb_ind[3] = x_l[w-1];
        x_msb_ind(2,0) = x_l(wf,wf-3);
        ap_ufixed<4,-3> x_lsb = x_l;


        if ((x_l[w-1]!=x_l[w-2])||((x_l_int==1)&&(x_l_fract>=ap_ufixed<wf,0>("0x0.54p0")))) {
            if (!x_l[w-1]) y = "0x3.cp0";
        } else {
            ap_ufixed<5,2> exp_x_msb_table[32] = {
               "0x1.00p0", "0x1.48p0", "0x1.A6p0", "0x2.1Dp0", "0x2.B7p0", "0x3.7Dp0", "0x4.7Bp0", "0x5.C1p0",
               "0x0.22p0", "0x0.2Cp0", "0x0.39p0", "0x0.49p0", "0x0.5Ep0", "0x0.78p0", "0x0.9Bp0", "0x0.C7p0",
            };
            ap_ufixed<5,2> exp_x_msb = exp_x_msb_table[x_msb_ind];


            ap_ufixed<5,0> y_lo = x_lsb * exp_x_msb;

            ap_ufixed<5,2> y_l = y_lo + exp_x_msb;

            y = y_l;
        }
        y += delta;
            bool overf = 0;
#pragma unroll
 for (int j = 4; j >= I_+1; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 4; j >= I_+1; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_; j >= 0; j--)
                    y[j] = 1;
            }
        r = y;
    } else if (I_s_==3) {

        const static int w = 19;
_ssdm_SpecConstant(&w);
# 1055 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int we = 6;
_ssdm_SpecConstant(&we);
# 1056 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int wf = 13;
_ssdm_SpecConstant(&wf);
# 1057 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


        ap_fixed<w,we> x_l = x;
        ap_ufixed<11,6> y = 0;
        ap_fixed<3,3> x_l_int;
        x_l_int(2,0) = x_l(wf+2,wf);
        ap_ufixed<wf,0> x_l_fract;
        x_l_fract(wf-1,0) = x_l(wf-1,0);




        if ((x_l[w-1]!=x_l[w-2])||(x_l[w-1]!=x_l[w-3])||(x_l[w-1]!=x_l[w-4])||((x_l_int==3)&&(x_l_fract>ap_ufixed<wf,0>("0x0.76FAp0")))) {
            if (!x_l[18]) y = "0x1f.f8p0";
        } else {
            const static int g = 2;
_ssdm_SpecConstant(&g);
# 1072 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            const static int Maxprecision = FO_+we+g;
_ssdm_SpecConstant(&Maxprecision);
# 1073 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_uint<4> x_msb_ind_1;
            x_msb_ind_1[3] = x_l[w-1];

            x_msb_ind_1(2,0) = x_l(wf+1,wf-1);

            ap_uint<6> x_msb_ind_2;
            x_msb_ind_2(5,0) = x_l(wf-2,wf-7);
            ap_ufixed<6,-1> x_msb_2 = x_l;

            ap_ufixed<wf-7,-7> x_lsb = x_l;

            const static ap_ufixed<Maxprecision,0> exp_x_msb_2_m_1_table[64] = {
                "0x0.0p0", "0x0.0202p0", "0x0.0408p0", "0x0.0612p0",
                "0x0.0820p0", "0x0.0A32p0", "0x0.0C49p0", "0x0.0E63p0",
                "0x0.1082p0", "0x0.12A5p0", "0x0.14CDp0", "0x0.16F9p0",
                "0x0.1929p0", "0x0.1B5Dp0", "0x0.1D96p0", "0x0.1FD4p0",
                "0x0.2216p0", "0x0.245Cp0", "0x0.26A7p0", "0x0.28F7p0",
                "0x0.2B4Bp0", "0x0.2DA4p0", "0x0.3001p0", "0x0.3264p0",
                "0x0.34CBp0", "0x0.3737p0", "0x0.39A8p0", "0x0.3C1Ep0",
                "0x0.3E98p0", "0x0.4118p0", "0x0.439Dp0", "0x0.4627p0",
                "0x0.48B5p0", "0x0.4B49p0", "0x0.4DE3p0", "0x0.5081p0",
                "0x0.5325p0", "0x0.55CEp0", "0x0.587Cp0", "0x0.5B2Fp0",
                "0x0.5DE9p0", "0x0.60A7p0", "0x0.636Bp0", "0x0.6635p0",
                "0x0.6904p0", "0x0.6BD9p0", "0x0.6EB3p0", "0x0.7194p0",
                "0x0.747Ap0", "0x0.7766p0", "0x0.7A57p0", "0x0.7D4Fp0",
                "0x0.804Dp0", "0x0.8350p0", "0x0.865Ap0", "0x0.896Ap0",
                "0x0.8C80p0", "0x0.8F9Cp0", "0x0.92BEp0", "0x0.95E7p0",
                "0x0.9916p0", "0x0.9C4Bp0", "0x0.9F87p0", "0x0.A2C9p0",
            };
_ssdm_SpecConstant(exp_x_msb_2_m_1_table);
# 1085 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


            ap_ufixed<5,-8> f_x_msb_2_lsb = x_msb_2 * x_lsb;


            ap_ufixed<7,-6> f_x_msb_2_lsb_m_1_m=0;
            f_x_msb_2_lsb_m_1_m(5,0) = x_lsb(5,0);
            f_x_msb_2_lsb_m_1_m = f_x_msb_2_lsb_m_1_m + f_x_msb_2_lsb;


            ap_ufixed<Maxprecision+1,1> exp_x_msb_2_m_1 = exp_x_msb_2_m_1_table[x_msb_ind_2];
            ap_ufixed<Maxprecision,1> exp_x_msb_2_lsb_m_1 = f_x_msb_2_lsb_m_1_m + exp_x_msb_2_m_1;


            const static ap_ufixed<Maxprecision,5> exp_x_msb_1_table[16] = {
                "0x1.0000p0", "0x1.A612p0", "0x2.B7E1p0", "0x4.7B4Fp0",
                "0x7.6399p0", "0xC.2EB7p0", "0x14.15E5p0", "0x21.1D8Ep0",
                "0x0.04B0p0", "0x0.07BBp0", "0x0.0CBEp0", "0x0.1503p0",
                "0x0.22A5p0", "0x0.391Fp0", "0x0.5E2Dp0", "0x0.9B45p0",

            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 1116 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<Maxprecision,5> exp_x_msb = exp_x_msb_1_table[x_msb_ind_1];

            ap_ufixed<2*Maxprecision+1,6> y_lo = exp_x_msb * exp_x_msb_2_lsb_m_1;
            ap_ufixed<Maxprecision,5> y_lo_s = y_lo;
            ap_ufixed<Maxprecision,5> y_l = y_lo_s + exp_x_msb;
            y = y_l;

        }
        y += delta;

            bool overf = 0;
#pragma unroll
 for (int j = 10; j >= I_+4; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 10; j >= I_+4; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+3; j >= 0; j--)
                    y[j] = 1;
            }

        r = y;
    } else if (I_s_==4) {

        const static int wf = 25;
_ssdm_SpecConstant(&wf);
# 1151 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int we = 12;
_ssdm_SpecConstant(&we);
# 1152 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int w = 37;
_ssdm_SpecConstant(&w);
# 1153 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        ap_fixed<w,we> x_l = x;
        ap_ufixed<23,12> y = 0;
        ap_fixed<4,4> x_l_int;
        x_l_int(3,0) = x_l(wf+3,wf);
        ap_ufixed<wf,0> x_l_fract;
        x_l_fract(wf-1,0) = x_l(wf-1,0);
        bool overf = 0;
#pragma unroll
 for (int j = wf+3; j < w-1; j++)
            if (x_l[w-1]!=x_l[j])
                overf = 1;
        if (overf||((x_l_int==7)&&(x_l_fract>ap_ufixed<wf,0>("0x0.9fe7038p0")))) {
            if (!x_l[w-1]) {
#pragma unroll
 for (int j = 0; j < 22; j++) y[j] = 1;
            }
        } else {
            const static int g = 2;
_ssdm_SpecConstant(&g);
# 1171 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            const static int Maxprecision = 25;
_ssdm_SpecConstant(&Maxprecision);
# 1172 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_uint<5> x_msb_ind_1;
            x_msb_ind_1[4] = x_l[w-1];
            x_msb_ind_1(3,0) = x_l(wf+2,wf-1);

            ap_uint<5> x_msb_ind_2;
            x_msb_ind_2(4,0) = x_l(wf-2,wf-6);
            ap_ufixed<5,-1> x_msb_2 = x_l;

            ap_uint<7> x_msb_ind_3;
            x_msb_ind_3(6,0) = x_l(wf-7,wf-13);
            ap_ufixed<7,-6> x_msb_3 = x_l;

            ap_ufixed<7,-13> x_lsb = x_l;

            const static ap_ufixed<12,-13> f_x_msb_3_m_1_table[128] = {
"0x0.0p0", "0x0.0000002p0", "0x0.0000008p0", "0x0.0000012p0",
"0x0.0000020p0", "0x0.0000032p0", "0x0.0000048p0", "0x0.0000062p0",
"0x0.0000080p0", "0x0.00000A2p0", "0x0.00000C8p0", "0x0.00000F2p0",
"0x0.0000120p0", "0x0.0000152p0", "0x0.0000188p0", "0x0.00001C2p0",
"0x0.0000200p0", "0x0.0000242p0", "0x0.0000288p0", "0x0.00002D2p0",
"0x0.0000320p0", "0x0.0000372p0", "0x0.00003C8p0", "0x0.0000422p0",
"0x0.0000481p0", "0x0.00004E3p0", "0x0.0000549p0", "0x0.00005B3p0",
"0x0.0000621p0", "0x0.0000693p0", "0x0.000070Ap0", "0x0.0000784p0",
"0x0.0000802p0", "0x0.0000884p0", "0x0.000090Bp0", "0x0.0000995p0",
"0x0.0000A23p0", "0x0.0000AB6p0", "0x0.0000B4Cp0", "0x0.0000BE6p0",
"0x0.0000C85p0", "0x0.0000D27p0", "0x0.0000DCEp0", "0x0.0000E78p0",
"0x0.0000F26p0", "0x0.0000FD9p0", "0x0.000108Fp0", "0x0.000114Ap0",
"0x0.0001209p0", "0x0.00012CBp0", "0x0.0001392p0", "0x0.000145Cp0",
"0x0.000152Bp0", "0x0.00015FEp0", "0x0.00016D4p0", "0x0.00017AFp0",
"0x0.000188Ep0", "0x0.0001971p0", "0x0.0001A57p0", "0x0.0001B42p0",
"0x0.0001C31p0", "0x0.0001D24p0", "0x0.0001E1Bp0", "0x0.0001F16p0",
"0x0.0002015p0", "0x0.0002118p0", "0x0.000221Fp0", "0x0.000232Ap0",
"0x0.0002439p0", "0x0.000254Cp0", "0x0.0002663p0", "0x0.000277Fp0",
"0x0.000289Ep0", "0x0.00029C1p0", "0x0.0002AE9p0", "0x0.0002C14p0",
"0x0.0002D43p0", "0x0.0002E77p0", "0x0.0002FAEp0", "0x0.00030EAp0",
"0x0.0003229p0", "0x0.000336Dp0", "0x0.00034B4p0", "0x0.0003600p0",
"0x0.0003750p0", "0x0.00038A4p0", "0x0.00039FBp0", "0x0.0003B57p0",
"0x0.0003CB7p0", "0x0.0003E1Bp0", "0x0.0003F83p0", "0x0.00040EFp0",
"0x0.000425Fp0", "0x0.00043D3p0", "0x0.000454Bp0", "0x0.00046C7p0",
"0x0.0004848p0", "0x0.00049CCp0", "0x0.0004B54p0", "0x0.0004CE1p0",
"0x0.0004E71p0", "0x0.0005006p0", "0x0.000519Ep0", "0x0.000533Bp0",
"0x0.00054DBp0", "0x0.0005680p0", "0x0.0005829p0", "0x0.00059D6p0",
"0x0.0005B86p0", "0x0.0005D3Bp0", "0x0.0005EF4p0", "0x0.00060B1p0",
"0x0.0006272p0", "0x0.0006437p0", "0x0.0006600p0", "0x0.00067CEp0",
"0x0.000699Fp0", "0x0.0006B74p0", "0x0.0006D4Ep0", "0x0.0006F2Bp0",
"0x0.000710Dp0", "0x0.00072F2p0", "0x0.00074DCp0", "0x0.00076CAp0",
"0x0.00078BBp0", "0x0.0007AB1p0", "0x0.0007CABp0", "0x0.0007EA9p0",
            };
_ssdm_SpecConstant(f_x_msb_3_m_1_table);
# 1187 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


            ap_ufixed<6,-19> f_x_msb_3_lsb = x_msb_3 * x_lsb;


            ap_ufixed<12,-13> f_x_msb_3 = f_x_msb_3_m_1_table[x_msb_ind_3];

            ap_ufixed<13,-12> exp_x_msb_3_lsb_m_1_m = 0;
            exp_x_msb_3_lsb_m_1_m(11,0) = f_x_msb_3(11,0);
            exp_x_msb_3_lsb_m_1_m = exp_x_msb_3_lsb_m_1_m + f_x_msb_3_lsb;


            ap_ufixed<19,-6> x_msb_3_lsb = x_l;

            ap_ufixed<20,-5> exp_x_msb_3_lsb_m_1 = 0;
            exp_x_msb_3_lsb_m_1(18,0) = x_msb_3_lsb(18,0);
            exp_x_msb_3_lsb_m_1 = exp_x_msb_3_lsb_m_1+ exp_x_msb_3_lsb_m_1_m;


            const static ap_ufixed<25,0> exp_x_msb_2_m_1_table[32] = {
                "0x0.0000000p0", "0x0.04080a8p0", "0x0.0820560p0", "0x0.0c49238p0",
                "0x0.1082b58p0", "0x0.14cd500p0", "0x0.1929370p0", "0x0.1d96b10p0",
                "0x0.2216048p0", "0x0.26a7790p0", "0x0.2b4b588p0", "0x0.3001ed0p0",
                "0x0.34cb818p0", "0x0.39a8628p0", "0x0.3e98de8p0", "0x0.439d440p0",
                "0x0.48b5e40p0", "0x0.4de30f0p0", "0x0.5325180p0", "0x0.587c540p0",
                "0x0.5de9178p0", "0x0.636bb98p0", "0x0.6904930p0", "0x0.6eb3fc8p0",
                "0x0.747a510p0", "0x0.7a57ee0p0", "0x0.804d300p0", "0x0.865a778p0",
                "0x0.8c80248p0", "0x0.92be998p0", "0x0.99163b0p0", "0x0.9f876e8p0",
            };
_ssdm_SpecConstant(exp_x_msb_2_m_1_table);
# 1239 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<25, 0> exp_x_msb_2_m_1 = exp_x_msb_2_m_1_table[x_msb_ind_2];

            ap_ufixed<50,-5> f_x_msb_2_3_lsb = exp_x_msb_2_m_1 * exp_x_msb_3_lsb_m_1;
            ap_ufixed<20,-5> f_x_msb_2_3_lsb_s = f_x_msb_2_3_lsb;
            ap_ufixed<25, 0> exp_x_msb_2_3_lsb_m_1 = f_x_msb_2_3_lsb_s + exp_x_msb_3_lsb_m_1 + exp_x_msb_2_m_1;


            const static ap_ufixed<25,11> exp_x_msb_1_table[32] = {
                "0x1.0000p0", "0x1.a614p0", "0x2.b7e0p0", "0x4.7b50p0",
                "0x7.6398p0", "0xc.2eb8p0", "0x14.15e4p0", "0x21.1d90p0",
                "0x36.9920p0", "0x5a.0464p0", "0x94.69c4p0", "0xf4.b124p0",
                "0x193.6dc4p0", "0x299.2444p0", "0x448.a218p0", "0x710.0adcp0",
                "0x0.0014p0", "0x0.0024p0", "0x0.003cp0", "0x0.0064p0",
                "0x0.00a4p0", "0x0.010cp0", "0x0.01b8p0", "0x0.02d8p0",
                "0x0.04b0p0", "0x0.07bcp0", "0x0.0cc0p0", "0x0.1504p0",
                "0x0.22a4p0", "0x0.3920p0", "0x0.5e2cp0", "0x0.9b44p0",
            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 1256 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<25,11> exp_x_msb_1 = exp_x_msb_1_table[x_msb_ind_1];


            ap_ufixed<50,11> y_lo = exp_x_msb_1 * exp_x_msb_2_3_lsb_m_1;

            ap_ufixed<25,11> y_lo_s = y_lo;

            ap_ufixed<25,11> y_l = y_lo_s + exp_x_msb_1;

            y = y_l;

        }
        y += delta;

            overf = 0;
#pragma unroll
 for (int j = 22; j >= I_+10; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 22; j >= I_+10; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+9; j >= 0; j--)
                    y[j] = 1;
            }

        r = y;
    } else if (I_s_==5) {

        if(WI_>73) return 0;
        const static int we = 24;
_ssdm_SpecConstant(&we);
# 1299 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int wf = 49;
_ssdm_SpecConstant(&wf);
# 1300 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int w = 73;
_ssdm_SpecConstant(&w);
# 1301 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        ap_fixed<w,we> x_l = x;
        ap_ufixed<47,24> y = 0;
        ap_fixed<5,5> x_l_int;
        x_l_int(4,0) = x_l(wf+4,wf);
        ap_ufixed<wf,0> x_l_fract;
        x_l_fract(wf-1,0) = x_l(wf-1,0);
        bool overf = 0;
#pragma unroll
 for (int j = wf+4; j < w-1; j++)
            if (x_l[w-1]!=x_l[j])
                overf = 1;

        if (overf||((x_l_int==15)&&(x_l_fract>=ap_ufixed<wf,0>("0x0.F1402743D99F8p0")))) {
            if (!x_l[w-1]) {
#pragma unroll
 for (int j = 0; j < 46; j++) y[j] = 1;
            }
        } else {
            const static int g=4;
_ssdm_SpecConstant(&g);
# 1320 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            const static int Maxprecision = 51;
_ssdm_SpecConstant(&Maxprecision);
# 1321 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_uint<8> x_msb_ind_1;
            x_msb_ind_1[7] = x_l[w-1];
            x_msb_ind_1(6,0) = x_l(wf+3,wf-3);

            ap_uint<8> x_msb_ind_2;
            x_msb_ind_2(7,0) = x_l(wf-4,wf-11);
            ap_uint<5> x_msb_ind_3;
            x_msb_ind_3(4,0) = x_l(wf-12,wf-16);
            ap_uint<3> x_msb_ind_4;
            x_msb_ind_4(2,0) = x_l(wf-17,wf-19);

            ap_uint<6> x_msb_ind_5;
            x_msb_ind_5(5,0) = x_l(wf-20,wf-25);

            ap_ufixed<8, -3> x_msb_2 = x_l;
            ap_ufixed<5,-11> x_msb_3 = x_l;
            ap_ufixed<3,-16> x_msb_4 = x_l;
            ap_ufixed<6,-19> x_msb_5 = x_l;

            ap_ufixed<7,-25> x_lsb = x_l;

            const static ap_ufixed<12,-39> f_x_msb_5_table[64] = {
"0x0.0000000000000p0", "0x0.0000000000002p0", "0x0.0000000000008p0", "0x0.0000000000012p0",
"0x0.0000000000020p0", "0x0.0000000000032p0", "0x0.0000000000048p0", "0x0.0000000000062p0",
"0x0.0000000000080p0", "0x0.00000000000A2p0", "0x0.00000000000C8p0", "0x0.00000000000F2p0",
"0x0.0000000000120p0", "0x0.0000000000152p0", "0x0.0000000000188p0", "0x0.00000000001C2p0",
"0x0.0000000000200p0", "0x0.0000000000242p0", "0x0.0000000000288p0", "0x0.00000000002D2p0",
"0x0.0000000000320p0", "0x0.0000000000372p0", "0x0.00000000003C8p0", "0x0.0000000000422p0",
"0x0.0000000000480p0", "0x0.00000000004E2p0", "0x0.0000000000548p0", "0x0.00000000005B2p0",
"0x0.0000000000620p0", "0x0.0000000000692p0", "0x0.0000000000708p0", "0x0.0000000000782p0",
"0x0.0000000000800p0", "0x0.0000000000882p0", "0x0.0000000000908p0", "0x0.0000000000992p0",
"0x0.0000000000A20p0", "0x0.0000000000AB2p0", "0x0.0000000000B48p0", "0x0.0000000000BE2p0",
"0x0.0000000000C80p0", "0x0.0000000000D22p0", "0x0.0000000000DC8p0", "0x0.0000000000E72p0",
"0x0.0000000000F20p0", "0x0.0000000000FD2p0", "0x0.0000000001088p0", "0x0.0000000001142p0",
"0x0.0000000001200p0", "0x0.00000000012C2p0", "0x0.0000000001388p0", "0x0.0000000001452p0",
"0x0.0000000001520p0", "0x0.00000000015F2p0", "0x0.00000000016C8p0", "0x0.00000000017A2p0",
"0x0.0000000001880p0", "0x0.0000000001962p0", "0x0.0000000001A48p0", "0x0.0000000001B32p0",
"0x0.0000000001C20p0", "0x0.0000000001D12p0", "0x0.0000000001E08p0", "0x0.0000000001F02p0",

            };
_ssdm_SpecConstant(f_x_msb_5_table);
# 1343 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<12,-39> f_x_msb_5 = f_x_msb_5_table[x_msb_ind_5];

            const static ap_ufixed<7,-33> f_x_msb_4_table[8] = {
"0x0.0000000000p0", "0x0.0000000002p0", "0x0.0000000008p0", "0x0.0000000012p0",
"0x0.0000000020p0", "0x0.0000000032p0", "0x0.0000000048p0", "0x0.0000000062p0",
            };
_ssdm_SpecConstant(f_x_msb_4_table);
# 1364 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<7,-33> f_x_msb_4 = f_x_msb_4_table[x_msb_ind_4];

            ap_ufixed<7,-44> f_x_msb_5_lsb = x_msb_5 * x_lsb;

            ap_ufixed<16,-19> x_msb_5_lsb = x_l;

            ap_ufixed<19,-35> f_x_msb_4_5_lsb = x_msb_5_lsb * x_msb_4;
            ap_ufixed<16,-35> f_x_msb_4_5_lsb_s = f_x_msb_4_5_lsb;

            ap_ufixed<13,-38> exp_x_msb_4_5_lsb_m_1_m3 = 0;
            exp_x_msb_4_5_lsb_m_1_m3(11,0)=f_x_msb_5(11,0);
            exp_x_msb_4_5_lsb_m_1_m3 = exp_x_msb_4_5_lsb_m_1_m3+f_x_msb_5_lsb;

            ap_ufixed<17,-34> exp_x_msb_4_5_lsb_m_1_m4 = 0;
            exp_x_msb_4_5_lsb_m_1_m4(15,0)=f_x_msb_4_5_lsb_s(15,0);
            exp_x_msb_4_5_lsb_m_1_m4 = exp_x_msb_4_5_lsb_m_1_m4 + f_x_msb_4_5_lsb_s;

            ap_ufixed<8,-32> exp_x_msb_4_5_lsb_m_1_m5_s = 0;
            exp_x_msb_4_5_lsb_m_1_m5_s(5,0)=exp_x_msb_4_5_lsb_m_1_m4(16,11);
            exp_x_msb_4_5_lsb_m_1_m5_s = f_x_msb_4+exp_x_msb_4_5_lsb_m_1_m5_s;

            ap_ufixed<19,-32> exp_x_msb_4_5_lsb_m_1_m5 = exp_x_msb_4_5_lsb_m_1_m5_s;
            exp_x_msb_4_5_lsb_m_1_m5(10,0)=exp_x_msb_4_5_lsb_m_1_m4(10,0);

            ap_ufixed<32,-15> exp_x_msb_4_5_lsb_m_1_m6 = 0;
            ap_ufixed<wf-16,-16> x_msb_4_5_lsb = x_l;
            exp_x_msb_4_5_lsb_m_1_m6(14,0) = exp_x_msb_4_5_lsb_m_1_m5(18,4);
            exp_x_msb_4_5_lsb_m_1_m6 = exp_x_msb_4_5_lsb_m_1_m6 + x_msb_4_5_lsb;
            ap_ufixed<36,-15> exp_x_msb_4_5_lsb_m_1 = exp_x_msb_4_5_lsb_m_1_m6;
            exp_x_msb_4_5_lsb_m_1(3,0) = exp_x_msb_4_5_lsb_m_1_m5(3,0);


            const static ap_ufixed<32,-23> f_x_msb_3_table[32] = {
"0x0.00000000000000p0", "0x0.0000000080002ap0", "0x0.00000002000156p0", "0x0.00000004800480p0",
"0x0.00000008000aaap0", "0x0.0000000c8014d6p0", "0x0.00000012002400p0", "0x0.0000001880392cp0",
"0x0.00000020005556p0", "0x0.00000028807982p0", "0x0.0000003200a6acp0", "0x0.0000003c80ddd8p0",
"0x0.00000048012004p0", "0x0.00000054816e30p0", "0x0.0000006201c95cp0", "0x0.00000070823288p0",
"0x0.0000008002aab6p0", "0x0.000000908332e2p0", "0x0.000000a203cc12p0", "0x0.000000b4847740p0",
"0x0.000000c8053570p0", "0x0.000000dc8607a0p0", "0x0.000000f206eed0p0", "0x0.0000010887ec02p0",
"0x0.00000120090036p0", "0x0.000001388a2c6ap0", "0x0.000001520b71a0p0", "0x0.0000016c8cd0d6p0",
"0x0.000001880e4b0ep0", "0x0.000001a48fe148p0", "0x0.000001c2119484p0", "0x0.000001e09365c0p0",
            };
_ssdm_SpecConstant(f_x_msb_3_table);
# 1400 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


            ap_ufixed<32,-23> f_x_msb_3 = f_x_msb_3_table[x_msb_ind_3];
            ap_ufixed<44,-11> exp_x_msb_3_m_1 = 0;
            exp_x_msb_3_m_1(43,39) = x_msb_3(4,0);
            exp_x_msb_3_m_1(31, 0) = f_x_msb_3(31,0);


            ap_ufixed<80,-26> f_x_msb_3_4_lsb = exp_x_msb_3_m_1 * exp_x_msb_4_5_lsb_m_1;
            ap_ufixed<31,-26> f_x_msb_3_4_lsb_s = f_x_msb_3_4_lsb;
            ap_ufixed<48,-10> exp_x_msb_3_4_lsb_m_1 = f_x_msb_3_4_lsb_s + exp_x_msb_3_m_1 + exp_x_msb_4_5_lsb_m_1;


            const static ap_ufixed<46,-6> f_x_msb_2_table[256] = {
"0x0.0p0", "0x0.0000020015560p0", "0x0.00000800AAB55p0", "0x0.0000120240360p0",
"0x0.0000200556001p0", "0x0.0000320A6C4B8p0", "0x0.0000481203608p0", "0x0.0000621C9B971p0",
"0x0.0000802AB5577p0", "0x0.0000A23CD119Dp0", "0x0.0000C8536F668p0", "0x0.0000F26F10D5Dp0",
"0x0.0001209036103p0", "0x0.000152B75FCE3p0", "0x0.000188E50ED86p0", "0x0.0001C319C4077p0",
"0x0.0002015600445p0", "0x0.0002439A4487Ep0", "0x0.000289E711DB3p0", "0x0.0002D43CE9577p0",
"0x0.0003229C4C260p0", "0x0.00037505BB805p0", "0x0.0003CB79B8B01p0", "0x0.000425F8C50F2p0",
"0x0.0004848362076p0", "0x0.0004E71A11131p0", "0x0.00054DBD53BC8p0", "0x0.0005B86DAB9E3p0",
"0x0.0006272B9A630p0", "0x0.000699F7A1C5Dp0", "0x0.000710D24391Ep0", "0x0.00078BBC01A29p0",
"0x0.00080AB55DE39p0", "0x0.00088DBEDA50Bp0", "0x0.000914D8F8F63p0", "0x0.0009A0043BF07p0",
"0x0.000A2F41256C2p0", "0x0.000AC29037A63p0", "0x0.000B59F1F4EBDp0", "0x0.000BF566DF9AAp0",
"0x0.000C94EF7A206p0", "0x0.000D388C46FB4p0", "0x0.000DE03DC8B9Bp0", "0x0.000E8C0481FA7p0",
"0x0.000F3BE0F56CAp0", "0x0.000FEFD3A5CFAp0", "0x0.0010A7DD15F36p0", "0x0.001163FDC8B7Fp0",
"0x0.00122436410DDp0", "0x0.0012E88701F5Ep0", "0x0.0013B0F08E817p0", "0x0.00147D7369D22p0",
"0x0.00154E101719Fp0", "0x0.001622C7199B7p0", "0x0.0016FB98F4A96p0", "0x0.0017D8862BA72p0",
"0x0.0018B98F42084p0", "0x0.00199EB4BB511p0", "0x0.001A87F71B161p0", "0x0.001B7556E4FC4p0",
"0x0.001C66D49CB93p0", "0x0.001D5C70C612Dp0", "0x0.001E562BE4DFAp0", "0x0.001F54067D067p0",
"0x0.00205601127ECp0", "0x0.00215C1C29507p0", "0x0.0022665845940p0", "0x0.002374B5EB724p0",
"0x0.002487359F24Cp0", "0x0.00259DD7E4F57p0", "0x0.0026B89D413EFp0", "0x0.0027D786386C4p0",
"0x0.0028FA934EF90p0", "0x0.002A21C509717p0", "0x0.002B4D1BEC726p0", "0x0.002C7C987CA92p0",
"0x0.002DB03B3ED3Ap0", "0x0.002EE804B7C07p0", "0x0.003023F56C4ECp0", "0x0.0031640DE16E3p0",
"0x0.0032A84E9C1F5p0", "0x0.0033F0B821730p0", "0x0.00353D4AF68B0p0", "0x0.00368E07A0999p0",
"0x0.0037E2EEA4E19p0", "0x0.00393C0088B6Cp0", "0x0.003A993DD17D5p0", "0x0.003BFAA704AA3p0",
"0x0.003D603CA7C32p0", "0x0.003EC9FF405E6p0", "0x0.004037EF54230p0", "0x0.0041AA0D68C8Cp0",
"0x0.0043205A04182p0", "0x0.00449AD5ABEA5p0", "0x0.00461980E6294p0", "0x0.00479C5C38CF9p0",
"0x0.0049236829E8Bp0", "0x0.004AAEA53F90Ep0", "0x0.004C3E13FFF51p0", "0x0.004DD1B4F152Fp0",
"0x0.004F698899F90p0", "0x0.0051058F8046Ap0", "0x0.0052A5CA2AABFp0", "0x0.00544A391FA9Cp0",
"0x0.0055F2DCE5D1Ep0", "0x0.00579FB603C6Ep0", "0x0.005950C5003C2p0", "0x0.005B060A61F5Dp0",
"0x0.005CBF86AFC91p0", "0x0.005E7D3A709BEp0", "0x0.00603F262B650p0", "0x0.0062054A672C2p0",
"0x0.0063CFA7AB09Dp0", "0x0.00659E3E7E278p0", "0x0.0067710F67BFAp0", "0x0.0069481AEF1D5p0",
"0x0.006B23619B9CFp0", "0x0.006D02E3F4AB7p0", "0x0.006EE6A281C6Fp0", "0x0.0070CE9DCA7E6p0",
"0x0.0072BAD65671Bp0", "0x0.0074AB4CAD51Cp0", "0x0.0076A00156E07p0", "0x0.007898F4DAF09p0",
"0x0.007A9627C165Fp0", "0x0.007C979A92356p0", "0x0.007E9D4DD564Ap0", "0x0.0080A742130A8p0",
"0x0.0082B577D34EDp0", "0x0.0084C7EF9E6A7p0", "0x0.0086DEA9FCA73p0", "0x0.0088F9A776601p0",
"0x0.008B18E894010p0", "0x0.008D3C6DDE06Fp0", "0x0.008F6437DD000p0", "0x0.00919047198B6p0",
"0x0.0093C09C1C595p0", "0x0.0095F5376E2B2p0", "0x0.00982E1997D33p0", "0x0.009A6B4322352p0",
"0x0.009CACB496458p0", "0x0.009EF26E7D0A2p0", "0x0.00A13C715F99Ep0", "0x0.00A38ABDC71CEp0",
"0x0.00A5DD543CCC4p0", "0x0.00A8343549F26p0", "0x0.00AA8F6177EADp0", "0x0.00ACEED950222p0",
"0x0.00AF529D5C165p0", "0x0.00B1BAAE25566p0", "0x0.00B4270C3582Ap0", "0x0.00B697B8164C7p0",
"0x0.00B90CB25176Ap0", "0x0.00BB85FB70D50p0", "0x0.00BE0393FE4CCp0", "0x0.00C0857C83D44p0",
"0x0.00C30BB58B732p0", "0x0.00C5963F9F424p0", "0x0.00C8251B496BEp0", "0x0.00CAB849142B5p0",
"0x0.00CD4FC989CD6p0", "0x0.00CFEB9D34B00p0", "0x0.00D28BC49F428p0", "0x0.00D5304054059p0",
"0x0.00D7D910DD8B1p0", "0x0.00DA8636C6764p0", "0x0.00DD37B2997BCp0", "0x0.00DFED84E1618p0",
"0x0.00E2A7AE28FECp0", "0x0.00E5662EFB3C3p0", "0x0.00E82907E313Dp0", "0x0.00EAF0396B910p0",
"0x0.00EDBBC41FD08p0", "0x0.00F08BA88B009p0", "0x0.00F35FE73860Bp0", "0x0.00F63880B341Ep0",
"0x0.00F9157587069p0", "0x0.00FBF6C63F228p0", "0x0.00FEDC73671B0p0", "0x0.0101C67D8A86Cp0",
"0x0.0104B4E5350DFp0", "0x0.0107A7AAF26A2p0", "0x0.010A9ECF4E667p0", "0x0.010D9A52D4DF8p0",
"0x0.01109A3611C34p0", "0x0.01139E7991116p0", "0x0.0116A71DDEDADp0", "0x0.0119B42387423p0",
"0x0.011CC58B167B9p0", "0x0.011FDB5518CCAp0", "0x0.0122F5821A8C7p0", "0x0.01261412A823Cp0",
"0x0.012937074E0CDp0", "0x0.012C5E6098D37p0", "0x0.012F8A1F15151p0", "0x0.0132BA434F80Ap0",
"0x0.0135EECDD4D6Cp0", "0x0.013927BF31E98p0", "0x0.013C6517F39CCp0", "0x0.013FA6D8A6E5Dp0",
"0x0.0142ED01D8CBCp0", "0x0.0146379416673p0", "0x0.0149868FECE26p0", "0x0.014CD9F5E9795p0",
"0x0.015031C699799p0", "0x0.01538E028A426p0", "0x0.0156EEAA4944Bp0", "0x0.015A53BE64033p0",
"0x0.015DBD3F68122p0", "0x0.01612B2DE3178p0", "0x0.01649D8A62CB1p0", "0x0.0168145574F65p0",
"0x0.016B8F8FA7745p0", "0x0.016F0F3988321p0", "0x0.01729353A52E4p0", "0x0.01761BDE8C792p0",
"0x0.0179A8DACC350p0", "0x0.017D3A48F295Dp0", "0x0.0180D0298DE13p0", "0x0.01846A7D2C6ECp0",
"0x0.018809445CA7Bp0", "0x0.018BAC7FAD074p0", "0x0.018F542FAC1A4p0", "0x0.01930054E87F8p0",
"0x0.0196B0EFF0E79p0", "0x0.019A66015414Dp0", "0x0.019E1F89A0DBAp0", "0x0.01A1DD8966221p0",
"0x0.01A5A00132E02p0", "0x0.01A966F1961FCp0", "0x0.01AD325B1EFC9p0", "0x0.01B1023E5CA45p0",
"0x0.01B4D69BDE569p0", "0x0.01B8AF743364Cp0", "0x0.01BC8CC7EB323p0", "0x0.01C06E9795345p0",
"0x0.01C454E3C0F24p0", "0x0.01C83FACFE054p0", "0x0.01CC2EF3DC187p0", "0x0.01D022B8EAE8Fp0",
"0x0.01D41AFCBA45Ep0", "0x0.01D817BFDA104p0", "0x0.01DC1902DA3B1p0", "0x0.01E01EC64ACB7p0",
"0x0.01E4290ABBD87p0", "0x0.01E837D0BD8B2p0", "0x0.01EC4B18E01E9p0", "0x0.01F062E3B3DFEp0",
"0x0.01F47F31C92E4p0", "0x0.01F8A003B07AFp0", "0x0.01FCC559FA492p0", "0x0.0200EF35372E4p0",
"0x0.02051D95F7D1Cp0", "0x0.0209507CCCED1p0", "0x0.020D87EA474BEp0", "0x0.0211C3DEF7CBDp0",
            };
_ssdm_SpecConstant(f_x_msb_2_table);
# 1422 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<46,-6> f_x_msb_2 = f_x_msb_2_table[x_msb_ind_2];
            ap_ufixed< 5,-6> f_x_msb_2_h;
            f_x_msb_2_h(4,0) = f_x_msb_2(45,41);
            ap_ufixed< 9,-2> exp_x_msb_2_m_1_h = f_x_msb_2_h + x_msb_2;
            ap_ufixed<50,-2> exp_x_msb_2_m_1;
            exp_x_msb_2_m_1(49,41) = exp_x_msb_2_m_1_h(8,0);
            exp_x_msb_2_m_1(40, 0) = f_x_msb_2(40,0);

            ap_ufixed<98,-12> f_x_msb_2_3_4_lsb = exp_x_msb_2_m_1 * exp_x_msb_3_4_lsb_m_1;
            ap_ufixed<46,-12> f_x_msb_2_3_4_lsb_s = f_x_msb_2_3_4_lsb;
            ap_ufixed<50,-2> exp_x_msb_2_3_4_lsb_m_1 = f_x_msb_2_3_4_lsb_s + exp_x_msb_2_m_1 + exp_x_msb_3_4_lsb_m_1;

            const static ap_ufixed<50,23> exp_x_msb_1_table[256] = {
"0x1.0000000p0", "0x1.2216045p0", "0x1.48B5E3Cp0", "0x1.747A513p0",
"0x1.A61298Ep0", "0x1.DE455DFp0", "0x2.1DF3B68p0", "0x2.661CB0Fp0",
"0x2.B7E1516p0", "0x3.1489176p0", "0x3.7D871DBp0", "0x3.F47FE87p0",
"0x4.7B4FF99p0", "0x5.1413452p0", "0x5.C12DA41p0", "0x6.855466Ep0",
"0x7.63992E3p0", "0x8.5F7635Bp0", "0x9.7CDC417p0", "0xA.C042667p0",
"0xC.2EB7EC9p0", "0xD.CDF892Ep0", "0xF.A48385Ep0", "0x11.B9B5652p0",
"0x14.15E5BF6p0", "0x16.C2887C1p0", "0x19.CA53B78p0", "0x1D.396AA97p0",
"0x21.1D8E427p0", "0x25.865441Cp0", "0x2A.8565A14p0", "0x30.2EC550Bp0",
"0x36.99205C4p0", "0x3D.DE28BF3p0", "0x46.1AFC4DBp0", "0x4F.7099532p0",
"0x5A.0462B78p0", "0x66.00B5BC9p0", "0x73.9593ABBp0", "0x82.F9621ADp0",
"0x94.69C4CB8p0", "0xA8.2C948C1p0", "0xBE.90F6F83p0", "0xD7.F09B78Cp0",
"0xF4.B122790p0", "0x115.45B4704p0", "0x13A.30CF1CCp0", "0x164.0650296p0",
"0x193.6DC5690p0", "0x1C9.250BEDCp0", "0x206.03487A3p0", "0x24A.FC4533Cp0",
"0x299.2442102p0", "0x2F1.B447462p0", "0x356.0F0B0F9p0", "0x3C7.C67E5BEp0",
"0x448.A216ABBp0", "0x4DA.A5EE46Ap0", "0x580.1AD754Fp0", "0x63B.9782341p0",
"0x710.0ADBAC7p0", "0x800.C7CC8E3p0", "0x911.9289C39p0", "0xA46.AFAA2ADp0",
"0xBA4.F53EA38p0", "0xD31.DE30C52p0", "0xEF3.A035D57p0", "0x10F1.44ADE60p0",
"0x1332.C4D2B7Cp0", "0x15C1.29A744Cp0", "0x18A6.B027DA0p0", "0x1BEE.F24BB12p0",
"0x1FA7.157C470p0", "0x23DD.FF3C8BAp0", "0x28A4.90D2CCEp0", "0x2E0D.EAE454Bp0",
"0x342F.BA11823p0", "0x3B22.8DC5359p0", "0x4302.3A933EEp0", "0x4BEE.49AFCDCp0",
"0x560A.773E541p0", "0x617F.4171BF9p0", "0x6E7A.8ABB4A8p0", "0x7D30.5191764p0",
"0x8DDB.80AF426p0", "0xA0BE.DB0DB10p0", "0xB626.0748BAEp0", "0xCE66.BE9EAADp0",
"0xE9E2.2447727p0", "0x10906.4A831F8p0", "0x12C4F.EB75B2Ap0", "0x1544C.5CB6133p0",
"0x1819B.C560F61p0", "0x1B4F3.9F8AF64p0", "0x1EF21.8F1B001p0", "0x2310E.996C40Fp0",
"0x27BC2.CA9A6F9p0", "0x2D069.571279Ap0", "0x33055.49F35D9p0", "0x39D06.D2FEF17p0",
"0x41831.49596E9p0", "0x4A3C1.FB2AC39p0", "0x541E7.E56949Dp0", "0x5F51C.72B7532p0",
"0x6C02D.645AB25p0", "0x7A648.0CFF534p0", "0x8AB06.0A3EE9Fp0", "0x9D27B.AFE4CF1p0",
"0xB2148.5EAE56Cp0", "0xC9CA9.07F86EFp0", "0xE4A8D.2881EDBp0", "0x1031AE.8E4996Cp0",
"0x1259AC.48BF05Dp0", "0x14CB29.2F2B31Fp0", "0x178FEE.7792E44p0", "0x1AB312.E89CD0Dp0",
"0x1E4127.437732Bp0", "0x224868.979FC2Ep0", "0x26D8F9.4A204BEp0", "0x2C0521.B4A8E0Bp0",
"0x31E199.5F5A550p0", "0x3885D9.FA89D00p0", "0x400C7D.64D3386p0", "0x4893A8.361032Dp0",
"0x523D82.79EDAEFp0", "0x5D30C0.7DAB686p0", "0x69993D.D4F2D95p0", "0x77A8AD.02A7C71p0",
"0x0.000001Ep0", "0x0.0000022p0", "0x0.0000026p0", "0x0.000002Bp0",
"0x0.0000031p0", "0x0.0000038p0", "0x0.000003Fp0", "0x0.0000048p0",
"0x0.0000052p0", "0x0.000005Dp0", "0x0.0000069p0", "0x0.0000077p0",
"0x0.0000087p0", "0x0.0000099p0", "0x0.00000ADp0", "0x0.00000C4p0",
"0x0.00000DFp0", "0x0.00000FCp0", "0x0.000011Ep0", "0x0.0000144p0",
"0x0.0000170p0", "0x0.00001A1p0", "0x0.00001D8p0", "0x0.0000217p0",
"0x0.000025Ep0", "0x0.00002AFp0", "0x0.000030Bp0", "0x0.0000372p0",
"0x0.00003E8p0", "0x0.000046Dp0", "0x0.0000504p0", "0x0.00005AFp0",
"0x0.0000671p0", "0x0.000074Cp0", "0x0.0000845p0", "0x0.000095Fp0",
"0x0.0000A9Fp0", "0x0.0000C09p0", "0x0.0000DA3p0", "0x0.0000F74p0",
"0x0.0001183p0", "0x0.00013D8p0", "0x0.000167Cp0", "0x0.000197Bp0",
"0x0.0001CDFp0", "0x0.00020B7p0", "0x0.0002513p0", "0x0.0002A02p0",
"0x0.0002F9Ap0", "0x0.00035F1p0", "0x0.0003D20p0", "0x0.0004543p0",
"0x0.0004E7Cp0", "0x0.00058F0p0", "0x0.00064C7p0", "0x0.0007232p0",
"0x0.0008167p0", "0x0.00092A2p0", "0x0.000A628p0", "0x0.000BC48p0",
"0x0.000D55Ap0", "0x0.000F1C2p0", "0x0.00111F3p0", "0x0.001366Cp0",
"0x0.0015FC2p0", "0x0.0018E98p0", "0x0.001C3AAp0", "0x0.001FFCEp0",
"0x0.00243F3p0", "0x0.002912Bp0", "0x0.002E8ABp0", "0x0.0034BD2p0",
"0x0.003BC2Dp0", "0x0.0043B7Dp0", "0x0.004CBC1p0", "0x0.0056F3Ap0",
"0x0.0062878p0", "0x0.006FA5Fp0", "0x0.007E83Ap0", "0x0.008F5C0p0",
"0x0.00A2728p0", "0x0.00B813Bp0", "0x0.00D0963p0", "0x0.00EC5C1p0",
"0x0.010BD4Ap0", "0x0.012F7DEp0", "0x0.0157E6Bp0", "0x0.0185B0Fp0",
"0x0.01B993Fp0", "0x0.01F45F9p0", "0x0.0236FF5p0", "0x0.02827E0p0",
"0x0.02D80A0p0", "0x0.0338F9Fp0", "0x0.03A6D22p0", "0x0.04234A7p0",
"0x0.04B0556p0", "0x0.0550280p0", "0x0.0605424p0", "0x0.06D279Ap0",
"0x0.07BB040p0", "0x0.08C284Cp0", "0x0.09ED1B4p0", "0x0.0B3F736p0",
"0x0.0CBED86p0", "0x0.0E7149Cp0", "0x0.105D938p0", "0x0.128B697p0",
"0x0.150385Cp0", "0x0.17CFCC2p0", "0x0.1AFB718p0", "0x0.1E9328Bp0",
"0x0.22A5554p0", "0x0.2742456p0", "0x0.2C7C72Fp0", "0x0.3268CDBp0",
"0x0.391F0EEp0", "0x0.40BA188p0", "0x0.495860Dp0", "0x0.531C6C9p0",
"0x0.5E2D58Dp0", "0x0.6AB7782p0", "0x0.78ED03Ap0", "0x0.8906E49p0",
"0x0.9B4597Ep0", "0x0.AFF230Ap0", "0x0.C75F7CFp0", "0x0.E1EB512p0",
            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 1500 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<50,23> exp_x_msb_1 = exp_x_msb_1_table[x_msb_ind_1];

            ap_ufixed<100,21> y_lo = exp_x_msb_1 * exp_x_msb_2_3_4_lsb_m_1;
            ap_ufixed<48,21> y_lo_s = y_lo;
            ap_ufixed<50,23> y_l = y_lo_s + exp_x_msb_1;
            y = y_l;
        }
        y += delta;

            overf = 0;
#pragma unroll
 for (int j = 46; j >= I_+22; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 46; j >= I_+22; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+21; j >= 0; j--)
                    y[j] = 1;
            }

        r = y;
    } else {
        const static int wf = 67;
_ssdm_SpecConstant(&wf);
# 1592 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int we = 33;
_ssdm_SpecConstant(&we);
# 1593 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        const static int w = 100;
_ssdm_SpecConstant(&w);
# 1594 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

        ap_fixed<w,we> x_l = x;


        ap_ufixed<65,33> y = 0;

        ap_fixed<6,6> x_l_int;
        x_l_int(5,0) = x_l(wf+5,wf);


        ap_ufixed<wf,0> x_l_fract;
        x_l_fract(wf-1,0) = x_l(wf-1,0);

        bool overf = 0;
#pragma unroll
 for (int j = wf+5; j < w-1; j++)
            if (x_l[w-1]!=x_l[j])
                overf = 1;
        if (overf||(x_l_int>22)||((x_l_int==22)&&(x_l_fract>=ap_ufixed<wf,0>("0x0.2E42FEFA39EF35783p0")))) {
            if (!x_l[w-1]) {
#pragma unroll
 for (int j = 0; j < 64; j++) y[j] = 1;
            }
        } else {
            const static int g=4;
_ssdm_SpecConstant(&g);
# 1618 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            const static int Maxprecision=69;
_ssdm_SpecConstant(&Maxprecision);
# 1619 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_uint<8> x_msb_ind_1;
            x_msb_ind_1[7] = x_l[w-1];

            x_msb_ind_1(6,0) = x_l(wf+4,wf-2);
            ap_uint<8> x_msb_ind_2;
            x_msb_ind_2(7,0) = x_l(wf-3,wf-10);
            ap_uint<8> x_msb_ind_3;
            x_msb_ind_3(7,0) = x_l(wf-11,wf-18);
            ap_uint<8> x_msb_ind_4;
            x_msb_ind_4(7,0) = x_l(wf-19,wf-26);

            ap_uint<8> x_msb_ind_5;
            x_msb_ind_5(7,0) = x_l(wf-27,wf-34);

            ap_ufixed<8, -2> x_msb_2 = x_l;
            ap_ufixed<8,-10> x_msb_3 = x_l;
            ap_ufixed<8,-18> x_msb_4 = x_l;
            ap_ufixed<8,-26> x_msb_5 = x_l;
            ap_ufixed<9,-34> x_lsb = x_l;

            const static ap_ufixed<32,-37> f_x_msb_4_table[256] = {
"0x0.000000000000000000p0", "0x0.000000000000080000p0", "0x0.000000000000200000p0", "0x0.000000000000480000p0",
"0x0.000000000000800000p0", "0x0.000000000000C80000p0", "0x0.000000000001200000p0", "0x0.000000000001880000p0",
"0x0.000000000002000001p0", "0x0.000000000002880001p0", "0x0.000000000003200002p0", "0x0.000000000003C80003p0",
"0x0.000000000004800004p0", "0x0.000000000005480005p0", "0x0.000000000006200007p0", "0x0.000000000007080008p0",
"0x0.00000000000800000Ap0", "0x0.00000000000908000Cp0", "0x0.00000000000A20000Fp0", "0x0.00000000000B480011p0",
"0x0.00000000000C800014p0", "0x0.00000000000DC80018p0", "0x0.00000000000F20001Bp0", "0x0.00000000001088001Fp0",
"0x0.000000000012000024p0", "0x0.000000000013880028p0", "0x0.00000000001520002Dp0", "0x0.000000000016C80033p0",
"0x0.000000000018800039p0", "0x0.00000000001A48003Fp0", "0x0.00000000001C200046p0", "0x0.00000000001E08004Dp0",
"0x0.000000000020000055p0", "0x0.00000000002208005Dp0", "0x0.000000000024200066p0", "0x0.00000000002648006Fp0",
"0x0.000000000028800079p0", "0x0.00000000002AC80083p0", "0x0.00000000002D20008Ep0", "0x0.00000000002F88009Ap0",
"0x0.0000000000320000A6p0", "0x0.0000000000348800B3p0", "0x0.0000000000372000C0p0", "0x0.000000000039C800CFp0",
"0x0.00000000003C8000DDp0", "0x0.00000000003F4800EDp0", "0x0.0000000000422000FDp0", "0x0.00000000004508010Ep0",
"0x0.000000000048000120p0", "0x0.00000000004B080132p0", "0x0.00000000004E200145p0", "0x0.000000000051480159p0",
"0x0.00000000005480016Ep0", "0x0.000000000057C80183p0", "0x0.00000000005B20019Ap0", "0x0.00000000005E8801B1p0",
"0x0.0000000000620001C9p0", "0x0.0000000000658801E2p0", "0x0.0000000000692001FCp0", "0x0.00000000006CC80216p0",
"0x0.000000000070800232p0", "0x0.00000000007448024Fp0", "0x0.00000000007820026Cp0", "0x0.00000000007C08028Bp0",
"0x0.0000000000800002AAp0", "0x0.0000000000840802CBp0", "0x0.0000000000882002ECp0", "0x0.00000000008C48030Fp0",
"0x0.000000000090800332p0", "0x0.000000000094C80357p0", "0x0.00000000009920037Dp0", "0x0.00000000009D8803A4p0",
"0x0.0000000000A20003CCp0", "0x0.0000000000A68803F5p0", "0x0.0000000000AB20041Fp0", "0x0.0000000000AFC8044Ap0",
"0x0.0000000000B4800477p0", "0x0.0000000000B94804A4p0", "0x0.0000000000BE2004D3p0", "0x0.0000000000C3080503p0",
"0x0.0000000000C8000535p0", "0x0.0000000000CD080567p0", "0x0.0000000000D220059Bp0", "0x0.0000000000D74805D1p0",
"0x0.0000000000DC800607p0", "0x0.0000000000E1C8063Fp0", "0x0.0000000000E7200678p0", "0x0.0000000000EC8806B2p0",
"0x0.0000000000F20006EEp0", "0x0.0000000000F788072Bp0", "0x0.0000000000FD20076Ap0", "0x0.000000000102C807AAp0",
"0x0.0000000001088007EBp0", "0x0.00000000010E48082Ep0", "0x0.000000000114200872p0", "0x0.00000000011A0808B8p0",
"0x0.000000000120000900p0", "0x0.000000000126080948p0", "0x0.00000000012C200993p0", "0x0.0000000001324809DEp0",
"0x0.000000000138800A2Cp0", "0x0.00000000013EC80A7Bp0", "0x0.000000000145200ACBp0", "0x0.00000000014B880B1Dp0",
"0x0.000000000152000B71p0", "0x0.000000000158880BC6p0", "0x0.00000000015F200C1Dp0", "0x0.000000000165C80C76p0",
"0x0.00000000016C800CD0p0", "0x0.000000000173480D2Cp0", "0x0.00000000017A200D8Ap0", "0x0.000000000181080DE9p0",
"0x0.000000000188000E4Ap0", "0x0.00000000018F080EADp0", "0x0.000000000196200F12p0", "0x0.00000000019D480F78p0",
"0x0.0000000001A4800FE0p0", "0x0.0000000001ABC8104Ap0", "0x0.0000000001B32010B6p0", "0x0.0000000001BA881124p0",
"0x0.0000000001C2001194p0", "0x0.0000000001C9881205p0", "0x0.0000000001D1201278p0", "0x0.0000000001D8C812EEp0",
"0x0.0000000001E0801365p0", "0x0.0000000001E84813DEp0", "0x0.0000000001F0201459p0", "0x0.0000000001F80814D6p0",
"0x0.000000000200001555p0", "0x0.0000000002080815D6p0", "0x0.000000000210201659p0", "0x0.0000000002184816DEp0",
"0x0.000000000220801765p0", "0x0.000000000228C817EEp0", "0x0.000000000231201879p0", "0x0.000000000239881907p0",
"0x0.000000000242001996p0", "0x0.00000000024A881A28p0", "0x0.000000000253201ABBp0", "0x0.00000000025BC81B51p0",
"0x0.000000000264801BE9p0", "0x0.00000000026D481C84p0", "0x0.000000000276201D20p0", "0x0.00000000027F081DBFp0",
"0x0.000000000288001E60p0", "0x0.000000000291081F03p0", "0x0.00000000029A201FA8p0", "0x0.0000000002A3482050p0",
"0x0.0000000002AC8020FAp0", "0x0.0000000002B5C821A6p0", "0x0.0000000002BF202255p0", "0x0.0000000002C8882306p0",
"0x0.0000000002D20023B9p0", "0x0.0000000002DB88246Fp0", "0x0.0000000002E5202527p0", "0x0.0000000002EEC825E1p0",
"0x0.0000000002F880269Ep0", "0x0.00000000030248275Dp0", "0x0.00000000030C20281Fp0", "0x0.0000000003160828E3p0",
"0x0.0000000003200029AAp0", "0x0.00000000032A082A73p0", "0x0.000000000334202B3Fp0", "0x0.00000000033E482C0Dp0",
"0x0.000000000348802CDEp0", "0x0.000000000352C82DB2p0", "0x0.00000000035D202E88p0", "0x0.000000000367882F60p0",
"0x0.00000000037200303Cp0", "0x0.00000000037C883119p0", "0x0.0000000003872031FAp0", "0x0.000000000391C832DDp0",
"0x0.00000000039C8033C3p0", "0x0.0000000003A74834ABp0", "0x0.0000000003B2203596p0", "0x0.0000000003BD083684p0",
"0x0.0000000003C8003775p0", "0x0.0000000003D3083868p0", "0x0.0000000003DE20395Ep0", "0x0.0000000003E9483A57p0",
"0x0.0000000003F4803B53p0", "0x0.0000000003FFC83C52p0", "0x0.00000000040B203D53p0", "0x0.000000000416883E57p0",
"0x0.000000000422003F5Ep0", "0x0.00000000042D884068p0", "0x0.000000000439204175p0", "0x0.000000000444C84285p0",
"0x0.000000000450804397p0", "0x0.00000000045C4844ADp0", "0x0.0000000004682045C5p0", "0x0.0000000004740846E1p0",
"0x0.000000000480004800p0", "0x0.00000000048C084921p0", "0x0.000000000498204A46p0", "0x0.0000000004A4484B6Dp0",
"0x0.0000000004B0804C98p0", "0x0.0000000004BCC84DC5p0", "0x0.0000000004C9204EF6p0", "0x0.0000000004D588502Ap0",
"0x0.0000000004E2005161p0", "0x0.0000000004EE88529Bp0", "0x0.0000000004FB2053D8p0", "0x0.000000000507C85518p0",
"0x0.00000000051480565Cp0", "0x0.0000000005214857A3p0", "0x0.00000000052E2058EDp0", "0x0.00000000053B085A3Ap0",
"0x0.000000000548005B8Ap0", "0x0.000000000555085CDEp0", "0x0.000000000562205E35p0", "0x0.00000000056F485F8Fp0",
"0x0.00000000057C8060ECp0", "0x0.000000000589C8624Dp0", "0x0.0000000005972063B1p0", "0x0.0000000005A4886519p0",
"0x0.0000000005B2006684p0", "0x0.0000000005BF8867F2p0", "0x0.0000000005CD206963p0", "0x0.0000000005DAC86AD8p0",
"0x0.0000000005E8806C51p0", "0x0.0000000005F6486DCDp0", "0x0.000000000604206F4Cp0", "0x0.0000000006120870CFp0",
"0x0.000000000620007255p0", "0x0.00000000062E0873DFp0", "0x0.00000000063C20756Cp0", "0x0.00000000064A4876FDp0",
"0x0.000000000658807891p0", "0x0.000000000666C87A29p0", "0x0.000000000675207BC4p0", "0x0.000000000683887D64p0",
"0x0.000000000692007F06p0", "0x0.0000000006A08880ADp0", "0x0.0000000006AF208256p0", "0x0.0000000006BDC88404p0",
"0x0.0000000006CC8085B5p0", "0x0.0000000006DB48876Ap0", "0x0.0000000006EA208923p0", "0x0.0000000006F9088ADFp0",
"0x0.000000000708008CA0p0", "0x0.000000000717088E63p0", "0x0.00000000072620902Bp0", "0x0.0000000007354891F6p0",
"0x0.0000000007448093C6p0", "0x0.000000000753C89599p0", "0x0.000000000763209770p0", "0x0.00000000077288994Ap0",
"0x0.000000000782009B29p0", "0x0.000000000791889D0Bp0", "0x0.0000000007A1209EF2p0", "0x0.0000000007B0C8A0DCp0",
"0x0.0000000007C080A2CAp0", "0x0.0000000007D048A4BCp0", "0x0.0000000007E020A6B2p0", "0x0.0000000007F008A8ACp0",
            };
_ssdm_SpecConstant(f_x_msb_4_table);
# 1640 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<32,-37> f_x_msb_4 = f_x_msb_4_table[x_msb_ind_4];

            const static ap_ufixed<16,-53> f_x_msb_5_table[256] = {
"0x0.000000000000000000p0", "0x0.000000000000000008p0", "0x0.000000000000000020p0", "0x0.000000000000000048p0",
"0x0.000000000000000080p0", "0x0.0000000000000000C8p0", "0x0.000000000000000120p0", "0x0.000000000000000188p0",
"0x0.000000000000000200p0", "0x0.000000000000000288p0", "0x0.000000000000000320p0", "0x0.0000000000000003C8p0",
"0x0.000000000000000480p0", "0x0.000000000000000548p0", "0x0.000000000000000620p0", "0x0.000000000000000708p0",
"0x0.000000000000000800p0", "0x0.000000000000000908p0", "0x0.000000000000000A20p0", "0x0.000000000000000B48p0",
"0x0.000000000000000C80p0", "0x0.000000000000000DC8p0", "0x0.000000000000000F20p0", "0x0.000000000000001088p0",
"0x0.000000000000001200p0", "0x0.000000000000001388p0", "0x0.000000000000001520p0", "0x0.0000000000000016C8p0",
"0x0.000000000000001880p0", "0x0.000000000000001A48p0", "0x0.000000000000001C20p0", "0x0.000000000000001E08p0",
"0x0.000000000000002000p0", "0x0.000000000000002208p0", "0x0.000000000000002420p0", "0x0.000000000000002648p0",
"0x0.000000000000002880p0", "0x0.000000000000002AC8p0", "0x0.000000000000002D20p0", "0x0.000000000000002F88p0",
"0x0.000000000000003200p0", "0x0.000000000000003488p0", "0x0.000000000000003720p0", "0x0.0000000000000039C8p0",
"0x0.000000000000003C80p0", "0x0.000000000000003F48p0", "0x0.000000000000004220p0", "0x0.000000000000004508p0",
"0x0.000000000000004800p0", "0x0.000000000000004B08p0", "0x0.000000000000004E20p0", "0x0.000000000000005148p0",
"0x0.000000000000005480p0", "0x0.0000000000000057C8p0", "0x0.000000000000005B20p0", "0x0.000000000000005E88p0",
"0x0.000000000000006200p0", "0x0.000000000000006588p0", "0x0.000000000000006920p0", "0x0.000000000000006CC8p0",
"0x0.000000000000007080p0", "0x0.000000000000007448p0", "0x0.000000000000007820p0", "0x0.000000000000007C08p0",
"0x0.000000000000008000p0", "0x0.000000000000008408p0", "0x0.000000000000008820p0", "0x0.000000000000008C48p0",
"0x0.000000000000009080p0", "0x0.0000000000000094C8p0", "0x0.000000000000009920p0", "0x0.000000000000009D88p0",
"0x0.00000000000000A200p0", "0x0.00000000000000A688p0", "0x0.00000000000000AB20p0", "0x0.00000000000000AFC8p0",
"0x0.00000000000000B480p0", "0x0.00000000000000B948p0", "0x0.00000000000000BE20p0", "0x0.00000000000000C308p0",
"0x0.00000000000000C800p0", "0x0.00000000000000CD08p0", "0x0.00000000000000D220p0", "0x0.00000000000000D748p0",
"0x0.00000000000000DC80p0", "0x0.00000000000000E1C8p0", "0x0.00000000000000E720p0", "0x0.00000000000000EC88p0",
"0x0.00000000000000F200p0", "0x0.00000000000000F788p0", "0x0.00000000000000FD20p0", "0x0.0000000000000102C8p0",
"0x0.000000000000010880p0", "0x0.000000000000010E48p0", "0x0.000000000000011420p0", "0x0.000000000000011A08p0",
"0x0.000000000000012000p0", "0x0.000000000000012608p0", "0x0.000000000000012C20p0", "0x0.000000000000013248p0",
"0x0.000000000000013880p0", "0x0.000000000000013EC8p0", "0x0.000000000000014520p0", "0x0.000000000000014B88p0",
"0x0.000000000000015200p0", "0x0.000000000000015888p0", "0x0.000000000000015F20p0", "0x0.0000000000000165C8p0",
"0x0.000000000000016C80p0", "0x0.000000000000017348p0", "0x0.000000000000017A20p0", "0x0.000000000000018108p0",
"0x0.000000000000018800p0", "0x0.000000000000018F08p0", "0x0.000000000000019620p0", "0x0.000000000000019D48p0",
"0x0.00000000000001A480p0", "0x0.00000000000001ABC8p0", "0x0.00000000000001B320p0", "0x0.00000000000001BA88p0",
"0x0.00000000000001C200p0", "0x0.00000000000001C988p0", "0x0.00000000000001D120p0", "0x0.00000000000001D8C8p0",
"0x0.00000000000001E080p0", "0x0.00000000000001E848p0", "0x0.00000000000001F020p0", "0x0.00000000000001F808p0",
"0x0.000000000000020000p0", "0x0.000000000000020808p0", "0x0.000000000000021020p0", "0x0.000000000000021848p0",
"0x0.000000000000022080p0", "0x0.0000000000000228C8p0", "0x0.000000000000023120p0", "0x0.000000000000023988p0",
"0x0.000000000000024200p0", "0x0.000000000000024A88p0", "0x0.000000000000025320p0", "0x0.000000000000025BC8p0",
"0x0.000000000000026480p0", "0x0.000000000000026D48p0", "0x0.000000000000027620p0", "0x0.000000000000027F08p0",
"0x0.000000000000028800p0", "0x0.000000000000029108p0", "0x0.000000000000029A20p0", "0x0.00000000000002A348p0",
"0x0.00000000000002AC80p0", "0x0.00000000000002B5C8p0", "0x0.00000000000002BF20p0", "0x0.00000000000002C888p0",
"0x0.00000000000002D200p0", "0x0.00000000000002DB88p0", "0x0.00000000000002E520p0", "0x0.00000000000002EEC8p0",
"0x0.00000000000002F880p0", "0x0.000000000000030248p0", "0x0.000000000000030C20p0", "0x0.000000000000031608p0",
"0x0.000000000000032000p0", "0x0.000000000000032A08p0", "0x0.000000000000033420p0", "0x0.000000000000033E48p0",
"0x0.000000000000034880p0", "0x0.0000000000000352C8p0", "0x0.000000000000035D20p0", "0x0.000000000000036788p0",
"0x0.000000000000037200p0", "0x0.000000000000037C88p0", "0x0.000000000000038720p0", "0x0.0000000000000391C8p0",
"0x0.000000000000039C80p0", "0x0.00000000000003A748p0", "0x0.00000000000003B220p0", "0x0.00000000000003BD08p0",
"0x0.00000000000003C800p0", "0x0.00000000000003D308p0", "0x0.00000000000003DE20p0", "0x0.00000000000003E948p0",
"0x0.00000000000003F480p0", "0x0.00000000000003FFC8p0", "0x0.000000000000040B20p0", "0x0.000000000000041688p0",
"0x0.000000000000042200p0", "0x0.000000000000042D88p0", "0x0.000000000000043920p0", "0x0.0000000000000444C8p0",
"0x0.000000000000045080p0", "0x0.000000000000045C48p0", "0x0.000000000000046820p0", "0x0.000000000000047408p0",
"0x0.000000000000048000p0", "0x0.000000000000048C08p0", "0x0.000000000000049820p0", "0x0.00000000000004A448p0",
"0x0.00000000000004B080p0", "0x0.00000000000004BCC8p0", "0x0.00000000000004C920p0", "0x0.00000000000004D588p0",
"0x0.00000000000004E200p0", "0x0.00000000000004EE88p0", "0x0.00000000000004FB20p0", "0x0.0000000000000507C8p0",
"0x0.000000000000051480p0", "0x0.000000000000052148p0", "0x0.000000000000052E20p0", "0x0.000000000000053B08p0",
"0x0.000000000000054800p0", "0x0.000000000000055508p0", "0x0.000000000000056220p0", "0x0.000000000000056F48p0",
"0x0.000000000000057C80p0", "0x0.0000000000000589C8p0", "0x0.000000000000059720p0", "0x0.00000000000005A488p0",
"0x0.00000000000005B200p0", "0x0.00000000000005BF88p0", "0x0.00000000000005CD20p0", "0x0.00000000000005DAC8p0",
"0x0.00000000000005E880p0", "0x0.00000000000005F648p0", "0x0.000000000000060420p0", "0x0.000000000000061208p0",
"0x0.000000000000062000p0", "0x0.000000000000062E08p0", "0x0.000000000000063C20p0", "0x0.000000000000064A48p0",
"0x0.000000000000065880p0", "0x0.0000000000000666C8p0", "0x0.000000000000067520p0", "0x0.000000000000068388p0",
"0x0.000000000000069200p0", "0x0.00000000000006A088p0", "0x0.00000000000006AF20p0", "0x0.00000000000006BDC8p0",
"0x0.00000000000006CC80p0", "0x0.00000000000006DB48p0", "0x0.00000000000006EA20p0", "0x0.00000000000006F908p0",
"0x0.000000000000070800p0", "0x0.000000000000071708p0", "0x0.000000000000072620p0", "0x0.000000000000073548p0",
"0x0.000000000000074480p0", "0x0.0000000000000753C8p0", "0x0.000000000000076320p0", "0x0.000000000000077288p0",
"0x0.000000000000078200p0", "0x0.000000000000079188p0", "0x0.00000000000007A120p0", "0x0.00000000000007B0C8p0",
"0x0.00000000000007C080p0", "0x0.00000000000007D048p0", "0x0.00000000000007E020p0", "0x0.00000000000007F008p0",
            };
_ssdm_SpecConstant(f_x_msb_5_table);
# 1708 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"


            ap_ufixed<16,-53> f_x_msb_5 = f_x_msb_5_table[x_msb_ind_5];

            ap_ufixed<9,-60> f_x_msb_5_lsb = x_msb_5 * x_lsb;

            ap_ufixed<25,-26> x_msb_5_lsb = x_l;

            ap_ufixed<25,-44> f_x_msb_4_5_lsb = x_msb_5_lsb * x_msb_4;

            ap_ufixed<6,-37> f_x_msb_4_s = f_x_msb_4;
            ap_ufixed<6,-63> exp_x_msb_4_5_lsb_m_1_m1 = x_msb_5 * f_x_msb_4;

            ap_ufixed<10,-59> exp_x_msb_4_5_lsb_m_1_m2 = 0;
            exp_x_msb_4_5_lsb_m_1_m2(8,0) = f_x_msb_5_lsb(8,0);
            exp_x_msb_4_5_lsb_m_1_m2 = exp_x_msb_4_5_lsb_m_1_m1 + exp_x_msb_4_5_lsb_m_1_m2;

            ap_ufixed<17,-52> exp_x_msb_4_5_lsb_m_1_m3 = 0;
            exp_x_msb_4_5_lsb_m_1_m3(15,0) = f_x_msb_5(15,0);
            exp_x_msb_4_5_lsb_m_1_m3 = exp_x_msb_4_5_lsb_m_1_m2+exp_x_msb_4_5_lsb_m_1_m3;

            ap_ufixed<26,-43> exp_x_msb_4_5_lsb_m_1_m4 =0;
            exp_x_msb_4_5_lsb_m_1_m4(24,0) = f_x_msb_4_5_lsb(24,0);
            exp_x_msb_4_5_lsb_m_1_m4 = exp_x_msb_4_5_lsb_m_1_m4 + exp_x_msb_4_5_lsb_m_1_m3;

            ap_ufixed<33,-36> exp_x_msb_4_5_lsb_m_1_m5 = 0;
            exp_x_msb_4_5_lsb_m_1_m5(31,0) = f_x_msb_4(31,0);
            exp_x_msb_4_5_lsb_m_1_m5 = exp_x_msb_4_5_lsb_m_1_m5 + exp_x_msb_4_5_lsb_m_1_m4;

            ap_ufixed<wf-18,-18> x_msb_4_5_lsb = x_l;
            ap_ufixed<wf-17,-17> exp_x_msb_4_5_lsb_m_1_s = 0;
            exp_x_msb_4_5_lsb_m_1_s(30,0) = exp_x_msb_4_5_lsb_m_1_m5(32,2);
            exp_x_msb_4_5_lsb_m_1_s = exp_x_msb_4_5_lsb_m_1_s + x_msb_4_5_lsb;

            ap_ufixed<52,-17> exp_x_msb_4_5_lsb_m_1 = exp_x_msb_4_5_lsb_m_1_s;
            exp_x_msb_4_5_lsb_m_1(1,0) = exp_x_msb_4_5_lsb_m_1_m5(1,0);


            const static ap_ufixed<51,-21> f_x_msb_3_table[256] = {
"0x0", "0x0.00000000080000AAAAp0", "0x0.000000002000055556p0", "0x0.000000004800120003p0",
"0x0.0000000080002AAAB5p0", "0x0.00000000C80053556Fp0", "0x0.000000012000900036p0", "0x0.000000018800E4AB0Ep0",
"0x0.000000020001555600p0", "0x0.000000028801E60111p0", "0x0.0000000320029AAC4Bp0", "0x0.00000003C8037757B7p0",
"0x0.000000048004800360p0", "0x0.000000054805B8AF50p0", "0x0.000000062007255B96p0", "0x0.000000070808CA083Dp0",
"0x0.00000008000AAAB555p0", "0x0.00000009080CCB62EDp0", "0x0.0000000A200F301116p0", "0x0.0000000B4811DCBFE0p0",
"0x0.0000000C8014D56F60p0", "0x0.0000000DC8181E1FA7p0", "0x0.0000000F201BBAD0CBp0", "0x0.00000010881FAF82E1p0",
"0x0.000000120024003600p0", "0x0.000000138828B0EA3Fp0", "0x0.00000015202DC59FB6p0", "0x0.00000016C83342567Fp0",
"0x0.0000001880392B0EB5p0", "0x0.0000001A483F83C874p0", "0x0.0000001C20465083D6p0", "0x0.0000001E084D9540FBp0",
"0x0.000000200055560001p0", "0x0.00000022085D96C106p0", "0x0.0000002420665B842Cp0", "0x0.00000026486FA84995p0",
"0x0.000000288079811161p0", "0x0.0000002AC883E9DBB6p0", "0x0.0000002D208EE6A8B8p0", "0x0.0000002F889A7B788Cp0",
"0x0.0000003200A6AC4B58p0", "0x0.0000003488B37D2145p0", "0x0.0000003720C0F1FA7Ap0", "0x0.00000039C8CF0ED721p0",
"0x0.0000003C80DDD7B765p0", "0x0.0000003F48ED509B71p0", "0x0.0000004220FD7D8371p0", "0x0.00000045090E626F94p0",
"0x0.000000480120036008p0", "0x0.0000004B09326454FBp0", "0x0.0000004E2145894E9Fp0", "0x0.000000514959764D26p0",
"0x0.00000054816E2F50C1p0", "0x0.00000057C983B859A4p0", "0x0.0000005B219A156804p0", "0x0.0000005E89B14A7C16p0",
"0x0.0000006201C95B9611p0", "0x0.0000006589E24CB62Cp0", "0x0.0000006921FC21DCA0p0", "0x0.0000006CCA16DF09A6p0",
"0x0.000000708232883D78p0", "0x0.000000744A4F217853p0", "0x0.00000078226CAEBA73p0", "0x0.0000007C0A8B340414p0",
"0x0.0000008002AAB55577p0", "0x0.000000840ACB36AEDAp0", "0x0.0000008822ECBC107Dp0", "0x0.0000008C4B0F497AA3p0",
"0x0.000000908332E2ED8Ep0", "0x0.00000094CB578C6981p0", "0x0.00000099237D49EEC0p0", "0x0.0000009D8BA41F7D92p0",
"0x0.000000A203CC11163Dp0", "0x0.000000A68BF522B908p0", "0x0.000000AB241F58663Cp0", "0x0.000000AFCC4AB61E22p0",
"0x0.000000B484773FE105p0", "0x0.000000B94CA4F9AF31p0", "0x0.000000BE24D3E788F1p0", "0x0.000000C30D040D6E94p0",
"0x0.000000C805356F6068p0", "0x0.000000CD0D68115EBCp0", "0x0.000000D2259BF769E1p0", "0x0.000000D74DD1258228p0",
"0x0.000000DC86079FA7E4p0", "0x0.000000E1CE3F69DB69p0", "0x0.000000E72678881D0Bp0", "0x0.000000EC8EB2FE6D1Fp0",
"0x0.000000F206EED0CBFDp0", "0x0.000000F78F2C0339FAp0", "0x0.000000FD276A99B771p0", "0x0.00000102CFAA9844BBp0",
"0x0.0000010887EC02E231p0", "0x0.0000010E502EDD9030p0", "0x0.0000011428732C4F14p0", "0x0.0000011A10B8F31F3Bp0",
"0x0.000001200900360103p0", "0x0.000001261148F8F4CBp0", "0x0.0000012C29933FFAF5p0", "0x0.0000013251DF0F13E1p0",
"0x0.000001388A2C6A3FF3p0", "0x0.0000013ED27B557F8Dp0", "0x0.000001452ACBD4D315p0", "0x0.0000014B931DEC3AEFp0",
"0x0.000001520B719FB782p0", "0x0.0000015893C6F34937p0", "0x0.0000015F2C1DEAF074p0", "0x0.00000165D4768AADA5p0",
"0x0.0000016C8CD0D68133p0", "0x0.00000173552CD26B89p0", "0x0.0000017A2D8A826D16p0", "0x0.0000018115E9EA8645p0",
"0x0.000001880E4B0EB785p0", "0x0.0000018F16ADF30147p0", "0x0.000001962F129B63FAp0", "0x0.0000019D57790BE010p0",
"0x0.000001A48FE14875FBp0", "0x0.000001ABD84B552630p0", "0x0.000001B330B735F122p0", "0x0.000001BA9924EED748p0",
"0x0.000001C2119483D917p0", "0x0.000001C99A05F8F707p0", "0x0.000001D13279523191p0", "0x0.000001D8DAEE93892Ep0",
"0x0.000001E09365C0FE59p0", "0x0.000001E85BDEDE918Dp0", "0x0.000001F03459F04347p0", "0x0.000001F81CD6FA1405p0",
"0x0.000002001556000444p0", "0x0.000002081DD7061485p0", "0x0.00000210365A104547p0", "0x0.000002185EDF22970Dp0",
"0x0.000002209766410A5Ap0", "0x0.00000228DFEF6F9FAFp0", "0x0.00000231387AB25793p0", "0x0.00000239A1080D328Ap0",
"0x0.00000242199784311Cp0", "0x0.0000024AA2291B53CFp0", "0x0.000002533ABCD69B2Dp0", "0x0.0000025BE352BA07BEp0",
"0x0.000002649BEAC99A0Dp0", "0x0.0000026D64850952A7p0", "0x0.000002763D217D3216p0", "0x0.0000027F25C02938EAp0",
"0x0.000002881E611167B0p0", "0x0.00000291270439BEF8p0", "0x0.0000029A3FA9A63F53p0", "0x0.000002A368515AE951p0",
"0x0.000002ACA0FB5BBD86p0", "0x0.000002B5E9A7ACBC86p0", "0x0.000002BF425651E6E4p0", "0x0.000002C8AB074F3D36p0",
"0x0.000002D223BAA8C013p0", "0x0.000002DBAC70627012p0", "0x0.000002E54528804DCDp0", "0x0.000002EEEDE30659DBp0",
"0x0.000002F8A69FF894D9p0", "0x0.000003026F5F5AFF61p0", "0x0.0000030C4821319A10p0", "0x0.0000031630E5806584p0",
"0x0.0000032029AC4B625Bp0", "0x0.0000032A3275969134p0", "0x0.000003344B4165F2B1p0", "0x0.0000033E740FBD8772p0",
"0x0.00000348ACE0A1501Bp0", "0x0.00000352F5B4154D4Fp0", "0x0.0000035D4E8A1D7FB2p0", "0x0.00000367B762BDE7EAp0",
"0x0.00000372303DFA869Ep0", "0x0.0000037CB91BD75C75p0", "0x0.0000038751FC586A18p0", "0x0.00000391FADF81B02Fp0",
"0x0.0000039CB3C5572F67p0", "0x0.000003A77CADDCE86Ap0", "0x0.000003B2559916DBE4p0", "0x0.000003BD3E87090A84p0",
"0x0.000003C83777B774F8p0", "0x0.000003D3406B261BF0p0", "0x0.000003DE596159001Cp0", "0x0.000003E9825A54222Dp0",
"0x0.000003F4BB561B82D7p0", "0x0.000004000454B322CCp0", "0x0.0000040B5D561F02C2p0", "0x0.00000416C65A63236Ep0",
"0x0.000004223F61838586p0", "0x0.0000042DC86B8429C2p0", "0x0.0000043961786910DBp0", "0x0.000004450A88363B8Ap0",
"0x0.00000450C39AEFAA8Ap0", "0x0.0000045C8CB0995E96p0", "0x0.0000046865C937586Bp0", "0x0.000004744EE4CD98C6p0",
"0x0.000004804803602067p0", "0x0.0000048C5124F2F00Cp0", "0x0.000004986A498A0876p0", "0x0.000004A49371296A67p0",
"0x0.000004B0CC9BD516A1p0", "0x0.000004BD15C9910DE8p0", "0x0.000004C96EFA615101p0", "0x0.000004D5D82E49E0B0p0",
"0x0.000004E251654EBDBDp0", "0x0.000004EEDA9F73E8F0p0", "0x0.000004FB73DCBD6310p0", "0x0.000005081D1D2F2CE7p0",
"0x0.00000514D660CD4740p0", "0x0.000005219FA79BB2E7p0", "0x0.0000052E78F19E70A8p0", "0x0.0000053B623ED98150p0",
"0x0.000005485B8F50E5AFp0", "0x0.0000055564E3089E93p0", "0x0.000005627E3A04ACCEp0", "0x0.0000056FA794491131p0",
"0x0.0000057CE0F1D9CC8Ep0", "0x0.0000058A2A52BADFBAp0", "0x0.0000059783B6F04B88p0", "0x0.000005A4ED1E7E10CFp0",
"0x0.000005B26689683064p0", "0x0.000005BFEFF7B2AB20p0", "0x0.000005CD89696181DBp0", "0x0.000005DB32DE78B56Fp0",
"0x0.000005E8EC56FC46B6p0", "0x0.000005F6B5D2F0368Cp0", "0x0.000006048F525885CDp0", "0x0.0000061278D5393558p0",
"0x0.00000620725B96460Ap0", "0x0.0000062E7BE573B8C3p0", "0x0.0000063C9572D58E64p0", "0x0.0000064ABF03BFC7CEp0",
"0x0.00000658F8983665E5p0", "0x0.0000066742303D698Bp0", "0x0.000006759BCBD8D3A5p0", "0x0.00000684056B0CA519p0",
"0x0.000006927F0DDCDECEp0", "0x0.000006A108B44D81AAp0", "0x0.000006AFA25E628E98p0", "0x0.000006BE4C0C20067Fp0",
"0x0.000006CD05BD89EA4Bp0", "0x0.000006DBCF72A43AE8p0", "0x0.000006EAA92B72F942p0", "0x0.000006F992E7FA2646p0",
"0x0.000007088CA83DC2E4p0", "0x0.00000717966C41D00Ap0", "0x0.00000726B0340A4EAAp0", "0x0.00000735D9FF9B3FB6p0",
"0x0.0000074513CEF8A41Ep0", "0x0.000007545DA2267CD9p0", "0x0.00000763B77928CAD9p0", "0x0.000007732154038F14p0",
"0x0.000007829B32BACA82p0", "0x0.000007922515527E1Ap0", "0x0.000007A1BEFBCEAAD4p0", "0x0.000007B168E63351AAp0",
"0x0.000007C122D4847397p0", "0x0.000007D0ECC6C61195p0", "0x0.000007E0C6BCFC2CA3p0", "0x0.000007F0B0B72AC5BEp0",
            };
_ssdm_SpecConstant(f_x_msb_3_table);
# 1811 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<51,-21> f_x_msb_3 = f_x_msb_3_table[x_msb_ind_3];
            ap_ufixed<62,-10> exp_x_msb_3_m_1 = 0;
            exp_x_msb_3_m_1(61,54) = x_msb_3(7,0);
            exp_x_msb_3_m_1(50, 0) = f_x_msb_3(50,0);

            ap_ufixed<50,-10> exp_x_msb_3_m_1_s = exp_x_msb_3_m_1;

            ap_ufixed<101,-27> f_x_msb_3_4_5_lsb = exp_x_msb_3_m_1_s * exp_x_msb_4_5_lsb_m_1;
            ap_ufixed<45,-27> f_x_msb_3_4_5_lsb_s = f_x_msb_3_4_5_lsb;
            ap_ufixed<63, -9> exp_x_msb_3_4_5_lsb_m_1 = f_x_msb_3_4_5_lsb_s + exp_x_msb_3_m_1 + exp_x_msb_4_5_lsb_m_1;


            const static ap_ufixed<64,-4> f_x_msb_2_table[256] = {
"0x0.0p0", "0x0.00000800AAB555DDEp0", "0x0.00002005560011127p0", "0x0.00004812036081A9Cp0",
"0x0.0000802AB55777D28p0", "0x0.0000C8536F6684062p0", "0x0.0001209036103740Dp0", "0x0.000188E50ED8634A0p0",
"0x0.0002015600445B0C3p0", "0x0.000289E711DB32FD7p0", "0x0.0003229C4C260197Ep0", "0x0.0003CB79B8B01FE26p0",
"0x0.0004848362076A08Dp0", "0x0.00054DBD53BC80058p0", "0x0.0006272B9A630659Dp0", "0x0.000710D24391E6D7Ap0",
"0x0.00080AB55DE3917ABp0", "0x0.000914D8F8F63D524p0", "0x0.000A2F41256C297AFp0", "0x0.000B59F1F4EBDE291p0",
"0x0.000C94EF7A206DC2Dp0", "0x0.000DE03DC8B9B60B1p0", "0x0.000F3BE0F56CA15C4p0", "0x0.0010A7DD15F367F40p0",
"0x0.00122436410DD14E5p0", "0x0.0013B0F08E817591Ep0", "0x0.00154E101719FF0C5p0", "0x0.0016FB98F4A96BBEFp0",
"0x0.0018B98F42084EFBDp0", "0x0.001A87F71B1613137p0", "0x0.001C66D49CB93B127p0", "0x0.001E562BE4DFA4904p0",
"0x0.00205601127EC98E0p0", "0x0.00226658459402659p0", "0x0.002487359F24C7C99p0", "0x0.0026B89D413EF4D5Ep0",
"0x0.0028FA934EF909304p0", "0x0.002B4D1BEC726B39Cp0", "0x0.002DB03B3ED3AA50Ep0", "0x0.003023F56C4EC123Fp0",
"0x0.0032A84E9C1F58145p0", "0x0.00353D4AF68B07AA1p0", "0x0.0037E2EEA4E19B185p0", "0x0.003A993DD17D52D25p0",
"0x0.003D603CA7C32730Fp0", "0x0.004037EF54230B293p0", "0x0.0043205A04182F12Fp0", "0x0.00461980E62943810p0",
"0x0.0049236829E8BC292p0", "0x0.004C3E13FFF512DD8p0", "0x0.004F698899F90A966p0", "0x0.0052A5CA2AABF28D0p0",
"0x0.0055F2DCE5D1E966Ep0", "0x0.005950C5003C20723p0", "0x0.005CBF86AFC91EF2Bp0", "0x0.00603F262B65057FCp0",
"0x0.0063CFA7AB09D1732p0", "0x0.0067710F67BFA0687p0", "0x0.006B23619B9CF3CDEp0", "0x0.006EE6A281C6F4857p0",
"0x0.0072BAD65671B6977p0", "0x0.0076A00156E07CF57p0", "0x0.007A9627C165FD4EDp0", "0x0.007E9D4DD564A3F5Ep0",
"0x0.0082B577D34ED7D5Bp0", "0x0.0086DEA9FCA73E799p0", "0x0.008B18E8940100253p0", "0x0.008F6437DD000BFDAp0",
"0x0.0093C09C1C595C43Ep0", "0x0.00982E1997D33A9FCp0", "0x0.009CACB49645847CCp0", "0x0.00A13C715F99EF773p0",
"0x0.00A5DD543CCC4DDAFp0", "0x0.00AA8F6177EAD3336p0", "0x0.00AF529D5C1658EBCp0", "0x0.00B4270C3582A301Dp0",
"0x0.00B90CB25176A4C8Bp0", "0x0.00BE0393FE4CC5BD7p0", "0x0.00C30BB58B73266CAp0", "0x0.00C8251B496BE5696p0",
"0x0.00CD4FC989CD64555p0", "0x0.00D28BC49F428CFA3p0", "0x0.00D7D910DD8B16743p0", "0x0.00DD37B2997BCA6E6p0",
"0x0.00E2A7AE28FECA6FBp0", "0x0.00E82907E313D5399p0", "0x0.00EDBBC41FD08C383p0", "0x0.00F35FE73860B9038p0",
"0x0.00F91575870692F24p0", "0x0.00FEDC73671B04BDFp0", "0x0.0104B4E5350DF2386p0", "0x0.010A9ECF4E667E12Dp0",
"0x0.01109A3611C34FB64p0", "0x0.0116A71DDEDAD92D8p0", "0x0.011CC58B167B9D206p0", "0x0.0122F5821A8C74E0Dp0",
"0x0.012937074E0CD6893p0", "0x0.012F8A1F15151B2C6p0", "0x0.0135EECDD4D6C5172p0", "0x0.013C6517F39CC6233p0",
"0x0.0142ED01D8CBC61C4p0", "0x0.0149868FECE26935Dp0", "0x0.015031C6997996937p0", "0x0.0156EEAA4944BEE23p0",
"0x0.015DBD3F68122303Ep0", "0x0.01649D8A62CB1ACBEp0", "0x0.016B8F8FA7745BCDBp0", "0x0.01729353A52E403D8p0",
"0x0.0179A8DACC350DE1Dp0", "0x0.0180D0298DE13D179p0", "0x0.018809445CA7BFE78p0", "0x0.018F542FAC1A492D6p0",
"0x0.0196B0EFF0E793D15p0", "0x0.019E1F89A0DBAA128p0", "0x0.01A5A00132E02CE42p0", "0x0.01AD325B1EFC9B5BCp0",
"0x0.01B4D69BDE569A322p0", "0x0.01BC8CC7EB323B553p0", "0x0.01C454E3C0F2458C8p0", "0x0.01CC2EF3DC187C2F6p0",
"0x0.01D41AFCBA45E6ED2p0", "0x0.01DC1902DA3B19A6Dp0", "0x0.01E4290ABBD87C5BCp0", "0x0.01EC4B18E01E9326Fp0",
"0x0.01F47F31C92E464FCp0", "0x0.01FCC559FA492A6B6p0", "0x0.02051D95F7D1C8917p0", "0x0.020D87EA474BE6A1Cp0",
"0x0.0216045B6F5CCF9CEp0", "0x0.021E92EDF7CB9C0E4p0", "0x0.022733A669817A88Ap0", "0x0.022FE6894E89F834Cp0",
"0x0.0238AB9B321349722p0", "0x0.024182E0A06E9289Bp0", "0x0.024A6C5E271030733p0", "0x0.02536818549001AC1p0",
"0x0.025C7613B8A9AF215p0", "0x0.02659654E43CF52B1p0", "0x0.026EC8E0694DEC9A9p0", "0x0.02780DBADB0553DA6p0",
"0x0.028164E8CDB0D8211p0", "0x0.028ACE6ED6C35EB5Fp0", "0x0.02944A518CD54E484p0", "0x0.029DD89587A4D858Dp0",
"0x0.02A7793F601642B5Dp0", "0x0.02B12C53B03431090p0", "0x0.02BAF1D7132FEE788p0", "0x0.02C4C9CE2561B759Fp0",
"0x0.02CEB43D844902F7Ap0", "0x0.02D8B129CE8CCD68Fp0", "0x0.02E2C097A3FBE17C9p0", "0x0.02ECE28BA58D22B56p0",
"0x0.02F7170A755FD759Ep0", "0x0.03015E18B6BBF2966p0", "0x0.030BB7BB0E125EB13p0", "0x0.031623F620FD4751Ep0",
"0x0.0320A2CE964063DACp0", "0x0.032B344915C941D54p0", "0x0.0335D86A48AF8F70Cp0", "0x0.03408F36D93566140p0",
"0x0.034B58B372C795013p0", "0x0.035634E4C1FDEC0D0p0", "0x0.036123CF749B8667Cp0", "0x0.036C2578398F157A0p0",
"0x0.037739E3C0F32BD30p0", "0x0.03826116BC0E882ACp0", "0x0.038D9B15DD5460763p0", "0x0.0398E7E5D864AD0E9p0",
"0x0.03A4478B620C73EB5p0", "0x0.03AFBA0B304613EEDp0", "0x0.03BB3F69FA3990464p0", "0x0.03C6D7AC783CDBDBFp0",
"0x0.03D282D763D424DCDp0", "0x0.03DE40EF77B220509p0", "0x0.03EA11F96FB855C4Fp0", "0x0.03F5F5FA08F76B0BBp0",
"0x0.0401ECF601AF700BDp0", "0x0.040DF6F219502AA55p0", "0x0.041A13F3107962A88p0", "0x0.042643FDA8FB2DDFBp0",
"0x0.04328716A5D63C2C4p0", "0x0.043EDD42CB3C23B6Dp0", "0x0.044B4686DE8FAD325p0", "0x0.0457C2E7A66520322p0",
"0x0.04645269EA828F932p0", "0x0.0470F51273E025F89p0", "0x0.047DAAE60CA8725B3p0", "0x0.048A73E98038B4ABFp0",
"0x0.049750219B212A8A0p0", "0x0.04A43F932B255C0B7p0", "0x0.04B14242FF3C689A0p0", "0x0.04BE5835E79153E1Dp0",
"0x0.04CB8170B58352D4Ep0", "0x0.04D8BDF83BA618C04p0", "0x0.04E60DD14DC22475Ep0", "0x0.04F37100C0D50D88Ep0",
"0x0.0500E78B6B11D19D6p0", "0x0.050E717623E121CBAp0", "0x0.051C0EC5C3E1B016Cp0", "0x0.0529BF7F24E87CF6Ap0",
"0x0.053783A7220124F51p0", "0x0.05455B42976E2E5EAp0", "0x0.0553465662A95706Bp0", "0x0.056144E76263E21F4p0",
"0x0.056F56FA7686E623Ep0", "0x0.057D7C9480339AD83p0", "0x0.058BB5BA61C3A75A3p0", "0x0.059A0270FEC97047Ap0",
"0x0.05A862BD3C1065F74p0", "0x0.05B6D6A3FF9D52C58p0", "0x0.05C55E2A30AEA974Ep0", "0x0.05D3F954B7BCD3A1Bp0",
"0x0.05E2A8287E7A8049Ep0", "0x0.05F16AAA6FD4F267Bp0", "0x0.060040DF77F44FA13p0", "0x0.060F2ACC843BEF0A0p0",
"0x0.061E2876834AA7FA4p0", "0x0.062D39E264FB20F7Ep0", "0x0.063C5F151A641EB4Cp0", "0x0.064B981395D8D31FEp0",
"0x0.065AE4E2CAE92C8AAp0", "0x0.066A4587AE6224E1Cp0", "0x0.0679BA07364E10FA3p0", "0x0.0689426659F4EFF1Bp0",
"0x0.0698DEAA11DCBAA37p0", "0x0.06A88ED757C9B3304p0", "0x0.06B852F326BEB49B0p0", "0x0.06C82B027AFD8278Ap0",
"0x0.06D8170A520718B46p0", "0x0.06E8170FAA9BFB67Ep0", "0x0.06F82B1784BC86C72p0", "0x0.07085326E1A93F207p0",
"0x0.07188F42C3E320F0Bp0", "0x0.0728DF702F2BF10B2p0", "0x0.073943B428868CD5Ap0", "0x0.0749BC13B6373A98Fp0",
"0x0.075A4893DFC3F9E4Cp0", "0x0.076AE939ADF4D4083p0", "0x0.077B9E0A2AD42C9E8p0", "0x0.078C670A61AF122F4p0",
"0x0.079D443F5F158EE3Ap0", "0x0.07AE35AE30DAF94F1p0", "0x0.07BF3B5BE616454CBp0", "0x0.07D0554D8F2254F0Cp0",
"0x0.07E183883D9E498E2p0", "0x0.07F2C611046DD4D06p0", "0x0.08041CECF7B989EA2p0", "0x0.081588212CEF2ED73p0",
"0x0.082707B2BAC20DB40p0", "0x0.08389BA6B92B46284p0", "0x0.084A4402416A1EE6Fp0", "0x0.085C00CA6E045741Fp0",
"0x0.086DD2045AC678D2Bp0", "0x0.087FB7B524C42936Cp0", "0x0.0891B1E1EA587BE12p0", "0x0.08A3C08FCB2643FFEp0",
            };
_ssdm_SpecConstant(f_x_msb_2_table);
# 1889 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<64,-4> f_x_msb_2 = f_x_msb_2_table[x_msb_ind_2];
            ap_ufixed< 6,-4> f_x_msb_2_h;
            f_x_msb_2_h(5,0) = f_x_msb_2(63,58);
            ap_ufixed< 9,-1> exp_x_msb_2_m_1_h = f_x_msb_2_h + x_msb_2;
            ap_ufixed<67,-1> exp_x_msb_2_m_1;
            exp_x_msb_2_m_1(66,58) = exp_x_msb_2_m_1_h(8,0);
            exp_x_msb_2_m_1(57, 0) = f_x_msb_2(57,0);

            ap_ufixed<130,-10> f_x_msb_2_3_4_5_lsb = exp_x_msb_2_m_1 * exp_x_msb_3_4_5_lsb_m_1;
            ap_ufixed<62,-10> f_x_msb_2_3_4_5_lsb_s = f_x_msb_2_3_4_5_lsb;
            ap_ufixed<72,0> exp_x_msb_2_3_4_5_lsb_m_1 = f_x_msb_2_3_4_5_lsb_s + exp_x_msb_2_m_1 + exp_x_msb_3_4_5_lsb_m_1;

            const static ap_ufixed<68,32> exp_x_msb_1_table[256] = {
"0x1.000000000p0", "0x1.48B5E3C3Ep0", "0x1.A61298E1Ep0", "0x2.1DF3B68CFp0",
"0x2.B7E151628p0", "0x3.7D871DB61p0", "0x4.7B4FF993Fp0", "0x5.C12DA416Ep0",
"0x7.63992E353p0", "0x9.7CDC417A3p0", "0xC.2EB7EC98Fp0", "0xF.A48385EDFp0",
"0x14.15E5BF6FBp0", "0x19.CA53B7811p0", "0x21.1D8E4272Dp0", "0x2A.8565A144Cp0",
"0x36.99205C4E7p0", "0x46.1AFC4DB59p0", "0x5A.0462B7877p0", "0x73.9593ABB7Dp0",
"0x94.69C4CB819p0", "0xBE.90F6F83E9p0", "0xF4.B122790DDp0", "0x13A.30CF1CCBBp0",
"0x193.6DC5690C0p0", "0x206.03487A3B1p0", "0x299.2442102D9p0", "0x356.0F0B0F980p0",
"0x448.A216ABB76p0", "0x580.1AD754FA3p0", "0x710.0ADBAC7DAp0", "0x911.9289C3923p0",
"0xBA4.F53EA3863p0", "0xEF3.A035D5798p0", "0x1332.C4D2B7C4Ap0", "0x18A6.B027DA0A7p0",
"0x1FA7.157C470F8p0", "0x28A4.90D2CCEF1p0", "0x342F.BA11823B8p0", "0x4302.3A933EE5Cp0",
"0x560A.773E54157p0", "0x6E7A.8ABB4A83Cp0", "0x8DDB.80AF4269Dp0", "0xB626.0748BAEC7p0",
"0xE9E2.2447727BFp0", "0x12C4F.EB75B2AB0p0", "0x1819B.C560F6113p0", "0x1EF21.8F1B001A4p0",
"0x27BC2.CA9A6F934p0", "0x33055.49F35D91Fp0", "0x41831.49596E996p0", "0x541E7.E56949D58p0",
"0x6C02D.645AB2554p0", "0x8AB06.0A3EE9FB1p0", "0xB2148.5EAE56C5Bp0", "0xE4A8D.2881EDBE8p0",
"0x1259AC.48BF05D6Ep0", "0x178FEE.7792E44B3p0", "0x1E4127.437732B71p0", "0x26D8F9.4A204BEA5p0",
"0x31E199.5F5A550DDp0", "0x400C7D.64D3386CBp0", "0x523D82.79EDAEF9Cp0", "0x69993D.D4F2D9524p0",
"0x87975E.854001024p0", "0xAE1A47.C38A42CD0p0", "0xDF8D5F.6DCFE5CEAp0", "0x11F0BF8.1E99FDEB6p0",
"0x1709348.C0EA4F8CEp0", "0x1D94295.464477ACCp0", "0x25FAD90.65C78E342p0", "0x30C4623.616ED2BE2p0",
"0x3E9E441.232817A61p0", "0x506744D.3B342FC94p0", "0x673D70B.C00F1F76Dp0", "0x849012B.C127FC962p0",
"0xAA36C7C.F69370B94p0", "0xDA8F202.DD9ACE661p0", "0x118A2AAE.0AA05236Bp0", "0x16857CFA.1AA8A5555p0",
"0x1CEB088B.68E804021p0", "0x2521AEDA.32CD52BE5p0", "0x2FAD89E1.79BAB8EADp0", "0x3D3838C6.BE0F13F06p0",
"0x4E9B87F6.7BB3F5597p0", "0x64EF201B.01109A4A5p0", "0x819A1801.9394C0D96p0", "0xA6698403.CF5D9E663p0",
"0xD5AD6DCE.21AFFC0DDp0", "0x1125E066B.0B19418CCp0", "0x1604B68CF.05F65FAA9p0", "0x1C45AED0A.D0C934CDCp0",
"0x244D5E676.3FB814AF0p0", "0x2E9CEBF49.9C21839C7p0", "0x3BDA2CBD0.9F5AC2146p0", "0x4CDA0FD41.989F004E7p0",
"0x62ADFED51.D7EDCCDE6p0", "0x7EB50B520.76F91D6E8p0", "0xA2B1FD3D9.A57B6C33Cp0", "0xD0E7A50F4.EF0D7447Fp0",
"0x10C3D39209.62C88AAFBp0", "0x1586D0722B.3EEB27301p0", "0x1BA4068AAC.2B6E3EE34p0", "0x237DCBF1E5.709A9F9C1p0",
"0x2D9264D2D4.D6B94153Bp0", "0x3A83F23B18.FE5BD524Ap0", "0x4B22A1B5C3.27A2FD85Ap0", "0x6079C1866C.71A93951Dp0",
"0x7BE08BDFD9.CC72249ABp0", "0x9F0FB7309C.B446D3919p0", "0xCC3D265776.C3D25779Ep0", "0x1063F7612B0.C0831CA6Cp0",
"0x150BBA37963.79A4FB6ADp0", "0x1B05FA9B62E.737D935B8p0", "0x22B2DC5C41D.AD89559EBp0", "0x2C8DD1AB28B.404414BE7p0",
"0x39355C8C638.0AC5631B1p0", "0x49750434675.301B8D0E7p0", "0x5E521E7A16E.51F9CD3C2p0", "0x791C3B06F8B.EA2DEC48Cp0",
"0x9B823857614.764F43E20p0", "0xC7AD559D438.E7C270C30p0", "0x10063F4E687B.A1A43A35Bp0", "0x149363C905BA.3641D0164p0",
"0x1A6B765D8CDF.6CDBF1C63p0", "0x21EC75240E66.E2891CE63p0", "0x2B8F1073A6AF.BA219DB61p0", "0x37EE3FFC0063.E360F931Fp0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0", "0x0.000000000p0",
"0x0.000000000p0", "0x0.000000001p0", "0x0.000000001p0", "0x0.000000002p0",
"0x0.000000002p0", "0x0.000000003p0", "0x0.000000004p0", "0x0.000000005p0",
"0x0.000000007p0", "0x0.000000009p0", "0x0.00000000Bp0", "0x0.00000000Ep0",
"0x0.000000013p0", "0x0.000000018p0", "0x0.00000001Fp0", "0x0.000000028p0",
"0x0.000000034p0", "0x0.000000042p0", "0x0.000000055p0", "0x0.00000006Ep0",
"0x0.00000008Dp0", "0x0.0000000B5p0", "0x0.0000000E9p0", "0x0.00000012Bp0",
"0x0.000000181p0", "0x0.0000001EEp0", "0x0.00000027Ap0", "0x0.00000032Fp0",
"0x0.000000416p0", "0x0.00000053Fp0", "0x0.0000006BDp0", "0x0.0000008A7p0",
"0x0.000000B1Cp0", "0x0.000000E44p0", "0x0.000001252p0", "0x0.000001786p0",
"0x0.000001E35p0", "0x0.0000026C9p0", "0x0.0000031CEp0", "0x0.000003FF3p0",
"0x0.00000521Dp0", "0x0.000006970p0", "0x0.000008762p0", "0x0.00000ADD6p0",
"0x0.00000DF36p0", "0x0.000011E9Cp0", "0x0.000017003p0", "0x0.00001D88Ap0",
"0x0.000025EC0p0", "0x0.000030B15p0", "0x0.00003E85Dp0", "0x0.00005047Ep0",
"0x0.000067153p0", "0x0.0000845C6p0", "0x0.0000A9F46p0", "0x0.0000DA39Ep0",
"0x0.000118354p0", "0x0.000167CB5p0", "0x0.0001CDFC2p0", "0x0.000251334p0",
"0x0.0002F9AF3p0", "0x0.0003D205Ap0", "0x0.0004E7CE2p0", "0x0.00064C7C6p0",
"0x0.000816791p0", "0x0.000A628A3p0", "0x0.000D55A1Fp0", "0x0.00111F30Fp0",
"0x0.0015FC210p0", "0x0.001C3AA91p0", "0x0.00243F374p0", "0x0.002E8ABFCp0",
"0x0.003BC2D73p0", "0x0.004CBC19Ap0", "0x0.006287862p0", "0x0.007E83A56p0",
"0x0.00A2728F8p0", "0x0.00D096336p0", "0x0.010BD4A5Ap0", "0x0.0157E6BFEp0",
"0x0.01B993FE0p0", "0x0.0236FF5BFp0", "0x0.02D80A08Dp0", "0x0.03A6D2222p0",
"0x0.04B0556E0p0", "0x0.0605424D5p0", "0x0.07BB04063p0", "0x0.09ED1B429p0",
"0x0.0CBED8666p0", "0x0.105D93892p0", "0x0.150385C09p0", "0x0.1AFB718E8p0",
"0x0.22A555477p0", "0x0.2C7C72FC0p0", "0x0.391F0EE49p0", "0x0.495860DCAp0",
"0x0.5E2D58D8Bp0", "0x0.78ED03AFBp0", "0x0.9B4597E37p0", "0x0.C75F7CF56p0",
            };
_ssdm_SpecConstant(exp_x_msb_1_table);
# 1967 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<68,32> exp_x_msb_1 = exp_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<140,32> y_lo = exp_x_msb_1 * exp_x_msb_2_3_4_5_lsb_m_1;
            ap_ufixed<68,32> y_lo_s = y_lo;
            ap_ufixed<68,32> y_l = y_lo_s + exp_x_msb_1;
            y = y_l;
        }
        y += delta;

            overf = 0;
#pragma unroll
 for (int j = 64; j >= I_+31; j--) {
                if (y[j])
                    overf = 1;
            }
            if (overf) {
#pragma unroll
 for (int j = 64; j >= I_+31; j--)
                    y[j] = 0;
#pragma unroll
 for (int j = I_+30; j >= 0; j--)
                    y[j] = 1;
            }

        r = y;
    }
    return r;
}

template<int W_, int I_>
ap_ufixed<W_,I_> exp(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return exp(xf);
}

template<int I_>
ap_int<I_> exp(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return exp(xf);
}

template<int I_>
ap_uint<I_> exp(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return exp(xf);
}

template<int W, int I>
ap_fixed<W,I> expm1(ap_fixed<W,I> x) {
    ap_fixed<W,I> result, tmp;
    ap_ufixed<1,1> one = 1;
    if(I < 1) {
        result = 0;
    } else {
        ap_fixed<W,I> tmp = exp(x);
        ap_ufixed<1,1> one = 1;
        result = tmp - one;
    }
    return result;
}

template<int W, int I>
ap_ufixed<W,I> expm1(ap_ufixed<W,I> x) {
    ap_fixed<W+1,I+1> xf = x;
    return expm1(xf);
}

template<int I>
ap_int<I> expm1(ap_int<I> x) {
    ap_fixed<I,I> xf = x;
    return expm1(xf);
}

template<int I>
ap_uint<I> expm1(ap_uint<I> x) {
    ap_fixed<I+1,I+1> xf = x;
    return expm1(xf);
}

template<int W, int I>
ap_fixed<W,I> exp2(ap_fixed<W,I> x) {

    int F = W - I;
    if(I > 33 || F > 32) {
        return 0;
    }

    int I_s;
    int M = ((I - 1) > F) ? (I - 1) : F;

    if(M == 1) {
        I_s = 1;
    } else if(M == 2) {
        I_s = 2;
    } else if(M <= 4) {
        I_s = 3;
    } else if(M <= 8) {
        I_s = 4;
    } else if(M <= 16) {
        I_s = 5;
    } else {
        I_s = 6;
    }

    ap_fixed<W,I> r;

    if(I_s == 1) {

        ap_fixed<3,2> x_l = x;
        ap_ufixed<2,1> y = 0;

        if(!x_l[2]) {
            y[1] = 1;
        }
        if(x_l[1]) {
            y[0] = 1;
        }

        if(I<2) {
            if(y[1]) {
                y[1]=0;
                y[0]=1;
            }
        }
        r = y;

    } else if(I_s == 2) {

        ap_fixed<5,3> x_l = x;
        ap_ufixed<4,2> y = 0;
        ap_fixed<2,2> x_l_int;
        x_l_int(1,0) = x_l(3,2);
        ap_ufixed<2,0> x_l_fract;
        x_l_fract(1,0) = x_l(1,0);

        if( (x_l[4]&&(!x_l[3])) || ((!x_l[4])&&x_l[3]) ) {
            if(!x_l[4]) {
                y = "0x3.cp0";
            }
        } else {
            if((!x_l[3])&(x_l[2])) y[3] = 1;
            if(((!x_l[3])&(!x_l[2])) | ((!x_l[3])&x_l[2]&x_l[1]&x_l[0])) y[2] = 1;
            if( (x_l[3]&x_l[2]) | ((!x_l[3])&( (x_l[2]&(x_l[1]^x_l[0])) | ((!x_l[2])&x_l[1]&x_l[0] )))) y[1] = 1;
            if((x_l[3]&(!x_l[2])) | (x_l[1]&((x_l[0]&x_l[2]) | ((!x_l[0])&(!x_l[3]))))) y[0] =1;
        }

        if(I<3) {
            bool overf = 0;
#pragma unroll
 for(int j=3; j>=I+1; j--) {
                if(y[j]) {
                    overf = 1;
                }
            }
            if (overf) {
#pragma unroll
 for(int j=3; j>=I+1; j--) {
                    y[j] = 0;
                }
#pragma unroll
 for(int j=I; j>=0; j--) {
                    y[j] = 1;
                }
            }
        }
        r = y;

    } else if(I_s == 3) {

        ap_fixed<9,5> x_l = x;
        ap_ufixed<8,4> y = 0;
        ap_fixed<3,3> x_l_int;
        x_l_int(2,0) = x_l(6,4);
        ap_ufixed<4,0> x_l_fract;
        x_l_fract(3,0) = x_l(3,0);

        if((x_l[8]!=x_l[7])||(x_l[8]!=x_l[6])) {
            if(!x_l[8]) {
                y = "0xf.fp0";
            }
        } else {
            ap_uint<4> x_msb_ind;
            ap_uint<3> x_lsb_ind;
            x_msb_ind[3] = x_l[8];
            x_msb_ind(2,0) = x_l(5,3);
            x_lsb_ind(2,0) = x_l(2,0);
            const static ap_ufixed<10,4> exp2_x_msb_table[16] = {
                "0x1.00p0", "0x1.6Cp0", "0x2.00p0", "0x2.D4p0",
                "0x4.00p0", "0x5.A8p0", "0x8.00p0", "0xB.50p0",
                "0x0.10p0", "0x0.18p0", "0x0.20p0", "0x0.2Cp0",
                "0x0.40p0", "0x0.5Cp0", "0x0.80p0", "0x0.B4p0"
            };
_ssdm_SpecConstant(exp2_x_msb_table);
# 2218 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            const static ap_ufixed<10,0> exp2_x_lsb_m_1_table[8] = {
                "0x0.0p0", "0x0.0B4p0", "0x0.174p0", "0x0.238p0",
                "0x0.308p0", "0x0.3E0p0", "0x0.4C0p0", "0x0.5ACp0"
            };
_ssdm_SpecConstant(exp2_x_lsb_m_1_table);
# 2224 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<11,0> exp2_x_lsb_m_1 = exp2_x_lsb_m_1_table[x_lsb_ind];
            ap_ufixed<10,4> exp2_x_msb = exp2_x_msb_table[x_msb_ind];
            ap_ufixed<21,4> y_lo = exp2_x_msb * exp2_x_lsb_m_1;
            ap_ufixed<10,4> y_lo_s = y_lo;
            ap_ufixed<10,4> y_l = y_lo_s + exp2_x_msb;
            y = y_l;
        }

        if(I < 5) {
            bool overf = 0;
#pragma unroll
 for(int j=7; j>=3+I; j--) {
                if(y[j]) {
                    overf = 1;
                }
            }
            if(overf) {
#pragma unroll
 for(int j=7; j>=3+I; j--) {
                    y[j] = 0;
                }
#pragma unroll
 for(int j=I+2; j>=0; j--) {
                    y[j] = 1;
                }
            }
        }
        r = y;

    } else if(I_s == 4) {

        ap_fixed<17,9> x_l=x;
        ap_ufixed<16,8> y = 0;
        ap_fixed<4,4> x_l_int;
        x_l_int(3,0) = x_l(11,8);
        ap_ufixed<8,0> x_l_fract;
        x_l_fract(7,0) = x_l(7,0);

        bool overf_1 = 0;
#pragma unroll
 for(int j=11; j<16; j++) {
            if(x_l[16]!=x_l[j]) {
                overf_1 = 1;
            }
        }
        if(overf_1) {
            if(!x_l[16]) {
                y = "0xff.ffp0";
            }
        } else {

            ap_uint<5> x_msb_ind_1;
            x_msb_ind_1(4,0) = x_l(11,7);
            ap_uint<4> x_msb_ind_2;
            x_msb_ind_2(3,0) = x_l(6,3);
            ap_uint<3> x_lsb_ind;
            x_lsb_ind = x_l(2,0);

            const static ap_ufixed<14,-5> exp2_x_lsb_m_1_table[8] = {
                "0x0.0p0", "0x0.00B1Ap0", "0x0.0163Ep0", "0x0.02168p0",
                "0x0.02C9Ap0", "0x0.037D4p0", "0x0.04316p0", "0x0.04E60p0"
            };
_ssdm_SpecConstant(exp2_x_lsb_m_1_table);
# 2286 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<14,-5> exp2_x_lsb_m_1 = exp2_x_lsb_m_1_table[x_lsb_ind];

            const static ap_ufixed<19,0> exp2_x_msb_2_m_1_table[16] = {
                "0x0.0p0,0", "0x0.059B0p0", "0x0.0B558p0", "0x0.11302p0",
                "0x0.172B8p0", "0x0.1D488p0", "0x0.2387Ap0", "0x0.29E9Ep0",
                "0x0.306FEp0", "0x0.371A8p0", "0x0.3DEA6p0", "0x0.44E08p0",
                "0x0.4BFDAp0", "0x0.5342Cp0", "0x0.5AB08p0", "0x0.6247Ep0"
            };
_ssdm_SpecConstant(exp2_x_msb_2_m_1_table);
# 2292 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<19,0> exp2_x_msb_2_m_1 = exp2_x_msb_2_m_1_table[x_msb_ind_2];
            ap_ufixed<33,-5> f_x_msb_2_lsb = exp2_x_msb_2_m_1 * exp2_x_lsb_m_1;
            ap_ufixed<19,0> f_x_msb_2_lsb_s = f_x_msb_2_lsb;
            ap_ufixed<19,0> exp2_x_msb_2_lsb_m_1 = f_x_msb_2_lsb_s + exp2_x_msb_2_m_1 + exp2_x_lsb_m_1;

            const static ap_ufixed<19,8> exp2_x_msb_1_table[32] = {
                "0x1.000p0", "0x1.6A0p0", "0x2.000p0", "0x2.D42p0",
                "0x4.000p0", "0x5.A82p0", "0x8.000p0", "0xB.504p0",
                "0x10.000p0", "0x16.A0Ap0", "0x20.000p0", "0x2D.414p0",
                "0x40.000p0", "0x5A.828p0", "0x80.000p0", "0xB5.050p0",
                "0x0.010p0", "0x0.016p0", "0x0.020p0", "0x0.02Ep0",
                "0x0.040p0", "0x0.05Ap0", "0x0.080p0", "0x0.0B6p0",
                "0x0.100p0", "0x0.16Ap0", "0x0.200p0", "0x0.2D4p0",
                "0x0.400p0", "0x0.5A8p0", "0x0.800p0", "0x0.B50p0"
            };
_ssdm_SpecConstant(exp2_x_msb_1_table);
# 2303 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<19,8> exp2_x_msb_1 = exp2_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<38,8> y_lo = exp2_x_msb_1 * exp2_x_msb_2_lsb_m_1;
            ap_ufixed<19,8> y_lo_s = y_lo;
            ap_ufixed<19,8> y_l = y_lo_s + exp2_x_msb_1;
            y = y_l;
        }

        if(I < 9) {
            bool overf_2 = 0;
#pragma unroll
 for(int j=15; j>=7+I; j--) {
                if(y[j]) {
                    overf_2 = 1;
                }
            }
            if(overf_2) {
#pragma unroll
 for(int j=15; j>=7+I; j--) {
                    y[j] = 0;
                }
#pragma unroll
 for(int j=6+I; j>=0; j--) {
                    y[j] = 1;
                }
            }
        }
        r = y;

    } else if(I_s == 5) {

        ap_fixed<33,17> x_l = x;
        ap_ufixed<32,16> y = 0;
        ap_fixed<5,5> x_l_int;
        x_l_int(4,0) = x_l(20,16);
        ap_ufixed<16,0> x_l_fract;
        x_l_fract(15,0) = x_l(15,0);

        bool overf_1 = 0;
#pragma unroll
 for(int j=20; j<32; j++) {
            if(x_l[32]!=x_l[j]) {
                overf_1 = 1;
            }
        }
        if(overf_1) {
            if(!x_l[32]) {
                y = "0xffff.ffffp0";
            }
        } else {
            ap_uint<6> x_msb_ind_1;
            x_msb_ind_1(5,0) = x_l(20,15);
            ap_uint<5> x_msb_ind_2;
            x_msb_ind_2(4,0) = x_l(14,10);
            ap_uint<5> x_msb_ind_3;
            x_msb_ind_3(4,0) = x_l(9,5);
            ap_uint<5> x_lsb_ind;
            x_lsb_ind = x_l(4,0);

            const static ap_ufixed<25,-11> exp2_x_lsb_m_1_table[32] = {
                "0x0.0p0", "0x0.0000B1725p0", "0x0.000162E52p0", "0x0.000214587p0",
                "0x0.0002C5CC3p0", "0x0.000377408p0", "0x0.000428B53p0", "0x0.0004DA2A7p0",
                "0x0.00058BA02p0", "0x0.00063D165p0", "0x0.0006EE8CFp0", "0x0.0007A0042p0",
                "0x0.0008517BBp0", "0x0.000902F3Dp0", "0x0.0009B46C6p0", "0x0.000A65E57p0",
                "0x0.000B175F0p0", "0x0.000BC8D90p0", "0x0.000C7A538p0", "0x0.000D2BCE8p0",
                "0x0.000DDD4A0p0", "0x0.000E8EC5Fp0", "0x0.000F40425p0", "0x0.000FF1BF4p0",
                "0x0.0010A33CAp0", "0x0.001154BA8p0", "0x0.00120638Dp0", "0x0.0012B7B7Bp0",
                "0x0.001369370p0", "0x0.00141AB6Cp0", "0x0.0014CC371p0", "0x0.00157DB7Dp0"
            };
_ssdm_SpecConstant(exp2_x_lsb_m_1_table);
# 2371 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<25,-11> exp2_x_lsb_m_1 = exp2_x_lsb_m_1_table[x_lsb_ind];

            const static ap_ufixed<30,-6> exp2_x_msb_3_m_1_table[32] = {
                "0x0.0p0", "0x0.00162F390p0", "0x0.002C605E3p0", "0x0.0042936FBp0",
                "0x0.0058C86DAp0", "0x0.006EFF584p0", "0x0.0085382FBp0", "0x0.009B72F42p0",
                "0x0.00B1AFA5Bp0", "0x0.00C7EE449p0", "0x0.00DE2ED0Fp0", "0x0.00F4714AFp0",
                "0x0.010AB5B2Dp0", "0x0.0120FC08Ap0", "0x0.0137444CAp0", "0x0.014D8E7EFp0",
                "0x0.0163DA9FBp0", "0x0.017A28AF2p0", "0x0.019078AD7p0", "0x0.01A6CA9ABp0",
                "0x0.01BD1E771p0", "0x0.01D37442Dp0", "0x0.01E9CBFE1p0", "0x0.020025A8Fp0",
                "0x0.02168143Bp0", "0x0.022CDECE7p0", "0x0.02433E495p0", "0x0.02599FB48p0",
                "0x0.027003104p0", "0x0.0286685CAp0", "0x0.029CCF99Dp0", "0x0.02B338C81p0"
            };
_ssdm_SpecConstant(exp2_x_msb_3_m_1_table);
# 2383 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<30,-6> exp2_x_msb_3_m_1 = exp2_x_msb_3_m_1_table[x_msb_ind_3];
            ap_ufixed<55,-17> f_x_msb_3_lsb = exp2_x_msb_3_m_1 * exp2_x_lsb_m_1;
            ap_ufixed<19,-17> f_x_msb_3_lsb_s = f_x_msb_3_lsb;
            ap_ufixed<30,-6> exp2_x_msb_3_lsb_m_1 = f_x_msb_3_lsb_s + exp2_x_msb_3_m_1 + exp2_x_lsb_m_1;

            const static ap_ufixed<36,0> exp2_x_msb_2_m_1_table[32] = {
                "0x0.0p0", "0x0.02C9A3E78p0", "0x0.059B0D316p0", "0x0.087451876p0",
                "0x0.0B5586CFAp0", "0x0.0E3EC32D4p0", "0x0.11301D012p0", "0x0.1429AAEA9p0",
                "0x0.172B83C7Dp0", "0x0.1A35BEB70p0", "0x0.1D4873169p0", "0x0.2063B8863p0",
                "0x0.2387A6E75p0", "0x0.26B4565E2p0", "0x0.29E9DF520p0", "0x0.2D285A6E4p0",
                "0x0.306FE0A32p0", "0x0.33C08B264p0", "0x0.371A7373Bp0", "0x0.3A7DB34E6p0",
                "0x0.3DEA64C12p0", "0x0.4160A21F7p0", "0x0.44E086062p0", "0x0.486A2B5C1p0",
                "0x0.4BFDAD536p0", "0x0.4F9B2769Dp0", "0x0.5342B569Dp0", "0x0.56F4736B5p0",
                "0x0.5AB07DD48p0", "0x0.5E76F15ADp0", "0x0.6247EB03Ap0", "0x0.662388255p0"
            };
_ssdm_SpecConstant(exp2_x_msb_2_m_1_table);
# 2398 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<36,0> exp2_x_msb_2_m_1 = exp2_x_msb_2_m_1_table[x_msb_ind_2];
            ap_ufixed<66,-6> f_x_msb_2_lsb = exp2_x_msb_2_m_1 * exp2_x_msb_3_lsb_m_1;
            ap_ufixed<30,-6> f_x_msb_2_lsb_s = f_x_msb_2_lsb;
            ap_ufixed<36,0> exp2_x_msb_2_3_lsb_m_1 = f_x_msb_2_lsb_s + exp2_x_msb_2_m_1 + exp2_x_msb_3_lsb_m_1;

            const static ap_ufixed<36,16> exp2_x_msb_1_table[64] = {
                "0x1.00000p0", "0x1.6A09Ep0", "0x2.00000p0", "0x2.D413Dp0",
                "0x4.00000p0", "0x5.A827Ap0", "0x8.00000p0", "0xB.504F3p0",
                "0x10.00000p0", "0x16.A09E6p0", "0x20.00000p0", "0x2D.413CDp0",
                "0x40.00000p0", "0x5A.8279Ap0", "0x80.00000p0", "0xB5.04F33p0",
                "0x100.00000p0", "0x16A.09E66p0", "0x200.00000p0", "0x2D4.13CCDp0",
                "0x400.00000p0", "0x5A8.2799Ap0", "0x800.00000p0", "0xB50.4F334p0",
                "0x1000.00000p0", "0x16A0.9E668p0", "0x2000.00000p0", "0x2D41.3CCD0p0",
                "0x4000.00000p0", "0x5A82.799A0p0", "0x8000.00000p0", "0xB504.F3340p0",
                "0x0.00010p0", "0x0.00017p0", "0x0.00020p0", "0x0.0002Dp0",
                "0x0.00040p0", "0x0.0005Bp0", "0x0.00080p0", "0x0.000B5p0",
                "0x0.00100p0", "0x0.0016Ap0", "0x0.00200p0", "0x0.002D4p0",
                "0x0.00400p0", "0x0.005A8p0", "0x0.00800p0", "0x0.00B50p0",
                "0x0.01000p0", "0x0.016A1p0", "0x0.02000p0", "0x0.02D41p0",
                "0x0.04000p0", "0x0.05A82p0", "0x0.08000p0", "0x0.0B505p0",
                "0x0.10000p0", "0x0.16A0Ap0", "0x0.20000p0", "0x0.2D414p0",
                "0x0.40000p0", "0x0.5A828p0", "0x0.80000p0", "0x0.B504Fp0"
            };
_ssdm_SpecConstant(exp2_x_msb_1_table);
# 2413 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<36,16> exp2_x_msb_1 = exp2_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<72,16> y_lo = exp2_x_msb_1 * exp2_x_msb_2_3_lsb_m_1;
            ap_ufixed<36,16> y_lo_s = y_lo;
            ap_ufixed<36,16> y_l = y_lo_s + exp2_x_msb_1;
            y = y_l;
        }

        if(I<17) {
            bool overf_2 = 0;
#pragma unroll
 for(int j=31; j>=I+15; j--) {
                if(y[j]) {
                    overf_2 = 1;
                }
            }
            if(overf_2) {
#pragma unroll
 for(int j=31; j>=I+15; j--) {
                    y[j] = 0;
                }
#pragma unroll
 for(int j=I+14; j>=0; j--) {
                    y[j] = 1;
                }
            }
        }
        r = y;

    } else {
        ap_fixed<65,33> x_l = 0;
#pragma unroll
 for(int j=32-F; j<32+I; j++) {
            x_l[j] = x[j-(32-F)];
        }
#pragma unroll
 for(int j=32+I; j<=64; j++) {
            x_l[j] = x[W-1];
        }
        ap_ufixed<64,32> y = 0;
        ap_fixed<6,6> x_l_int;
        x_l_int(5,0) = x_l(37,32);
        ap_ufixed<32,0> x_l_fract;
        x_l_fract(31,0) = x_l(31,0);

        bool overf_1 = 0;
#pragma unroll
 for(int j=37; j<64; j++) {
            if(x_l[j]!=x_l[64]) {
                overf_1 = 1;
            }
        }
        if(overf_1) {
            if(!x_l[64]) {
#pragma unroll
 for(int j=0; j<64; j++) {
                    y[j] = 1;
                }
            }
        } else {
            ap_uint<8> x_msb_ind_1;
            x_msb_ind_1(7,0) = x_l(37,30);
            ap_uint<8> x_msb_ind_2;
            x_msb_ind_2(7,0) = x_l(29,22);
            ap_uint<8> x_msb_ind_3;
            x_msb_ind_3(7,0) = x_l(21,14);
            ap_uint<8> x_msb_ind_4;
            x_msb_ind_4(7,0) = x_l(13,6);
            ap_uint<6> x_lsb_ind;
            x_lsb_ind(5,0) = x_l(5,0);

            const static ap_ufixed<42,-26> exp2_x_lsb_m_1_table[64] = {
                "0x0.0p0", "0x0.00000000B17217F81p0", "0x0.0000000162E42FF0Ap0", "0x0.00000002145647E9Ap0",
                "0x0.00000002C5C85FE32p0", "0x0.00000003773A77DD2p0", "0x0.0000000428AC8FD79p0", "0x0.00000004DA1EA7D28p0",
                "0x0.000000058B90BFCDFp0", "0x0.000000063D02D7C9Dp0", "0x0.00000006EE74EFC63p0", "0x0.000000079FE707C31p0",
                "0x0.0000000851591FC07p0", "0x0.0000000902CB37BE4p0", "0x0.00000009B43D4FBC9p0", "0x0.0000000A65AF67BB6p0",
                "0x0.0000000B17217FBAAp0", "0x0.0000000BC89397BA6p0", "0x0.0000000C7A05AFBA9p0", "0x0.0000000D2B77C7BB5p0",
                "0x0.0000000DDCE9DFBC8p0", "0x0.0000000E8E5BF7BE2p0", "0x0.0000000F3FCE0FC05p0", "0x0.0000000FF14027C2Fp0",
                "0x0.00000010A2B23FC61p0", "0x0.00000011542457C9Ap0", "0x0.0000001205966FCDBp0", "0x0.00000012B70887D24p0",
                "0x0.00000013687A9FD75p0", "0x0.0000001419ECB7DCDp0", "0x0.00000014CB5ECFE2Dp0", "0x0.000000157CD0E7E94p0",
                "0x0.000000162E42FFF03p0", "0x0.00000016DFB517F7Ap0", "0x0.0000001791272FFF9p0", "0x0.0000001842994807Fp0",
                "0x0.00000018F40B6010Dp0", "0x0.00000019A57D781A3p0", "0x0.0000001A56EF90240p0", "0x0.0000001B0861A82E6p0",
                "0x0.0000001BB9D3C0392p0", "0x0.0000001C6B45D8447p0", "0x0.0000001D1CB7F0503p0", "0x0.0000001DCE2A085C7p0",
                "0x0.0000001E7F9C20692p0", "0x0.0000001F310E38765p0", "0x0.0000001FE28050840p0", "0x0.0000002093F268923p0",
                "0x0.00000021456480A0Dp0", "0x0.00000021F6D698AFFp0", "0x0.00000022A848B0BF9p0", "0x0.0000002359BAC8CFAp0",
                "0x0.000000240B2CE0E03p0", "0x0.00000024BC9EF8F14p0", "0x0.000000256E111102Cp0", "0x0.000000261F832914Cp0",
                "0x0.00000026D0F541274p0", "0x0.000000278267593A3p0", "0x0.0000002833D9714DBp0", "0x0.00000028E54B89619p0",
                "0x0.0000002996BDA1760p0", "0x0.0000002A482FB98AEp0", "0x0.0000002AF9A1D1A04p0", "0x0.0000002BAB13E9B61p0"
            };
_ssdm_SpecConstant(exp2_x_lsb_m_1_table);
# 2501 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<42,-26> exp2_x_lsb_m_1 = exp2_x_lsb_m_1_table[x_lsb_ind];

            const static ap_ufixed<50,-18> exp2_x_msb_4_m_1_table[256] = {
                "0x0.0p0", "0x0.0000002C5C8601CC7p0", "0x0.00000058B90C0B48Cp0", "0x0.0000008515921C751p0",
                "0x0.000000B1721835515p0", "0x0.000000DDCE9E55DD7p0", "0x0.0000010A2B247E199p0", "0x0.0000013687AAAE059p0",
                "0x0.00000162E430E5A19p0", "0x0.0000018F40B724ED7p0", "0x0.000001BB9D3D6BE95p0", "0x0.000001E7F9C3BA951p0",
                "0x0.00000214564A10F0Dp0", "0x0.00000240B2D06EFC7p0", "0x0.0000026D0F56D4B80p0", "0x0.000002996BDD42239p0",
                "0x0.000002C5C863B73F0p0", "0x0.000002F224EA340A6p0", "0x0.0000031E8170B885Cp0", "0x0.0000034ADDF744B10p0",
                "0x0.000003773A7DD88C3p0", "0x0.000003A3970474175p0", "0x0.000003CFF38B17526p0", "0x0.000003FC5011C23D6p0",
                "0x0.00000428AC9874D86p0", "0x0.00000455091F2F234p0", "0x0.0000048165A5F11E1p0", "0x0.000004ADC22CBAC8Dp0",
                "0x0.000004DA1EB38C238p0", "0x0.000005067B3A652E2p0", "0x0.00000532D7C145E8Bp0", "0x0.0000055F34482E533p0",
                "0x0.0000058B90CF1E6D9p0", "0x0.000005B7ED561637Fp0", "0x0.000005E449DD15B24p0", "0x0.00000610A6641CDC8p0",
                "0x0.0000063D02EB2BB6Bp0", "0x0.000006695F724240Dp0", "0x0.00000695BBF9607AEp0", "0x0.000006C218808664Dp0",
                "0x0.000006EE7507B3FECp0", "0x0.0000071AD18EE948Ap0", "0x0.000007472E1626427p0", "0x0.000007738A9D6AEC2p0",
                "0x0.0000079FE724B745Dp0", "0x0.000007CC43AC0B4F7p0", "0x0.000007F8A0336708Fp0", "0x0.00000824FCBACA727p0",
                "0x0.000008515942358BEp0", "0x0.0000087DB5C9A8553p0", "0x0.000008AA125122CE8p0", "0x0.000008D66ED8A4F7Bp0",
                "0x0.00000902CB602ED0Ep0", "0x0.0000092F27E7C059Fp0", "0x0.0000095B846F59930p0", "0x0.00000987E0F6FA7C0p0",
                "0x0.000009B43D7EA314Ep0", "0x0.000009E09A06535DCp0", "0x0.00000A0CF68E0B568p0", "0x0.00000A395315CAFF3p0",
                "0x0.00000A65AF9D9257Ep0", "0x0.00000A920C2561607p0", "0x0.00000ABE68AD38190p0", "0x0.00000AEAC53516817p0",
                "0x0.00000B1721BCFC99Ep0", "0x0.00000B437E44EA623p0", "0x0.00000B6FDACCDFDA7p0", "0x0.00000B9C3754DD02Bp0",
                "0x0.00000BC893DCE1DADp0", "0x0.00000BF4F064EE62Fp0", "0x0.00000C214CED029AFp0", "0x0.00000C4DA9751E82Ep0",
                "0x0.00000C7A05FD421ADp0", "0x0.00000CA662856D62Ap0", "0x0.00000CD2BF0DA05A6p0", "0x0.00000CFF1B95DB022p0",
                "0x0.00000D2B781E1D59Cp0", "0x0.00000D57D4A667615p0", "0x0.00000D84312EB918Dp0", "0x0.00000DB08DB712805p0",
                "0x0.00000DDCEA3F7397Bp0", "0x0.00000E0946C7DC5F0p0", "0x0.00000E35A3504CD65p0", "0x0.00000E61FFD8C4FD8p0",
                "0x0.00000E8E5C6144D4Ap0", "0x0.00000EBAB8E9CC5BBp0", "0x0.00000EE715725B92Cp0", "0x0.00000F1371FAF279Bp0",
                "0x0.00000F3FCE8391109p0", "0x0.00000F6C2B0C37576p0", "0x0.00000F988794E54E3p0", "0x0.00000FC4E41D9AF4Ep0",
                "0x0.00000FF140A6584B8p0", "0x0.0000101D9D2F1D521p0", "0x0.00001049F9B7EA08Ap0", "0x0.000010765640BE6F1p0",
                "0x0.000010A2B2C99A857p0", "0x0.000010CF0F527E4BCp0", "0x0.000010FB6BDB69C21p0", "0x0.00001127C8645CE84p0",
                "0x0.0000115424ED57BE6p0", "0x0.0000118081765A447p0", "0x0.000011ACDDFF647A7p0", "0x0.000011D93A8876607p0",
                "0x0.0000120597118FF65p0", "0x0.00001231F39AB13C2p0", "0x0.0000125E5023DA31Ep0", "0x0.0000128AACAD0AD7Ap0",
                "0x0.000012B70936432D4p0", "0x0.000012E365BF8332Dp0", "0x0.0000130FC248CAE85p0", "0x0.0000133C1ED21A4DDp0",
                "0x0.000013687B5B71633p0", "0x0.00001394D7E4D0288p0", "0x0.000013C1346E369DDp0", "0x0.000013ED90F7A4C30p0",
                "0x0.00001419ED811A982p0", "0x0.000014464A0A981D4p0", "0x0.00001472A6941D524p0", "0x0.0000149F031DAA373p0",
                "0x0.000014CB5FA73ECC1p0", "0x0.000014F7BC30DB10Fp0", "0x0.0000152418BA7F05Bp0", "0x0.0000155075442AAA6p0",
                "0x0.0000157CD1CDDDFF1p0", "0x0.000015A92E579903Ap0", "0x0.000015D58AE15BB83p0", "0x0.00001601E76B261CAp0",
                "0x0.0000162E43F4F8310p0", "0x0.0000165AA07ED1F56p0", "0x0.00001686FD08B369Ap0", "0x0.000016B359929C8DEp0",
                "0x0.000016DFB61C8D620p0", "0x0.0000170C12A685E62p0", "0x0.000017386F30861A2p0", "0x0.00001764CBBA8DFE1p0",
                "0x0.0000179128449D920p0", "0x0.000017BD84CEB4D5Dp0", "0x0.000017E9E158D3C9Ap0", "0x0.000018163DE2FA6D6p0",
                "0x0.000018429A6D28C10p0", "0x0.0000186EF6F75EC4Ap0", "0x0.0000189B53819C782p0", "0x0.000018C7B00BE1DBAp0",
                "0x0.000018F40C962EEF0p0", "0x0.00001920692083B26p0", "0x0.0000194CC5AAE025Bp0", "0x0.0000197922354448Ep0",
                "0x0.000019A57EBFB01C1p0", "0x0.000019D1DB4A239F3p0", "0x0.000019FE37D49ED23p0", "0x0.00001A2A945F21B53p0",
                "0x0.00001A56F0E9AC482p0", "0x0.00001A834D743E8B0p0", "0x0.00001AAFA9FED87DCp0", "0x0.00001ADC06897A208p0",
                "0x0.00001B08631423733p0", "0x0.00001B34BF9ED475Dp0", "0x0.00001B611C298D286p0", "0x0.00001B8D78B44D8ADp0",
                "0x0.00001BB9D53F159D4p0", "0x0.00001BE631C9E55FAp0", "0x0.00001C128E54BCD1Fp0", "0x0.00001C3EEADF9BF43p0",
                "0x0.00001C6B476A82C66p0", "0x0.00001C97A3F571488p0", "0x0.00001CC40080677A9p0", "0x0.00001CF05D0B655C9p0",
                "0x0.00001D1CB9966AEE8p0", "0x0.00001D49162178306p0", "0x0.00001D7572AC8D223p0", "0x0.00001DA1CF37A9C40p0",
                "0x0.00001DCE2BC2CE15Bp0", "0x0.00001DFA884DFA175p0", "0x0.00001E26E4D92DC8Ep0", "0x0.00001E534164692A6p0",
                "0x0.00001E7F9DEFAC3BEp0", "0x0.00001EABFA7AF6FD4p0", "0x0.00001ED85706496E9p0", "0x0.00001F04B391A38FEp0",
                "0x0.00001F31101D05611p0", "0x0.00001F5D6CA86EE23p0", "0x0.00001F89C933E0135p0", "0x0.00001FB625BF58F45p0",
                "0x0.00001FE2824AD9855p0", "0x0.0000200EDED661C63p0", "0x0.0000203B3B61F1B71p0", "0x0.0000206797ED8957Dp0",
                "0x0.00002093F47928A89p0", "0x0.000020C05104CFA93p0", "0x0.000020ECAD907E59Dp0", "0x0.000021190A1C34BA6p0",
                "0x0.0000214566A7F2CAEp0", "0x0.00002171C333B88B4p0", "0x0.0000219E1FBF85FBAp0", "0x0.000021CA7C4B5B1BFp0",
                "0x0.000021F6D8D737EC3p0", "0x0.0000222335631C6C6p0", "0x0.0000224F91EF089C7p0", "0x0.0000227BEE7AFC7C8p0",
                "0x0.000022A84B06F80C8p0", "0x0.000022D4A792FB4C7p0", "0x0.00002301041F063C5p0", "0x0.0000232D60AB18DC3p0",
                "0x0.00002359BD37332BFp0", "0x0.0000238619C3552BAp0", "0x0.000023B2764F7EDB4p0", "0x0.000023DED2DBB03ADp0",
                "0x0.0000240B2F67E94A5p0", "0x0.000024378BF42A09Dp0", "0x0.00002463E88072793p0", "0x0.00002490450CC2988p0",
                "0x0.000024BCA1991A67Dp0", "0x0.000024E8FE2579E70p0", "0x0.000025155AB1E1163p0", "0x0.00002541B73E4FF54p0",
                "0x0.0000256E13CAC6845p0", "0x0.0000259A705744C34p0", "0x0.000025C6CCE3CAB23p0", "0x0.000025F3297058511p0",
                "0x0.0000261F85FCED9FDp0", "0x0.0000264BE2898A9E9p0", "0x0.000026783F162F4D4p0", "0x0.000026A49BA2DBABEp0",
                "0x0.000026D0F82F8FBA7p0", "0x0.000026FD54BC4B78Fp0", "0x0.00002729B1490EE75p0", "0x0.000027560DD5DA05Bp0",
                "0x0.000027826A62ACD41p0", "0x0.000027AEC6EF87525p0", "0x0.000027DB237C69808p0", "0x0.000028078009535EAp0",
                "0x0.00002833DC9644ECBp0", "0x0.0000286039233E2ABp0", "0x0.0000288C95B03F18Bp0", "0x0.000028B8F23D47B69p0",
                "0x0.000028E54ECA58046p0", "0x0.00002911AB5770023p0", "0x0.0000293E07E48FAFEp0", "0x0.0000296A6471B70D9p0",
                "0x0.00002996C0FEE61B2p0", "0x0.000029C31D8C1CD8Bp0", "0x0.000029EF7A195B463p0", "0x0.00002A1BD6A6A1639p0",
                "0x0.00002A483333EF30Fp0", "0x0.00002A748FC144AE4p0", "0x0.00002AA0EC4EA1DB8p0", "0x0.00002ACD48DC06B8Bp0",
                "0x0.00002AF9A5697345Dp0", "0x0.00002B2601F6E782Ep0", "0x0.00002B525E84636FEp0", "0x0.00002B7EBB11E70CDp0",
                "0x0.00002BAB179F7259Bp0", "0x0.00002BD7742D05568p0", "0x0.00002C03D0BAA0035p0", "0x0.00002C302D4842600p0"
            };
_ssdm_SpecConstant(exp2_x_msb_4_m_1_table);
# 2521 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<50,-18> exp2_x_msb_4_m_1 = exp2_x_msb_4_m_1_table[x_msb_ind_4];
            ap_ufixed<92,-44> f_x_msb_4_lsb = exp2_x_lsb_m_1 * exp2_x_msb_4_m_1;
            ap_ufixed<24,-44> f_x_msb_4_lsb_s = f_x_msb_4_lsb;
            ap_ufixed<50,-18> exp2_x_msb_4_lsb_m_1 = f_x_msb_4_lsb_s + exp2_x_msb_4_m_1 + exp2_x_lsb_m_1;

            const static ap_ufixed<58,-10> exp2_x_msb_3_m_1_table[256] = {
                "0x0.0p0", "0x0.00002C5C89D5EC6CAp0", "0x0.000058B91B5BC9AE3p0", "0x0.00008515B4919919Ap0",
                "0x0.0000B17255775C040p0", "0x0.0000DDCEFE0D13C26p0", "0x0.00010A2BAE52C1A9Bp0", "0x0.000136886648670F0p0",
                "0x0.000162E525EE05475p0", "0x0.00018F41ED439DA7Bp0", "0x0.0001BB9EBC4931853p0", "0x0.0001E7FB92FEC234Bp0",
                "0x0.000214587164510B6p0", "0x0.000240B55779DF5E3p0", "0x0.00026D12453F6E823p0", "0x0.0002996F3AB4FFCC6p0",
                "0x0.0002C5CC37DA9491Dp0", "0x0.0002F2293CB02E278p0", "0x0.00031E864935CDE29p0", "0x0.00034AE35D6B7517Ep0",
                "0x0.000377407951251C9p0", "0x0.0003A39D9CE6DF45Bp0", "0x0.0003CFFAC82CA4E84p0", "0x0.0003FC57FB2277595p0",
                "0x0.000428B535C857EDDp0", "0x0.00045512781E47FAFp0", "0x0.0004816FC22448D5Ap0", "0x0.0004ADCD13DA5BD2Fp0",
                "0x0.0004DA2A6D408247Ep0", "0x0.00050687CE56BD89Ap0", "0x0.000532E5371D0EED1p0", "0x0.00055F42A79377C75p0",
                "0x0.00058BA01FB9F96D7p0", "0x0.0005B7FD9F9095347p0", "0x0.0005E45B27174C716p0", "0x0.000610B8B64E20794p0",
                "0x0.00063D164D3512A14p0", "0x0.00066973EBCC243E4p0", "0x0.000695D1921356A57p0", "0x0.0006C22F400AAB2BCp0",
                "0x0.0006EE8CF5B223266p0", "0x0.00071AEAB309BFEA4p0", "0x0.00074748781182CC7p0", "0x0.000773A644C96D221p0",
                "0x0.0007A004193180402p0", "0x0.0007CC61F549BD7BCp0", "0x0.0007F8BFD9122629Ep0", "0x0.0008251DC48ABB9FAp0",
                "0x0.0008517BB7B37F322p0", "0x0.00087DD9B28C72365p0", "0x0.0008AA37B51596015p0", "0x0.0008D695BF4EEBE83p0",
                "0x0.000902F3D13875400p0", "0x0.00092F51EAD2335DCp0", "0x0.00095BB00C1C2796Ap0", "0x0.0009880E3516533FAp0",
                "0x0.0009B46C65C0B7ADCp0", "0x0.0009E0CA9E1B56363p0", "0x0.000A0D28DE26302DFp0", "0x0.000A398725E146EA2p0",
                "0x0.000A65E5754C9BBFBp0", "0x0.000A9243CC683003Ep0", "0x0.000ABEA22B34050BAp0", "0x0.000AEB0091B01C2C1p0",
                "0x0.000B175EFFDC76BA4p0", "0x0.000B43BD75B9160B4p0", "0x0.000B701BF345FB742p0", "0x0.000B9C7A7883284A1p0",
                "0x0.000BC8D905709DE20p0", "0x0.000BF5379A0E5D912p0", "0x0.000C2196365C68AC6p0", "0x0.000C4DF4DA5AC0890p0",
                "0x0.000C7A538609667C0p0", "0x0.000CA6B239685BDA6p0", "0x0.000CD310F477A1F96p0", "0x0.000CFF6FB7373A2DFp0",
                "0x0.000D2BCE81A725CD4p0", "0x0.000D582D53C7662C6p0", "0x0.000D848C2D97FCA05p0", "0x0.000DB0EB0F18EA7E4p0",
                "0x0.000DDD49F84A311B4p0", "0x0.000E09A8E92BD1CC6p0", "0x0.000E3607E1BDCDE6Cp0", "0x0.000E6266E20026BF7p0",
                "0x0.000E8EC5E9F2DDAB9p0", "0x0.000EBB24F995F4003p0", "0x0.000EE78410E96B126p0", "0x0.000F13E32FED44375p0",
                "0x0.000F404256A180C40p0", "0x0.000F6CA18506220D9p0", "0x0.000F9900BB1B29692p0", "0x0.000FC55FF8E0982BDp0",
                "0x0.000FF1BF3E566FAAAp0", "0x0.00101E1E8B7CB13ACp0", "0x0.00104A7DE0535E314p0", "0x0.001076DD3CDA77E34p0",
                "0x0.0010A33CA111FFA5Dp0", "0x0.0010CF9C0CF9F6CE1p0", "0x0.0010FBFB80925EB11p0", "0x0.0011285AFBDB38A40p0",
                "0x0.001154BA7ED485FC0p0", "0x0.0011811A097E480E0p0", "0x0.0011AD799BD8802F5p0", "0x0.0011D9D935E32FB4Fp0",
                "0x0.00120638D79E57F3Fp0", "0x0.001232988109FA419p0", "0x0.00125EF8322617F2Dp0", "0x0.00128B57EAF2B25CDp0",
                "0x0.0012B7B7AB6FCAD4Bp0", "0x0.0012E417739D62AFAp0", "0x0.00131077437B7B42Ap0", "0x0.00133CD71B0A15E2Ep0",
                "0x0.00136936FA4933E58p0", "0x0.00139596E138D69F9p0", "0x0.0013C1F6CFD8FF663p0", "0x0.0013EE56C629AF8E9p0",
                "0x0.00141AB6C42AE86DBp0", "0x0.00144716C9DCAB58Dp0", "0x0.00147376D73EF9A50p0", "0x0.00149FD6EC51D4A76p0",
                "0x0.0014CC3709153DB51p0", "0x0.0014F8972D8936234p0", "0x0.001524F759ADBF46Fp0", "0x0.001551578D82DA755p0",
                "0x0.00157DB7C90889038p0", "0x0.0015AA180C3ECC46Bp0", "0x0.0015D6785725A593Fp0", "0x0.001602D8A9BD16406p0",
                "0x0.00162F3904051FA13p0", "0x0.00165B9965FDC30B7p0", "0x0.001687F9CFA701D45p0", "0x0.0016B45A4100DD50Ep0",
                "0x0.0016E0BABA0B56D66p0", "0x0.00170D1B3AC66FB9Ep0", "0x0.0017397BC33229508p0", "0x0.001765DC534E84EF7p0",
                "0x0.0017923CEB1B83EBCp0", "0x0.0017BE9D8A99279ABp0", "0x0.0017EAFE31C771515p0", "0x0.0018175EE0A66264Cp0",
                "0x0.001843BF9735FC2A3p0", "0x0.0018702055763FF6Cp0", "0x0.00189C811B672F1FAp0", "0x0.0018C8E1E908CAF9Ep0",
                "0x0.0018F542BE5B14DABp0", "0x0.001921A39B5E0E174p0", "0x0.00194E048011B804Ap0", "0x0.00197A656C7613F81p0",
                "0x0.0019A6C6608B2346Ap0", "0x0.0019D3275C50E7458p0", "0x0.0019FF885FC76149Dp0", "0x0.001A2BE96AEE92A8Cp0",
                "0x0.001A584A7DC67CB77p0", "0x0.001A84AB984F20CB1p0", "0x0.001AB10CBA888038Cp0", "0x0.001ADD6DE4729C55Ap0",
                "0x0.001B09CF160D7676Fp0", "0x0.001B36304F590FF1Dp0", "0x0.001B629190556A1B5p0", "0x0.001B8EF2D9028648Cp0",
                "0x0.001BBB54296065CF2p0", "0x0.001BE7B5816F0A03Cp0", "0x0.001C1416E12E743BBp0", "0x0.001C4078489EA5CC2p0",
                "0x0.001C6CD9B7BFA00A4p0", "0x0.001C993B2E91644B3p0", "0x0.001CC59CAD13F3E42p0", "0x0.001CF1FE3347502A4p0",
                "0x0.001D1E5FC12B7A72Bp0", "0x0.001D4AC156C07412Ap0", "0x0.001D7722F4063E5F4p0", "0x0.001DA38498FCDAADBp0",
                "0x0.001DCFE645A44A533p0", "0x0.001DFC47F9FC8EA4Dp0", "0x0.001E28A9B605A8F7Dp0", "0x0.001E550B79BF9AA16p0",
                "0x0.001E816D452A64F6Ap0", "0x0.001EADCF1846094CCp0", "0x0.001EDA30F31288F8Ep0", "0x0.001F0692D58FE5505p0",
                "0x0.001F32F4BFBE1FA82p0", "0x0.001F5F56B19D39559p0", "0x0.001F8BB8AB2D33ADCp0", "0x0.001FB81AAC6E1005Ep0",
                "0x0.001FE47CB55FCFB33p0", "0x0.002010DEC602740ACp0", "0x0.00203D40DE55FE61Ep0", "0x0.002069A2FE5A700DAp0",
                "0x0.00209605260FCA635p0", "0x0.0020C26755760EB80p0", "0x0.0020EEC98C8D3E60Fp0", "0x0.00211B2BCB555AB35p0",
                "0x0.0021478E11CE65045p0", "0x0.002173F05FF85EA93p0", "0x0.0021A052B5D348F70p0", "0x0.0021CCB5135F25430p0",
                "0x0.0021F917789BF4E26p0", "0x0.00222579E589B92A6p0", "0x0.002251DC5A2873702p0", "0x0.00227E3ED6782508Ep0",
                "0x0.0022AAA15A78CF49Cp0", "0x0.0022D703E62A73880p0", "0x0.00230366798D1318Dp0", "0x0.00232FC914A0AF516p0",
                "0x0.00235C2BB7654986Fp0", "0x0.0023888E61DAE30EAp0", "0x0.0023B4F114017D3DBp0", "0x0.0023E153CDD919695p0",
                "0x0.00240DB68F61B8E6Cp0", "0x0.00243A19589B5D0B2p0", "0x0.0024667C2986072BAp0", "0x0.002492DF0221B89D9p0",
                "0x0.0024BF41E26E72B62p0", "0x0.0024EBA4CA6C36CA7p0", "0x0.00251807BA1B062FDp0", "0x0.0025446AB17AE23B5p0",
                "0x0.002570CDB08BCC425p0", "0x0.00259D30B74DC599Fp0", "0x0.0025C993C5C0CF977p0", "0x0.0025F5F6DBE4EB900p0",
                "0x0.00262259F9BA1AD8Dp0", "0x0.00264EBD1F405EC72p0", "0x0.00267B204C77B8B03p0", "0x0.0026A783816029E92p0",
                "0x0.0026D3E6BDF9B3C74p0", "0x0.0027004A0244579FCp0", "0x0.00272CAD4E4016C7Dp0", "0x0.00275910A1ECF294Bp0",
                "0x0.00278573FD4AEC5BAp0", "0x0.0027B1D7605A0571Cp0", "0x0.0027DE3ACB1A3F2C6p0", "0x0.00280A9E3D8B9AE0Cp0",
                "0x0.00283701B7AE19E40p0", "0x0.002863653981BD8B6p0", "0x0.00288FC8C306872C3p0", "0x0.0028BC2C543C781B9p0",
                "0x0.0028E88FED2391AECp0", "0x0.002914F38DBBD53B1p0", "0x0.0029415736054415Ap0", "0x0.00296DBAE5FFDF93Cp0",
                "0x0.00299A1E9DABA90A9p0", "0x0.0029C6825D08A1CF7p0", "0x0.0029F2E62416CB378p0", "0x0.002A1F49F2D626981p0",
                "0x0.002A4BADC946B5464p0", "0x0.002A7811A76878977p0", "0x0.002AA4758D3B71E0Cp0", "0x0.002AD0D97ABFA2778p0",
                "0x0.002AFD3D6FF50BB0Ep0", "0x0.002B29A16CDBAEE23p0", "0x0.002B560571738D609p0", "0x0.002B82697DBCA8816p0",
                "0x0.002BAECD91B70199Cp0", "0x0.002BDB31AD6299FF0p0", "0x0.002C0795D0BF73066p0", "0x0.002C33F9FBCD8E052p0"
            };
_ssdm_SpecConstant(exp2_x_msb_3_m_1_table);
# 2592 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<58,-10> exp2_x_msb_3_m_1 = exp2_x_msb_3_m_1_table[x_msb_ind_3];
            ap_ufixed<108,-28> f_x_msb_3_lsb = exp2_x_msb_3_m_1 * exp2_x_msb_4_lsb_m_1;
            ap_ufixed<40, -28> f_x_msb_3_lsb_s = f_x_msb_3_lsb;
            ap_ufixed<58, -10> exp2_x_msb_3_4_lsb_m_1 = f_x_msb_3_lsb_s + exp2_x_msb_3_m_1 + exp2_x_msb_4_lsb_m_1;

            const static ap_ufixed<68,0> exp2_x_msb_2_m_1_table[256] = {
                "0x0.0p0", "0x0.002C605E2E8CEC507p0", "0x0.0058C86DA1C09EA20p0", "0x0.0085382FAEF831DA9p0",
                "0x0.00B1AFA5ABCBED613p0", "0x0.00DE2ED0EE0F4F5FDp0", "0x0.010AB5B2CBD117074p0", "0x0.0137444C9B5B4ED49p0",
                "0x0.0163DA9FB33356D85p0", "0x0.019078AD6A19EEFF7p0", "0x0.01BD1E77170B415E7p0", "0x0.01E9CBFE113EEC7DCp0",
                "0x0.02168143B0280DA82p0", "0x0.02433E494B754B3ADp0", "0x0.027003103B10DEF7Dp0", "0x0.029CCF99D720A0593p0",
                "0x0.02C9A3E778060EE6Fp0", "0x0.02F67FFA765E5C8E5p0", "0x0.032363D42B0277FAAp0", "0x0.03504F75EF0716F0Cp0",
                "0x0.037D42E11BBCC0AB4p0", "0x0.03AA3E170AAFD8396p0", "0x0.03D7411915A8A6DF0p0", "0x0.04044BE896AB66771p0",
                "0x0.04315E86E7F84BD74p0", "0x0.045E78F5640B9135Cp0", "0x0.048B9B35659D8090Ep0", "0x0.04B8C54847A27E186p0",
                "0x0.04E5F72F654B12987p0", "0x0.051330EC1A03F5E6Ap0", "0x0.0540727FC1761950Dp0", "0x0.056DBBEBB786B20D9p0",
                "0x0.059B0D31585743AE8p0", "0x0.05C866520045AA948p0", "0x0.05F5C74F0BEC2665Bp0", "0x0.06233029D82164855p0",
                "0x0.0650A0E3C1F88A8D2p0", "0x0.067E197E26C140C90p0", "0x0.06AB99FA6407BCB43p0", "0x0.06D92259D794CB783p0",
                "0x0.0706B29DDF6DDC6DCp0", "0x0.07344AC7D9D50B9FCp0", "0x0.0761EAD925492C4F5p0", "0x0.078F92D32085D37A9p0",
                "0x0.07BD42B72A8362646p0", "0x0.07EAFA86A277111EFp0", "0x0.0818BA42E7D2F916Ep0", "0x0.084681ED5A461FA1Ap0",
                "0x0.0874518759BC808C3p0", "0x0.08A22912465F18AD3p0", "0x0.08D0088F8093F0774p0", "0x0.08FDF00068FE268ECp0",
                "0x0.092BDF66607DFA5FEp0", "0x0.0959D6C2C830D6B7Fp0", "0x0.0987D61701715C5F5p0", "0x0.09B5DD646DD76CB61p0",
                "0x0.09E3ECAC6F3834522p0", "0x0.0A1203F067A6359F1p0", "0x0.0A402331B97153804p0", "0x0.0A6E4A71C726DBF42p0",
                "0x0.0A9C79B1F39192BA3p0", "0x0.0ACAB0F3A1B9BBF9Fp0", "0x0.0AF8F03834E526EC8p0", "0x0.0B273781109738876p0",
                "0x0.0B5586CF9890F6299p0", "0x0.0B83DE2530D1104A2p0", "0x0.0BB23D833D93ED290p0", "0x0.0BE0A4EB2353B3818p0",
                "0x0.0C0F145E46C8553E6p0", "0x0.0C3D8BDE0CE79A306p0", "0x0.0C6C0B6BDAE52AC5Dp0", "0x0.0C9A930916329AC51p0",
                "0x0.0CC922B7247F7407Bp0", "0x0.0CF7BA776BB94138Ap0", "0x0.0D265A4B520B98932p0", "0x0.0D5502343DE026A4Bp0",
                "0x0.0D83B23395DEB90FBp0", "0x0.0DB26A4AC0ED4950Dp0", "0x0.0DE12A7B263007860p0", "0x0.0E0FF2C62D0965371p0",
                "0x0.0E3EC32D3D1A20207p0", "0x0.0E6D9BB1BE414CFFDp0", "0x0.0E9C7C55189C62628p0", "0x0.0ECB6518B4874375Bp0",
                "0x0.0EFA55FDFA9C4AD89p0", "0x0.0F294F0653B45570Ap0", "0x0.0F58503328E6CD3F5p0", "0x0.0F875985E389B439Ep0",
                "0x0.0FB66AFFED31AF232p0", "0x0.0FE584A2AFB210670p0", "0x0.1014A66F951CE2F7Ep0", "0x0.1043D06807C2F52E1p0",
                "0x0.1073028D7233E3A8Ep0", "0x0.10A23CE13F3E2431Dp0", "0x0.10D17F64D9EF10A19p0", "0x0.1100CA19AD92F1C6Bp0",
                "0x0.11301D0125B50A4ECp0", "0x0.115F781CAE1FA1B08p0", "0x0.118EDB6DB2DC0F18Dp0", "0x0.11BE46F5A032C458Fp0",
                "0x0.11EDBAB5E2AB58D6Fp0", "0x0.121D36AFE70C947FBp0", "0x0.124CBAE51A5C7ABB5p0", "0x0.127C4756E9E055631p0",
                "0x0.12ABDC06C31CBFB93p0", "0x0.12DB78F613D5B162Dp0", "0x0.130B1E264A0E8963Cp0", "0x0.133ACB98D40A191C1p0",
                "0x0.136A814F204AAF478p0", "0x0.139A3F4A9D9222FF2p0", "0x0.13CA058CBAE1DEBC9p0", "0x0.13F9D416E77AEB5F6p0",
                "0x0.1429AAEA92DDFB341p0", "0x0.14598A092CCB74FD3p0", "0x0.1489717425437EFE9p0", "0x0.14B9612CEC860A09Ep0",
                "0x0.14E95934F312DC8DCp0", "0x0.1519598DA9A99DA67p0", "0x0.154962388149E0304p0", "0x0.15797336EB332DDCAp0",
                "0x0.15A98C8A58E512481p0", "0x0.15D9AE343C1F26130p0", "0x0.1609D83606E119FBFp0", "0x0.163A0A912B6AC1FBBp0",
                "0x0.166A45471C3C2063Dp0", "0x0.169A88594C1570FE6p0", "0x0.16CAD3C92DF734306p0", "0x0.16FB279835223A1D7p0",
                "0x0.172B83C7D517ADCDFp0", "0x0.175BE85981992056Cp0", "0x0.178C554EAEA894030p0", "0x0.17BCCAA8D088877FCp0",
                "0x0.17ED48695BBC0109Ep0", "0x0.181DCE91C506999D8p0", "0x0.184E5D23816C88275p0", "0x0.187EF4200632ACB89p0",
                "0x0.18AF9388C8DE9BBBFp0", "0x0.18E03B5F3F36A92D4p0", "0x0.1910EBA4DF41F3D2Ap0", "0x0.1941A45B1F487077Ap0",
                "0x0.1972658375D2F52ABp0", "0x0.19A32F1F59AB447C4p0", "0x0.19D4013041DC18BF8p0", "0x0.1A04DBB7A5B12F4DCp0",
                "0x0.1A35BEB6FCB753CB7p0", "0x0.1A66AA2FBEBC6B6ECp0", "0x0.1A979E2363CF8048Fp0", "0x0.1AC89A936440CC90Dp0",
                "0x0.1AF99F8138A1C5EFEp0", "0x0.1B2AACEE59C528D0Dp0", "0x0.1B5BC2DC40BF03B07p0", "0x0.1B8CE14C66E4C2704p0",
                "0x0.1BBE084045CD39AB2p0", "0x0.1BEF37B95750B20C0p0", "0x0.1C206FB91588F3A67p0", "0x0.1C51B040FAD151512p0",
                "0x0.1C82F95281C6B4026p0", "0x0.1CB44AEF2547A62ECp0", "0x0.1CE5A51860745F298p0", "0x0.1D1707CFAEAECE86Cp0",
                "0x0.1D4873168B9AA7806p0", "0x0.1D79E6EE731D6C5BDp0", "0x0.1DAB6358E15E79D2Fp0", "0x0.1DDCE85752C7127E2p0",
                "0x0.1E0E75EB44026A409p0", "0x0.1E400C1631FDB1B6Ap0", "0x0.1E71AAD999E821A64p0", "0x0.1EA35236F9330670Ep0",
                "0x0.1ED5022FCD91CB882p0", "0x0.1F06BAC594FA06E38p0", "0x0.1F387BF9CDA384793p0", "0x0.1F6A45CDF60851B7Cp0",
                "0x0.1F9C18438CE4C902Bp0", "0x0.1FCDF35C11379D307p0", "0x0.1FFFD7190241E50A9p0", "0x0.2031C37BDF8726CFFp0",
                "0x0.2063B88628CD63B8Fp0", "0x0.2095B6395E1D237DAp0", "0x0.20C7BC96FFC17FDDEp0", "0x0.20F9CBA08E48302B7p0",
                "0x0.212BE3578A8194D65p0", "0x0.215E03BD7580C2FABp0", "0x0.21902CD3D09B8FF15p0", "0x0.21C25E9C1D6A9CE17p0",
                "0x0.21F49917DDC962553p0", "0x0.2226DC4893D63BCFAp0", "0x0.2259282FC1F273650p0", "0x0.228B7CCEEAC24D54Fp0",
                "0x0.22BDDA27912D13A6Ap0", "0x0.22F0403B385D21C70p0", "0x0.2322AF0B63BFF0291p0", "0x0.2355269997061FE83p0",
                "0x0.2387A6E75623866C2p0", "0x0.23BA2FF6254F390FBp0", "0x0.23ECC1C7890398C8Ap0", "0x0.241F5C5D05FE5DD26p0",
                "0x0.2451FFB82140A35A0p0", "0x0.2484ABDA600EF32CEp0", "0x0.24B760C547F15168Fp0", "0x0.24EA1E7A5EB3482F4p0",
                "0x0.251CE4FB2A63F3583p0", "0x0.254FB44931560C2A2p0", "0x0.25828C65FA1FF511Fp0", "0x0.25B56D530B9BC55D9p0",
                "0x0.25E85711ECE754F87p0", "0x0.261B49A42564482A2p0", "0x0.264E450B3CB81B573p0", "0x0.26814948BACC2EC3Ap0",
                "0x0.26B4565E27CDD257Ap0", "0x0.26E76C4D0C2E51669p0", "0x0.271A8B16F0A2FE778p0", "0x0.274DB2BD5E253F101p0",
                "0x0.2780E341DDF29781Ap0", "0x0.27B41CA5F98CB6B7Ep0", "0x0.27E75EEB3AB9820A2p0", "0x0.281AAA132B83210E1p0",
                "0x0.284DFE1F5638096CFp0", "0x0.28815B11456B0ABADp0", "0x0.28B4C0EA83F35A4FAp0", "0x0.28E82FAC9CEC9F225p0",
                "0x0.291BA7591BB6FDA67p0", "0x0.294F27F18BF723AB3p0", "0x0.2982B1777996543D0p0", "0x0.29B643EC70C273890p0",
                "0x0.29E9DF51FDEE12C26p0", "0x0.2A1D83A9ADD07C0A3p0", "0x0.2A5130F50D65BE58Dp0", "0x0.2A84E735A9EEB96A0p0",
                "0x0.2AB8A66D10F129AA3p0", "0x0.2AEC6E9CD037B426Bp0", "0x0.2B203FC675D1F27F9p0", "0x0.2B5419EB90147EDB7p0",
                "0x0.2B87FD0DAD98FFDDFp0", "0x0.2BBBE92E5D3E349F5p0", "0x0.2BEFDE4F2E2800A73p0", "0x0.2C23DC71AFBF77E86p0",
                "0x0.2C57E39771B2EABFBp0", "0x0.2C8BF3C203F5F1F3Fp0", "0x0.2CC00CF2F6C17AB8Dp0", "0x0.2CF42F2BDA93D2B35p0",
                "0x0.2D285A6E4030B4009p0", "0x0.2D5C8EBBB8A1513E7p0", "0x0.2D90CC15D53461967p0", "0x0.2DC5127E277E2CCAFp0",
                "0x0.2DF961F641589745Bp0", "0x0.2E2DBA7FB4E32E298p0", "0x0.2E621C1C148333651p0", "0x0.2E9686CCF2E3A9C88p0",
                "0x0.2ECAFA93E2F5611CAp0", "0x0.2EFF777277EF023C8p0", "0x0.2F33FD6A454D1B313p0", "0x0.2F688C7CDED22B4F1p0",
                "0x0.2F9D24ABD886AF562p0", "0x0.2FD1C5F8C6B92D937p0", "0x0.300670653DFE42058p0", "0x0.303B23F2D330AA821p0"
            };
_ssdm_SpecConstant(exp2_x_msb_2_m_1_table);
# 2663 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<68,0> exp2_x_msb_2_m_1 = exp2_x_msb_2_m_1_table[x_msb_ind_2];
            ap_ufixed<126,-10> f_x_msb_2_lsb = exp2_x_msb_2_m_1 * exp2_x_msb_3_4_lsb_m_1;
            ap_ufixed<58, -10> f_x_msb_2_lsb_s = f_x_msb_2_lsb;
            ap_ufixed<68,0> exp2_x_msb_2_3_4_lsb_m_1 = f_x_msb_2_lsb_s + exp2_x_msb_2_m_1 + exp2_x_msb_3_4_lsb_m_1;

            const static ap_ufixed<68,32> exp2_x_msb_1_table[256] = {
                "0x1.000000000p0", "0x1.306FE0A32p0", "0x1.6A09E667Fp0", "0x1.AE89F995Bp0",
                "0x2.000000000p0", "0x2.60DFC1463p0", "0x2.D413CCCFEp0", "0x3.5D13F32B6p0",
                "0x4.000000000p0", "0x4.C1BF828C7p0", "0x5.A827999FDp0", "0x6.BA27E656Bp0",
                "0x8.000000000p0", "0x9.837F0518Ep0", "0xB.504F333FAp0", "0xD.744FCCAD7p0",
                "0x10.000000000p0", "0x13.06FE0A31Bp0", "0x16.A09E667F4p0", "0x1A.E89F995ADp0",
                "0x20.000000000p0", "0x26.0DFC14637p0", "0x2D.413CCCFE7p0", "0x35.D13F32B5Ap0",
                "0x40.000000000p0", "0x4C.1BF828C6Ep0", "0x5A.827999FCFp0", "0x6B.A27E656B5p0",
                "0x80.000000000p0", "0x98.37F0518DCp0", "0xB5.04F333F9Ep0", "0xD7.44FCCAD6Ap0",
                "0x100.000000000p0", "0x130.6FE0A31B7p0", "0x16A.09E667F3Cp0", "0x1AE.89F995AD4p0",
                "0x200.000000000p0", "0x260.DFC14636Ep0", "0x2D4.13CCCFE78p0", "0x35D.13F32B5A7p0",
                "0x400.000000000p0", "0x4C1.BF828C6DCp0", "0x5A8.27999FCEFp0", "0x6BA.27E656B4Fp0",
                "0x800.000000000p0", "0x983.7F0518DB9p0", "0xB50.4F333F9DEp0", "0xD74.4FCCAD69Dp0",
                "0x1000.000000000p0", "0x1306.FE0A31B71p0", "0x16A0.9E667F3BDp0", "0x1AE8.9F995AD3Bp0",
                "0x2000.000000000p0", "0x260D.FC14636E3p0", "0x2D41.3CCCFE77Ap0", "0x35D1.3F32B5A76p0",
                "0x4000.000000000p0", "0x4C1B.F828C6DC5p0", "0x5A82.7999FCEF3p0", "0x6BA2.7E656B4EBp0",
                "0x8000.000000000p0", "0x9837.F0518DB8Bp0", "0xB504.F333F9DE6p0", "0xD744.FCCAD69D7p0",
                "0x10000.000000000p0", "0x1306F.E0A31B715p0", "0x16A09.E667F3BCDp0", "0x1AE89.F995AD3ADp0",
                "0x20000.000000000p0", "0x260DF.C14636E2Ap0", "0x2D413.CCCFE7799p0", "0x35D13.F32B5A75Bp0",
                "0x40000.000000000p0", "0x4C1BF.828C6DC55p0", "0x5A827.999FCEF32p0", "0x6BA27.E656B4EB5p0",
                "0x80000.000000000p0", "0x9837F.0518DB8A9p0", "0xB504F.333F9DE65p0", "0xD744F.CCAD69D6Bp0",
                "0x100000.000000000p0", "0x1306FE.0A31B7153p0", "0x16A09E.667F3BCC9p0", "0x1AE89F.995AD3AD6p0",
                "0x200000.000000000p0", "0x260DFC.14636E2A6p0", "0x2D413C.CCFE77992p0", "0x35D13F.32B5A75ACp0",
                "0x400000.000000000p0", "0x4C1BF8.28C6DC54Bp0", "0x5A8279.99FCEF324p0", "0x6BA27E.656B4EB58p0",
                "0x800000.000000000p0", "0x9837F0.518DB8A97p0", "0xB504F3.33F9DE648p0", "0xD744FC.CAD69D6AFp0",
                "0x1000000.000000000p0", "0x1306FE0.A31B7152Ep0", "0x16A09E6.67F3BCC91p0", "0x1AE89F9.95AD3AD5Fp0",
                "0x2000000.000000000p0", "0x260DFC1.4636E2A5Cp0", "0x2D413CC.CFE779921p0", "0x35D13F3.2B5A75ABDp0",
                "0x4000000.000000000p0", "0x4C1BF82.8C6DC54B8p0", "0x5A82799.9FCEF3242p0", "0x6BA27E6.56B4EB57Ap0",
                "0x8000000.000000000p0", "0x9837F05.18DB8A96Fp0", "0xB504F33.3F9DE6484p0", "0xD744FCC.AD69D6AF4p0",
                "0x10000000.000000000p0", "0x1306FE0A.31B7152DFp0", "0x16A09E66.7F3BCC909p0", "0x1AE89F99.5AD3AD5E8p0",
                "0x20000000.000000000p0", "0x260DFC14.636E2A5BDp0", "0x2D413CCC.FE7799211p0", "0x35D13F32.B5A75ABD1p0",
                "0x40000000.000000000p0", "0x4C1BF828.C6DC54B7Ap0", "0x5A827999.FCEF32423p0", "0x6BA27E65.6B4EB57A2p0",
                "0x80000000.000000000p0", "0x9837F051.8DB8A96F4p0", "0xB504F333.F9DE64846p0", "0xD744FCCA.D69D6AF44p0",
                "0x0.000000010p0", "0x0.000000013p0", "0x0.000000017p0", "0x0.00000001Bp0",
                "0x0.000000020p0", "0x0.000000026p0", "0x0.00000002Dp0", "0x0.000000036p0",
                "0x0.000000040p0", "0x0.00000004Cp0", "0x0.00000005Bp0", "0x0.00000006Cp0",
                "0x0.000000080p0", "0x0.000000098p0", "0x0.0000000B5p0", "0x0.0000000D7p0",
                "0x0.000000100p0", "0x0.000000130p0", "0x0.00000016Ap0", "0x0.0000001AFp0",
                "0x0.000000200p0", "0x0.000000261p0", "0x0.0000002D4p0", "0x0.00000035Dp0",
                "0x0.000000400p0", "0x0.0000004C2p0", "0x0.0000005A8p0", "0x0.0000006BAp0",
                "0x0.000000800p0", "0x0.000000983p0", "0x0.000000B50p0", "0x0.000000D74p0",
                "0x0.000001000p0", "0x0.000001307p0", "0x0.0000016A1p0", "0x0.000001AE9p0",
                "0x0.000002000p0", "0x0.00000260Ep0", "0x0.000002D41p0", "0x0.0000035D1p0",
                "0x0.000004000p0", "0x0.000004C1Cp0", "0x0.000005A82p0", "0x0.000006BA2p0",
                "0x0.000008000p0", "0x0.000009838p0", "0x0.00000B505p0", "0x0.00000D745p0",
                "0x0.000010000p0", "0x0.000013070p0", "0x0.000016A0Ap0", "0x0.00001AE8Ap0",
                "0x0.000020000p0", "0x0.0000260E0p0", "0x0.00002D414p0", "0x0.000035D14p0",
                "0x0.000040000p0", "0x0.00004C1C0p0", "0x0.00005A828p0", "0x0.00006BA28p0",
                "0x0.000080000p0", "0x0.00009837Fp0", "0x0.0000B504Fp0", "0x0.0000D7450p0",
                "0x0.000100000p0", "0x0.0001306FEp0", "0x0.00016A09Ep0", "0x0.0001AE8A0p0",
                "0x0.000200000p0", "0x0.000260DFCp0", "0x0.0002D413Dp0", "0x0.00035D13Fp0",
                "0x0.000400000p0", "0x0.0004C1BF8p0", "0x0.0005A827Ap0", "0x0.0006BA27Ep0",
                "0x0.000800000p0", "0x0.0009837F0p0", "0x0.000B504F3p0", "0x0.000D744FDp0",
                "0x0.001000000p0", "0x0.001306FE1p0", "0x0.0016A09E6p0", "0x0.001AE89FAp0",
                "0x0.002000000p0", "0x0.00260DFC1p0", "0x0.002D413CDp0", "0x0.0035D13F3p0",
                "0x0.004000000p0", "0x0.004C1BF83p0", "0x0.005A8279Ap0", "0x0.006BA27E6p0",
                "0x0.008000000p0", "0x0.009837F05p0", "0x0.00B504F33p0", "0x0.00D744FCDp0",
                "0x0.010000000p0", "0x0.01306FE0Ap0", "0x0.016A09E66p0", "0x0.01AE89F99p0",
                "0x0.020000000p0", "0x0.0260DFC14p0", "0x0.02D413CCDp0", "0x0.035D13F33p0",
                "0x0.040000000p0", "0x0.04C1BF829p0", "0x0.05A82799Ap0", "0x0.06BA27E65p0",
                "0x0.080000000p0", "0x0.09837F052p0", "0x0.0B504F334p0", "0x0.0D744FCCBp0",
                "0x0.100000000p0", "0x0.1306FE0A3p0", "0x0.16A09E668p0", "0x0.1AE89F996p0",
                "0x0.200000000p0", "0x0.260DFC146p0", "0x0.2D413CCD0p0", "0x0.35D13F32Bp0",
                "0x0.400000000p0", "0x0.4C1BF828Cp0", "0x0.5A82799A0p0", "0x0.6BA27E657p0",
                "0x0.800000000p0", "0x0.9837F0519p0", "0x0.B504F3340p0", "0x0.D744FCCADp0"
            };
_ssdm_SpecConstant(exp2_x_msb_1_table);
# 2734 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

            ap_ufixed<68,32> exp2_x_msb_1 = exp2_x_msb_1_table[x_msb_ind_1];
            ap_ufixed<136,32> y_lo = exp2_x_msb_1 * exp2_x_msb_2_3_4_lsb_m_1;
            ap_ufixed<68,32> y_lo_s = y_lo;
            ap_ufixed<68,32> y_l = y_lo_s + exp2_x_msb_1;
            y = y_l;
        }

        if(I<33) {
            bool overf_2 = 0;
#pragma unroll
 for(int j=63; j>=I+31; j--) {
                if(y[j]) {
                    overf_2 = 1;
                }
            }
            if(overf_2) {
#pragma unroll
 for(int j=63; j>=I+31; j--) {
                    y[j] = 0;
                }
#pragma unroll
 for(int j=I+30; j>=0; j--) {
                    y[j] = 1;
                }
            }
        }
        r = y;
    }
    return r;
}

template<int W, int I>
ap_ufixed<W,I> exp2(ap_ufixed<W,I> x) {
    ap_fixed<W+1,I+1> xf = x;
    return exp2(xf);
}

template<int I>
ap_int<I> exp2(ap_int<I> x) {
    ap_fixed<I,I> xf = x;
    return exp2(xf);
}

template<int I>
ap_uint<I> exp2(ap_uint<I> x) {
    ap_fixed<I+1,I+1> xf = x;
    return exp2(xf);
}


template<int W_, int I_>
ap_fixed<W_,I_> exp10(ap_fixed<W_,I_> x) {

 int F_ = W_ - I_;
    if (I_>33) return 0;
    else if (F_>32) return 0;

 int I_s_;
    int M_ = (I_-1>F_) ? (I_-1) : F_;
 if (M_==1) I_s_ = 0;
    else if (M_<4) I_s_ = 1;
    else if (M_<7) I_s_ = 2;
    else if (M_<14) I_s_ = 3;
    else if (M_<27) I_s_ = 4;
    else I_s_ = 5;

 ap_fixed<W_,I_> r;
 if(I_s_==0) {
  ap_fixed<3,2> x_l = x;
  ap_ufixed<2,1> y = 0;
  if(x_l[2]) {
   if(x_l[1]&x_l[0]) {
    y = ap_ufixed<2,1>("0x0.8p0");
   }
  } else {
   if(x_l[1]|x_l[0]) {
    y = ap_ufixed<2,1>("0x1.8p0");
   } else {
    y = ap_ufixed<2,1>("0x1.0p0");
   }
  }
  if(I_<2) {
   bool overf = 0;
   if(y[1]) {
    y[1] = 0;
    y[0] = 1;
   }
  }
  r = y;
 } else if (I_s_==1) {
  ap_fixed<7,4> x_l = x;
  ap_ufixed<6,3> y = 0;
  if((x_l[6]!=x_l[5])||(x_l[5]!=x_l[4])||(x_l[4]!=x_l[3])) {
   if(!x_l[6]) {
    y = ap_ufixed<6,3>("0x7.Ep0");
   }
  } else {
   ap_uint<4> x_ind;
   x_ind[3] = x_l[6];
   x_ind(2,0) = x_l(2,0);
   const static ap_ufixed<6,3> exp_x_ind_table[16] = {
    "0x1.000p0", "0x1.600p0", "0x1.C00p0", "0x2.600p0", "0x3.200p0", "0x4.400p0", "0x5.A00p0", "0x7.800p0",
    "0x0.200p0", "0x0.200p0", "0x0.200p0", "0x0.400p0", "0x0.600p0", "0x0.600p0", "0x0.800p0", "0x0.C00p0"
   };
_ssdm_SpecConstant(exp_x_ind_table);
# 2900 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   y = exp_x_ind_table[x_ind];
  }
  if(I_<4){
   bool overf = 0;
#pragma unroll
 for(int j = 5; j>=I_+2; j--) {
    if(y[j]) {
     overf = 1;
    }
   }
   if(overf) {
#pragma unroll
 for(int j = 5; j>=I_+2; j--) {
     y[j] = 0;
    }
    for(int j = I_+1; j>=0; j--) {
     y[j] = 1;
    }
   }
  }
  r = y;
 } else if (I_s_==2) {
  ap_fixed<13,7> x_l = x;
  ap_ufixed<12,6> y = 0;
  ap_fixed<2,2> x_l_int;
  x_l_int(1,0) = x_l(7,6);
  ap_ufixed<6,0> x_l_fract;
  x_l_fract(5,0) = x_l(5,0);
  bool overf = 0;
#pragma unroll
 for(int j = 11; j >=7; j--) {
   if(x_l[12]!=x_l[j]) {
    overf = 1;
   }
  }
  if(overf||((x_l_int==1)&&(x_l_fract>ap_ufixed<5,0>("0x.D0p0")))) {
   if(!x_l[12]) {
    y = ap_ufixed<12,6>("0x3F.FCp0");
   }
  } else {
   ap_uint<4> x_msb_ind;
   x_msb_ind(3,0) = x_l(7,4);
   ap_uint<4> x_lsb_ind;
   x_lsb_ind(3,0) = x_l(3,0);
   const static ap_ufixed<14,6> exp_x_msb_table[16] = {
    "0x1.00p0", "0x1.C7p0", "0x3.2Ap0", "0x5.A0p0", "0xA.00p0", "0x11.C8p0", "0x1F.9Fp0", "0x38.3Cp0",
    "0x0.03p0", "0x0.05p0", "0x0.08p0", "0x0.0Ep0", "0x0.1Ap0", "0x0.2Ep0", "0x0.51p0", "0x0.90p0"
   };
_ssdm_SpecConstant(exp_x_msb_table);
# 2948 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   const static ap_ufixed<14,0> exp_x_lsb_m_1_table[16] = {
    "0x0.0p0", "0x0.0960p0", "0x0.1318p0", "0x0.1D2Cp0", "0x0.27A0p0", "0x0.3274p0", "0x0.3DB0p0", "0x0.4950p0",
    "0x0.5560p0", "0x0.61E4p0", "0x0.6ED8p0", "0x0.7C4Cp0", "0x0.8A38p0", "0x0.98A8p0", "0x0.A7A4p0", "0x0.B728p0"
   };
_ssdm_SpecConstant(exp_x_lsb_m_1_table);
# 2952 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<14,6> exp_x_msb = exp_x_msb_table[x_msb_ind];
   ap_ufixed<14,0> exp_x_lsb_m_1 = exp_x_lsb_m_1_table[x_lsb_ind];
   ap_ufixed<28,6> y_lo = exp_x_msb * exp_x_lsb_m_1;
   ap_ufixed<14,6> y_lo_s = y_lo;
   ap_ufixed<14,6> y_l = y_lo_s + exp_x_msb;
   y = y_l;
  }
  if(I_<7) {
   bool overf = 0;
#pragma unroll
 for(int j = 11; j >= I_+5; j--) {
    if(y[j]) {
     overf = 1;
    }
   }
   if(overf) {
#pragma unroll
 for(int j = 11; j>= I_+5; j--) {
     y[j] = 0;
    }
#pragma unroll
 for(int j = I_+4; j>=0; j--) {
     y[j] = 1;
    }
   }
  }
  r = y;
 } else if (I_s_==3) {
  ap_fixed<27,14> x_l = x;
  ap_ufixed<26,13> y = 0;
  ap_fixed<3,3> x_l_int;
  x_l_int(2,0) = x_l(15,13);
  ap_ufixed<13,0> x_l_fract;
  x_l_fract(12,0) = x_l(12,0);
  bool overf = 0;
#pragma unroll
 for(int j = 25; j>=15; j--) {
   if(x_l[26]!=x_l[j]) {
    overf = 1;
   }
  }
  if(overf||((x_l_int==3)&&(x_l_fract>ap_ufixed<12,0>("0x3.E9D0p0")))) {
   if(!x_l[26]) {
    y = ap_ufixed<26,13>("0x1FFF.FFF8p0");
   }
  } else {
   ap_uint<6> x_msb_ind_1;
   x_msb_ind_1[5] = x_l[26];
   x_msb_ind_1(4,0) = x_l(14,10);
   ap_uint<5> x_msb_ind_2;
   x_msb_ind_2(4,0) = x_l(9,5);
   ap_uint<5> x_lsb_ind;
   x_lsb_ind(4,0) = x_l(4,0);
   const static ap_ufixed<24,-6> exp_lsb_ind_m_1_table[32] = {
    "0x0p0", "0x0.00126C5Cp0", "0x0.0024DA0Cp0", "0x0.0037490Cp0", "0x0.0049B964p0", "0x0.005C2B0Cp0", "0x0.006E9E08p0", "0x0.0081125Cp0",
    "0x0.00938800p0", "0x0.00A5FEF8p0", "0x0.00B87748p0", "0x0.00CAF0E8p0", "0x0.00DD6BE0p0", "0x0.00EFE82Cp0", "0x0.010265C8p0", "0x0.0114E4BCp0",
    "0x0.01276508p0", "0x0.0139E6A4p0", "0x0.014C6998p0", "0x0.015EEDDCp0", "0x0.0171737Cp0", "0x0.0183FA6Cp0", "0x0.019682B4p0", "0x0.01A90C50p0",
    "0x0.01BB9744p0", "0x0.01CE238Cp0", "0x0.01E0B128p0", "0x0.01F3401Cp0", "0x0.0205D064p0", "0x0.02186204p0", "0x0.022AF4F8p0", "0x0.023D8944p0"
   };
_ssdm_SpecConstant(exp_lsb_ind_m_1_table);
# 3009 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<24,-6> exp_lsb_ind_m_1 = exp_lsb_ind_m_1_table[x_lsb_ind];
   const static ap_ufixed<29,-1> exp_msb_ind_2_m_1_table[32] = {
    "0x0p0", "0x0.02501EE8p0", "0x0.04A5975Cp0", "0x0.070075C0p0", "0x0.0960C68Cp0", "0x0.0BC69660p0", "0x0.0E31F1F0p0", "0x0.10A2E60Cp0",
    "0x0.13197FA8p0", "0x0.1595CBD4p0", "0x0.1817D7BCp0", "0x0.1A9FB0ACp0", "0x0.1D2D6410p0", "0x0.1FC0FF74p0", "0x0.225A9080p0", "0x0.24FA24F8p0",
    "0x0.279FCACCp0", "0x0.2A4B8FFCp0", "0x0.2CFD82BCp0", "0x0.2FB5B150p0", "0x0.32742A20p0", "0x0.3538FBC0p0", "0x0.380434D8p0", "0x0.3AD5E43Cp0",
    "0x0.3DAE18DCp0", "0x0.408CE1CCp0", "0x0.43724E48p0", "0x0.465E6DA8p0", "0x0.49514F68p0", "0x0.4C4B0330p0", "0x0.4F4B98C4p0", "0x0.5253200Cp0"
   };
_ssdm_SpecConstant(exp_msb_ind_2_m_1_table);
# 3016 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<29,-1> exp_msb_ind_2_m1 = exp_msb_ind_2_m_1_table[x_msb_ind_2];
   ap_ufixed<53,-7> f_x_msb_2_lsb = exp_lsb_ind_m_1 * exp_msb_ind_2_m1;
   ap_ufixed<27,-1> exp_msb_2_lsb_m_1 = f_x_msb_2_lsb + exp_msb_ind_2_m1 + exp_lsb_ind_m_1;
   const static ap_ufixed<28,13> exp_msb_ind_1_table[64] = {
    "0x1.0000p0", "0x1.5562p0", "0x1.C73Ep0", "0x2.5F12p0", "0x3.298Cp0", "0x4.378Cp0", "0x5.9F98p0", "0x7.7FBAp0",
    "0xA.0000p0", "0xD.55D0p0", "0x11.C866p0", "0x17.B6B8p0", "0x1F.9F6Ep0", "0x2A.2B6Ep0", "0x38.3BF0p0", "0x4A.FD4Ap0",
    "0x64.0000p0", "0x85.5A26p0", "0xB1.D3F4p0", "0xED.232Ap0", "0x13C.3A4Ep0", "0x1A5.B24Ep0", "0x232.5762p0", "0x2ED.E4EAp0",
    "0x3E8.0000p0", "0x535.857Cp0", "0x6F2.4788p0", "0x943.5FACp0", "0xC5A.4714p0", "0x1078.F70Cp0", "0x15F7.69CAp0", "0x1D4A.F12Ep0",
    "0x0.0006p0", "0x0.0008p0", "0x0.000Cp0", "0x0.0010p0", "0x0.0014p0", "0x0.001Cp0", "0x0.0024p0", "0x0.0032p0",
    "0x0.0042p0", "0x0.0058p0", "0x0.0074p0", "0x0.009Cp0", "0x0.00D0p0", "0x0.0114p0", "0x0.0170p0", "0x0.01ECp0",
    "0x0.0290p0", "0x0.036Ap0", "0x0.048Ep0", "0x0.0612p0", "0x0.0818p0", "0x0.0ACCp0", "0x0.0E66p0", "0x0.1332p0",
    "0x0.199Ap0", "0x0.2224p0", "0x0.2D86p0", "0x0.3CB6p0", "0x0.50F4p0", "0x0.6BF4p0", "0x0.8FF6p0", "0x0.BFFAp0"
   };
_ssdm_SpecConstant(exp_msb_ind_1_table);
# 3025 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<28,13> exp_msb_ind_1 = exp_msb_ind_1_table[x_msb_ind_1];
   ap_ufixed<28,13> f_x_msb_1_msb_2_lsb_l = exp_msb_ind_1 * exp_msb_2_lsb_m_1;
   y = f_x_msb_1_msb_2_lsb_l + exp_msb_ind_1;
  }
  if(I_<14) {
   bool overf = 0;
#pragma unroll
 for(int j = 25; j>= I_+12; j--) {
    if(y[j]) {
     overf = 1;
    }
   }
   if(overf) {
#pragma unroll
 for(int j = 25; j>=I_+12; j--) {
     y[j] = 0;
    }
#pragma unroll
 for(int j = I_+11; j>=0; j--) {
     y[j] = 1;
    }
   }
  }
  r = y;
 } else if (I_s_==4) {
  ap_fixed<53,27> x_l = x;
  ap_ufixed<52,26> y = 0;
  ap_fixed<4,4> x_l_int;
  x_l_int(3,0) = x_l(29,26);
  ap_ufixed<26,0> x_l_fract;
  x_l_fract(25,0) = x_l(25,0);
  bool overf = 0;
#pragma unroll
 for(int j = 51; j >= 29; j--) {
   if(x_l[52]!=x_l[j]) {
    overf = 1;
   }
  }
  if(overf||((x_l_int==7)&&(x_l_fract>ap_ufixed<26,0>("0x0.D3A7D8C")))) {
   if(!x_l[52]) {
    y = ap_ufixed<52,26>("0x3FFFFFF.FFFFFFCp0");
   }
  } else {
   ap_uint<8> x_msb_ind_1;
   x_msb_ind_1[7] = x_l[52];
   x_msb_ind_1(6,0) = x_l(28,22);
   ap_uint<8> x_msb_ind_2;
   x_msb_ind_2(7,0) = x_l(21,14);
   ap_uint<7> x_msb_ind_3;
   x_msb_ind_3(6,0) = x_l(13,7);
   ap_uint<7> x_lsb_ind;
   x_lsb_ind(6,0) = x_l(6,0);
   const static ap_ufixed<41,-17> exp_lsb_ind_m_1_table[128] = {
    "0x0.0p0", "0x0.000000935D8E080p0", "0x0.00000126BB1C650p0", "0x0.000001BA18AB16Cp0", "0x0.0000024D763A1D4p0", "0x0.000002E0D3C978Cp0", "0x0.000003743159290p0", "0x0.000004078EE92E0p0",
    "0x0.0000049AEC79880p0", "0x0.0000052E4A0A368p0", "0x0.000005C1A79B3A4p0", "0x0.00000655052C928p0", "0x0.000006E862BE3FCp0", "0x0.0000077BC05041Cp0", "0x0.0000080F1DE298Cp0", "0x0.000008A27B75448p0",
    "0x0.00000935D908450p0", "0x0.000009C9369B9A4p0", "0x0.00000A5C942F448p0", "0x0.00000AEFF1C3438p0", "0x0.00000B834F57978p0", "0x0.00000C16ACEC400p0", "0x0.00000CAA0A813D8p0", "0x0.00000D3D6816900p0",
    "0x0.00000DD0C5AC370p0", "0x0.00000E642342334p0", "0x0.00000EF780D8840p0", "0x0.00000F8ADE6F29Cp0", "0x0.0000101E3C06244p0", "0x0.000010B1999D738p0", "0x0.00001144F73517Cp0", "0x0.000011D854CD10Cp0",
    "0x0.0000126BB2655E8p0", "0x0.000012FF0FFE010p0", "0x0.000013926D96F88p0", "0x0.00001425CB30450p0", "0x0.000014B928C9E60p0", "0x0.0000154C8663DC0p0", "0x0.000015DFE3FE26Cp0", "0x0.000016734198C68p0",
    "0x0.000017069F33BB0p0", "0x0.00001799FCCF044p0", "0x0.0000182D5A6AA24p0", "0x0.000018C0B806954p0", "0x0.0000195415A2DD0p0", "0x0.000019E7733F79Cp0", "0x0.00001A7AD0DC6B4p0", "0x0.00001B0E2E79B18p0",
    "0x0.00001BA18C174C8p0", "0x0.00001C34E9B53C8p0", "0x0.00001CC84753814p0", "0x0.00001D5BA4F21B0p0", "0x0.00001DEF0291094p0", "0x0.00001E8260304C8p0", "0x0.00001F15BDCFE4Cp0", "0x0.00001FA91B6FD18p0",
    "0x0.0000203C7910134p0", "0x0.000020CFD6B0AA0p0", "0x0.000021633451954p0", "0x0.000021F691F2D58p0", "0x0.00002289EF946ACp0", "0x0.0000231D4D36548p0", "0x0.000023B0AAD8934p0", "0x0.00002444087B270p0",
    "0x0.000024D7661E0F4p0", "0x0.0000256AC3C14C8p0", "0x0.000025FE2164DE8p0", "0x0.000026917F08C58p0", "0x0.00002724DCAD014p0", "0x0.000027B83A5191Cp0", "0x0.0000284B97F6774p0", "0x0.000028DEF59BB14p0",
    "0x0.000029725341408p0", "0x0.00002A05B0E7244p0", "0x0.00002A990E8D5D0p0", "0x0.00002B2C6C33EA8p0", "0x0.00002BBFC9DACD0p0", "0x0.00002C532782040p0", "0x0.00002CE68529900p0", "0x0.00002D79E2D1710p0",
    "0x0.00002E0D4079A6Cp0", "0x0.00002EA09E22314p0", "0x0.00002F33FBCB108p0", "0x0.00002FC7597444Cp0", "0x0.0000305AB71DCDCp0", "0x0.000030EE14C7AB8p0", "0x0.000031817271DE4p0", "0x0.00003214D01C65Cp0",
    "0x0.000032A82DC7420p0", "0x0.0000333B8B72734p0", "0x0.000033CEE91DF94p0", "0x0.0000346246C9D40p0", "0x0.000034F5A47603Cp0", "0x0.000035890222884p0", "0x0.0000361C5FCF618p0", "0x0.000036AFBD7C8FCp0",
    "0x0.000037431B2A12Cp0", "0x0.000037D678D7EA8p0", "0x0.00003869D686170p0", "0x0.000038FD3434988p0", "0x0.0000399091E36ECp0", "0x0.00003A23EF929A0p0", "0x0.00003AB74D421A0p0", "0x0.00003B4AAAF1EECp0",
    "0x0.00003BDE08A2188p0", "0x0.00003C71665296Cp0", "0x0.00003D04C4036A0p0", "0x0.00003D9821B4924p0", "0x0.00003E2B7F660F4p0", "0x0.00003EBEDD17E10p0", "0x0.00003F523ACA078p0", "0x0.00003FE5987C830p0",
    "0x0.00004078F62F534p0", "0x0.0000410C53E2788p0", "0x0.0000419FB195F24p0", "0x0.000042330F49C10p0", "0x0.000042C66CFDE4Cp0", "0x0.00004359CAB25D0p0", "0x0.000043ED28672A4p0", "0x0.00004480861C4C8p0",
    "0x0.00004513E3D1C34p0", "0x0.000045A741878F0p0", "0x0.0000463A9F3DAFCp0", "0x0.000046CDFCF4250p0", "0x0.000047615AAAEF4p0", "0x0.000047F4B8620E8p0", "0x0.000048881619824p0", "0x0.0000491B73D14B0p0"
   };
_ssdm_SpecConstant(exp_lsb_ind_m_1_table);
# 3087 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<41,-17> exp_lsb_ind_m_1 = exp_lsb_ind_m_1_table[x_lsb_ind];
   const static ap_ufixed<48,-10> exp_msb_ind_3_m_1_table[128] = {
    "0x0.0p0", "0x0.000049AED18968Cp0", "0x0.0000935DB847FC4p0", "0x0.0000DD0CB43BC10p0", "0x0.000126BBC564BCCp0", "0x0.0001706AEBC2F58p0", "0x0.0001BA1A275671Cp0", "0x0.000203C9781F374p0",
    "0x0.00024D78DE1D4C8p0", "0x0.000297285950B74p0", "0x0.0002E0D7E9B97D8p0", "0x0.00032A878F57A5Cp0", "0x0.000374374A2B360p0", "0x0.0003BDE71A34344p0", "0x0.00040796FF72A68p0", "0x0.00045146F9E6930p0",
    "0x0.00049AF70990000p0", "0x0.0004E4A72E6EF34p0", "0x0.00052E576883734p0", "0x0.00057807B7CD85Cp0", "0x0.0005C1B81C4D314p0", "0x0.00060B6896027B4p0", "0x0.0006551924ED6A8p0", "0x0.00069EC9C90E04Cp0",
    "0x0.0006E87A8264500p0", "0x0.0007322B50F052Cp0", "0x0.00077BDC34B2130p0", "0x0.0007C58D2DA9968p0", "0x0.00080F3E3BD6E3Cp0", "0x0.000858EF5F3A008p0", "0x0.0008A2A097D2F34p0", "0x0.0008EC51E5A1C1Cp0",
    "0x0.0009360348A6724p0", "0x0.00097FB4C0E10B0p0", "0x0.0009C9664E51920p0", "0x0.000A1317F0F80D4p0", "0x0.000A5CC9A8D4830p0", "0x0.000AA67B75E6F94p0", "0x0.000AF02D582F764p0", "0x0.000B39DF4FADFFCp0",
    "0x0.000B83915C629C4p0", "0x0.000BCD437E4D51Cp0", "0x0.000C16F5B56E268p0", "0x0.000C60A801C5200p0", "0x0.000CAA5A6352450p0", "0x0.000CF40CDA159B8p0", "0x0.000D3DBF660F294p0", "0x0.000D8772073EF4Cp0",
    "0x0.000DD124BDA5040p0", "0x0.000E1AD789415CCp0", "0x0.000E648A6A1405Cp0", "0x0.000EAE3D601D048p0", "0x0.000EF7F06B5C5F8p0", "0x0.000F41A38BD21CCp0", "0x0.000F8B56C17E424p0", "0x0.000FD50A0C60D64p0",
    "0x0.00101EBD6C79DECp0", "0x0.00106870E1C9620p0", "0x0.0010B2246C4F660p0", "0x0.0010FBD80C0BF0Cp0", "0x0.0011458BC0FF088p0", "0x0.00118F3F8B28B34p0", "0x0.0011D8F36A88F74p0", "0x0.001222A75F1FDA8p0",
    "0x0.00126C5B68ED630p0", "0x0.0012B60F87F1974p0", "0x0.0012FFC3BC2C7D0p0", "0x0.00134978059E1A8p0", "0x0.0013932C644675Cp0", "0x0.0013DCE0D82594Cp0", "0x0.00142695613B7E0p0", "0x0.00147049FF88374p0",
    "0x0.0014B9FEB30BC70p0", "0x0.001503B37BC632Cp0", "0x0.00154D6859B7810p0", "0x0.0015971D4CDFB80p0", "0x0.0015E0D2553EDD8p0", "0x0.00162A8772D4F7Cp0", "0x0.0016743CA5A20D0p0", "0x0.0016BDF1EDA6230p0",
    "0x0.001707A74AE1404p0", "0x0.0017515CBD536ACp0", "0x0.00179B1244FCA88p0", "0x0.0017E4C7E1DCFF8p0", "0x0.00182E7D93F4760p0", "0x0.001878335B43124p0", "0x0.0018C1E937C8DA4p0", "0x0.00190B9F2985D40p0",
    "0x0.00195555307A05Cp0", "0x0.00199F0B4CA5758p0", "0x0.0019E8C17E08294p0", "0x0.001A3277C4A2278p0", "0x0.001A7C2E2073760p0", "0x0.001AC5E4917C1ACp0", "0x0.001B0F9B17BC1C4p0", "0x0.001B5951B333808p0",
    "0x0.001BA30863E24D8p0", "0x0.001BECBF29C8894p0", "0x0.001C367604E63A4p0", "0x0.001C802CF53B664p0", "0x0.001CC9E3FAC8134p0", "0x0.001D139B158C47Cp0", "0x0.001D5D52458809Cp0", "0x0.001DA7098ABB5F4p0",
    "0x0.001DF0C0E5264E4p0", "0x0.001E3A7854C8DD0p0", "0x0.001E842FD9A311Cp0", "0x0.001ECDE773B4F24p0", "0x0.001F179F22FE850p0", "0x0.001F6156E77FCFCp0", "0x0.001FAB0EC138D90p0", "0x0.001FF4C6B029A68p0",
    "0x0.00203E7EB4523E8p0", "0x0.00208836CDB2A70p0", "0x0.0020D1EEFC4AE68p0", "0x0.00211BA7401B028p0", "0x0.0021655F9923018p0", "0x0.0021AF180762E98p0", "0x0.0021F8D08ADAC0Cp0", "0x0.00224289238A8D4p0",
    "0x0.00228C41D172550p0", "0x0.0022D5FA94921E4p0", "0x0.00231FB36CE9EF0p0", "0x0.0023696C5A79CD8p0", "0x0.0023B3255D41BFCp0", "0x0.0023FCDE7541CC0p0", "0x0.00244697A279F80p0", "0x0.00249050E4EA4A4p0"
   };
_ssdm_SpecConstant(exp_msb_ind_3_m_1_table);
# 3106 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<48,-10> exp_msb_ind_3_m_1 = exp_msb_ind_3_m_1_table[x_msb_ind_3];
   ap_ufixed<89,-27> f_x_msb_ind_3_lsb = exp_lsb_ind_m_1 * exp_msb_ind_3_m_1;
   ap_ufixed<46,-10> exp_msb_ind_3_lsb_ind_m_1 = f_x_msb_ind_3_lsb + exp_lsb_ind_m_1 + exp_msb_ind_3_m_1;
   const static ap_ufixed<54,-2> exp_msb_ind_2_m_1_table[256] = {
    "0x0.0p0", "0x0.0024DA0A3C92C9p0", "0x0.0049B96285BC0Ap0", "0x0.006E9E099EFA37p0", "0x0.009388004BE7E5p0", "0x0.00B87747503BD4p0", "0x0.00DD6BDF6FC8EEp0", "0x0.010265C96E7E4Fp0",
    "0x0.01276506106748p0", "0x0.014C699619AB60p0", "0x0.0171737A4E8E5Ep0", "0x0.019682B3737048p0", "0x0.01BB97424CCD67p0", "0x0.01E0B1279F3E51p0", "0x0.0205D0642F77E5p0", "0x0.022AF4F8C24B54p0",
    "0x0.02501EE61CA626p0", "0x0.02754E2D03923Bp0", "0x0.029A82CE3C35CEp0", "0x0.02BFBCCA8BD37Fp0", "0x0.02E4FC22B7CA50p0", "0x0.030A40D78595AFp0", "0x0.032F8AE9BACD76p0", "0x0.0354DA5A1D25F2p0",
    "0x0.037A2F29726FE5p0", "0x0.039F895880988Ap0", "0x0.03C4E8E80DA99Bp0", "0x0.03EA4DD8DFC955p0", "0x0.040FB82BBD3A78p0", "0x0.043527E16C5C51p0", "0x0.045A9CFAB3AABBp0", "0x0.0480177859BE22p0",
    "0x0.04A5975B254B8Bp0", "0x0.04CB1CA3DD2493p0", "0x0.04F0A753483778p0", "0x0.0516376A2D8F1Ap0", "0x0.053BCCE95452FFp0", "0x0.056167D183C75Bp0", "0x0.05870823834D0Ep0", "0x0.05ACADE01A61AEp0",
    "0x0.05D25908109F88p0", "0x0.05F8099C2DBDA3p0", "0x0.061DBF9D398FC8p0", "0x0.06437B0BFC0683p0", "0x0.06693BE93D2F28p0", "0x0.068F0235C533D7p0", "0x0.06B4CDF25C5B83p0", "0x0.06DA9F1FCB09EFp0",
    "0x0.070075BED9BFBBp0", "0x0.072651D0511A61p0", "0x0.074C3354F9D43Dp0", "0x0.07721A4D9CC491p0", "0x0.079806BB02DF87p0", "0x0.07BDF89DF53637p0", "0x0.07E3EFF73CF6ACp0", "0x0.0809ECC7A36BE3p0",
    "0x0.082FEF0FF1FDD7p0", "0x0.0855F6D0F23180p0", "0x0.087C040B6DA8D8p0", "0x0.08A216C02E22DFp0", "0x0.08C82EEFFD7BA0p0", "0x0.08EE4C9BA5AC35p0", "0x0.09146FC3F0CACCp0", "0x0.093A9869A90AA9p0",
    "0x0.0960C68D98BC2Cp0", "0x0.0986FA308A4CD4p0", "0x0.09AD3353484744p0", "0x0.09D371F69D5348p0", "0x0.09F9B61B5435D7p0", "0x0.0A1FFFC237D119p0", "0x0.0A464EEC13246Bp0", "0x0.0A6CA399B14C61p0",
    "0x0.0A92FDCBDD82CEp0", "0x0.0AB95D83631EC5p0", "0x0.0ADFC2C10D94A0p0", "0x0.0B062D85A87601p0", "0x0.0B2C9DD1FF71D8p0", "0x0.0B5313A6DE5467p0", "0x0.0B798F05110749p0", "0x0.0BA00FED63916Fp0",
    "0x0.0BC69660A2172Dp0", "0x0.0BED225F98DA36p0", "0x0.0C13B3EB1439A8p0", "0x0.0C3A4B03E0B20Ap0", "0x0.0C60E7AACADD54p0", "0x0.0C8789E09F72F1p0", "0x0.0CAE31A62B47C4p0", "0x0.0CD4DEFC3B4E2Dp0",
    "0x0.0CFB91E39C960Dp0", "0x0.0D224A5D1C4CC9p0", "0x0.0D49086987BD4Fp0", "0x0.0D6FCC09AC501Cp0", "0x0.0D96953E578B3Ep0", "0x0.0DBD6408571257p0", "0x0.0DE4386878A6A5p0", "0x0.0E0B125F8A2704p0",
    "0x0.0E31F1EE598FF3p0", "0x0.0E58D715B4FB98p0", "0x0.0E7FC1D66AA1C4p0", "0x0.0EA6B23148D7F6p0", "0x0.0ECDA8271E1164p0", "0x0.0EF4A3B8B8DEF8p0", "0x0.0F1BA4E6E7EF5Dp0", "0x0.0F42ABB27A0EFAp0",
    "0x0.0F69B81C3E27FEp0", "0x0.0F90CA25034260p0", "0x0.0FB7E1CD9883E5p0", "0x0.0FDEFF16CD3022p0", "0x0.1006220170A885p0", "0x0.102D4A8E526C53p0", "0x0.105478BE4218B3p0", "0x0.107BAC920F68ACp0",
    "0x0.10A2E60A8A352Ep0", "0x0.10CA2528827515p0", "0x0.10F169ECC83D2Ap0", "0x0.1118B4582BC02Dp0", "0x0.1140046B7D4ED5p0", "0x0.11675A278D57D7p0", "0x0.118EB58D2C67E8p0", "0x0.11B6169D2B29C2p0",
    "0x0.11DD7D585A662Bp0", "0x0.1204E9BF8B03F4p0", "0x0.122C5BD38E0803p0", "0x0.1253D395349553p0", "0x0.127B51054FECFBp0", "0x0.12A2D424B16E31p0", "0x0.12CA5CF42A964Fp0", "0x0.12F1EB748D00D7p0",
    "0x0.13197FA6AA6777p0", "0x0.1341198B54A20Dp0", "0x0.1368B9235DA6AEp0", "0x0.13905E6F9789A8p0", "0x0.13B80970D47D86p0", "0x0.13DFBA27E6D314p0", "0x0.14077095A0F967p0", "0x0.142F2CBAD57DDEp0",
    "0x0.1456EE98570C27p0", "0x0.147EB62EF86E43p0", "0x0.14A6837F8C8C8Cp0", "0x0.14CE568AE66DB7p0", "0x0.14F62F51D936DBp0", "0x0.151E0DD5382B74p0", "0x0.1545F215D6AD66p0", "0x0.156DDC14883D04p0",
    "0x0.1595CBD2207913p0", "0x0.15BDC14F731ECFp0", "0x0.15E5BC8D5409EEp0", "0x0.160DBD8C9734A6p0", "0x0.1635C44E10B7B0p0", "0x0.165DD0D294CA4Ep0", "0x0.1685E31AF7C24Ep0", "0x0.16ADFB280E140Fp0",
    "0x0.16D618FAAC5286p0", "0x0.16FE3C93A72F41p0", "0x0.172665F3D37A6Cp0", "0x0.174E951C0622D6p0", "0x0.1776CA0D1435F4p0", "0x0.179F04C7D2DFE7p0", "0x0.17C7454D176B81p0", "0x0.17EF8B9DB74247p0",
    "0x0.1817D7BA87EC75p0", "0x0.184029A45F1107p0", "0x0.1868815C1275B9p0", "0x0.1890DEE277FF0Dp0", "0x0.18B9423865B04Fp0", "0x0.18E1AB5EB1AB9Ap0", "0x0.190A1A563231DCp0", "0x0.19328F1FBDA2DCp0",
    "0x0.195B09BC2A7D3Ap0", "0x0.19838A2C4F5E7Ap0", "0x0.19AC1071030303p0", "0x0.19D49C8B1C4625p0", "0x0.19FD2E7B722220p0", "0x0.1A25C642DBB023p0", "0x0.1A4E63E2302857p0", "0x0.1A77075A46E1DEp0",
    "0x0.1A9FB0ABF752DBp0", "0x0.1AC85FD8191074p0", "0x0.1AF114DF83CED8p0", "0x0.1B19CFC30F6145p0", "0x0.1B42908393BA07p0", "0x0.1B6B5721E8EA82p0", "0x0.1B94239EE72334p0", "0x0.1BBCF5FB66B3BCp0",
    "0x0.1BE5CE38400AD8p0", "0x0.1C0EAC564BB672p0", "0x0.1C37905662639Fp0", "0x0.1C607A395CDEA5p0", "0x0.1C896A001412FEp0", "0x0.1CB25FAB610B61p0", "0x0.1CDB5B3C1CF1BFp0", "0x0.1D045CB3210F50p0",
    "0x0.1D2D641146CC91p0", "0x0.1D56715767B14Cp0", "0x0.1D7F84865D649Ap0", "0x0.1DA89D9F01ACEBp0", "0x0.1DD1BCA22E7006p0", "0x0.1DFAE190BDB311p0", "0x0.1E240C6B899A96p0", "0x0.1E4D3D336C6A83p0",
    "0x0.1E7673E9408633p0", "0x0.1E9FB08DE07072p0", "0x0.1EC8F32226CB7Ep0", "0x0.1EF23BA6EE590Fp0", "0x0.1F1B8A1D11FA5Cp0", "0x0.1F44DE856CB01Dp0", "0x0.1F6E38E0D99A90p0", "0x0.1F97993033F980p0",
    "0x0.1FC0FF74572C45p0", "0x0.1FEA6BAE1EB1CEp0", "0x0.2013DDDE6628A0p0", "0x0.203D5606094EE1p0", "0x0.2066D425E40256p0", "0x0.2090583ED2406Ap0", "0x0.20B9E251B02636p0", "0x0.20E3725F59F080p0",
    "0x0.210D0868ABFBC3p0", "0x0.2136A46E82C433p0", "0x0.21604671BAE5C1p0", "0x0.2189EE73311C20p0", "0x0.21B39C73C242C8p0", "0x0.21DD50744B54FDp0", "0x0.22070A75A96DD4p0", "0x0.2230CA78B9C835p0",
    "0x0.225A907E59BEDFp0", "0x0.22845C8766CC70p0", "0x0.22AE2E94BE8B69p0", "0x0.22D806A73EB62Fp0", "0x0.2301E4BFC52713p0", "0x0.232BC8DF2FD857p0", "0x0.2355B3065CE42Fp0", "0x0.237FA3362A84CAp0",
    "0x0.23A9996F771453p0", "0x0.23D395B3210CF7p0", "0x0.23FD98020708EAp0", "0x0.2427A05D07C26Dp0", "0x0.2451AEC50213CEp0", "0x0.247BC33AD4F771p0", "0x0.24A5DDBF5F87D3p0", "0x0.24CFFE5380FF8Fp0",
    "0x0.24FA24F818B962p0", "0x0.252451AE063030p0", "0x0.254E847628FF09p0", "0x0.2578BD5160E12Cp0", "0x0.25A2FC408DB20Fp0", "0x0.25CD41448F6D5Fp0", "0x0.25F78C5E462F0Ap0", "0x0.2621DD8E92333Fp0",
    "0x0.264C34D653D674p0", "0x0.267692366B956Dp0", "0x0.26A0F5AFBA0D3Cp0", "0x0.26CB5F431FFB4Cp0", "0x0.26F5CEF17E3D5Fp0", "0x0.272044BBB5D196p0", "0x0.274AC0A2A7D678p0", "0x0.277542A7358AF1p0"
   };
_ssdm_SpecConstant(exp_msb_ind_2_m_1_table);
# 3127 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<54,-2> exp_msb_ind_2_m_1 = exp_msb_ind_2_m_1_table[x_msb_ind_2];
   ap_ufixed<100,-12> f_x_msb_ind_2_msb_ind3_lsb = exp_msb_ind_3_lsb_ind_m_1 * exp_msb_ind_2_m_1;
   ap_ufixed<52,-2> exp_msb_ind2_msb_ind3_lsb_ind_m_1 = f_x_msb_ind_2_msb_ind3_lsb + exp_msb_ind_3_lsb_ind_m_1 + exp_msb_ind_2_m_1;
   const static ap_ufixed<54,26> exp_msb_ind_1_table[256] = {
    "0x1.0000000p0", "0x1.279FCADp0", "0x1.5561A92p0", "0x1.8A389FFp0", "0x1.C73D51Cp0", "0x2.0DB3D0Fp0", "0x2.5F1258Ep0", "0x2.BD0911Bp0",
    "0x3.298B076p0", "0x3.A6D8842p0", "0x4.378B054p0", "0x4.DEA3099p0", "0x5.9F9802Dp0", "0x6.7E6ABF0p0", "0x7.7FBAAB4p0", "0x8.A8DE610p0",
    "0xA.0000000p0", "0xB.8C3DEBEp0", "0xD.55D09B1p0", "0xF.66363F8p0", "0x11.C86531Bp0", "0x14.8906295p0", "0x17.B6B778Cp0", "0x1B.625AB10p0",
    "0x1F.9F6E499p0", "0x24.8475291p0", "0x2A.2B6E347p0", "0x30.B25E5F8p0", "0x38.3BF01BEp0", "0x40.F02B75Fp0", "0x4A.FD4AB0Bp0", "0x56.98AFCA2p0",
    "0x64.0000000p0", "0x73.7A6B370p0", "0x85.5A260EDp0", "0x99.FE1E7B3p0", "0xB1.D3F3F11p0", "0xCD.5A3D9D0p0", "0xED.232AB7Bp0", "0x111.D78AEA4p0",
    "0x13C.3A4EDFBp0", "0x16D.2C939A9p0", "0x1A5.B24E0C7p0", "0x1E6.F7AFBABp0", "0x232.5761167p0", "0x289.61B29B6p0", "0x2ED.E4EAE72p0", "0x361.F6DDE55p0",
    "0x3E8.0000000p0", "0x482.C830261p0", "0x535.857C941p0", "0x603.ED30CFDp0", "0x6F2.47876A9p0", "0x805.8668224p0", "0x943.5FAB2CAp0", "0xAB2.6B6D26Bp0",
    "0xC5A.4714BCAp0", "0xE43.BDC409Bp0", "0x1078.F70C7CBp0", "0x1305.ACDD4AFp0", "0x15F7.69CAE07p0", "0x195D.D0FA11Ep0", "0x1D4A.F12D073p0", "0x21D3.A4AAF51p0",
    "0x2710.0000000p0", "0x2D1B.D1E17C7p0", "0x3417.36DDC85p0", "0x3C27.43E81E5p0", "0x4576.CB4A29Cp0", "0x5037.401156Cp0", "0x5CA1.BCAFBE1p0", "0x6AF8.324382Fp0",
    "0x7B86.C6CF5E3p0", "0x8EA5.69A8609p0", "0xA4B9.A67CDEAp0", "0xBE38.C0A4ED5p0", "0xDBAA.21ECC48p0", "0xFDAA.29C4B2Ap0", "0x124ED.6BC2480p0", "0x15244.6EAD929p0",
    "0x186A0.0000000p0", "0x1C316.32CEDC6p0", "0x208E8.24A9D35p0", "0x25988.A7112F0p0", "0x2B6A3.F0E5A19p0", "0x32228.80AD63Cp0", "0x39E51.5EDD6CAp0", "0x42DB1.F6A31D7p0",
    "0x4D343.C419ADFp0", "0x59276.2093C5Ep0", "0x66F40.80E0B21p0", "0x76E37.8671452p0", "0x894A5.533FACCp0", "0x9E8A5.A1AEFA8p0", "0xB7146.3596CFDp0", "0xD36AC.52C7B9Bp0",
    "0xF4240.0000000p0", "0x119EDD.FC149BCp0", "0x145911.6EA2417p0", "0x177F56.86ABD5Cp0", "0x1B2267.68F84F9p0", "0x1F5595.06C5E54p0", "0x242F2D.B4A63E0p0", "0x29C8F3.A25F263p0",
    "0x3040A5.A900CB8p0", "0x37B89D.45C5BB0p0", "0x405885.08C6F4Ap0", "0x4A4E2B.406CB33p0", "0x55CE75.407CBF4p0", "0x631678.50D5C93p0", "0x726CBE.17E41E4p0", "0x8422BB.3BCD40Ap0",
    "0x989680.0000000p0", "0xB034AB.D8CE155p0", "0xCB7AAE.52568E6p0", "0xEAF961.42B6594p0", "0x10F580A.19B31BCp0", "0x13957D2.43BAF49p0", "0x169D7C9.0E7E6C2p0", "0x1A1D984.57B77DEp0",
    "0x1E28678.9A07F2Fp0", "0x22D3624.B9B94DFp0", "0x2837532.57C58E8p0", "0x2E70DB0.843F002p0", "0x35A1094.84DF78Cp0", "0x3DEE0B3.2859DBCp0", "0x4783F6C.EEE92ECp0", "0x5295B50.5604864p0",
    "0x0.0000003p0", "0x0.0000003p0", "0x0.0000004p0", "0x0.0000004p0", "0x0.0000005p0", "0x0.0000006p0", "0x0.0000006p0", "0x0.0000007p0",
    "0x0.0000008p0", "0x0.000000Ap0", "0x0.000000Bp0", "0x0.000000Dp0", "0x0.000000Fp0", "0x0.0000011p0", "0x0.0000014p0", "0x0.0000017p0",
    "0x0.000001Bp0", "0x0.000001Fp0", "0x0.0000024p0", "0x0.0000029p0", "0x0.0000030p0", "0x0.0000037p0", "0x0.0000040p0", "0x0.000004Ap0",
    "0x0.0000055p0", "0x0.0000062p0", "0x0.0000071p0", "0x0.0000083p0", "0x0.0000097p0", "0x0.00000AEp0", "0x0.00000C9p0", "0x0.00000E8p0",
    "0x0.000010Cp0", "0x0.0000136p0", "0x0.0000166p0", "0x0.000019Dp0", "0x0.00001DDp0", "0x0.0000227p0", "0x0.000027Dp0", "0x0.00002DFp0",
    "0x0.0000351p0", "0x0.00003D4p0", "0x0.000046Cp0", "0x0.000051Bp0", "0x0.00005E6p0", "0x0.00006CFp0", "0x0.00007DDp0", "0x0.0000915p0",
    "0x0.0000A7Cp0", "0x0.0000C1Cp0", "0x0.0000DFCp0", "0x0.0001026p0", "0x0.00012A6p0", "0x0.0001588p0", "0x0.00018DEp0", "0x0.0001CB7p0",
    "0x0.0002129p0", "0x0.000264Bp0", "0x0.0002C38p0", "0x0.0003310p0", "0x0.0003AF7p0", "0x0.0004418p0", "0x0.0004EA2p0", "0x0.0005ACEp0",
    "0x0.00068DCp0", "0x0.0007916p0", "0x0.0008BD4p0", "0x0.000A179p0", "0x0.000BA77p0", "0x0.000D754p0", "0x0.000F8A8p0", "0x0.0011F25p0",
    "0x0.0014B97p0", "0x0.0017EEAp0", "0x0.001BA2Ep0", "0x0.001FE9Fp0", "0x0.0024DA8p0", "0x0.002A8EDp0", "0x0.0031252p0", "0x0.0038C08p0",
    "0x0.0041893p0", "0x0.004BAE0p0", "0x0.005764Cp0", "0x0.0064EBBp0", "0x0.00748A9p0", "0x0.0086947p0", "0x0.009B691p0", "0x0.00B3771p0",
    "0x0.00CF3E3p0", "0x0.00EF521p0", "0x0.01145CFp0", "0x0.013F239p0", "0x0.0170894p0", "0x0.01A9943p0", "0x0.01EB736p0", "0x0.023784Bp0",
    "0x0.028F5C3p0", "0x0.02F4CC4p0", "0x0.0369EFCp0", "0x0.03F134Dp0", "0x0.048D69Cp0", "0x0.0541CC5p0", "0x0.06121A8p0", "0x0.0702A69p0",
    "0x0.08186E2p0", "0x0.0959348p0", "0x0.0ACBA15p0", "0x0.0C7763Fp0", "0x0.0E655C3p0", "0x0.109FC99p0", "0x0.133281Bp0", "0x0.162B2F1p0",
    "0x0.199999Ap0", "0x0.1D8FFABp0", "0x0.22235DBp0", "0x0.276C100p0", "0x0.2D8621Cp0", "0x0.3491FB5p0", "0x0.3CB508Ep0", "0x0.461A81Cp0",
    "0x0.50F44D9p0", "0x0.5D7C0D3p0", "0x0.6BF44D5p0", "0x0.7CA9E76p0", "0x0.8FF599Ep0", "0x0.A63DDFEp0", "0x0.BFF9112p0", "0x0.DDAFD68p0"
   };
_ssdm_SpecConstant(exp_msb_ind_1_table);
# 3164 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<54,26> exp_msb_ind_1 = exp_msb_ind_1_table[x_msb_ind_1];
   ap_ufixed<106,24> f_x_msb_ind_1_ind_2_ind_1_lsb = exp_msb_ind_1 * exp_msb_ind2_msb_ind3_lsb_ind_m_1;
   y = f_x_msb_ind_1_ind_2_ind_1_lsb + exp_msb_ind_1;
  }
  if(I_<27) {
   bool overf = 0;
#pragma unroll
 for(int j = 51; j >= 25 + I_; j--) {
    if(y[j]) {
     overf = 1;
    }
   }
   if(overf) {
#pragma unroll
 for(int j = 51; j>=25 + I_; j--) {
     y[j] = 0;
    }
#pragma unroll
 for(int j = 24 + I_; j >= 0; j--) {
     y[j] = 1;
    }
   }
  }
  r = y;
 } else {
  ap_fixed<65,33> x_l = x;
  ap_ufixed<64,32> y = 0;
  ap_fixed<5,5> x_l_int;
  x_l_int(4,0) = x_l(36,32);
  ap_ufixed<32,0> x_l_fract;
  x_l_fract(31,0) = x_l(31,0);
  bool overf = 0;
#pragma unroll
 for(int j = 63; j >= 36; j--) {
   if(x_l[64]!=x_l[j]) {
    overf = 1;
   }
  }
  if(overf||(x_l_int >= 10)||((x_l_int==9)&&(x_l_fract>ap_fixed<32,0>("0x0.A209A84F")))) {
   if(!x_l[64]) {
    y = ap_ufixed<64,32>("0xFFFFFFFF.FFFFFFFFp0");
   }
  } else {
   ap_uint<8> x_msb_ind_1;
   x_msb_ind_1[7] = x_l[64];
   x_msb_ind_1(6,0) = x_l(35,29);
   ap_uint<8> x_msb_ind_2;
   x_msb_ind_2(7,0) = x_l(28,21);
   ap_uint<7> x_msb_ind_3;
   x_msb_ind_3(6,0) = x_l(20,14);
   ap_uint<7> x_msb_ind_4;
   x_msb_ind_4(6,0) = x_l(13,7);
   ap_uint<7> x_lsb_ind;
   x_lsb_ind(6,0) = x_l(6,0);
   const static ap_ufixed<49,-23> exp_x_lsb_ind_m_1_table[128] = {
    "0x0.0p0", "0x0.000000024D76377927p0", "0x0.000000049AEC6EF79Cp0", "0x0.00000006E862A67B5Dp0", "0x0.0000000935D8DE046Dp0", "0x0.0000000B834F1592C9p0", "0x0.0000000DD0C54D2672p0", "0x0.000000101E3B84BF69p0",
    "0x0.000000126BB1BC5DAEp0", "0x0.00000014B927F4013Fp0", "0x0.00000017069E2BAA1Ep0", "0x0.00000019541463584Ap0", "0x0.0000001BA18A9B0BC3p0", "0x0.0000001DEF00D2C48Ap0", "0x0.000000203C770A829Ep0", "0x0.0000002289ED4245FFp0",
    "0x0.00000024D7637A0EAEp0", "0x0.0000002724D9B1DCA9p0", "0x0.00000029724FE9AFF2p0", "0x0.0000002BBFC6218889p0", "0x0.0000002E0D3C59666Cp0", "0x0.000000305AB291499Dp0", "0x0.00000032A828C9321Bp0", "0x0.00000034F59F011FE7p0",
    "0x0.000000374315391300p0", "0x0.00000039908B710B66p0", "0x0.0000003BDE01A90919p0", "0x0.0000003E2B77E10C1Ap0", "0x0.0000004078EE191468p0", "0x0.00000042C664512203p0", "0x0.0000004513DA8934EBp0", "0x0.000000476150C14D21p0",
    "0x0.00000049AEC6F96AA4p0", "0x0.0000004BFC3D318D75p0", "0x0.0000004E49B369B592p0", "0x0.000000509729A1E2FDp0", "0x0.00000052E49FDA15B5p0", "0x0.000000553216124DBBp0", "0x0.000000577F8C4A8B0Ep0", "0x0.00000059CD0282CDAEp0",
    "0x0.0000005C1A78BB159Bp0", "0x0.0000005E67EEF362D6p0", "0x0.00000060B5652BB55Ep0", "0x0.0000006302DB640D33p0", "0x0.0000006550519C6A55p0", "0x0.000000679DC7D4CCC5p0", "0x0.00000069EB3E0D3482p0", "0x0.0000006C38B445A18Dp0",
    "0x0.0000006E862A7E13E4p0", "0x0.00000070D3A0B68B89p0", "0x0.000000732116EF087Bp0", "0x0.000000756E8D278ABBp0", "0x0.00000077BC03601248p0", "0x0.0000007A0979989F22p0", "0x0.0000007C56EFD13149p0", "0x0.0000007EA46609C8BEp0",
    "0x0.00000080F1DC426580p0", "0x0.000000833F527B078Fp0", "0x0.000000858CC8B3AEEBp0", "0x0.00000087DA3EEC5B95p0", "0x0.0000008A27B5250D8Cp0", "0x0.0000008C752B5DC4D1p0", "0x0.0000008EC2A1968162p0", "0x0.000000911017CF4341p0",
    "0x0.000000935D8E080A6Dp0", "0x0.00000095AB0440D6E7p0", "0x0.00000097F87A79A8AEp0", "0x0.0000009A45F0B27FC2p0", "0x0.0000009C9366EB5C23p0", "0x0.0000009EE0DD243DD2p0", "0x0.000000A12E535D24CEp0", "0x0.000000A37BC9961117p0",
    "0x0.000000A5C93FCF02ADp0", "0x0.000000A816B607F991p0", "0x0.000000AA642C40F5C2p0", "0x0.000000ACB1A279F741p0", "0x0.000000AEFF18B2FE0Cp0", "0x0.000000B14C8EEC0A25p0", "0x0.000000B39A05251B8Bp0", "0x0.000000B5E77B5E323Fp0",
    "0x0.000000B834F1974E40p0", "0x0.000000BA8267D06F8Ep0", "0x0.000000BCCFDE099629p0", "0x0.000000BF1D5442C212p0", "0x0.000000C16ACA7BF348p0", "0x0.000000C3B840B529CBp0", "0x0.000000C605B6EE659Bp0", "0x0.000000C8532D27A6B9p0",
    "0x0.000000CAA0A360ED24p0", "0x0.000000CCEE199A38DDp0", "0x0.000000CF3B8FD389E2p0", "0x0.000000D189060CE035p0", "0x0.000000D3D67C463BD5p0", "0x0.000000D623F27F9CC3p0", "0x0.000000D87168B902FEp0", "0x0.000000DABEDEF26E86p0",
    "0x0.000000DD0C552BDF5Bp0", "0x0.000000DF59CB65557Ep0", "0x0.000000E1A7419ED0EEp0", "0x0.000000E3F4B7D851ABp0", "0x0.000000E6422E11D7B6p0", "0x0.000000E88FA44B630Dp0", "0x0.000000EADD1A84F3B2p0", "0x0.000000ED2A90BE89A5p0",
    "0x0.000000EF7806F824E4p0", "0x0.000000F1C57D31C571p0", "0x0.000000F412F36B6B4Cp0", "0x0.000000F66069A51673p0", "0x0.000000F8ADDFDEC6E8p0", "0x0.000000FAFB56187CAAp0", "0x0.000000FD48CC5237B9p0", "0x0.000000FF96428BF816p0",
    "0x0.00000101E3B8C5BDC0p0", "0x0.00000104312EFF88B7p0", "0x0.000001067EA53958FCp0", "0x0.00000108CC1B732E8Ep0", "0x0.0000010B1991AD096Dp0", "0x0.0000010D6707E6E999p0", "0x0.0000010FB47E20CF13p0", "0x0.0000011201F45AB9DAp0",
    "0x0.000001144F6A94A9EEp0", "0x0.000001169CE0CE9F4Fp0", "0x0.00000118EA570899FEp0", "0x0.0000011B37CD4299FAp0", "0x0.0000011D85437C9F44p0", "0x0.0000011FD2B9B6A9DAp0", "0x0.00000122202FF0B9BEp0", "0x0.000001246DA62ACEEFp0"
   };
_ssdm_SpecConstant(exp_x_lsb_ind_m_1_table);
# 3252 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<49,-23> exp_x_lsb_ind_m_1 = exp_x_lsb_ind_m_1_table[x_lsb_ind];
   const static ap_ufixed<56,-16> exp_x_msb_ind_4_m_1_table[128] = {
    "0x0.0p0", "0x0.00000126BB1C64FE3Ep0", "0x0.0000024D763A1D4ECAp0", "0x0.00000374315928F1A6p0", "0x0.0000049AEC7987E6D2p0", "0x0.000005C1A79B3A2E51p0", "0x0.000006E862BE3FC825p0", "0x0.0000080F1DE298B44Dp0",
    "0x0.00000935D90844F2CDp0", "0x0.00000A5C942F4483A6p0", "0x0.00000B834F579766D9p0", "0x0.00000CAA0A813D9C67p0", "0x0.00000DD0C5AC372453p0", "0x0.00000EF780D883FE9Ep0", "0x0.0000101E3C06242B48p0", "0x0.00001144F73517AA55p0",
    "0x0.0000126BB2655E7BC5p0", "0x0.000013926D96F89F9Ap0", "0x0.000014B928C9E615D5p0", "0x0.000015DFE3FE26DE78p0", "0x0.000017069F33BAF985p0", "0x0.0000182D5A6AA266FCp0", "0x0.0000195415A2DD26E0p0", "0x0.00001A7AD0DC6B3932p0",
    "0x0.00001BA18C174C9DF4p0", "0x0.00001CC84753815527p0", "0x0.00001DEF0291095ECCp0", "0x0.00001F15BDCFE4BAE6p0", "0x0.0000203C7910136975p0", "0x0.000021633451956A7Bp0", "0x0.00002289EF946ABDFAp0", "0x0.000023B0AAD89363F3p0",
    "0x0.000024D7661E0F5C68p0", "0x0.000025FE2164DEA75Ap0", "0x0.00002724DCAD0144CCp0", "0x0.0000284B97F67734BDp0", "0x0.000029725341407730p0", "0x0.00002A990E8D5D0C27p0", "0x0.00002BBFC9DACCF3A2p0", "0x0.00002CE68529902DA4p0",
    "0x0.00002E0D4079A6BA2Ep0", "0x0.00002F33FBCB109942p0", "0x0.0000305AB71DCDCAE0p0", "0x0.000031817271DE4F0Bp0", "0x0.000032A82DC74225C5p0", "0x0.000033CEE91DF94F0Dp0", "0x0.000034F5A47603CAE7p0", "0x0.0000361C5FCF619954p0",
    "0x0.000037431B2A12BA54p0", "0x0.00003869D686172DEBp0", "0x0.0000399091E36EF418p0", "0x0.00003AB74D421A0CDFp0", "0x0.00003BDE08A218783Fp0", "0x0.00003D04C4036A363Cp0", "0x0.00003E2B7F660F46D5p0", "0x0.00003F523ACA07AA0Ep0",
    "0x0.00004078F62F535FE7p0", "0x0.0000419FB195F26862p0", "0x0.000042C66CFDE4C380p0", "0x0.000043ED28672A7144p0", "0x0.00004513E3D1C371ADp0", "0x0.0000463A9F3DAFC4BFp0", "0x0.000047615AAAEF6A7Ap0", "0x0.0000488816198262E1p0",
    "0x0.000049AED18968ADF4p0", "0x0.00004AD58CFAA24BB5p0", "0x0.00004BFC486D2F3C26p0", "0x0.00004D2303E10F7F48p0", "0x0.00004E49BF5643151Cp0", "0x0.00004F707ACCC9FDA5p0", "0x0.000050973644A438E4p0", "0x0.000051BDF1BDD1C6DAp0",
    "0x0.000052E4AD3852A788p0", "0x0.0000540B68B426DAF1p0", "0x0.0000553224314E6116p0", "0x0.00005658DFAFC939F8p0", "0x0.0000577F9B2F976599p0", "0x0.000058A656B0B8E3FBp0", "0x0.000059CD12332DB51Ep0", "0x0.00005AF3CDB6F5D905p0",
    "0x0.00005C1A893C114FB1p0", "0x0.00005D4144C2801924p0", "0x0.00005E68004A42355Fp0", "0x0.00005F8EBBD357A463p0", "0x0.000060B5775DC06632p0", "0x0.000061DC32E97C7ACEp0", "0x0.00006302EE768BE238p0", "0x0.00006429AA04EE9C72p0",
    "0x0.000065506594A4A97Dp0", "0x0.000066772125AE095Ap0", "0x0.0000679DDCB80ABC0Cp0", "0x0.000068C4984BBAC194p0", "0x0.000069EB53E0BE19F3p0", "0x0.00006B120F7714C52Bp0", "0x0.00006C38CB0EBEC33Ep0", "0x0.00006D5F86A7BC142Cp0",
    "0x0.00006E8642420CB7F8p0", "0x0.00006FACFDDDB0AEA2p0", "0x0.000070D3B97AA7F82Dp0", "0x0.000071FA7518F2949Ap0", "0x0.0000732130B89083EBp0", "0x0.00007447EC5981C621p0", "0x0.0000756EA7FBC65B3Dp0", "0x0.00007695639F5E4341p0",
    "0x0.000077BC1F44497E2Fp0", "0x0.000078E2DAEA880C08p0", "0x0.00007A09969219ECCEp0", "0x0.00007B30523AFF2082p0", "0x0.00007C570DE537A726p0", "0x0.00007D7DC990C380BBp0", "0x0.00007EA4853DA2AD43p0", "0x0.00007FCB40EBD52CBFp0",
    "0x0.000080F1FC9B5AFF31p0", "0x0.00008218B84C34249Ap0", "0x0.0000833F73FE609CFCp0", "0x0.000084662FB1E06859p0", "0x0.0000858CEB66B386B2p0", "0x0.000086B3A71CD9F808p0", "0x0.000087DA62D453BC5Dp0", "0x0.000089011E8D20D3B2p0",
    "0x0.00008A27DA47413E0Ap0", "0x0.00008B4E9602B4FB65p0", "0x0.00008C7551BF7C0BC5p0", "0x0.00008D9C0D7D966F2Cp0", "0x0.00008EC2C93D04259Bp0", "0x0.00008FE984FDC52F14p0", "0x0.0000911040BFD98B98p0", "0x0.00009236FC83413B29p0"
   };
_ssdm_SpecConstant(exp_x_msb_ind_4_m_1_table);
# 3271 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<56,-16> exp_x_msb_ind_4_m_1 = exp_x_msb_ind_4_m_1_table[x_msb_ind_4];
   ap_ufixed<105,-39> f_x_msb_ind_4_lsb_ind = exp_x_msb_ind_4_m_1 * exp_x_lsb_ind_m_1;
   ap_ufixed<54,-16> exp_x_msb_ind_4_lsb_ind_m_1 = f_x_msb_ind_4_lsb_ind + exp_x_msb_ind_4_m_1 + exp_x_lsb_ind_m_1;
   const static ap_ufixed<61,-9> exp_x_msb_ind_3_m_1_table[128] = {
    "0x0.0p0", "0x0.0000935DB847FC5AA8p0", "0x0.000126BBC564BCA768p0", "0x0.0001BA1A275671BB78p0", "0x0.00024D78DE1D4C6C2Cp0", "0x0.0002E0D7E9B97D8EFCp0", "0x0.000374374A2B35F970p0", "0x0.00040796FF72A6813Cp0",
    "0x0.00049AF7098FFFFC24p0", "0x0.00052E57688373400Cp0", "0x0.0005C1B81C4D3122F0p0", "0x0.0006551924ED6A7AF0p0", "0x0.0006E87A8264501E44p0", "0x0.00077BDC34B212E340p0", "0x0.00080F3E3BD6E3A04Cp0", "0x0.0008A2A097D2F32C00p0",
    "0x0.0009360348A6725D00p0", "0x0.0009C9664E51920A0Cp0", "0x0.000A5CC9A8D4830A0Cp0", "0x0.000AF02D582F7633F4p0", "0x0.000B83915C629C5EE4p0", "0x0.000C16F5B56E266210p0", "0x0.000CAA5A63524514C8p0", "0x0.000D3DBF660F294E74p0",
    "0x0.000DD124BDA503E6A8p0", "0x0.000E648A6A1405B500p0", "0x0.000EF7F06B5C5F9140p0", "0x0.000F8B56C17E425348p0", "0x0.00101EBD6C79DED310p0", "0x0.0010B2246C4F65E8ACp0", "0x0.0011458BC0FF086C50p0", "0x0.0011D8F36A88F7364Cp0",
    "0x0.00126C5B68ED631F08p0", "0x0.0012FFC3BC2C7CFF0Cp0", "0x0.0013932C644675AEF4p0", "0x0.00142695613B7E0788p0", "0x0.0014B9FEB30BC6E19Cp0", "0x0.00154D6859B7811628p0", "0x0.0015E0D2553EDD7E44p0", "0x0.0016743CA5A20CF314p0",
    "0x0.001707A74AE1404DF0p0", "0x0.00179B1244FCA86834p0", "0x0.00182E7D93F4761B6Cp0", "0x0.0018C1E937C8DA4134p0", "0x0.00195555307A05B348p0", "0x0.0019E8C17E08294B7Cp0", "0x0.001A7C2E207375E3C8p0", "0x0.001B0F9B17BC1C563Cp0",
    "0x0.001BA30863E24D7D04p0", "0x0.001C367604E63A3268p0", "0x0.001CC9E3FAC81350CCp0", "0x0.001D5D52458809B2ACp0", "0x0.001DF0C0E5264E32ACp0", "0x0.001E842FD9A311AB84p0", "0x0.001F179F22FE84F804p0", "0x0.001FAB0EC138D8F320p0",
    "0x0.00203E7EB4523E77E4p0", "0x0.0020D1EEFC4AE66178p0", "0x0.0021655F9923018B24p0", "0x0.0021F8D08ADAC0D048p0", "0x0.00228C41D172550C64p0", "0x0.00231FB36CE9EF1B0Cp0", "0x0.0023B3255D41BFD7FCp0", "0x0.00244697A279F81F04p0",
    "0x0.0024DA0A3C92C8CC10p0", "0x0.00256D7D2B8C62BB2Cp0", "0x0.002600F06F66F6C880p0", "0x0.002694640822B5D04Cp0", "0x0.002727D7F5BFD0AEECp0", "0x0.0027BB4C383E7840E0p0", "0x0.00284EC0CF9EDD62C0p0", "0x0.0028E235BBE130F138p0",
    "0x0.002975AAFD05A3C918p0", "0x0.002A0920930C66C754p0", "0x0.002A9C967DF5AAC8E8p0", "0x0.002B300CBDC1A0AB00p0", "0x0.002BC3835270794AD4p0", "0x0.002C56FA3C026585C8p0", "0x0.002CEA717A77963950p0", "0x0.002D7DE90DD03C4300p0",
    "0x0.002E1160F60C888084p0", "0x0.002EA4D9332CABCFB0p0", "0x0.002F3851C530D70E68p0", "0x0.002FCBCAAC193B1AB0p0", "0x0.00305F43E7E608D2ACp0", "0x0.0030F2BD7897711494p0", "0x0.003186375E2DA4BEC4p0", "0x0.003219B198A8D4AFB0p0",
    "0x0.0032AD2C280931C5ECp0", "0x0.003340A70C4EECE020p0", "0x0.0033D422457A36DD1Cp0", "0x0.0034679DD38B409BBCp0", "0x0.0034FB19B6823AFB0Cp0", "0x0.00358E95EE5F56DA24p0", "0x0.003622127B22C51840p0", "0x0.0036B58F5CCCB694B4p0",
    "0x0.0037490C935D5C2EF8p0", "0x0.0037DC8A1ED4E6C690p0", "0x0.00387007FF33873B30p0", "0x0.0039038634796E6C9Cp0", "0x0.00399704BEA6CD3AB4p0", "0x0.003A2A839DBBD48578p0", "0x0.003ABE02D1B8B52D04p0", "0x0.003B51825A9DA01190p0",
    "0x0.003BE502386AC6136Cp0", "0x0.003C78826B2058130Cp0", "0x0.003D0C02F2BE86F0F8p0", "0x0.003D9F83CF45838DD8p0", "0x0.003E330500B57ECA74p0", "0x0.003EC686870EA987A4p0", "0x0.003F5A08625134A66Cp0", "0x0.003FED8A927D5107E4p0",
    "0x0.0040810D17932F8D38p0", "0x0.0041148FF1930117C0p0", "0x0.0041A813207CF688E8p0", "0x0.00423B96A45140C234p0", "0x0.0042CF1A7D1010A550p0", "0x0.0043629EAAB99713F8p0", "0x0.0043F6232D4E04F00Cp0", "0x0.004489A804CD8B1B80p0",
    "0x0.00451D2D31385A7870p0", "0x0.0045B0B2B28EA3E90Cp0", "0x0.0046443888D0984FA0p0", "0x0.0046D7BEB3FE688E98p0", "0x0.00476B453418458878p0", "0x0.0047FECC091E601FE4p0", "0x0.004892533310E93798p0", "0x0.004925DAB1F011B270p0"
   };
_ssdm_SpecConstant(exp_x_msb_ind_3_m_1_table);
# 3292 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<61,-9> exp_x_msb_ind_3_m_1 = exp_x_msb_ind_3_m_1_table[x_msb_ind_3];
   ap_ufixed<115,-25> f_x_msb_ind_3_msb_ind_4_lsb_ind = exp_x_msb_ind_3_m_1 * exp_x_msb_ind_4_lsb_ind_m_1;
   ap_ufixed<59,-9> exp_x_msb_ind_3_msb_ind_4_lsb_ind_m_1 = f_x_msb_ind_3_msb_ind_4_lsb_ind + exp_x_msb_ind_3_m_1 + exp_x_msb_ind_4_lsb_ind_m_1;
   const static ap_ufixed<67,-1> exp_x_msb_ind_2_m_1_table[256] = {
    "0x0.0p0", "0x0.0049B96285BC0A736p0", "0x0.009388004BE7E5593p0", "0x0.00DD6BDF6FC8EDEABp0", "0x0.01276506106747AA4p0", "0x0.0171737A4E8E5E346p0", "0x0.01BB97424CCD67360p0", "0x0.0205D0642F77E4885p0",
    "0x.02501EE61CA62671Ep0", "0x0.029A82CE3C35CE0DBp0", "0x0.02E4FC22B7CA4FD73p0", "0x0.032F8AE9BACD765C6p0", "0x0.037A2F29726FE5154p0", "0x0.03C4E8E80DA99B612p0", "0x0.040FB82BBD3A77A9Ap0", "0x0.045A9CFAB3AABAAB4p0",
    "0x.04A5975B254B8AE40p0", "0x0.04F0A75348377827Fp0", "0x0.053BCCE95452FF5B2p0", "0x0.05870823834D0E520p0", "0x0.05D25908109F87D7Ap0", "0x0.061DBF9D398FC7D9Dp0", "0x0.06693BE93D2F27BB7p0", "0x0.06B4CDF25C5B82CCDp0",
    "0x.070075BED9BFBAEA4p0", "0x0.074C3354F9D43D40Ap0", "0x0.079806BB02DF8738Ap0", "0x0.07E3EFF73CF6AB87Ap0", "0x0.082FEF0FF1FDD767Bp0", "0x0.087C040B6DA8D7F50p0", "0x0.08C82EEFFD7B9FB28p0", "0x0.09146FC3F0CACC34Cp0",
    "0x.0960C68D98BC2BF2Ep0", "0x0.09AD33534847443EAp0", "0x0.09F9B61B5435D762Cp0", "0x0.0A464EEC13246AE7Ep0", "0x0.0A92FDCBDD82CE006p0", "0x0.0ADFC2C10D94A01AAp0", "0x0.0B2C9DD1FF71D79A4p0", "0x0.0B798F05110748B7Fp0",
    "0x.0BC69660A2172C887p0", "0x0.0C13B3EB1439A82A1p0", "0x0.0C60E7AACADD54194p0", "0x0.0CAE31A62B47C3AC7p0", "0x0.0CFB91E39C960CB66p0", "0x0.0D49086987BD4F4FEp0", "0x0.0D96953E578B3DC88p0", "0x0.0DE4386878A6A4BEAp0",
    "0x.0E31F1EE598FF35E7p0", "0x0.0E7FC1D66AA1C3C87p0", "0x0.0ECDA8271E11639EAp0", "0x0.0F1BA4E6E7EF5CBA0p0", "0x0.0F69B81C3E27FE069p0", "0x0.0FB7E1CD9883E4871p0", "0x0.1006220170A884803p0", "0x0.105478BE4218B2CB7p0",
    "0x.10A2E60A8A352E513p0", "0x0.10F169ECC83D29AA6p0", "0x0.1140046B7D4ED4EA6p0", "0x0.118EB58D2C67E78FCp0", "0x0.11DD7D585A662A9D7p0", "0x0.122C5BD38E0802DB1p0", "0x0.127B51054FECFB3DBp0", "0x0.12CA5CF42A964F780p0",
    "0x.13197FA6AA6776B28p0", "0x0.1368B9235DA6AE6BAp0", "0x0.13B80970D47D85804p0", "0x0.14077095A0F9675B6p0", "0x0.1456EE98570C274EEp0", "0x0.14A6837F8C8C8C138p0", "0x0.14F62F51D936DB71Dp0", "0x0.1545F215D6AD6612Fp0",
    "0x.1595CBD2207913796p0", "0x0.15E5BC8D5409EE22Bp0", "0x0.1635C44E10B7AFD11p0", "0x0.1685E31AF7C24DFD9p0", "0x0.16D618FAAC528672Ap0", "0x0.172665F3D37A6C0F3p0", "0x0.1776CA0D1435F3B24p0", "0x0.17C7454D176B814F4p0",
    "0x.1817D7BA87EC752AAp0", "0x0.1868815C1275B93F8p0", "0x0.18B9423865B04ECDCp0", "0x0.190A1A563231DC114p0", "0x0.195B09BC2A7D3A217p0", "0x0.19AC1071030302FA1p0", "0x0.19FD2E7B72221FACBp0", "0x0.1A4E63E2302856BB6p0",
    "0x.1A9FB0ABF752DA9BEp0", "0x0.1AF114DF83CED8647p0", "0x0.1B42908393BA06A18p0", "0x0.1B94239EE72334542p0", "0x0.1BE5CE38400AD81A5p0", "0x0.1C37905662639F7FEp0", "0x0.1C896A001412FE793p0", "0x0.1CDB5B3C1CF1BF06Bp0",
    "0x.1D2D641146CC91022p0", "0x0.1D7F84865D649A153p0", "0x0.1DD1BCA22E7005D96p0", "0x0.1E240C6B899A96219p0", "0x0.1E7673E94086336D2p0", "0x0.1EC8F32226CB7D849p0", "0x0.1F1B8A1D11FA5C3FAp0", "0x0.1F6E38E0D99A9075Cp0",
    "0x.1FC0FF74572C45177p0", "0x0.2013DDDE6628A071Cp0", "0x0.2066D425E402559C1p0", "0x0.20B9E251B026360EFp0", "0x0.210D0868ABFBC3658p0", "0x0.21604671BAE5C1485p0", "0x0.21B39C73C242C7830p0", "0x0.22070A75A96DD4433p0",
    "0x.225A907E59BEDE81Cp0", "0x0.22AE2E94BE8B6896Ap0", "0x0.2301E4BFC52712F67p0", "0x0.2355B3065CE42F1A7p0", "0x0.23A9996F77145292Cp0", "0x0.23FD98020708EA434p0", "0x0.2451AEC50213CDCA7p0", "0x0.24A5DDBF5F87D312Ep0",
    "0x.24FA24F818B9620F7p0", "0x0.254E847628FF08A1Bp0", "0x0.25A2FC408DB20EAB1p0", "0x0.25F78C5E462F0A48Bp0", "0x0.264C34D653D67439Bp0", "0x0.26A0F5AFBA0D3C70Bp0", "0x0.26F5CEF17E3D5ECF9p0", "0x0.274AC0A2A7D6780E4p0",
    "0x.279FCACA404E5ACCBp0", "0x0.27F4ED6F5321A4CF5p0", "0x0.284A2898EDD45466Ap0", "0x0.289F7C4E1FF25E01Ep0", "0x0.28F4E895FB1041ECEp0", "0x0.294A6D7792CBA238Bp0", "0x0.29A00AF9FCCBD8CFCp0", "0x0.29F5C12450C28DB50p0",
    "0x.2A4B8FFDA86C4D6E8p0", "0x0.2AA1778D1F911F9B4p0", "0x0.2AF777D9D4051DB44p0", "0x0.2B4D90EAE5A909F93p0", "0x0.2BA3C2C7766AE6888p0", "0x0.2BFA0D76AA468CA2Fp0", "0x0.2C5070FFA746441ACp0", "0x0.2CA6ED6995835AEE4p0",
    "0x.2CFD82BB9F26BD0EAp0", "0x0.2D5430FCF0698C518p0", "0x0.2DAAF834B795B88F5p0", "0x0.2E01D86A250697ECCp0", "0x0.2E58D1A46B297F504p0", "0x0.2EAFE3EABE7E5B03Bp0", "0x0.2F070F44559847819p0", "0x0.2F5E53B8691E2A6E5p0",
    "0x.2FB5B14E33CB4BBE3p0", "0x0.300D280CF26FEF065p0", "0x0.3064B7FBE3F1ECFAEp0", "0x0.30BC6122494D4D18Bp0", "0x0.311423876594DF7B7p0", "0x0.316BFF327DF2D6E06p0", "0x0.31C3F42AD9A962D4Ep0", "0x0.321C0277C2134A11Dp0",
    "0x.32742A2082A485035p0", "0x0.32CC6B2C68EAD87CAp0", "0x0.3324C5A2C48E70995p0", "0x0.337D398AE7527BCA2p0", "0x0.33D5C6EC2515C60F8p0", "0x0.342E6DCDD3D3545FDp0", "0x0.34872E374BA3003AFp0", "0x0.34E0082FE6BA136ADp0",
    "0x.3538FBBF016BE3F00p0", "0x0.359208EBFA2A701C4p0", "0x0.35EB2FBE3186FAD90p0", "0x0.3644703D0A32A81BDp0", "0x0.369DCA6FE8FF1986Fp0", "0x0.36F73E5E34DF0B37Bp0", "0x0.3750CC0F56E6F0C1Ep0", "0x0.37AA738ABA4D92580p0",
    "0x.380434D7CC6CAA213p0", "0x0.385E0FFDFCC181BC3p0", "0x0.38B80504BCED8FF00p0", "0x0.391213F380B716895p0", "0x0.396C3CD1BE09C0665p0", "0x0.39C67FA6ECF73FAF1p0", "0x0.3A20DC7A87B7EC3C5p0", "0x0.3A7B53540AAB622AFp0",
    "0x.3AD5E43AF459209E5p0", "0x0.3B308F36C57128AF1p0", "0x0.3B8B544F00CC9C88Ap0", "0x0.3BE6338B2B6E5EB41p0", "0x0.3C412CF2CC83B1910p0", "0x0.3C9C408D6D64D6FC5p0", "0x0.3CF76E629995B0251p0", "0x0.3D52B679DEC65D8F1p0",
    "0x.3DAE18DACCD3DF440p0", "0x0.3E09958CF5C8B5321p0", "0x0.3E652C97EDDD7FB9Bp0", "0x0.3EC0DE034B79A0686p0", "0x0.3F1CA9D6A733DAE2Ep0", "0x0.3F7890199BD2F5FCFp0", "0x0.3FD490D3C64E5D001p0", "0x0.4030AC0CC5CEC11FFp0",
    "0x.408CE1CC3BAEBB1E6p0", "0x0.40E93219CB7B6D1CCp0", "0x0.41459CFD1AF5249CFp0", "0x0.41A2227DD20FFCB02p0", "0x0.41FEC2A39AF480553p0", "0x0.425B7D7622004D04Dp0", "0x0.42B852FD15C6B56D6p0", "0x0.431543402711645D2p0",
    "0x.43724E4708E0FFDB7p0", "0x0.43CF7419706DCC711p0", "0x0.442CB4BF1528509F4p0", "0x0.448A103FB0B9F8866p0", "0x0.44E786A2FF05B9BB0p0", "0x0.454517F0BE28B74ACp0", "0x0.45A2C430AE7AE5F03p0", "0x0.46008B6A928FB075Ep0",
    "0x.465E6DA62F369C48Ep0", "0x0.46BC6AEB4B7BEE3AAp0", "0x0.471A8341B0A94F727p0", "0x0.4778B6B12A46728E1p0", "0x0.47D705418619B8F25p0", "0x0.48356EFA9428D84B1p0", "0x0.4893F3E426B9803ABp0", "0x0.48F2940612520039Ap0",
    "0x.49514F682DB9EDA59p0", "0x0.49B0261251FACA004p0", "0x0.4A0F180C5A60A95E7p0", "0x0.4A6E255E247AD906Ap0", "0x0.4ACD4E0F901C863FEp0", "0x0.4B2C92287F5D65507p0", "0x0.4B8BF1B0D69A58AD0p0", "0x0.4BEB6CB07C7618574p0",
    "0x.4C4B032F59D9D96D8p0", "0x0.4CAAB53559F5F5E9Fp0", "0x0.4D0A82CA6A429492Bp0", "0x0.4D6A6BF67A8051199p0", "0x0.4DCA70C17CB8E46D2p0", "0x0.4E2A9133653FCD395p0", "0x0.4E8ACD542AB2F8995p0", "0x0.4EEB252BC5FB6AF99p0",
    "0x.4F4B98C2324DE92ACp0", "0x0.4FAC281F6D2BA1A4Fp0", "0x0.500CD34B7662D5FC3p0", "0x0.506D9A4E500F84855p0", "0x0.50CE7D2FFE9C122BEp0", "0x0.512F7BF888C1F4791p0", "0x0.519096AFF78A5BCB5p0", "0x0.51F1CD5E564EDDBF2p0",
    "0x.5253200BB2BA1FC90p0", "0x0.52B48EC01CC882005p0", "0x0.53161983A6C8CA1BBp0", "0x0.5377C05E655CCE9E1p0", "0x0.53D983586F7A2235Ep0", "0x0.543B6279DE6ABF4CAp0", "0x0.549D5DCACDCDB3C8Dp0", "0x0.54FF75535B97CD007p0"
   };
_ssdm_SpecConstant(exp_x_msb_ind_2_m_1_table);
# 3313 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<67,-1> exp_x_msb_ind_2_m_1 = exp_x_msb_ind_2_m_1_table[x_msb_ind_2];
   ap_ufixed<126,-10> f_x_msb_ind_2_msb_ind_3_msb_ind_4_lsb_ind = exp_x_msb_ind_2_m_1 * exp_x_msb_ind_3_msb_ind_4_lsb_ind_m_1;
   ap_ufixed<65,-1> exp_x_msb_ind_2_msb_ind_3_msb_ind_4_lsb_ind_m_1 = f_x_msb_ind_2_msb_ind_3_msb_ind_4_lsb_ind + exp_x_msb_ind_2_m_1 + exp_x_msb_ind_3_msb_ind_4_lsb_ind_m_1;
   const static ap_ufixed<66,32> exp_x_msb_ind_1_table[256] = {
    "0x1.000000000p0", "0x1.5561A91BCp0", "0x1.C73D51C54p0", "0x2.5F1258E08p0", "0x3.298B075B4p0", "0x4.378B053ECp0", "0x5.9F9802C8Cp0", "0x7.7FBAAB458p0",
    "0xA.000000000p0", "0xD.55D09B148p0", "0x11.C86531B4Cp0", "0x17.B6B778C40p0", "0x1F.9F6E49910p0", "0x2A.2B6E34724p0", "0x38.3BF01BD84p0", "0x4A.FD4AB0B64p0",
    "0x64.000000000p0", "0x85.5A260ECDCp0", "0xB1.D3F3F10ECp0", "0xED.232AB7A90p0", "0x13C.3A4EDFA98p0", "0x1A5.B24E0C774p0", "0x232.57611671Cp0", "0x2ED.E4EAE71ECp0",
    "0x3E8.000000000p0", "0x535.857C94088p0", "0x6F2.47876A934p0", "0x943.5FAB2C9B4p0", "0xC5A.4714BC9E8p0", "0x1078.F70C7CA94p0", "0x15F7.69CAE0728p0", "0x1D4A.F12D0732Cp0",
    "0x2710.000000000p0", "0x3417.36DDC8558p0", "0x4576.CB4A29C18p0", "0x5CA1.BCAFBE0F8p0", "0x7B86.C6CF5E320p0", "0xA4B9.A67CDE9B4p0", "0xDBAA.21ECC4790p0", "0x124ED.6BC247FB8p0",
    "0x186A0.000000000p0", "0x208E8.24A9D3580p0", "0x2B6A3.F0E5A18ECp0", "0x39E51.5EDD6C9A0p0", "0x4D343.C419ADF30p0", "0x66F40.80E0B210Cp0", "0x894A5.533FACBA4p0", "0xB7146.3596CFD3Cp0",
    "0xF4240.000000000p0", "0x145911.6EA2416F4p0", "0x1B2267.68F84F938p0", "0x242F2D.B4A63E038p0", "0x3040A5.A900CB7F0p0", "0x405885.08C6F4A64p0", "0x55CE75.407CBF46Cp0", "0x726CBE.17E41E45Cp0",
    "0x989680.000000000p0", "0xCB7AAE.52568E584p0", "0x10F580A.19B31BC34p0", "0x169D7C9.0E7E6C220p0", "0x1E28678.9A07F2F6Cp0", "0x2837532.57C58E7F0p0", "0x35A1094.84DF78C38p0", "0x4783F6C.EEE92EB90p0",
    "0x5F5E100.000000000p0", "0x7F2CACF.37618F720p0", "0xA997065.00FF159FCp0", "0xE226DDA.90F039530p0", "0x12D940B6.044F7DA48p0", "0x192293F7.6DB790F54p0", "0x2184A5CD.30BAB7A30p0", "0x2CB27A41.551BD339Cp0",
    "0x3B9ACA00.000000000p0", "0x4F7BEC18.29CF9A750p0", "0x69FE63F2.09F6D83E4p0", "0x8D584A89.A9623D3E0p0", "0xBC7C871C.2B1AE86C4p0", "0xFB59C7AA.492BA9948p0", "0x14F2E7A03.E74B2C5F4p0", "0x1BEF8C68D.531640404p0",
    "0x2540BE400.000000000p0", "0x31AD738F1.A21C08914p0", "0x423EFE774.63A4726F4p0", "0x58572E960.9DD6646C4p0", "0x75CDD4719.AF0D143A8p0", "0x9D181CCA6.DBB49FCD0p0", "0xD17D0C427.08EFBBB80p0", "0x1175B7C185.3EDE8282Cp0",
    "0x174876E800.000000000p0", "0x1F0C683970.551855AD0p0", "0x29675F0A8B.E46C78594p0", "0x37367D1DC6.2A5FEC3A0p0", "0x49A0A4C700.D682CA49Cp0", "0x622F11FE84.950E3E020p0", "0x82EE27A986.595D55300p0", "0xAE992D8F34.74B1191B8p0",
    "0xE8D4A51000.000000000p0", "0x1367C123E63.52F358C14p0", "0x19E09B66976.EC3CB37C0p0", "0x22820E329BD.A7BF3A448p0", "0x2E0466FC608.611BE6E18p0", "0x3D5D6B3F12D.D28E6C148p0", "0x51D4D8C9F3F.7DA553E00p0", "0x6D1FBC7980C.8EEAFB130p0",
    "0x9184E72A000.000000000p0", "0xC20D8B66FE1.3D81778C0p0", "0x102C61201EA5.3A5F02D70p0", "0x159148DFA168.8D7846AE0p0", "0x1CC2C05DBC53.CB1704CFCp0", "0x265A63076BCA.399038CD8p0", "0x3325077E387A.E87546BF0p0", "0x4433D5CBF07D.952DCEBE8p0",
    "0x5AF3107A4000.000000000p0", "0x794877205ECC.670EAB770p0", "0xA1BBCB413274.47B61C654p0", "0xD7ACD8BC4E15.86B2C2CC0p0", "0x11F9B83A95B45.EEE6301D8p0", "0x17F87DE4A35E6.3FA238074p0", "0x1FF724AEE34CD.1494C3758p0", "0x2AA0659F764E7.D3CA13714p0",
    "0x38D7EA4C68000.000000000p0", "0x4BCD4A743B3FC.0692B2A70p0", "0x65155F08BF88A.CD1D1BF4Cp0", "0x86CC0775B0CD7.42FB9BF90p0", "0xB3C13249D90BB.54FDE1260p0", "0xEFB4EAEE61AFE.7C563047Cp0", "0x13FA76ED4E1002.CDCFA296Cp0", "0x1AA43F83A9F10E.45E4C26DCp0",
    "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0",
    "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0",
    "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0",
    "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0",
    "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0",
    "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x0.0p0", "0x.000000004p0", "0x.000000004p0", "0x.000000004p0", "0x.000000004p0",
    "0x0.000000008p0", "0x.000000008p0", "0x.00000000Cp0", "0x.000000010p0", "0x.000000014p0", "0x.00000001Cp0", "0x.000000028p0", "0x.000000034p0",
    "0x0.000000044p0", "0x.00000005Cp0", "0x.00000007Cp0", "0x.0000000A4p0", "0x.0000000D8p0", "0x.000000120p0", "0x.000000184p0", "0x.000000204p0",
    "0x0.0000002B0p0", "0x.000000394p0", "0x.0000004C8p0", "0x.00000065Cp0", "0x.00000087Cp0", "0x.000000B50p0", "0x.000000F18p0", "0x.000001420p0",
    "0x0.000001AD8p0", "0x.0000023CCp0", "0x.000002FBCp0", "0x.000003FA8p0", "0x.0000054E4p0", "0x.000007134p0", "0x.0000096F4p0", "0x.00000C94Cp0",
    "0x0.000010C70p0", "0x.0000165F8p0", "0x.00001DD5Cp0", "0x.000027C90p0", "0x.0000350E0p0", "0x.000046BFCp0", "0x.00005E588p0", "0x.00007DCFCp0",
    "0x0.0000A7C5Cp0", "0x.0000DFBA4p0", "0x.00012A588p0", "0x.00018DD9Cp0", "0x.0002128ACp0", "0x.0002C37D4p0", "0x.0003AF73Cp0", "0x.0004EA1D0p0",
    "0x0.00068DB8Cp0", "0x.0008BD470p0", "0x.000BA7754p0", "0x.000F8A814p0", "0x.0014B96C0p0", "0x.001BA2E4Cp0", "0x.0024DA858p0", "0x.003125230p0",
    "0x0.004189374p0", "0x.005764C70p0", "0x.00748A940p0", "0x.009B690C8p0", "0x.00CF3E374p0", "0x.01145CEF0p0", "0x.017089380p0", "0x.01EB735F0p0",
    "0x0.028F5C290p0", "0x.0369EFC58p0", "0x.048D69C70p0", "0x.06121A7D0p0", "0x.08186E274p0", "0x.0ACBA1550p0", "0x.0E655C300p0", "0x.133281B68p0",
    "0x0.199999998p0", "0x.22235DB60p0", "0x.2D8621C70p0", "0x.3CB508E34p0", "0x.50F44D894p0", "0x.6BF44D530p0", "0x.8FF599E10p0", "0x.BFF911208p0"
   };
_ssdm_SpecConstant(exp_x_msb_ind_1_table);
# 3350 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_exp_apfixed.h"

   ap_ufixed<66,32> exp_x_msb_ind_1 = exp_x_msb_ind_1_table[x_msb_ind_1];
   ap_ufixed<131,31> f_x_msb_ind_1_msb_ind_2_msb_ind_3_msb_ind_4_lsb_ind = exp_x_msb_ind_1 * exp_x_msb_ind_2_msb_ind_3_msb_ind_4_lsb_ind_m_1;
   y = f_x_msb_ind_1_msb_ind_2_msb_ind_3_msb_ind_4_lsb_ind + exp_x_msb_ind_1;
  }
  if(I_<33) {
   bool overf = 0;
#pragma unroll
 for(int j = 63; j >= 31 + I_; j--) {
    if(y[j]) {
     overf = 1;
    }
   }
   if(overf) {
#pragma unroll
 for(int j = 63; j >= 31 + I_; j--) {
     y[j] = 0;
    }
#pragma unroll
 for(int j = 30 + I_; j >= 0; j--) {
     y[j] = 1;
    }
   }
  }
  r = y;
 }
 return r;
}

template<int W, int I>
ap_ufixed<W,I> exp10(ap_ufixed<W,I> x) {
    ap_fixed<W+1,I+1> xf = x;
    return exp10(xf);
}

template<int I>
ap_int<I> exp10(ap_int<I> x) {
    ap_fixed<I,I> xf = x;
    return exp10(xf);
}

template<int I>
ap_uint<I> exp10(ap_uint<I> x) {
    ap_fixed<I+1,I+1> xf = x;
    return exp10(xf);
}

}
# 1021 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h" 1
# 39 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"
namespace log_apfixed_reduce {


template <typename T, int p, int alpha, int size> class log_lut_table { public:
log_lut_table<T,p,alpha,size>();
static const T array [size];};
template <> class log_lut_table<ap_fixed<29, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<29, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<29, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};
template <> class log_lut_table<ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};
template <> class log_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};
template <> class log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};
template <> class log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};
template <> class log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};
template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,4,4,16>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [16];};

template <> class log_lut_table<ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64> { public:
log_lut_table<ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64>();
static const ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64> { public:
log_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64>();
static const ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64> { public:
log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64>();
static const ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64> { public:
log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64>();
static const ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64> { public:
log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,7,6,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64> { public:
log_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64>();
static const ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64> { public:
log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64>();
static const ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64> { public:
log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64>();
static const ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64> { public:
log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,12,6,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};

template <> class log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64> { public:
log_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64>();
static const ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64> { public:
log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64>();
static const ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64> { public:
log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,17,6,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};

template <> class log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,22,6,64> { public:
log_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,22,6,64>();
static const ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,22,6,64> { public:
log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,22,6,64>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,22,6,64> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,22,6,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};

template <> class log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,27,6,64> { public:
log_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,27,6,64>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,27,6,64> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,27,6,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};

template <> class log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,32,6,64> { public:
log_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,32,6,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};

template <typename T, int p, int alpha, int size> class log0_lut_table { public:
log0_lut_table<T,p,alpha,size>();
static const T array[size];};
template <> class log0_lut_table<ap_fixed<20, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<20, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();

static const ap_fixed<20, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<29, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<29, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<29, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<44, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<59, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<74, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<89, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<104, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};
template <> class log0_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64> { public:
log0_lut_table<ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0>,0,5,64>();
static const ap_fixed<119, 7, (ap_q_mode)5, (ap_o_mode)3, 0> array [64];};

class log_inverse_lut_table { public:
log_inverse_lut_table();
static const ap_ufixed<6, 1, (ap_q_mode)5, (ap_o_mode)3, 0> array[64];};


template <typename LOG_TYPE, int p, int alpha, int size, int sizeout>
void range_reduce(ap_ufixed<size, -p> zN, LOG_TYPE &log, ap_ufixed<sizeout, -(p+alpha-1)> &zN1)
{

    const int T1size = 1 << alpha;




    ap_ufixed<alpha, -p> a = zN;
    ap_ufixed<size-alpha, -p-alpha> b = zN;
    ap_ufixed<size+p+2*p+1, 1> zNext = 1+zN;
    int e_shift = (p!=4 || a[a.wl()-1]==1) ? 2*p : 2*p+1;
    ap_ufixed<size+p+1, 1-2*p> eZ = zNext >> e_shift;

    zN1 = ((b + eZ) - a*zN);
    ap_uint<alpha> index = a(alpha-1,0);
    log = log_lut_table<LOG_TYPE, p,alpha,T1size>::array[index];


}




const int p0 = 0;
const int alpha0 = 5;
const int p1 = (alpha0 == 5) ? 4 : (alpha0-2);
const int alpha1 = 4;
const int p2 = p1 + alpha1 - 1;
const int alpha2 = 6;
const int p3 = p2 + alpha2 - 1;
const int alpha3 = 6;
const int p4 = p3 + alpha3 - 1;
const int alpha4 = 6;
const int p5 = p4 + alpha4 - 1;
const int alpha5 = 6;
const int p6 = p5 + alpha5 - 1;
const int alpha6 = 6;
const int p7 = p6 + alpha6 - 1;
const int alpha7 = 6;
const int p8 = p7 + alpha7 - 1;

template <int W_s_> class log_traits{};

template <>
class log_traits<1>{
public:
    const static int we = 6;
    const static int wf = 11;
    const static int org_wf = wf;

    const static int gbits = 1;
    const static int p_generic = p1;
    const static int MaxPrecision = wf+gbits+1;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        return z1;
    }
};

template <>
class log_traits<2>{
public:
    const static int we = 6;
    const static int wf = 19;
    const static int org_wf = wf;

    const static int gbits = 2;
    const static int p_generic = p2;
    const static int MaxPrecision =wf+gbits+1;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        return z2;
    }
};

template <>
class log_traits<3>{
public:
    const static int we = 6;
    const static int wf = 33;
    const static int org_wf = wf;

    const static int gbits = 3;
    const static int p_generic = p3;
    const static int MaxPrecision = wf+gbits+1;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);
    const static int w3 = w2+2*p2+1-(alpha2-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        ap_ufixed<(w3 < MaxPrecision-p3) ? w3 : (MaxPrecision-p3), -p3> z3;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        range_reduce<LOG_TYPE, p2, alpha2> (z2, logn, z3);
        log_sum += logn;
        return z3;
    }
};

template <>
class log_traits<4>{
public:
    const static int we = 6;
    const static int wf = 48;
    const static int org_wf = wf;

    const static int gbits = 3;
    const static int p_generic = p4;
    const static int MaxPrecision = wf+gbits+1;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);
    const static int w3 = w2+2*p2+1-(alpha2-1);
    const static int w4 = w3+2*p3+1-(alpha3-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        ap_ufixed<(w3 < MaxPrecision-p3) ? w3 : (MaxPrecision-p3), -p3> z3;
        ap_ufixed<(w4 < MaxPrecision-p4) ? w4 : (MaxPrecision-p4), -p4> z4;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        range_reduce<LOG_TYPE, p2, alpha2> (z2, logn, z3);
        log_sum += logn;
        range_reduce<LOG_TYPE, p3, alpha3> (z3, logn, z4);
        log_sum += logn;
        return z4;
    }
};

template <>
class log_traits<5>{
public:
    const static int we = 6;
    const static int wf = 63;
    const static int org_wf = wf;

    const static int gbits = 3;
    const static int p_generic = p5;
    const static int MaxPrecision = wf+gbits+1;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);
    const static int w3 = w2+2*p2+1-(alpha2-1);
    const static int w4 = w3+2*p3+1-(alpha3-1);
    const static int w5 = w4+2*p4+1-(alpha4-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        ap_ufixed<(w3 < MaxPrecision-p3) ? w3 : (MaxPrecision-p3), -p3> z3;
        ap_ufixed<(w4 < MaxPrecision-p4) ? w4 : (MaxPrecision-p4), -p4> z4;
        ap_ufixed<(w5 < MaxPrecision-p5) ? w5 : (MaxPrecision-p5), -p5> z5;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        range_reduce<LOG_TYPE, p2, alpha2> (z2, logn, z3);
        log_sum += logn;
        range_reduce<LOG_TYPE, p3, alpha3> (z3, logn, z4);
        log_sum += logn;
        range_reduce<LOG_TYPE, p4, alpha4> (z4, logn, z5);
        log_sum += logn;
        return z5;
    }
};

template <>
class log_traits<6>{
public:
    const static int we = 6;
    const static int wf = 76;
    const static int org_wf = wf;

    const static int gbits = 4;
    const static int p_generic = p6;
    const static int MaxPrecision = wf+gbits+2;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);
    const static int w3 = w2+2*p2+1-(alpha2-1);
    const static int w4 = w3+2*p3+1-(alpha3-1);
    const static int w5 = w4+2*p4+1-(alpha4-1);
    const static int w6 = w5+2*p5+1-(alpha5-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        ap_ufixed<(w3 < MaxPrecision-p3) ? w3 : (MaxPrecision-p3), -p3> z3;
        ap_ufixed<(w4 < MaxPrecision-p4) ? w4 : (MaxPrecision-p4), -p4> z4;
        ap_ufixed<(w5 < MaxPrecision-p5) ? w5 : (MaxPrecision-p5), -p5> z5;
        ap_ufixed<(w6 < MaxPrecision-p6) ? w6 : (MaxPrecision-p6), -p6> z6;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        range_reduce<LOG_TYPE, p2, alpha2> (z2, logn, z3);
        log_sum += logn;
        range_reduce<LOG_TYPE, p3, alpha3> (z3, logn, z4);
        log_sum += logn;
        range_reduce<LOG_TYPE, p4, alpha4> (z4, logn, z5);
        log_sum += logn;
        range_reduce<LOG_TYPE, p5, alpha5> (z5, logn, z6);
        log_sum += logn;
        return z6;
    }
};

template <>
class log_traits<7>{
public:
    const static int we = 6;
    const static int wf = 91;
    const static int org_wf = wf;

    const static int gbits = 4;
    const static int p_generic = p7;
    const static int MaxPrecision = wf+gbits+2;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);
    const static int w3 = w2+2*p2+1-(alpha2-1);
    const static int w4 = w3+2*p3+1-(alpha3-1);
    const static int w5 = w4+2*p4+1-(alpha4-1);
    const static int w6 = w5+2*p5+1-(alpha5-1);
    const static int w7 = w6+2*p6+1-(alpha6-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        ap_ufixed<(w3 < MaxPrecision-p3) ? w3 : (MaxPrecision-p3), -p3> z3;
        ap_ufixed<(w4 < MaxPrecision-p4) ? w4 : (MaxPrecision-p4), -p4> z4;
        ap_ufixed<(w5 < MaxPrecision-p5) ? w5 : (MaxPrecision-p5), -p5> z5;
        ap_ufixed<(w6 < MaxPrecision-p6) ? w6 : (MaxPrecision-p6), -p6> z6;
        ap_ufixed<(w7 < MaxPrecision-p7) ? w7 : (MaxPrecision-p7), -p7> z7;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        range_reduce<LOG_TYPE, p2, alpha2> (z2, logn, z3);
        log_sum += logn;
        range_reduce<LOG_TYPE, p3, alpha3> (z3, logn, z4);
        log_sum += logn;
        range_reduce<LOG_TYPE, p4, alpha4> (z4, logn, z5);
        log_sum += logn;
        range_reduce<LOG_TYPE, p5, alpha5> (z5, logn, z6);
        log_sum += logn;
        range_reduce<LOG_TYPE, p6, alpha6> (z6, logn, z7);
        log_sum += logn;
        return z7;
    }
};

template <>
class log_traits<8>{
public:
    const static int we = 6;
    const static int wf = 106;
    const static int org_wf = wf;

    const static int gbits = 4;
    const static int p_generic = p8;
    const static int MaxPrecision = wf+gbits+2;
    typedef ap_fixed<1 + we + MaxPrecision, 1 + we > LOG_TYPE;

    const static int w1 = wf+1;
    const static int w2 = w1+2*p1+1-(alpha1-1);
    const static int w3 = w2+2*p2+1-(alpha2-1);
    const static int w4 = w3+2*p3+1-(alpha3-1);
    const static int w5 = w4+2*p4+1-(alpha4-1);
    const static int w6 = w5+2*p5+1-(alpha5-1);
    const static int w7 = w6+2*p6+1-(alpha6-1);
    const static int w8 = w7+2*p7+1-(alpha7-1);

    template <int size>
    static ap_ufixed<MaxPrecision-p_generic, -p_generic> range_reduction(ap_ufixed<size, -p1> z1, LOG_TYPE &log_sum) {
        ap_ufixed<(w2 < MaxPrecision-p2) ? w2 : (MaxPrecision-p2), -p2> z2;
        ap_ufixed<(w3 < MaxPrecision-p3) ? w3 : (MaxPrecision-p3), -p3> z3;
        ap_ufixed<(w4 < MaxPrecision-p4) ? w4 : (MaxPrecision-p4), -p4> z4;
        ap_ufixed<(w5 < MaxPrecision-p5) ? w5 : (MaxPrecision-p5), -p5> z5;
        ap_ufixed<(w6 < MaxPrecision-p6) ? w6 : (MaxPrecision-p6), -p6> z6;
        ap_ufixed<(w7 < MaxPrecision-p7) ? w7 : (MaxPrecision-p7), -p7> z7;
        ap_ufixed<(w8 < MaxPrecision-p8) ? w8 : (MaxPrecision-p8), -p8> z8;
        LOG_TYPE logn;

        range_reduce<LOG_TYPE, p1, alpha1> (z1, logn, z2);
        log_sum += logn;
        range_reduce<LOG_TYPE, p2, alpha2> (z2, logn, z3);
        log_sum += logn;
        range_reduce<LOG_TYPE, p3, alpha3> (z3, logn, z4);
        log_sum += logn;
        range_reduce<LOG_TYPE, p4, alpha4> (z4, logn, z5);
        log_sum += logn;
        range_reduce<LOG_TYPE, p5, alpha5> (z5, logn, z6);
        log_sum += logn;
        range_reduce<LOG_TYPE, p6, alpha6> (z6, logn, z7);
        log_sum += logn;
        range_reduce<LOG_TYPE, p7, alpha7> (z7, logn, z8);
        log_sum += logn;
        return z8;
    }
};
template<int W_, int I_>
ap_fixed<W_,I_> log(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline


 const static int F_ = W_ - I_;
_ssdm_SpecConstant(&F_);
# 503 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

    if (I_>34) return 0;
    else if (F_>100) return 0;


    ap_fixed<W_,I_> r = 0;
    ap_ufixed<W_-1,I_-1> x_s = x;

    if (F_==0) {
        if (I_<=7) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else r = 4;
        } else if (I_<=10) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else r = 6;
        } else if (I_<=13) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x299p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x710p0")) r = 7;
            else r = 8;
        } else if (I_<=17) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x299p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x710p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1332p0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x342fp0")) r = 9;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8ddbp0")) r = 10;
            else r = 11;
        } else if (I_<=19) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x299p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x710p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1332p0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x342fp0")) r = 9;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8ddbp0")) r = 10;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1819bp0")) r = 11;
            else r = 12;
        } else if (I_<=26) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x299p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x710p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1332p0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x342fp0")) r = 9;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8ddbp0")) r = 10;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1819bp0")) r = 11;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x41831p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb2148p0")) r = 13;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1e4127p0")) r = 14;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x523d82p0")) r = 15;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xdf8d5fp0")) r = 16;
            else r = 17;
        } else if (I_<=32) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x299p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x710p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1332p0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x342fp0")) r = 9;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8ddbp0")) r = 10;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1819bp0")) r = 11;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x41831p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb2148p0")) r = 13;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1e4127p0")) r = 14;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x523d82p0")) r = 15;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xdf8d5fp0")) r = 16;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x25fad90p0")) r = 17;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x673d70bp0")) r = 18;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x118a2aaep0")) r = 19;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2fad89e1p0")) r = 20;
            else r = 21;
        } else {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4p0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xcp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x21p0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5ap0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf4p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x299p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x710p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1332p0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x342fp0")) r = 9;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8ddbp0")) r = 10;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1819bp0")) r = 11;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x41831p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb2148p0")) r = 13;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1e4127p0")) r = 14;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x523d82p0")) r = 15;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xdf8d5fp0")) r = 16;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x25fad90p0")) r = 17;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x673d70bp0")) r = 18;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x118a2aaep0")) r = 19;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2fad89e1p0")) r = 20;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x819a1801p0")) r = 21;
            else r = 22;
        }
    } else if (F_<=4 && I_<=5) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.1p0")) r = "-0x2.cp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.2p0")) r = "-0x2.1p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.3p0")) r = "-0x1.bp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.4p0")) r = "-0x1.6p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.5p0")) r = "-0x1.3p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.6p0")) r = "-0x1p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.7p0")) r = "-0x0.dp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.8p0")) r = "-0x0.bp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.9p0")) r = "-0x0.9p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.ap0")) r = "-0x0.8p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.bp0")) r = "-0x0.6p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.cp0")) r = "-0x0.5p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.dp0")) r = "-0x0.3p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.ep0")) r = "-0x0.2p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.fp0")) r = "-0x0.1p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x1p0")) r = "0x0p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.1p0")) r = "0x0.1p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.2p0")) r = "0x0.2p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.3p0")) r = "0x0.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.5p0")) r = "0x0.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.6p0")) r = "0x0.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.8p0")) r = "0x0.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.9p0")) r = "0x0.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.bp0")) r = "0x0.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.cp0")) r = "0x0.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.ep0")) r = "0x0.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = "0x0.bp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.2p0")) r = "0x0.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.5p0")) r = "0x0.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.7p0")) r = "0x0.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.ap0")) r = "0x0.fp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.cp0")) r = "0x1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.fp0")) r = "0x1.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.2p0")) r = "0x1.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.6p0")) r = "0x1.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.9p0")) r = "0x1.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.dp0")) r = "0x1.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.1p0")) r = "0x1.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.5p0")) r = "0x1.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.9p0")) r = "0x1.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.ep0")) r = "0x1.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.3p0")) r = "0x1.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.9p0")) r = "0x1.bp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.ep0")) r = "0x1.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.5p0")) r = "0x1.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.bp0")) r = "0x1.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.2p0")) r = "0x1.fp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.9p0")) r = "0x2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.1p0")) r = "0x2.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.ap0")) r = "0x2.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.3p0")) r = "0x2.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.cp0")) r = "0x2.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xa.6p0")) r = "0x2.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb.1p0")) r = "0x2.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb.cp0")) r = "0x2.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc.9p0")) r = "0x2.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xd.6p0")) r = "0x2.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xe.3p0")) r = "0x2.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf.2p0")) r = "0x2.bp0";
            else r = "0x2.cp0";
    } else {

        if (x<=0) {r[W_-1] = 1;}
        else {


            const static int W_s_ = (F_+F_/77*2+12)/15-(100+F_)/133+(99+F_)/133-(100+F_)/118+(98+F_)/118+1;
_ssdm_SpecConstant(&W_s_);
# 706 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

# 716 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"
            const static int wf = log_traits<W_s_>::wf;
_ssdm_SpecConstant(&wf);
# 716 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int I_s= I_>0? I_:-I_;
_ssdm_SpecConstant(&I_s);
# 717 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int org_wf = log_traits<W_s_>::org_wf+I_s;
_ssdm_SpecConstant(&org_wf);
# 718 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int MaxPrecision = log_traits<W_s_>::MaxPrecision;
_ssdm_SpecConstant(&MaxPrecision);
# 719 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"





            ap_int<7> b_exp;
            ap_ufixed<1 + org_wf,1> b_frac=0;
            b_frac[org_wf] = 0;
            b_frac(org_wf-1,org_wf-W_+1) = x(W_-2,0);
#pragma unroll
 for (b_exp = I_-1; b_exp >= -F_; b_exp--) {
                if ((!b_frac[org_wf]&b_frac[org_wf-1]&b_frac[org_wf-2])|(b_frac[org_wf]&!b_frac[org_wf-1]))
                    break;
                b_frac <<= 1;
            }



            const ap_ufixed<MaxPrecision,0> LOG2 = "0x0.B17217F7D1CF79ABC9E3B39803p0";
            ap_fixed<MaxPrecision,6> Elog2 = LOG2 * b_exp;



            typedef typename log_traits<W_s_>::LOG_TYPE LOG_TYPE;
            const static int bypass_threshold = log_traits<W_s_>::p_generic;
_ssdm_SpecConstant(&bypass_threshold);
# 743 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"



            ap_uint<1+alpha0> index0;
            if (b_frac[org_wf]) index0 = b_frac(org_wf-1,org_wf-6);
            else index0 = b_frac(org_wf-2,org_wf-7);

            const int T0size = 1 << (1+alpha0);




            ap_ufixed<1 + alpha0, 1> b_frac_tilde_inverse = log_inverse_lut_table::array[index0];


            LOG_TYPE log_sum = log0_lut_table<LOG_TYPE,p0,alpha0,T0size>::array[index0];

            ap_ufixed<1 + org_wf+1+(1+alpha0), 1> b_frac1 = b_frac * b_frac_tilde_inverse;





            const int z1_width = 1+wf+1+(1+alpha0)-p1+1;
            ap_ufixed<z1_width, -p1> z1 = b_frac1;


            ap_fixed<1-bypass_threshold+1+MaxPrecision, -bypass_threshold+1> zk;
            zk = log_traits<W_s_>::range_reduction(z1,log_sum);


            ap_fixed<1-2*bypass_threshold+1+MaxPrecision, -bypass_threshold+1> zk_trunc = zk;
            LOG_TYPE sum = zk-(zk_trunc*zk_trunc/2);

            LOG_TYPE log_base;
            log_base = Elog2 + log_sum + sum;



            ap_fixed<2 + F_, 1> delta = 0;
            delta[delta.wl()-1] = log_base[log_base.wl()-1];
            delta[delta.wl()-delta.iwl()-1] = 1;
            log_base = log_base + ( delta >> F_ );

            r = log_base;
        }

    }

    return r;
}

template<int W_, int I_>
ap_ufixed<W_,I_> log(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return log(xf);
}

template<int I_>
ap_int<I_> log(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return log(xf);
}

template<int I_>
ap_uint<I_> log(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return log(xf);
}


template<int W_, int I_>
ap_fixed<W_,I_> log10(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline


 const static int F_ = W_ - I_;
_ssdm_SpecConstant(&F_);
# 820 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

    if (I_>33) return 0;
    else if (F_>32) return 0;


    ap_fixed<W_,I_> r = 0;
    ap_ufixed<W_-1,I_-1> x_s = x;

    if (F_==0) {
        if (I_<=9) {
            if (x<=0) {r[W_-1] = 1;}
            else {
                ap_ufixed<8,8> x_s_l = x_s;
                if (x_s_l(7,2)==0) r = 0;
                else if (x_s_l(7,5)==0) r = 1;
                else r = 2;
            }
        } else if (I_<=15) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1fp0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x13cp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc5ap0")) r = 3;
            else r = 4;
        } else if (I_<=19) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1fp0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x13cp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc5ap0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7b86p0")) r = 4;
            else r = 5;
        } else if (I_<=25) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1fp0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x13cp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc5ap0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7b86p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4d343p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3040a5p0")) r = 6;
            else r = 7;
        } else if (I_<=32) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1fp0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x13cp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc5ap0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7b86p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4d343p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3040a5p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1e28678p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x12d940b6p0")) r = 8;
            else r = 9;
        } else {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1fp0")) r = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x13cp0")) r = 2;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc5ap0")) r = 3;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7b86p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4d343p0")) r = 5;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3040a5p0")) r = 6;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1e28678p0")) r = 7;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x12d940b6p0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xbc7c871cp0")) r = 9;
            else r = 10;
        }
    } else if (F_<=4 && I_<=5) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.1p0")) r = "-0x1.3p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.2p0")) r = "-0x0.ep0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.3p0")) r = "-0x0.cp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.4p0")) r = "-0x0.ap0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.5p0")) r = "-0x0.8p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.6p0")) r = "-0x0.7p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.7p0")) r = "-0x0.6p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.8p0")) r = "-0x0.5p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.9p0")) r = "-0x0.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.bp0")) r = "-0x0.3p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.cp0")) r = "-0x0.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.ep0")) r = "-0x0.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.1p0")) r = "0x0p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.3p0")) r = "0x0.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.6p0")) r = "0x0.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.ap0")) r = "0x0.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.ep0")) r = "0x0.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.3p0")) r = "0x0.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.8p0")) r = "0x0.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.fp0")) r = "0x0.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.6p0")) r = "0x0.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.ep0")) r = "0x0.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.8p0")) r = "0x0.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.3p0")) r = "0x0.bp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6p0")) r = "0x0.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.fp0")) r = "0x0.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8p0")) r = "0x0.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.4p0")) r = "0x0.fp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xa.bp0")) r = "0x1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc.6p0")) r = "0x1.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xe.5p0")) r = "0x1.2p0";
            else r = "0x1.3p0";
    } else {

        if (x<=0) {r[W_-1] = 1;}
        else {
            const static int W_s_= (F_+F_/77*2+12)/15-(100+F_)/133+(99+F_)/133-(100+F_)/118+(98+F_)/118+1;
_ssdm_SpecConstant(&W_s_);
# 926 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"







            const static int wf = log_traits<W_s_>::wf;
_ssdm_SpecConstant(&wf);
# 933 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int I_s= I_>0? I_:-I_;
_ssdm_SpecConstant(&I_s);
# 934 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int org_wf = log_traits<W_s_>::org_wf+I_s;
_ssdm_SpecConstant(&org_wf);
# 935 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int MaxPrecision = log_traits<W_s_>::MaxPrecision;
_ssdm_SpecConstant(&MaxPrecision);
# 936 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"






            ap_int<7> b_exp=0;
            ap_ufixed<1 + org_wf,1> b_frac=0;
            b_frac[org_wf] = 0;
            b_frac(org_wf-1,org_wf-W_+1) = x(W_-2,0);
#pragma unroll
 for (b_exp = I_-1; b_exp >= -F_; b_exp--) {
                if ((!b_frac[org_wf]&b_frac[org_wf-1]&b_frac[org_wf-2])|(b_frac[org_wf]&!b_frac[org_wf-1]))
                    break;
                b_frac <<= 1;
            }

            const ap_ufixed<25,0> LOG1_35_s = 0.3010300099849700927734375;
            const ap_ufixed<43,0> LOG1_35_l = 0.30102999566395283181918784976006;
            ap_fixed<30,5> Elog2_s = LOG1_35_s * b_exp;
            ap_fixed<48,5> Elog2_l = LOG1_35_l * b_exp;


            typedef typename log_traits<W_s_>::LOG_TYPE LOG_TYPE;
            const static int bypass_threshold = log_traits<W_s_>::p_generic;
_ssdm_SpecConstant(&bypass_threshold);
# 960 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"


            ap_uint<1+alpha0> index0;
            if (b_frac[org_wf]) index0 = b_frac(org_wf-1,org_wf-6);
            else index0 = b_frac(org_wf-2,org_wf-7);

            const int T0size = 1 << (1+alpha0);




            ap_ufixed<1 + alpha0, 1> b_frac_tilde_inverse = log_inverse_lut_table::array[index0];

            LOG_TYPE log_sum = log0_lut_table<LOG_TYPE,p0,alpha0,T0size>::array[index0];

            ap_ufixed<1 + org_wf+1+(1+alpha0), 1> b_frac1 = b_frac * b_frac_tilde_inverse;




            const int z1_width = 1+wf+1+(1+alpha0)-p1+1;
            ap_ufixed<z1_width, -p1> z1 = b_frac1;

            ap_fixed<1-bypass_threshold+1+MaxPrecision, -bypass_threshold+1> zk;
            zk = log_traits<W_s_>::range_reduction(z1,log_sum);

            ap_fixed<1-2*bypass_threshold+1+MaxPrecision, -bypass_threshold+1> zk_trunc = zk;
            LOG_TYPE sum = zk-(zk_trunc*zk_trunc/2);

            LOG_TYPE log_base = log_sum + sum;

            const ap_ufixed<25,0> LOG1_54_s = 0.4342944920063018798828125;
            const ap_ufixed<43,0> LOG1_54_l = 0.43429448190329367207596078515053;

            if (F_<=16) log_base = Elog2_s + log_base * LOG1_54_s;
            else log_base = Elog2_l + log_base * LOG1_54_l;
# 1004 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"
            r = log_base;
        }

    }

    return r;
}

template<int W_, int I_>
ap_ufixed<W_,I_> log10(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return log10(xf);
}

template<int I_>
ap_int<I_> log10(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return log10(xf);
}

template<int I_>
ap_uint<I_> log10(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return log10(xf);
}

template<int W, int I>
ap_fixed<W,I> log1p(ap_fixed<W,I> x) {
    ap_ufixed<1,1> inc = 1;
    ap_fixed<W+1,I+1> xp1 = x + inc;
    return log(xp1);
}

template<int W, int I>
ap_ufixed<W,I> log1p(ap_ufixed<W,I> x) {
    ap_fixed<W+1,I+1> xf = x;
    return log1p(xf);
}

template<int I>
ap_int<I> log1p(ap_int<I> x) {
    ap_fixed<I,I> xf = x;
    return log1p(xf);
}

template<int I>
ap_uint<I> log1p(ap_uint<I> x) {
    ap_fixed<I+1,I+1> xf = x;
    return log1p(xf);
}

template<int W,int I>
ap_fixed<W,I> ilogb(ap_fixed<W,I> x) {
    int F = W - I;
    if(F>32 || I>33) {
        return 0;
    }
    ap_fixed<W+1,I+1> xf;
    if(x>0) {
        xf = x;
    }
    else {
        xf = -x;
    }
    return I + 1 - xf.countLeadingZeros() - 1;
}

template<int W,int I>
ap_ufixed<W,I> ilogb(ap_ufixed<W,I> x) {
    ap_fixed<W+1,I+1> xf = x;
    return ilogb(xf);
}

template<int I>
ap_int<I> ilogb(ap_int<I> x) {
    ap_fixed<I,I> xf = x;
    return ilogb(xf);
}

template<int I>
ap_uint<I> ilogb(ap_uint<I> x) {
    ap_fixed<I+1,I+1> xf = x;
    return ilogb(xf);
}


template<int W_, int I_>
ap_fixed<W_,I_> log2(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline


 const static int F_ = W_ - I_;
_ssdm_SpecConstant(&F_);
# 1096 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

    if (I_>33) return 0;
    else if (F_>32) return 0;


    ap_fixed<W_,I_> r = 0;
    ap_ufixed<W_-1,I_-1> x_s = x;

    if (F_==0) {
        if (I_<=5) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
            else r = 4;
  } else if (I_<=9) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
            else r = 8;
        } else if (I_<=13) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16Ap0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D4p0")) r = 9;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8p0")) r = 10;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB50p0")) r = 11;
            else r = 12;
  } else if (I_<=17) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16Ap0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D4p0")) r = 9;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8p0")) r = 10;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB50p0")) r = 11;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A0p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D41p0")) r = 13;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82p0")) r = 14;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504p0")) r = 15;
            else r = 16;
        } else if (I_<=21) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16Ap0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D4p0")) r = 9;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8p0")) r = 10;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB50p0")) r = 11;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A0p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D41p0")) r = 13;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82p0")) r = 14;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504p0")) r = 15;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09p0")) r = 16;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413p0")) r = 17;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A827p0")) r = 18;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504Fp0")) r = 19;
            else r = 20;
        } else if (I_<=25) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16Ap0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D4p0")) r = 9;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8p0")) r = 10;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB50p0")) r = 11;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A0p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D41p0")) r = 13;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82p0")) r = 14;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504p0")) r = 15;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09p0")) r = 16;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413p0")) r = 17;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A827p0")) r = 18;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504Fp0")) r = 19;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09Ep0")) r = 20;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413Cp0")) r = 21;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8279p0")) r = 22;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504F3p0")) r = 23;
            else r = 24;
        } else if (I_<=29) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16Ap0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D4p0")) r = 9;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8p0")) r = 10;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB50p0")) r = 11;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A0p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D41p0")) r = 13;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82p0")) r = 14;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504p0")) r = 15;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09p0")) r = 16;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413p0")) r = 17;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A827p0")) r = 18;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504Fp0")) r = 19;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09Ep0")) r = 20;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413Cp0")) r = 21;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8279p0")) r = 22;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504F3p0")) r = 23;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09E6p0")) r = 24;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413CCp0")) r = 25;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82799p0")) r = 26;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504F33p0")) r = 27;
            else r = 28;
        } else {
            if (x<=0) r[W_-1] = 1;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 0;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2p0")) r = 1;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5p0")) r = 2;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xBp0")) r = 3;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16p0")) r = 4;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2Dp0")) r = 5;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5Ap0")) r = 6;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB5p0")) r = 7;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16Ap0")) r = 8;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D4p0")) r = 9;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8p0")) r = 10;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB50p0")) r = 11;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A0p0")) r = 12;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D41p0")) r = 13;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82p0")) r = 14;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504p0")) r = 15;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09p0")) r = 16;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413p0")) r = 17;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A827p0")) r = 18;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504Fp0")) r = 19;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09Ep0")) r = 20;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413Cp0")) r = 21;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A8279p0")) r = 22;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504F3p0")) r = 23;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09E6p0")) r = 24;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413CCp0")) r = 25;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A82799p0")) r = 26;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504F33p0")) r = 27;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x16A09E66p0")) r = 28;
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2D413CCCp0")) r = 29;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5A827999p0")) r = 30;
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB504F333p0")) r = 31;
            else r = 32;
        }
    } else if (F_<=4 && I_<=5) {
            if (x<=0) r[W_-1] = 1;
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.1p0")) r = "-0x4.0p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.2p0")) r = "-0x3.0p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.3p0")) r = "-0x2.7p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.4p0")) r = "-0x2.0p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.5p0")) r = "-0x1.Bp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.6p0")) r = "-0x1.7p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.7p0")) r = "-0x1.3p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.8p0")) r = "-0x1.0p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.9p0")) r = "-0x0.Dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.Ap0")) r = "-0x0.Bp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.Bp0")) r = "-0x0.9p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.Cp0")) r = "-0x0.7p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.Dp0")) r = "-0x0.5p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.Ep0")) r = "-0x0.3p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.Fp0")) r = "-0x0.1p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.0p0")) r = "0x0.0p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.1p0")) r = "0x0.1p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.2p0")) r = "0x0.3p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.3p0")) r = "0x0.4p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.4p0")) r = "0x0.5p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.5p0")) r = "0x0.6p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.6p0")) r = "0x0.7p0";
   else if (x_s==ap_ufixed<W_-1,I_-1>("0x1.7p0")) r = "0x0.8p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.8p0")) r = "0x0.9p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.9p0")) r = "0x0.Ap0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.Ap0")) r = "0x0.Bp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.Bp0")) r = "0x0.Cp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.Cp0")) r = "0x0.Dp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.Dp0")) r = "0x0.Ep0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.Fp0")) r = "0x0.Fp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.0p0")) r = "0x1.0p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.2p0")) r = "0x1.1p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.3p0")) r = "0x1.2p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.5p0")) r = "0x1.3p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.6p0")) r = "0x1.4p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.8p0")) r = "0x1.5p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.Ap0")) r = "0x1.6p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.Cp0")) r = "0x1.7p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.Ep0")) r = "0x1.8p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.0p0")) r = "0x1.9p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.2p0")) r = "0x1.Ap0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.4p0")) r = "0x1.Bp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.6p0")) r = "0x1.Cp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.9p0")) r = "0x1.Dp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.Bp0")) r = "0x1.Ep0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.Ep0")) r = "0x1.Fp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.1p0")) r = "0x2.0p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.4p0")) r = "0x2.1p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.7p0")) r = "0x2.2p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.Ap0")) r = "0x2.3p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.Dp0")) r = "0x2.4p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.1p0")) r = "0x2.5p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.4p0")) r = "0x2.6p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.8p0")) r = "0x2.7p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.Cp0")) r = "0x2.8p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.0p0")) r = "0x2.9p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.4p0")) r = "0x2.Ap0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.9p0")) r = "0x2.Bp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.Dp0")) r = "0x2.Cp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.2p0")) r = "0x2.Dp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.7p0")) r = "0x2.Ep0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.Dp0")) r = "0x2.Fp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.2p0")) r = "0x3.0p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.8p0")) r = "0x3.1p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.Ep0")) r = "0x3.2p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.4p0")) r = "0x3.3p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.Bp0")) r = "0x3.4p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xA.2p0")) r = "0x3.5p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xA.9p0")) r = "0x3.6p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB.1p0")) r = "0x3.7p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xB.8p0")) r = "0x3.8p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xC.1p0")) r = "0x3.9p0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xC.9p0")) r = "0x3.Ap0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xD.2p0")) r = "0x3.Bp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xD.Bp0")) r = "0x3.Cp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xE.5p0")) r = "0x3.Dp0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xE.Fp0")) r = "0x3.Ep0";
   else if (x_s<=ap_ufixed<W_-1,I_-1>("0xF.Ap0")) r = "0x3.Fp0";
            else r = "0x4.0p0";
    } else {

        if (x<=0) {r[W_-1] = 1;}
        else {
            const static int W_s_= (F_+F_/77*2+12)/15-(100+F_)/133+(99+F_)/133-(100+F_)/118+(98+F_)/118+1;
_ssdm_SpecConstant(&W_s_);
# 1359 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"


            const static int wf = log_traits<W_s_>::wf;
_ssdm_SpecConstant(&wf);
# 1361 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int I_s= I_>0? I_:-I_;
_ssdm_SpecConstant(&I_s);
# 1362 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int org_wf = log_traits<W_s_>::org_wf+I_s;
_ssdm_SpecConstant(&org_wf);
# 1363 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"

            const static int MaxPrecision = log_traits<W_s_>::MaxPrecision;
_ssdm_SpecConstant(&MaxPrecision);
# 1364 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"


            ap_int<7> b_exp=0;
            ap_ufixed<1 + org_wf,1> b_frac=0;
            b_frac[org_wf] = 0;
            b_frac(org_wf-1,org_wf-W_+1) = x(W_-2,0);
#pragma unroll
 for (b_exp = I_-1; b_exp >= -F_; b_exp--) {
                if ((!b_frac[org_wf]&b_frac[org_wf-1]&b_frac[org_wf-2])|(b_frac[org_wf]&!b_frac[org_wf-1]))
                    break;
                b_frac <<= 1;
            }

            ap_fixed<30,5> Elog2_s = b_exp;
            ap_fixed<48,5> Elog2_l = b_exp;


            typedef typename log_traits<W_s_>::LOG_TYPE LOG_TYPE;
            const static int bypass_threshold = log_traits<W_s_>::p_generic;
_ssdm_SpecConstant(&bypass_threshold);
# 1382 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_log_apfixed.h"


            ap_uint<1+alpha0> index0;
            if (b_frac[org_wf]) index0 = b_frac(org_wf-1,org_wf-6);
            else index0 = b_frac(org_wf-2,org_wf-7);

            const int T0size = 1 << (1+alpha0);




            ap_ufixed<1 + alpha0, 1> b_frac_tilde_inverse = log_inverse_lut_table::array[index0];

            LOG_TYPE log_sum = log0_lut_table<LOG_TYPE,p0,alpha0,T0size>::array[index0];

            ap_ufixed<1 + org_wf+1+(1+alpha0), 1> b_frac1 = b_frac * b_frac_tilde_inverse;




            const int z1_width = 1+wf+1+(1+alpha0)-p1+1;
            ap_ufixed<z1_width, -p1> z1 = b_frac1;

            ap_fixed<1-bypass_threshold+1+MaxPrecision, -bypass_threshold+1> zk;
            zk = log_traits<W_s_>::range_reduction(z1,log_sum);

            ap_fixed<1-2*bypass_threshold+1+MaxPrecision, -bypass_threshold+1> zk_trunc = zk;
            LOG_TYPE sum = zk-(zk_trunc*zk_trunc/2);

            LOG_TYPE log_base = log_sum + sum;

            const ap_ufixed<26,1> LOG1_54_s = "0x1.7154765p0";
            const ap_ufixed<44,1> LOG1_54_l = "0x1.71547652B82Fp0";

            if (F_<=16) log_base = Elog2_s + log_base * LOG1_54_s;
            else log_base = Elog2_l + log_base * LOG1_54_l;



            r = log_base;
        }

    }

    return r;
}

template<int W_, int I_>
ap_ufixed<W_,I_> log2(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return log2(xf);
}

template<int I_>
ap_int<I_> log2(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return log2(xf);
}

template<int I_>
ap_uint<I_> log2(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return log2(xf);
}

template<int W_, int I_>
ap_fixed<W_,I_> logb(ap_fixed<W_,I_> x) {
 return log2(x);
}

template<int W_, int I_>
ap_ufixed<W_,I_> logb(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return logb(xf);
}

template<int I_>
ap_int<I_> logb(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return logb(xf);
}

template<int I_>
ap_uint<I_> logb(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return logb(xf);
}

}
# 1022 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h" 1
# 34 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h" 2






template <int W_, int I_>
ap_fixed<W_,I_> sqrt_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline


 const int F_ = W_ - I_;
    if (I_>34) return 0;
    else if (F_>32) return 0;


    ap_ufixed<F_+(I_+1)/2,(I_+1)/2> r;
    ap_ufixed<W_-1,I_-1> x_s = x;

    if ((F_==0)&&(I_==2)) {
            r = x_s;
    } else if ((F_==0)&&(I_<=13)) {
        ap_ufixed<W_,I_> x_s_l = x_s + 1;
        ap_ufixed<W_-1,I_-1> x_s_1;
        x_s_1(W_-2,0) = x_s_l(W_-1,1);
        if (I_<=8) {
            if (x_s_1==ap_ufixed<W_-1,I_-1>("0x0p0")) r = 0;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1p0")) r = 1;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 2;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x6p0")) r = 3;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xap0")) r = 4;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xfp0")) r = 5;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x15p0")) r = 6;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1cp0")) r = 7;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x24p0")) r = 8;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x2dp0")) r = 9;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x37p0")) r = 10;
            else r = 11;
        } else if (I_<=9) {
            if (x_s_1==ap_ufixed<W_-1,I_-1>("0x0p0")) r = 0;
            else if (x_s_1==ap_ufixed<W_-1,I_-1>("0x1p0")) r = 1;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 2;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x6p0")) r = 3;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xap0")) r = 4;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xfp0")) r = 5;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x15p0")) r = 6;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1cp0")) r = 7;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x24p0")) r = 8;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x2dp0")) r = 9;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x37p0")) r = 10;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x42p0")) r = 11;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x4ep0")) r = 12;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x5bp0")) r = 13;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x69p0")) r = 14;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x78p0")) r = 15;
            else r = 16;
        } else {
            if (x_s_1==ap_ufixed<W_-1,I_-1>("0x0p0")) r = 0;
            else if (x_s_1==ap_ufixed<W_-1,I_-1>("0x1p0")) r = 1;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x3p0")) r = 2;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x6p0")) r = 3;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xap0")) r = 4;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xfp0")) r = 5;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x15p0")) r = 6;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1cp0")) r = 7;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x24p0")) r = 8;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x2dp0")) r = 9;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x37p0")) r = 10;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x42p0")) r = 11;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x4ep0")) r = 12;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x5bp0")) r = 13;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x69p0")) r = 14;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x78p0")) r = 15;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x88p0")) r = 16;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x99p0")) r = 17;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xabp0")) r = 18;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xbep0")) r = 19;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xd2p0")) r = 20;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xe7p0")) r = 21;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0xfdp0")) r = 22;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x114p0")) r = 23;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x12cp0")) r = 24;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x145p0")) r = 25;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x15fp0")) r = 26;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x17ap0")) r = 27;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x196p0")) r = 28;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1b3p0")) r = 29;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1d1p0")) r = 30;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x1f0p0")) r = 31;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x210p0")) r = 32;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x231p0")) r = 33;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x253p0")) r = 34;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x276p0")) r = 35;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x29ap0")) r = 36;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x2bfp0")) r = 37;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x2e5p0")) r = 38;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x30cp0")) r = 39;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x334p0")) r = 40;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x35dp0")) r = 41;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x387p0")) r = 42;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x3b2p0")) r = 43;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x3dep0")) r = 44;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x40bp0")) r = 45;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x439p0")) r = 46;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x468p0")) r = 47;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x498p0")) r = 48;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x4c9p0")) r = 49;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x4fbp0")) r = 50;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x52ep0")) r = 51;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x562p0")) r = 52;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x597p0")) r = 53;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x5cdp0")) r = 54;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x604p0")) r = 55;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x63cp0")) r = 56;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x675p0")) r = 57;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x6afp0")) r = 58;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x6eap0")) r = 59;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x726p0")) r = 60;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x763p0")) r = 61;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x7a1p0")) r = 62;
            else if (x_s_1<=ap_ufixed<W_-1,I_-1>("0x7e0p0")) r = 63;
            else r = 64;
        }
    } else if (F_<=4 && I_<=5) {
            if (x_s==ap_ufixed<W_-1,I_-1>("0x0.0p0")) r = "0x0.0p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.1p0")) r = "0x0.4p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.2p0")) r = "0x0.6p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.3p0")) r = "0x0.7p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.4p0")) r = "0x0.8p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.5p0")) r = "0x0.9p0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.6p0")) r = "0x0.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.8p0")) r = "0x0.bp0";
            else if (x_s==ap_ufixed<W_-1,I_-1>("0x0.9p0")) r = "0x0.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.bp0")) r = "0x0.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.dp0")) r = "0x0.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x0.fp0")) r = "0x0.fp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.1p0")) r = "0x1.0p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.3p0")) r = "0x1.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.5p0")) r = "0x1.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.7p0")) r = "0x1.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.ap0")) r = "0x1.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.cp0")) r = "0x1.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x1.fp0")) r = "0x1.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.2p0")) r = "0x1.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.5p0")) r = "0x1.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.8p0")) r = "0x1.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.bp0")) r = "0x1.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x2.fp0")) r = "0x1.bp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.2p0")) r = "0x1.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.6p0")) r = "0x1.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.ap0")) r = "0x1.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x3.ep0")) r = "0x1.fp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.2p0")) r = "0x2.0p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.6p0")) r = "0x2.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.ap0")) r = "0x2.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x4.ep0")) r = "0x2.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.3p0")) r = "0x2.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.7p0")) r = "0x2.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x5.cp0")) r = "0x2.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.1p0")) r = "0x2.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.6p0")) r = "0x2.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x6.bp0")) r = "0x2.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.0p0")) r = "0x2.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.6p0")) r = "0x2.bp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x7.bp0")) r = "0x2.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.1p0")) r = "0x2.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.7p0")) r = "0x2.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x8.dp0")) r = "0x2.fp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.3p0")) r = "0x3.0p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.9p0")) r = "0x3.1p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0x9.fp0")) r = "0x3.2p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xa.5p0")) r = "0x3.3p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xa.cp0")) r = "0x3.4p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb.2p0")) r = "0x3.5p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xb.9p0")) r = "0x3.6p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc.0p0")) r = "0x3.7p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc.7p0")) r = "0x3.8p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xc.ep0")) r = "0x3.9p0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xd.5p0")) r = "0x3.ap0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xd.dp0")) r = "0x3.bp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xe.4p0")) r = "0x3.cp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xe.cp0")) r = "0x3.dp0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf.4p0")) r = "0x3.ep0";
            else if (x_s<=ap_ufixed<W_-1,I_-1>("0xf.cp0")) r = "0x3.fp0";
            else r = "0x4.0p0";
    } else {

        if (x[W_-1]) return 0;
        if (I_<=0) {
            const static int lsbx = (-I_+2<=W_) ? (W_+I_-2) : 0;
_ssdm_SpecConstant(&lsbx);
# 225 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"

            if ( x(W_-1,lsbx) != 0 ) return 0;
        }

        const static int prcs = (F_+1)*2;
_ssdm_SpecConstant(&prcs);
# 229 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"

        const static int msbr = (I_>0) ? (I_+1)/2 : 1;
_ssdm_SpecConstant(&msbr);
# 230 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"

        const static int msbx = (I_>0) ? I_+3 : 4;
_ssdm_SpecConstant(&msbx);
# 231 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"

        const static int msbm = (I_>0) ? I_+1 : 2;
_ssdm_SpecConstant(&msbm);
# 232 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"



        ap_ufixed<msbx , msbx> x_l_I = x;
        ap_ufixed< prcs/2, 0> x_l_FH = x;
        ap_ufixed< prcs/2, -prcs/2> x_l_FL = 0;
        ap_ufixed<msbr + prcs , msbr> res = 0;
        ap_ufixed<msbr , msbr> res_I = 0;
        ap_ufixed< prcs/2, 0> res_FH = 0;
# 265 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_sqrt_apfixed.h"
    if (I_>0)
#pragma unroll
 for ( int pos = msbr-1; pos >= 0; pos-- ) {
            ap_ufixed<msbm , msbm> mul_I = 0;



            mul_I ( msbr+pos , pos*2+1 ) = res_I ( msbr-1 , pos );



            mul_I [ pos*2 ] = 1;




            if ( x_l_I ( msbr+pos+1 , pos*2 ) >= mul_I ( msbr+pos , pos*2 ) ) {



                ap_ufixed<msbx,msbx> x_l_I_ = x_l_I;
                x_l_I ( msbr+pos+1 , pos*2 ) = x_l_I ( msbr+pos+1 , pos*2 ) - mul_I ( msbr+pos , pos*2 );




                res_I [ pos ] = 1;
            }
        }
#pragma unroll
 for ( int pos = -1; pos >= -F_-1; pos-- ) {
            ap_ufixed<msbm + prcs , msbm> mul = 0;




            mul ( msbr+pos + prcs , pos +1 + prcs ) = res_I ( msbr-1 , 0 );
            mul ( pos + prcs , pos*2+1 + prcs ) = res_FH ( -1+prcs/2 , pos+prcs/2 );



            mul [ pos*2 + prcs ] = 1;
            ap_ufixed<msbm , msbm> mul_I = mul;
            ap_ufixed< prcs/2, 0> mul_FH = mul;
            ap_ufixed< prcs/2, -prcs/2> mul_FL = mul;

            ap_ufixed<msbx + prcs , msbx> x_l;
            x_l ( -1+msbx + prcs , prcs ) = x_l_I ( -1+msbx , 0 );
            x_l ( -1 + prcs , prcs/2 ) = x_l_FH ( -1+prcs/2 , 0 );
            x_l ( -1 + prcs/2 , 0 ) = x_l_FL ( -1+prcs/2 , 0 );



            if ( (x_l_I>mul_I) || ((x_l_I==mul_I)&&(x_l_FH>mul_FH)) || ((x_l_I==mul_I)&&(x_l_FH==mul_FH)&&(x_l_FL>=mul_FL)) ) {




                ap_ufixed< prcs/2+1 , -prcs/2+1 > x_l_FL_l = x_l_FL;
                if ( x_l_FL < mul_FL ) x_l_FL_l[prcs/2] = 1;
                                                  x_l_FL_l -= mul_FL;




                ap_ufixed< prcs/2+1 , 1 > x_l_FH_l = x_l_FH;
                if ( (x_l_FH<mul_FH)||((x_l_FH==mul_FH)&&(x_l_FL<mul_FL)) ) x_l_FH_l[prcs/2] = 1;
                ap_ufixed< 1 , -prcs/2+1 > delta = 0;
                if ( x_l_FL < mul_FL ) delta[0] = 1;
                                                                             x_l_FH_l -= delta;
                                                                             x_l_FH_l -= mul_FH;



                if ( (x_l_FH<mul_FH)||((x_l_FH==mul_FH)&&(x_l_FL<mul_FL)) ) x_l_I --;
                                                                             x_l_I -= mul_I;

                                                                             x_l_FH = x_l_FH_l;
                                                                             x_l_FL = x_l_FL_l;

                ap_ufixed<msbx + prcs , msbx> x_l_ = x_l;
                x_l ( -1+msbx + prcs , prcs ) = x_l_I ( -1+msbx , 0 );
                x_l ( -1 + prcs , prcs/2 ) = x_l_FH ( -1+prcs/2 , 0 );
                x_l ( -1 + prcs/2 , 0 ) = x_l_FL ( -1+prcs/2 , 0 );



                res_FH [ pos+prcs/2 ] = 1;
            }
        }



        ap_ufixed< prcs/2+1 , 1 > res_FH_l = res_FH;
        ap_ufixed< prcs/2 , 0 > delta;
                                  delta[delta.wl()-1] = 1;
                                  res_FH_l += ( delta >> F_ );
                                  res_FH = res_FH_l;
        if (res_FH_l[prcs/2]) res_I ++;

        res ( msbr-1 + prcs , prcs ) = res_I ( msbr-1 , 0 );
        res ( -1 + prcs , prcs/2 ) = res_FH ( -1+prcs/2 , 0 );

        r = res;
    }

    return r;
}
template<int W_, int I_>
ap_ufixed<W_,I_> sqrt_fixed(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return sqrt_fixed(xf);
}
template<int I_>
ap_int<I_> sqrt_fixed(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return sqrt_fixed(xf);
}
template<int I_>
ap_uint<I_> sqrt_fixed(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return sqrt_fixed(xf);
}


template <int W_, int I_>
ap_fixed<W_,I_> rsqrt_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline
 ap_ufixed<W_-1,I_-1> xs = x;
    const int Ix = ( I_ > 1 )? I_-1 : 1;
    ap_ufixed<Ix,Ix> xs_I = xs;
    ap_ufixed<W_-1,I_-1> r;
    const int I = ( I_-1 > W_-I_+1 ) ? I_-1 : W_-I_+1;
    ap_ufixed<I+W_-I_,I> y1;
    ap_ufixed<I+W_-I_,I> y2;
    if ( xs == 0 ) {
        return 0;
    } else if ( xs_I != 0 ) {
        y1 = xs;
    } else {
        y1 = 1;
        y1 = y1/xs;
    }
    y2 = sqrt_fixed(y1);
    if ( y2 == 0 ) {
        return 0;
    } else if ( xs_I != 0 ) {
        r = 1;
        r = r/y2;
    } else {
        r = y2;
    }
    return r;
}
template<int W_, int I_>
ap_ufixed<W_,I_> rsqrt_fixed(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return rsqrt_fixed(xf);
}
template<int I_>
ap_int<I_> rsqrt_fixed(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return rsqrt_fixed(xf);
}
template<int I_>
ap_uint<I_> rsqrt_fixed(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return rsqrt_fixed(xf);
}


template<int W_, int I_>
ap_fixed<W_,I_> recip_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline
 if ( x == 0 ) return 0;
    ap_fixed<W_,I_> r = 1;
    return r/x;
}
template<int W_, int I_>
ap_ufixed<W_,I_> recip_fixed(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xf = x;
    return recip_fixed(xf);
}
template<int I_>
ap_int<I_> recip_fixed(ap_int<I_> x) {
    ap_fixed<I_,I_> xf = x;
    return recip_fixed(xf);
}
template<int I_>
ap_uint<I_> recip_fixed(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xf = x;
    return recip_fixed(xf);
}
# 1023 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_round_copysign_apfixed.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_round_copysign_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_round_copysign_apfixed.h" 2

template <int W_, int I_>
ap_fixed<W_,I_> ceil_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline
 if(W_ == I_) {
        return x;
    } else {
        if(I_<0) return 0;
        else {
           if ( x(W_-I_-1,0) != 0 ) {
               x(W_-I_-1,0) = 0;
               x += 1;
           }
           return x;
        }
    }
}
template <int W_, int I_>
ap_ufixed<W_,I_> ceil_fixed(ap_ufixed<W_,I_> x)
{
#pragma HLS pipeline
 if(W_ == I_) {
        return x;
    }
    else {
        if(I_ < 0) return 0;
        else {
           if ( x(W_-I_-1,0) != 0 ) {
               x(W_-I_-1,0) = 0;
               x += 1;
           }
           return x;
        }
    }
}
template <int I_>
ap_int<I_> ceil_fixed(ap_int<I_> x)
{
    return x;
}
template <int I_>
ap_uint<I_> ceil_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> floor_fixed(ap_fixed<W_,I_> x)
{
    if(W_ == I_) {
        return x;
    }
    else {
        if(I_<0) return 0;
        else {
            if ( x(W_-I_-1,0) != 0 ) x(W_-I_-1,0) = 0;
            return x;
        }
    }
}
template <int W_, int I_>
ap_ufixed<W_,I_> floor_fixed(ap_ufixed<W_,I_> x)
{
    ap_fixed<W_+1,I_+1> xi = x;
    return floor_fixed(xi);
}
template <int I_>
ap_int<I_> floor_fixed(ap_int<I_> x)
{
    return x;
}
template <int I_>
ap_uint<I_> floor_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> trunc_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline
 if(W_ == I_) {
        return x;
    }
    else {
        if(I_<0) return 0;
        else {
            if ( x(W_-I_-1,0) != 0 ) {
                x(W_-I_-1,0) = 0;
                if ( x[W_-1] )
                    x += 1;
            }
            return x;
        }
    }
}
template <int W_, int I_>
ap_ufixed<W_,I_> trunc_fixed(ap_ufixed<W_,I_> x)
{
    ap_fixed<W_+1,I_+1> xi = x;
    return trunc_fixed(xi);
}
template <int I_>
ap_int<I_> trunc_fixed(ap_int<I_> x)
{
    return x;
}
template <int I_>
ap_uint<I_> trunc_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> copysign_fixed(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y)
{
    x[W_-1] = y[W_-1];
    return x;
}
template <int W_, int I_>
ap_ufixed<W_,I_> copysign_fixed(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y)
{
    return x;
}
template <int I_>
ap_int<I_> copysign_fixed(ap_int<I_> x, ap_int<I_> y)
{
    x[I_-1] = y[I_-1];
    return x;
}
template <int I_>
ap_uint<I_> copysign_fixed(ap_uint<I_> x, ap_uint<I_> y)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> fabs_fixed(ap_fixed<W_,I_> x)
{
    ap_fixed<W_,I_> xs = -x;
                    xs[W_-1] = 0;
    return ( ( x[W_-1] ) ? xs : x );
}
template <int W_, int I_>
ap_ufixed<W_,I_> fabs_fixed(ap_ufixed<W_,I_> x)
{
    return x;
}
template <int I_>
ap_int<I_> fabs_fixed(ap_int<I_> x)
{
    ap_int<I_> xs = -x;
               xs[I_-1] = 0;
    return ( ( x[I_-1] ) ? xs : x );
}
template <int I_>
ap_uint<I_> fabs_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> round_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline
 if(W_ == I_) {
        return x;
    }
    else {
        if(I_<0) return 0;
        else {
            ap_ufixed<1, 0> half_val = 0.5;
            ap_ufixed<W_,I_> x_pos = fabs_fixed(x);
            ap_ufixed<W_+1,I_+1> r = x_pos + half_val;
            r(W_-I_-1,0) = 0;
            if(x[W_-1]) return -r;
            else return r;
        }
    }
}
template <int W_, int I_>
ap_ufixed<W_,I_> round_fixed(ap_ufixed<W_,I_> x)
{
    ap_fixed<W_+1,I_+1> xi = x;
    return round_fixed(xi);
}
template <int I_>
ap_int<I_> round_fixed(ap_int<I_> x)
{
    return x;
}
template <int I_>
ap_uint<I_> round_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> rint_fixed(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline
 if(W_ == I_) {
        return x;
    }
    else {
        if(I_<0) return 0;
        else {
            ap_ufixed<W_, I_> x_p = fabs_fixed((ap_fixed<W_+1,I_+1>)x);
            ap_ufixed<1,0> half_val = 0.5;
            ap_ufixed<W_+1,I_+1> xUp = x_p + half_val;

            if(xUp(W_-I_-1,0) == 0) {

               xUp[W_-I_] = 0;
            } else {
               xUp(W_-I_-1,0) = 0;
            }
            if(x[W_-1]) return -xUp;
            else return xUp;
        }
# 287 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_round_copysign_apfixed.h"
    }
}
template <int W_, int I_>
ap_ufixed<W_,I_> rint_fixed(ap_ufixed<W_,I_> x)
{
   ap_fixed<W_+1, I_+1> xi = x;
   return rint_fixed(xi);
}
template <int I_>
ap_int<I_> rint_fixed(ap_int<I_> x)
{
    return x;
}
template <int I_>
ap_uint<I_> rint_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
ap_fixed<W_,I_> nearbyint_fixed(ap_fixed<W_,I_> x)
{

    return rint_fixed(x);
}
template <int W_, int I_>
ap_ufixed<W_,I_> nearbyint_fixed(ap_ufixed<W_,I_> x)
{
    ap_fixed<W_+1,I_+1> xi = x;
    return nearbyint_fixed(xi);
}
template <int I_>
ap_int<I_> nearbyint_fixed(ap_int<I_> x)
{
    return x;
}
template <int I_>
ap_uint<I_> nearbyint_fixed(ap_uint<I_> x)
{
    return x;
}

template <int W_, int I_>
bool signbit_fixed(ap_fixed<W_, I_> x){
    if(x[W_-1]) return true;
    else return false;
}
template <int W_, int I_>
bool signbit_fixed(ap_ufixed<W_, I_> x){
    return false;
}

template <int I_>
bool signbit_fixed(ap_int<I_> x){
    if(x[I_-1]) return true;
    else return false;
}

template <int I_>
bool signbit_fixed(ap_uint<I_> x){
    return false;
}
namespace fp_internal {
  template<int W, int I>
  ap_fixed<W, I> nextafter(ap_fixed<W, I> x, ap_fixed<W, I> y){
     const static int F = W - I;
_ssdm_SpecConstant(&F);
# 352 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_round_copysign_apfixed.h"

     ap_ufixed<1, -F+1> ulp = 0;
     ulp[0] = 1;
     ap_fixed<W, I> r = 0;
     if(x == y) r = y;
     else if(x < y) r = x + ulp;
     else r = x - ulp;
     return r;
  }
  template<int W, int I>
  ap_ufixed<W, I> nextafter(ap_ufixed<W, I> x, ap_ufixed<W, I> y) {
     ap_fixed<W+1, I+1> xi = x;
     ap_fixed<W+1, I+1> yi = y;
     return nextafter(xi, yi);

  }
  template<int I>
  ap_int<I> nextafter(ap_int<I> x, ap_int<I> y) {
     ap_fixed<I, I> xi = x;
     ap_fixed<I, I> yi = y;
     return nextafter(xi, yi);
  }
  template<int I>
  ap_uint<I> nextafter(ap_uint<I> x, ap_uint<I> y) {
     ap_fixed<I+1, I+1> xi = x;
     ap_fixed<I+1, I+1> yi = y;
     return nextafter(xi, yi);
  }
  template<int W, int I>
  ap_fixed<W, I> nexttoward(ap_fixed<W, I> x, ap_fixed<W, I> y){
     return nextafter(x,y);
  }
  template<int W, int I>
  ap_ufixed<W, I> nexttoward(ap_ufixed<W, I> x, ap_ufixed<W, I> y){
     return nextafter(x,y);
  }
  template<int I>
  ap_int<I> nexttoward(ap_int<I> x, ap_int<I> y){
     return nextafter(x,y);
  }
  template<int I>
  ap_uint<I> nexttoward(ap_uint<I> x, ap_uint<I> y){
     return nextafter(x,y);
  }
}


template <int W, int I>
long long int llround_fixed(ap_fixed<W,I> x){
    return round_fixed<W+1,I+1>(ap_fixed<W+1,I+1> (x));
}


template <int W, int I>
long long int llround_fixed(ap_ufixed<W,I> x){
    return round_fixed<W+1,I+1>(ap_ufixed<W+1,I+1> (x));
}


template <int I>
long long int llround_fixed(ap_int<I> x){
    return x;
}


template <int I>
long long int llround_fixed(ap_uint<I> x){
    return x;
}


template <int W, int I>
long int lround_fixed(ap_fixed<W,I> x){
    ap_int<8*sizeof(long int)> minval = 0;
    minval[8*sizeof(long int)-1] = 1;
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if((x>maxval) || (x<minval)) {
        return (x[W-1])? minval : maxval;
    }
    else {
        return round_fixed<W+1,I+1>(ap_fixed<W+1,I+1> (x));
    }
}


template <int W, int I>
long int lround_fixed(ap_ufixed<W,I> x){
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if((x>maxval) ) {
        return maxval;
    }
    else {
        return round_fixed<W+1,I+1>(ap_ufixed<W+1,I+1> (x));
    }
}


template <int I>
long int lround_fixed(ap_int<I> x){
    ap_int<8*sizeof(long int)> minval = 0;
    minval[8*sizeof(long int)-1] = 1;
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if((x>maxval) || (x<minval)) {
        return (x[I-1])? minval : maxval;
    }
    else {
        return x;
    }
}


template <int I>
long int lround_fixed(ap_uint<I> x){
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if((x>maxval) ) {
        return maxval;
    }
    else {
        return x;
    }
}


template <int W, int I>
long long int llrint_fixed(ap_fixed<W,I> x){
    return rint_fixed<W+1,I+1>(ap_fixed<W+1,I+1> (x));
}


template <int W, int I>
long long int llrint_fixed(ap_ufixed<W,I> x){
    return rint_fixed<W+1,I+1>(ap_ufixed<W+1,I+1> (x));
}


template <int I>
long long int llrint_fixed(ap_int<I> x){
    return x;
}


template <int I>
long long int llrint_fixed(ap_uint<I> x){
    return x;
}


template <int W, int I>
long int lrint_fixed(ap_fixed<W,I> x){
    ap_int<8*sizeof(long int)> minval = 0;
    minval[8*sizeof(long int)-1] = 1;
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if((x>maxval) || (x<minval)) {
        return (x[W-1])? minval : maxval;
    }
    else {
        return rint_fixed<W+1, I+1>(ap_fixed<W+1,I+1> (x));
    }
}



template <int W, int I>
long int lrint_fixed(ap_ufixed<W,I> x){
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if(x>maxval){
        return maxval;
    }
    else {
        return rint_fixed<W+1, I+1>(ap_ufixed<W+1,I+1> (x));
    }
}


template <int I>
long int lrint_fixed(ap_int<I> x){
    ap_int<8*sizeof(long int)> minval = 0;
    minval[8*sizeof(long int)-1] = 1;
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if((x>maxval) || (x>minval)) {
        return (x[I-1])? minval : maxval;
    }
    else {
        return x;
    }
}


template <int I>
long int lrint_fixed(ap_uint<I> x){
    ap_int<8*sizeof(long int)> maxval = -1;
    maxval[8*sizeof(long int)-1] = 0;
    if(x>maxval) {
        return maxval;
    }
    else {
        return x;
    }
}
# 1024 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h" 1
# 37 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"
namespace pow_apfixed_reduce{
# 52 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"
template<int W_,int I_>
ap_fixed<W_,I_> pow(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y) {
    const static int F_ = W_ - I_;
_ssdm_SpecConstant(&F_);
# 54 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


    if (I_>34) return 0;
    else if (F_>33) return 0;
    ap_fixed<W_,I_> r = 0;

    bool r_is_neg = 0;
    bool y_is_frac = 0;

    if (F_>0&&y(F_-1,0)>0)
        y_is_frac =1;
    if (x==0) {

        if (y==0&&I_>1) {
            return 1;

        } else if (y>0) {
            return 0;
        } else {

#pragma unroll
 for (int j = 0; j < W_-1; j++) r[j] = 1;
               r[W_-1] = 0;
            return r;
        }
    } else if (x<0) {

        if (y_is_frac) return 0;

        else {
            if (y==0||(I_>1&&y[F_]==0))
                r_is_neg = 0;
            else
                r_is_neg = 1;
        }
    }

    ap_fixed<W_+1,I_+1> x_e_1 = x;

    ap_fixed<W_+1,I_+1> x_p = 0;
    x_p = fabs_fixed(x_e_1);


    const static int E_l = I_+2;
_ssdm_SpecConstant(&E_l);
# 97 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

    const static int F_l = W_+E_l;
_ssdm_SpecConstant(&F_l);
# 98 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


    const static int I_l = I_+1>6?I_+1:6;
_ssdm_SpecConstant(&I_l);
# 100 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

    const static int W_l = F_l + I_l;
_ssdm_SpecConstant(&W_l);
# 101 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


    ap_fixed<W_l,I_l> x_l = x_p;


    ap_fixed<W_l,I_l> ln_x = log_apfixed_reduce::log(x_l);


    ap_fixed<F_l+6,6> ln_x_s = ln_x;


    const static int FI_m = W_+2;
_ssdm_SpecConstant(&FI_m);
# 112 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


    const static int I_m = I_>6 ? I_ : 6;
_ssdm_SpecConstant(&I_m);
# 114 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

    const static int WI_m = FI_m + I_m;
_ssdm_SpecConstant(&WI_m);
# 115 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

    const static int WO_m = F_ + I_m;
_ssdm_SpecConstant(&WO_m);
# 116 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

    ap_fixed<F_l+W_+6,6+I_> mul_y_ln = ln_x_s * y;
# 127 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"
    ap_fixed<WO_m,I_m> exp_r = 0;
    ap_fixed<W_,I_> r_1 = 0;
    bool m_overf = 0;
    bool e_overf = 0;
    bool overf = 0;

#pragma unroll
 for (int j = F_l+F_+I_m-1; j < F_l+W_+5; j++)
        if (mul_y_ln[F_l+W_+5]!=mul_y_ln[j])
            m_overf = 1;

    if (!m_overf) {

        ap_fixed<WI_m,I_m> mul_y_ln_s = mul_y_ln;

        exp_r = exp_reduce::exp_core<WO_m,I_m,WI_m>(mul_y_ln_s);


        if (I_<I_m) {
#pragma unroll
 for (int j = WO_m-1; j >= W_-1; j--) {
                if (exp_r[j])
                    e_overf=1;
            }
        }
        r_1 = exp_r;
    }

    if (e_overf||(m_overf&&!mul_y_ln[F_l+W_+5])) {
        overf = 1;
    }

    if (r_is_neg) {

        if (overf) {
            r=0;
            r[W_-1]=1;

        } else {
            if (r_1!=0) {
                r = -r_1;
                r[W_-1] = 1;
            }
        }

    } else {

        if(overf) {
            r[W_-1] = 0;
#pragma unroll
 for (int j = W_-2; j >= 0; j--)
               r[j] = 1;

        } else {
            r = r_1;
        }
    }

    return r;
}
# 206 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"
template<int W_, int I_>
ap_fixed<W_,I_> pown(ap_fixed<W_,I_> x, int n) {






    const static int F_ = W_ - I_;
_ssdm_SpecConstant(&F_);
# 214 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


    if (I_>34) return 0;
    else if (F_>33) return 0;

    ap_fixed<W_,I_> r = 0;
    ap_fixed<32,32> n_fix = n;

    bool x_sig = x[W_-1];
    bool n_sig = n_fix[31];
    bool n_is_odd = n_fix[0];
    bool x_gt_0 = 0;

    if (x == 0 && n_fix != 0) r = 0;
    else if(n_fix == 0) r = 1;
    else if(n_fix == 1) r = x;

    else if(x == 1) r = 1;
    else if(x == -1) {
        if(n_is_odd) r = -1;
        else r = 1;
    }else {
# 262 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"
       const static int we_n = F_ > 26? 32 : 6 + F_;
_ssdm_SpecConstant(&we_n);
# 262 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


       const static int wf_log = I_ == F_>26 ? (31+F_+I_) : (we_n-1+F_+I_);
_ssdm_SpecConstant(&wf_log);
# 264 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

       const static int I_e = I_>6 ? I_ : 6;
_ssdm_SpecConstant(&I_e);
# 265 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

       const static int WI_e = I_e + wf_log - we_n;
_ssdm_SpecConstant(&WI_e);
# 266 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

       const static int WO_e = F_ + I_e;
_ssdm_SpecConstant(&WO_e);
# 267 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

       ap_fixed<33,33> max_n = 0;
       max_n[we_n-1] = 1;
       ap_ufixed<32,32> n_pos = fabs_fixed(ap_fixed<33,33>(n));
       ap_ufixed<WO_e,I_e> exp_r=0;
       bool ovf = 0;
       ap_ufixed<W_,I_> x_pos = fabs_fixed((ap_fixed<W_+1,I_+1>)x);
       if(x_pos>1) x_gt_0 = 1;
       ap_fixed<32,32> min_n = -max_n;
       if(n_fix != -1 && ((n >= max_n) || (n < min_n))){

           ovf = 1;
       }else {
           ap_fixed<we_n, we_n> n_s = n;





           const static int I_l = I_+1 < 6? 6 : I_+1;
_ssdm_SpecConstant(&I_l);
# 286 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

           ap_fixed<wf_log+I_l,I_l> x_e = x_pos;
           const static int we_log = 6;
_ssdm_SpecConstant(&we_log);
# 288 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

           ap_fixed<wf_log+we_log,we_log> x_log = log_apfixed_reduce::log(x_e);






           ap_fixed<wf_log+we_log, we_log+we_n> x_log_mul_n = n_s * x_log;






           for(int i = wf_log+we_log-2; i > WI_e - 2; --i) {
#pragma HLS unroll
 if(x_log_mul_n[i] != x_log_mul_n[wf_log+we_log-1]){

                    ovf = 1;
                }
           }
           ap_fixed<WI_e, I_e> x_log_mul_n_1 = x_log_mul_n ;





           exp_r = exp_reduce::exp_core<WO_e,I_e,WI_e>(x_log_mul_n_1);





           if (I_<I_e) {
               for (int j = WO_e-1; j >= W_-1; j--) {
#pragma hls unroll

 if (exp_r[j])
                       ovf=1;
               }
           }
       }
       if(ovf) {
           if(x_gt_0 ^ n_sig) {

               if(x_sig && !n_is_odd) {
                   r[W_-1] = 1;
               } else {
                   for(int i = 0; i < W_-1; ++i) {
#pragma HLS unroll
 r[W_-1] = 1;
                   }
               }
           }
       } else {
           if(x_sig && n_is_odd) r = -exp_r;
           else r = exp_r;
       }
   }
   return r;
}
# 376 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"
template<int W_,int I_>
ap_fixed<W_,I_> rootn(ap_fixed<W_,I_> x, int n) {






    const static int F_ = W_ - I_;
_ssdm_SpecConstant(&F_);
# 384 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


    if (I_ > 34) return 0;
    else if (F_ > 33) return 0;

    ap_fixed<W_,I_> r = 0;
    ap_fixed<32,32> n_fix = n;
    bool n_is_odd = 0;
    if(n_fix[0]) n_is_odd = 1;

    if (x == 0) r = 0;
    else if(n_fix == 0) r = 0;
    else if(n_fix == 1) r = x;
    else if(n_fix == -1) r = ap_fixed<W_, I_>(1)/x;
    else if(x<0 && !n_is_odd) r = 0;
    else if(x==1) r = 1;
    else if(x==-1 && n_is_odd) r = -1;
    else {

        ap_ufixed<W_,I_> x_p = fabs_fixed((ap_fixed<W_+1,I_+1>)x);


        const static int m_we = (F_+1)/2 > (I_+1)/2? (F_+1)/2:(I_+1)/2;
_ssdm_SpecConstant(&m_we);
# 406 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        const static int we = I_ > m_we ? m_we : I_;
_ssdm_SpecConstant(&we);
# 407 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        const static int E_l = we - 1;
_ssdm_SpecConstant(&E_l);
# 408 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        const static int F_l = F_ + E_l;
_ssdm_SpecConstant(&F_l);
# 409 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


        const static int I_l = I_ + 1 > 6 ? I_ + 1 : 6;
_ssdm_SpecConstant(&I_l);
# 411 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        const static int W_l = F_l + I_l;
_ssdm_SpecConstant(&W_l);
# 412 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


        ap_fixed<W_l,I_l> x_l = x_p;


        ap_fixed<W_l,I_l> ln_x = log_apfixed_reduce::log(x_l);






        ap_fixed<F_l+6,6> ln_x_s = ln_x;


        const static int FI_d = F_l + 1;
_ssdm_SpecConstant(&FI_d);
# 427 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"


        const static int I_d = we+1 > 5? we+1 : 5;
_ssdm_SpecConstant(&I_d);
# 429 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        const static int WI_d = FI_d + I_d;
_ssdm_SpecConstant(&WI_d);
# 430 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        const static int WO_d = F_ + I_d;
_ssdm_SpecConstant(&WO_d);
# 431 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_pow_apfixed.h"

        ap_fixed<F_l+6,5> divd_n_ln = ln_x_s / n_fix;







        ap_fixed<WI_d,I_d> divd_n_ln_s = divd_n_ln;





        ap_ufixed<WO_d, I_d> exp_r = exp_reduce::exp_core<WO_d,I_d,WI_d>(divd_n_ln_s);





        bool ovf = 0;

        if(I_ < I_d) {
           for (int j =WO_d-1; j >= W_-1; j--) {
#pragma hls unroll

 if (exp_r[j])
                   ovf=1;
           }
        }
        if(!ovf) {
           if(x[W_-1]&&n_is_odd) r = -exp_r;
           else r = exp_r;
        }else {
           if(x[W_-1]&&n_is_odd) {
              r[W_-1] = 1;
           } else {
              for(int i = 0; i < W_-1; ++i) {
#pragma HLS unroll
 r[i] = 1;
              }
           }
        }
   }
   return r;
}


template<int W_, int I_>
ap_ufixed<W_,I_> pow(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y) {
    ap_fixed<W_+1,I_+1> xf = x;
    ap_fixed<W_+1,I_+1> yf = y;
    return pow(xf,yf);
}

template<int I_>
ap_int<I_> pow(ap_int<I_> x, ap_int<I_> y) {
    ap_fixed<I_,I_> xf = x;
    ap_fixed<I_,I_> yf = y;
    return pow(xf,yf);
}

template<int I_>
ap_uint<I_> pow(ap_uint<I_> x,ap_uint<I_> y) {
    ap_fixed<I_+1,I_+1> xf = x;
    ap_fixed<I_+1,I_+1> yf = y;
    return pow(xf,yf);
}


template<int W_, int I_>
ap_fixed<W_,I_> powr(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y) {
    return pow(x,y);
}

template<int W_, int I_>
ap_ufixed<W_,I_> powr(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y) {
    ap_fixed<W_+1,I_+1> xf = x;
    ap_fixed<W_+1,I_+1> yf = y;
    return pow(xf,yf);
}

template<int I_>
ap_int<I_> powr(ap_int<I_> x, ap_int<I_> y) {
    ap_fixed<I_,I_> xf = x;
    ap_fixed<I_,I_> yf = y;
    return pow(xf,yf);
}

template<int I_>
ap_uint<I_> powr(ap_uint<I_> x,ap_uint<I_> y) {
    ap_fixed<I_+1,I_+1> xf = x;
    ap_fixed<I_+1,I_+1> yf = y;
    return pow(xf,yf);
}

template<int W_, int I_>
ap_ufixed<W_,I_> pown(ap_ufixed<W_, I_> x, int n) {
    ap_fixed<W_+1,I_+1> xi = x;
    return pown(xi, n);
}

template<int I_>
ap_int<I_> pown(ap_int<I_> x, int n) {
   ap_fixed<I_, I_> xi = x;
   return pown(xi, n);
}

template<int I_>
ap_uint<I_> pown(ap_uint<I_> x, int n) {
   ap_fixed<I_+1, I_+1> xi = x;
   return pown(xi, n);
}
template<int W_, int I_>
ap_ufixed<W_,I_> rootn(ap_ufixed<W_, I_> x, int n) {
    ap_fixed<W_+1,I_+1> xi = x;
    return rootn(xi, n);
}

template<int I_>
ap_int<I_> rootn(ap_int<I_> x, int n) {
   ap_fixed<I_, I_> xi = x;
   return rootn(xi, n);
}

template<int I_>
ap_uint<I_> rootn(ap_uint<I_> x, int n) {
   ap_fixed<I_+1, I_+1> xi = x;
   return rootn(xi, n);
}
}
# 1025 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h" 2
# 46 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> fdim_fixed(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y )
{
#pragma HLS PIPELINE II=1
 ap_fixed<W_+1,I_+1> x_overf = 0;
    ap_fixed<W_ ,I_ > xs = 0;
        bool overf = 0;

    if(x > y)
    {
        x_overf = x - y;
        overf = x_overf[W_-1];
        if(overf) {
#pragma UNROLL
 for (int i = 0; i < W_-1; i++){
                xs[i] = 1;
            }
            xs[W_-1] = 0;
        }
        else{
            x_overf[W_] = 0;
            xs = x_overf;
        }
    }
    return xs;
}
template <int W_, int I_>
ap_ufixed<W_,I_> fdim_fixed(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y)
{
    ap_ufixed<W_ ,I_ > xs = 0;
    if(x > y){ xs = x - y; }
    return xs;
}
template <int I_>
ap_int<I_> fdim_fixed(ap_int<I_> x, ap_int<I_> y)
{
    ap_fixed<I_,I_> xs = x;
    ap_fixed<I_,I_> ys = y;
    return fdim_fixed(xs, ys);
}
template <int I_>
ap_uint<I_> fdim_fixed(ap_uint<I_> x, ap_uint<I_> y)
{
    ap_uint<I_ > xs = 0;
    if(x > y) { xs = x - y; }
    return xs;
}
# 102 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> fmax_fixed(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y )
{
    ap_fixed<W_ ,I_ > xs = 0;
    if(x >= y) xs = x ;
        else xs = y ;
    return xs;
}
template <int W_, int I_>
ap_ufixed<W_,I_> fmax_fixed(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y)
{
    ap_ufixed<W_ ,I_ > xs = 0;
    if(x >= y) xs = x;
        else xs = y ;
    return xs;
}
template <int I_>
ap_int<I_> fmax_fixed(ap_int<I_> x, ap_int<I_> y)
{
    ap_int<I_ > xs = 0;
    if(x >= y) xs = x;
        else xs = y ;
    return xs;
}
template <int I_>
ap_uint<I_> fmax_fixed(ap_uint<I_> x, ap_uint<I_> y)
{
    ap_uint<I_ > xs = 0;
    if(x >= y) xs = x;
        else xs = y ;
    return xs;
}
# 143 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> fmin_fixed(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y )
{
    ap_fixed<W_ ,I_ > xs = 0;
    if(x <= y) xs = x ;
        else xs = y ;
    return xs;
}
template <int W_, int I_>
ap_ufixed<W_,I_> fmin_fixed(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y)
{
    ap_ufixed<W_ ,I_ > xs = 0;
    if(x <= y) xs = x;
        else xs = y ;
    return xs;
}
template <int I_>
ap_int<I_> fmin_fixed(ap_int<I_> x, ap_int<I_> y)
{
    ap_int<I_ > xs = 0;
    if(x <= y) xs = x;
        else xs = y ;
    return xs;
}
template <int I_>
ap_uint<I_> fmin_fixed(ap_uint<I_> x, ap_uint<I_> y)
{
    ap_uint<I_ > xs = 0;
    if(x <= y) xs = x;
        else xs = y ;
    return xs;
}
# 186 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> maxmag_fixed(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y )
{
#pragma HLS PIPELINE II=1
 ap_fixed<W_+1,I_+1> xm = -x;
    ap_fixed<W_+1,I_+1> ym = -y;
    ap_fixed<W_+1,I_+1> x_fabs = ( x[W_-1] ) ? xm : ap_fixed<W_+1,I_+1>(x);
    ap_fixed<W_+1,I_+1> y_fabs = ( y[W_-1] ) ? ym : ap_fixed<W_+1,I_+1>(y);

    ap_fixed<W_+1,I_+1> xs_t = 0;
    ap_fixed<W_,I_> xs = 0;
    if(x_fabs >= y_fabs)
    {
     xs_t = x_fabs ;
     xs = x;
    }
    else{
     xs_t = y_fabs ;
     xs = y;
    }

    if(xs_t[W_-1])
    {
#pragma UNROLL
 for (int i = 0; i < W_-1; i++){
                xs[i] = 1;
            }
            xs[W_-1] = 0;
    }

    return xs;
}
template <int W_, int I_>
ap_ufixed<W_,I_> maxmag_fixed(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y)
{
    ap_ufixed<W_ ,I_ > xs = 0;
    if(x >= y) xs = x;
        else xs = y ;
    return xs;
}
template <int I_>
ap_int<I_> maxmag_fixed(ap_int<I_> x, ap_int<I_> y)
{
    ap_fixed<I_,I_> xs = x;
    ap_fixed<I_,I_> ys = y;
    return maxmag_fixed(xs, ys);
}
template <int I_>
ap_uint<I_> maxmag_fixed(ap_uint<I_> x, ap_uint<I_> y)
{
    ap_uint<I_ > xs = 0;
    if(x >= y) xs = x;
        else xs = y ;
    return xs;
}
# 252 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_diff_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> minmag_fixed(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y )
{
#pragma HLS PIPELINE II=1
 ap_fixed<W_+1,I_+1> xm = -x;
    ap_fixed<W_+1,I_+1> ym = -y;
    ap_fixed<W_+1,I_+1> x_fabs = ( x[W_-1] ) ? xm : ap_fixed<W_+1,I_+1>(x);
    ap_fixed<W_+1,I_+1> y_fabs = ( y[W_-1] ) ? ym : ap_fixed<W_+1,I_+1>(y);

    ap_fixed<W_+1,I_+1> xs_t = 0;
    ap_fixed<W_,I_> xs = 0;
    if(x_fabs <= y_fabs)
    {
     xs_t = x_fabs ;
     xs = x;
    }
    else{
     xs_t = y_fabs ;
     xs = y;
    }
    if(xs_t[W_-1])
    {
#pragma UNROLL
 for (int i = 0; i < W_-1; i++){
                xs[i] = 1;
            }
            xs[W_-1] = 0;
    }

    return xs;
}
template <int W_, int I_>
ap_ufixed<W_,I_> minmag_fixed(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y)
{
    ap_ufixed<W_ ,I_ > xs = 0;
    if(x <= y) xs = x;
        else xs = y ;
    return xs;
}
template <int I_>
ap_int<I_> minmag_fixed(ap_int<I_> x, ap_int<I_> y)
{
    ap_fixed<I_,I_> xs = x;
    ap_fixed<I_,I_> ys = y;
    return minmag_fixed(xs, ys);
}
template <int I_>
ap_uint<I_> minmag_fixed(ap_uint<I_> x, ap_uint<I_> y)
{
    ap_uint<I_ > xs = 0;
    if(x <= y) xs = x;
        else xs = y ;
    return xs;
}
# 1026 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_comparison_apfixed.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_comparison_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_comparison_apfixed.h" 2



template<int W, int I>
bool isgreater_fixed(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    if(x1 > x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int W, int I>
bool isgreater_fixed(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    if(x1 > x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool isgreater_fixed(ap_int<I> x1, ap_int<I> x2){
    if(x1 > x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool isgreater_fixed(ap_uint<I> x1, ap_uint<I> x2){
    if(x1 > x2) {
        return true;
    }
    else {
        return false;
    }
}


template<int W, int I>
bool isgreaterequal_fixed(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    if(x1 >= x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int W, int I>
bool isgreaterequal_fixed(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    if(x1 >= x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool isgreaterequal_fixed(ap_int<I> x1, ap_int<I> x2){
    if(x1 >= x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool isgreaterequal_fixed(ap_uint<I> x1, ap_uint<I> x2){
    if(x1 >= x2) {
        return true;
    }
    else {
        return false;
    }
}


template<int W, int I>
bool isless_fixed(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    if(x1 < x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int W, int I>
bool isless_fixed(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    if(x1 < x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool isless_fixed(ap_int<I> x1, ap_int<I> x2){
    if(x1 < x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool isless_fixed(ap_uint<I> x1, ap_uint<I> x2){
    if(x1 < x2) {
        return true;
    }
    else {
        return false;
    }
}


template<int W, int I>
bool islessequal_fixed(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    if(x1 <= x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int W, int I>
bool islessequal_fixed(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    if(x1 <= x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool islessequal_fixed(ap_int<I> x1, ap_int<I> x2){
    if(x1 <= x2) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool islessequal_fixed(ap_uint<I> x1, ap_uint<I> x2){
    if(x1 <= x2) {
        return true;
    }
    else {
        return false;
    }
}


template<int W, int I>
bool islessgreater_fixed(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    if((x1 < x2) || (x1 > x2)) {
        return true;
    }
    else {
        return false;
    }
}
template<int W, int I>
bool islessgreater_fixed(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    if((x1 < x2) || (x1 > x2)) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool islessgreater_fixed(ap_int<I> x1, ap_int<I> x2){
    if((x1 < x2) || (x1 > x2)) {
        return true;
    }
    else {
        return false;
    }
}
template<int I>
bool islessgreater_fixed(ap_uint<I> x1, ap_uint<I> x2){
    if((x1 < x2) || (x1 > x2)) {
        return true;
    }
    else {
        return false;
    }
}
# 1027 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_frexp_apfixed.h" 1
# 41 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_frexp_apfixed.h"
namespace frexp_internal {

template<int W, int I>
ap_fixed<W,I> frexp(ap_fixed<W,I> x,
                    ap_fixed<W,I>* exp){
    if(I<0) {
           *exp = 0;
           return x;
    }
    static const int F = W - I;
_ssdm_SpecConstant(&F);
# 50 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_frexp_apfixed.h"

    static const int we = W > 5 ? W/2 : 3;
_ssdm_SpecConstant(&we);
# 51 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_frexp_apfixed.h"


    ap_int<we> e = 0;
    ap_ufixed<W, I> r_p = 0;

    ap_fixed<W+1, I+1> xi = x;
    ap_ufixed<W, I> x_p = fabs_fixed(xi);

    static const ap_uint<3> clz_table_6bit[64] = {7, 6, 5, 5, 4, 4, 4, 4,
                                                  3, 3, 3, 3, 3, 3, 3, 3,
                                                  2, 2, 2, 2, 2, 2, 2, 2,
                                                  2, 2, 2, 2, 2, 2, 2, 2,
                                                  1, 1, 1, 1, 1, 1, 1, 1,
                                                  1, 1, 1, 1, 1, 1, 1, 1,
                                                  1, 1, 1, 1, 1, 1, 1, 1,
                                                  1, 1, 1, 1, 1, 1, 1, 1};
_ssdm_SpecConstant(clz_table_6bit);
# 59 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_frexp_apfixed.h"

    int pos = 0;

    static const int loop_nm = W > 6 ? (W + 5)/6 : 1;
_ssdm_SpecConstant(&loop_nm);
# 69 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_frexp_apfixed.h"

    CLZ_LOOP:
    for(int l = loop_nm; l > 0; --l){
#pragma HLS pipeline II=1
 ap_uint<6> t = 0;
       if(l*6 > W) t = x_p(W - 1, (l - 1) * 6);
       else t = x_p(l * 6 - 1, (l - 1) * 6);
       if((t & 0x3f) != 0) {
          pos = l * 6 - clz_table_6bit[t];
          break;
       }
    }
    if(pos >= 0) {
        e = pos + 1 - F;
        if(F > 0) {
           ap_uint<we> w_f = (pos + 1) < F ? (pos + 1) : F;
           r_p(F - 1,F - w_f) = x_p(pos, pos + 1 - w_f);
        }
    } else {
        e = 0;
        r_p = 0;
    }
    ap_fixed<W, I> r = 0;
    if(xi[W-1]) r = -r_p;
    else r = r_p;



    *exp = e;
    return r;
}
template<int W, int I>
ap_ufixed<W,I> frexp(ap_ufixed<W,I> x,
                     ap_ufixed<W,I>* exp){
    ap_fixed<W+1, I+1> xe = x;
    ap_fixed<W+1, I+1> ee = 0;
    ap_fixed<W+1, I+1> r = frexp(xe,&ee);
    *exp = ee;
    return r;
}
template<int I>
ap_uint<I> frexp(ap_uint<I> x,
                 ap_uint<I>* exp) {
   ap_fixed<I, I> xe = x;
   ap_fixed<I, I> ee = 0;
   ap_fixed<I, I> r = frexp(xe,&ee);
   *exp = ee;
   return r;
}
template<int I>
ap_int<I> frexp(ap_int<I> x,
                ap_int<I>* exp) {
   ap_fixed<I+1, I+1> xe = x;
   ap_fixed<I+1, I+1> ee = 0;
   ap_fixed<I+1, I+1> r = frexp(xe,&ee);
   *exp = ee;
   return r;
}
}
# 1028 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_modf_apfixed.h" 1
# 40 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_modf_apfixed.h"
namespace modf_internal {
template<int W, int I>
ap_fixed<W,I> modf(ap_fixed<W, I> x,
                   ap_fixed<W, I>* int_part){
    ap_fixed<W, I> frac_part = 0;
    if(W == I) {
        *int_part = x;
        frac_part = 0;
    } else if(I > 0) {
        ap_fixed<W+1, I+1> xi = x;
        ap_ufixed<W, I> x_p = fabs_fixed(xi);
        frac_part(W - I - 1,0) = x_p(W - I - 1,0);
        if(xi[W-1]) frac_part = - frac_part;
        *int_part = x_p(W-1, W-I);
        if(xi[W-1]) *int_part = -*int_part;
    } else {
       *int_part = 0;
       frac_part = x;
    }
    return frac_part;
}
template<int W, int I>
ap_ufixed<W,I> modf(ap_ufixed<W, I> x,
                    ap_ufixed<W, I>* int_part){
    ap_fixed<W+1, I+1> xi = x;
    ap_fixed<W+1, I+1> ii = 0;
    ap_fixed<W+1, I+1> r = modf(xi, &ii);
    *int_part = ii;
    return r;
}
template<int I>
ap_int<I> modf(ap_int<I> x,
               ap_int<I>* int_part){
    *int_part = x;
    return 0;
}
template<int I>
ap_uint<I> modf(ap_uint<I> x,
                ap_uint<I>* int_part){
    *int_part = x;
    return 0;
}
}
# 1029 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_isequal_isnotequal_apfixed.h" 1
# 40 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_isequal_isnotequal_apfixed.h"
template <int W_, int I_>
bool generic_isequal(ap_fixed<W_,I_> x,ap_fixed<W_,I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int W_, int I_>
bool generic_isnotequal(ap_fixed<W_,I_> x,ap_fixed<W_,I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}


template <int W_, int I_>
bool generic_isequal(ap_ufixed<W_,I_> x,ap_fixed<W_,I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int W_, int I_>
bool generic_isnotequal(ap_ufixed<W_,I_> x,ap_fixed<W_,I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}


template <int W_, int I_>
bool generic_isequal(ap_fixed<W_,I_> x,ap_ufixed<W_,I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int W_, int I_>
bool generic_isnotequal(ap_fixed<W_,I_> x,ap_ufixed<W_,I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}


template <int W_, int I_>
bool generic_isequal(ap_ufixed<W_,I_> x,ap_ufixed<W_,I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int W_, int I_>
bool generic_isnotequal(ap_ufixed<W_,I_> x,ap_ufixed<W_,I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}



template <int I_>
bool generic_isequal(ap_int<I_> x,ap_int<I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int I_>
bool generic_isnotequal(ap_int<I_> x,ap_int<I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}


template <int I_>
bool generic_isequal(ap_uint<I_> x,ap_int<I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int I_>
bool generic_isnotequal(ap_uint<I_> x,ap_int<I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}


template <int I_>
bool generic_isequal(ap_int<I_> x,ap_uint<I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int I_>
bool generic_isnotequal(ap_int<I_> x,ap_uint<I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}


template <int I_>
bool generic_isequal(ap_uint<I_> x,ap_uint<I_> y)
{
#pragma HLS pipeline
 return (x==y);
}


template <int I_>
bool generic_isnotequal(ap_uint<I_> x,ap_uint<I_> y)
{
#pragma HLS pipeline
 return (!(x==y));
}
# 1030 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_all_any_apfixed.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_all_any_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_all_any_apfixed.h" 2



template <int W_, int I_>
bool generic_all(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<W_;i++)
     if (x[i]==0)
      return false;
    return true;
}


template <int W_, int I_>
bool generic_all(ap_ufixed<W_,I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<W_;i++)
     if (x[i]==0)
      return false;
    return true;
}


template <int I_>
bool generic_all(ap_int<I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<I_;i++)
     if (x[i]==0)
      return false;
    return true;
}


template <int I_>
bool generic_all(ap_uint<I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<I_;i++)
     if (x[i]==0)
      return false;
    return true;
}


template <int W_, int I_>
bool generic_any(ap_fixed<W_,I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<W_;i++)
     if (x[i]==1)
      return true;
    return false;
}


template <int W_, int I_>
bool generic_any(ap_ufixed<W_,I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<W_;i++)
     if (x[i]==1)
      return true;
    return false;
}


template <int I_>
bool generic_any(ap_int<I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<I_;i++)
     if (x[i]==1)
      return true;
    return false;
}


template <int I_>
bool generic_any(ap_uint<I_> x)
{
#pragma HLS pipeline II=1
 for (int i=0; i<I_;i++)
     if (x[i]==1)
      return true;
    return false;
}
# 1031 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_select_bitselect_apfixed.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_select_bitselect_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_select_bitselect_apfixed.h" 2
# 62 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_select_bitselect_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> generic_bitselect(ap_fixed<W_,I_> x,ap_fixed<W_,I_> y, ap_fixed<W_,I_> z)
{
#pragma HLS pipeline
 return (z & y)|(~z & x);
}


template <int W_, int I_>
ap_ufixed<W_,I_> generic_bitselect(ap_ufixed<W_,I_> x,ap_ufixed<W_,I_> y, ap_ufixed<W_,I_> z)
{
#pragma HLS pipeline
 return (z & y)|(~z & x);
}


template <int I_>
ap_int<I_> generic_bitselect(ap_int<I_> x,ap_int<I_> y, ap_int<I_> z)
{
#pragma HLS pipeline
 return (z & y)|(~z & x);
}

template <int I_>
ap_uint<I_> generic_bitselect(ap_uint<I_> x,ap_uint<I_> y, ap_uint<I_> z)
{
#pragma HLS pipeline
 return (z & y)|(~z & x);
}
# 1032 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h" 1
# 35 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h" 2



namespace erf_erfc_fixed {

    namespace {
 template <typename T> class coeff { };

 template <> class coeff<double> {

 public:
   static const double tiny;
   static const double one_over_two;
   static const double one;
   static const double two;
   static const double erx;
   static const double efx;
   static const double efx8;
   static const double pp[5];
   static const double qq[6];
   static const double pa[7];
   static const double qa[7];
   static const double ra[8];
   static const double sa[9];
   static const double rb[7];
   static const double sb[8];
 };
 const double coeff<double>::tiny = 1e-300;
 const double coeff<double>::one_over_two= 5.00000000000000000000e-01;
 const double coeff<double>::one = 1.00000000000000000000e+00;
 const double coeff<double>::two = 2.00000000000000000000e+00;

 const double coeff<double>::erx = 8.45062911510467529297e-01;



 const double coeff<double>::efx = 1.28379167095512586316e-01;
 const double coeff<double>::efx8= 1.02703333676410069053e+00;
 const double coeff<double>::pp[] =
   {1.28379167095512558561e-01,
    -3.25042107247001499370e-01,
    -2.84817495755985104766e-02,
    -5.77027029648944159157e-03,
    -2.37630166566501626084e-05};
 const double coeff<double>::qq[] =
   {0.0, 3.97917223959155352819e-01,
    6.50222499887672944485e-02,
    5.08130628187576562776e-03,
    1.32494738004321644526e-04,
    -3.96022827877536812320e-06};



 const double coeff<double>::pa[] =
   {-2.36211856075265944077e-03,
    4.14856118683748331666e-01,
    -3.72207876035701323847e-01,
    3.18346619901161753674e-01,
    -1.10894694282396677476e-01,
    3.54783043256182359371e-02,
    -2.16637559486879084300e-03};
 const double coeff<double>::qa[] =
   {0.0, 1.06420880400844228286e-01,
    5.40397917702171048937e-01,
    7.18286544141962662868e-02,
    1.26171219808761642112e-01,
    1.36370839120290507362e-02,
    1.19844998467991074170e-02};



 const double coeff<double>::ra[] =
   {-9.86494403484714822705e-03,
    -6.93858572707181764372e-01,
    -1.05586262253232909814e+01,
    -6.23753324503260060396e+01,
    -1.62396669462573470355e+02,
    -1.84605092906711035994e+02,
    -8.12874355063065934246e+01,
    -9.81432934416914548592e+00};
 const double coeff<double>::sa[] =
   {0.0,1.96512716674392571292e+01,
    1.37657754143519042600e+02,
    4.34565877475229228821e+02,
    6.45387271733267880336e+02,
    4.29008140027567833386e+02,
    1.08635005541779435134e+02,
    6.57024977031928170135e+00,
    -6.04244152148580987438e-02};



 const double coeff<double>::rb[] =
   {-9.86494292470009928597e-03,
    -7.99283237680523006574e-01,
    -1.77579549177547519889e+01,
    -1.60636384855821916062e+02,
    -6.37566443368389627722e+02,
    -1.02509513161107724954e+03,
    -4.83519191608651397019e+02};
 const double coeff<double>::sb[] =
   {0.0,3.03380607434824582924e+01,
    3.25792512996573918826e+02,
    1.53672958608443695994e+03,
    3.19985821950859553908e+03,
    2.55305040643316442583e+03,
    4.74528541206955367215e+02,
    -2.24409524465858183362e+01};
# 245 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h"
 template<typename T> class erf_traits{ };
# 267 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h"
 template<> class erf_traits<double> {
 public:
   static const uint64_t mask;
   static const uint32_t segment[10];
 };
 const uint64_t erf_traits<double>::mask = 0xffffffff00000000;
 const uint32_t erf_traits<double>::segment[10] =
   {
  0x7fffffff,
  0x7ff00000,
  0x3feb0000,
  0x3e300000,
  0x00800000,
  0x3ff40000,
  0x40180000,
  0x4006DB6E,
  63,
  32
   };

 template<typename T> class erfc_traits{};
# 308 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h"
 template<> class erfc_traits<double>{
 public:
   static const uint32_t segment[11];
 };
 const uint32_t erfc_traits<double>::segment[11] =
   {
  0x7fffffff,
  0x7ff00000,
  0x3feb0000,
  0x3c700000,
  0x3fd00000,
  0x3ff40000,
  0x403c0000,
  0x4006DB6D,
  0x40180000,
  63,
  32
   };
  }
# 346 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> erf(ap_fixed<W_,I_> x_fixed )
{
    int F_ = W_ - I_;

    if (I_>33) return 0;
    else if (F_>32) return 0;

    double x = x_fixed.to_double();
 int32_t hx;
    uint32_t ix;
 double R,S,P,Q,s,y,z,r;

    fp_struct<double> fp_abs(x);
      fp_abs.sign=0;
    fp_struct<double> fp_x(x);
    ap_uint<32> tmp = fp_x.data()(erf_traits<double>::segment[8],erf_traits<double>::segment[9]);
    hx = tmp.to_int();
 ix = hx & erf_traits<double>::segment[0];






    if(fp_x.exp == 0x0 && fp_x.sign!= 0x0){
   return 0;
 }

 if(ix>=erf_traits<double>::segment[1]) {

   if(hx>0)
  return ap_fixed<W_,I_>((double)1.0 +coeff<double>::one/x);
   else
  return ap_fixed<W_,I_>(coeff<double>::one/x-(double)1.0);
 }

 if(ix < erf_traits<double>::segment[2]) {
   double r1,r2,s1,s2,s3,z2,z4;
   if(ix < erf_traits<double>::segment[3]) {
  if (ix < erf_traits<double>::segment[2])
    return ap_fixed<W_,I_>(((double)0.125)*((double)8.0*x+coeff<double>::efx8*x));
  return ap_fixed<W_,I_>(x + coeff<double>::efx*x);
   }
   z = x*x;




   r1 = coeff<double>::pp[0]+z*coeff<double>::pp[1]; z2=z*z;
   r2 = coeff<double>::pp[2]+z*coeff<double>::pp[3]; z4=z2*z2;
   s1 = coeff<double>::one+z* coeff<double>::qq[1];
   s2 = coeff<double>::qq[2]+z*coeff<double>::qq[3];
   s3 = coeff<double>::qq[4]+z*coeff<double>::qq[5];
   r = r1 + z2*r2 + z4*coeff<double>::pp[4];
   s = s1 + z2*s2 + z4*s3;

   y = r/s;
   return ap_fixed<W_,I_>(x + x*y);
 }
 if(ix < erf_traits<double>::segment[5]) {
   double s2,s4,s6,P1,P2,P3,P4,Q1,Q2,Q3,Q4;

      s = fp_abs.to_ieee()-coeff<double>::one;




   P1 = coeff<double>::pa[0]+s*coeff<double>::pa[1]; s2=s*s;
   Q1 = coeff<double>::one+s*coeff<double>::qa[1]; s4=s2*s2;
   P2 = coeff<double>::pa[2]+s*coeff<double>::pa[3]; s6=s4*s2;
   Q2 = coeff<double>::qa[2]+s*coeff<double>::qa[3];
   P3 = coeff<double>::pa[4]+s*coeff<double>::pa[5];
   Q3 = coeff<double>::qa[4]+s*coeff<double>::qa[5];
   P4 = coeff<double>::pa[6];
   Q4 = coeff<double>::qa[6];
   P = P1 + s2*P2 + s4*P3 + s6*P4;
   Q = Q1 + s2*Q2 + s4*Q3 + s6*Q4;

   if(hx>=0) return ap_fixed<W_,I_>(coeff<double>::erx + P/Q);
      else return ap_fixed<W_,I_>(-coeff<double>::erx - P/Q);
 }
 if (ix >= erf_traits<double>::segment[6]) {
   if(hx>=0) return ap_fixed<W_,I_>(coeff<double>::one-coeff<double>::tiny);
      else return ap_fixed<W_,I_>(coeff<double>::tiny-coeff<double>::one);
 }
 x = fp_abs.to_ieee();
  s = coeff<double>::one/(x*x);
 if(ix< erf_traits<double>::segment[7]) {






   double R1,R2,R3,R4,S1,S2,S3,S4,s2,s4,s6,s8;
   R1 = coeff<double>::ra[0]+s*coeff<double>::ra[1];s2 = s*s;
   S1 = coeff<double>::one+ s*coeff<double>::sa[1]; s4 = s2*s2;
   R2 = coeff<double>::ra[2]+s*coeff<double>::ra[3];s6 = s4*s2;
   S2 = coeff<double>::sa[2]+s*coeff<double>::sa[3];s8 = s4*s4;
   R3 = coeff<double>::ra[4]+s*coeff<double>::ra[5];
   S3 = coeff<double>::sa[4]+s*coeff<double>::sa[5];
   R4 = coeff<double>::ra[6]+s*coeff<double>::ra[7];
   S4 = coeff<double>::sa[6]+s*coeff<double>::sa[7];
   R = R1 + s2*R2 + s4*R3 + s6*R4;
   S = S1 + s2*S2 + s4*S3 + s6*S4 + s8*coeff<double>::sa[8];

 } else {






   double R1,R2,R3,S1,S2,S3,S4,s2,s4,s6;
   R1 = coeff<double>::rb[0]+s*coeff<double>::rb[1];s2 = s*s;
   S1 = coeff<double>::one+ s*coeff<double>::sb[1]; s4 = s2*s2;
   R2 = coeff<double>::rb[2]+s*coeff<double>::rb[3];s6 = s4*s2;
   S2 = coeff<double>::sb[2]+s*coeff<double>::sb[3];
   R3 = coeff<double>::rb[4]+s*coeff<double>::rb[5];
   S3 = coeff<double>::sb[4]+s*coeff<double>::sb[5];
   S4 = coeff<double>::sb[6]+s*coeff<double>::sb[7];
   R = R1 + s2*R2 + s4*R3 + s6*coeff<double>::rb[6];
   S = S1 + s2*S2 + s4*S3 + s6*S4;

 }
 z = x;

    fp_struct<double> fp_z(z);
    ap_uint<Type_BitWidth<double>::Value> data = fp_z.data() & erf_traits<double>::mask;
    fp_struct<double> fp_z_new(data);
    z = fp_z_new.to_ieee();


    ap_fixed<W_, I_> r_fixed = exp_reduce::exp(ap_fixed<W_, I_>(-z*z-(double)0.5625))*exp_reduce::exp(ap_fixed<W_, I_>((z-x)*(z+x)+R/S));
 r = r_fixed.to_double();

 if(hx>=0) return ap_fixed<W_,I_>(coeff<double>::one-r/x);
    else return ap_fixed<W_,I_>(r/x-coeff<double>::one);
  }


template <int W_, int I_>
ap_ufixed<W_,I_> erf(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xs = x;
    return erf(xs);
}

template <int I_>
ap_int<I_> erf(ap_int<I_> x) {
    ap_fixed<I_,I_> xs = x;
    return erf(xs);
}

template <int I_>
ap_uint<I_> erf(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xs = x;
    return erf(xs);
}
# 513 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_erf_apfixed.h"
template <int W_, int I_>
ap_fixed<W_,I_> erfc(ap_fixed<W_,I_> x_fixed)
{
#pragma HLS PIPELINE II=1
 int F_ = W_ - I_;

    if (I_>33) return 0;
    else if (F_>32) return 0;

    double x = x_fixed.to_double();
    int32_t hx;
    uint32_t ix;
 double R,S,P,Q,s,y,z,r;

    fp_struct<double> fp_abs(x);
    fp_abs.sign=0;
    fp_struct<double> fp_x(x);
    ap_uint<32> tmp = fp_x.data()(erfc_traits<double>::segment[9],erfc_traits<double>::segment[10]);
    hx = tmp.to_int();
 ix = hx & erfc_traits<double>::segment[0];
 if(ix>=erfc_traits<double>::segment[1]) {

   if(hx>0)
  return ap_fixed<W_,I_>(coeff<double>::one/x);
   else
  return ap_fixed<W_,I_>(coeff<double>::two + coeff<double>::one/x);

 }

 if(ix < erfc_traits<double>::segment[2]) {
   double r1,r2,s1,s2,s3,z2,z4;
   if(ix < erfc_traits<double>::segment[3])
  return ap_fixed<W_,I_>(coeff<double>::one-x);
   z = x*x;




   r1 = coeff<double>::pp[0]+z*coeff<double>::pp[1]; z2=z*z;
   r2 = coeff<double>::pp[2]+z*coeff<double>::pp[3]; z4=z2*z2;
   s1 = coeff<double>::one+z*coeff<double>::qq[1];
   s2 = coeff<double>::qq[2]+z*coeff<double>::qq[3];
   s3 = coeff<double>::qq[4]+z*coeff<double>::qq[5];
   r = r1 + z2*r2 + z4*coeff<double>::pp[4];
   s = s1 + z2*s2 + z4*s3;

   y = r/s;
   if(ix < erfc_traits<double>::segment[4]) {
  return ap_fixed<W_,I_>(coeff<double>::one-(x+x*y));
   } else {
  r = x*y;
  r += (x-coeff<double>::one_over_two);
  return ap_fixed<W_,I_>(coeff<double>::one_over_two - r) ;
   }
 }
 if(ix < erfc_traits<double>::segment[5]) {
   double s2,s4,s6,P1,P2,P3,P4,Q1,Q2,Q3,Q4;
   s =fp_abs.to_ieee()-coeff<double>::one;




   P1 = coeff<double>::pa[0]+s*coeff<double>::pa[1]; s2=s*s;
   Q1 = coeff<double>::one+s*coeff<double>::qa[1]; s4=s2*s2;
   P2 = coeff<double>::pa[2]+s*coeff<double>::pa[3]; s6=s4*s2;
   Q2 = coeff<double>::qa[2]+s*coeff<double>::qa[3];
   P3 = coeff<double>::pa[4]+s*coeff<double>::pa[5];
   Q3 = coeff<double>::qa[4]+s*coeff<double>::qa[5];
   P4 = coeff<double>::pa[6];
   Q4 = coeff<double>::qa[6];
   P = P1 + s2*P2 + s4*P3 + s6*P4;
   Q = Q1 + s2*Q2 + s4*Q3 + s6*Q4;

   if(hx>=0) {
  z = coeff<double>::one-coeff<double>::erx;
        return ap_fixed<W_,I_>(z - P/Q);
   } else {
  z = coeff<double>::erx+P/Q; return ap_fixed<W_,I_>(coeff<double>::one+z);
   }
 }
 if (ix < erfc_traits<double>::segment[6]) {
   x = fp_abs.to_ieee();
   s = coeff<double>::one/(x*x);
   if(ix< erfc_traits<double>::segment[7]) {






  double R1,R2,R3,R4,S1,S2,S3,S4,s2,s4,s6,s8;
     R1 = coeff<double>::ra[0]+s*coeff<double>::ra[1];s2 = s*s;
     S1 = coeff<double>::one+s*coeff<double>::sa[1]; s4 = s2*s2;
     R2 = coeff<double>::ra[2]+s*coeff<double>::ra[3];s6 = s4*s2;
     S2 = coeff<double>::sa[2]+s*coeff<double>::sa[3];s8 = s4*s4;
     R3 = coeff<double>::ra[4]+s*coeff<double>::ra[5];
     S3 = coeff<double>::sa[4]+s*coeff<double>::sa[5];
     R4 = coeff<double>::ra[6]+s*coeff<double>::ra[7];
     S4 = coeff<double>::sa[6]+s*coeff<double>::sa[7];
     R = R1 + s2*R2 + s4*R3 + s6*R4;
     S = S1 + s2*S2 + s4*S3 + s6*S4 + s8*coeff<double>::sa[8];

   } else {
  double R1,R2,R3,S1,S2,S3,S4,s2,s4,s6;
  if(hx<0&&ix>=erfc_traits<double>::segment[8]) return ap_fixed<W_,I_>(coeff<double>::two-coeff<double>::tiny);






  R1 = coeff<double>::rb[0]+s*coeff<double>::rb[1];s2 = s*s;
  S1 = coeff<double>::one+s*coeff<double>::sb[1]; s4 = s2*s2;
  R2 = coeff<double>::rb[2]+s*coeff<double>::rb[3];s6 = s4*s2;
  S2 = coeff<double>::sb[2]+s*coeff<double>::sb[3];
  R3 = coeff<double>::rb[4]+s*coeff<double>::rb[5];
  S3 = coeff<double>::sb[4]+s*coeff<double>::sb[5];
  S4 = coeff<double>::sb[6]+s*coeff<double>::sb[7];
  R = R1 + s2*R2 + s4*R3 + s6*coeff<double>::rb[6];
  S = S1 + s2*S2 + s4*S3 + s6*S4;

   }
   z = x;

   fp_struct<double> fp_z(z);
   ap_uint<Type_BitWidth<double>::Value> data = fp_z.data() & erf_traits<double>::mask;
   fp_struct<double> fp_z_new(data);
   z = fp_z_new.to_ieee();


   ap_fixed<W_, I_> r_fixed = exp_reduce::exp((ap_fixed<W_, I_>)(-z*z-(double)0.5625))*exp_reduce::exp((ap_fixed<W_, I_>)((z-x)*(z+x)+R/S));
   double r = r_fixed.to_double();
   double r_x = r/x;
   if(hx>0) {





        if(fp_x.exp == 0x0 && fp_x.sign!= 0x0){
   return 0;
        }
  return ap_fixed<W_,I_>(r_x);
   } else
  return ap_fixed<W_,I_>(coeff<double>::two-r_x);
 } else {
   if(hx>0) return ap_fixed<W_,I_>(coeff<double>::tiny*coeff<double>::tiny);
      else return ap_fixed<W_,I_>(coeff<double>::two-coeff<double>::tiny);
 }

}
template <int W_, int I_>
ap_ufixed<W_,I_> erfc(ap_ufixed<W_,I_> x) {
    ap_fixed<W_+1,I_+1> xs = x;
    return erfc(xs);
}

template <int I_>
ap_int<I_> erfc(ap_int<I_> x) {
    ap_fixed<I_,I_> xs = x;
    return erfc(xs);
}

template <int I_>
ap_uint<I_> erfc(ap_uint<I_> x) {
    ap_fixed<I_+1,I_+1> xs = x;
    return erfc(xs);
}

}
# 1033 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fmod_rem_quo_remainder_divide_apfixed.h" 1
# 40 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fmod_rem_quo_remainder_divide_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 41 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fmod_rem_quo_remainder_divide_apfixed.h" 2



namespace hls_internal{

    template <int W_, int I_>
    ap_fixed<W_,I_> generic_divide(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y){
        if(y==0){




                return 0;

        } else{
     return(x/y);
        }
    }

    template <int W_, int I_>
    ap_ufixed<W_,I_> generic_divide(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y){
     ap_fixed<W_+1,I_+1> x1 = x;
     ap_fixed<W_+1,I_+1> y1 = y;
     return generic_divide(x1,y1);
    }

    template <int I_>
    ap_int<I_> generic_divide(ap_int<I_> x, ap_int<I_> y){
     ap_fixed<I_,I_> x1 = x;
     ap_fixed<I_,I_> y1 = y;
     return generic_divide(x1,y1);
    }

    template <int I_>
    ap_uint<I_> generic_divide(ap_uint<I_> x, ap_uint<I_> y){
     ap_ufixed<I_,I_> x1 = x;
     ap_ufixed<I_,I_> y1 = y;
     return generic_divide(x1,y1);
    }

    template <int W_, int I_>
    ap_fixed<W_,I_> generic_fmod(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y){
        ap_ufixed<W_,I_> x_pos = fabs_fixed((ap_fixed<W_+1,I_+1>)x);
        ap_ufixed<W_,I_> y_pos = fabs_fixed((ap_fixed<W_+1,I_+1>)y);


        if(x_pos==0 || y_pos==0) return 0;
     else if(x_pos == y_pos) return 0;
        else if(x_pos < y_pos) return x;
        else {
            ap_uint<W_> x_int = 0;
            ap_uint<W_> y_int = 0;
            x_int(W_-1,0) = x_pos(W_-1,0);
            y_int(W_-1,0) = y_pos(W_-1,0);






            ap_uint<W_> d = x_int/y_int;

            ap_uint<W_> rem = x_int - d*y_int;

            ap_fixed<W_,I_> r = 0;
            r(W_-1,0) = rem(W_-1,0);
            if(x[W_-1]) return -r;
            else return r;
        }
    }


    template <int W_, int I_>
    ap_ufixed<W_,I_> generic_fmod(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y){
        ap_fixed<W_+1,I_+1> xi = x;
        ap_fixed<W_+1,I_+1> yi = y;
        return generic_fmod(xi,yi);
    }

    template <int I_>
    ap_int<I_> generic_fmod(ap_int<I_> x, ap_int<I_> y){
     ap_fixed<I_,I_> xi = x;
     ap_fixed<I_,I_> yi = y;
     return generic_fmod(xi,yi);
    }

    template <int I_>
    ap_uint<I_> generic_fmod(ap_uint<I_> x, ap_uint<I_> y){
     ap_fixed<I_+1,I_+1> xi = x;
     ap_fixed<I_+1,I_+1> yi = y;
     return generic_fmod(xi,yi);
    }


    template <int W_, int I_>
    ap_fixed<W_,I_> generic_remquo(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y, int* quo){
        ap_ufixed<W_,I_> x_pos = fabs_fixed((ap_fixed<W_+1,I_+1>)x);
        ap_ufixed<W_,I_> y_pos = fabs_fixed((ap_fixed<W_+1,I_+1>)y);
        if(x_pos==0 || y_pos==0) {
           *quo = 0;
           return 0;
        } else if(x_pos == y_pos) {
           if(x[W_-1]==y[W_-1]) *quo = 1;
           else *quo = -1;
           return 0;
        }

        else {
            ap_uint<W_> x_int = 0;
            ap_uint<W_> y_int = 0;
            x_int(W_-1,0) = x_pos(W_-1,0);
            y_int(W_-1,0) = y_pos(W_-1,0);





            ap_uint<W_> d = x_int/y_int;
            ap_uint<W_> rem = x_int - d*y_int;

            ap_uint<W_> y_half = 0;
            y_half(W_-2,0) = y_int(W_-1,1);
            ap_uint<1> r_sig = x[W_-1];
            if(rem > y_half) {
                rem = y_int - rem;
                d++;
                if(x[W_-1]) r_sig = 0;
                else r_sig = 1;
            }

            if(x[W_-1]==y[W_-1]) *quo = d;
            else *quo = -d;
            ap_fixed<W_,I_> r = 0;
            r(W_-1,0) = rem(W_-1,0);
            if(r_sig) return -r;
            else return r;
        }
    }

    template <int W_, int I_>
    ap_ufixed<W_,I_> generic_remquo(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y, int* quo){
     ap_fixed<W_+1,I_+1> xi = x;
     ap_fixed<W_+1,I_+1> yi = y;
     return generic_remquo(xi,yi,quo);
    }

    template <int I_>
    ap_int<I_> generic_remquo(ap_int<I_> x, ap_int<I_> y, int* quo){
     ap_fixed<I_,I_> xi = x;
     ap_fixed<I_,I_> yi = y;
     return generic_remquo(xi,yi,quo);
    }

    template <int I_>
    ap_uint<I_> generic_remquo(ap_uint<I_> x, ap_uint<I_> y, int* quo){
     ap_fixed<I_+1,I_+1> xi = x;
     ap_fixed<I_+1,I_+1> yi = y;
     return generic_remquo(xi,yi,quo);
    }


    template <int W_, int I_>
    ap_fixed<W_,I_> generic_remainder(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y){
        int quo = 0;
        return generic_remquo(x, y, &quo);
    }

    template <int W_, int I_>
    ap_ufixed<W_,I_> generic_remainder(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y){
        ap_fixed<W_+1, I_+1> xi = x;
        ap_fixed<W_+1, I_+1> yi = y;
        return generic_remainder(xi,yi);
    }

    template <int I_>
    ap_int<I_> generic_remainder(ap_int<I_> x, ap_int<I_> y){
     ap_fixed<I_,I_> xi = x;
     ap_fixed<I_,I_> yi = y;
     return generic_remainder(xi,yi);
    }

    template <int I_>
    ap_uint<I_> generic_remainder(ap_uint<I_> x, ap_uint<I_> y){
     ap_fixed<I_+1,I_+1> xi = x;
     ap_fixed<I_+1,I_+1> yi = y;
     return generic_remainder(xi,yi);
    }
}
# 1034 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fract_apfixed.h" 1






# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_traits.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_traits.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 37 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_traits.h" 2





namespace hls
{

template<typename T>
struct x_traits_default {
  typedef T ADD_T;
  typedef T SUB_T;
  typedef T SAT_T;
  typedef T MULT_T;
  typedef T MADD_T;
};

template<typename T1, typename T2>
struct x_traits {
# 67 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_traits.h"
};
template<typename T2>
struct x_traits<double, T2> : public x_traits_default<double> { };

template<typename T1>
struct x_traits<T1, double> : public x_traits_default<double> { };

template<typename T2>
struct x_traits<float, T2> : public x_traits_default<float> { };

template<typename T1>
struct x_traits<T1, float> : public x_traits_default<float> { };

template<typename T2>
struct x_traits<half, T2> : public x_traits_default<float> { };

template<typename T1>
struct x_traits<T1, half> : public x_traits_default<float> { };
# 100 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_traits.h"
template<>
struct x_traits< char , char > : public x_traits_default< char > {};

template<>
struct x_traits< char , signed char > : public x_traits_default< signed char > {};

template<>
struct x_traits< char , unsigned char > : public x_traits_default< unsigned char > {};

template<>
struct x_traits< char , short > : public x_traits_default< short > {};

template<>
struct x_traits< char , unsigned short > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< char , int > : public x_traits_default< int > {};

template<>
struct x_traits< char , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< char , long > : public x_traits_default< long > {};

template<>
struct x_traits< char , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< char , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< char , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< char , half > : public x_traits_default< float > {};

template<>
struct x_traits< char , float > : public x_traits_default< float > {};

template<>
struct x_traits< char , double > : public x_traits_default< double > {};

template<>
struct x_traits< signed char , char > : public x_traits_default< signed char > {};

template<>
struct x_traits< signed char , signed char > : public x_traits_default< signed char > {};

template<>
struct x_traits< signed char , unsigned char > : public x_traits_default< unsigned char > {};

template<>
struct x_traits< signed char , short > : public x_traits_default< short > {};

template<>
struct x_traits< signed char , unsigned short > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< signed char , int > : public x_traits_default< int > {};

template<>
struct x_traits< signed char , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< signed char , long > : public x_traits_default< long > {};

template<>
struct x_traits< signed char , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< signed char , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< signed char , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< signed char , half > : public x_traits_default< float > {};

template<>
struct x_traits< signed char , float > : public x_traits_default< float > {};

template<>
struct x_traits< signed char , double > : public x_traits_default< double > {};

template<>
struct x_traits< unsigned char , char > : public x_traits_default< unsigned char > {};

template<>
struct x_traits< unsigned char , signed char > : public x_traits_default< unsigned char > {};

template<>
struct x_traits< unsigned char , unsigned char > : public x_traits_default< unsigned char > {};

template<>
struct x_traits< unsigned char , short > : public x_traits_default< short > {};

template<>
struct x_traits< unsigned char , unsigned short > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< unsigned char , int > : public x_traits_default< int > {};

template<>
struct x_traits< unsigned char , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned char , long > : public x_traits_default< long > {};

template<>
struct x_traits< unsigned char , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned char , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< unsigned char , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< unsigned char , half > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned char , float > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned char , double > : public x_traits_default< double > {};

template<>
struct x_traits< short , char > : public x_traits_default< short > {};

template<>
struct x_traits< short , signed char > : public x_traits_default< short > {};

template<>
struct x_traits< short , unsigned char > : public x_traits_default< short > {};

template<>
struct x_traits< short , short > : public x_traits_default< short > {};

template<>
struct x_traits< short , unsigned short > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< short , int > : public x_traits_default< int > {};

template<>
struct x_traits< short , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< short , long > : public x_traits_default< long > {};

template<>
struct x_traits< short , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< short , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< short , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< short , half > : public x_traits_default< float > {};

template<>
struct x_traits< short , float > : public x_traits_default< float > {};

template<>
struct x_traits< short , double > : public x_traits_default< double > {};

template<>
struct x_traits< unsigned short , char > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< unsigned short , signed char > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< unsigned short , unsigned char > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< unsigned short , short > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< unsigned short , unsigned short > : public x_traits_default< unsigned short > {};

template<>
struct x_traits< unsigned short , int > : public x_traits_default< int > {};

template<>
struct x_traits< unsigned short , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned short , long > : public x_traits_default< long > {};

template<>
struct x_traits< unsigned short , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned short , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< unsigned short , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< unsigned short , half > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned short , float > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned short , double > : public x_traits_default< double > {};

template<>
struct x_traits< int , char > : public x_traits_default< int > {};

template<>
struct x_traits< int , signed char > : public x_traits_default< int > {};

template<>
struct x_traits< int , unsigned char > : public x_traits_default< int > {};

template<>
struct x_traits< int , short > : public x_traits_default< int > {};

template<>
struct x_traits< int , unsigned short > : public x_traits_default< int > {};

template<>
struct x_traits< int , int > : public x_traits_default< int > {};

template<>
struct x_traits< int , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< int , long > : public x_traits_default< long > {};

template<>
struct x_traits< int , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< int , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< int , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< int , half > : public x_traits_default< float > {};

template<>
struct x_traits< int , float > : public x_traits_default< float > {};

template<>
struct x_traits< int , double > : public x_traits_default< double > {};

template<>
struct x_traits< unsigned int , char > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , signed char > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , unsigned char > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , short > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , unsigned short > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , unsigned int > : public x_traits_default< unsigned int > {};

template<>
struct x_traits< unsigned int , long > : public x_traits_default< long > {};

template<>
struct x_traits< unsigned int , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned int , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< unsigned int , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< unsigned int , half > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned int , float > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned int , double > : public x_traits_default< double > {};

template<>
struct x_traits< long , char > : public x_traits_default< long > {};

template<>
struct x_traits< long , signed char > : public x_traits_default< long > {};

template<>
struct x_traits< long , unsigned char > : public x_traits_default< long > {};

template<>
struct x_traits< long , short > : public x_traits_default< long > {};

template<>
struct x_traits< long , unsigned short > : public x_traits_default< long > {};

template<>
struct x_traits< long , int > : public x_traits_default< long > {};

template<>
struct x_traits< long , unsigned int > : public x_traits_default< long > {};

template<>
struct x_traits< long , long > : public x_traits_default< long > {};

template<>
struct x_traits< long , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< long , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< long , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< long , half > : public x_traits_default< float > {};

template<>
struct x_traits< long , float > : public x_traits_default< float > {};

template<>
struct x_traits< long , double > : public x_traits_default< double > {};

template<>
struct x_traits< unsigned long , char > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , signed char > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , unsigned char > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , short > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , unsigned short > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , int > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , unsigned int > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , unsigned long > : public x_traits_default< unsigned long > {};

template<>
struct x_traits< unsigned long , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< unsigned long , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< unsigned long , half > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned long , float > : public x_traits_default< float > {};

template<>
struct x_traits< unsigned long , double > : public x_traits_default< double > {};

template<>
struct x_traits< ap_slong , char > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , signed char > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , unsigned char > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , short > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , unsigned short > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , int > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , unsigned int > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , long > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , unsigned long > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , ap_slong > : public x_traits_default< ap_slong > {};

template<>
struct x_traits< ap_slong , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_slong , half > : public x_traits_default< float > {};

template<>
struct x_traits< ap_slong , float > : public x_traits_default< float > {};

template<>
struct x_traits< ap_slong , double > : public x_traits_default< double > {};

template<>
struct x_traits< ap_ulong , char > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , signed char > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , unsigned char > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , short > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , unsigned short > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , int > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , unsigned int > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , long > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , unsigned long > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , ap_slong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , ap_ulong > : public x_traits_default< ap_ulong > {};

template<>
struct x_traits< ap_ulong , half > : public x_traits_default< float > {};

template<>
struct x_traits< ap_ulong , float > : public x_traits_default< float > {};

template<>
struct x_traits< ap_ulong , double > : public x_traits_default< double > {};

template<>
struct x_traits< half , char > : public x_traits_default< float > {};

template<>
struct x_traits< half , signed char > : public x_traits_default< float > {};

template<>
struct x_traits< half , unsigned char > : public x_traits_default< float > {};

template<>
struct x_traits< half , short > : public x_traits_default< float > {};

template<>
struct x_traits< half , unsigned short > : public x_traits_default< float > {};

template<>
struct x_traits< half , int > : public x_traits_default< float > {};

template<>
struct x_traits< half , unsigned int > : public x_traits_default< float > {};

template<>
struct x_traits< half , long > : public x_traits_default< float > {};

template<>
struct x_traits< half , unsigned long > : public x_traits_default< float > {};

template<>
struct x_traits< half , ap_slong > : public x_traits_default< float > {};

template<>
struct x_traits< half , ap_ulong > : public x_traits_default< float > {};

template<>
struct x_traits< half , half > : public x_traits_default< half > {};

template<>
struct x_traits< half , float > : public x_traits_default< float > {};

template<>
struct x_traits< half , double > : public x_traits_default< double > {};

template<>
struct x_traits< float , char > : public x_traits_default< float > {};

template<>
struct x_traits< float , signed char > : public x_traits_default< float > {};

template<>
struct x_traits< float , unsigned char > : public x_traits_default< float > {};

template<>
struct x_traits< float , short > : public x_traits_default< float > {};

template<>
struct x_traits< float , unsigned short > : public x_traits_default< float > {};

template<>
struct x_traits< float , int > : public x_traits_default< float > {};

template<>
struct x_traits< float , unsigned int > : public x_traits_default< float > {};

template<>
struct x_traits< float , long > : public x_traits_default< float > {};

template<>
struct x_traits< float , unsigned long > : public x_traits_default< float > {};

template<>
struct x_traits< float , ap_slong > : public x_traits_default< float > {};

template<>
struct x_traits< float , ap_ulong > : public x_traits_default< float > {};

template<>
struct x_traits< float , half > : public x_traits_default< float > {};

template<>
struct x_traits< float , float > : public x_traits_default< float > {};

template<>
struct x_traits< float , double > : public x_traits_default< double > {};

template<>
struct x_traits< double , char > : public x_traits_default< double > {};

template<>
struct x_traits< double , signed char > : public x_traits_default< double > {};

template<>
struct x_traits< double , unsigned char > : public x_traits_default< double > {};

template<>
struct x_traits< double , short > : public x_traits_default< double > {};

template<>
struct x_traits< double , unsigned short > : public x_traits_default< double > {};

template<>
struct x_traits< double , int > : public x_traits_default< double > {};

template<>
struct x_traits< double , unsigned int > : public x_traits_default< double > {};

template<>
struct x_traits< double , long > : public x_traits_default< double > {};

template<>
struct x_traits< double , unsigned long > : public x_traits_default< double > {};

template<>
struct x_traits< double , ap_slong > : public x_traits_default< double > {};

template<>
struct x_traits< double , ap_ulong > : public x_traits_default< double > {};

template<>
struct x_traits< double , half > : public x_traits_default< double > {};

template<>
struct x_traits< double , float > : public x_traits_default< double > {};

template<>
struct x_traits< double , double > : public x_traits_default< double > {};





template<int A,int B> class MAX{
  public:
    const static int value = (A > B) ? A : B;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_fixed<W2,I2,Q2,O2> > {
    typedef typename ap_fixed<W1,I1>::template RType<W2,I2,true> RTYPE;
    typedef ap_fixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_fixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
 typedef ap_fixed<W1,I1,AP_RND,AP_SAT> SAT_T;
 typedef ap_fixed<W1+W2+1,I1+I2+1> MADD_T;
 typedef ap_fixed<W1+W2+2,I1+I2+2> CMADD_T;
 typedef ap_fixed<(2*W1)+1,(2*I1)> CONJ_SQ_T;
 typedef ap_fixed<(2*W1)+2,(2*I1)+1> CONJ_SQ_2_T;
    typedef ap_fixed<2*(MAX<I1,W1-I1>::value+1),(MAX<I1,W1-I1>::value+1)> INV_T;
    typedef int INT_T;
    typedef float_struct<24,8> FLOAT_STRUCT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_ufixed<W2,I2,Q2,O2> > {
    typedef typename ap_fixed<W1,I1>::template RType<W2,I2,false> RTYPE;
    typedef ap_fixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_fixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_fixed<W2,I2,Q2,O2> > {
    typedef typename ap_ufixed<W1,I1>::template RType<W2,I2,true> RTYPE;
    typedef ap_fixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_fixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_ufixed<W2,I2,Q2,O2> > {
    typedef typename ap_ufixed<W1,I1>::template RType<W2,I2,false> RTYPE;
    typedef ap_ufixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_ufixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
 typedef ap_ufixed<W1,I1,AP_RND,AP_SAT> SAT_T;
 typedef ap_ufixed<W1+W2+1,I1+I2+1> MADD_T;
 typedef ap_ufixed<W1+W2+2,I1+I2+2> CMADD_T;
 typedef ap_ufixed<(2*W1)+1,(2*I1)> CONJ_SQ_T;
 typedef ap_ufixed<(2*W1)+2,(2*I1)+1> CONJ_SQ_2_T;
    typedef ap_ufixed<2*(MAX<I1,W1-I1>::value+1),(MAX<I1,W1-I1>::value+1)> INV_T;
    typedef int INT_T;
    typedef float_struct<24,8> FLOAT_STRUCT_T;
};

template<int W1, int W2>
struct x_traits<ap_int<W1>,ap_int<W2> > {
 typedef ap_int<MAX<W1,W2>::value + 1> ADD_T;
 typedef ap_int<MAX<W1,W2>::value + 1> SUB_T;
 typedef ap_int<W1+W2> MULT_T;
 typedef ap_int<(W1 > W2)? W1:W2> MADD_T;
};

template<int W1, int W2>
struct x_traits<ap_int<W1>,ap_uint<W2> > {
 typedef ap_int<MAX<W1,W2+1>::value + 1> ADD_T;
 typedef ap_int<MAX<W1,W2+1>::value + 1> SUB_T;
 typedef ap_int<W1+W2> MULT_T;
};

template<int W1, int W2>
struct x_traits<ap_uint<W1>,ap_int<W2> > {
 typedef ap_int<MAX<W1+1,W2>::value + 1> ADD_T;
 typedef ap_int<MAX<W1+1,W2>::value + 1> SUB_T;
 typedef ap_int<W1+W2> MULT_T;
};

template<int W1, int W2>
struct x_traits<ap_uint<W1>,ap_uint<W2> > {
 typedef ap_uint<MAX<W1,W2>::value + 1> ADD_T;
 typedef ap_int<MAX<W1,W2>::value + 1> SUB_T;
 typedef ap_uint<W1+W2> MULT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_int<W2> > : public x_traits<ap_fixed<W1,I1>, ap_fixed<W2,W2> > {};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_uint<W2> > : public x_traits<ap_fixed<W1,I1>, ap_ufixed<W2,W2> > {};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_int<W2> > : public x_traits<ap_ufixed<W1,I1>, ap_fixed<W2,W2> > {};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_uint<W2> > : public x_traits<ap_ufixed<W1,I1>, ap_ufixed<W2,W2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_int<W1>, ap_fixed<W2,I2,Q2,O2> > : public x_traits<ap_fixed<W1,W1>, ap_fixed<W2,I2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_int<W1>, ap_ufixed<W2,I2,Q2,O2> > : public x_traits<ap_fixed<W1,W1>, ap_ufixed<W2,I2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_uint<W1>, ap_fixed<W2,I2,Q2,O2> > : public x_traits<ap_ufixed<W1,W1>, ap_fixed<W2,I2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_uint<W1>, ap_ufixed<W2,I2,Q2,O2> > : public x_traits<ap_ufixed<W1,W1>, ap_ufixed<W2,I2> > {};




    template<typename T> struct fixed_type { };
    template<> struct fixed_type<char> { typedef ap_fixed<8,8> T; };
    template<> struct fixed_type<unsigned char> { typedef ap_ufixed<8,8> T; };
    template<> struct fixed_type<short> { typedef ap_fixed<16,16> T; };
    template<> struct fixed_type<unsigned short> { typedef ap_ufixed<16,16> T; };
    template<> struct fixed_type<int> { typedef ap_fixed<32,32> T; };
    template<> struct fixed_type<unsigned int> { typedef ap_ufixed<32,32> T; };
    template<> struct fixed_type<float> { typedef ap_ufixed<64,32> T; };
    template<int W> struct fixed_type<ap_int<W> > { typedef ap_fixed<W,W> T; };
    template<int W> struct fixed_type<ap_uint<W> > { typedef ap_ufixed<W,W> T; };
    template<int W, int I, ap_q_mode _AP_Q, ap_o_mode _AP_O> struct fixed_type<ap_fixed<W,I, _AP_Q, _AP_O> > { typedef ap_fixed<W,I> T; };
    template<int W, int I, ap_q_mode _AP_Q, ap_o_mode _AP_O> struct fixed_type<ap_ufixed<W,I, _AP_Q, _AP_O> > { typedef ap_ufixed<W,I> T; };

template<typename T1, int DIM>
struct x_traits_d_default {
    typedef T1 ACCUM_T;
    typedef T1 ACCUM2_T;
    typedef T1 ADD_TREE_T;
};

template<typename T1, int DIM>
struct x_traits_d {};

template<int DIM>
struct x_traits_d <int,DIM>:x_traits_d_default<int, DIM> {};

template<int DIM>
struct x_traits_d <float,DIM>:x_traits_d_default<float, DIM> {};

template<int DIM>
struct x_traits_d <double,DIM>:x_traits_d_default<double, DIM> {};

template<int DIM>
struct x_traits_d <half,DIM>:x_traits_d_default<half, DIM> {};

template<int W, int DIM>
struct x_traits_d <ap_int<W>,DIM> {
    typedef ap_int<W> ACCUM_T;
    typedef ap_int<2*W> ACCUM2_T;
    typedef ap_int<25+W> ADD_TREE_T;
};

template<int W, int DIM>
struct x_traits_d <ap_uint<W>,DIM> {
    typedef ap_uint<W> ACCUM_T;
    typedef ap_uint<2*W> ACCUM2_T;
    typedef ap_uint<25+W> ADD_TREE_T;
};

template<int W, int I, ap_q_mode Q, ap_o_mode O, int DIM>
struct x_traits_d <ap_fixed<W,I,Q,O>,DIM> {
    typedef ap_fixed<W+BitWidth<DIM>::Value,I+BitWidth<DIM>::Value,Q,O> ACCUM_T;
    typedef ap_fixed<(2*W)+BitWidth<DIM>::Value,(2*I)+BitWidth<DIM>::Value,Q,O> ACCUM2_T;
    typedef ap_fixed<25+W+BitWidth<DIM>::Value,25+I+BitWidth<DIM>::Value,Q,O> ADD_TREE_T;
};

template<int W, int I, ap_q_mode Q, ap_o_mode O, int DIM>
struct x_traits_d <ap_ufixed<W,I,Q,O>,DIM> {
    typedef ap_ufixed<W+BitWidth<DIM>::Value,I+BitWidth<DIM>::Value,Q,O> ACCUM_T;
    typedef ap_ufixed<(2*W)+BitWidth<DIM>::Value,(2*I)+BitWidth<DIM>::Value,Q,O> ACCUM2_T;
    typedef ap_ufixed<25+W+BitWidth<DIM>::Value,25+I+BitWidth<DIM>::Value,Q,O> ADD_TREE_T;
};

}



namespace hlstmp
{

template<typename T>
struct x_traits_default {
  typedef T ADD_T;
  typedef T SUB_T;
  typedef T SAT_T;
  typedef T MULT_T;
  typedef T MADD_T;
};

template<typename T1, typename T2>
struct x_traits {
# 893 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/utils/x_hls_traits.h"
};

template<>
struct x_traits<double, double> : public x_traits_default<double> { };

template<typename T2>
struct x_traits<double, T2> : public x_traits_default<double> { };

template<typename T1>
struct x_traits<T1, double> : public x_traits_default<double> { };

template<>
struct x_traits<float, float> : public x_traits_default<float> { };

template<typename T2>
struct x_traits<float, T2> : public x_traits_default<float> { };

template<typename T1>
struct x_traits<T1, float> : public x_traits_default<float> { };

template<>
struct x_traits<half, half> : public x_traits_default<half> { };

template<typename T2>
struct x_traits<half, T2> : public x_traits_default<float> { };

template<typename T1>
struct x_traits<T1, half> : public x_traits_default<float> { };

template<>
struct x_traits<double, float> : public x_traits_default<double> { };

template<>
struct x_traits<float, double> : public x_traits_default<double> { };

template<>
struct x_traits<double, half> : public x_traits_default<double> { };

template<>
struct x_traits<half, double> : public x_traits_default<double> { };

template<>
struct x_traits<int, int> : public x_traits_default<int> { };

template<>
struct x_traits<unsigned int, unsigned int> : public x_traits_default<unsigned int> { };

template<>
struct x_traits<int64_t, int64_t> : public x_traits_default<int64_t> { };

template<int A,int B> class MAX{
  public:
    const static int value = (A > B) ? A : B;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_fixed<W2,I2,Q2,O2> > {
    typedef typename ap_fixed<W1,I1>::template RType<W2,I2,true> RTYPE;
    typedef ap_fixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_fixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
 typedef ap_fixed<W1,I1,AP_RND,AP_SAT> SAT_T;
 typedef ap_fixed<W1+W2+1,I1+I2+1> MADD_T;
 typedef ap_fixed<W1+W2+2,I1+I2+2> CMADD_T;
 typedef ap_fixed<(2*W1)+1,(2*I1)> CONJ_SQ_T;
 typedef ap_fixed<(2*W1)+2,(2*I1)+1> CONJ_SQ_2_T;
    typedef ap_fixed<2*(MAX<I1,W1-I1>::value+1),(MAX<I1,W1-I1>::value+1)> INV_T;
    typedef int INT_T;
    typedef float_struct<24,8> FLOAT_STRUCT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_ufixed<W2,I2,Q2,O2> > {
    typedef typename ap_fixed<W1,I1>::template RType<W2,I2,false> RTYPE;
    typedef ap_fixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_fixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_fixed<W2,I2,Q2,O2> > {
    typedef typename ap_ufixed<W1,I1>::template RType<W2,I2,true> RTYPE;
    typedef ap_fixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_fixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_ufixed<W2,I2,Q2,O2> > {
    typedef typename ap_ufixed<W1,I1>::template RType<W2,I2,false> RTYPE;
    typedef ap_ufixed<RTYPE::plus_w, RTYPE::plus_i> ADD_T;
    typedef ap_fixed<RTYPE::minus_w, RTYPE::minus_i> SUB_T;
    typedef ap_ufixed<RTYPE::mult_w, RTYPE::mult_i> MULT_T;
 typedef ap_ufixed<W1,I1,AP_RND,AP_SAT> SAT_T;
 typedef ap_ufixed<W1+W2+1,I1+I2+1> MADD_T;
 typedef ap_ufixed<W1+W2+2,I1+I2+2> CMADD_T;
 typedef ap_ufixed<(2*W1)+1,(2*I1)> CONJ_SQ_T;
 typedef ap_ufixed<(2*W1)+2,(2*I1)+1> CONJ_SQ_2_T;
    typedef ap_ufixed<2*(MAX<I1,W1-I1>::value+1),(MAX<I1,W1-I1>::value+1)> INV_T;
    typedef int INT_T;
    typedef float_struct<24,8> FLOAT_STRUCT_T;
};

template<int W1, int W2>
struct x_traits<ap_int<W1>,ap_int<W2> > {
 typedef ap_int<MAX<W1,W2>::value + 1> ADD_T;
 typedef ap_int<MAX<W1,W2>::value + 1> SUB_T;
 typedef ap_int<W1+W2> MULT_T;
 typedef ap_int<(W1 > W2)? W1:W2> MADD_T;
};

template<int W1, int W2>
struct x_traits<ap_int<W1>,ap_uint<W2> > {
 typedef ap_int<MAX<W1,W2+1>::value + 1> ADD_T;
 typedef ap_int<MAX<W1,W2+1>::value + 1> SUB_T;
 typedef ap_int<W1+W2> MULT_T;
};

template<int W1, int W2>
struct x_traits<ap_uint<W1>,ap_int<W2> > {
 typedef ap_int<MAX<W1+1,W2>::value + 1> ADD_T;
 typedef ap_int<MAX<W1+1,W2>::value + 1> SUB_T;
 typedef ap_int<W1+W2> MULT_T;
};

template<int W1, int W2>
struct x_traits<ap_uint<W1>,ap_uint<W2> > {
 typedef ap_uint<MAX<W1,W2>::value + 1> ADD_T;
 typedef ap_int<MAX<W1,W2>::value + 1> SUB_T;
 typedef ap_uint<W1+W2> MULT_T;
};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_int<W2> > : public x_traits<ap_fixed<W1,I1>, ap_fixed<W2,W2> > {};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_fixed<W1,I1,Q1,O1>,ap_uint<W2> > : public x_traits<ap_fixed<W1,I1>, ap_ufixed<W2,W2> > {};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_int<W2> > : public x_traits<ap_ufixed<W1,I1>, ap_fixed<W2,W2> > {};

template<int W1, int I1, ap_q_mode Q1, ap_o_mode O1, int W2>
struct x_traits<ap_ufixed<W1,I1,Q1,O1>,ap_uint<W2> > : public x_traits<ap_ufixed<W1,I1>, ap_ufixed<W2,W2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_int<W1>, ap_fixed<W2,I2,Q2,O2> > : public x_traits<ap_fixed<W1,W1>, ap_fixed<W2,I2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_int<W1>, ap_ufixed<W2,I2,Q2,O2> > : public x_traits<ap_fixed<W1,W1>, ap_ufixed<W2,I2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_uint<W1>, ap_fixed<W2,I2,Q2,O2> > : public x_traits<ap_ufixed<W1,W1>, ap_fixed<W2,I2> > {};

template<int W1, int W2, int I2, ap_q_mode Q2, ap_o_mode O2>
struct x_traits<ap_uint<W1>, ap_ufixed<W2,I2,Q2,O2> > : public x_traits<ap_ufixed<W1,W1>, ap_ufixed<W2,I2> > {};




    template<typename T> struct fixed_type { };
    template<> struct fixed_type<char> { typedef ap_fixed<8,8> T; };
    template<> struct fixed_type<unsigned char> { typedef ap_ufixed<8,8> T; };
    template<> struct fixed_type<short> { typedef ap_fixed<16,16> T; };
    template<> struct fixed_type<unsigned short> { typedef ap_ufixed<16,16> T; };
    template<> struct fixed_type<int> { typedef ap_fixed<32,32> T; };
    template<> struct fixed_type<unsigned int> { typedef ap_ufixed<32,32> T; };
    template<> struct fixed_type<float> { typedef ap_ufixed<64,32> T; };
    template<int W> struct fixed_type<ap_int<W> > { typedef ap_fixed<W,W> T; };
    template<int W> struct fixed_type<ap_uint<W> > { typedef ap_ufixed<W,W> T; };
    template<int W, int I, ap_q_mode _AP_Q, ap_o_mode _AP_O> struct fixed_type<ap_fixed<W,I, _AP_Q, _AP_O> > { typedef ap_fixed<W,I> T; };
    template<int W, int I, ap_q_mode _AP_Q, ap_o_mode _AP_O> struct fixed_type<ap_ufixed<W,I, _AP_Q, _AP_O> > { typedef ap_ufixed<W,I> T; };

template<typename T1, int DIM>
struct x_traits_d_default {
    typedef T1 ACCUM_T;
    typedef T1 ACCUM2_T;
    typedef T1 ADD_TREE_T;
};

template<typename T1, int DIM>
struct x_traits_d {};

template<int DIM>
struct x_traits_d <int,DIM>:x_traits_d_default<int, DIM> {};

template<int DIM>
struct x_traits_d <float,DIM>:x_traits_d_default<float, DIM> {};

template<int DIM>
struct x_traits_d <double,DIM>:x_traits_d_default<double, DIM> {};

template<int DIM>
struct x_traits_d <half,DIM>:x_traits_d_default<half, DIM> {};

template<int W, int DIM>
struct x_traits_d <ap_int<W>,DIM> {
    typedef ap_int<W> ACCUM_T;
    typedef ap_int<2*W> ACCUM2_T;
    typedef ap_int<25+W> ADD_TREE_T;
};

template<int W, int DIM>
struct x_traits_d <ap_uint<W>,DIM> {
    typedef ap_uint<W> ACCUM_T;
    typedef ap_uint<2*W> ACCUM2_T;
    typedef ap_uint<25+W> ADD_TREE_T;
};

template<int W, int I, ap_q_mode Q, ap_o_mode O, int DIM>
struct x_traits_d <ap_fixed<W,I,Q,O>,DIM> {
    typedef ap_fixed<W+BitWidth<DIM>::Value,I+BitWidth<DIM>::Value,Q,O> ACCUM_T;
    typedef ap_fixed<(2*W)+BitWidth<DIM>::Value,(2*I)+BitWidth<DIM>::Value,Q,O> ACCUM2_T;
    typedef ap_fixed<25+W+BitWidth<DIM>::Value,25+I+BitWidth<DIM>::Value,Q,O> ADD_TREE_T;
};

template<int W, int I, ap_q_mode Q, ap_o_mode O, int DIM>
struct x_traits_d <ap_ufixed<W,I,Q,O>,DIM> {
    typedef ap_ufixed<W+BitWidth<DIM>::Value,I+BitWidth<DIM>::Value,Q,O> ACCUM_T;
    typedef ap_ufixed<(2*W)+BitWidth<DIM>::Value,(2*I)+BitWidth<DIM>::Value,Q,O> ACCUM2_T;
    typedef ap_ufixed<25+W+BitWidth<DIM>::Value,25+I+BitWidth<DIM>::Value,Q,O> ADD_TREE_T;
};

}
# 8 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_fract_apfixed.h" 2

namespace hls_fract {

template <int W_, int I_>
ap_fixed<W_,I_> generic_fract(ap_fixed<W_,I_> x){
 if (W_==I_)return 0;
 ap_fixed<W_-I_+1,1> x1=x;
 ap_fixed<W_-I_+1,1> x2=x1+ap_int<2>(1);
 return x[W_-1]?x2:x1;
}

template <int W_, int I_>
ap_ufixed<W_,I_> generic_fract(ap_ufixed<W_,I_> x){
 ap_fixed<W_+1,I_+1> x1=x;
 return generic_fract(x1);
}

template <int I_>
ap_int<I_> generic_fract(ap_int<I_> x){
 ap_fixed<I_,I_> x1 = x;
 return generic_fract(x1);
}

template <int I_>
ap_uint<I_> generic_fract(ap_uint<I_> x){
 ap_ufixed<I_,I_> x1 = x;
 return generic_fract(x1);
}
}
# 1035 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_mad_apfixed.h" 1




namespace hls_mad {

    template <int W_, int I_>
    ap_fixed<W_,I_> generic_mad(ap_fixed<W_,I_> x, ap_fixed<W_,I_> y, ap_fixed<W_,I_> z){
        const unsigned int F_ = W_ - I_;
        ap_fixed<2*W_, 2*I_> mul = x * y;

        ap_fixed<2, -F_> delta = 0;
        delta[0] = 1;
        delta[1] = mul[2*W_-1];

        mul += delta;

        ap_fixed<W_+1, I_+1> mul_s = mul;
        ap_fixed<W_+1, I_+1> sum = mul_s + z;
        ap_fixed<W_,I_> r = 0;

        if(sum[W_-1]!=sum[W_]) {
           for(int i = 0; i < W_-1; ++i) {
#pragma HLS unroll
 r[i] = !sum[W_];
           }
           r[W_-1] = sum[W_];
        } else {
           r = sum;
        }
        return r;
    }

    template <int W_, int I_>
    ap_ufixed<W_,I_> generic_mad(ap_ufixed<W_,I_> x, ap_ufixed<W_,I_> y, ap_ufixed<W_,I_> z){
        ap_fixed<W_+1, I_+1> xi = x;
        ap_fixed<W_+1, I_+1> yi = y;
        ap_fixed<W_+1, I_+1> zi = z;
        return generic_mad(xi, yi, zi);
    }

    template <int I_>
    ap_int<I_> generic_mad(ap_int<I_> x, ap_int<I_> y, ap_int<I_> z){
        ap_fixed<I_, I_> xi = x;
        ap_fixed<I_, I_> yi = y;
        ap_fixed<I_, I_> zi = z;
        return generic_mad(xi, yi, zi);
    }

    template <int I_>
    ap_uint<I_> generic_mad(ap_uint<I_> x, ap_uint<I_> y, ap_uint<I_> z){
        ap_fixed<I_+1,I_+1> xi = x;
        ap_fixed<I_+1,I_+1> yi = y;
        ap_fixed<I_+1,I_+1> zi = z;
        return generic_mad(xi,yi,zi);
    }
}
# 1036 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cbrt_apfixed.h" 1
# 40 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cbrt_apfixed.h"
namespace cbrt_internal{
template <int W, int I>
ap_fixed<W, I> cbrt_fixed(ap_fixed<W,I> x) {






   const int F = W - I;
   if(I > 33) return 0;
   else if(F > 32) return 0;

   ap_fixed<W+1, I+1> xi = x;
   ap_ufixed<W, I> x_p = fabs_fixed(xi);





   ap_ufixed<F +(I+2)/3, (I+2)/3> r = 0;;
      const static int prcs = (F+1)*3;
_ssdm_SpecConstant(&prcs);
# 61 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cbrt_apfixed.h"

      const static int msbr = (I>0)? (I+2)/3 : 1;
_ssdm_SpecConstant(&msbr);
# 62 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cbrt_apfixed.h"

      ap_ufixed<2*msbr+prcs+2,2*msbr+2> resq = 0;
      ap_ufixed<msbr+prcs+1, msbr+1> res = 0;
      ap_ufixed<3*msbr+prcs+4, 3*msbr+4> x_rem = x_p;
      for(int pos = msbr - 1 ; pos >= -F-1; pos--) {
          ap_ufixed<3*msbr+prcs+2, 3*msbr+2> mul1a = 0;
          ap_ufixed<3*msbr+prcs+1, 3*msbr+1> mul1b = 0;




          mul1a(pos+2*msbr+prcs+2, prcs+3*pos+3) = resq(prcs+2*msbr+1, prcs+2*pos+2);

          mul1b(pos+2*msbr+prcs+1, prcs+3*pos+2) = resq(prcs+2*msbr+1, prcs+2*pos+2);



          ap_ufixed<3*msbr+prcs, 3*msbr> mul2a = 0;
          ap_ufixed<3*msbr+prcs-1, 3*msbr-1> mul2b = 0;

          mul2a(pos*2+msbr+prcs+1, pos*3+2+prcs) = res(msbr+prcs, pos+1+prcs);

          mul2b(pos*2+msbr+prcs, pos*3+1+prcs) = res(msbr+prcs, pos+1+prcs);

          ap_ufixed<3*msbr+prcs+3, 3*msbr+3> mulL = 0;
          ap_ufixed<3*msbr+prcs+3, 3*msbr+3> mulH = 0;


          mulL(pos*2+msbr+prcs+3, pos*3+1+prcs) = mul2b(pos*2+msbr+prcs, pos*3+1+prcs) + mul2a(pos*2+msbr+prcs+1, pos*3+1+prcs) + mul1a(pos*2+msbr+prcs+1, pos*3+1+prcs) + mul1b(pos*2+msbr+prcs+1,pos*3+1+prcs);

          mulH(pos+2*msbr+prcs+3, pos*2+msbr+prcs+2) = mulL(pos*2+msbr+prcs+3, pos*2+msbr+prcs+2) + mul1a(pos+2*msbr+prcs+2,pos*2+msbr+prcs+2) + mul1b(pos+2*msbr+prcs+1,pos*2+msbr+prcs+2);
          mulL[3*pos+prcs] = 1;







          bool cond1 = (x_rem(pos+2*msbr+prcs+4,pos*2+msbr+prcs+2) > mulH(pos+2*msbr+prcs+3,pos*2+msbr+prcs+2));
          bool cond2 = (x_rem(pos+2*msbr+prcs+4,pos*2+msbr+prcs+2) == mulH(pos+2*msbr+prcs+3,pos*2+msbr+prcs+2));
          bool cond3 = (x_rem(pos*2+msbr+prcs+1,pos*3+prcs) >= mulL(pos*2+msbr+prcs+1,pos*3+prcs));
          if(cond1 | (cond2 & cond3)) {
             ap_ufixed<3*msbr+prcs+3,3*msbr+3> x_rem_L = 0;
             x_rem_L(pos*2+msbr+prcs+1, pos*3+prcs) = x_rem(pos*2+msbr+prcs+1, pos*3+prcs);

             x_rem_L[pos*2+msbr+prcs+2] = cond3? 0 : 1;
             x_rem(pos+2*msbr+prcs+4,pos*2+msbr+prcs+2) = x_rem(pos+2*msbr+prcs+4, pos*2+msbr+prcs+2) - mulH(pos+2*msbr+prcs+3,pos*2+msbr+prcs+2) - x_rem_L(pos*2+msbr+prcs+2,pos*2+msbr+prcs+2);
             x_rem(pos*2+msbr+prcs+1,pos*3+prcs) = x_rem_L(pos*2+msbr+prcs+2, pos*3+prcs) - mulL(pos*2+msbr+prcs+1,pos*3+prcs);





             ap_ufixed<2*msbr+prcs+1,2*msbr+1> mul1 = 0;
             mul1(pos+msbr+prcs+1, 2*pos+2+prcs) = res(msbr+prcs, pos+1+prcs);
             ap_ufixed<2*msbr+prcs+2,2*msbr+2> resq_L = 0;
             resq_L(pos+msbr+prcs+2,2*pos+2+prcs) = resq(pos+msbr+prcs+1,2*pos+2+prcs) + mul1(pos+msbr+prcs+1,2*pos+2+prcs);
             resq(pos+msbr+prcs+1,2*pos+2+prcs) = resq_L(pos+msbr+prcs+1,2*pos+2+prcs);
             resq(2*msbr+prcs+1,pos+msbr+2+prcs) = resq(2*msbr+prcs+1,pos+msbr+2+prcs) + resq_L(pos+msbr+2+prcs,pos+msbr+2+prcs);
             resq[2*pos+prcs] = 1;
             res[pos+prcs] = 1;
         }
# 133 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_cbrt_apfixed.h"
      }





      ap_ufixed<1,-F-1> delta;
      delta[0] = 1;
      ap_ufixed<msbr+F+1,msbr> res_s = res;
      res_s += delta;
      r = res_s;
      if(x[W-1]) return -r;
      else return r;
}

template<int W, int I>
ap_ufixed<W, I> cbrt_fixed(ap_ufixed<W, I> x) {
   ap_fixed<W+1,I+1> xi = x;
   return cbrt_fixed(xi);
}
template<int I>
ap_int<I> cbrt_fixed(ap_int<I> x) {
   ap_fixed<I,I> xi = x;
   return cbrt_fixed(xi);
}
template<int I>
ap_uint<I> cbrt_fixed(ap_uint<I> x) {
   ap_fixed<I+1,I+1> xi = x;
   return cbrt_fixed(xi);
}
}
# 1037 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h" 1
# 39 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/ap_int.h" 1
# 40 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h" 2

namespace hypot_internal {
template<int W, int I>
ap_fixed<W, I> hypot_fixed(ap_fixed<W, I> x, ap_fixed<W, I> y) {
    const static int F = W - I;
_ssdm_SpecConstant(&F);
# 44 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"

    if(I > 33) return 0;
    else if(F > 32) return 0;
# 55 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"
    if(x==0) return fabs_fixed(y);
    if(y==0) return fabs_fixed(x);

    ap_ufixed<2*W, I*2> x_sq = x * x;
    ap_ufixed<2*W, I*2> y_sq = y * y;
    ap_ufixed<2*W, I*2> xy_sq = x_sq + y_sq;
# 69 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"
    const static int prcs = (F+1)*2;
_ssdm_SpecConstant(&prcs);
# 69 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"

    const static int msbr = I > 0? I : 1;
_ssdm_SpecConstant(&msbr);
# 70 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"

    ap_ufixed<msbr, msbr> res_I = 0;
    ap_ufixed<2*msbr+1,2*msbr+1> x_l_I = 0;
    if(I>0) {
        x_l_I = xy_sq(2*W-1, 2*W-2*I);
        for(int pos = msbr - 1; pos >= 0; pos--) {
            ap_ufixed<2*msbr,2*msbr> mul_I = 0;



            mul_I(msbr+pos, 2*pos+1) = res_I(msbr-1, pos);
            mul_I[2*pos] = 1;
            if(x_l_I(msbr+pos+1, 2*pos) >= mul_I(msbr+pos, 2*pos)){



                ap_ufixed<2*msbr+1, 2*msbr+1> x_l_I_ = x_l_I;
                x_l_I(msbr+pos+1, 2*pos) = x_l_I(msbr+pos+1,2*pos) - mul_I(msbr+pos, 2*pos);



                res_I[pos] = 1;
           }
       }
    }
    ap_ufixed<msbr+1, msbr+1> x_l_I_s = x_l_I;
# 104 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"
    ap_ufixed<prcs/2,0> res_F = 0;
    ap_ufixed<prcs/2,0> x_l_FH = xy_sq;
    ap_ufixed<prcs/2, -prcs/2> x_l_FL = xy_sq;
    for(int pos = -1; pos >= -F-1; pos--) {
        ap_ufixed<msbr+prcs, msbr> mul = 0;



        mul(msbr+pos+prcs, pos+1+prcs) = res_I(msbr-1, 0);
        mul(pos+prcs, 2*pos+1+prcs) = res_F(prcs/2-1,pos+prcs/2);
        mul[2*pos+prcs] = 1;

        ap_ufixed<msbr, msbr> mul_I = 0;
        mul_I = mul;
        ap_ufixed<prcs/2, 0> mul_FH = mul;
        ap_ufixed<prcs/2, -prcs/2> mul_FL = mul;
# 139 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_hypot_apfixed.h"
        if((x_l_I_s > mul_I) || ((x_l_I_s == mul_I) && (x_l_FH > mul_FH)) || ((x_l_I_s == mul_I) && (x_l_FH == mul_FH) && (x_l_FL >= mul_FL))) {







           ap_ufixed<prcs/2+1, -prcs/2+1> x_l_FL_1 = x_l_FL;

           if(x_l_FL < mul_FL) x_l_FL_1[prcs/2] = 1;
           x_l_FL_1 -= mul_FL;



           ap_ufixed<prcs/2+1,1> x_l_FH_1 = x_l_FH;

           if((x_l_FH < mul_FH) || ((x_l_FH == mul_FH) && (x_l_FL < mul_FL))) x_l_FH_1[prcs/2] = 1;
           ap_ufixed<1, -prcs/2+1> delta = 0;
           if(x_l_FL < mul_FL) delta[0] = 1;

           x_l_FH_1 -= delta;
           x_l_FH_1 -= mul_FH;

           if((x_l_FH < mul_FH) || ((x_l_FH == mul_FH) && (x_l_FL < mul_FL))) x_l_I_s--;
           x_l_I_s -= mul_I;
           x_l_FH = x_l_FH_1;
           x_l_FL = x_l_FL_1;







           res_F[pos+prcs/2] = 1;
       }
    }
    ap_ufixed<prcs/2+1, 1> res_F_1 = res_F;

    ap_ufixed<1, -prcs/2+1> delta = 0;
    delta[0] = 1;
    res_F_1 += delta;
    if(res_F_1[prcs/2]) res_I++;
    ap_ufixed<msbr+prcs/2, msbr> res = 0;
    res(msbr+prcs/2-1, prcs/2) = res_I(msbr-1,0);
    res(prcs/2-1, 0) = res_F(prcs/2-1, 0);






    ap_fixed<W,I> r = 0;
    if(res[msbr+prcs/2-1]) {

       for(int i = 0; i < W - 1; ++i) {
#pragma HLS unroll
 r[i] = 1;
       }
    } else {
       r = res;
    }





    return r;
}
template<int W, int I>
ap_ufixed<W, I> hypot_fixed(ap_ufixed<W, I> x, ap_fixed<W, I> y) {
   ap_fixed<W+1, I+1> xi = x;
   ap_fixed<W+1, I+1> yi = y;
   return hypot_fixed(xi, yi);
}
template<int I>
ap_int<I> hypot_fixed(ap_int<I> x, ap_int<I> y) {
   ap_fixed<I, I> xi = x;
   ap_fixed<I, I> yi = y;
   return hypot_fixed(xi, yi);
}
template<int I>
ap_uint<I> hypot_fixed(ap_uint<I> x, ap_uint<I> y) {
   ap_fixed<I+1, I+1> xi = x;
   ap_fixed<I+1, I+1> yi = y;
   return hypot_fixed(xi, yi);
}
}
# 1038 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2
# 1 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_ldexp_apfixed.h" 1
# 36 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_ldexp_apfixed.h"
namespace hls_ldexp {

template<int W, int I>
ap_fixed<W,I> ldexp(ap_fixed<W,I> x, int exp) {
    ap_fixed<W,I> result;
    if(exp >= W || exp <= -W) {
        result = 0;
    } else {
        result = x << exp;
    }
    return result;
}

template<int W, int I>
ap_ufixed<W,I> ldexp(ap_ufixed<W,I> x, int exp) {
    ap_fixed<W+1,I+1> xf = x;
    return ldexp(xf, exp);
}

template<int I>
ap_int<I> ldexp(ap_int<I> x, int exp) {
    ap_fixed<I,I> xf = x;
    return ldexp(xf, exp);
}

template<int I>
ap_uint<I> ldexp(ap_uint<I> x, int exp) {
    ap_fixed<I+1,I+1> xf = x;
    return ldexp(xf, exp);
}

template<int W, int I>
ap_fixed<W,I> scalbn(ap_fixed<W,I> x, int n) {
    ap_fixed<W,I> result;
    if(n >= W || n <= -W) {
        result = 0;
    } else {
        result = x << n;
    }
    return result;
}

template<int W, int I>
ap_ufixed<W,I> scalbn(ap_ufixed<W,I> x, int n) {
    ap_fixed<W+1,I+1> xf = x;
    return scalbn(xf, n);
}

template<int I>
ap_int<I> scalbn(ap_int<I> x, int n) {
    ap_fixed<I,I> xf = x;
    return scalbn(xf, n);
}

template<int I>
ap_uint<I> scalbn(ap_uint<I> x, int n) {
    ap_fixed<I+1,I+1> xf = x;
    return scalbn(xf, n);
}

template<int W, int I>
ap_fixed<W,I> scalbln(ap_fixed<W,I> x, long int n) {
    ap_fixed<W,I> result;
    if(n >= W || n <= -W) {
        result = 0;
    } else {
        result = x << n;
    }
    return result;
}

template<int W, int I>
ap_ufixed<W,I> scalbln(ap_ufixed<W,I> x, long int n) {
    ap_fixed<W+1,I+1> xf = x;
    return scalbln(xf, n);
}

template<int I>
ap_int<I> scalbln(ap_int<I> x, long int n) {
    ap_fixed<I,I> xf = x;
    return scalbln(xf, n);
}

template<int I>
ap_uint<I> scalbln(ap_uint<I> x, long int n) {
    ap_fixed<I+1,I+1> xf = x;
    return scalbln(xf, n);
}

}
# 1039 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h" 2

namespace hls {
# 1063 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h"
  template<int W, int I>
  ap_fixed<W, 2> sinpi(ap_fixed<W,I> x){
    return hotbm_apfixed::sinf_or_cosf<W,I>(x, 0, 1);
  }




  template<int W, int I>
  ap_ufixed<W, 2> sinpi(ap_ufixed<W,I> x){
      ap_fixed<W+1, I+1> xin = x;
      ap_fixed<W+1, 3> xout = hls::sinpi<W+1, I+1>(x);
   ap_ufixed<W, 2> out = 0;
   if(xout[W]==0){
    out = xout;
   }
   return out;
  }

  template<int W, int I>
  ap_fixed<W, 2> cospi(ap_fixed<W,I> x){
    return hotbm_apfixed::sinf_or_cosf<W,I>(x, 1, 1);
  }
  template<int W, int I>
  ap_ufixed<W, 2> cospi(ap_ufixed<W,I> x){
   ap_fixed<W+1, I+1> xin = x;
   ap_fixed<W+1, 3> xout = hls::cospi<W+1, I+1>(x);
   ap_ufixed<W, 2> out = 0;
   if(xout[W]==0){
    out = xout;
   }
   return out;
  }





  template<int I>
  ap_int<I> sinpi(ap_int<I> in){
 return ap_int<I>(0);
  }

  template<int I>
  ap_int<I> cospi(ap_int<I> in){
 return ap_int<I>(0);
  }

  template<int I>
  ap_uint<I> sinpi(ap_uint<I> in){
 return ap_uint<I>(0);
  }

  template<int I>
  ap_uint<I> cospi(ap_uint<I> in){
 return ap_uint<I>(0);
  }
  int8_t sinpi(int8_t);
  uint8_t sinpi(uint8_t);
  int16_t sinpi(int16_t);
  uint16_t sinpi(uint16_t);
  int32_t sinpi(int32_t);
  uint32_t sinpi(uint32_t);

  int8_t cospi(int8_t);
  uint8_t cospi(uint8_t);
  int16_t cospi(int16_t);
  uint16_t cospi(uint16_t);
  int32_t cospi(int32_t);
  uint32_t cospi(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> exp(ap_fixed<W,I> x){
    return exp_reduce::exp(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> exp(ap_ufixed<W,I> x){
    return exp_reduce::exp(x);
  }
  template<int I>
  ap_int<I> exp(ap_int<I> x){
    return exp_reduce::exp(x);
  }
  template<int I>
  ap_uint<I> exp(ap_uint<I> x){
    return exp_reduce::exp(x);
  }


  template<int W, int I>
  ap_fixed<W,I> log(ap_fixed<W,I> x){
    return log_apfixed_reduce::log(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> log(ap_ufixed<W,I> x){
    return log_apfixed_reduce::log(x);
  }
  template<int I>
  ap_int<I> log(ap_int<I> x){
    return log_apfixed_reduce::log(x);
  }
  template<int I>
  ap_uint<I> log(ap_uint<I> x){
    return log_apfixed_reduce::log(x);
  }


  template<int W, int I>
  ap_fixed<W,I> log10(ap_fixed<W,I> x){
    return log_apfixed_reduce::log10(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> log10(ap_ufixed<W,I> x){
    return log_apfixed_reduce::log10(x);
  }
  template<int I>
  ap_int<I> log10(ap_int<I> x){
    return log_apfixed_reduce::log10(x);
  }
  template<int I>
  ap_uint<I> log10(ap_uint<I> x){
 return log_apfixed_reduce::log10(x);
  }


  template<int W, int I>
  ap_fixed<W,I> log2(ap_fixed<W,I> x){
    return log_apfixed_reduce::log2(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> log2(ap_ufixed<W,I> x){
    return log_apfixed_reduce::log2(x);
  }
  template<int I>
  ap_int<I> log2(ap_int<I> x){
    return log_apfixed_reduce::log2(x);
  }
  template<int I>
  ap_uint<I> log2(ap_uint<I> x){
 return log_apfixed_reduce::log2(x);
  }


  template<int W, int I>
  ap_fixed<W,I> logb(ap_fixed<W,I> x){
    return log_apfixed_reduce::logb(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> logb(ap_ufixed<W,I> x){
    return log_apfixed_reduce::logb(x);
  }
  template<int I>
  ap_int<I> logb(ap_int<I> x){
    return log_apfixed_reduce::logb(x);
  }
  template<int I>
  ap_uint<I> logb(ap_uint<I> x){
 return log_apfixed_reduce::logb(x);
  }


  template<int W, int I>
  ap_fixed<W,I> sqrt(ap_fixed<W,I> x){
    return sqrt_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> sqrt(ap_ufixed<W,I> x){
    return sqrt_fixed(x);
  }
  template<int I>
  ap_int<I> sqrt(ap_int<I> x){
    return sqrt_fixed(x);
  }
  template<int I>
  ap_uint<I> sqrt(ap_uint<I> x){
    return sqrt_fixed(x);
  }


  template<int W, int I>
  ap_fixed<W,I> rsqrt(ap_fixed<W,I> x){
    return rsqrt_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> rsqrt(ap_ufixed<W,I> x){
    return rsqrt_fixed(x);
  }
  template<int I>
  ap_int<I> rsqrt(ap_int<I> x){
    return rsqrt_fixed(x);
  }
  template<int I>
  ap_uint<I> rsqrt(ap_uint<I> x){
    return rsqrt_fixed(x);
  }


  template<int W, int I>
  ap_fixed<W,I> recip(ap_fixed<W,I> x){
    return recip_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> recip(ap_ufixed<W,I> x){
    return recip_fixed(x);
  }
  template<int I>
  ap_int<I> recip(ap_int<I> x){
    return recip_fixed(x);
  }
  template<int I>
  ap_uint<I> recip(ap_uint<I> x){
    return recip_fixed(x);
  }


  template<int W, int I>
  ap_fixed<W,I> ceil(ap_fixed<W,I> x){
    return ceil_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> ceil(ap_ufixed<W,I> x){
    return ceil_fixed(x);
  }
  template<int I>
  ap_int<I> ceil(ap_int<I> x){
    return ceil_fixed(x);
  }
  template<int I>
  ap_uint<I> ceil(ap_uint<I> x){
    return ceil_fixed(x);
  }


  template<int W, int I>
  ap_fixed<W,I> floor(ap_fixed<W,I> x){
    return floor_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> floor(ap_ufixed<W,I> x){
    return floor_fixed(x);
  }
  template<int I>
  ap_int<I> floor(ap_int<I> x){
    return floor_fixed(x);
  }
  template<int I>
  ap_uint<I> floor(ap_uint<I> x){
    return floor_fixed(x);
  }

  template<int W, int I>
  ap_fixed<W,I> trunc(ap_fixed<W,I> x){
    return trunc_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> trunc(ap_ufixed<W,I> x){
    return trunc_fixed(x);
  }
  template<int I>
  ap_int<I> trunc(ap_int<I> x){
    return trunc_fixed(x);
  }
  template<int I>
  ap_uint<I> trunc(ap_uint<I> x){
    return trunc_fixed(x);
  }


  template<int W, int I>
  ap_fixed<W,I> copysign(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return copysign_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> copysign(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return copysign_fixed(x,y);
  }
  template<int I>
  ap_int<I> copysign(ap_int<I> x, ap_int<I> y){
    return copysign_fixed(x,y);
  }
  template<int I>
  ap_uint<I> copysign(ap_uint<I> x, ap_uint<I> y){
    return copysign_fixed(x,y);
  }


  template<int W, int I>
  ap_fixed<W,I> fabs(ap_fixed<W,I> x){
    return fabs_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> fabs(ap_ufixed<W,I> x){
    return fabs_fixed(x);
  }
  template<int I>
  ap_int<I> fabs(ap_int<I> x){
    return fabs_fixed(x);
  }
  template<int I>
  ap_uint<I> fabs(ap_uint<I> x){
    return fabs_fixed(x);
  }

  template<int W, int I>
  ap_fixed<W,I> abs(ap_fixed<W,I> x){
    return fabs_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> abs(ap_ufixed<W,I> x){
    return fabs_fixed(x);
  }
  template<int I>
  ap_int<I> abs(ap_int<I> x){
    return fabs_fixed(x);
  }
  template<int I>
  ap_uint<I> abs(ap_uint<I> x){
    return fabs_fixed(x);
  }


  template<int W, int I>
  ap_fixed<W,I> fdim(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return fdim_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> fdim(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return fdim_fixed(x,y);
  }
  template<int I>
  ap_int<I> fdim(ap_int<I> x, ap_int<I> y){
    return fdim_fixed(x,y);
  }
  template<int I>
  ap_uint<I> fdim(ap_uint<I> x, ap_uint<I> y){
    return fdim_fixed(x,y);
  }

  template<int W, int I>
  ap_fixed<W,I> fmax(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return fmax_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> fmax(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return fmax_fixed(x,y);
  }
  template<int I>
  ap_int<I> fmax(ap_int<I> x, ap_int<I> y){
    return fmax_fixed(x,y);
  }
  template<int I>
  ap_uint<I> fmax(ap_uint<I> x, ap_uint<I> y){
    return fmax_fixed(x,y);
  }

  template<int W, int I>
  ap_fixed<W,I> fmin(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return fmin_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> fmin(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return fmin_fixed(x,y);
  }
  template<int I>
  ap_int<I> fmin(ap_int<I> x, ap_int<I> y){
    return fmin_fixed(x,y);
  }
  template<int I>
  ap_uint<I> fmin(ap_uint<I> x, ap_uint<I> y){
    return fmin_fixed(x,y);
  }

  template<int W, int I>
  ap_fixed<W,I> maxmag(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return maxmag_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> maxmag(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return maxmag_fixed(x,y);
  }
  template<int I>
  ap_int<I> maxmag(ap_int<I> x, ap_int<I> y){
    return maxmag_fixed(x,y);
  }
  template<int I>
  ap_uint<I> maxmag(ap_uint<I> x, ap_uint<I> y){
    return maxmag_fixed(x,y);
  }

  template<int W, int I>
  ap_fixed<W,I> minmag(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return minmag_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> minmag(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return minmag_fixed(x,y);
  }
  template<int I>
  ap_int<I> minmag(ap_int<I> x, ap_int<I> y){
    return minmag_fixed(x,y);
  }
  template<int I>
  ap_uint<I> minmag(ap_uint<I> x, ap_uint<I> y){
    return minmag_fixed(x,y);
  }



  template<int W, int I>
  ap_fixed<W,I> sinh(ap_fixed<W,I> x){
 return cordic_apfixed::generic_sinh(x);
  }


  template<int W, int I>
  ap_ufixed<W,I> sinh(ap_ufixed<W,I> x){
 return cordic_apfixed::generic_sinh(x);
  }


  template<int I>
  ap_int<I> sinh(ap_int<I> x){
 return cordic_apfixed::generic_sinh(x);
  }


  template<int I>
  ap_uint<I> sinh(ap_uint<I> x){
 return cordic_apfixed::generic_sinh(x);
  }


  template<int W, int I>
  ap_fixed<W,I> cosh(ap_fixed<W,I> x){
 return cordic_apfixed::generic_cosh(x);
  }


  template<int W, int I>
  ap_ufixed<W,I> cosh(ap_ufixed<W,I> x){
 return cordic_apfixed::generic_cosh(x);
  }


  template<int I>
  ap_int<I> cosh(ap_int<I> x){
 return cordic_apfixed::generic_cosh(x);
  }


  template<int I>
  ap_uint<I> cosh(ap_uint<I> x){
 return cordic_apfixed::generic_cosh(x);
  }


  template<int W, int I>
  ap_fixed<W,I> tanh(ap_fixed<W,I> x){
    return cordic_apfixed::generic_tanh(x);
  }


  template<int W, int I>
  ap_ufixed<W,I> tanh(ap_ufixed<W,I> x){
    return cordic_apfixed::generic_tanh(x);
  }


  template<int I>
  ap_int<I> tanh(ap_int<I> x){
    return cordic_apfixed::generic_tanh(x);
  }


  template<int I>
  ap_uint<I> tanh(ap_uint<I> x){
    return cordic_apfixed::generic_tanh(x);
  }


  template<int W, int I>
  ap_fixed<W,I> atanh(ap_fixed<W,I> x){
    ap_fixed<W,I> one_plus_x = 1 + x;
    ap_fixed<W,I> one_minus_x = 1 - x;
    ap_fixed<W,I> input = one_plus_x / one_minus_x ;
    ap_fixed<W,I> result = log_apfixed_reduce::log(input);
    result >>= 1;
    return result;
  }


  template<int W, int I>
  ap_ufixed<W,I> atanh(ap_ufixed<W,I> x){
  ap_fixed<W+1,I+1> input = x;
    ap_fixed<W+1,I+1> result = hls::atanh(input);
    return result;
  }


  template<int I>
  ap_int<I> atanh(ap_int<I> x){
    ap_fixed<I,I> input = x;
    ap_fixed<I,I> result = hls::atanh(input);
    return result;
  }


  template<int I>
  ap_uint<I> atanh(ap_uint<I> x){
    ap_fixed<I+1,I+1> input = x;
    ap_fixed<I+1,I+1> result = hls::atanh(input);
    return result;
  }


  template<int W, int I>
  ap_fixed<W,I> asinh(ap_fixed<W,I> x){
    return cordic_apfixed::generic_asinh(x);
  }


  template<int W, int I>
  ap_ufixed<W,I> asinh(ap_ufixed<W,I> x){
    return cordic_apfixed::generic_asinh(x);
  }


  template<int I>
  ap_int<I> asinh(ap_int<I> x){
    return cordic_apfixed::generic_asinh(x);
  }


  template<int I>
  ap_uint<I> asinh(ap_uint<I> x){
    return cordic_apfixed::generic_asinh(x);
  }


  template<int W, int I>
  ap_fixed<W,I> acosh(ap_fixed<W,I> x){
    return cordic_apfixed::generic_acosh(x);
  }


  template<int W, int I>
  ap_ufixed<W,I> acosh(ap_ufixed<W,I> x){
    return cordic_apfixed::generic_acosh(x);
  }


  template<int I>
  ap_int<I> acosh(ap_int<I> x){
    return cordic_apfixed::generic_acosh(x);
  }


  template<int I>
  ap_uint<I> acosh(ap_uint<I> x){
    return cordic_apfixed::generic_acosh(x);
  }

  int8_t sinh(int8_t);
  uint8_t sinh(uint8_t);
  int16_t sinh(int16_t);
  uint16_t sinh(uint16_t);
  int32_t sinh(int32_t);
  uint32_t sinh(uint32_t);

  int8_t cosh(int8_t);
  uint8_t cosh(uint8_t);
  int16_t cosh(int16_t);
  uint16_t cosh(uint16_t);
  int32_t cosh(int32_t);
  uint32_t cosh(uint32_t);

  int8_t tanh(int8_t);
  uint8_t tanh(uint8_t);
  int16_t tanh(int16_t);
  uint16_t tanh(uint16_t);
  int32_t tanh(int32_t);
  uint32_t tanh(uint32_t);

  int8_t atanh(int8_t);
  uint8_t atanh(uint8_t);
  int16_t atanh(int16_t);
  uint16_t atanh(uint16_t);
  int32_t atanh(int32_t);
  uint32_t atanh(uint32_t);

  int8_t asinh(int8_t);
  uint8_t asinh(uint8_t);
  int16_t asinh(int16_t);
  uint16_t asinh(uint16_t);
  int32_t asinh(int32_t);
  uint32_t asinh(uint32_t);

  int8_t acosh(int8_t);
  uint8_t acosh(uint8_t);
  int16_t acosh(int16_t);
  uint16_t acosh(uint16_t);
  int32_t acosh(int32_t);
  uint32_t acosh(uint32_t);


  template<int W, int I>
  ap_fixed<W-I+3,3> asin(ap_fixed<W,I> x){
 return cordic_apfixed::generic_asin(x);
  }


  template<int W, int I>
  ap_fixed<W-I+3,3> acos(ap_fixed<W,I> x){
 return cordic_apfixed::generic_acos(x);
  }


  template<int W, int I>
  ap_fixed<W,2> atan(ap_fixed<W,I> x){
 return cordic_apfixed::generic_atan(x);
  }


  template<int W, int I>
  ap_ufixed<W,2> atan(ap_ufixed<W,I> x){
 return cordic_apfixed::generic_atan(x);
  }


  template<int I>
  ap_int<2> atan(ap_int<I> x){
   return cordic_apfixed::generic_atan(x);
  }


  template<int I>
  ap_uint<1> atan(ap_uint<I> x){
   return cordic_apfixed::generic_atan(x);
  }

  int8_t asin(int8_t);
  uint8_t asin(uint8_t);
  int16_t asin(int16_t);
  uint16_t asin(uint16_t);
  int32_t asin(int32_t);
  uint32_t asin(uint32_t);

  int8_t acos(int8_t);
  uint8_t acos(uint8_t);
  int16_t acos(int16_t);
  uint16_t acos(uint16_t);
  int32_t acos(int32_t);
  uint32_t acos(uint32_t);

  int8_t atan(int8_t);
  uint8_t atan(uint8_t);
  int16_t atan(int16_t);
  uint16_t atan(uint16_t);
  int32_t atan(int32_t);
  uint32_t atan(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> asinpi(ap_fixed<W,I> x){
      return cordic_apfixed::generic_asinpi(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> asinpi(ap_ufixed<W,I> x){
      return cordic_apfixed::generic_asinpi(x);
  }

  template<int I>
  ap_int<I> asinpi(ap_int<I> x){
     return cordic_apfixed::generic_asinpi(x);
  }

  template<int I>
  ap_uint<I> asinpi(ap_uint<I> x){
     return cordic_apfixed::generic_asinpi(x);
  }


  int8_t asinpi(int8_t);
  uint8_t asinpi(uint8_t);
  int16_t asinpi(int16_t);
  uint16_t asinpi(uint16_t);
  int32_t asinpi(int32_t);
  uint32_t asinpi(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> acospi(ap_fixed<W,I> x){
      return cordic_apfixed::generic_acospi(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> acospi(ap_ufixed<W,I> x){
      return cordic_apfixed::generic_acospi(x);
  }

  template<int I>
  ap_int<I> acospi(ap_int<I> x){
     return cordic_apfixed::generic_acospi(x);
  }

  template<int I>
  ap_uint<I> acospi(ap_uint<I> x){
     return cordic_apfixed::generic_acospi(x);
  }

  int8_t acospi(int8_t);
  uint8_t acospi(uint8_t);
  int16_t acospi(int16_t);
  uint16_t acospi(uint16_t);
  int32_t acospi(int32_t);
  uint32_t acospi(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> atanpi(ap_fixed<W,I> x){
 return cordic_apfixed::generic_atanpi(x);
  }


  template<int W, int I>
  ap_ufixed<W,I> atanpi(ap_ufixed<W,I> x){
 return cordic_apfixed::generic_atanpi(x);
  }


  template<int I>
  ap_int<2> atanpi(ap_int<I> x){
   return cordic_apfixed::generic_atanpi(x);
  }


  template<int I>
  ap_uint<1> atanpi(ap_uint<I> x){
   return cordic_apfixed::generic_atanpi(x);
  }

  int8_t atanpi(int8_t);
  uint8_t atanpi(uint8_t);
  int16_t atanpi(int16_t);
  uint16_t atanpi(uint16_t);
  int32_t atanpi(int32_t);
  uint32_t atanpi(uint32_t);


  template<int W, int I>
  ap_fixed<W,3> atan2(ap_fixed<W,I> x, ap_fixed<W,I> y){
 return cordic_apfixed::generic_atan2(x,y);
  }


  template<int W, int I>
  ap_ufixed<W,3> atan2(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
 return cordic_apfixed::generic_atan2(x,y);
  }


  template<int I>
  ap_int<3> atan2(ap_int<I> x, ap_int<I> y){
   return cordic_apfixed::generic_atan2(x,y);
  }


  template<int I>
  ap_uint<2> atan2(ap_uint<I> x, ap_uint<I> y){
   return cordic_apfixed::generic_atan2(x,y);
  }

  int8_t atan2(int8_t, int8_t);
  uint8_t atan2(uint8_t, uint8_t);
  int16_t atan2(int16_t, int16_t);
  uint16_t atan2(uint16_t, uint16_t);
  int32_t atan2(int32_t, int32_t);
  uint32_t atan2(uint32_t, uint32_t);


  template<int W, int I>
  ap_fixed<W,I> atan2pi(ap_fixed<W,I> x, ap_fixed<W,I> y){
 return cordic_apfixed::generic_atan2pi(x,y);
  }


  template<int W, int I>
  ap_ufixed<W,I> atan2pi(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
 return cordic_apfixed::generic_atan2pi(x,y);
  }


  template<int I>
  ap_int<I> atan2pi(ap_int<I> x, ap_int<I> y){
   return cordic_apfixed::generic_atan2pi(x,y);
  }


  template<int I>
  ap_uint<I> atan2pi(ap_uint<I> x, ap_uint<I> y){
   return cordic_apfixed::generic_atan2pi(x,y);
  }

  int8_t atan2pi(int8_t, int8_t);
  uint8_t atan2pi(uint8_t, uint8_t);
  int16_t atan2pi(int16_t, int16_t);
  uint16_t atan2pi(uint16_t, uint16_t);
  int32_t atan2pi(int32_t, int32_t);
  uint32_t atan2pi(uint32_t, uint32_t);
  template<int W, int I>
  void sincos(ap_fixed<W,I> in,
       ap_fixed<W-I+2,2>* outsin, ap_fixed<W-I+2,2>* outcos){
   cordic_apfixed::generic_sincos(in, *outsin, *outcos);
  }

  template<int W, int I>
  ap_fixed<W-I+2,2> sin(ap_fixed<W,I> x){
        ap_fixed<W-I+2,2> outsin;
        ap_fixed<W-I+2,2> outcos;
        cordic_apfixed::generic_sincos(x, outsin, outcos);
        return outsin;
  }

  template<int W, int I>
  ap_ufixed<W-I+2,2> sin(ap_ufixed<W,I> x){
  ap_fixed<W+1, I+1> xin = x;
  ap_fixed<W-I+3, 3> xout = hls::sin(x);
  ap_fixed<W-I+2, 2> out = 0;
  if(xout[W-I+2]==0){
   out=xout;
  }
  return out;
  }

  template<int W, int I>
  ap_fixed<W-I+2,2> cos(ap_fixed<W,I> x){
        ap_fixed<W-I+2,2> outsin;
        ap_fixed<W-I+2,2> outcos;
        cordic_apfixed::generic_sincos(x, outsin, outcos);
        return outcos;
  }

  template<int W, int I>
  ap_ufixed<W-I+2,2> cos(ap_ufixed<W,I> x){
  ap_fixed<W+1, I+1> xin = x;
  ap_fixed<W-I+3, 3> xout = hls::cos(x);
  ap_fixed<W-I+2, 2> out = 0;
  if(xout[W-I+2]==0){
   out=xout;
  }
  return out;
  }
# 1935 "/opt/xilinx/Vivado/2019.2/common/technology/autopilot/hls_math.h"
  template<int I>
  ap_int<I> sin(ap_int<I> in) {
 return ap_int<I>(0);
  };
  template<int I>
  ap_int<I> cos(ap_int<I> in) {
 return ap_int<I>(0);
  };


  template<int I>
  ap_uint<I> sin(ap_uint<I> in) {
 return ap_uint<I>(0);
  };
  template<int I>
  ap_uint<I> cos(ap_uint<I> in) {
 return ap_uint<I>(0);
  };

  void sincos(int8_t, int8_t*, int8_t*);
  void sincos(uint8_t, uint8_t*, uint8_t*);
  void sincos(int16_t, int16_t*, int16_t*);
  void sincos(uint16_t, uint16_t*, uint16_t*);
  void sincos(int32_t, int32_t*, int32_t*);
  void sincos(uint32_t, uint32_t*, uint32_t*);

  int8_t sin(int8_t);
  uint8_t sin(uint8_t);
  int16_t sin(int16_t);
  uint16_t sin(uint16_t);
  int32_t sin(int32_t);
  uint32_t sin(uint32_t);

  int8_t cos(int8_t);
  uint8_t cos(uint8_t);
  int16_t cos(int16_t);
  uint16_t cos(uint16_t);
  int32_t cos(int32_t);
  uint32_t cos(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> tan(ap_fixed<W,I> x){
 return cordic_apfixed::generic_tan(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> tan(ap_ufixed<W,I> x){
 return cordic_apfixed::generic_tan(x);
  }
  template<int I>
  ap_int<I> tan(ap_int<I> x){
   return cordic_apfixed::generic_tan(x);
  }
  template<int I>
  ap_uint<I> tan(ap_uint<I> x){
   return cordic_apfixed::generic_tan(x);
  }

  int8_t tan(int8_t);
  uint8_t tan(uint8_t);
  int16_t tan(int16_t);
  uint16_t tan(uint16_t);
  int32_t tan(int32_t);
  uint32_t tan(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> tanpi(ap_fixed<W,I> x){
 return cordic_apfixed::generic_tanpi(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> tanpi(ap_ufixed<W,I> x){
 return cordic_apfixed::generic_tanpi(x);
  }
  template<int I>
  ap_int<I> tanpi(ap_int<I> x){
   return cordic_apfixed::generic_tanpi(x);
  }
  template<int I>
  ap_uint<I> tanpi(ap_uint<I> x){
   return cordic_apfixed::generic_tanpi(x);
  }

  int8_t tanpi(int8_t);
  uint8_t tanpi(uint8_t);
  int16_t tanpi(int16_t);
  uint16_t tanpi(uint16_t);
  int32_t tanpi(int32_t);
  uint32_t tanpi(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> pow(ap_fixed<W,I> x, ap_fixed<W,I> y) {
    return pow_apfixed_reduce::pow(x,y);
  }

  template<int W, int I>
  ap_ufixed<W,I> pow(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return pow_apfixed_reduce::pow(x,y);
  }
  template<int I>
  ap_int<I> pow(ap_int<I> x, ap_int<I> y){
    return pow_apfixed_reduce::pow(x,y);
  }
  template<int I>
  ap_uint<I> pow(ap_uint<I> x,ap_uint<I> y){
    return pow_apfixed_reduce::pow(x,y);
  }

  template<int W, int I>
  ap_fixed<W,I> pown(ap_fixed<W,I> x, int n) {
    return pow_apfixed_reduce::pown(x,n);
  }

  template<int W, int I>
  ap_ufixed<W,I> pown(ap_ufixed<W,I> x, int n){
    return pow_apfixed_reduce::pown(x,n);
  }
  template<int I>
  ap_int<I> pown(ap_int<I> x, int n){
    return pow_apfixed_reduce::pown(x,n);
  }
  template<int I>
  ap_uint<I> pown(ap_uint<I> x, int n){
    return pow_apfixed_reduce::pown(x,n);
  }
  int8_t pown(int8_t, int n);
  uint8_t pown(uint8_t, int n);
  int16_t pown(int16_t, int n);
  uint16_t pown(uint16_t, int n);
  int32_t pown(int32_t, int n);
  uint32_t pown(uint32_t, int n);

  template<int W, int I>
  ap_fixed<W,I> rootn(ap_fixed<W,I> x, int n) {
    return pow_apfixed_reduce::rootn(x,n);
  }

  template<int W, int I>
  ap_ufixed<W,I> rootn(ap_ufixed<W,I> x, int n){
    return pow_apfixed_reduce::rootn(x,n);
  }
  template<int I>
  ap_int<I> rootn(ap_int<I> x, int n){
    return pow_apfixed_reduce::rootn(x,n);
  }
  template<int I>
  ap_uint<I> rootn(ap_uint<I> x, int n){
    return pow_apfixed_reduce::rootn(x,n);
  }
  int8_t rootn(int8_t, int n);
  uint8_t rootn(uint8_t, int n);
  int16_t rootn(int16_t, int n);
  uint16_t rootn(uint16_t, int n);
  int32_t rootn(int32_t, int n);
  uint32_t rootn(uint32_t, int n);

  template<int W, int I>
  ap_fixed<W,I> powr(ap_fixed<W,I> x, ap_fixed<W,I> y) {
    return pow_apfixed_reduce::powr(x,y);
  }

  template<int W, int I>
  ap_ufixed<W,I> powr(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return pow_apfixed_reduce::powr(x,y);
  }
  template<int I>
  ap_int<I> powr(ap_int<I> x, ap_int<I> y){
    return pow_apfixed_reduce::powr(x,y);
  }
  template<int I>
  ap_uint<I> powr(ap_uint<I> x,ap_uint<I> y){
    return pow_apfixed_reduce::powr(x,y);
  }



  template<int W, int I>
  ap_fixed<W,I> round(ap_fixed<W,I> x){
    return round_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> round(ap_ufixed<W,I> x){
    return round_fixed(x);
  }
  template<int I>
  ap_int<I> round(ap_int<I> x){
    return round_fixed(x);
  }
  template<int I>
  ap_uint<I> round(ap_uint<I> x){
    return round_fixed(x);
  }
  int8_t round(int8_t);
  uint8_t round(uint8_t);
  int16_t round(int16_t);
  uint16_t round(uint16_t);
  int32_t round(int32_t);
  uint32_t round(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> rint(ap_fixed<W,I> x){
    return rint_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> rint(ap_ufixed<W,I> x){
    return rint_fixed(x);
  }
  template<int I>
  ap_int<I> rint(ap_int<I> x){
    return rint_fixed(x);
  }
  template<int I>
  ap_uint<I> rint(ap_uint<I> x){
    return rint_fixed(x);
  }
  int8_t rint(int8_t);
  uint8_t rint(uint8_t);
  int16_t rint(int16_t);
  uint16_t rint(uint16_t);
  int32_t rint(int32_t);
  uint32_t rint(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> nearbyint(ap_fixed<W,I> x){
    return nearbyint_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> nearbyint(ap_ufixed<W,I> x){
    return nearbyint_fixed(x);
  }
  template<int I>
  ap_int<I> nearbyint(ap_int<I> x){
    return nearbyint_fixed(x);
  }
  template<int I>
  ap_uint<I> nearbyint(ap_uint<I> x){
    return nearbyint_fixed(x);
  }
  int8_t nearbyint(int8_t);
  uint8_t nearbyint(uint8_t);
  int16_t nearbyint(int16_t);
  uint16_t nearbyint(uint16_t);
  int32_t nearbyint(int32_t);
  uint32_t nearbyint(uint32_t);


  template<int W, int I>
  long long int llround(ap_fixed<W,I> x){
    return llround_fixed(x);
  }
  template<int W, int I>
  long long int llround(ap_ufixed<W,I> x){
    return llround_fixed(x);
  }
  template<int I>
  long long int llround(ap_int<I> x){
    return llround_fixed(x);
  }
  template<int I>
  long long int llround(ap_uint<I> x){
    return llround_fixed(x);
  }


  long long int llround(int8_t);
  long long int llround(uint8_t);
  long long int llround(int16_t);
  long long int llround(uint16_t);
  long long int llround(int32_t);
  long long int llround(uint32_t);


  template<int W, int I>
  long int lround(ap_fixed<W,I> x){
    return lround_fixed(x);
  }
  template<int W, int I>
  long int lround(ap_ufixed<W,I> x){
    return lround_fixed(x);
  }
  template<int I>
  long int lround(ap_int<I> x){
    return lround_fixed(x);
  }
  template<int I>
  long int lround(ap_uint<I> x){
    return lround_fixed(x);
  }


  long int lround(int8_t);
  long int lround(uint8_t);
  long int lround(int16_t);
  long int lround(uint16_t);
  long int lround(int32_t);
  long int lround(uint32_t);


  template<int W, int I>
  long long int llrint(ap_fixed<W,I> x){
    return llrint_fixed(x);
  }
  template<int W, int I>
  long long int llrint(ap_ufixed<W,I> x){
    return llrint_fixed(x);
  }
  template<int I>
  long long int llrint(ap_int<I> x){
    return llrint_fixed(x);
  }
  template<int I>
  long long int llrint(ap_uint<I> x){
    return llrint_fixed(x);
  }


  long long int llrint(int8_t);
  long long int llrint(uint8_t);
  long long int llrint(int16_t);
  long long int llrint(uint16_t);
  long long int llrint(int32_t);
  long long int llrint(uint32_t);


  template<int W, int I>
  long int lrint(ap_fixed<W,I> x){
    return lrint_fixed(x);
  }
  template<int W, int I>
  long int lrint(ap_ufixed<W,I> x){
    return lrint_fixed(x);
  }
  template<int I>
  long int lrint(ap_int<I> x){
    return lrint_fixed(x);
  }
  template<int I>
  long int lrint(ap_uint<I> x){
    return lrint_fixed(x);
  }


  long int lrint(int8_t);
  long int lrint(uint8_t);
  long int lrint(int16_t);
  long int lrint(uint16_t);
  long int lrint(int32_t);
  long int lrint(uint32_t);


  template<int W, int I>
  bool isgreater(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    return isgreater_fixed(x1, x2);
  }
  template<int W, int I>
  bool isgreater(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    return isgreater_fixed(x1, x2);
  }
  template<int I>
  bool isgreater(ap_int<I> x1, ap_int<I> x2){
    return isgreater_fixed(x1, x2);
  }
  template<int I>
  bool isgreater(ap_uint<I> x1, ap_uint<I> x2){
    return isgreater_fixed(x1, x2);
  }
  bool isgreater(int8_t, int8_t);
  bool isgreater(uint8_t, uint8_t);
  bool isgreater(int16_t, int16_t);
  bool isgreater(uint16_t, uint16_t);
  bool isgreater(int32_t, int32_t);
  bool isgreater(uint32_t, uint32_t);


  template<int W, int I>
  bool isgreaterequal(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    return isgreaterequal_fixed(x1, x2);
  }
  template<int W, int I>
  bool isgreaterequal(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    return isgreaterequal_fixed(x1, x2);
  }
  template<int I>
  bool isgreaterequal(ap_int<I> x1, ap_int<I> x2){
    return isgreaterequal_int(x1, x2);
  }
  template<int I>
  bool isgreaterequal(ap_uint<I> x1, ap_uint<I> x2){
    return isgreaterequal_fixed(x1, x2);
  }
  bool isgreaterequal(int8_t, int8_t);
  bool isgreaterequal(uint8_t, uint8_t);
  bool isgreaterequal(int16_t, int16_t);
  bool isgreaterequal(uint16_t, uint16_t);
  bool isgreaterequal(int32_t, int32_t);
  bool isgreaterequal(uint32_t, uint32_t);


  template<int W, int I>
  bool isless(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    return isless_fixed(x1, x2);
  }
  template<int W, int I>
  bool isless(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    return isless_fixed(x1, x2);
  }
  template<int I>
  bool isless(ap_int<I> x1, ap_int<I> x2){
    return isless_fixed(x1, x2);
  }
  template<int I>
  bool isless(ap_uint<I> x1, ap_uint<I> x2){
    return isless_fixed(x1, x2);
  }
  bool isless(int8_t, int8_t);
  bool isless(uint8_t, uint8_t);
  bool isless(int16_t, int16_t);
  bool isless(uint16_t, uint16_t);
  bool isless(int32_t, int32_t);
  bool isless(uint32_t, uint32_t);


  template<int W, int I>
  bool islessequal(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    return islessequal_fixed(x1, x2);
  }
  template<int W, int I>
  bool islessequal(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    return islessequal_fixed(x1, x2);
  }
  template<int I>
  bool islessequal(ap_int<I> x1, ap_int<I> x2){
    return islessequal_fixed(x1, x2);
  }
  template<int I>
  bool islessequal(ap_uint<I> x1, ap_uint<I> x2){
    return islessequal_fixed(x1, x2);
  }
  bool islessequal(int8_t, int8_t);
  bool islessequal(uint8_t, uint8_t);
  bool islessequal(int16_t, int16_t);
  bool islessequal(uint16_t, uint16_t);
  bool islessequal(int32_t, int32_t);
  bool islessequal(uint32_t, uint32_t);


  template<int W, int I>
  bool islessgreater(ap_fixed<W,I> x1, ap_fixed<W,I> x2){
    return islessgreater_fixed(x1, x2);
  }
  template<int W, int I>
  bool islessgreater(ap_ufixed<W,I> x1, ap_ufixed<W,I> x2){
    return islessgreater_fixed(x1, x2);
  }
  template<int I>
  bool islessgreater(ap_int<I> x1, ap_int<I> x2){
    return islessgreater_fixed(x1, x2);
  }
  template<int I>
  bool islessgreater(ap_uint<I> x1, ap_uint<I> x2){
    return islessgreater_fixed(x1, x2);
  }

  bool islessgreater(int8_t, int8_t);
  bool islessgreater(uint8_t, uint8_t);
  bool islessgreater(int16_t, int16_t);
  bool islessgreater(uint16_t, uint16_t);
  bool islessgreater(int32_t, int32_t);
  bool islessgreater(uint32_t, uint32_t);

  int8_t frexp(int8_t,int8_t*);
  uint8_t frexp(uint8_t, uint8_t*);
  int16_t frexp(int16_t, int16_t*);
  uint16_t frexp(uint16_t, uint16_t*);
  int32_t frexp(int32_t, int32_t*);
  uint32_t frexp(uint32_t, uint32_t*);

  template<int W, int I>
  ap_fixed<W,I> frexp(ap_fixed<W,I> x, ap_fixed<W,I>* exp) {
    return frexp_internal::frexp(x,exp);
  }

  template<int W, int I>
  ap_ufixed<W,I> frexp(ap_ufixed<W,I> x, ap_ufixed<W,I>* exp){
    return frexp_internal::frexp(x,exp);
  }
  template<int I>
  ap_int<I> frexp(ap_int<I> x, ap_int<I>* exp){
    return frexp_internal::frexp(x,exp);
  }
  template<int I>
  ap_uint<I> frexp(ap_uint<I> x,ap_uint<I>* exp){
    return frexp_internal::frexp(x,exp);
  }

  int8_t modf(int8_t, int8_t*);
  uint8_t modf(uint8_t, uint8_t*);
  int16_t modf(int16_t, int16_t*);
  uint16_t modf(uint16_t, uint16_t*);
  int32_t modf(int32_t, int32_t*);
  uint32_t modf(uint32_t, uint32_t*);

  template<int W, int I>
  ap_fixed<W,I> modf(ap_fixed<W,I> x, ap_fixed<W,I>* intpart) {
    return modf_internal::modf(x,intpart);
  }

  template<int W, int I>
  ap_ufixed<W,I> modf(ap_ufixed<W,I> x, ap_ufixed<W,I>* intpart){
    return modf_internal::modf(x,exp);
  }
  template<int I>
  ap_int<I> modf(ap_int<I> x, ap_int<I>* intpart){
    return modf_internal::modf(x,intpart);
  }
  template<int I>
  ap_uint<I> modf(ap_uint<I> x,ap_uint<I>* intpart){
    return modf_internal::modf(x,intpart);
  }


  bool isequal(int8_t,int8_t);
  bool isequal(uint8_t,uint8_t);
  bool isequal(int16_t,int16_t);
  bool isequal(uint16_t,uint16_t);
  bool isequal(int32_t,int32_t);
  bool isequal(uint32_t,uint32_t);

  bool isnotequal(int8_t,int8_t);
  bool isnotequal(uint8_t,uint8_t);
  bool isnotequal(int16_t,int16_t);
  bool isnotequal(uint16_t,uint16_t);
  bool isnotequal(int32_t,int32_t);
  bool isnotequal(uint32_t,uint32_t);

  template<int W,int I>
  bool isequal(ap_fixed<W,I> x,ap_fixed<W,I> y){
    return generic_isequal(x,y);
  };
  template<int W,int I>
  bool isequal(ap_ufixed<W,I> x,ap_ufixed<W,I> y){
    return generic_isequal(x,y);
  };
  template<int I>
  bool isequal(ap_int<I> x,ap_int<I> y){
    return generic_isequal(x,y);
  };
  template<int I>
  bool isequal(ap_uint<I> x,ap_uint<I> y){
    return generic_isequal(x,y);
  };

  template<int W,int I>
  bool isnotequal(ap_fixed<W,I> x,ap_fixed<W,I> y){
    return generic_isnotequal(x,y);
  };
  template<int W,int I>
  bool isnotequal(ap_ufixed<W,I> x,ap_ufixed<W,I> y){
    return generic_isnotequal(x,y);
  };
  template<int I>
  bool isnotequal(ap_int<I> x,ap_int<I> y){
    return generic_isnotequal(x,y);
  };
  template<int I>
  bool isnotequal(ap_uint<I> x,ap_uint<I> y){
    return generic_isnotequal(x,y);
  };

  template<int W,int I>
  bool any(ap_fixed<W,I> x){
    return generic_any(x);
  };
  template<int W,int I>
  bool any(ap_ufixed<W,I> x){
    return generic_any(x);
  };
  template<int I>
  bool any(ap_int<I> x){
    return generic_any(x);
  };
  template<int I>
  bool any(ap_uint<I> x){
    return generic_any(x);
  };

  template<int W,int I>
  bool all(ap_fixed<W,I> x){
    return generic_all(x);
  };
  template<int W,int I>
  bool all(ap_ufixed<W,I> x){
    return generic_all(x);
  };
  template<int I>
  bool all(ap_int<I> x){
    return generic_all(x);
  };
  template<int I>
  bool all(ap_uint<I> x){
    return generic_all(x);
  };

  template<int W,int I>
  ap_fixed<W,I> bitselect(ap_fixed<W,I> x,ap_fixed<W,I> y, ap_fixed<W,I> z){
    return generic_bitselect(x,y,z);
  };
  template<int W,int I>
  ap_ufixed<W,I> bitselect(ap_ufixed<W,I> x,ap_ufixed<W,I> y,ap_ufixed<W,I> z){
    return generic_bitselect(x,y,z);
  };
  template<int I>
  ap_int<I> bitselect(ap_int<I> x,ap_int<I> y,ap_int<I> z){
    return generic_bitselect(x,y,z);
  };
  template<int I>
  ap_uint<I> bitselect(ap_uint<I> x,ap_uint<I> y,ap_uint<I> z){
    return generic_bitselect(x,y,z);
  };

  template<int W, int I>
  ap_fixed<W,I> erf(ap_fixed<W,I> x){
    return erf_erfc_fixed::erf(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> erf(ap_ufixed<W,I> x){
    return erf_erfc_fixed::erf(x);
  }
  template<int I>
  ap_int<I> erf(ap_int<I> x){
    return erf_erfc_fixed::erf(x);
  }
  template<int I>
  ap_uint<I> erf(ap_uint<I> x){
    return erf_erfc_fixed::erf(x);
  }

  template<int W, int I>
  ap_fixed<W,I> erfc(ap_fixed<W,I> x){
    return erf_erfc_fixed::erfc(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> erfc(ap_ufixed<W,I> x){
    return erf_erfc_fixed::erfc(x);
  }
  template<int I>
  ap_int<I> erfc(ap_int<I> x){
    return erf_erfc_fixed::erfc(x);
  }
  template<int I>
  ap_uint<I> erfc(ap_uint<I> x){
    return erf_erfc_fixed::erfc(x);
  }

  int8_t divide(int8_t,int8_t);
  int16_t divide(int16_t,int16_t);
  int32_t divide(int32_t,int32_t);
  uint8_t divide(uint8_t,uint8_t);
  uint16_t divide(uint16_t,uint16_t);
  uint32_t divide(uint32_t,uint32_t);

  template<int W, int I>
  ap_fixed<W,I> divide(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return hls_internal::generic_divide(x, y);
  }
  template<int W, int I>
  ap_ufixed<W,I> divide(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return hls_internal::generic_divide(x, y);
  }
  template<int I>
  ap_int<I> divide(ap_int<I> x, ap_int<I> y){
    return hls_internal::generic_divide(x, y);
  }
  template<int I>
  ap_uint<I> divide(ap_uint<I> x, ap_uint<I> y){
    return hls_internal::generic_divide(x, y);
  }

  int8_t fmod(int8_t,int8_t);
  int16_t fmod(int16_t,int16_t);
  int32_t fmod(int32_t,int32_t);
  uint8_t fmod(uint8_t,uint8_t);
  uint16_t fmod(uint16_t,uint16_t);
  uint32_t fmod(uint32_t,uint32_t);

  template<int W, int I>
  ap_fixed<W,I> fmod(ap_fixed<W,I> x, ap_fixed<W,I> y){
    return hls_internal::generic_fmod(x, y);
  }
  template<int W, int I>
  ap_ufixed<W,I> fmod(ap_ufixed<W,I> x, ap_ufixed<W,I> y){
    return hls_internal::generic_fmod(x, y);
  }
  template<int I>
  ap_int<I> fmod(ap_int<I> x, ap_int<I> y){
    return hls_internal::generic_fmod(x, y);
  }
  template<int I>
  ap_uint<I> fmod(ap_uint<I> x, ap_uint<I> y){
    return hls_internal::generic_fmod(x, y);
  }

  int8_t remainder(int8_t,int8_t);
  int16_t remainder(int16_t,int16_t);
  int32_t remainder(int32_t,int32_t);
  uint8_t remainder(uint8_t,uint8_t);
  uint16_t remainder(uint16_t,uint16_t);
  uint32_t remainder(uint32_t,uint32_t);

  template<int W, int I>
  ap_fixed<W,I> remainder(ap_fixed<W,I> x, ap_fixed<W, I> y){
    return hls_internal::generic_remainder(x, y);
  }
  template<int W, int I>
  ap_ufixed<W,I> remainder(ap_ufixed<W,I> x, ap_ufixed<W, I> y){
    return hls_internal::generic_remainder(x, y);
  }
  template<int I>
  ap_int<I> remainder(ap_int<I> x, ap_int<I> y){
    return hls_internal::generic_remainder(x, y);
  }
  template<int I>
  ap_uint<I> remainder(ap_uint<I> x, ap_uint<I> y){
    return hls_internal::generic_remainder(x, y);
  }

  int8_t remquo(int8_t,int8_t,int*);
  int16_t remquo(int16_t,int16_t,int*);
  int32_t remquo(int32_t,int32_t,int*);
  uint8_t remquo(uint8_t,uint8_t,int*);
  uint16_t remquo(uint16_t,uint16_t,int*);
  uint32_t remquo(uint32_t,uint32_t,int*);

  template<int W, int I>
  ap_fixed<W,I> remquo(ap_fixed<W,I> x, ap_fixed<W,I> y, int* quo){
    return hls_internal::generic_remquo(x, y, quo);
  }
  template<int W, int I>
  ap_ufixed<W,I> remquo(ap_ufixed<W,I> x, ap_ufixed<W, I> y, int* quo){
    return hls_internal::generic_remquo(x, y, quo);
  }
  template<int I>
  ap_int<I> remquo(ap_int<I> x, ap_int<I> y, int* quo){
    return hls_internal::generic_remquo(x, y, quo);
  }
  template<int I>
  ap_uint<I> remquo(ap_uint<I> x, ap_uint<I> y, int* quo){
    return hls_internal::generic_remquo(x, y, quo);
  }

  template<int W, int I>
  bool signbit(ap_fixed<W, I> x) {
    return signbit_fixed(x);
  }
  template<int W, int I>
  bool signbit(ap_ufixed<W, I> x) {
    return signbit_fixed(x);
  }
  template<int I>
  bool signbit(ap_int<I> x) {
    return signbit_fixed(x);
  }
  template<int I>
  bool signbit(ap_uint<I> x) {
    return signbit_fixed(x);
  }
  bool signbit(int8_t);
  bool signbit(uint8_t);
  bool signbit(int16_t);
  bool signbit(uint16_t);
  bool signbit(int32_t);
  bool signbit(uint32_t);


  int8_t mad(int8_t,int8_t,int8_t);
  int16_t mad(int16_t,int16_t,int16_t);
  int32_t mad(int32_t,int32_t,int32_t);
  uint8_t mad(uint8_t,uint8_t,uint8_t);
  uint16_t mad(uint16_t,uint16_t,uint16_t);
  uint32_t mad(uint32_t,uint32_t,uint32_t);

  template<int W, int I>
  ap_fixed<W,I> mad(ap_fixed<W,I> x,ap_fixed<W,I> y,ap_fixed<W,I> z){
    return hls_mad::generic_mad(x,y,z);
  }
  template<int W, int I>
  ap_ufixed<W,I> mad(ap_ufixed<W,I> x,ap_ufixed<W,I> y,ap_ufixed<W,I> z){
    return hls_mad::generic_mad(x,y,z);
  }
  template<int I>
  ap_int<I> mad(ap_int<I> x,ap_int<I> y,ap_int<I> z){
    return hls_mad::generic_mad(x,y,z);
  }
  template<int I>
  ap_uint<I> mad(ap_uint<I> x,ap_uint<I> y,ap_uint<I> z){
    return hls_mad::generic_mad(x,y,z);
  }

  int8_t fma(int8_t,int8_t,int8_t);
  int16_t fma(int16_t,int16_t,int16_t);
  int32_t fma(int32_t,int32_t,int32_t);
  uint8_t fma(uint8_t,uint8_t,uint8_t);
  uint16_t fma(uint16_t,uint16_t,uint16_t);
  uint32_t fma(uint32_t,uint32_t,uint32_t);

  template<int W, int I>
  ap_fixed<W,I> fma(ap_fixed<W,I> x,ap_fixed<W,I> y,ap_fixed<W,I> z){
    return hls_mad::generic_mad(x,y,z);
  }
  template<int W, int I>
  ap_ufixed<W,I> fma(ap_ufixed<W,I> x,ap_ufixed<W,I> y,ap_ufixed<W,I> z){
    return hls_mad::generic_mad(x,y,z);
  }
  template<int I>
  ap_int<I> fma(ap_int<I> x,ap_int<I> y,ap_int<I> z){
    return hls_mad::generic_mad(x,y,z);
  }
  template<int I>
  ap_uint<I> fma(ap_uint<I> x,ap_uint<I> y,ap_uint<I> z){
    return hls_mad::generic_mad(x,y,z);
  }

  int8_t fract(int8_t);
  int16_t fract(int16_t);
  int32_t fract(int32_t);
  uint8_t fract(uint8_t);
  uint16_t fract(uint16_t);
  uint32_t fract(uint32_t);

  template<int W, int I>
  ap_fixed<W,I> fract(ap_fixed<W,I> x){
    return hls_fract::generic_fract(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> fract(ap_ufixed<W,I> x){
    return hls_fract::generic_fract(x);
  }
  template<int I>
  ap_int<I> fract(ap_int<I> x){
    return hls_fract::generic_fract(x);
  }
  template<int I>
  ap_uint<I> fract(ap_uint<I> x){
    return hls_fract::generic_fract(x);
  }

  template<int W, int I>
  ap_fixed<W,I> cbrt(ap_fixed<W,I> x) {
    return cbrt_internal::cbrt_fixed(x);
  }
  template<int W, int I>
  ap_ufixed<W,I> cbrt(ap_ufixed<W,I> x) {
    return cbrt_internal::cbrt_fixed(x);
  }
  template<int I>
  ap_int<I> cbrt(ap_int<I> x) {
    return cbrt_internal::cbrt_fixed(x);
  }
  template<int I>
  ap_uint<I> cbrt(ap_uint<I> x) {
    return cbrt_internal::cbrt_fixed(x);
  }
  int8_t cbrt(int8_t);
  uint8_t cbrt(uint8_t);
  int16_t cbrt(int16_t);
  uint16_t cbrt(uint16_t);
  int32_t cbrt(int32_t);
  uint32_t cbrt(uint32_t);


  template<int W, int I>
  ap_fixed<W,I> nextafter(ap_fixed<W, I> x, ap_fixed<W, I> y) {
    return fp_internal::nextafter(x, y);
  }
  template<int W, int I>
  ap_ufixed<W,I> nextafter(ap_ufixed<W, I> x, ap_ufixed<W, I> y) {
    return fp_internal::nextafter(x, y);
  }
  template<int I>
  ap_int<I> nextafter(ap_int<I> x, ap_int<I> y) {
    return fp_internal::nextafter(x, y);
  }
  template<int I>
  ap_uint<I> nextafter(ap_uint<I> x, ap_uint<I> y) {
    return fp_internal::nextafter(x, y);
  }
  int8_t nextafter(int8_t, int8_t);
  uint8_t nextafter(uint8_t, uint8_t);
  int16_t nextafter(int16_t, int16_t);
  uint16_t nextafter(uint16_t, uint16_t);
  int32_t nextafter(int32_t, int32_t);
  uint32_t nextafter(uint32_t, uint32_t);


  template<int W, int I>
  ap_fixed<W,I> nexttoward(ap_fixed<W, I> x, ap_fixed<W, I> y) {
    return fp_internal::nexttoward(x, y);
  }
  template<int W, int I>
  ap_ufixed<W,I> nexttoward(ap_ufixed<W, I> x, ap_ufixed<W, I> y) {
    return fp_internal::nexttoward(x, y);
  }
  template<int I>
  ap_int<I> nexttoward(ap_int<I> x, ap_int<I> y) {
    return fp_internal::nexttoward(x, y);
  }
  template<int I>
  ap_uint<I> nexttoward(ap_uint<I> x, ap_uint<I> y) {
    return fp_internal::nexttoward(x, y);
  }
  int8_t nexttoward(int8_t, int8_t);
  uint8_t nexttoward(uint8_t, uint8_t);
  int16_t nexttoward(int16_t, int16_t);
  uint16_t nexttoward(uint16_t, uint16_t);
  int32_t nexttoward(int32_t, int32_t);
  uint32_t nexttoward(uint32_t, uint32_t);


  template<int W, int I>
  ap_fixed<W,I> hypot(ap_fixed<W,I> x, ap_fixed<W,I> y) {
    return hypot_internal::hypot_fixed(x,y);
  }
  template<int W, int I>
  ap_ufixed<W,I> hypot(ap_ufixed<W,I> x, ap_ufixed<W,I> y) {
    return hypot_internal::hypot_fixed(x,y);
  }
  template<int I>
  ap_int<I> hypot(ap_int<I> x, ap_int<I> y) {
    return hypot_internal::hypot_fixed(x,y);
  }
  template<int I>
  ap_uint<I> hypot(ap_uint<I> x, ap_uint<I> y) {
    return hypot_internal::hypot_fixed(x,y);
  }
  int8_t hypot(int8_t, int8_t);
  uint8_t hypot(uint8_t, uint8_t);
  int16_t hypot(int16_t, int16_t);
  uint16_t hypot(uint16_t, uint16_t);
  int32_t hypot(int32_t, int32_t);
  uint32_t hypot(uint32_t, uint32_t);

  template<int W, int I>
  ap_fixed<W,I> exp2(ap_fixed<W,I> x) {
    return exp_reduce::exp2(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> exp2(ap_ufixed<W,I> x) {
    return exp_reduce::exp2(x);
  }

  template<int I>
  ap_int<I> exp2(ap_int<I> x) {
    return exp_reduce::exp2(x);
  }

  template<int I>
  ap_uint<I> exp2(ap_uint<I> x) {
    return exp_reduce::exp2(x);
  }

  template<int W, int I>
  ap_fixed<W,I> exp10(ap_fixed<W,I> x) {
    return exp_reduce::exp10(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> exp10(ap_ufixed<W,I> x) {
    return exp_reduce::exp10(x);
  }

  template<int I>
  ap_int<I> exp10(ap_int<I> x) {
    return exp_reduce::exp10(x);
  }

  template<int I>
  ap_uint<I> exp10(ap_uint<I> x) {
    return exp_reduce::exp10(x);
  }

  template<int W, int I>
  ap_fixed<W,I> expm1(ap_fixed<W,I> x) {
    return exp_reduce::expm1(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> expm1(ap_ufixed<W,I> x) {
    return exp_reduce::expm1(x);
  }

  template<int I>
  ap_int<I> expm1(ap_int<I> x) {
    return exp_reduce::expm1(x);
  }

  template<int I>
  ap_uint<I> expm1(ap_uint<I> x) {
    return exp_reduce::expm1(x);
  }

  template<int W, int I>
  ap_fixed<W,I> log1p(ap_fixed<W,I> x) {
    return log_apfixed_reduce::log1p(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> log1p(ap_ufixed<W,I> x) {
    return log_apfixed_reduce::log1p(x);
  }

  template<int I>
  ap_int<I> log1p(ap_int<I> x) {
    return log_apfixed_reduce::log1p(x);
  }

  template<int I>
  ap_uint<I> log1p(ap_uint<I> x) {
    return log_apfixed_reduce::log1p(x);
  }

  template<int W, int I>
  ap_fixed<W,I> ilogb(ap_fixed<W,I> x) {
    return log_apfixed_reduce::ilogb(x);
  }

  template<int W, int I>
  ap_ufixed<W,I> ilogb(ap_ufixed<W,I> x) {
    return log_apfixed_reduce::ilogb(x);
  }

  template<int I>
  ap_int<I> ilogb(ap_int<I> x) {
    return log_apfixed_reduce::ilogb(x);
  }

  template<int I>
  ap_uint<I> ilogb(ap_uint<I> x) {
    return log_apfixed_reduce::ilogb(x);
  }

  template<int W, int I>
  ap_fixed<W,I> ldexp(ap_fixed<W,I> x, int exp) {
    return hls_ldexp::ldexp(x, exp);
  }

  template<int W, int I>
  ap_ufixed<W,I> ldexp(ap_ufixed<W,I> x, int exp) {
    return hls_ldexp::ldexp(x, exp);
  }

  template<int I>
  ap_int<I> ldexp(ap_int<I> x, int exp) {
    return hls_ldexp::ldexp(x, exp);
  }

  template<int I>
  ap_uint<I> ldexp(ap_uint<I> x, int exp) {
    return hls_ldexp::ldexp(x, exp);
  }

  template<int W, int I>
  ap_fixed<W,I> scalbn(ap_fixed<W,I> x, int n) {
    return hls_ldexp::scalbn(x, n);
  }

  template<int W, int I>
  ap_ufixed<W,I> scalbn(ap_ufixed<W,I> x, int n) {
    return hls_ldexp::scalbn(x, n);
  }

  template<int I>
  ap_int<I> scalbn(ap_int<I> x, int n) {
    return hls_ldexp::scalbn(x, n);
  }

  template<int I>
  ap_uint<I> scalbn(ap_uint<I> x, int n) {
    return hls_ldexp::scalbn(x, n);
  }

  template<int W, int I>
  ap_fixed<W,I> scalbln(ap_fixed<W,I> x, long int n) {
    return hls_ldexp::scalbln(x, n);
  }

  template<int W, int I>
  ap_ufixed<W,I> scalbln(ap_ufixed<W,I> x, long int n) {
    return hls_ldexp::scalbln(x, n);
  }

  template<int I>
  ap_int<I> scalbln(ap_int<I> x, long int n) {
    return hls_ldexp::scalbln(x, n);
  }

  template<int I>
  ap_uint<I> scalbln(ap_uint<I> x, long int n) {
    return hls_ldexp::scalbln(x, n);
  }

    int8_t ldexp(int8_t x, int exp);
    int16_t ldexp(int16_t x, int exp);
    int32_t ldexp(int32_t x, int exp);
    uint8_t ldexp(uint8_t x, int exp);
    uint16_t ldexp(uint16_t x, int exp);
    uint32_t ldexp(uint32_t x, int exp);

    int8_t scalbn(int8_t x, int n);
    int16_t scalbn(int16_t x, int n);
    int32_t scalbn(int32_t x, int n);
    uint8_t scalbn(uint8_t x, int n);
    uint16_t scalbn(uint16_t x, int n);
    uint32_t scalbn(uint32_t x, int n);

    int8_t scalbln(int8_t x, int n);
    int16_t scalbln(int16_t x, int n);
    int32_t scalbln(int32_t x, int n);
    uint8_t scalbln(uint8_t x, int n);
    uint16_t scalbln(uint16_t x, int n);
    uint32_t scalbln(uint32_t x, int n);

    int8_t exp2(int8_t x);
    int16_t exp2(int16_t x);
    int32_t exp2(int32_t x);
    uint8_t exp2(uint8_t x);
    uint16_t exp2(uint16_t x);
    uint32_t exp2(uint32_t x);

    int8_t exp10(int8_t x);
    int16_t exp10(int16_t x);
    int32_t exp10(int32_t x);
    uint8_t exp10(uint8_t x);
    uint16_t exp10(uint16_t x);
    uint32_t exp10(uint32_t x);

    int8_t expm1(int8_t x);
    int16_t expm1(int16_t x);
    int32_t expm1(int32_t x);
    uint8_t expm1(uint8_t x);
    uint16_t expm1(uint16_t x);
    uint32_t expm1(uint32_t x);

    int8_t ilogb(int8_t x);
    int16_t ilogb(int16_t x);
    int32_t ilogb(int32_t x);
    uint8_t ilogb(uint8_t x);
    uint16_t ilogb(uint16_t x);
    uint32_t ilogb(uint32_t x);

    int8_t log1p(int8_t x);
    int16_t log1p(int16_t x);
    int32_t log1p(int32_t x);
    uint8_t log1p(uint8_t x);
    uint16_t log1p(uint16_t x);
    uint32_t log1p(uint32_t x);

    int8_t log2(int8_t);
    uint8_t log2(uint8_t);
    int16_t log2(int16_t);
    uint16_t log2(uint16_t);
    int32_t log2(int32_t);
    uint32_t log2(uint32_t);

    int8_t logb(int8_t);
    uint8_t logb(uint8_t);
    int16_t logb(int16_t);
    uint16_t logb(uint16_t);
    int32_t logb(int32_t);
    uint32_t logb(uint32_t);

};
# 13 "./layer.h" 2

# 1 "./data_include.h" 1
# 22 "./data_include.h"
# 1 "./data_4th/sin_tab.h" 1

const attn_fixed_t sin_tab[10][96] = {
    {},
    {0.841470956802, 0.734680294991, 0.629688620567, 0.533302664757, 0.447628319263, 0.373757332563, 0.310921192169, 0.258033603430, 0.213791057467, 0.176920235157, 0.146202594042, 0.120858609676, 0.099809125066, 0.082425907254, 0.068062573671, 0.056214246899, 0.046400569379, 0.038290198892, 0.031610943377, 0.026104822755, 0.021543743089, 0.017775552347, 0.014678427950, 0.012115182355, 0.010001969524, 0.008254910819, 0.006812996697, 0.005622833967, 0.004642469808, 0.003831854090, 0.003162378678, 0.002609249903, 0.002155302325, 0.001778601669, 0.001467704191, 0.001211166033, 0.001000404241, 0.000825405004, 0.000681400241, 0.000562190951, 0.000464200944, 0.000383138657, 0.000316143036, 0.000261068344, 0.000215411186, 0.000177860260, 0.000146746635, 0.000121176243, 0.841470956802, 0.734680294991, 0.629688620567, 0.533302664757, 0.447628319263, 0.373757332563, 0.310921192169, 0.258033603430, 0.213791057467, 0.176920235157, 0.146202594042, 0.120858609676, 0.099809125066, 0.082425907254, 0.068062573671, 0.056214246899, 0.046400569379, 0.038290198892, 0.031610943377, 0.026104822755, 0.021543743089, 0.017775552347, 0.014678427950, 0.012115182355, 0.010001969524, 0.008254910819, 0.006812996697, 0.005622833967, 0.004642469808, 0.003831854090, 0.003162378678, 0.002609249903, 0.002155302325, 0.001778601669, 0.001467704191, 0.001211166033, 0.001000404241, 0.000825405004, 0.000681400241, 0.000562190951, 0.000464200944, 0.000383138657, 0.000316143036, 0.000261068344, 0.000215411186, 0.000177860260, 0.000146746635, 0.000121176243},
    {0.909297406673, 0.996834039688, 0.978344261646, 0.902267575264, 0.800556123257, 0.693339645863, 0.591021180153, 0.498591065407, 0.417696148157, 0.348258703947, 0.289263188839, 0.239945366979, 0.198621481657, 0.164290860295, 0.135809481144, 0.112250715494, 0.092701181769, 0.076524235308, 0.063190296292, 0.052191853523, 0.043077487499, 0.035545490682, 0.029353693128, 0.024228585884, 0.020002938807, 0.016509259120, 0.013625676744, 0.011245490052, 0.009284839965, 0.007663651835, 0.006324725691, 0.005218482111, 0.004310594406, 0.003557197750, 0.002935405355, 0.002422330435, 0.002000807319, 0.001650809543, 0.001362800132, 0.001124381786, 0.000928401831, 0.000766277255, 0.000632286014, 0.000522136688, 0.000430822372, 0.000355720520, 0.000293493271, 0.000242352486, 0.909297406673, 0.996834039688, 0.978344261646, 0.902267575264, 0.800556123257, 0.693339645863, 0.591021180153, 0.498591065407, 0.417696148157, 0.348258703947, 0.289263188839, 0.239945366979, 0.198621481657, 0.164290860295, 0.135809481144, 0.112250715494, 0.092701181769, 0.076524235308, 0.063190296292, 0.052191853523, 0.043077487499, 0.035545490682, 0.029353693128, 0.024228585884, 0.020002938807, 0.016509259120, 0.013625676744, 0.011245490052, 0.009284839965, 0.007663651835, 0.006324725691, 0.005218482111, 0.004310594406, 0.003557197750, 0.002935405355, 0.002422330435, 0.002000807319, 0.001650809543, 0.001362800132, 0.001124381786, 0.000928401831, 0.000766277255, 0.000632286014, 0.000522136688, 0.000430822372, 0.000355720520, 0.000293493271, 0.000242352486},
    {0.141120001674, 0.617851018906, 0.890360116959, 0.993197858334, 0.984117805958, 0.912424564362, 0.812534093857, 0.705379903316, 0.602286517620, 0.508609771729, 0.426107317209, 0.355514407158, 0.295450240374, 0.245037719607, 0.202926516533, 0.167932182550, 0.138802111149, 0.114646039903, 0.094706483185, 0.078243307769, 0.064591236413, 0.053304191679, 0.044022634625, 0.036338433623, 0.030001906678, 0.024762483314, 0.020437724888, 0.016867792234, 0.013927009888, 0.011495336890, 0.009487009607, 0.007827678695, 0.006465866696, 0.005335782655, 0.004403099883, 0.003633491229, 0.003001208650, 0.002476212801, 0.002044199500, 0.001686572214, 0.001392602455, 0.001149415737, 0.000948428991, 0.000783204974, 0.000646233500, 0.000533580780, 0.000440239906, 0.000363528728, 0.141120001674, 0.617851018906, 0.890360116959, 0.993197858334, 0.984117805958, 0.912424564362, 0.812534093857, 0.705379903316, 0.602286517620, 0.508609771729, 0.426107317209, 0.355514407158, 0.295450240374, 0.245037719607, 0.202926516533, 0.167932182550, 0.138802111149, 0.114646039903, 0.094706483185, 0.078243307769, 0.064591236413, 0.053304191679, 0.044022634625, 0.036338433623, 0.030001906678, 0.024762483314, 0.020437724888, 0.016867792234, 0.013927009888, 0.011495336890, 0.009487009607, 0.007827678695, 0.006465866696, 0.005335782655, 0.004403099883, 0.003633491229, 0.003001208650, 0.002476212801, 0.002044199500, 0.001686572214, 0.001392602455, 0.001149415737, 0.000948428991, 0.000783204974, 0.000646233500, 0.000533580780, 0.000440239906, 0.000363528728},
    {-0.756802499294, -0.158517122269, 0.405004054308, 0.778073191643, 0.959478974342, 0.999256253242, 0.953501641750, 0.864394724369, 0.759026408195, 0.652914345264, 0.553794145584, 0.465871393681, 0.389328390360, 0.324116945267, 0.269102394581, 0.223082557321, 0.184604018927, 0.152599692345, 0.126128017902, 0.104241438210, 0.086075000465, 0.071046054363, 0.058682087809, 0.048442948610, 0.039997871965, 0.033014018089, 0.027248824015, 0.022489558905, 0.018568878993, 0.015326853842, 0.012649198994, 0.010436822660, 0.008621108718, 0.007114350330, 0.005870785564, 0.004844646435, 0.004001606721, 0.003301614430, 0.002725597937, 0.002248762175, 0.001856802846, 0.001532554044, 0.001264571794, 0.001044273144, 0.000861644628, 0.000711440982, 0.000586986484, 0.000484704942, -0.756802499294, -0.158517122269, 0.405004054308, 0.778073191643, 0.959478974342, 0.999256253242, 0.953501641750, 0.864394724369, 0.759026408195, 0.652914345264, 0.553794145584, 0.465871393681, 0.389328390360, 0.324116945267, 0.269102394581, 0.223082557321, 0.184604018927, 0.152599692345, 0.126128017902, 0.104241438210, 0.086075000465, 0.071046054363, 0.058682087809, 0.048442948610, 0.039997871965, 0.033014018089, 0.027248824015, 0.022489558905, 0.018568878993, 0.015326853842, 0.012649198994, 0.010436822660, 0.008621108718, 0.007114350330, 0.005870785564, 0.004844646435, 0.004001606721, 0.003301614430, 0.002725597937, 0.002248762175, 0.001856802846, 0.001532554044, 0.001264571794, 0.001044273144, 0.000861644628, 0.000711440982, 0.000586986484, 0.000484704942},
    {-0.958924293518, -0.832931339741, -0.261107236147, 0.323184520006, 0.731852233410, 0.941248893738, 0.999949872494, 0.964865684509, 0.880668044090, 0.776619791985, 0.669579565525, 0.569398462772, 0.479318410158, 0.400990337133, 0.334030240774, 0.277527421713, 0.230008274317, 0.190329536796, 0.157423481345, 0.130168512464, 0.107518807054, 0.088765464723, 0.073328897357, 0.060540348291, 0.049989838153, 0.041263304651, 0.034058660269, 0.028110615909, 0.023210348561, 0.019158145413, 0.015811260790, 0.013045894913, 0.010776311159, 0.008892895654, 0.007338458207, 0.006055795122, 0.005002000835, 0.004127013963, 0.003406994976, 0.002810951322, 0.002321002772, 0.001915692119, 0.001580714481, 0.001305341371, 0.001077055698, 0.000889301184, 0.000733733119, 0.000605881156, -0.958924293518, -0.832931339741, -0.261107236147, 0.323184520006, 0.731852233410, 0.941248893738, 0.999949872494, 0.964865684509, 0.880668044090, 0.776619791985, 0.669579565525, 0.569398462772, 0.479318410158, 0.400990337133, 0.334030240774, 0.277527421713, 0.230008274317, 0.190329536796, 0.157423481345, 0.130168512464, 0.107518807054, 0.088765464723, 0.073328897357, 0.060540348291, 0.049989838153, 0.041263304651, 0.034058660269, 0.028110615909, 0.023210348561, 0.019158145413, 0.015811260790, 0.013045894913, 0.010776311159, 0.008892895654, 0.007338458207, 0.006055795122, 0.005002000835, 0.004127013963, 0.003406994976, 0.002810951322, 0.002321002772, 0.001915692119, 0.001580714481, 0.001305341371, 0.001077055698, 0.000889301184, 0.000733733119, 0.000605881156},
    {-0.279415488243, -0.971626579762, -0.810685157776, -0.231293812394, 0.349394381046, 0.746810317039, 0.947274446487, 0.999988079071, 0.961586534977, 0.875823140144, 0.770975291729, 0.664577841759, 0.564521551132, 0.475134760141, 0.397408843040, 0.331094622612, 0.274917036295, 0.227780222893, 0.188561603427, 0.156006872654, 0.128912702203, 0.106456823647, 0.087959907949, 0.072628863156, 0.059976801276, 0.049509778619, 0.040866911411, 0.033730782568, 0.027851317078, 0.022989155725, 0.018973166123, 0.015654878691, 0.012931463309, 0.010671413504, 0.008806115016, 0.007266934495, 0.006002390292, 0.004952410702, 0.004088390619, 0.003373139771, 0.002785202349, 0.002298829844, 0.001896857051, 0.001566409366, 0.001292466768, 0.001067161327, 0.000880479696, 0.000727057399, -0.279415488243, -0.971626579762, -0.810685157776, -0.231293812394, 0.349394381046, 0.746810317039, 0.947274446487, 0.999988079071, 0.961586534977, 0.875823140144, 0.770975291729, 0.664577841759, 0.564521551132, 0.475134760141, 0.397408843040, 0.331094622612, 0.274917036295, 0.227780222893, 0.188561603427, 0.156006872654, 0.128912702203, 0.106456823647, 0.087959907949, 0.072628863156, 0.059976801276, 0.049509778619, 0.040866911411, 0.033730782568, 0.027851317078, 0.022989155725, 0.018973166123, 0.015654878691, 0.012931463309, 0.010671413504, 0.008806115016, 0.007266934495, 0.006002390292, 0.004952410702, 0.004088390619, 0.003373139771, 0.002785202349, 0.002298829844, 0.001896857051, 0.001566409366, 0.001292466768, 0.001067161327, 0.000880479696, 0.000727057399},
    {0.656986594200, -0.485397815704, -0.998450398445, -0.714498698711, -0.106981515884, 0.444123864174, 0.800697088242, 0.967383205891, 0.998040139675, 0.947394609451, 0.855802237988, 0.750014185905, 0.644086956978, 0.546045601368, 0.458944320679, 0.383614689112, 0.319233596325, 0.264896839857, 0.219511255622, 0.181738898158, 0.150246769190, 0.124114543200, 0.102571971714, 0.084706723690, 0.069957762957, 0.057752881199, 0.047673270106, 0.039349883795, 0.032491687685, 0.026819827035, 0.022134879604, 0.018263755366, 0.015086554922, 0.012449896894, 0.010273752734, 0.008478063159, 0.007002773229, 0.005777803715, 0.004769783933, 0.003935326822, 0.003249400994, 0.002681967337, 0.002212999389, 0.001827477361, 0.001507877721, 0.001245021471, 0.001027226215, 0.000848233583, 0.656986594200, -0.485397815704, -0.998450398445, -0.714498698711, -0.106981515884, 0.444123864174, 0.800697088242, 0.967383205891, 0.998040139675, 0.947394609451, 0.855802237988, 0.750014185905, 0.644086956978, 0.546045601368, 0.458944320679, 0.383614689112, 0.319233596325, 0.264896839857, 0.219511255622, 0.181738898158, 0.150246769190, 0.124114543200, 0.102571971714, 0.084706723690, 0.069957762957, 0.057752881199, 0.047673270106, 0.039349883795, 0.032491687685, 0.026819827035, 0.022134879604, 0.018263755366, 0.015086554922, 0.012449896894, 0.010273752734, 0.008478063159, 0.007002773229, 0.005777803715, 0.004769783933, 0.003935326822, 0.003249400994, 0.002681967337, 0.002212999389, 0.001827477361, 0.001507877721, 0.001245021471, 0.001027226215, 0.000848233583},
    {0.989358246326, 0.313025712967, -0.740602493286, -0.977530121803, -0.540724337101, 0.077063046396, 0.574747681618, 0.869259297848, 0.988343238831, 0.989076137543, 0.922237396240, 0.824454903603, 0.717220008373, 0.613240301609, 0.518351256847, 0.434921562672, 0.362862467766, 0.301624923944, 0.250241518021, 0.207347065210, 0.171511083841, 0.141733050346, 0.117161929607, 0.096772141755, 0.079931728542, 0.065992049873, 0.054477412254, 0.044967740774, 0.037131354213, 0.030650107190, 0.025296373293, 0.020872507244, 0.017241576687, 0.014228340238, 0.011741368100, 0.009689179249, 0.008003149182, 0.006603193004, 0.005451175384, 0.004497512709, 0.003713599173, 0.003065104363, 0.002529141493, 0.002088545123, 0.001723288675, 0.001422881614, 0.001173972851, 0.000969409768, 0.989358246326, 0.313025712967, -0.740602493286, -0.977530121803, -0.540724337101, 0.077063046396, 0.574747681618, 0.869259297848, 0.988343238831, 0.989076137543, 0.922237396240, 0.824454903603, 0.717220008373, 0.613240301609, 0.518351256847, 0.434921562672, 0.362862467766, 0.301624923944, 0.250241518021, 0.207347065210, 0.171511083841, 0.141733050346, 0.117161929607, 0.096772141755, 0.079931728542, 0.065992049873, 0.054477412254, 0.044967740774, 0.037131354213, 0.030650107190, 0.025296373293, 0.020872507244, 0.017241576687, 0.014228340238, 0.011741368100, 0.009689179249, 0.008003149182, 0.006603193004, 0.005451175384, 0.004497512709, 0.003713599173, 0.003065104363, 0.002529141493, 0.002088545123, 0.001723288675, 0.001422881614, 0.001173972851, 0.000969409768},
    {0.412118494511, 0.910119533539, -0.152220144868, -0.939334630966, -0.860071241856, -0.301167845726, 0.291824370623, 0.712262094021, 0.932944118977, 0.999552667141, 0.968853116035, 0.886808633804, 0.783190310001, 0.676261484623, 0.575354158878, 0.484852999449, 0.405709654093, 0.337910622358, 0.280721634626, 0.232813894749, 0.192695796490, 0.159306764603, 0.131726637483, 0.108823366463, 0.089897699654, 0.074226714671, 0.061279028654, 0.050584178418, 0.041770223528, 0.034479934722, 0.028457613662, 0.023481117561, 0.019396519288, 0.016006739810, 0.013208959252, 0.010900281370, 0.009003517218, 0.007428577635, 0.006132564042, 0.005059697665, 0.004177796654, 0.003448241157, 0.002845283598, 0.002349613002, 0.001938699512, 0.001600741642, 0.001320719370, 0.001090585953, 0.412118494511, 0.910119533539, -0.152220144868, -0.939334630966, -0.860071241856, -0.301167845726, 0.291824370623, 0.712262094021, 0.932944118977, 0.999552667141, 0.968853116035, 0.886808633804, 0.783190310001, 0.676261484623, 0.575354158878, 0.484852999449, 0.405709654093, 0.337910622358, 0.280721634626, 0.232813894749, 0.192695796490, 0.159306764603, 0.131726637483, 0.108823366463, 0.089897699654, 0.074226714671, 0.061279028654, 0.050584178418, 0.041770223528, 0.034479934722, 0.028457613662, 0.023481117561, 0.019396519288, 0.016006739810, 0.013208959252, 0.010900281370, 0.009003517218, 0.007428577635, 0.006132564042, 0.005059697665, 0.004177796654, 0.003448241157, 0.002845283598, 0.002349613002, 0.001938699512, 0.001600741642, 0.001320719370, 0.001090585953}
};
# 23 "./data_include.h" 2
# 1 "./data_4th/cos_tab.h" 1

const attn_fixed_t cos_tab[10][96] = {
    {},
    {0.540302276611, 0.678413510323, 0.776847600937, 0.845924496651, 0.894219696522, 0.927526533604, 0.950435698032, 0.966135919094, 0.976879417896, 0.984225213528, 0.989254653454, 0.992669761181, 0.995006620884, 0.996597170830, 0.997681081295, 0.998418748379, 0.998922884464, 0.999266684055, 0.999500274658, 0.999659240246, 0.999767899513, 0.999841988087, 0.999892294407, 0.999926626682, 0.999949991703, 0.999965906143, 0.999976813793, 0.999984204769, 0.999989211559, 0.999992668629, 0.999994993210, 0.999996602535, 0.999997675419, 0.999998390675, 0.999998927116, 0.999999284744, 0.999999523163, 0.999999642372, 0.999999761581, 0.999999821186, 0.999999880791, 0.999999940395, 0.999999940395, 0.999999940395, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 0.540302276611, 0.678413510323, 0.776847600937, 0.845924496651, 0.894219696522, 0.927526533604, 0.950435698032, 0.966135919094, 0.976879417896, 0.984225213528, 0.989254653454, 0.992669761181, 0.995006620884, 0.996597170830, 0.997681081295, 0.998418748379, 0.998922884464, 0.999266684055, 0.999500274658, 0.999659240246, 0.999767899513, 0.999841988087, 0.999892294407, 0.999926626682, 0.999949991703, 0.999965906143, 0.999976813793, 0.999984204769, 0.999989211559, 0.999992668629, 0.999994993210, 0.999996602535, 0.999997675419, 0.999998390675, 0.999998927116, 0.999999284744, 0.999999523163, 0.999999642372, 0.999999761581, 0.999999821186, 0.999999880791, 0.999999940395, 0.999999940395, 0.999999940395, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000},
    {-0.416146844625, -0.079510286450, 0.206984445453, 0.431176513433, 0.599257767200, 0.720610916615, 0.806656002998, 0.866837322712, 0.908586800098, 0.937398433685, 0.957249581814, 0.970786392689, 0.980076253414, 0.986411929131, 0.990734994411, 0.993679940701, 0.995693981647, 0.997067749500, 0.998001515865, 0.998637080193, 0.999071717262, 0.999368071556, 0.999569058418, 0.999706447124, 0.999799907207, 0.999863684177, 0.999907195568, 0.999936759472, 0.999956905842, 0.999970614910, 0.999979972839, 0.999986410141, 0.999990701675, 0.999993681908, 0.999995708466, 0.999997079372, 0.999997973442, 0.999998629093, 0.999999046326, 0.999999344349, 0.999999582767, 0.999999701977, 0.999999821186, 0.999999880791, 0.999999880791, 0.999999940395, 0.999999940395, 1.000000000000, -0.416146844625, -0.079510286450, 0.206984445453, 0.431176513433, 0.599257767200, 0.720610916615, 0.806656002998, 0.866837322712, 0.908586800098, 0.937398433685, 0.957249581814, 0.970786392689, 0.980076253414, 0.986411929131, 0.990734994411, 0.993679940701, 0.995693981647, 0.997067749500, 0.998001515865, 0.998637080193, 0.999071717262, 0.999368071556, 0.999569058418, 0.999706447124, 0.999799907207, 0.999863684177, 0.999907195568, 0.999936759472, 0.999956905842, 0.999970614910, 0.999979972839, 0.999986410141, 0.999990701675, 0.999993681908, 0.999995708466, 0.999997079372, 0.999997973442, 0.999998629093, 0.999999046326, 0.999999344349, 0.999999582767, 0.999999701977, 0.999999821186, 0.999999880791, 0.999999880791, 0.999999940395, 0.999999940395, 1.000000000000},
    {-0.989992499352, -0.786295175552, -0.455256879330, -0.116438940167, 0.177516549826, 0.409244954586, 0.582913637161, 0.708829462528, 0.798280000687, 0.860997140408, 0.904672622681, 0.934670805931, 0.955358147621, 0.969513535500, 0.979193985462, 0.985798537731, 0.990320146084, 0.993406414986, 0.995505213737, 0.996934294701, 0.997911810875, 0.998578310013, 0.999030530453, 0.999339520931, 0.999549865723, 0.999693334103, 0.999791145325, 0.999857723713, 0.999903023243, 0.999933898449, 0.999954998493, 0.999969363213, 0.999979078770, 0.999985754490, 0.999990284443, 0.999993383884, 0.999995470047, 0.999996960163, 0.999997913837, 0.999998569489, 0.999999046326, 0.999999344349, 0.999999523163, 0.999999701977, 0.999999761581, 0.999999880791, 0.999999880791, 0.999999940395, -0.989992499352, -0.786295175552, -0.455256879330, -0.116438940167, 0.177516549826, 0.409244954586, 0.582913637161, 0.708829462528, 0.798280000687, 0.860997140408, 0.904672622681, 0.934670805931, 0.955358147621, 0.969513535500, 0.979193985462, 0.985798537731, 0.990320146084, 0.993406414986, 0.995505213737, 0.996934294701, 0.997911810875, 0.998578310013, 0.999030530453, 0.999339520931, 0.999549865723, 0.999693334103, 0.999791145325, 0.999857723713, 0.999903023243, 0.999933898449, 0.999954998493, 0.999969363213, 0.999979078770, 0.999985754490, 0.999990284443, 0.999993383884, 0.999995470047, 0.999996960163, 0.999997913837, 0.999998569489, 0.999999046326, 0.999999344349, 0.999999523163, 0.999999701977, 0.999999761581, 0.999999880791, 0.999999880791, 0.999999940395},
    {-0.653643608093, -0.987356245518, -0.914314866066, -0.628173649311, -0.281780213118, 0.038560200483, 0.301387876272, 0.502813875675, 0.651059865952, 0.757431745529, 0.832653641701, 0.884852468967, 0.921099007130, 0.946017026901, 0.963111579418, 0.974799573421, 0.982813000679, 0.988288104534, 0.992013990879, 0.994552016258, 0.996288657188, 0.997473061085, 0.998276710510, 0.998825967312, 0.999199748039, 0.999454915524, 0.999628663063, 0.999747097492, 0.999827563763, 0.999882519245, 0.999920010567, 0.999945521355, 0.999962866306, 0.999974668026, 0.999982774258, 0.999988257885, 0.999992012978, 0.999994575977, 0.999996304512, 0.999997496605, 0.999998271465, 0.999998807907, 0.999999225140, 0.999999463558, 0.999999642372, 0.999999761581, 0.999999821186, 0.999999880791, -0.653643608093, -0.987356245518, -0.914314866066, -0.628173649311, -0.281780213118, 0.038560200483, 0.301387876272, 0.502813875675, 0.651059865952, 0.757431745529, 0.832653641701, 0.884852468967, 0.921099007130, 0.946017026901, 0.963111579418, 0.974799573421, 0.982813000679, 0.988288104534, 0.992013990879, 0.994552016258, 0.996288657188, 0.997473061085, 0.998276710510, 0.998825967312, 0.999199748039, 0.999454915524, 0.999628663063, 0.999747097492, 0.999827563763, 0.999882519245, 0.999920010567, 0.999945521355, 0.999962866306, 0.999974668026, 0.999982774258, 0.999988257885, 0.999992012978, 0.999994575977, 0.999996304512, 0.999997496605, 0.999998271465, 0.999998807907, 0.999999225140, 0.999999463558, 0.999999642372, 0.999999761581, 0.999999821186, 0.999999880791},
    {0.283662199974, -0.553376376629, -0.965309798717, -0.946335971355, -0.681463360786, -0.337713748217, -0.010014052503, 0.262743681669, 0.473733901978, 0.629969656467, 0.742740333080, 0.822061657906, 0.877641081810, 0.916082262993, 0.942562341690, 0.960717737675, 0.973188698292, 0.981720268726, 0.987531185150, 0.991491913795, 0.994203031063, 0.996052563190, 0.997307837009, 0.998165726662, 0.998749732971, 0.999148309231, 0.999419808388, 0.999604821205, 0.999730587006, 0.999816477299, 0.999875009060, 0.999914884567, 0.999941945076, 0.999960482121, 0.999973058701, 0.999981641769, 0.999987483025, 0.999991476536, 0.999994218349, 0.999996066093, 0.999997317791, 0.999998152256, 0.999998748302, 0.999999165535, 0.999999403954, 0.999999582767, 0.999999701977, 0.999999821186, 0.283662199974, -0.553376376629, -0.965309798717, -0.946335971355, -0.681463360786, -0.337713748217, -0.010014052503, 0.262743681669, 0.473733901978, 0.629969656467, 0.742740333080, 0.822061657906, 0.877641081810, 0.916082262993, 0.942562341690, 0.960717737675, 0.973188698292, 0.981720268726, 0.987531185150, 0.991491913795, 0.994203031063, 0.996052563190, 0.997307837009, 0.998165726662, 0.998749732971, 0.999148309231, 0.999419808388, 0.999604821205, 0.999730587006, 0.999816477299, 0.999875009060, 0.999914884567, 0.999941945076, 0.999960482121, 0.999973058701, 0.999981641769, 0.999987483025, 0.999991476536, 0.999994218349, 0.999996066093, 0.999997317791, 0.999998152256, 0.999998748302, 0.999999165535, 0.999999403954, 0.999999582767, 0.999999701977, 0.999999821186},
    {0.960170269012, 0.236520230770, -0.585482358932, -0.972883939743, -0.936975777149, -0.665037095547, -0.320423305035, 0.004878338892, 0.274501949549, 0.482632219791, 0.636865079403, 0.747219026089, 0.825418293476, 0.879913032055, 0.917641639709, 0.943597555161, 0.961467921734, 0.973712563515, 0.982061386108, 0.987755954266, 0.991655945778, 0.994317352772, 0.996124029160, 0.997359037399, 0.998199760914, 0.998773634434, 0.999164581299, 0.999430954456, 0.999612092972, 0.999735713005, 0.999819993973, 0.999877452850, 0.999916374683, 0.999943077564, 0.999961197376, 0.999973595142, 0.999981999397, 0.999987721443, 0.999991655350, 0.999994337559, 0.999996125698, 0.999997377396, 0.999998211861, 0.999998748302, 0.999999165535, 0.999999403954, 0.999999582767, 0.999999761581, 0.960170269012, 0.236520230770, -0.585482358932, -0.972883939743, -0.936975777149, -0.665037095547, -0.320423305035, 0.004878338892, 0.274501949549, 0.482632219791, 0.636865079403, 0.747219026089, 0.825418293476, 0.879913032055, 0.917641639709, 0.943597555161, 0.961467921734, 0.973712563515, 0.982061386108, 0.987755954266, 0.991655945778, 0.994317352772, 0.996124029160, 0.997359037399, 0.998199760914, 0.998773634434, 0.999164581299, 0.999430954456, 0.999612092972, 0.999735713005, 0.999819993973, 0.999877452850, 0.999916374683, 0.999943077564, 0.999961197376, 0.999973595142, 0.999981999397, 0.999987721443, 0.999991655350, 0.999994337559, 0.999996125698, 0.999997377396, 0.999998211861, 0.999998748302, 0.999999165535, 0.999999403954, 0.999999582767, 0.999999761581},
    {0.753902256489, 0.874293386936, 0.055648662150, -0.699636757374, -0.994261026382, -0.895965397358, -0.599069476128, -0.253317385912, 0.062576703727, 0.320067942142, 0.517303168774, 0.661421775818, 0.764952242374, 0.837755441666, 0.888465046883, 0.923493266106, 0.947676062584, 0.964276790619, 0.975609958172, 0.983346819878, 0.988648533821, 0.992267906666, 0.994725584984, 0.996405899525, 0.997549951077, 0.998330891132, 0.998862981796, 0.999225497246, 0.999472022057, 0.999640285969, 0.999754965305, 0.999833226204, 0.999886214733, 0.999922513962, 0.999947249889, 0.999964058399, 0.999975502491, 0.999983310699, 0.999988615513, 0.999992251396, 0.999994695187, 0.999996423721, 0.999997556210, 0.999998331070, 0.999998867512, 0.999999225140, 0.999999463558, 0.999999642372, 0.753902256489, 0.874293386936, 0.055648662150, -0.699636757374, -0.994261026382, -0.895965397358, -0.599069476128, -0.253317385912, 0.062576703727, 0.320067942142, 0.517303168774, 0.661421775818, 0.764952242374, 0.837755441666, 0.888465046883, 0.923493266106, 0.947676062584, 0.964276790619, 0.975609958172, 0.983346819878, 0.988648533821, 0.992267906666, 0.994725584984, 0.996405899525, 0.997549951077, 0.998330891132, 0.998862981796, 0.999225497246, 0.999472022057, 0.999640285969, 0.999754965305, 0.999833226204, 0.999886214733, 0.999922513962, 0.999947249889, 0.999964058399, 0.999975502491, 0.999983310699, 0.999988615513, 0.999992251396, 0.999994695187, 0.999996423721, 0.999997556210, 0.999998331070, 0.999998867512, 0.999999225140, 0.999999463558, 0.999999642372},
    {-0.145500034094, 0.949744641781, 0.671943426132, -0.210795804858, -0.841199815273, -0.997026205063, -0.818330705166, -0.494356423616, -0.152242168784, 0.147405654192, 0.386624097824, 0.565927684307, 0.696846783161, 0.789896428585, 0.855167806149, 0.900468349457, 0.931842684746, 0.953426659107, 0.968183457851, 0.978267431259, 0.985182166100, 0.989904940128, 0.993112802505, 0.995306551456, 0.996800363064, 0.997820138931, 0.998515009880, 0.998988449574, 0.999310374260, 0.999530196190, 0.999679982662, 0.999782145023, 0.999851346016, 0.999898791313, 0.999931097031, 0.999953031540, 0.999967992306, 0.999978184700, 0.999985158443, 0.999989867210, 0.999993085861, 0.999995291233, 0.999996781349, 0.999997794628, 0.999998509884, 0.999998986721, 0.999999284744, 0.999999523163, -0.145500034094, 0.949744641781, 0.671943426132, -0.210795804858, -0.841199815273, -0.997026205063, -0.818330705166, -0.494356423616, -0.152242168784, 0.147405654192, 0.386624097824, 0.565927684307, 0.696846783161, 0.789896428585, 0.855167806149, 0.900468349457, 0.931842684746, 0.953426659107, 0.968183457851, 0.978267431259, 0.985182166100, 0.989904940128, 0.993112802505, 0.995306551456, 0.996800363064, 0.997820138931, 0.998515009880, 0.998988449574, 0.999310374260, 0.999530196190, 0.999679982662, 0.999782145023, 0.999851346016, 0.999898791313, 0.999931097031, 0.999953031540, 0.999967992306, 0.999978184700, 0.999985158443, 0.999989867210, 0.999993085861, 0.999995291233, 0.999996781349, 0.999997794628, 0.999998509884, 0.999998986721, 0.999999284744, 0.999999523163},
    {-0.911130249500, 0.414345741272, 0.988346636295, 0.343002080917, -0.510173976421, -0.953571140766, -0.956471920013, -0.701913595200, -0.360021173954, -0.029907220975, 0.247636184096, 0.462136834860, 0.621782064438, 0.736661672592, 0.817904353142, 0.874595642090, 0.914002001286, 0.941178202629, 0.959789216518, 0.972521305084, 0.981258571148, 0.987229108810, 0.991286098957, 0.994061112404, 0.995950996876, 0.997241377831, 0.998120665550, 0.998719811440, 0.999127268791, 0.999405384064, 0.999594986439, 0.999724268913, 0.999811887741, 0.999871909618, 0.999912738800, 0.999940574169, 0.999959468842, 0.999972403049, 0.999981224537, 0.999987185001, 0.999991297722, 0.999994039536, 0.999995946884, 0.999997258186, 0.999998092651, 0.999998748302, 0.999999105930, 0.999999403954, -0.911130249500, 0.414345741272, 0.988346636295, 0.343002080917, -0.510173976421, -0.953571140766, -0.956471920013, -0.701913595200, -0.360021173954, -0.029907220975, 0.247636184096, 0.462136834860, 0.621782064438, 0.736661672592, 0.817904353142, 0.874595642090, 0.914002001286, 0.941178202629, 0.959789216518, 0.972521305084, 0.981258571148, 0.987229108810, 0.991286098957, 0.994061112404, 0.995950996876, 0.997241377831, 0.998120665550, 0.998719811440, 0.999127268791, 0.999405384064, 0.999594986439, 0.999724268913, 0.999811887741, 0.999871909618, 0.999912738800, 0.999940574169, 0.999959468842, 0.999972403049, 0.999981224537, 0.999987185001, 0.999991297722, 0.999994039536, 0.999995946884, 0.999997258186, 0.999998092651, 0.999998748302, 0.999999105930, 0.999999403954}
};
# 24 "./data_include.h" 2
# 1 "./data_4th/q_weights.h" 1

const attn_fixed_t q_scale = 19.167518615723;
const uint8_t q_weights[96][384] = {
    {130, 25, 69, 168, 25, 10, 149, 20, 21, 144, 9, 98, 138, 146, 81, 106, 81, 148, 145, 0, 0, 129, 4, 26, 146, 21, 6, 146, 161, 166, 82, 106, 153, 37, 152, 136, 25, 86, 1, 89, 22, 101, 4, 150, 165, 72, 2, 161, 153, 82, 132, 34, 106, 26, 146, 144, 166, 40, 72, 104, 88, 101, 164, 74, 2, 32, 24, 96, 32, 133, 18, 80, 89, 33, 21, 168, 132, 20, 40, 6, 37, 129, 41, 101, 89, 73, 70, 6, 136, 20, 154, 165, 154, 8, 98, 105, 26, 166, 4, 165, 168, 89, 5, 88, 169, 102, 26, 162, 166, 166, 89, 128, 146, 26, 20, 36, 38, 136, 6, 149, 161, 104, 137, 102, 146, 105, 161, 170, 148, 42, 64, 34, 21, 106, 16, 165, 38, 97, 153, 153, 38, 20, 40, 8, 161, 69, 89, 68, 36, 25, 24, 17, 85, 72, 68, 82, 165, 36, 82, 85, 25, 106, 85, 154, 81, 8, 85, 72, 18, 26, 81, 64, 165, 32, 81, 130, 166, 33, 5, 32, 132, 10, 32, 21, 69, 37, 10, 64, 106, 20, 16, 166, 97, 80, 154, 4, 17, 73, 72, 166, 25, 41, 25, 133, 69, 0, 0, 69, 20, 73, 36, 152, 16, 144, 42, 32, 70, 0, 106, 33, 8, 0, 0, 18, 17, 34, 149, 8, 4, 160, 38, 40, 102, 5, 80, 98, 21, 40, 134, 21, 104, 37, 84, 18, 37, 36, 98, 24, 129, 133, 22, 146, 18, 22, 9, 1, 137, 33, 38, 134, 33, 153, 16, 153, 16, 148, 97, 32, 24, 145, 5, 8, 100, 37, 164, 38, 16, 6, 34, 6, 36, 68, 34, 69, 42, 34, 170, 162, 90, 41, 68, 170, 38, 145, 168, 145, 86, 42, 138, 2, 80, 154, 70, 106, 161, 38, 149, 136, 66, 5, 149, 82, 102, 2, 146, 70, 97, 105, 153, 40, 84, 150, 138, 36, 101, 169, 10, 138, 86, 169, 133, 130, 149, 72, 164, 130, 85, 26, 5, 90, 37, 169, 90, 42, 81, 105, 102, 82, 72, 133, 37, 70, 33, 138, 17, 88, 146, 81, 164, 100, 166, 17, 105, 152, 132, 64, 88, 165, 104, 106, 73, 17, 81, 168, 70, 69, 84, 72, 168, 24, 129, 90, 150, 166},
    {161, 102, 40, 80, 104, 32, 165, 164, 146, 2, 104, 145, 40, 26, 130, 90, 170, 82, 168, 128, 170, 152, 128, 145, 25, 133, 2, 0, 130, 37, 4, 80, 20, 90, 165, 162, 136, 90, 41, 74, 133, 165, 21, 65, 150, 164, 89, 161, 2, 89, 166, 64, 8, 6, 101, 38, 69, 40, 168, 168, 134, 82, 132, 130, 21, 0, 69, 36, 25, 101, 132, 18, 73, 129, 166, 37, 146, 6, 161, 150, 164, 138, 17, 10, 169, 17, 82, 82, 137, 90, 170, 101, 1, 106, 69, 98, 18, 22, 88, 73, 42, 161, 154, 41, 106, 33, 4, 16, 104, 74, 168, 17, 90, 8, 33, 101, 25, 38, 161, 42, 133, 146, 69, 90, 132, 70, 102, 66, 73, 100, 130, 101, 84, 130, 97, 38, 166, 90, 26, 164, 5, 41, 146, 40, 90, 73, 165, 1, 101, 170, 98, 169, 73, 24, 88, 41, 97, 5, 169, 134, 10, 22, 34, 149, 128, 1, 20, 166, 137, 164, 97, 5, 161, 137, 170, 152, 6, 137, 20, 102, 104, 68, 168, 81, 25, 73, 89, 153, 166, 165, 145, 36, 162, 73, 24, 33, 80, 100, 161, 168, 10, 65, 0, 5, 148, 168, 136, 36, 138, 96, 36, 0, 145, 25, 64, 72, 133, 162, 160, 86, 38, 84, 168, 152, 144, 64, 5, 0, 4, 65, 162, 36, 18, 33, 138, 70, 72, 36, 21, 73, 26, 64, 80, 128, 38, 164, 0, 144, 144, 145, 136, 164, 73, 128, 68, 4, 4, 42, 36, 8, 16, 68, 69, 6, 74, 146, 96, 64, 89, 80, 10, 80, 169, 33, 132, 0, 2, 88, 166, 1, 64, 98, 32, 129, 34, 10, 64, 4, 25, 6, 5, 105, 64, 2, 66, 26, 72, 84, 0, 144, 66, 21, 161, 128, 2, 10, 96, 152, 105, 133, 22, 34, 134, 145, 100, 138, 41, 133, 96, 169, 149, 170, 73, 22, 152, 69, 6, 20, 90, 41, 133, 69, 148, 138, 85, 104, 33, 168, 4, 133, 64, 96, 136, 73, 150, 97, 25, 4, 96, 154, 166, 132, 150, 164, 149, 90, 66, 145, 85, 146, 5, 132, 33, 146, 160, 73, 21, 154, 16, 89, 10, 26, 150, 26, 150, 146, 146, 4, 88, 128, 149, 86, 153, 148},
    {2, 9, 5, 69, 136, 98, 9, 146, 1, 105, 105, 37, 20, 8, 42, 154, 37, 130, 168, 162, 69, 10, 138, 153, 154, 170, 88, 166, 146, 84, 164, 102, 152, 5, 24, 36, 104, 100, 137, 5, 24, 130, 164, 97, 97, 102, 21, 0, 65, 161, 102, 169, 37, 6, 16, 102, 160, 42, 4, 134, 90, 66, 34, 4, 153, 170, 10, 25, 66, 24, 146, 153, 9, 26, 42, 90, 105, 2, 16, 136, 136, 154, 97, 38, 37, 33, 22, 165, 104, 65, 153, 102, 37, 0, 130, 162, 0, 101, 130, 168, 1, 22, 80, 144, 164, 128, 86, 102, 41, 105, 86, 85, 132, 129, 38, 154, 64, 134, 24, 104, 149, 69, 149, 36, 73, 170, 169, 70, 22, 65, 66, 70, 1, 89, 34, 170, 4, 33, 160, 90, 170, 66, 9, 37, 133, 149, 18, 74, 40, 86, 170, 134, 17, 85, 104, 161, 74, 42, 100, 73, 41, 169, 162, 160, 102, 36, 169, 166, 73, 66, 132, 66, 22, 73, 73, 165, 26, 80, 81, 88, 69, 41, 152, 154, 68, 81, 146, 25, 150, 86, 100, 162, 90, 32, 164, 5, 36, 84, 132, 128, 88, 36, 20, 128, 90, 138, 74, 81, 10, 9, 88, 32, 104, 86, 38, 25, 128, 81, 132, 68, 2, 84, 4, 2, 18, 38, 34, 152, 64, 74, 68, 160, 84, 97, 170, 134, 81, 130, 16, 97, 81, 38, 165, 10, 34, 0, 74, 38, 16, 38, 9, 154, 152, 160, 96, 0, 34, 64, 0, 154, 97, 64, 160, 68, 41, 153, 40, 18, 148, 33, 1, 162, 40, 85, 2, 64, 128, 0, 130, 33, 144, 21, 130, 64, 18, 136, 21, 0, 137, 42, 9, 129, 84, 154, 146, 134, 21, 41, 129, 80, 98, 65, 86, 80, 106, 22, 38, 20, 165, 20, 106, 102, 106, 134, 96, 72, 129, 150, 153, 148, 89, 9, 96, 134, 146, 166, 82, 162, 85, 42, 104, 68, 152, 42, 81, 98, 149, 5, 66, 149, 2, 34, 149, 149, 73, 22, 146, 153, 161, 41, 97, 161, 86, 24, 33, 89, 169, 16, 104, 130, 152, 42, 5, 165, 98, 25, 24, 169, 133, 169, 41, 89, 84, 164, 74, 82, 85, 34, 38, 22, 152, 146, 161, 170},
    {20, 105, 38, 144, 136, 144, 4, 16, 168, 24, 4, 144, 102, 24, 16, 20, 82, 106, 68, 144, 36, 154, 144, 5, 132, 24, 0, 161, 72, 37, 98, 90, 105, 146, 132, 97, 64, 34, 33, 69, 32, 166, 166, 164, 150, 26, 40, 161, 150, 98, 146, 100, 102, 105, 33, 100, 22, 64, 4, 2, 106, 38, 21, 34, 90, 66, 73, 65, 85, 138, 81, 146, 90, 153, 84, 165, 138, 8, 68, 69, 64, 105, 149, 101, 129, 72, 17, 37, 137, 170, 102, 154, 105, 85, 89, 100, 150, 132, 164, 133, 102, 40, 166, 34, 69, 85, 129, 85, 102, 132, 145, 96, 40, 138, 161, 89, 64, 102, 18, 86, 68, 166, 164, 150, 26, 169, 149, 69, 106, 73, 166, 86, 85, 86, 128, 18, 38, 8, 72, 2, 89, 136, 37, 5, 70, 130, 41, 4, 154, 168, 68, 10, 5, 101, 152, 72, 130, 81, 129, 9, 85, 150, 164, 138, 85, 104, 18, 64, 64, 137, 153, 136, 162, 84, 97, 90, 84, 105, 160, 38, 164, 73, 138, 85, 25, 160, 150, 169, 169, 34, 149, 150, 153, 130, 100, 2, 10, 42, 32, 74, 1, 106, 69, 65, 133, 0, 16, 16, 168, 90, 18, 101, 149, 68, 106, 18, 168, 148, 168, 5, 129, 89, 102, 128, 150, 17, 26, 32, 130, 24, 18, 10, 42, 86, 1, 89, 134, 73, 130, 4, 40, 8, 98, 17, 81, 20, 8, 4, 32, 36, 165, 132, 38, 80, 145, 4, 24, 129, 80, 38, 42, 38, 66, 21, 6, 160, 132, 160, 37, 97, 84, 8, 72, 72, 64, 130, 162, 152, 137, 18, 148, 8, 90, 18, 169, 105, 105, 137, 41, 81, 24, 169, 132, 73, 100, 38, 168, 70, 68, 105, 0, 26, 90, 104, 22, 168, 89, 41, 134, 129, 65, 101, 164, 32, 88, 166, 90, 86, 166, 68, 18, 33, 84, 104, 8, 86, 133, 105, 105, 38, 24, 150, 160, 165, 170, 25, 38, 42, 17, 18, 146, 69, 38, 101, 38, 9, 86, 166, 136, 130, 136, 162, 24, 42, 164, 81, 106, 80, 88, 37, 88, 136, 101, 128, 153, 102, 86, 9, 74, 24, 160, 42, 41, 130, 150, 162, 100, 66, 149, 101, 22, 80, 133, 149},
    {148, 8, 149, 8, 130, 84, 138, 145, 144, 18, 134, 80, 145, 150, 8, 72, 169, 150, 152, 69, 69, 149, 97, 70, 162, 149, 73, 68, 137, 166, 154, 166, 37, 169, 90, 41, 25, 70, 86, 162, 164, 2, 101, 170, 80, 137, 162, 20, 69, 33, 144, 65, 5, 134, 1, 144, 32, 150, 2, 106, 101, 69, 105, 168, 85, 33, 149, 153, 98, 64, 144, 150, 168, 80, 41, 162, 165, 106, 160, 168, 132, 164, 42, 73, 106, 64, 102, 96, 161, 129, 16, 4, 161, 33, 153, 88, 9, 68, 42, 170, 106, 20, 41, 82, 89, 36, 25, 138, 168, 66, 86, 25, 25, 64, 22, 170, 25, 149, 102, 97, 72, 89, 6, 16, 20, 153, 73, 42, 146, 41, 134, 168, 106, 152, 168, 81, 90, 166, 106, 81, 0, 149, 5, 85, 106, 170, 37, 6, 170, 18, 137, 68, 74, 136, 37, 89, 134, 33, 150, 164, 153, 90, 132, 89, 133, 25, 105, 17, 65, 16, 149, 136, 21, 89, 22, 37, 18, 90, 22, 42, 170, 8, 21, 81, 38, 84, 73, 85, 37, 2, 34, 86, 145, 38, 102, 17, 41, 8, 70, 36, 25, 154, 164, 137, 32, 25, 81, 164, 21, 150, 134, 74, 65, 133, 89, 69, 64, 161, 90, 41, 64, 129, 146, 96, 100, 145, 69, 64, 64, 10, 2, 66, 32, 145, 21, 4, 16, 16, 98, 33, 6, 72, 66, 1, 137, 129, 64, 17, 5, 97, 1, 36, 80, 145, 89, 128, 33, 24, 33, 5, 162, 102, 24, 96, 10, 96, 24, 88, 168, 129, 153, 40, 134, 18, 36, 42, 10, 97, 4, 70, 5, 34, 0, 42, 84, 145, 17, 133, 41, 6, 154, 72, 133, 16, 33, 21, 2, 86, 74, 166, 4, 73, 137, 96, 9, 68, 130, 32, 160, 66, 86, 70, 101, 24, 105, 150, 40, 22, 128, 74, 105, 85, 128, 104, 86, 85, 38, 97, 37, 69, 16, 85, 34, 148, 149, 149, 16, 136, 144, 88, 162, 16, 38, 9, 160, 22, 146, 105, 105, 1, 104, 102, 72, 73, 86, 70, 21, 134, 24, 153, 22, 146, 18, 165, 162, 64, 149, 98, 98, 138, 169, 169, 38, 85, 22, 21, 37, 25, 10, 106, 149, 105, 85, 64},
    {105, 149, 8, 137, 149, 81, 130, 144, 16, 42, 150, 81, 22, 86, 128, 105, 145, 65, 164, 102, 90, 150, 138, 25, 104, 25, 5, 164, 164, 38, 85, 4, 134, 4, 138, 134, 137, 69, 42, 149, 154, 152, 18, 34, 88, 36, 149, 42, 24, 36, 146, 36, 21, 148, 38, 145, 4, 70, 9, 97, 69, 26, 102, 144, 17, 165, 105, 37, 66, 32, 104, 102, 22, 164, 106, 38, 85, 69, 84, 65, 148, 160, 168, 153, 138, 65, 22, 25, 42, 133, 130, 169, 162, 84, 98, 132, 6, 164, 9, 105, 64, 42, 81, 6, 133, 10, 70, 153, 36, 21, 90, 70, 132, 133, 104, 160, 101, 72, 134, 100, 34, 73, 36, 89, 145, 40, 34, 106, 166, 86, 144, 32, 164, 134, 134, 9, 38, 105, 9, 40, 90, 96, 73, 69, 168, 41, 82, 74, 136, 74, 69, 80, 136, 84, 134, 152, 152, 38, 10, 9, 85, 9, 137, 85, 25, 5, 21, 149, 102, 42, 66, 36, 98, 164, 20, 1, 138, 106, 41, 162, 165, 84, 82, 137, 169, 40, 89, 86, 89, 89, 84, 22, 106, 17, 132, 9, 17, 8, 1, 86, 105, 88, 169, 68, 166, 22, 18, 38, 133, 82, 170, 89, 144, 8, 24, 145, 68, 168, 1, 134, 149, 160, 64, 72, 104, 6, 64, 68, 106, 24, 128, 37, 168, 8, 80, 129, 128, 33, 6, 2, 161, 25, 81, 36, 88, 4, 97, 132, 41, 161, 1, 70, 25, 82, 8, 66, 38, 145, 80, 82, 168, 80, 22, 165, 128, 32, 22, 18, 146, 160, 153, 20, 80, 17, 128, 146, 68, 132, 160, 138, 8, 37, 70, 33, 148, 8, 145, 33, 81, 162, 72, 21, 88, 88, 42, 21, 153, 145, 150, 132, 104, 101, 86, 74, 88, 25, 102, 25, 85, 97, 1, 101, 149, 100, 36, 64, 106, 85, 98, 90, 134, 73, 104, 146, 41, 132, 101, 160, 97, 36, 154, 20, 40, 96, 21, 34, 89, 32, 152, 41, 146, 149, 20, 37, 86, 105, 70, 106, 129, 20, 4, 145, 160, 134, 69, 86, 165, 132, 106, 150, 164, 148, 33, 128, 74, 148, 21, 105, 148, 10, 164, 36, 40, 160, 40, 24, 25, 85, 105, 145, 18, 26, 9, 101},
    {34, 72, 33, 8, 73, 128, 169, 9, 170, 18, 4, 1, 130, 134, 150, 9, 86, 154, 134, 74, 145, 166, 81, 102, 82, 68, 106, 137, 2, 148, 1, 65, 166, 72, 81, 2, 165, 72, 8, 106, 84, 70, 148, 17, 102, 105, 32, 86, 86, 153, 148, 88, 144, 150, 88, 86, 128, 150, 137, 154, 132, 90, 153, 0, 101, 88, 9, 164, 132, 33, 148, 72, 88, 8, 74, 105, 18, 101, 96, 166, 152, 165, 166, 105, 17, 102, 100, 34, 129, 101, 145, 168, 5, 85, 132, 73, 81, 136, 128, 42, 6, 106, 170, 134, 138, 150, 98, 106, 134, 6, 169, 20, 21, 90, 97, 36, 145, 22, 134, 100, 106, 73, 144, 128, 97, 129, 90, 149, 70, 152, 152, 32, 90, 169, 85, 98, 132, 150, 106, 136, 132, 164, 41, 149, 128, 161, 104, 1, 41, 134, 152, 4, 133, 133, 81, 69, 38, 85, 165, 96, 154, 5, 2, 85, 148, 168, 82, 153, 165, 6, 21, 169, 42, 153, 132, 84, 102, 65, 81, 42, 4, 41, 68, 149, 16, 85, 41, 85, 25, 164, 144, 37, 98, 169, 1, 136, 21, 6, 160, 84, 20, 84, 169, 18, 168, 82, 129, 25, 164, 26, 32, 24, 152, 97, 26, 132, 128, 106, 170, 0, 34, 128, 144, 5, 65, 4, 84, 88, 36, 5, 6, 4, 132, 32, 154, 170, 85, 136, 37, 85, 96, 4, 153, 136, 2, 66, 68, 0, 100, 96, 32, 33, 152, 85, 133, 68, 128, 129, 4, 128, 102, 73, 26, 33, 42, 85, 24, 2, 72, 128, 68, 0, 70, 8, 68, 5, 4, 33, 0, 65, 128, 4, 16, 100, 137, 152, 138, 160, 25, 69, 41, 154, 106, 37, 80, 86, 1, 24, 9, 150, 34, 106, 73, 18, 68, 81, 132, 70, 106, 154, 146, 138, 5, 153, 146, 86, 85, 41, 170, 20, 165, 154, 41, 154, 73, 133, 134, 37, 170, 102, 161, 5, 154, 104, 42, 42, 161, 146, 164, 66, 149, 38, 26, 34, 146, 24, 149, 26, 8, 101, 89, 26, 133, 165, 90, 33, 18, 37, 149, 150, 36, 169, 89, 100, 152, 138, 165, 145, 20, 129, 105, 41, 154, 97, 145, 66, 90, 137, 25, 105, 164, 4, 70, 98},
    {80, 164, 16, 82, 2, 9, 80, 69, 66, 0, 73, 73, 24, 102, 164, 96, 154, 69, 66, 97, 37, 1, 33, 74, 25, 70, 5, 8, 74, 88, 81, 170, 89, 10, 41, 170, 81, 18, 105, 86, 37, 154, 165, 137, 148, 100, 98, 24, 0, 130, 5, 9, 170, 161, 166, 128, 166, 162, 66, 89, 128, 18, 38, 81, 170, 104, 40, 166, 42, 86, 26, 130, 81, 84, 90, 106, 160, 70, 102, 86, 146, 88, 90, 169, 41, 106, 165, 162, 18, 22, 18, 149, 18, 1, 150, 154, 1, 170, 22, 149, 10, 101, 98, 81, 134, 42, 145, 88, 21, 64, 37, 101, 5, 134, 66, 74, 106, 128, 86, 134, 70, 154, 149, 146, 97, 169, 37, 38, 138, 41, 144, 137, 88, 102, 17, 164, 26, 90, 42, 161, 150, 101, 34, 146, 18, 22, 101, 89, 166, 104, 153, 25, 146, 10, 136, 40, 170, 165, 106, 161, 148, 36, 154, 106, 101, 145, 161, 69, 33, 137, 169, 9, 102, 168, 105, 150, 102, 4, 73, 146, 160, 154, 169, 69, 85, 153, 104, 72, 153, 74, 18, 80, 128, 0, 134, 64, 2, 16, 1, 129, 8, 34, 70, 90, 86, 9, 1, 64, 104, 32, 80, 0, 82, 32, 18, 136, 129, 64, 68, 100, 88, 69, 33, 128, 24, 64, 64, 64, 132, 146, 81, 18, 6, 161, 5, 6, 24, 4, 70, 136, 9, 134, 102, 80, 68, 37, 152, 4, 146, 148, 2, 133, 73, 10, 21, 36, 8, 96, 144, 38, 129, 164, 72, 34, 64, 128, 96, 101, 74, 17, 0, 128, 9, 69, 34, 70, 68, 16, 96, 10, 69, 72, 68, 8, 70, 68, 20, 4, 40, 18, 97, 98, 89, 85, 84, 138, 18, 17, 73, 73, 128, 129, 2, 106, 150, 134, 34, 74, 166, 150, 153, 138, 150, 10, 102, 89, 165, 70, 22, 168, 104, 160, 166, 134, 101, 134, 152, 161, 86, 106, 145, 97, 20, 26, 2, 106, 72, 138, 22, 165, 153, 34, 9, 90, 68, 132, 128, 136, 6, 149, 154, 33, 37, 5, 80, 86, 162, 81, 40, 17, 85, 168, 25, 134, 102, 70, 164, 25, 25, 128, 89, 144, 22, 21, 96, 21, 146, 17, 106, 90, 69, 82, 97, 33},
    {70, 169, 86, 65, 85, 106, 37, 69, 74, 101, 4, 70, 34, 37, 74, 18, 169, 33, 68, 26, 37, 97, 98, 98, 74, 161, 18, 68, 130, 144, 68, 97, 162, 128, 41, 20, 165, 17, 138, 90, 153, 98, 168, 25, 105, 38, 154, 0, 102, 145, 106, 152, 132, 41, 85, 89, 5, 152, 18, 102, 81, 6, 166, 33, 38, 81, 98, 65, 130, 37, 160, 82, 150, 170, 9, 97, 88, 169, 34, 90, 154, 1, 169, 129, 145, 65, 70, 41, 161, 82, 152, 150, 144, 150, 4, 98, 1, 149, 161, 149, 138, 82, 64, 65, 133, 101, 146, 85, 129, 133, 166, 1, 162, 85, 130, 86, 149, 100, 105, 85, 70, 68, 8, 133, 2, 37, 21, 41, 102, 25, 165, 69, 25, 64, 153, 160, 17, 149, 153, 65, 150, 96, 153, 17, 21, 148, 96, 98, 165, 137, 153, 153, 165, 89, 101, 150, 5, 42, 166, 153, 145, 85, 146, 153, 148, 148, 148, 102, 161, 146, 144, 70, 89, 146, 106, 164, 64, 162, 148, 34, 17, 145, 164, 90, 164, 169, 9, 169, 80, 21, 154, 98, 102, 9, 20, 17, 24, 0, 8, 16, 37, 153, 24, 4, 136, 96, 162, 162, 42, 134, 10, 144, 137, 152, 6, 8, 166, 64, 148, 21, 82, 5, 4, 6, 1, 84, 162, 0, 162, 38, 40, 98, 101, 145, 17, 33, 25, 24, 6, 162, 164, 72, 137, 106, 1, 4, 102, 66, 8, 73, 9, 134, 153, 106, 4, 33, 1, 25, 170, 18, 98, 153, 137, 80, 17, 4, 5, 133, 65, 129, 37, 66, 18, 128, 100, 144, 9, 64, 4, 166, 17, 97, 38, 96, 17, 5, 17, 85, 168, 85, 69, 137, 4, 10, 69, 70, 146, 105, 68, 85, 69, 149, 2, 166, 74, 102, 166, 22, 137, 153, 96, 1, 65, 134, 21, 69, 137, 144, 150, 10, 68, 170, 34, 17, 5, 101, 160, 168, 168, 153, 16, 153, 133, 153, 82, 134, 138, 152, 102, 170, 96, 170, 154, 37, 137, 2, 128, 18, 106, 84, 86, 100, 22, 85, 86, 146, 100, 101, 90, 146, 22, 134, 21, 169, 152, 34, 81, 21, 89, 148, 22, 90, 101, 132, 106, 70, 154, 90, 129, 102, 97, 66, 162, 100},
    {37, 80, 152, 128, 0, 136, 68, 152, 137, 160, 134, 164, 25, 150, 169, 73, 82, 8, 6, 161, 24, 100, 101, 134, 72, 164, 18, 97, 165, 86, 153, 20, 37, 33, 72, 101, 161, 148, 149, 168, 100, 26, 38, 6, 16, 65, 146, 37, 133, 80, 133, 86, 18, 74, 102, 22, 40, 68, 16, 33, 66, 168, 10, 18, 8, 146, 64, 101, 149, 33, 33, 100, 89, 36, 101, 148, 16, 153, 37, 16, 137, 165, 33, 65, 133, 134, 41, 138, 32, 4, 40, 100, 98, 70, 73, 169, 165, 65, 20, 161, 170, 80, 105, 100, 164, 89, 128, 26, 89, 72, 98, 86, 38, 38, 85, 153, 25, 132, 101, 137, 165, 104, 89, 90, 162, 90, 37, 148, 104, 40, 6, 9, 89, 130, 81, 25, 106, 89, 149, 0, 145, 38, 152, 106, 2, 17, 68, 86, 130, 18, 69, 18, 5, 8, 85, 10, 162, 149, 90, 164, 73, 18, 85, 100, 98, 37, 26, 84, 169, 105, 86, 130, 101, 165, 90, 66, 137, 153, 25, 145, 152, 73, 89, 41, 21, 146, 128, 84, 98, 102, 150, 33, 104, 128, 6, 1, 20, 16, 17, 166, 1, 130, 129, 17, 17, 64, 36, 65, 0, 33, 68, 32, 1, 130, 32, 145, 65, 82, 80, 144, 2, 5, 9, 24, 128, 170, 84, 1, 81, 40, 80, 165, 26, 154, 166, 72, 8, 37, 138, 170, 97, 40, 164, 65, 64, 80, 104, 134, 22, 150, 152, 2, 25, 38, 72, 0, 64, 129, 97, 128, 2, 166, 69, 170, 134, 88, 128, 80, 134, 98, 84, 24, 5, 36, 10, 17, 85, 2, 16, 42, 17, 145, 5, 85, 1, 10, 32, 136, 150, 16, 4, 96, 17, 149, 136, 102, 146, 85, 101, 32, 24, 85, 66, 24, 162, 148, 97, 68, 153, 25, 149, 24, 6, 65, 150, 128, 33, 136, 153, 165, 170, 165, 32, 169, 169, 128, 152, 145, 89, 136, 164, 154, 42, 25, 130, 102, 150, 130, 161, 5, 37, 16, 89, 25, 68, 85, 129, 137, 40, 130, 85, 16, 166, 149, 160, 132, 152, 145, 169, 154, 21, 37, 168, 146, 102, 132, 69, 152, 153, 38, 70, 36, 160, 137, 9, 5, 98, 169, 25, 169, 70, 70, 73, 85},
    {74, 132, 40, 105, 96, 24, 105, 20, 32, 154, 9, 82, 36, 90, 82, 17, 80, 104, 88, 37, 144, 102, 66, 90, 105, 154, 150, 137, 130, 162, 20, 134, 22, 165, 160, 88, 80, 36, 154, 130, 18, 73, 85, 166, 152, 150, 66, 89, 85, 20, 73, 20, 36, 128, 42, 128, 68, 2, 168, 2, 134, 9, 90, 70, 25, 73, 42, 9, 149, 74, 102, 84, 164, 72, 32, 82, 70, 161, 134, 72, 154, 21, 161, 26, 144, 144, 162, 165, 89, 82, 65, 42, 9, 137, 129, 145, 86, 21, 41, 42, 129, 82, 153, 10, 88, 9, 90, 74, 153, 10, 149, 42, 166, 165, 102, 81, 0, 26, 16, 101, 153, 102, 8, 104, 41, 90, 64, 170, 149, 64, 105, 40, 21, 85, 132, 133, 70, 106, 105, 66, 102, 134, 73, 84, 149, 41, 74, 10, 160, 153, 162, 152, 9, 161, 21, 100, 10, 38, 130, 148, 40, 98, 40, 150, 73, 162, 65, 68, 162, 81, 136, 145, 86, 81, 148, 37, 165, 69, 106, 37, 169, 169, 137, 89, 81, 166, 73, 168, 129, 42, 148, 69, 66, 136, 145, 101, 138, 74, 160, 85, 2, 36, 20, 40, 88, 148, 0, 4, 22, 150, 82, 169, 170, 90, 36, 18, 132, 82, 1, 128, 64, 2, 148, 102, 72, 5, 42, 41, 10, 104, 34, 20, 96, 0, 66, 4, 65, 70, 130, 161, 32, 41, 168, 37, 36, 22, 18, 22, 82, 164, 1, 89, 25, 6, 138, 24, 162, 10, 4, 85, 32, 72, 160, 128, 9, 34, 136, 136, 5, 169, 2, 144, 74, 162, 0, 4, 154, 38, 74, 36, 74, 8, 5, 82, 80, 80, 5, 104, 5, 96, 25, 20, 74, 170, 96, 22, 64, 162, 74, 168, 162, 80, 88, 137, 145, 102, 88, 22, 69, 86, 8, 105, 26, 6, 40, 80, 164, 38, 88, 101, 148, 37, 8, 165, 36, 18, 80, 73, 86, 88, 6, 166, 153, 40, 37, 89, 106, 148, 72, 37, 136, 65, 154, 9, 37, 148, 150, 101, 150, 166, 84, 164, 38, 25, 132, 25, 137, 26, 104, 138, 150, 166, 32, 138, 24, 26, 162, 33, 9, 97, 146, 149, 149, 66, 161, 102, 66, 100, 10, 26, 40, 24, 66, 80},
    {168, 36, 88, 22, 165, 148, 129, 137, 161, 18, 1, 104, 4, 70, 22, 74, 97, 2, 129, 169, 6, 138, 70, 69, 20, 9, 153, 40, 41, 98, 128, 170, 101, 162, 98, 64, 22, 150, 38, 25, 4, 102, 164, 73, 84, 42, 82, 169, 134, 72, 130, 73, 2, 88, 145, 70, 96, 146, 100, 165, 22, 40, 162, 36, 69, 10, 154, 0, 166, 96, 80, 89, 144, 136, 68, 134, 144, 25, 97, 105, 73, 166, 89, 166, 132, 85, 165, 2, 164, 169, 89, 41, 34, 32, 24, 37, 41, 84, 4, 162, 5, 105, 1, 106, 74, 37, 170, 162, 5, 160, 138, 170, 104, 162, 136, 16, 166, 40, 161, 101, 97, 154, 80, 20, 164, 26, 21, 98, 129, 132, 168, 22, 8, 168, 33, 86, 73, 150, 34, 154, 37, 165, 6, 81, 101, 40, 168, 128, 80, 136, 162, 153, 26, 20, 4, 85, 8, 134, 17, 64, 146, 16, 153, 161, 166, 64, 165, 138, 84, 128, 165, 41, 1, 33, 160, 105, 165, 154, 102, 168, 68, 90, 17, 148, 165, 69, 150, 133, 153, 81, 89, 162, 164, 84, 84, 8, 24, 41, 64, 0, 2, 16, 64, 152, 1, 168, 86, 164, 145, 9, 32, 6, 86, 32, 66, 89, 0, 168, 8, 73, 130, 34, 138, 40, 132, 38, 134, 69, 133, 64, 20, 84, 81, 41, 42, 24, 164, 64, 96, 4, 66, 72, 81, 66, 34, 169, 102, 0, 129, 65, 64, 33, 24, 4, 68, 137, 82, 68, 20, 70, 8, 33, 134, 86, 136, 64, 8, 169, 162, 88, 128, 128, 128, 166, 8, 2, 0, 80, 0, 17, 97, 2, 80, 25, 65, 65, 88, 33, 66, 64, 106, 20, 24, 160, 134, 8, 32, 144, 129, 102, 161, 97, 4, 102, 104, 146, 41, 69, 82, 138, 5, 90, 5, 2, 150, 73, 168, 96, 146, 69, 133, 22, 137, 17, 154, 154, 84, 64, 104, 170, 169, 22, 98, 40, 104, 169, 152, 65, 146, 66, 9, 37, 70, 90, 89, 152, 74, 9, 16, 24, 104, 150, 25, 138, 166, 153, 68, 96, 25, 21, 37, 73, 20, 84, 164, 170, 129, 166, 40, 170, 90, 89, 81, 162, 97, 88, 105, 162, 170, 133, 154, 89, 2, 18},
    {4, 145, 128, 170, 137, 64, 9, 69, 24, 100, 64, 150, 81, 5, 148, 132, 136, 153, 68, 84, 34, 20, 134, 38, 64, 20, 32, 166, 162, 80, 98, 130, 130, 162, 132, 148, 166, 34, 37, 41, 70, 98, 38, 148, 98, 90, 0, 148, 70, 144, 96, 130, 2, 16, 153, 96, 162, 89, 138, 170, 9, 10, 6, 129, 64, 66, 89, 32, 88, 34, 96, 164, 146, 168, 98, 74, 0, 68, 9, 105, 84, 101, 162, 22, 64, 160, 148, 104, 69, 148, 24, 25, 89, 152, 9, 154, 128, 146, 80, 80, 149, 36, 162, 5, 21, 165, 72, 89, 148, 136, 82, 153, 145, 41, 69, 88, 10, 5, 165, 41, 66, 40, 134, 136, 37, 21, 165, 89, 85, 162, 74, 36, 70, 10, 85, 105, 88, 136, 98, 166, 90, 149, 106, 149, 136, 146, 106, 18, 20, 33, 5, 137, 41, 154, 33, 169, 21, 101, 89, 166, 133, 42, 101, 138, 36, 42, 84, 166, 10, 68, 5, 169, 85, 130, 132, 129, 65, 38, 42, 102, 144, 89, 149, 100, 160, 152, 105, 8, 152, 105, 24, 145, 98, 25, 0, 88, 17, 6, 72, 17, 161, 17, 66, 2, 64, 0, 168, 32, 1, 21, 129, 37, 137, 128, 144, 152, 74, 165, 64, 16, 4, 2, 128, 2, 97, 64, 9, 24, 162, 160, 33, 32, 10, 68, 82, 74, 32, 64, 64, 148, 106, 98, 20, 34, 36, 85, 128, 132, 104, 97, 66, 32, 153, 130, 33, 64, 65, 41, 129, 26, 0, 70, 16, 101, 20, 106, 6, 22, 5, 33, 34, 22, 21, 5, 5, 150, 144, 9, 33, 4, 2, 168, 129, 133, 80, 64, 72, 88, 136, 88, 130, 146, 0, 80, 73, 34, 148, 5, 81, 37, 25, 170, 73, 102, 82, 26, 25, 33, 36, 150, 165, 166, 18, 164, 101, 68, 137, 36, 169, 84, 150, 144, 152, 37, 25, 21, 129, 137, 146, 102, 144, 104, 73, 16, 96, 101, 38, 130, 8, 134, 101, 89, 162, 74, 36, 160, 40, 129, 86, 70, 18, 42, 170, 8, 80, 106, 4, 20, 152, 166, 73, 102, 21, 10, 153, 98, 100, 70, 138, 38, 164, 133, 8, 0, 86, 102, 162, 101, 100, 168, 165, 130, 20, 137},
    {101, 66, 9, 86, 22, 101, 130, 33, 105, 80, 5, 64, 69, 65, 16, 98, 26, 86, 96, 97, 128, 17, 66, 32, 18, 105, 161, 106, 18, 82, 33, 1, 66, 4, 69, 150, 6, 133, 6, 153, 34, 164, 104, 68, 136, 9, 85, 65, 65, 130, 81, 162, 40, 70, 130, 70, 144, 70, 129, 25, 152, 2, 9, 85, 24, 22, 65, 65, 8, 161, 69, 145, 85, 26, 165, 37, 17, 85, 150, 72, 10, 102, 85, 149, 34, 162, 9, 148, 137, 136, 134, 105, 34, 26, 152, 10, 84, 146, 33, 40, 170, 25, 106, 153, 152, 22, 74, 69, 17, 66, 73, 152, 81, 149, 149, 100, 96, 98, 162, 96, 149, 10, 132, 129, 106, 22, 42, 136, 34, 64, 102, 85, 90, 40, 37, 22, 168, 132, 86, 26, 73, 97, 165, 6, 6, 21, 137, 97, 165, 80, 105, 70, 166, 90, 22, 42, 90, 97, 169, 105, 104, 37, 136, 0, 105, 73, 26, 129, 41, 169, 146, 90, 162, 101, 152, 150, 102, 25, 89, 72, 146, 86, 134, 105, 41, 154, 97, 80, 161, 169, 169, 41, 137, 166, 6, 10, 6, 0, 9, 68, 97, 2, 40, 6, 162, 65, 20, 1, 32, 129, 89, 129, 144, 68, 2, 82, 145, 25, 40, 0, 10, 105, 9, 74, 166, 2, 6, 128, 65, 164, 168, 106, 32, 20, 136, 100, 20, 160, 146, 18, 37, 144, 6, 96, 25, 9, 37, 66, 144, 6, 32, 129, 2, 86, 130, 102, 66, 134, 40, 20, 25, 138, 4, 160, 21, 160, 150, 80, 64, 89, 84, 134, 133, 145, 72, 138, 105, 162, 5, 16, 161, 80, 4, 96, 165, 128, 36, 149, 136, 162, 136, 80, 41, 133, 166, 170, 98, 86, 130, 21, 17, 25, 89, 25, 160, 36, 162, 132, 82, 74, 134, 74, 133, 41, 72, 22, 145, 0, 152, 40, 98, 153, 17, 134, 21, 106, 102, 26, 10, 133, 41, 82, 134, 41, 133, 17, 65, 146, 84, 105, 73, 164, 148, 20, 65, 26, 38, 1, 90, 137, 18, 0, 134, 104, 102, 169, 153, 25, 101, 32, 148, 102, 154, 88, 133, 148, 72, 80, 40, 88, 34, 100, 5, 8, 96, 132, 134, 97, 97, 37, 104, 104, 149, 106},
    {148, 66, 138, 1, 64, 17, 1, 64, 2, 40, 32, 138, 64, 88, 170, 69, 166, 18, 64, 64, 73, 130, 20, 138, 85, 96, 130, 166, 5, 90, 80, 73, 38, 8, 26, 104, 81, 89, 24, 82, 36, 86, 32, 132, 69, 90, 138, 70, 69, 10, 100, 10, 144, 100, 74, 36, 138, 102, 102, 69, 170, 88, 33, 69, 24, 72, 80, 6, 170, 33, 16, 88, 21, 22, 85, 64, 154, 21, 33, 165, 161, 24, 32, 97, 148, 81, 149, 153, 72, 70, 16, 165, 37, 150, 42, 98, 85, 160, 168, 73, 170, 89, 136, 81, 1, 133, 132, 102, 152, 160, 89, 153, 90, 89, 82, 37, 129, 149, 5, 73, 130, 82, 9, 152, 18, 89, 170, 17, 132, 1, 165, 165, 105, 105, 137, 33, 73, 26, 41, 38, 41, 98, 80, 90, 169, 169, 64, 102, 170, 18, 84, 138, 18, 170, 165, 38, 73, 100, 154, 32, 149, 128, 89, 70, 24, 149, 129, 69, 37, 25, 153, 88, 17, 154, 149, 18, 66, 97, 129, 153, 170, 104, 134, 149, 153, 154, 106, 137, 24, 82, 66, 85, 149, 170, 2, 168, 40, 148, 8, 134, 68, 162, 5, 16, 25, 68, 74, 97, 80, 10, 68, 132, 66, 150, 2, 154, 17, 166, 64, 2, 146, 72, 64, 22, 84, 22, 1, 8, 2, 64, 106, 96, 24, 2, 73, 97, 132, 10, 152, 68, 73, 136, 170, 84, 2, 161, 69, 86, 149, 22, 133, 1, 34, 4, 144, 1, 74, 74, 102, 4, 137, 160, 34, 105, 8, 128, 8, 1, 137, 70, 32, 72, 145, 0, 4, 154, 82, 10, 24, 132, 22, 81, 81, 64, 24, 152, 34, 9, 33, 18, 102, 98, 20, 129, 38, 130, 41, 85, 164, 84, 16, 166, 101, 85, 70, 134, 146, 168, 64, 38, 153, 136, 162, 21, 73, 150, 65, 150, 6, 150, 102, 106, 152, 73, 37, 66, 84, 64, 166, 88, 69, 105, 42, 72, 145, 150, 8, 102, 84, 97, 8, 98, 10, 98, 65, 149, 6, 88, 145, 130, 102, 36, 162, 137, 170, 106, 72, 134, 102, 106, 80, 90, 137, 149, 89, 104, 85, 21, 170, 18, 64, 40, 38, 134, 97, 96, 101, 133, 17, 86, 145, 150, 18, 6},
    {148, 34, 65, 136, 150, 144, 154, 134, 146, 138, 97, 150, 144, 98, 154, 88, 80, 136, 138, 146, 134, 130, 170, 68, 84, 130, 104, 134, 105, 166, 89, 166, 84, 33, 97, 105, 154, 101, 149, 5, 146, 85, 150, 69, 153, 170, 101, 150, 150, 96, 148, 104, 97, 65, 18, 137, 101, 80, 144, 101, 101, 105, 130, 134, 154, 105, 130, 88, 65, 105, 144, 65, 152, 166, 152, 146, 105, 169, 150, 137, 169, 81, 100, 81, 100, 101, 150, 101, 38, 105, 73, 154, 105, 97, 97, 105, 130, 105, 101, 97, 73, 146, 81, 150, 105, 134, 146, 138, 106, 105, 130, 154, 105, 129, 138, 170, 105, 150, 90, 101, 1, 81, 134, 69, 150, 18, 22, 73, 66, 152, 150, 146, 101, 40, 128, 144, 105, 165, 101, 146, 154, 166, 105, 105, 105, 69, 148, 134, 101, 74, 150, 154, 65, 96, 73, 100, 106, 150, 166, 73, 100, 130, 81, 138, 150, 134, 68, 150, 22, 170, 90, 26, 17, 164, 10, 38, 150, 150, 150, 65, 101, 105, 150, 150, 136, 69, 25, 130, 82, 162, 105, 146, 150, 97, 66, 97, 65, 154, 165, 98, 154, 105, 1, 137, 101, 130, 66, 146, 104, 72, 166, 130, 73, 86, 72, 72, 150, 130, 2, 105, 40, 128, 42, 154, 5, 138, 134, 97, 150, 138, 72, 136, 69, 40, 2, 42, 97, 138, 4, 41, 164, 149, 97, 134, 150, 150, 146, 90, 80, 101, 133, 150, 97, 70, 154, 148, 73, 97, 65, 6, 130, 73, 69, 169, 160, 5, 101, 146, 97, 162, 133, 104, 22, 101, 136, 105, 101, 85, 150, 130, 150, 41, 154, 17, 86, 130, 97, 90, 105, 149, 138, 105, 8, 146, 129, 70, 73, 73, 166, 0, 149, 90, 154, 16, 150, 146, 138, 96, 105, 169, 150, 69, 18, 146, 132, 166, 164, 130, 89, 101, 90, 101, 154, 105, 148, 25, 85, 10, 98, 153, 138, 104, 81, 105, 105, 154, 169, 97, 148, 97, 153, 134, 97, 73, 97, 104, 152, 105, 101, 160, 65, 150, 165, 154, 81, 69, 88, 148, 150, 101, 69, 146, 81, 81, 72, 149, 90, 150, 81, 36, 97, 97, 146, 150, 166, 150, 105, 138, 145, 90, 146, 80, 64, 150},
    {18, 10, 21, 86, 22, 146, 146, 130, 5, 1, 64, 22, 20, 169, 136, 89, 89, 26, 8, 105, 40, 150, 166, 97, 65, 97, 170, 80, 106, 66, 80, 150, 170, 64, 169, 136, 69, 81, 72, 18, 82, 80, 65, 86, 148, 33, 9, 144, 154, 33, 82, 41, 5, 42, 162, 106, 1, 106, 20, 70, 81, 149, 24, 10, 149, 152, 152, 65, 66, 128, 72, 21, 36, 38, 89, 82, 10, 86, 68, 146, 65, 37, 104, 17, 105, 9, 42, 25, 100, 153, 165, 150, 96, 104, 133, 85, 64, 40, 16, 137, 89, 133, 162, 150, 1, 21, 82, 85, 165, 145, 166, 100, 100, 34, 42, 4, 129, 80, 145, 106, 136, 150, 153, 101, 106, 164, 106, 25, 164, 90, 38, 34, 129, 105, 18, 146, 69, 150, 153, 22, 24, 38, 38, 64, 21, 166, 144, 161, 166, 69, 33, 85, 150, 97, 150, 168, 149, 90, 1, 170, 105, 100, 152, 90, 74, 42, 145, 133, 169, 34, 145, 16, 146, 166, 22, 149, 22, 33, 26, 97, 4, 98, 86, 170, 161, 22, 5, 146, 38, 82, 25, 146, 166, 21, 41, 17, 73, 64, 37, 84, 64, 5, 105, 129, 40, 2, 132, 129, 4, 36, 40, 33, 168, 0, 80, 165, 32, 80, 105, 168, 80, 24, 85, 149, 33, 65, 2, 33, 146, 20, 4, 0, 20, 96, 74, 20, 37, 82, 0, 37, 0, 82, 5, 130, 70, 18, 10, 74, 38, 33, 152, 146, 160, 148, 6, 1, 74, 37, 21, 133, 85, 4, 162, 89, 160, 34, 129, 21, 73, 137, 149, 80, 38, 5, 80, 37, 32, 148, 86, 133, 128, 137, 144, 40, 84, 66, 80, 146, 36, 154, 150, 101, 166, 16, 168, 40, 88, 164, 138, 161, 148, 104, 70, 38, 153, 137, 165, 86, 106, 26, 5, 41, 86, 169, 166, 148, 37, 42, 73, 97, 25, 161, 36, 84, 148, 69, 70, 134, 130, 88, 21, 153, 9, 105, 69, 150, 4, 73, 22, 161, 96, 17, 33, 104, 101, 169, 26, 90, 96, 161, 81, 148, 149, 132, 129, 165, 137, 134, 74, 169, 38, 2, 149, 25, 17, 34, 90, 154, 102, 168, 88, 161, 86, 36, 5, 106, 86, 168, 96, 69, 154, 38, 104, 160},
    {100, 33, 36, 138, 161, 97, 133, 69, 105, 85, 137, 170, 66, 36, 86, 128, 37, 97, 84, 161, 129, 101, 150, 134, 134, 149, 101, 18, 41, 165, 152, 104, 42, 88, 149, 165, 154, 2, 101, 69, 150, 102, 4, 81, 101, 166, 149, 160, 102, 130, 66, 153, 170, 149, 132, 66, 5, 24, 38, 32, 170, 26, 164, 90, 105, 9, 161, 20, 26, 2, 10, 84, 106, 168, 36, 101, 84, 165, 153, 81, 17, 40, 133, 26, 6, 36, 20, 68, 144, 154, 137, 73, 138, 154, 32, 128, 168, 152, 16, 80, 2, 66, 102, 168, 24, 86, 37, 22, 90, 85, 37, 102, 168, 169, 41, 146, 84, 149, 170, 161, 85, 170, 66, 137, 129, 82, 90, 6, 100, 16, 88, 84, 85, 149, 9, 129, 100, 72, 153, 72, 70, 98, 170, 132, 148, 0, 70, 84, 21, 66, 24, 36, 22, 66, 98, 128, 90, 73, 33, 96, 137, 169, 152, 170, 22, 88, 90, 170, 165, 85, 86, 150, 106, 73, 88, 152, 22, 100, 69, 89, 169, 68, 106, 101, 21, 133, 22, 97, 169, 36, 161, 146, 34, 145, 128, 5, 81, 80, 32, 101, 88, 148, 40, 33, 66, 17, 18, 40, 34, 4, 42, 90, 8, 2, 146, 144, 65, 24, 0, 5, 6, 97, 152, 16, 96, 32, 102, 34, 66, 150, 38, 42, 36, 149, 1, 102, 16, 101, 160, 153, 138, 96, 25, 34, 34, 4, 40, 16, 1, 68, 33, 80, 21, 144, 170, 64, 40, 18, 36, 145, 2, 18, 0, 170, 88, 165, 21, 90, 153, 64, 80, 138, 96, 2, 98, 152, 40, 132, 170, 2, 37, 40, 96, 24, 102, 5, 164, 33, 144, 161, 10, 20, 72, 36, 105, 150, 81, 104, 137, 168, 89, 133, 144, 21, 70, 17, 160, 161, 69, 64, 32, 41, 73, 84, 133, 81, 33, 65, 128, 69, 74, 21, 73, 145, 148, 150, 137, 136, 73, 73, 8, 133, 145, 165, 154, 74, 65, 0, 160, 40, 88, 102, 8, 38, 145, 16, 74, 104, 8, 38, 17, 1, 89, 170, 132, 146, 165, 20, 36, 149, 82, 170, 81, 104, 26, 161, 166, 6, 154, 86, 26, 104, 82, 4, 69, 106, 96, 106, 133, 72, 65, 154, 81, 148},
    {9, 138, 20, 41, 9, 89, 169, 40, 89, 41, 86, 41, 152, 100, 25, 102, 134, 89, 10, 170, 89, 40, 88, 166, 38, 25, 161, 152, 21, 154, 86, 40, 98, 10, 86, 38, 89, 18, 144, 170, 104, 166, 41, 100, 85, 154, 166, 138, 105, 6, 89, 38, 86, 22, 169, 8, 6, 66, 9, 69, 68, 86, 41, 9, 136, 134, 89, 70, 37, 64, 104, 164, 40, 169, 89, 170, 5, 153, 73, 165, 18, 134, 38, 86, 150, 22, 41, 150, 26, 102, 70, 41, 70, 84, 148, 86, 169, 6, 84, 22, 86, 169, 6, 73, 165, 104, 169, 169, 97, 166, 9, 169, 6, 144, 153, 104, 36, 106, 37, 70, 101, 22, 106, 86, 160, 105, 133, 166, 5, 166, 169, 169, 100, 98, 70, 41, 70, 81, 86, 137, 169, 169, 22, 85, 86, 84, 169, 105, 22, 84, 10, 72, 86, 70, 100, 134, 68, 162, 25, 68, 22, 25, 22, 89, 153, 40, 36, 88, 170, 138, 81, 104, 20, 153, 129, 137, 170, 41, 169, 6, 166, 86, 105, 137, 89, 86, 150, 89, 145, 153, 6, 169, 105, 86, 22, 150, 132, 169, 89, 150, 136, 134, 2, 137, 6, 40, 133, 41, 84, 101, 104, 40, 22, 134, 4, 4, 41, 105, 64, 38, 80, 72, 24, 42, 36, 73, 16, 84, 41, 9, 84, 73, 5, 150, 144, 97, 22, 9, 80, 6, 153, 8, 22, 105, 137, 169, 25, 4, 4, 22, 72, 169, 6, 165, 89, 161, 22, 22, 148, 170, 9, 5, 22, 88, 10, 86, 22, 73, 6, 10, 152, 0, 132, 86, 104, 70, 102, 132, 169, 168, 137, 6, 105, 130, 9, 137, 84, 1, 6, 25, 89, 6, 74, 153, 152, 70, 38, 102, 25, 80, 137, 144, 41, 153, 41, 136, 89, 70, 150, 89, 105, 134, 34, 105, 25, 153, 9, 137, 84, 100, 101, 86, 168, 42, 74, 97, 4, 152, 160, 81, 105, 84, 149, 6, 38, 161, 65, 150, 41, 6, 169, 9, 134, 146, 84, 150, 41, 150, 86, 41, 70, 153, 81, 137, 68, 166, 18, 89, 40, 86, 133, 153, 102, 98, 101, 161, 85, 162, 128, 105, 86, 86, 9, 24, 10, 169, 21, 72, 106, 66, 97, 84, 150, 25},
    {34, 80, 164, 5, 90, 82, 20, 10, 68, 1, 165, 106, 9, 85, 32, 161, 145, 164, 18, 85, 10, 82, 100, 138, 128, 144, 37, 36, 9, 162, 68, 42, 17, 32, 37, 150, 101, 66, 146, 129, 2, 133, 81, 170, 152, 105, 9, 134, 164, 10, 4, 24, 32, 21, 68, 130, 41, 65, 85, 97, 152, 128, 80, 25, 68, 154, 66, 70, 102, 144, 138, 146, 6, 69, 89, 10, 66, 154, 41, 102, 146, 20, 133, 82, 145, 1, 65, 68, 34, 168, 84, 90, 5, 42, 169, 168, 5, 40, 106, 146, 137, 97, 41, 153, 22, 73, 129, 170, 145, 130, 18, 161, 149, 145, 134, 132, 170, 154, 88, 32, 26, 165, 81, 152, 170, 164, 105, 134, 74, 164, 40, 10, 6, 136, 36, 74, 133, 106, 166, 169, 146, 137, 144, 136, 74, 102, 169, 24, 36, 154, 69, 153, 132, 24, 69, 134, 170, 16, 137, 96, 149, 37, 6, 32, 42, 69, 38, 132, 73, 4, 4, 89, 106, 21, 42, 22, 144, 154, 100, 34, 106, 20, 88, 21, 102, 41, 138, 150, 85, 73, 90, 145, 136, 98, 64, 38, 8, 137, 96, 2, 144, 5, 2, 72, 104, 0, 168, 72, 6, 133, 136, 9, 160, 0, 1, 164, 0, 32, 1, 64, 169, 88, 0, 96, 66, 20, 130, 132, 132, 148, 5, 37, 149, 96, 128, 20, 66, 148, 132, 170, 38, 9, 6, 41, 145, 153, 145, 137, 32, 68, 68, 130, 136, 1, 129, 81, 160, 2, 146, 6, 4, 17, 0, 166, 1, 64, 104, 137, 64, 21, 16, 16, 88, 134, 170, 8, 1, 36, 0, 32, 21, 132, 160, 34, 18, 64, 20, 149, 64, 166, 5, 24, 150, 106, 33, 6, 65, 152, 136, 9, 6, 96, 42, 36, 170, 82, 88, 129, 154, 73, 2, 25, 84, 82, 36, 42, 66, 82, 72, 17, 168, 66, 90, 129, 130, 38, 144, 37, 26, 26, 165, 34, 85, 80, 162, 86, 1, 100, 2, 89, 128, 2, 9, 128, 153, 72, 138, 137, 154, 154, 42, 164, 37, 42, 134, 24, 148, 38, 138, 138, 89, 106, 130, 22, 90, 146, 98, 85, 21, 2, 36, 161, 65, 133, 38, 133, 148, 106, 4, 73, 130, 25, 106, 82},
    {18, 81, 162, 84, 68, 24, 37, 105, 5, 169, 132, 24, 21, 165, 104, 65, 134, 104, 100, 106, 133, 102, 73, 149, 145, 152, 2, 128, 162, 134, 168, 150, 33, 42, 128, 5, 89, 24, 82, 105, 145, 22, 150, 9, 90, 68, 134, 9, 145, 102, 18, 82, 68, 36, 17, 2, 85, 69, 24, 88, 65, 170, 128, 133, 89, 38, 1, 2, 89, 137, 32, 33, 21, 104, 6, 133, 106, 106, 74, 86, 98, 0, 68, 0, 18, 73, 98, 20, 84, 85, 160, 42, 149, 169, 21, 41, 100, 74, 152, 73, 41, 138, 41, 33, 96, 152, 134, 81, 72, 17, 33, 17, 70, 4, 134, 65, 89, 106, 65, 105, 72, 132, 89, 145, 98, 102, 85, 4, 170, 97, 86, 40, 130, 90, 166, 89, 20, 169, 161, 10, 73, 86, 105, 165, 105, 137, 2, 26, 154, 69, 101, 4, 144, 144, 18, 132, 106, 70, 24, 160, 73, 4, 86, 17, 5, 104, 80, 134, 40, 136, 101, 64, 102, 73, 102, 36, 166, 150, 130, 134, 132, 105, 24, 82, 9, 153, 100, 18, 22, 169, 5, 90, 86, 161, 1, 96, 165, 0, 8, 1, 66, 1, 42, 150, 148, 98, 37, 132, 8, 133, 37, 133, 88, 73, 37, 104, 88, 102, 154, 162, 36, 32, 137, 68, 80, 64, 22, 1, 24, 38, 5, 101, 85, 10, 70, 80, 10, 2, 152, 34, 138, 24, 1, 2, 34, 86, 68, 101, 88, 69, 90, 72, 8, 102, 80, 80, 22, 169, 81, 10, 146, 152, 16, 134, 166, 80, 144, 0, 2, 97, 98, 130, 152, 16, 17, 149, 17, 5, 4, 152, 72, 65, 144, 33, 20, 0, 133, 80, 5, 32, 18, 5, 73, 169, 66, 153, 20, 137, 130, 146, 168, 170, 40, 154, 138, 21, 5, 22, 145, 72, 104, 129, 86, 170, 154, 20, 152, 149, 36, 90, 82, 8, 36, 166, 130, 160, 1, 105, 152, 65, 134, 81, 21, 88, 148, 40, 22, 33, 154, 34, 9, 65, 100, 105, 153, 85, 145, 97, 17, 169, 169, 80, 2, 26, 100, 69, 165, 130, 105, 80, 166, 160, 149, 150, 5, 68, 88, 38, 101, 166, 150, 136, 153, 105, 106, 150, 5, 106, 73, 138, 161, 85, 169, 42},
    {105, 130, 33, 132, 36, 72, 101, 161, 22, 21, 153, 41, 130, 24, 20, 8, 153, 154, 169, 40, 149, 104, 98, 20, 65, 16, 17, 98, 106, 42, 149, 88, 104, 66, 38, 86, 37, 145, 9, 165, 106, 82, 88, 150, 9, 145, 154, 66, 64, 154, 8, 161, 146, 22, 170, 70, 148, 42, 96, 145, 64, 26, 169, 161, 168, 65, 34, 166, 90, 169, 37, 149, 41, 101, 85, 0, 89, 98, 40, 154, 34, 164, 21, 80, 81, 25, 169, 154, 74, 86, 86, 170, 65, 106, 21, 81, 160, 25, 66, 22, 64, 162, 98, 18, 134, 104, 134, 104, 2, 166, 170, 70, 150, 10, 148, 73, 9, 73, 34, 72, 88, 34, 102, 129, 137, 154, 65, 97, 152, 37, 88, 40, 149, 66, 17, 98, 98, 161, 10, 102, 128, 65, 102, 22, 144, 86, 104, 0, 84, 100, 102, 166, 153, 89, 154, 153, 85, 161, 153, 68, 4, 98, 148, 100, 21, 170, 145, 144, 153, 5, 165, 153, 34, 74, 72, 169, 81, 160, 170, 88, 80, 1, 169, 169, 150, 150, 145, 84, 106, 101, 128, 137, 105, 22, 145, 26, 38, 96, 129, 20, 36, 82, 134, 38, 4, 33, 97, 65, 80, 86, 165, 105, 17, 32, 8, 146, 9, 161, 129, 5, 37, 5, 69, 137, 0, 32, 20, 24, 129, 0, 16, 18, 4, 22, 42, 100, 17, 32, 1, 144, 86, 32, 86, 169, 96, 41, 160, 165, 130, 20, 128, 169, 6, 105, 138, 36, 18, 70, 80, 40, 153, 40, 74, 22, 66, 20, 100, 165, 2, 17, 100, 10, 136, 37, 149, 80, 82, 146, 161, 21, 34, 80, 1, 84, 162, 168, 38, 42, 22, 10, 169, 149, 85, 162, 88, 152, 86, 18, 1, 89, 73, 10, 25, 89, 98, 37, 137, 0, 9, 132, 132, 149, 170, 22, 89, 169, 4, 146, 41, 2, 138, 81, 41, 70, 169, 82, 85, 102, 0, 66, 164, 149, 74, 64, 4, 146, 68, 16, 40, 17, 164, 82, 36, 34, 144, 38, 106, 150, 36, 154, 134, 128, 40, 33, 152, 133, 2, 165, 168, 4, 37, 101, 69, 148, 162, 0, 72, 0, 102, 88, 42, 134, 169, 101, 9, 34, 134, 16, 88, 152, 10, 33, 86, 97},
    {85, 10, 20, 128, 144, 22, 148, 98, 132, 166, 133, 161, 86, 169, 68, 97, 4, 144, 21, 34, 85, 162, 88, 74, 2, 96, 86, 32, 168, 70, 148, 164, 104, 165, 82, 168, 88, 42, 69, 25, 37, 73, 25, 166, 150, 26, 102, 89, 20, 32, 16, 97, 133, 154, 136, 26, 1, 90, 88, 154, 128, 9, 73, 24, 9, 0, 150, 6, 25, 101, 69, 8, 70, 105, 72, 88, 154, 81, 40, 4, 38, 90, 137, 1, 161, 168, 169, 164, 64, 154, 74, 164, 138, 10, 10, 106, 17, 34, 86, 80, 168, 85, 170, 26, 86, 0, 73, 85, 81, 41, 96, 168, 26, 138, 82, 37, 1, 105, 152, 42, 65, 152, 85, 166, 165, 20, 133, 161, 86, 160, 68, 148, 66, 161, 80, 25, 73, 130, 69, 81, 17, 85, 38, 74, 2, 66, 65, 84, 150, 25, 85, 145, 97, 162, 134, 80, 146, 100, 154, 168, 170, 165, 102, 149, 146, 73, 164, 68, 21, 86, 69, 88, 165, 98, 85, 17, 105, 154, 170, 33, 138, 42, 86, 34, 169, 74, 166, 162, 154, 150, 136, 80, 21, 34, 9, 34, 32, 1, 10, 66, 148, 160, 98, 68, 10, 90, 8, 8, 18, 160, 24, 1, 0, 33, 41, 150, 32, 152, 170, 0, 152, 169, 169, 145, 132, 128, 136, 160, 144, 144, 128, 89, 164, 33, 66, 106, 32, 5, 168, 168, 64, 9, 34, 89, 9, 37, 16, 153, 6, 128, 68, 81, 38, 104, 145, 21, 137, 64, 136, 82, 145, 149, 104, 144, 22, 166, 96, 149, 2, 74, 80, 1, 5, 164, 149, 168, 136, 146, 84, 88, 20, 160, 152, 128, 84, 81, 106, 84, 98, 0, 102, 74, 66, 80, 1, 37, 89, 104, 144, 85, 26, 166, 104, 73, 81, 165, 86, 85, 0, 68, 129, 161, 144, 18, 33, 89, 96, 65, 138, 37, 1, 106, 97, 154, 26, 85, 104, 68, 26, 98, 150, 36, 74, 97, 152, 132, 38, 170, 10, 166, 88, 129, 26, 32, 98, 153, 36, 136, 106, 9, 169, 65, 164, 105, 161, 41, 36, 84, 160, 5, 160, 154, 40, 138, 102, 129, 42, 104, 6, 150, 104, 160, 74, 21, 65, 149, 5, 100, 97, 97, 86, 22, 164, 81},
    {72, 80, 133, 81, 81, 65, 38, 74, 82, 20, 150, 41, 72, 149, 69, 164, 24, 88, 40, 74, 81, 66, 22, 1, 132, 65, 132, 42, 6, 17, 66, 16, 145, 160, 148, 145, 68, 170, 33, 74, 104, 21, 105, 97, 104, 146, 162, 73, 65, 146, 80, 166, 21, 86, 16, 89, 165, 82, 98, 6, 132, 33, 162, 6, 5, 152, 106, 22, 129, 6, 130, 130, 82, 42, 136, 68, 148, 104, 21, 18, 168, 146, 150, 129, 69, 132, 74, 152, 149, 138, 152, 105, 165, 165, 153, 89, 41, 149, 136, 164, 150, 42, 132, 105, 73, 24, 100, 149, 153, 160, 41, 26, 24, 21, 74, 90, 165, 84, 164, 164, 85, 160, 149, 134, 100, 16, 89, 152, 6, 21, 65, 100, 133, 148, 40, 24, 166, 130, 149, 64, 101, 105, 154, 24, 149, 4, 106, 106, 6, 168, 106, 70, 134, 68, 38, 137, 165, 42, 106, 166, 129, 90, 129, 88, 132, 69, 85, 150, 72, 24, 105, 38, 40, 168, 89, 5, 98, 162, 66, 170, 145, 166, 104, 38, 68, 154, 134, 89, 69, 170, 133, 97, 68, 138, 0, 146, 160, 32, 4, 10, 0, 25, 144, 25, 128, 6, 1, 72, 146, 33, 37, 105, 34, 136, 36, 130, 2, 106, 6, 136, 4, 137, 81, 2, 42, 73, 162, 160, 102, 34, 66, 4, 0, 18, 0, 88, 25, 2, 24, 130, 82, 32, 136, 102, 101, 105, 100, 129, 18, 136, 22, 106, 2, 0, 65, 8, 16, 145, 2, 18, 68, 104, 144, 16, 4, 34, 24, 16, 168, 1, 2, 98, 37, 0, 96, 144, 132, 146, 65, 2, 33, 160, 102, 166, 0, 105, 64, 65, 146, 72, 34, 162, 152, 162, 68, 144, 101, 144, 73, 90, 66, 149, 102, 154, 162, 106, 165, 138, 101, 88, 165, 150, 16, 72, 26, 90, 145, 8, 16, 106, 153, 33, 64, 9, 85, 26, 80, 146, 86, 85, 105, 154, 101, 145, 41, 96, 32, 132, 0, 101, 64, 41, 150, 24, 22, 133, 168, 105, 133, 130, 134, 66, 41, 88, 4, 6, 88, 17, 70, 9, 137, 169, 154, 150, 102, 1, 82, 128, 146, 37, 148, 133, 136, 101, 90, 102, 68, 10, 130, 148, 82, 106, 88, 84},
    {66, 1, 128, 154, 6, 136, 166, 170, 68, 96, 161, 134, 42, 104, 32, 68, 68, 106, 96, 82, 86, 153, 128, 25, 36, 132, 149, 98, 68, 128, 164, 68, 98, 4, 9, 168, 70, 134, 102, 149, 166, 10, 100, 40, 36, 149, 81, 106, 10, 132, 104, 149, 133, 130, 148, 8, 161, 106, 106, 137, 101, 102, 21, 40, 153, 129, 80, 169, 97, 33, 34, 146, 149, 66, 90, 169, 24, 90, 68, 98, 138, 34, 16, 132, 73, 149, 69, 85, 165, 137, 168, 132, 5, 133, 5, 105, 85, 144, 168, 101, 134, 33, 153, 146, 149, 42, 68, 1, 90, 1, 10, 26, 22, 26, 90, 165, 165, 37, 96, 96, 138, 165, 10, 41, 166, 97, 85, 69, 144, 69, 10, 106, 153, 70, 22, 105, 166, 162, 168, 41, 170, 90, 144, 153, 162, 152, 97, 33, 129, 90, 101, 82, 137, 90, 162, 100, 101, 68, 166, 85, 128, 98, 161, 149, 89, 66, 148, 66, 37, 105, 36, 21, 150, 82, 128, 152, 21, 88, 40, 85, 138, 133, 98, 84, 168, 8, 73, 40, 84, 36, 170, 90, 74, 137, 160, 132, 153, 66, 16, 168, 64, 160, 73, 161, 41, 84, 130, 89, 72, 4, 72, 144, 130, 40, 148, 82, 26, 16, 80, 33, 162, 20, 80, 16, 40, 64, 40, 2, 74, 98, 74, 82, 6, 32, 102, 6, 137, 6, 32, 73, 152, 0, 153, 106, 6, 106, 66, 33, 18, 168, 66, 64, 37, 130, 102, 40, 32, 1, 106, 105, 80, 160, 133, 1, 42, 20, 17, 4, 129, 65, 16, 38, 128, 137, 72, 33, 41, 146, 66, 8, 98, 85, 98, 24, 96, 164, 6, 102, 21, 104, 164, 81, 88, 70, 152, 85, 5, 37, 160, 4, 168, 18, 80, 168, 80, 96, 38, 133, 69, 86, 74, 37, 168, 129, 2, 10, 66, 85, 160, 166, 165, 10, 106, 162, 20, 136, 42, 42, 144, 66, 105, 169, 36, 17, 0, 148, 16, 153, 106, 22, 97, 106, 128, 84, 1, 149, 25, 145, 145, 42, 18, 64, 162, 25, 84, 2, 169, 97, 170, 169, 150, 21, 89, 32, 42, 24, 153, 130, 1, 146, 149, 149, 166, 74, 106, 86, 164, 106, 102, 96, 154, 64, 148, 74},
    {1, 130, 4, 70, 145, 98, 149, 150, 129, 96, 16, 74, 97, 18, 148, 152, 32, 66, 149, 154, 96, 132, 166, 64, 168, 2, 154, 33, 166, 20, 130, 80, 82, 168, 169, 0, 68, 133, 130, 136, 69, 106, 130, 128, 130, 80, 82, 100, 66, 36, 73, 10, 10, 2, 146, 66, 0, 81, 38, 170, 153, 102, 82, 149, 106, 137, 8, 33, 40, 132, 105, 82, 16, 37, 136, 146, 10, 90, 149, 153, 144, 153, 22, 86, 70, 152, 134, 136, 21, 68, 33, 22, 33, 86, 129, 37, 26, 170, 106, 36, 144, 129, 164, 160, 136, 138, 133, 168, 10, 166, 42, 10, 88, 150, 101, 33, 102, 5, 82, 166, 165, 162, 65, 134, 34, 65, 134, 154, 10, 20, 106, 42, 66, 161, 16, 166, 130, 150, 148, 33, 86, 162, 8, 136, 154, 41, 69, 88, 68, 64, 89, 85, 82, 68, 4, 102, 0, 69, 170, 5, 130, 170, 130, 16, 80, 16, 130, 89, 133, 169, 86, 21, 104, 10, 90, 102, 106, 97, 18, 65, 34, 165, 85, 132, 82, 66, 37, 145, 73, 6, 150, 1, 137, 32, 2, 164, 2, 81, 168, 64, 22, 0, 96, 97, 68, 150, 8, 1, 130, 74, 33, 25, 162, 69, 128, 26, 32, 129, 8, 89, 0, 170, 0, 70, 16, 128, 100, 41, 68, 4, 66, 162, 128, 21, 0, 169, 89, 138, 80, 86, 137, 65, 2, 105, 8, 101, 4, 146, 20, 148, 36, 5, 82, 34, 152, 65, 168, 8, 160, 20, 129, 25, 40, 1, 80, 24, 20, 18, 0, 21, 22, 1, 6, 0, 80, 6, 24, 138, 161, 84, 145, 68, 32, 86, 160, 169, 168, 137, 33, 34, 144, 146, 149, 105, 64, 138, 166, 148, 133, 132, 80, 33, 5, 85, 20, 148, 102, 17, 38, 25, 166, 169, 88, 169, 89, 96, 88, 166, 69, 152, 150, 102, 18, 153, 90, 153, 72, 42, 88, 166, 69, 132, 88, 129, 80, 1, 68, 41, 66, 102, 84, 98, 105, 22, 33, 149, 89, 38, 148, 168, 104, 64, 0, 153, 136, 166, 150, 65, 154, 129, 86, 164, 133, 164, 68, 34, 137, 73, 70, 136, 130, 89, 153, 68, 106, 154, 128, 136, 145, 1, 166, 170, 25, 96},
    {70, 5, 1, 9, 128, 146, 150, 148, 160, 104, 164, 10, 40, 153, 16, 101, 132, 66, 136, 25, 104, 105, 101, 1, 170, 18, 161, 25, 149, 160, 5, 68, 148, 5, 165, 4, 70, 84, 145, 102, 100, 41, 104, 170, 170, 24, 80, 166, 9, 149, 42, 21, 105, 165, 8, 98, 104, 101, 134, 8, 97, 98, 82, 150, 24, 96, 64, 101, 160, 9, 170, 160, 98, 102, 42, 10, 24, 98, 42, 137, 145, 69, 166, 24, 169, 164, 74, 162, 136, 85, 21, 26, 32, 98, 168, 5, 18, 132, 40, 84, 161, 152, 165, 96, 166, 90, 96, 102, 22, 102, 25, 10, 149, 96, 90, 146, 134, 102, 90, 100, 33, 137, 89, 105, 16, 154, 138, 66, 105, 101, 153, 104, 100, 36, 168, 100, 161, 6, 101, 132, 90, 25, 149, 106, 161, 132, 144, 82, 6, 145, 85, 102, 6, 161, 18, 162, 82, 90, 146, 128, 133, 144, 100, 66, 88, 0, 104, 26, 21, 104, 144, 169, 154, 134, 168, 136, 166, 98, 132, 136, 36, 38, 40, 89, 21, 38, 104, 69, 153, 129, 105, 90, 16, 128, 98, 168, 72, 144, 5, 146, 144, 104, 166, 2, 38, 8, 80, 4, 145, 154, 24, 65, 64, 128, 6, 24, 36, 6, 169, 128, 34, 42, 68, 40, 8, 20, 24, 41, 17, 16, 16, 17, 21, 32, 169, 6, 34, 137, 160, 100, 41, 20, 37, 128, 148, 134, 64, 153, 0, 64, 101, 160, 88, 6, 1, 26, 161, 70, 22, 0, 17, 4, 104, 32, 25, 168, 32, 40, 132, 20, 144, 164, 136, 68, 18, 32, 41, 89, 21, 38, 154, 9, 80, 8, 80, 22, 102, 152, 148, 5, 72, 166, 160, 66, 66, 169, 149, 134, 73, 104, 82, 25, 86, 97, 74, 150, 80, 64, 4, 89, 72, 129, 26, 80, 101, 88, 10, 100, 160, 89, 33, 42, 153, 85, 74, 162, 8, 82, 70, 97, 26, 105, 150, 1, 98, 74, 104, 17, 90, 24, 10, 102, 101, 104, 24, 130, 80, 85, 132, 148, 153, 89, 6, 24, 149, 161, 85, 69, 41, 88, 41, 146, 96, 137, 36, 25, 165, 168, 82, 161, 161, 165, 69, 128, 86, 165, 128, 8, 105, 4, 170, 165, 73, 74},
    {153, 40, 2, 8, 152, 129, 165, 165, 89, 8, 101, 16, 129, 88, 26, 72, 26, 168, 32, 97, 8, 89, 20, 81, 2, 154, 74, 132, 166, 70, 70, 38, 153, 70, 100, 102, 89, 130, 2, 68, 153, 73, 105, 5, 138, 66, 6, 22, 25, 102, 152, 134, 34, 97, 164, 74, 102, 138, 153, 37, 96, 66, 144, 9, 129, 66, 153, 96, 150, 150, 154, 90, 0, 164, 9, 9, 105, 66, 2, 42, 132, 102, 22, 106, 153, 86, 149, 90, 2, 72, 4, 137, 82, 170, 38, 102, 40, 86, 148, 20, 4, 81, 86, 65, 36, 16, 41, 149, 21, 101, 153, 16, 40, 98, 168, 0, 68, 16, 98, 6, 85, 150, 165, 97, 166, 90, 85, 38, 100, 74, 88, 105, 134, 86, 160, 38, 38, 2, 150, 24, 166, 85, 98, 98, 166, 84, 137, 153, 80, 145, 164, 129, 22, 88, 0, 42, 4, 168, 89, 145, 6, 154, 168, 100, 146, 40, 102, 164, 102, 128, 136, 74, 168, 96, 165, 82, 86, 41, 42, 66, 170, 98, 97, 100, 149, 106, 84, 152, 89, 16, 102, 100, 97, 20, 148, 88, 168, 36, 146, 80, 166, 74, 66, 2, 16, 41, 1, 25, 138, 104, 17, 146, 40, 68, 96, 106, 9, 16, 32, 81, 40, 145, 22, 6, 20, 97, 152, 130, 72, 160, 41, 130, 66, 1, 170, 74, 33, 26, 70, 5, 68, 132, 32, 1, 37, 65, 133, 4, 20, 144, 90, 16, 42, 64, 164, 153, 80, 150, 72, 98, 80, 18, 33, 22, 24, 6, 64, 1, 70, 138, 137, 38, 144, 68, 73, 66, 1, 154, 152, 41, 72, 5, 40, 25, 16, 68, 98, 144, 101, 136, 145, 101, 164, 153, 10, 82, 101, 20, 105, 97, 136, 34, 134, 37, 153, 153, 25, 8, 85, 102, 149, 68, 82, 105, 85, 169, 33, 154, 89, 104, 153, 98, 137, 160, 145, 90, 88, 129, 18, 66, 21, 128, 102, 22, 73, 144, 42, 34, 26, 101, 129, 146, 0, 134, 68, 38, 18, 96, 68, 26, 18, 152, 137, 160, 80, 105, 150, 106, 145, 96, 36, 81, 153, 169, 169, 97, 24, 89, 38, 160, 32, 164, 100, 152, 149, 165, 166, 22, 86, 149, 154, 21, 137, 153},
    {36, 38, 1, 1, 38, 36, 166, 34, 102, 105, 162, 5, 84, 166, 73, 105, 85, 82, 5, 25, 170, 20, 82, 17, 88, 166, 37, 65, 42, 6, 146, 106, 70, 130, 97, 134, 170, 130, 100, 134, 101, 165, 85, 10, 8, 134, 80, 137, 38, 24, 102, 36, 152, 10, 153, 16, 10, 38, 6, 136, 18, 64, 40, 102, 166, 64, 36, 106, 6, 34, 70, 128, 137, 106, 40, 33, 84, 70, 66, 64, 105, 134, 168, 130, 153, 144, 84, 138, 102, 134, 25, 33, 166, 4, 154, 145, 89, 170, 34, 24, 144, 80, 144, 133, 133, 40, 134, 160, 41, 154, 66, 70, 100, 42, 102, 162, 105, 134, 24, 150, 97, 145, 169, 22, 84, 37, 136, 5, 134, 153, 38, 169, 133, 40, 153, 8, 154, 153, 128, 86, 89, 133, 164, 161, 18, 34, 86, 170, 38, 66, 168, 10, 102, 133, 90, 82, 81, 137, 88, 145, 102, 16, 154, 154, 8, 72, 130, 0, 84, 36, 89, 106, 170, 65, 152, 154, 84, 101, 70, 162, 146, 38, 136, 89, 105, 66, 6, 106, 26, 149, 136, 153, 89, 82, 144, 65, 160, 0, 80, 21, 162, 152, 6, 144, 134, 5, 34, 100, 16, 84, 70, 128, 40, 16, 34, 8, 64, 98, 16, 130, 42, 134, 148, 22, 160, 168, 73, 160, 72, 32, 168, 40, 136, 5, 149, 168, 160, 10, 38, 134, 36, 5, 161, 84, 100, 16, 144, 8, 137, 168, 84, 68, 148, 34, 25, 128, 170, 162, 26, 84, 73, 65, 136, 154, 81, 37, 4, 64, 132, 84, 97, 168, 73, 88, 137, 16, 1, 154, 101, 70, 105, 32, 97, 6, 38, 132, 136, 25, 138, 129, 40, 25, 9, 166, 164, 26, 0, 1, 41, 137, 145, 89, 133, 81, 88, 161, 162, 21, 100, 144, 133, 133, 134, 80, 81, 36, 150, 105, 150, 149, 69, 34, 85, 82, 90, 66, 88, 82, 169, 164, 81, 145, 129, 22, 162, 168, 9, 16, 102, 162, 136, 162, 149, 138, 150, 32, 8, 130, 152, 37, 41, 37, 38, 85, 153, 101, 18, 85, 18, 154, 128, 73, 128, 74, 102, 160, 132, 88, 104, 96, 128, 166, 153, 5, 36, 97, 102, 18, 74, 152, 170, 81, 105, 102},
    {6, 42, 137, 130, 98, 26, 38, 25, 66, 68, 70, 160, 82, 81, 84, 144, 90, 146, 96, 16, 81, 98, 70, 66, 33, 161, 154, 100, 0, 86, 136, 70, 66, 130, 21, 26, 16, 166, 82, 104, 161, 100, 100, 106, 89, 25, 81, 85, 82, 1, 70, 134, 72, 89, 168, 89, 21, 134, 69, 136, 20, 152, 128, 42, 96, 34, 88, 66, 169, 6, 4, 164, 166, 166, 148, 37, 90, 145, 166, 40, 138, 36, 73, 138, 33, 165, 104, 18, 33, 90, 138, 170, 132, 165, 18, 136, 66, 8, 169, 149, 160, 88, 136, 160, 74, 32, 98, 72, 161, 86, 165, 166, 154, 26, 90, 100, 165, 18, 148, 26, 10, 146, 168, 25, 82, 89, 86, 24, 169, 100, 72, 98, 100, 133, 88, 86, 26, 148, 38, 4, 146, 85, 134, 149, 97, 129, 18, 165, 145, 37, 4, 164, 64, 165, 9, 82, 169, 88, 6, 149, 165, 84, 82, 22, 37, 168, 98, 84, 86, 148, 166, 37, 154, 161, 81, 74, 86, 0, 168, 81, 74, 164, 10, 168, 98, 137, 22, 4, 134, 66, 104, 22, 86, 5, 36, 24, 169, 40, 66, 1, 98, 164, 162, 86, 132, 65, 33, 20, 128, 69, 1, 86, 10, 98, 64, 41, 82, 81, 72, 64, 8, 2, 68, 74, 36, 20, 0, 32, 42, 0, 0, 170, 98, 136, 129, 21, 128, 136, 68, 137, 0, 134, 169, 22, 82, 21, 128, 96, 42, 66, 34, 128, 40, 148, 10, 4, 1, 1, 5, 8, 17, 164, 17, 145, 144, 34, 129, 104, 2, 64, 1, 16, 64, 81, 82, 129, 130, 160, 0, 0, 70, 8, 68, 168, 69, 69, 68, 20, 154, 101, 165, 90, 146, 101, 72, 165, 26, 1, 20, 128, 37, 100, 40, 129, 84, 89, 42, 154, 101, 168, 101, 6, 36, 149, 84, 101, 105, 165, 89, 37, 70, 169, 161, 134, 34, 34, 100, 170, 138, 18, 41, 137, 8, 41, 153, 105, 26, 26, 102, 88, 68, 64, 152, 170, 25, 26, 96, 150, 153, 166, 149, 86, 72, 84, 144, 150, 18, 100, 100, 90, 130, 4, 22, 144, 88, 134, 100, 148, 2, 102, 8, 153, 20, 84, 101, 65, 72, 5, 162, 32, 137, 169, 36, 106},
    {32, 148, 64, 169, 9, 86, 128, 6, 168, 132, 21, 88, 22, 101, 132, 73, 22, 40, 102, 38, 26, 85, 149, 1, 97, 160, 33, 101, 36, 137, 37, 98, 17, 137, 65, 136, 9, 128, 84, 74, 18, 169, 73, 25, 85, 68, 168, 41, 68, 97, 150, 105, 65, 150, 25, 102, 9, 18, 24, 5, 20, 138, 69, 84, 0, 42, 4, 148, 16, 81, 2, 137, 132, 42, 96, 161, 150, 8, 129, 130, 100, 41, 8, 65, 21, 80, 102, 136, 105, 17, 98, 42, 100, 105, 104, 169, 106, 161, 144, 150, 9, 70, 25, 134, 149, 98, 100, 66, 146, 153, 90, 104, 8, 104, 148, 74, 154, 97, 86, 102, 73, 136, 164, 145, 96, 4, 17, 73, 38, 2, 166, 162, 1, 74, 26, 105, 74, 146, 146, 86, 90, 152, 68, 37, 133, 166, 73, 70, 137, 25, 150, 70, 133, 129, 40, 66, 150, 65, 96, 145, 154, 90, 152, 40, 85, 10, 90, 38, 100, 134, 106, 102, 154, 42, 165, 80, 100, 68, 136, 37, 169, 128, 22, 98, 25, 161, 85, 145, 165, 68, 153, 146, 102, 145, 136, 161, 18, 18, 8, 4, 86, 72, 34, 101, 41, 22, 2, 9, 4, 0, 148, 104, 1, 160, 74, 148, 40, 37, 128, 4, 82, 88, 16, 132, 20, 8, 2, 0, 130, 22, 146, 16, 8, 1, 161, 18, 24, 2, 0, 17, 2, 74, 81, 6, 42, 165, 66, 128, 134, 9, 97, 0, 20, 36, 0, 0, 1, 25, 1, 160, 169, 33, 8, 74, 69, 0, 73, 128, 104, 25, 8, 34, 32, 154, 82, 152, 137, 146, 0, 6, 161, 81, 84, 26, 128, 160, 10, 33, 72, 137, 86, 9, 89, 145, 136, 64, 8, 129, 104, 96, 149, 70, 90, 69, 18, 146, 69, 9, 16, 84, 105, 24, 146, 137, 72, 162, 40, 105, 150, 66, 84, 90, 146, 149, 89, 150, 149, 137, 152, 104, 70, 21, 84, 105, 160, 32, 146, 101, 82, 84, 10, 105, 1, 137, 86, 136, 73, 25, 136, 153, 154, 129, 106, 40, 21, 170, 161, 36, 16, 168, 5, 150, 169, 168, 154, 170, 70, 145, 24, 145, 73, 105, 89, 105, 6, 90, 146, 134, 101, 97, 145, 102, 137, 40},
    {100, 144, 160, 85, 0, 16, 84, 38, 20, 5, 128, 170, 0, 138, 164, 40, 168, 74, 102, 21, 144, 86, 89, 132, 86, 152, 6, 97, 169, 16, 18, 169, 160, 89, 38, 65, 38, 90, 137, 170, 4, 70, 86, 145, 129, 104, 168, 6, 128, 105, 65, 136, 154, 17, 68, 129, 42, 20, 86, 169, 80, 32, 169, 21, 170, 33, 137, 65, 25, 170, 16, 32, 88, 72, 164, 66, 153, 101, 97, 17, 73, 72, 37, 40, 96, 104, 152, 22, 164, 166, 64, 153, 68, 26, 102, 10, 144, 34, 98, 40, 88, 148, 106, 134, 169, 68, 169, 165, 133, 42, 149, 33, 136, 170, 145, 85, 104, 145, 146, 41, 166, 160, 150, 104, 133, 38, 101, 4, 102, 101, 162, 86, 97, 138, 145, 106, 106, 98, 160, 105, 6, 18, 105, 137, 74, 98, 145, 129, 74, 25, 137, 85, 152, 82, 10, 69, 8, 153, 89, 144, 106, 25, 37, 97, 153, 36, 41, 168, 88, 129, 165, 2, 149, 130, 154, 160, 1, 150, 5, 42, 25, 104, 37, 134, 134, 102, 106, 104, 162, 80, 148, 137, 145, 10, 88, 4, 98, 164, 2, 18, 0, 72, 170, 72, 138, 133, 42, 0, 10, 89, 1, 16, 0, 128, 81, 32, 64, 133, 132, 40, 166, 16, 89, 130, 4, 1, 6, 97, 130, 160, 128, 152, 164, 25, 145, 137, 105, 166, 96, 64, 66, 68, 74, 144, 21, 65, 1, 6, 129, 170, 36, 32, 40, 0, 132, 33, 64, 34, 72, 64, 84, 130, 65, 138, 16, 149, 84, 164, 37, 20, 4, 40, 64, 66, 84, 86, 86, 162, 128, 106, 161, 96, 132, 66, 130, 160, 129, 132, 65, 17, 5, 96, 161, 145, 20, 98, 105, 21, 64, 170, 150, 132, 85, 68, 145, 20, 70, 25, 106, 16, 162, 98, 148, 169, 150, 144, 148, 96, 69, 22, 16, 86, 6, 74, 25, 82, 104, 90, 85, 166, 21, 34, 166, 106, 74, 102, 73, 17, 148, 74, 22, 150, 9, 20, 169, 33, 133, 40, 89, 34, 4, 170, 68, 4, 128, 169, 6, 21, 80, 32, 164, 106, 148, 37, 17, 36, 8, 65, 161, 150, 73, 81, 168, 6, 17, 149, 17, 90, 72, 170, 0, 133, 74, 42},
    {138, 70, 165, 34, 38, 10, 130, 10, 170, 150, 85, 138, 170, 1, 66, 5, 73, 42, 40, 102, 154, 138, 38, 5, 21, 82, 69, 25, 20, 166, 165, 18, 90, 17, 37, 81, 22, 73, 105, 102, 162, 105, 134, 21, 152, 166, 133, 6, 154, 101, 138, 69, 33, 105, 66, 22, 69, 102, 18, 33, 25, 1, 162, 34, 10, 73, 146, 81, 41, 81, 41, 65, 38, 18, 132, 38, 40, 162, 1, 169, 0, 73, 89, 85, 81, 69, 166, 81, 162, 101, 41, 138, 69, 17, 101, 69, 2, 65, 9, 137, 65, 166, 85, 134, 101, 166, 166, 166, 152, 85, 138, 154, 41, 145, 154, 150, 105, 38, 21, 68, 0, 84, 84, 89, 104, 146, 170, 84, 85, 137, 152, 150, 165, 69, 17, 84, 97, 82, 85, 162, 166, 166, 89, 37, 85, 80, 162, 138, 85, 133, 10, 128, 17, 16, 161, 25, 20, 170, 130, 21, 73, 170, 104, 40, 153, 10, 9, 34, 72, 26, 41, 21, 106, 137, 130, 41, 164, 150, 134, 84, 101, 25, 170, 168, 16, 85, 85, 152, 106, 154, 73, 166, 130, 69, 72, 1, 89, 6, 4, 33, 162, 24, 133, 150, 37, 36, 64, 134, 97, 128, 4, 154, 73, 161, 10, 81, 136, 22, 98, 4, 98, 134, 32, 32, 33, 162, 164, 84, 130, 6, 101, 82, 16, 4, 10, 138, 97, 146, 5, 69, 90, 80, 65, 134, 150, 128, 162, 165, 1, 1, 132, 2, 89, 153, 18, 165, 82, 81, 10, 161, 130, 24, 16, 86, 8, 16, 98, 164, 129, 32, 168, 2, 145, 161, 104, 65, 9, 21, 18, 34, 168, 81, 22, 65, 146, 130, 17, 150, 89, 162, 160, 101, 132, 134, 38, 5, 89, 85, 36, 85, 22, 133, 144, 166, 152, 32, 6, 168, 5, 169, 165, 21, 144, 104, 8, 102, 73, 86, 20, 168, 150, 73, 166, 69, 166, 81, 84, 98, 85, 162, 138, 132, 89, 145, 65, 150, 25, 73, 106, 25, 6, 166, 89, 162, 69, 73, 26, 104, 168, 164, 70, 26, 130, 170, 16, 89, 170, 0, 38, 89, 97, 82, 73, 98, 146, 150, 17, 33, 82, 161, 73, 65, 166, 170, 2, 162, 69, 84, 6, 37, 132, 10, 105, 168},
    {2, 69, 136, 0, 100, 64, 101, 105, 8, 73, 136, 98, 150, 102, 25, 97, 152, 100, 88, 10, 5, 89, 8, 102, 150, 168, 169, 80, 66, 102, 138, 38, 36, 80, 168, 97, 138, 168, 153, 149, 101, 130, 138, 37, 81, 74, 101, 160, 16, 162, 16, 1, 144, 17, 101, 146, 20, 68, 18, 5, 84, 36, 84, 84, 153, 85, 169, 22, 160, 22, 162, 41, 37, 164, 90, 86, 152, 18, 89, 74, 69, 128, 2, 34, 1, 16, 69, 6, 152, 4, 164, 5, 170, 137, 85, 90, 129, 33, 98, 74, 137, 154, 102, 2, 5, 25, 40, 65, 106, 40, 90, 41, 164, 21, 9, 170, 164, 137, 25, 88, 10, 22, 2, 165, 145, 2, 88, 133, 144, 42, 65, 2, 9, 154, 6, 164, 169, 150, 38, 18, 137, 169, 164, 105, 152, 82, 136, 106, 162, 137, 102, 74, 96, 37, 33, 133, 82, 136, 88, 82, 70, 102, 22, 133, 86, 106, 21, 0, 129, 86, 33, 168, 153, 104, 130, 144, 138, 25, 165, 2, 98, 148, 17, 105, 97, 101, 69, 21, 65, 22, 145, 9, 169, 66, 88, 98, 82, 21, 165, 2, 21, 72, 66, 161, 68, 5, 4, 137, 6, 16, 153, 41, 5, 20, 144, 0, 32, 41, 33, 10, 40, 128, 9, 97, 2, 32, 20, 36, 0, 0, 82, 145, 41, 38, 100, 88, 38, 16, 168, 32, 128, 85, 66, 161, 9, 9, 16, 150, 86, 20, 34, 2, 102, 152, 37, 20, 138, 20, 74, 165, 169, 66, 32, 90, 5, 132, 33, 36, 21, 89, 149, 4, 21, 169, 73, 129, 37, 8, 26, 9, 8, 2, 1, 24, 84, 64, 16, 6, 145, 101, 18, 34, 168, 66, 68, 169, 17, 101, 104, 65, 10, 138, 100, 37, 152, 168, 10, 68, 21, 97, 65, 69, 129, 106, 81, 133, 160, 97, 21, 101, 129, 97, 169, 129, 164, 132, 168, 132, 160, 169, 97, 37, 90, 137, 162, 134, 145, 152, 36, 26, 102, 102, 133, 69, 153, 146, 25, 33, 166, 161, 65, 34, 65, 38, 2, 160, 145, 145, 96, 149, 160, 34, 149, 22, 84, 2, 4, 145, 17, 137, 10, 21, 105, 73, 0, 154, 100, 130, 104, 146, 144, 82, 20, 5},
    {90, 101, 136, 148, 100, 85, 164, 2, 21, 133, 1, 26, 65, 169, 161, 10, 37, 2, 5, 17, 26, 137, 74, 96, 138, 37, 166, 41, 97, 106, 21, 37, 144, 86, 153, 37, 160, 100, 145, 80, 16, 5, 72, 66, 101, 80, 38, 161, 85, 133, 38, 41, 145, 5, 42, 25, 165, 101, 104, 152, 97, 152, 42, 34, 154, 138, 98, 168, 144, 16, 164, 130, 96, 26, 154, 81, 4, 98, 138, 64, 128, 5, 136, 86, 145, 149, 162, 130, 149, 101, 153, 42, 129, 68, 32, 129, 160, 69, 129, 148, 69, 66, 81, 130, 102, 98, 84, 72, 10, 20, 72, 170, 100, 40, 42, 106, 25, 84, 168, 5, 68, 70, 38, 148, 84, 104, 90, 74, 37, 36, 169, 160, 148, 2, 136, 32, 102, 134, 98, 170, 106, 168, 81, 130, 149, 84, 88, 146, 6, 166, 145, 160, 105, 149, 106, 134, 21, 145, 154, 22, 21, 98, 81, 168, 149, 150, 161, 166, 154, 85, 168, 146, 5, 138, 162, 166, 96, 88, 34, 5, 34, 85, 34, 130, 89, 152, 21, 90, 80, 154, 17, 152, 160, 153, 21, 0, 88, 160, 144, 42, 9, 129, 17, 153, 84, 40, 130, 16, 20, 6, 20, 137, 16, 1, 32, 132, 132, 97, 0, 80, 64, 72, 137, 40, 1, 0, 10, 18, 88, 74, 64, 169, 96, 161, 25, 64, 36, 21, 148, 128, 86, 26, 90, 128, 42, 32, 8, 37, 101, 1, 1, 129, 0, 42, 170, 5, 0, 16, 74, 22, 38, 100, 16, 133, 153, 101, 26, 38, 0, 137, 8, 20, 138, 18, 24, 6, 24, 32, 74, 2, 32, 10, 72, 8, 70, 64, 0, 2, 164, 42, 134, 102, 90, 148, 26, 97, 6, 146, 153, 170, 90, 136, 82, 25, 74, 2, 162, 100, 170, 98, 153, 137, 24, 168, 68, 137, 154, 81, 169, 132, 130, 9, 130, 6, 42, 101, 150, 86, 170, 72, 165, 86, 161, 41, 168, 98, 138, 100, 20, 129, 2, 80, 41, 130, 74, 69, 68, 84, 68, 153, 5, 153, 132, 41, 152, 150, 69, 40, 150, 34, 20, 5, 73, 148, 165, 86, 36, 169, 128, 102, 40, 65, 82, 32, 137, 104, 17, 145, 70, 145, 85, 5, 106, 106},
    {26, 65, 2, 162, 166, 134, 82, 84, 161, 89, 85, 1, 9, 10, 166, 34, 170, 65, 20, 146, 138, 162, 33, 69, 88, 86, 42, 133, 5, 89, 97, 161, 160, 104, 69, 133, 73, 9, 130, 65, 40, 17, 42, 105, 22, 169, 161, 0, 22, 40, 20, 33, 18, 69, 25, 24, 8, 81, 34, 72, 0, 40, 132, 1, 144, 166, 41, 165, 2, 100, 16, 106, 169, 105, 170, 65, 128, 98, 33, 102, 66, 145, 36, 168, 154, 145, 90, 106, 149, 86, 105, 38, 105, 153, 98, 41, 144, 129, 0, 9, 160, 89, 164, 154, 6, 160, 90, 88, 168, 97, 37, 81, 73, 104, 26, 100, 100, 66, 68, 137, 101, 146, 38, 168, 89, 70, 42, 89, 65, 89, 36, 144, 166, 36, 1, 166, 1, 160, 170, 5, 70, 165, 36, 165, 37, 38, 90, 22, 81, 36, 9, 165, 102, 166, 89, 149, 152, 89, 102, 160, 161, 165, 154, 133, 160, 25, 73, 105, 130, 136, 84, 89, 88, 69, 82, 133, 169, 166, 146, 72, 70, 38, 102, 146, 138, 85, 26, 17, 81, 165, 166, 22, 81, 0, 153, 5, 65, 104, 136, 144, 41, 41, 145, 18, 16, 4, 32, 97, 130, 98, 4, 41, 144, 152, 104, 18, 0, 37, 2, 16, 0, 73, 41, 132, 37, 80, 68, 96, 38, 20, 105, 96, 72, 80, 21, 10, 24, 128, 146, 4, 144, 96, 21, 144, 101, 68, 162, 24, 161, 25, 152, 150, 168, 64, 81, 88, 16, 73, 96, 132, 70, 17, 96, 161, 24, 165, 82, 10, 34, 24, 25, 164, 100, 105, 4, 10, 73, 17, 4, 146, 2, 96, 65, 0, 16, 145, 26, 17, 40, 146, 34, 81, 10, 81, 72, 24, 102, 97, 41, 20, 129, 162, 32, 162, 1, 162, 134, 169, 82, 104, 22, 26, 148, 128, 148, 37, 148, 81, 168, 106, 145, 98, 17, 0, 10, 22, 5, 169, 41, 26, 84, 170, 104, 26, 9, 162, 96, 160, 64, 72, 84, 84, 169, 138, 148, 6, 5, 170, 36, 20, 168, 98, 104, 34, 154, 81, 98, 82, 89, 25, 41, 97, 105, 146, 25, 32, 20, 84, 72, 144, 68, 81, 88, 86, 104, 2, 40, 129, 154, 82, 4, 84, 38, 70},
    {168, 136, 100, 145, 153, 136, 104, 160, 152, 132, 0, 89, 144, 148, 90, 17, 34, 64, 150, 21, 40, 80, 73, 90, 16, 105, 24, 86, 105, 162, 1, 97, 17, 165, 153, 65, 101, 6, 161, 26, 90, 148, 150, 18, 42, 129, 145, 5, 152, 102, 138, 100, 5, 6, 166, 168, 68, 34, 42, 22, 136, 145, 166, 0, 81, 4, 165, 64, 72, 106, 89, 8, 150, 170, 130, 90, 168, 105, 5, 42, 102, 88, 134, 42, 86, 133, 104, 64, 74, 41, 81, 106, 65, 37, 32, 100, 162, 38, 85, 105, 148, 164, 8, 162, 20, 166, 6, 106, 152, 166, 105, 32, 26, 101, 153, 34, 37, 86, 162, 98, 164, 165, 149, 154, 106, 153, 42, 150, 89, 166, 16, 132, 100, 101, 145, 38, 164, 165, 70, 9, 96, 10, 22, 160, 4, 9, 129, 32, 65, 152, 74, 18, 105, 9, 86, 0, 168, 102, 129, 133, 22, 164, 138, 81, 96, 129, 86, 66, 153, 74, 26, 89, 152, 69, 70, 166, 105, 164, 148, 16, 22, 32, 42, 102, 85, 154, 33, 145, 90, 24, 85, 106, 168, 4, 69, 132, 18, 0, 34, 81, 138, 20, 128, 18, 70, 1, 136, 96, 80, 84, 105, 128, 24, 105, 136, 89, 130, 105, 32, 72, 8, 10, 70, 96, 66, 102, 0, 96, 128, 16, 18, 64, 36, 20, 84, 6, 136, 137, 164, 16, 132, 18, 150, 170, 136, 65, 34, 106, 16, 18, 132, 161, 81, 1, 130, 2, 74, 89, 88, 37, 160, 133, 162, 98, 66, 18, 150, 160, 4, 4, 146, 8, 8, 164, 90, 69, 18, 132, 65, 128, 101, 2, 0, 26, 101, 65, 68, 0, 133, 136, 10, 18, 100, 90, 1, 20, 4, 36, 66, 101, 98, 149, 89, 165, 89, 148, 8, 146, 65, 154, 98, 38, 89, 90, 84, 85, 41, 130, 152, 73, 41, 1, 8, 98, 102, 106, 25, 40, 149, 165, 22, 6, 150, 72, 133, 154, 161, 162, 18, 34, 86, 138, 165, 96, 68, 98, 137, 26, 137, 80, 148, 145, 169, 2, 24, 145, 98, 72, 152, 21, 148, 37, 101, 98, 165, 170, 32, 69, 132, 33, 22, 145, 154, 148, 104, 161, 38, 104, 8, 68, 65, 102, 154, 97},
    {85, 32, 152, 32, 81, 89, 73, 81, 138, 133, 70, 129, 36, 8, 1, 152, 154, 21, 74, 33, 102, 145, 22, 98, 81, 88, 153, 104, 161, 73, 18, 166, 16, 146, 88, 69, 84, 86, 106, 162, 97, 64, 21, 128, 165, 5, 166, 89, 69, 10, 21, 136, 130, 74, 162, 36, 161, 105, 97, 32, 38, 134, 36, 1, 6, 42, 86, 166, 25, 4, 161, 161, 149, 164, 162, 17, 153, 148, 24, 133, 169, 145, 88, 25, 16, 138, 36, 164, 106, 132, 166, 102, 70, 169, 170, 168, 96, 130, 20, 5, 154, 21, 168, 129, 161, 0, 97, 102, 9, 40, 149, 25, 105, 150, 100, 150, 145, 73, 150, 74, 150, 154, 96, 40, 74, 162, 37, 134, 165, 166, 106, 105, 97, 169, 90, 104, 26, 98, 10, 5, 66, 66, 132, 165, 130, 133, 85, 88, 5, 97, 37, 105, 154, 36, 154, 134, 37, 84, 65, 40, 146, 144, 5, 97, 162, 133, 166, 154, 18, 101, 138, 145, 106, 5, 166, 152, 98, 98, 40, 24, 40, 161, 17, 70, 73, 169, 100, 133, 146, 88, 104, 72, 82, 170, 42, 138, 1, 85, 164, 170, 21, 136, 165, 1, 32, 133, 34, 16, 0, 16, 65, 88, 2, 96, 74, 0, 0, 65, 21, 132, 68, 21, 25, 1, 33, 32, 144, 41, 20, 82, 68, 96, 137, 33, 129, 38, 0, 164, 66, 0, 150, 105, 161, 6, 85, 16, 0, 42, 74, 42, 0, 97, 160, 66, 16, 17, 168, 33, 144, 162, 26, 106, 164, 160, 74, 154, 37, 144, 26, 137, 25, 0, 64, 154, 68, 1, 129, 160, 97, 66, 80, 1, 6, 5, 162, 169, 160, 41, 18, 17, 145, 72, 17, 105, 5, 8, 10, 25, 26, 166, 38, 145, 17, 22, 32, 161, 9, 161, 73, 164, 81, 72, 72, 137, 18, 102, 98, 84, 85, 146, 89, 148, 24, 154, 145, 22, 137, 18, 169, 105, 96, 70, 129, 24, 136, 148, 5, 130, 33, 145, 97, 68, 86, 129, 17, 40, 33, 84, 149, 84, 148, 65, 154, 69, 86, 100, 72, 134, 144, 72, 137, 149, 101, 84, 166, 149, 18, 80, 4, 22, 138, 162, 133, 90, 66, 129, 68, 41, 154, 150, 82, 73, 24, 18},
    {84, 134, 9, 96, 154, 80, 36, 80, 8, 133, 37, 22, 137, 98, 90, 129, 73, 96, 133, 86, 154, 88, 74, 20, 153, 168, 85, 165, 69, 134, 137, 65, 161, 164, 166, 106, 81, 137, 101, 106, 132, 132, 89, 86, 169, 4, 6, 170, 0, 166, 69, 0, 168, 0, 38, 168, 8, 21, 10, 130, 90, 169, 86, 1, 146, 144, 34, 42, 137, 0, 38, 32, 32, 169, 21, 4, 104, 166, 165, 164, 85, 34, 166, 137, 89, 33, 149, 65, 162, 105, 72, 1, 152, 150, 170, 170, 133, 166, 149, 84, 42, 68, 138, 65, 162, 90, 85, 66, 138, 74, 89, 137, 169, 137, 149, 26, 2, 80, 85, 150, 42, 97, 164, 170, 0, 148, 104, 165, 144, 69, 22, 5, 82, 101, 80, 132, 98, 89, 164, 5, 22, 98, 42, 40, 128, 4, 64, 86, 18, 129, 0, 89, 150, 64, 146, 70, 146, 20, 6, 101, 168, 33, 18, 80, 85, 32, 82, 89, 38, 64, 162, 144, 144, 73, 150, 160, 150, 101, 25, 166, 165, 146, 85, 84, 88, 164, 84, 5, 25, 10, 90, 100, 0, 33, 32, 65, 0, 82, 21, 86, 18, 42, 96, 100, 33, 148, 134, 73, 84, 72, 73, 1, 168, 82, 34, 144, 21, 17, 65, 2, 36, 72, 40, 2, 68, 65, 81, 0, 40, 166, 104, 130, 40, 22, 18, 33, 80, 33, 32, 130, 161, 4, 37, 20, 0, 82, 0, 86, 0, 32, 21, 148, 74, 18, 8, 150, 0, 128, 137, 16, 33, 160, 65, 105, 41, 10, 128, 128, 64, 136, 144, 2, 80, 104, 33, 40, 105, 128, 85, 150, 152, 73, 168, 0, 64, 148, 40, 105, 18, 65, 70, 162, 98, 69, 165, 148, 152, 166, 165, 20, 88, 106, 134, 70, 137, 9, 20, 138, 166, 101, 33, 136, 153, 154, 97, 133, 154, 24, 89, 150, 101, 5, 24, 170, 73, 73, 149, 105, 134, 68, 165, 100, 9, 8, 165, 148, 72, 42, 17, 1, 137, 41, 170, 102, 170, 100, 134, 150, 162, 8, 106, 68, 98, 100, 169, 128, 98, 129, 85, 88, 166, 149, 106, 10, 144, 102, 100, 64, 73, 105, 33, 130, 106, 153, 134, 90, 162, 145, 64, 170, 162, 10, 154, 72},
    {146, 128, 36, 21, 73, 16, 80, 138, 101, 85, 101, 132, 104, 133, 6, 20, 1, 0, 148, 148, 105, 36, 100, 133, 98, 16, 84, 132, 65, 169, 97, 42, 154, 36, 148, 65, 85, 66, 105, 80, 36, 106, 68, 97, 69, 132, 101, 26, 84, 40, 4, 5, 96, 69, 100, 144, 97, 34, 149, 98, 105, 24, 101, 69, 66, 24, 145, 154, 150, 170, 144, 133, 168, 146, 146, 162, 81, 73, 162, 36, 25, 64, 133, 98, 72, 145, 90, 2, 73, 85, 1, 97, 9, 89, 170, 130, 37, 38, 170, 170, 165, 97, 37, 42, 41, 96, 73, 97, 166, 68, 26, 154, 88, 66, 160, 2, 88, 73, 38, 170, 82, 5, 24, 104, 104, 34, 20, 42, 154, 153, 68, 138, 152, 20, 101, 1, 165, 169, 85, 149, 170, 84, 34, 16, 137, 64, 86, 150, 70, 17, 162, 100, 80, 160, 102, 150, 6, 102, 149, 134, 162, 133, 170, 152, 66, 129, 102, 38, 41, 129, 162, 6, 98, 165, 134, 24, 21, 88, 170, 86, 129, 149, 34, 102, 102, 169, 82, 21, 165, 168, 36, 168, 168, 36, 4, 132, 4, 0, 169, 69, 72, 149, 96, 64, 36, 16, 1, 32, 74, 133, 38, 137, 8, 34, 81, 100, 10, 100, 16, 85, 1, 89, 72, 10, 102, 72, 6, 17, 130, 0, 137, 8, 69, 74, 6, 16, 10, 85, 72, 138, 9, 0, 145, 136, 128, 70, 10, 66, 70, 80, 42, 134, 150, 20, 161, 16, 73, 0, 5, 10, 169, 133, 138, 66, 162, 69, 136, 32, 69, 10, 2, 16, 5, 101, 40, 9, 148, 69, 66, 42, 22, 0, 17, 152, 36, 96, 1, 100, 10, 8, 10, 9, 166, 152, 25, 72, 169, 148, 42, 162, 166, 105, 84, 170, 130, 129, 33, 26, 165, 21, 73, 148, 8, 40, 18, 42, 166, 169, 86, 41, 165, 170, 64, 150, 2, 134, 42, 170, 96, 100, 102, 166, 73, 169, 145, 1, 154, 101, 88, 6, 9, 64, 133, 8, 38, 164, 164, 34, 18, 154, 74, 146, 100, 106, 149, 170, 69, 168, 82, 145, 73, 150, 168, 26, 90, 68, 150, 2, 97, 5, 86, 22, 69, 169, 86, 148, 73, 130, 100, 6, 166, 40, 169, 146},
    {41, 84, 36, 160, 66, 105, 96, 97, 90, 105, 42, 26, 8, 74, 86, 4, 170, 26, 42, 134, 20, 80, 70, 106, 134, 166, 37, 104, 168, 80, 164, 41, 21, 128, 34, 98, 2, 130, 18, 149, 160, 106, 9, 17, 82, 98, 37, 89, 17, 164, 42, 36, 134, 32, 4, 32, 10, 102, 89, 9, 2, 101, 102, 106, 74, 130, 41, 101, 70, 88, 168, 73, 165, 100, 170, 81, 105, 137, 40, 73, 65, 150, 106, 74, 128, 10, 70, 22, 86, 146, 162, 164, 106, 4, 89, 137, 145, 70, 170, 152, 66, 88, 105, 145, 162, 8, 84, 37, 149, 86, 134, 146, 36, 148, 85, 144, 164, 74, 74, 104, 85, 170, 69, 170, 80, 20, 166, 106, 153, 86, 102, 105, 40, 38, 24, 136, 130, 136, 6, 81, 24, 85, 100, 10, 26, 97, 40, 4, 105, 150, 145, 89, 102, 165, 166, 165, 168, 101, 0, 40, 133, 153, 166, 88, 32, 166, 81, 145, 88, 134, 21, 70, 138, 42, 149, 26, 90, 73, 161, 84, 96, 106, 8, 70, 69, 102, 97, 64, 38, 130, 10, 134, 149, 98, 2, 32, 72, 16, 5, 9, 6, 9, 32, 169, 106, 74, 6, 64, 36, 64, 33, 132, 166, 128, 1, 166, 22, 153, 149, 73, 1, 4, 21, 18, 98, 25, 104, 4, 25, 0, 16, 2, 80, 25, 33, 73, 6, 1, 148, 104, 36, 8, 32, 4, 81, 72, 8, 86, 160, 2, 161, 66, 41, 74, 144, 66, 86, 40, 66, 136, 84, 10, 33, 130, 133, 130, 1, 132, 160, 129, 0, 18, 4, 128, 0, 96, 4, 6, 16, 64, 144, 0, 16, 6, 128, 24, 25, 160, 146, 89, 101, 164, 17, 98, 170, 102, 148, 8, 32, 164, 89, 18, 97, 105, 64, 85, 34, 137, 18, 85, 2, 148, 0, 164, 18, 169, 73, 165, 2, 153, 130, 38, 89, 80, 70, 38, 89, 84, 90, 161, 84, 85, 70, 2, 138, 20, 33, 24, 97, 130, 161, 73, 40, 37, 162, 138, 106, 68, 42, 97, 36, 21, 133, 152, 80, 34, 137, 42, 104, 96, 64, 41, 18, 169, 17, 42, 42, 150, 166, 0, 70, 162, 154, 4, 106, 105, 136, 96, 137, 162, 129, 146, 36, 70},
    {154, 24, 149, 166, 41, 105, 170, 104, 128, 17, 145, 150, 104, 137, 9, 149, 1, 144, 169, 82, 2, 89, 64, 100, 65, 37, 101, 97, 153, 145, 166, 132, 97, 22, 100, 88, 9, 166, 41, 89, 106, 164, 20, 105, 150, 130, 90, 2, 129, 68, 128, 100, 4, 1, 10, 104, 166, 128, 85, 70, 9, 88, 8, 0, 138, 154, 16, 84, 80, 166, 170, 148, 66, 72, 38, 166, 38, 161, 73, 81, 90, 150, 104, 86, 34, 132, 70, 24, 154, 38, 133, 72, 152, 82, 162, 100, 38, 1, 72, 88, 85, 38, 90, 136, 41, 22, 82, 100, 24, 89, 34, 89, 146, 25, 41, 68, 169, 104, 90, 16, 68, 145, 100, 82, 165, 170, 85, 145, 86, 145, 36, 9, 86, 69, 69, 162, 20, 68, 89, 168, 80, 132, 74, 17, 89, 1, 170, 70, 148, 89, 154, 89, 24, 150, 153, 2, 70, 162, 4, 37, 145, 37, 104, 132, 162, 148, 70, 41, 169, 36, 89, 169, 18, 24, 9, 169, 97, 98, 97, 130, 38, 89, 150, 82, 104, 162, 66, 137, 149, 145, 150, 129, 129, 168, 4, 10, 66, 8, 42, 18, 9, 80, 0, 153, 130, 16, 2, 132, 162, 24, 162, 89, 168, 162, 69, 138, 9, 73, 70, 2, 6, 128, 37, 4, 34, 0, 170, 66, 130, 160, 138, 17, 20, 33, 69, 20, 32, 16, 34, 97, 17, 96, 66, 129, 24, 17, 65, 32, 130, 40, 128, 0, 4, 81, 128, 146, 104, 9, 17, 66, 8, 5, 88, 72, 129, 152, 84, 70, 4, 41, 0, 22, 74, 146, 25, 2, 130, 90, 0, 128, 152, 16, 144, 0, 2, 81, 69, 1, 2, 32, 138, 22, 24, 160, 136, 17, 136, 106, 133, 17, 168, 18, 2, 169, 169, 169, 86, 73, 152, 154, 129, 154, 89, 100, 170, 106, 6, 81, 164, 86, 164, 32, 10, 21, 146, 134, 105, 9, 106, 5, 37, 168, 8, 88, 149, 105, 4, 134, 165, 8, 97, 10, 162, 84, 25, 24, 10, 4, 86, 170, 152, 169, 90, 170, 106, 102, 64, 100, 40, 86, 134, 164, 33, 21, 73, 138, 41, 36, 148, 132, 148, 22, 89, 166, 98, 137, 169, 150, 90, 88, 36, 84, 166, 149},
    {86, 102, 0, 81, 64, 66, 82, 66, 24, 24, 81, 100, 82, 86, 136, 41, 152, 90, 170, 84, 85, 102, 162, 138, 136, 82, 133, 162, 166, 86, 10, 25, 102, 33, 137, 21, 38, 161, 40, 42, 10, 26, 86, 152, 69, 22, 168, 102, 90, 169, 82, 165, 25, 16, 162, 90, 17, 90, 98, 37, 72, 153, 82, 34, 149, 129, 41, 37, 100, 102, 66, 161, 160, 134, 166, 86, 152, 160, 130, 86, 169, 104, 166, 37, 168, 137, 134, 165, 165, 100, 168, 89, 166, 145, 0, 149, 24, 24, 97, 64, 25, 86, 41, 128, 160, 6, 18, 106, 89, 85, 138, 24, 133, 165, 86, 38, 149, 72, 18, 138, 144, 169, 144, 41, 86, 168, 20, 168, 136, 169, 90, 106, 69, 165, 148, 32, 145, 97, 89, 66, 6, 84, 168, 81, 1, 97, 82, 86, 5, 152, 65, 26, 37, 136, 34, 17, 68, 154, 70, 69, 41, 149, 4, 84, 2, 9, 82, 66, 90, 66, 81, 6, 89, 81, 84, 104, 86, 80, 89, 96, 5, 169, 26, 90, 86, 153, 81, 150, 168, 104, 161, 134, 74, 21, 17, 33, 137, 66, 20, 84, 2, 169, 65, 42, 0, 22, 9, 146, 98, 153, 82, 160, 1, 82, 161, 96, 22, 162, 32, 144, 96, 148, 130, 148, 90, 6, 82, 40, 86, 0, 96, 2, 40, 22, 36, 33, 17, 42, 8, 22, 1, 1, 65, 86, 10, 10, 6, 82, 70, 21, 34, 82, 9, 6, 134, 26, 0, 161, 33, 65, 138, 9, 161, 40, 9, 133, 169, 8, 161, 145, 9, 161, 10, 137, 66, 25, 25, 36, 32, 86, 102, 17, 104, 20, 41, 42, 165, 96, 129, 64, 64, 133, 8, 102, 73, 128, 150, 105, 129, 37, 38, 89, 102, 164, 70, 74, 102, 154, 164, 105, 154, 65, 97, 164, 149, 10, 22, 24, 133, 169, 24, 162, 9, 169, 86, 84, 154, 97, 68, 146, 102, 161, 150, 129, 24, 89, 145, 40, 70, 9, 166, 150, 152, 129, 73, 34, 102, 24, 162, 16, 9, 0, 9, 20, 64, 8, 160, 164, 6, 146, 166, 70, 105, 6, 90, 100, 97, 8, 37, 129, 65, 137, 102, 149, 26, 134, 160, 32, 152, 69, 69, 68, 85, 90},
    {89, 1, 6, 100, 85, 64, 21, 5, 145, 80, 170, 105, 42, 38, 144, 134, 168, 2, 20, 154, 40, 20, 104, 97, 166, 153, 66, 86, 37, 166, 149, 69, 154, 2, 160, 165, 88, 89, 10, 148, 97, 6, 74, 150, 73, 169, 165, 25, 65, 38, 145, 104, 34, 102, 72, 72, 162, 129, 17, 170, 136, 128, 168, 65, 153, 162, 165, 154, 136, 134, 9, 153, 152, 10, 37, 1, 162, 21, 36, 37, 38, 166, 74, 152, 136, 138, 74, 6, 101, 33, 37, 22, 168, 37, 164, 130, 144, 98, 128, 33, 170, 72, 86, 22, 5, 9, 132, 37, 36, 6, 80, 86, 136, 160, 101, 152, 98, 153, 82, 132, 169, 104, 25, 18, 166, 42, 70, 161, 154, 5, 84, 150, 85, 97, 150, 65, 133, 138, 84, 81, 1, 70, 100, 164, 166, 165, 88, 72, 170, 21, 149, 21, 100, 102, 105, 6, 64, 4, 96, 82, 145, 8, 153, 154, 73, 8, 150, 101, 168, 68, 24, 25, 22, 97, 101, 26, 161, 106, 8, 100, 162, 128, 154, 144, 65, 38, 42, 160, 164, 90, 24, 89, 80, 40, 164, 33, 136, 144, 161, 64, 90, 128, 9, 16, 40, 16, 130, 33, 64, 134, 2, 153, 66, 80, 16, 66, 86, 9, 17, 0, 25, 16, 144, 84, 69, 81, 84, 37, 128, 22, 6, 6, 0, 84, 37, 84, 8, 33, 18, 130, 161, 26, 164, 72, 16, 89, 80, 80, 86, 86, 69, 128, 168, 88, 16, 82, 4, 136, 168, 164, 33, 37, 4, 169, 32, 4, 129, 4, 33, 128, 24, 0, 2, 4, 128, 160, 133, 36, 25, 22, 80, 0, 32, 166, 33, 73, 4, 68, 133, 72, 133, 85, 148, 89, 85, 36, 145, 101, 144, 161, 9, 26, 144, 138, 97, 10, 89, 145, 90, 42, 66, 170, 102, 17, 89, 86, 153, 134, 146, 152, 96, 42, 129, 160, 88, 153, 26, 101, 6, 136, 90, 101, 165, 72, 82, 82, 129, 5, 66, 134, 18, 24, 169, 144, 166, 9, 25, 148, 82, 17, 38, 86, 36, 88, 136, 129, 165, 25, 34, 170, 138, 21, 86, 22, 32, 22, 165, 20, 169, 69, 164, 146, 22, 82, 40, 81, 145, 2, 89, 97, 85, 164, 150, 24},
    {21, 136, 38, 152, 130, 152, 16, 145, 26, 84, 97, 133, 136, 84, 132, 70, 153, 16, 5, 4, 34, 130, 85, 105, 73, 26, 162, 132, 40, 36, 84, 102, 149, 97, 144, 86, 85, 73, 132, 81, 165, 42, 161, 8, 169, 132, 150, 166, 153, 38, 152, 106, 160, 64, 81, 25, 164, 165, 149, 64, 38, 41, 26, 145, 74, 169, 16, 36, 166, 149, 89, 90, 97, 25, 144, 162, 162, 0, 137, 162, 32, 20, 98, 32, 37, 169, 25, 106, 2, 81, 165, 0, 84, 72, 5, 18, 154, 130, 89, 42, 85, 6, 86, 128, 104, 133, 36, 20, 32, 85, 152, 149, 105, 89, 160, 98, 168, 37, 74, 69, 34, 24, 160, 137, 84, 130, 146, 5, 101, 2, 149, 37, 21, 16, 38, 40, 26, 66, 132, 150, 104, 138, 101, 105, 164, 104, 4, 5, 72, 128, 34, 150, 149, 0, 73, 160, 105, 166, 149, 90, 105, 149, 106, 138, 154, 169, 8, 170, 5, 161, 144, 136, 102, 149, 81, 152, 84, 165, 132, 85, 102, 64, 164, 32, 154, 66, 105, 149, 150, 21, 106, 86, 130, 161, 8, 32, 149, 16, 34, 64, 21, 89, 5, 146, 4, 65, 9, 4, 64, 6, 0, 24, 73, 16, 66, 81, 24, 73, 66, 37, 80, 101, 72, 106, 65, 64, 4, 2, 2, 16, 4, 2, 34, 81, 32, 132, 65, 150, 66, 65, 68, 2, 37, 26, 146, 154, 72, 66, 41, 69, 8, 8, 8, 16, 129, 149, 0, 21, 154, 74, 162, 38, 152, 8, 0, 166, 64, 98, 16, 32, 132, 0, 36, 64, 88, 74, 69, 130, 128, 17, 2, 96, 66, 5, 40, 146, 82, 136, 8, 25, 80, 104, 90, 17, 85, 64, 73, 72, 89, 162, 162, 17, 161, 145, 161, 74, 128, 81, 6, 166, 102, 96, 40, 8, 84, 21, 152, 86, 37, 170, 168, 41, 65, 101, 21, 133, 153, 82, 152, 100, 66, 25, 149, 20, 74, 80, 26, 138, 133, 16, 100, 2, 34, 137, 10, 102, 164, 89, 105, 41, 24, 22, 137, 89, 106, 137, 66, 72, 97, 65, 85, 81, 102, 137, 161, 21, 86, 42, 38, 90, 17, 104, 166, 146, 149, 130, 106, 84, 21, 4, 18, 37, 136, 149},
    {22, 4, 96, 25, 37, 24, 84, 82, 168, 36, 9, 134, 130, 10, 169, 74, 96, 42, 16, 86, 166, 90, 64, 24, 166, 169, 89, 162, 9, 169, 133, 17, 70, 65, 25, 160, 100, 40, 72, 25, 168, 145, 32, 17, 69, 144, 169, 164, 2, 37, 146, 104, 36, 8, 20, 22, 25, 9, 106, 145, 138, 137, 6, 96, 18, 8, 166, 90, 20, 25, 86, 162, 9, 137, 26, 85, 66, 106, 81, 146, 84, 168, 68, 98, 100, 81, 132, 25, 161, 148, 168, 154, 160, 169, 21, 101, 32, 33, 168, 20, 81, 68, 25, 86, 168, 86, 166, 166, 72, 161, 82, 24, 153, 104, 22, 38, 169, 129, 80, 84, 0, 89, 38, 154, 161, 166, 164, 82, 37, 165, 86, 70, 164, 164, 106, 144, 85, 98, 42, 22, 170, 161, 85, 169, 65, 170, 4, 106, 168, 26, 34, 37, 168, 104, 146, 137, 160, 162, 148, 5, 25, 22, 146, 42, 68, 132, 166, 90, 98, 82, 137, 24, 129, 154, 166, 1, 164, 97, 102, 101, 100, 33, 154, 150, 66, 153, 69, 36, 85, 154, 105, 90, 98, 17, 137, 17, 5, 4, 17, 72, 66, 73, 85, 105, 82, 133, 145, 74, 65, 161, 6, 136, 88, 81, 137, 65, 152, 22, 161, 16, 84, 18, 169, 130, 90, 2, 64, 64, 136, 64, 64, 104, 88, 68, 24, 26, 70, 8, 69, 165, 160, 18, 1, 18, 8, 68, 34, 133, 16, 17, 85, 20, 104, 8, 6, 21, 33, 17, 104, 9, 165, 0, 165, 98, 70, 8, 133, 165, 89, 152, 6, 98, 162, 96, 6, 69, 16, 81, 1, 32, 70, 98, 161, 32, 89, 26, 128, 154, 97, 98, 70, 66, 72, 102, 82, 10, 136, 33, 148, 70, 70, 38, 84, 66, 150, 134, 26, 161, 105, 137, 138, 24, 152, 90, 84, 102, 154, 106, 25, 82, 148, 149, 38, 153, 149, 149, 162, 90, 162, 22, 146, 88, 169, 65, 154, 105, 161, 169, 34, 41, 101, 146, 41, 85, 33, 65, 132, 85, 33, 6, 68, 0, 129, 26, 10, 40, 104, 168, 86, 41, 96, 36, 164, 170, 144, 84, 41, 166, 40, 133, 85, 161, 170, 102, 86, 146, 72, 22, 101, 105, 130, 24, 102, 6},
    {73, 20, 170, 40, 68, 41, 84, 128, 0, 16, 150, 74, 161, 150, 64, 18, 154, 164, 129, 90, 146, 4, 18, 152, 25, 73, 166, 133, 74, 86, 90, 6, 137, 2, 18, 82, 64, 148, 85, 82, 154, 136, 18, 1, 129, 22, 86, 89, 41, 150, 169, 22, 2, 1, 86, 89, 74, 132, 36, 128, 9, 64, 72, 33, 18, 134, 64, 16, 89, 5, 144, 134, 72, 160, 136, 148, 150, 150, 144, 134, 101, 10, 153, 74, 32, 8, 72, 129, 86, 85, 88, 102, 9, 98, 36, 168, 6, 134, 70, 84, 166, 41, 74, 74, 98, 145, 146, 164, 25, 134, 65, 162, 72, 96, 32, 152, 149, 132, 69, 85, 170, 89, 150, 72, 89, 152, 146, 162, 89, 130, 34, 97, 149, 41, 148, 149, 138, 150, 144, 105, 80, 105, 70, 34, 164, 32, 42, 100, 102, 65, 65, 86, 69, 18, 153, 133, 102, 150, 85, 20, 84, 81, 22, 84, 16, 170, 86, 80, 144, 74, 90, 168, 101, 153, 100, 133, 148, 164, 132, 0, 85, 68, 22, 153, 41, 166, 106, 149, 72, 104, 2, 42, 129, 162, 70, 0, 106, 0, 128, 96, 0, 136, 34, 32, 42, 2, 6, 2, 148, 80, 86, 134, 129, 105, 18, 153, 132, 64, 137, 130, 106, 6, 22, 16, 105, 2, 96, 16, 65, 41, 89, 80, 26, 20, 32, 90, 66, 137, 146, 65, 169, 169, 10, 1, 160, 101, 64, 66, 70, 146, 132, 165, 80, 102, 64, 32, 9, 34, 96, 128, 136, 130, 25, 32, 81, 8, 136, 136, 96, 20, 72, 73, 32, 2, 105, 18, 9, 25, 66, 144, 144, 33, 73, 168, 2, 32, 146, 8, 6, 72, 96, 129, 154, 33, 72, 37, 132, 138, 168, 152, 96, 97, 81, 21, 37, 36, 168, 33, 24, 138, 4, 101, 17, 73, 85, 37, 90, 162, 85, 98, 38, 38, 36, 70, 26, 81, 128, 134, 148, 37, 149, 85, 134, 137, 136, 72, 41, 162, 89, 134, 37, 169, 26, 80, 90, 34, 153, 154, 86, 80, 1, 97, 97, 42, 85, 33, 148, 96, 89, 21, 4, 17, 150, 26, 161, 106, 66, 98, 146, 164, 22, 154, 169, 36, 104, 169, 106, 166, 152, 165, 149, 69, 149, 88},
    {150, 41, 100, 160, 96, 134, 161, 8, 24, 152, 41, 17, 86, 106, 74, 145, 101, 104, 68, 86, 154, 88, 69, 37, 25, 5, 90, 132, 38, 165, 42, 65, 73, 161, 37, 97, 152, 153, 162, 22, 165, 33, 69, 6, 170, 89, 80, 1, 134, 88, 148, 89, 80, 102, 105, 70, 153, 128, 162, 84, 152, 65, 154, 10, 137, 105, 144, 146, 154, 33, 152, 169, 82, 162, 145, 42, 105, 64, 100, 168, 85, 32, 129, 73, 106, 170, 138, 137, 129, 72, 5, 82, 161, 40, 26, 9, 80, 81, 137, 169, 5, 32, 133, 138, 166, 86, 40, 70, 80, 145, 24, 10, 153, 133, 90, 134, 98, 66, 36, 128, 18, 164, 88, 5, 41, 104, 42, 166, 86, 161, 80, 70, 73, 130, 144, 38, 148, 152, 84, 20, 170, 106, 65, 16, 9, 152, 102, 72, 24, 74, 129, 88, 168, 22, 164, 134, 132, 74, 42, 169, 65, 101, 129, 25, 41, 38, 81, 81, 74, 36, 89, 130, 32, 89, 96, 20, 6, 90, 8, 72, 169, 68, 134, 86, 89, 168, 84, 170, 100, 96, 33, 164, 22, 41, 9, 0, 41, 100, 160, 0, 32, 36, 168, 128, 9, 81, 9, 160, 153, 72, 136, 6, 129, 161, 82, 33, 144, 134, 18, 160, 84, 104, 38, 0, 128, 68, 152, 9, 146, 6, 8, 18, 16, 96, 64, 64, 160, 68, 33, 132, 134, 130, 169, 6, 134, 64, 22, 64, 1, 9, 133, 6, 0, 64, 68, 104, 136, 161, 4, 128, 134, 162, 40, 164, 160, 17, 9, 128, 9, 0, 144, 70, 16, 137, 150, 41, 160, 8, 134, 70, 32, 138, 144, 130, 160, 64, 97, 96, 84, 170, 81, 81, 82, 170, 170, 84, 69, 144, 148, 129, 152, 42, 153, 90, 96, 16, 104, 86, 25, 84, 25, 22, 100, 149, 26, 170, 152, 17, 160, 154, 97, 133, 88, 10, 148, 70, 104, 129, 85, 128, 82, 101, 86, 69, 128, 165, 20, 85, 168, 70, 130, 161, 64, 68, 148, 170, 150, 84, 4, 150, 25, 89, 21, 26, 69, 41, 0, 21, 106, 68, 101, 8, 26, 164, 148, 101, 169, 130, 136, 24, 64, 65, 102, 64, 154, 21, 84, 162, 144, 42, 6, 81, 73, 84},
    {166, 128, 21, 138, 160, 26, 74, 4, 96, 105, 69, 166, 74, 97, 4, 85, 153, 133, 70, 34, 84, 149, 4, 82, 97, 42, 33, 130, 17, 89, 10, 102, 9, 153, 160, 89, 169, 170, 97, 137, 161, 25, 105, 42, 86, 133, 154, 138, 10, 129, 22, 24, 133, 24, 164, 2, 169, 74, 22, 88, 169, 17, 82, 85, 146, 36, 152, 18, 146, 106, 42, 69, 128, 74, 5, 102, 34, 160, 101, 86, 164, 8, 129, 25, 137, 137, 86, 68, 102, 8, 97, 90, 152, 40, 161, 40, 65, 106, 5, 0, 41, 38, 74, 84, 149, 86, 102, 21, 161, 161, 74, 105, 137, 134, 36, 149, 88, 85, 86, 162, 160, 98, 82, 32, 97, 150, 37, 129, 90, 153, 16, 8, 149, 101, 169, 102, 37, 66, 74, 98, 65, 25, 82, 105, 8, 74, 102, 5, 168, 152, 129, 96, 90, 8, 150, 168, 144, 128, 0, 42, 9, 101, 4, 68, 106, 133, 133, 20, 144, 169, 21, 20, 97, 136, 85, 10, 81, 70, 101, 153, 9, 10, 68, 82, 68, 105, 104, 162, 74, 20, 169, 17, 69, 138, 26, 82, 130, 4, 24, 40, 145, 154, 73, 152, 98, 129, 169, 9, 80, 132, 101, 136, 153, 146, 128, 6, 5, 96, 0, 26, 6, 145, 153, 65, 152, 26, 17, 169, 132, 132, 133, 73, 8, 42, 72, 72, 128, 82, 138, 137, 138, 132, 154, 65, 129, 96, 101, 80, 70, 82, 70, 38, 130, 66, 148, 86, 9, 152, 33, 32, 166, 10, 152, 72, 6, 20, 162, 128, 170, 97, 150, 152, 32, 168, 17, 34, 80, 66, 66, 130, 86, 129, 8, 133, 96, 2, 74, 18, 41, 42, 161, 137, 73, 18, 153, 36, 137, 137, 97, 149, 101, 22, 136, 148, 165, 133, 70, 148, 138, 149, 88, 105, 0, 64, 148, 102, 37, 98, 106, 161, 96, 138, 166, 1, 150, 0, 168, 33, 144, 97, 90, 25, 2, 168, 106, 165, 9, 73, 129, 24, 22, 97, 88, 154, 81, 85, 154, 73, 165, 149, 5, 154, 148, 170, 22, 64, 9, 101, 6, 5, 22, 165, 106, 16, 144, 106, 169, 22, 6, 100, 1, 10, 105, 6, 73, 70, 17, 165, 105, 96, 16, 82, 145, 82},
    {21, 32, 73, 153, 1, 149, 106, 80, 18, 154, 86, 85, 148, 74, 81, 37, 84, 160, 42, 128, 66, 165, 5, 89, 96, 133, 80, 89, 166, 170, 137, 102, 88, 166, 32, 18, 85, 25, 160, 4, 68, 40, 40, 22, 41, 129, 74, 89, 146, 40, 150, 169, 160, 10, 42, 86, 161, 20, 20, 168, 36, 146, 100, 1, 144, 161, 70, 25, 168, 41, 136, 130, 165, 64, 33, 138, 138, 70, 128, 128, 8, 129, 130, 74, 137, 41, 1, 162, 73, 72, 1, 10, 144, 18, 8, 169, 26, 10, 20, 69, 106, 134, 5, 85, 100, 42, 21, 137, 4, 34, 88, 164, 170, 89, 69, 37, 24, 5, 86, 85, 6, 168, 161, 17, 169, 166, 24, 134, 154, 82, 132, 84, 90, 21, 100, 20, 106, 134, 66, 86, 90, 37, 136, 168, 10, 82, 20, 20, 10, 160, 165, 153, 166, 138, 130, 90, 21, 96, 80, 154, 89, 72, 69, 1, 145, 148, 169, 134, 160, 160, 170, 21, 153, 130, 145, 42, 134, 84, 88, 164, 128, 164, 149, 84, 69, 138, 85, 65, 24, 69, 65, 85, 21, 162, 0, 42, 18, 9, 168, 101, 21, 160, 160, 34, 5, 69, 2, 164, 4, 69, 2, 0, 0, 128, 88, 165, 72, 134, 65, 8, 148, 96, 96, 17, 129, 65, 16, 162, 81, 81, 9, 169, 32, 33, 149, 26, 10, 133, 96, 64, 8, 26, 0, 2, 2, 68, 88, 81, 128, 10, 8, 130, 21, 21, 25, 160, 104, 132, 33, 20, 8, 130, 170, 136, 70, 128, 162, 24, 34, 89, 0, 66, 37, 0, 20, 161, 138, 144, 129, 89, 129, 40, 73, 138, 136, 73, 1, 4, 104, 144, 144, 106, 154, 33, 10, 64, 165, 168, 101, 132, 166, 102, 164, 130, 16, 21, 145, 101, 72, 89, 66, 154, 26, 86, 166, 164, 24, 70, 69, 168, 106, 98, 132, 137, 20, 105, 104, 5, 149, 18, 149, 85, 106, 42, 89, 129, 85, 96, 1, 72, 0, 18, 105, 72, 106, 106, 80, 69, 97, 138, 64, 74, 144, 104, 86, 66, 168, 100, 22, 82, 22, 85, 42, 90, 86, 97, 84, 89, 106, 1, 20, 150, 90, 86, 149, 150, 132, 65, 169, 136, 153, 10, 72, 64},
    {90, 153, 5, 160, 96, 8, 128, 20, 104, 150, 65, 170, 25, 32, 66, 97, 6, 90, 133, 89, 134, 90, 9, 161, 161, 20, 102, 128, 85, 37, 81, 18, 138, 9, 105, 134, 160, 138, 9, 73, 154, 153, 164, 65, 86, 74, 129, 162, 2, 36, 24, 165, 36, 85, 26, 21, 165, 81, 9, 97, 74, 148, 4, 73, 146, 86, 138, 37, 16, 69, 146, 130, 37, 148, 170, 24, 82, 105, 149, 36, 68, 41, 162, 166, 72, 106, 21, 72, 41, 89, 33, 64, 25, 138, 86, 132, 5, 2, 130, 38, 146, 105, 170, 8, 86, 2, 85, 169, 170, 68, 70, 17, 90, 145, 164, 37, 6, 5, 146, 100, 70, 169, 154, 162, 81, 161, 1, 5, 166, 97, 21, 101, 165, 102, 150, 97, 145, 154, 88, 97, 22, 150, 160, 150, 164, 160, 89, 73, 6, 160, 68, 1, 86, 129, 136, 42, 37, 164, 101, 168, 38, 104, 137, 89, 168, 153, 170, 70, 81, 160, 130, 102, 24, 166, 132, 4, 21, 38, 169, 69, 153, 165, 153, 166, 86, 138, 65, 81, 73, 129, 16, 166, 65, 8, 37, 26, 130, 6, 88, 34, 4, 160, 88, 5, 104, 134, 102, 37, 144, 148, 96, 37, 161, 64, 24, 18, 2, 96, 144, 40, 2, 101, 134, 2, 96, 149, 33, 2, 21, 16, 2, 144, 80, 68, 16, 32, 40, 17, 0, 128, 72, 74, 161, 64, 81, 133, 2, 148, 10, 40, 40, 66, 0, 132, 80, 26, 1, 128, 0, 20, 129, 73, 101, 65, 33, 72, 128, 18, 64, 32, 164, 16, 144, 101, 161, 150, 81, 0, 24, 36, 81, 4, 4, 168, 89, 0, 16, 68, 149, 72, 152, 68, 166, 64, 136, 84, 32, 105, 100, 98, 86, 89, 40, 104, 70, 18, 21, 134, 82, 170, 149, 64, 145, 21, 165, 96, 128, 138, 89, 166, 152, 22, 130, 41, 1, 96, 168, 170, 26, 85, 22, 168, 90, 36, 106, 146, 4, 20, 81, 85, 150, 4, 64, 32, 0, 8, 161, 37, 97, 164, 130, 169, 133, 69, 9, 85, 86, 104, 68, 145, 41, 16, 161, 25, 88, 164, 134, 84, 136, 22, 81, 153, 25, 166, 10, 1, 89, 133, 164, 74, 105, 106, 34, 170},
    {4, 146, 97, 84, 144, 64, 0, 137, 154, 20, 160, 42, 64, 100, 64, 32, 105, 32, 9, 69, 20, 26, 18, 166, 138, 161, 100, 152, 37, 170, 96, 0, 2, 5, 4, 100, 146, 145, 36, 104, 34, 85, 42, 166, 70, 17, 97, 64, 70, 33, 2, 145, 102, 72, 148, 149, 134, 154, 26, 4, 150, 102, 36, 66, 164, 72, 144, 152, 166, 106, 150, 69, 105, 106, 65, 42, 66, 153, 150, 170, 85, 81, 138, 132, 84, 6, 152, 1, 164, 37, 70, 161, 38, 134, 41, 80, 170, 133, 24, 84, 22, 38, 36, 86, 138, 153, 81, 162, 5, 33, 146, 73, 84, 136, 89, 42, 130, 96, 150, 85, 138, 102, 168, 153, 102, 16, 82, 96, 136, 41, 146, 138, 170, 166, 170, 4, 22, 129, 101, 170, 88, 86, 101, 144, 129, 0, 72, 10, 81, 86, 105, 153, 16, 22, 24, 128, 105, 73, 41, 86, 65, 74, 168, 152, 134, 25, 137, 154, 169, 133, 153, 133, 89, 145, 86, 149, 36, 153, 41, 70, 70, 85, 153, 146, 102, 37, 133, 105, 41, 81, 22, 132, 89, 4, 166, 69, 100, 42, 128, 134, 8, 80, 80, 64, 33, 32, 98, 82, 129, 100, 106, 128, 129, 20, 16, 81, 5, 160, 0, 0, 128, 9, 90, 160, 33, 0, 32, 132, 72, 0, 82, 150, 16, 64, 169, 17, 88, 144, 1, 0, 90, 74, 33, 32, 90, 0, 2, 37, 32, 98, 21, 42, 1, 1, 9, 64, 132, 18, 4, 21, 22, 4, 5, 22, 0, 164, 69, 40, 36, 162, 89, 69, 40, 84, 166, 65, 70, 161, 166, 88, 10, 66, 36, 74, 164, 145, 146, 1, 5, 64, 170, 9, 22, 8, 88, 32, 22, 69, 153, 36, 132, 152, 166, 22, 90, 137, 37, 165, 65, 72, 164, 149, 168, 137, 16, 153, 38, 101, 32, 144, 22, 4, 104, 145, 168, 2, 148, 89, 38, 149, 137, 24, 37, 69, 133, 101, 68, 24, 0, 69, 136, 85, 100, 22, 161, 38, 164, 6, 149, 164, 165, 97, 5, 41, 165, 169, 85, 73, 162, 68, 38, 149, 33, 16, 36, 101, 81, 153, 169, 25, 65, 102, 106, 138, 129, 154, 132, 161, 26, 102, 145, 129, 21, 90},
    {146, 134, 1, 1, 134, 86, 138, 22, 144, 72, 38, 130, 138, 105, 148, 97, 133, 138, 152, 166, 162, 154, 97, 164, 17, 24, 152, 137, 101, 20, 102, 74, 16, 129, 133, 97, 66, 65, 129, 81, 37, 100, 100, 24, 97, 90, 42, 160, 86, 169, 86, 169, 41, 165, 41, 84, 9, 130, 90, 88, 148, 97, 2, 144, 72, 25, 90, 152, 102, 169, 81, 10, 1, 100, 37, 26, 73, 164, 98, 152, 72, 133, 100, 82, 132, 168, 73, 1, 73, 154, 36, 152, 84, 104, 82, 74, 100, 8, 82, 8, 65, 97, 85, 128, 72, 73, 170, 88, 85, 42, 170, 26, 132, 80, 70, 136, 136, 106, 160, 130, 96, 1, 144, 134, 4, 169, 81, 85, 154, 136, 162, 1, 153, 160, 165, 145, 37, 149, 89, 16, 10, 148, 1, 101, 69, 148, 18, 106, 152, 37, 73, 41, 154, 65, 153, 69, 138, 150, 68, 169, 133, 169, 133, 82, 10, 25, 9, 136, 164, 64, 9, 82, 132, 128, 73, 130, 132, 134, 22, 168, 20, 169, 136, 64, 104, 22, 74, 85, 101, 101, 100, 134, 66, 40, 88, 137, 154, 148, 72, 101, 136, 1, 80, 20, 8, 136, 69, 64, 40, 96, 64, 104, 40, 100, 168, 36, 88, 130, 26, 164, 8, 144, 69, 24, 38, 130, 8, 105, 70, 4, 0, 8, 162, 132, 10, 154, 5, 128, 148, 4, 146, 82, 136, 72, 80, 165, 42, 161, 165, 128, 162, 84, 96, 32, 36, 164, 4, 145, 100, 16, 130, 97, 8, 0, 72, 161, 16, 16, 37, 42, 132, 1, 20, 64, 130, 16, 96, 161, 17, 80, 20, 70, 74, 20, 168, 40, 136, 160, 97, 101, 74, 97, 85, 153, 164, 32, 73, 146, 0, 138, 1, 8, 74, 84, 106, 70, 145, 164, 160, 38, 129, 90, 73, 25, 90, 82, 98, 132, 106, 22, 138, 40, 146, 37, 169, 145, 150, 69, 162, 134, 98, 98, 70, 68, 37, 97, 146, 100, 70, 88, 104, 18, 165, 64, 169, 98, 150, 68, 162, 22, 100, 88, 18, 0, 136, 36, 161, 138, 10, 40, 137, 146, 42, 81, 146, 98, 6, 148, 25, 98, 18, 105, 146, 90, 102, 18, 132, 105, 70, 136, 84, 152, 133, 84},
    {104, 0, 129, 88, 88, 106, 104, 41, 64, 96, 97, 32, 89, 4, 136, 153, 144, 32, 65, 74, 146, 98, 98, 154, 89, 10, 152, 161, 8, 84, 153, 149, 169, 136, 134, 164, 153, 37, 137, 41, 164, 161, 64, 38, 104, 85, 146, 137, 22, 132, 34, 22, 4, 168, 65, 5, 22, 72, 166, 98, 150, 164, 128, 64, 160, 145, 146, 160, 86, 96, 84, 150, 68, 37, 33, 152, 82, 168, 85, 17, 2, 153, 5, 37, 1, 16, 66, 22, 20, 133, 22, 106, 85, 145, 72, 2, 81, 21, 40, 101, 21, 26, 145, 168, 68, 40, 74, 98, 149, 84, 162, 105, 65, 100, 154, 22, 133, 10, 105, 104, 166, 165, 153, 150, 70, 160, 104, 169, 22, 100, 161, 150, 66, 86, 25, 42, 148, 169, 85, 166, 102, 133, 169, 164, 133, 161, 170, 34, 101, 153, 34, 88, 149, 148, 73, 132, 1, 106, 84, 9, 21, 100, 84, 25, 33, 70, 70, 40, 166, 150, 136, 144, 73, 154, 81, 81, 74, 166, 169, 145, 85, 134, 104, 82, 42, 161, 149, 9, 153, 17, 90, 86, 88, 165, 4, 148, 164, 64, 8, 32, 105, 133, 132, 97, 0, 10, 40, 42, 64, 129, 40, 161, 34, 42, 36, 24, 8, 144, 148, 6, 21, 8, 18, 25, 97, 18, 72, 80, 8, 0, 10, 96, 0, 144, 73, 20, 134, 24, 146, 32, 81, 137, 165, 66, 40, 98, 104, 132, 66, 33, 64, 90, 132, 160, 10, 72, 36, 136, 40, 0, 20, 21, 161, 81, 105, 10, 152, 144, 32, 164, 34, 1, 24, 133, 97, 20, 64, 152, 138, 37, 154, 0, 32, 100, 10, 26, 134, 24, 132, 18, 160, 165, 32, 40, 32, 21, 160, 17, 162, 152, 42, 4, 1, 89, 70, 22, 42, 37, 138, 65, 98, 144, 90, 154, 5, 170, 72, 101, 90, 153, 2, 85, 101, 160, 88, 102, 161, 169, 64, 104, 106, 104, 101, 144, 150, 89, 136, 150, 90, 37, 104, 96, 133, 5, 162, 18, 89, 21, 128, 72, 2, 161, 72, 22, 81, 166, 6, 100, 82, 84, 85, 8, 73, 106, 128, 8, 90, 20, 128, 16, 150, 6, 69, 65, 86, 42, 9, 82, 101, 149, 41, 80, 72, 138},
    {88, 98, 134, 138, 170, 73, 25, 17, 42, 136, 32, 26, 98, 66, 148, 38, 18, 24, 105, 17, 32, 84, 5, 4, 136, 33, 168, 165, 160, 72, 137, 10, 8, 26, 160, 36, 89, 10, 38, 69, 24, 84, 148, 36, 20, 150, 134, 138, 74, 6, 8, 36, 134, 101, 144, 74, 6, 85, 86, 102, 160, 38, 40, 66, 70, 102, 105, 38, 160, 145, 9, 32, 154, 41, 89, 9, 42, 149, 162, 162, 33, 153, 138, 26, 21, 134, 150, 166, 129, 22, 74, 1, 145, 148, 133, 38, 65, 70, 128, 101, 38, 137, 36, 41, 166, 132, 22, 20, 165, 150, 105, 154, 146, 146, 72, 42, 101, 25, 169, 17, 36, 86, 134, 85, 85, 34, 133, 154, 34, 145, 5, 0, 154, 100, 88, 138, 85, 89, 102, 82, 86, 64, 96, 128, 160, 161, 81, 9, 100, 42, 70, 137, 153, 162, 150, 69, 168, 85, 137, 169, 37, 100, 73, 82, 73, 133, 21, 18, 5, 105, 74, 22, 101, 22, 16, 80, 24, 104, 106, 34, 164, 150, 17, 85, 105, 128, 160, 161, 170, 89, 70, 88, 90, 130, 165, 18, 97, 73, 74, 4, 73, 6, 152, 90, 137, 89, 97, 154, 130, 132, 1, 106, 161, 1, 38, 161, 73, 74, 16, 145, 162, 25, 82, 24, 128, 72, 154, 134, 88, 0, 36, 32, 166, 81, 5, 4, 0, 0, 136, 26, 38, 65, 32, 89, 80, 152, 73, 169, 69, 97, 82, 9, 132, 69, 72, 25, 168, 0, 38, 160, 74, 130, 134, 10, 170, 132, 100, 90, 68, 160, 64, 148, 88, 18, 106, 166, 38, 160, 2, 72, 164, 42, 106, 8, 134, 20, 32, 150, 166, 24, 25, 34, 80, 89, 130, 148, 38, 128, 168, 34, 66, 22, 20, 168, 1, 97, 25, 33, 26, 106, 89, 161, 32, 104, 34, 153, 22, 149, 20, 130, 26, 132, 137, 138, 152, 90, 101, 86, 169, 4, 88, 134, 24, 132, 106, 82, 165, 162, 9, 20, 89, 104, 134, 6, 22, 38, 152, 102, 146, 149, 146, 89, 138, 10, 37, 134, 68, 88, 153, 10, 102, 145, 9, 82, 89, 146, 90, 165, 24, 42, 150, 34, 85, 73, 17, 88, 20, 144, 169, 132, 24, 80, 86, 4},
    {74, 9, 2, 8, 72, 152, 41, 96, 24, 80, 137, 152, 38, 33, 86, 146, 9, 137, 1, 80, 66, 16, 150, 68, 69, 40, 160, 66, 168, 138, 25, 66, 162, 170, 98, 100, 66, 64, 74, 105, 64, 160, 17, 104, 168, 150, 129, 38, 40, 21, 73, 64, 160, 9, 150, 1, 36, 105, 66, 145, 80, 1, 106, 65, 38, 90, 72, 97, 132, 74, 41, 152, 38, 0, 97, 106, 160, 106, 73, 36, 150, 166, 1, 128, 129, 162, 105, 1, 6, 104, 21, 65, 166, 34, 148, 16, 8, 17, 146, 166, 165, 146, 41, 146, 41, 10, 22, 102, 160, 170, 129, 134, 41, 1, 134, 10, 129, 162, 21, 37, 137, 90, 34, 84, 21, 74, 72, 160, 89, 89, 138, 10, 170, 97, 38, 138, 69, 85, 130, 82, 34, 8, 169, 82, 160, 136, 82, 22, 9, 33, 64, 22, 136, 149, 73, 106, 68, 68, 130, 105, 165, 90, 165, 88, 96, 168, 90, 84, 21, 165, 90, 97, 149, 153, 82, 97, 144, 168, 37, 153, 80, 129, 65, 153, 165, 70, 20, 9, 149, 21, 133, 101, 146, 0, 160, 74, 104, 24, 166, 150, 66, 24, 102, 16, 73, 106, 88, 42, 16, 1, 65, 98, 65, 10, 144, 22, 98, 72, 162, 168, 1, 105, 8, 16, 104, 0, 105, 5, 73, 5, 65, 21, 20, 138, 100, 84, 24, 102, 144, 136, 128, 69, 73, 144, 161, 8, 17, 40, 86, 89, 6, 98, 17, 88, 4, 72, 128, 72, 5, 134, 160, 70, 106, 0, 97, 20, 8, 41, 17, 104, 88, 145, 32, 64, 41, 145, 25, 68, 64, 136, 70, 9, 9, 137, 22, 6, 6, 100, 146, 72, 128, 136, 5, 90, 73, 166, 37, 82, 82, 16, 6, 37, 137, 150, 34, 166, 9, 86, 40, 85, 33, 162, 153, 10, 18, 101, 22, 5, 152, 165, 25, 89, 18, 150, 86, 26, 80, 150, 102, 154, 128, 146, 81, 164, 18, 168, 133, 130, 72, 165, 9, 38, 84, 146, 4, 86, 90, 138, 161, 82, 6, 144, 146, 132, 69, 146, 165, 85, 130, 154, 146, 42, 144, 100, 88, 154, 164, 90, 133, 162, 32, 88, 138, 160, 68, 69, 36, 17, 90, 152, 169, 134, 162, 66},
    {33, 164, 72, 146, 69, 133, 66, 101, 161, 165, 42, 148, 1, 89, 20, 88, 6, 84, 5, 148, 152, 36, 96, 97, 5, 84, 34, 65, 85, 137, 42, 68, 149, 2, 26, 105, 105, 2, 85, 81, 10, 88, 170, 69, 38, 98, 32, 148, 144, 96, 1, 17, 25, 4, 69, 36, 9, 130, 74, 40, 162, 132, 5, 132, 88, 20, 41, 145, 26, 154, 152, 138, 154, 4, 34, 25, 161, 68, 41, 68, 88, 144, 106, 42, 138, 26, 26, 66, 97, 161, 68, 150, 106, 8, 36, 82, 148, 10, 16, 38, 68, 133, 32, 25, 101, 149, 5, 22, 32, 132, 22, 81, 9, 85, 73, 64, 150, 85, 25, 98, 34, 37, 149, 165, 70, 161, 101, 145, 66, 33, 9, 1, 130, 36, 149, 22, 166, 164, 98, 73, 145, 145, 170, 148, 66, 162, 137, 154, 85, 21, 144, 148, 145, 32, 9, 138, 9, 128, 69, 162, 136, 32, 166, 81, 138, 8, 144, 2, 24, 164, 40, 106, 21, 162, 90, 149, 6, 38, 34, 68, 34, 133, 164, 168, 69, 40, 88, 137, 170, 149, 26, 90, 85, 106, 26, 34, 9, 33, 134, 152, 133, 21, 42, 5, 42, 145, 25, 170, 10, 138, 74, 149, 86, 16, 133, 88, 20, 1, 6, 34, 97, 146, 33, 128, 152, 16, 0, 24, 24, 69, 74, 41, 97, 1, 128, 101, 2, 17, 0, 138, 130, 69, 152, 1, 5, 8, 133, 136, 0, 162, 132, 16, 64, 153, 68, 32, 8, 34, 106, 154, 0, 32, 18, 64, 64, 132, 144, 33, 149, 162, 4, 100, 128, 8, 97, 64, 10, 160, 138, 32, 0, 72, 152, 170, 32, 5, 2, 104, 0, 9, 64, 24, 105, 21, 72, 41, 16, 6, 72, 26, 20, 105, 88, 88, 22, 169, 85, 166, 136, 20, 72, 106, 26, 97, 86, 164, 38, 170, 98, 170, 162, 18, 128, 154, 148, 80, 137, 21, 166, 102, 148, 89, 74, 72, 132, 37, 6, 88, 166, 1, 130, 6, 37, 85, 132, 65, 165, 136, 85, 9, 25, 72, 101, 72, 149, 106, 2, 150, 136, 73, 129, 161, 165, 106, 154, 102, 38, 150, 165, 166, 10, 162, 66, 1, 165, 134, 134, 168, 9, 25, 133, 38, 136, 89},
    {169, 6, 97, 100, 33, 8, 165, 32, 98, 33, 100, 138, 17, 101, 1, 41, 0, 102, 25, 96, 72, 106, 2, 25, 161, 130, 34, 145, 4, 149, 6, 38, 145, 165, 81, 22, 168, 170, 100, 97, 8, 105, 42, 165, 162, 84, 89, 104, 166, 85, 170, 148, 81, 86, 0, 72, 33, 165, 170, 162, 18, 96, 8, 168, 18, 85, 97, 144, 41, 154, 166, 101, 168, 101, 37, 150, 42, 64, 20, 97, 37, 5, 169, 168, 161, 164, 169, 161, 149, 150, 148, 162, 85, 149, 21, 86, 90, 80, 161, 133, 72, 85, 165, 65, 169, 90, 101, 134, 5, 164, 84, 105, 38, 102, 97, 132, 149, 41, 66, 41, 24, 165, 25, 165, 86, 86, 82, 101, 26, 69, 82, 74, 21, 154, 102, 154, 85, 166, 153, 129, 41, 86, 169, 165, 100, 165, 1, 40, 164, 73, 133, 88, 85, 145, 130, 144, 137, 170, 64, 161, 129, 2, 97, 82, 148, 161, 132, 154, 24, 65, 152, 165, 72, 170, 144, 70, 16, 18, 20, 85, 22, 101, 98, 170, 33, 85, 165, 38, 42, 105, 42, 104, 74, 148, 18, 133, 164, 128, 133, 17, 160, 32, 164, 128, 96, 64, 168, 101, 16, 88, 34, 165, 40, 144, 129, 26, 26, 36, 88, 160, 97, 160, 164, 10, 33, 16, 81, 33, 34, 36, 132, 82, 8, 136, 9, 68, 164, 73, 64, 2, 32, 161, 145, 32, 9, 88, 102, 66, 40, 0, 0, 162, 34, 65, 40, 102, 106, 129, 69, 144, 16, 17, 8, 164, 132, 41, 18, 26, 36, 32, 4, 32, 88, 20, 90, 149, 0, 98, 33, 0, 152, 0, 64, 40, 148, 160, 144, 104, 85, 138, 144, 145, 105, 152, 105, 136, 84, 42, 162, 162, 130, 33, 6, 152, 42, 16, 26, 4, 100, 102, 97, 89, 146, 153, 84, 80, 166, 166, 169, 102, 90, 144, 2, 6, 166, 136, 130, 73, 136, 100, 26, 9, 85, 70, 153, 40, 96, 5, 72, 105, 8, 88, 80, 169, 68, 100, 26, 164, 24, 41, 32, 106, 66, 169, 16, 82, 169, 65, 98, 101, 170, 104, 89, 38, 22, 88, 144, 154, 1, 26, 161, 165, 74, 18, 170, 90, 2, 9, 138, 152, 26, 128, 24, 10},
    {152, 130, 66, 160, 145, 17, 40, 0, 149, 24, 68, 38, 21, 69, 64, 165, 17, 137, 133, 72, 6, 66, 138, 150, 128, 162, 72, 150, 20, 17, 86, 166, 169, 105, 105, 129, 144, 86, 128, 25, 136, 73, 153, 132, 160, 98, 65, 134, 148, 98, 0, 64, 132, 80, 136, 146, 22, 130, 22, 82, 102, 33, 74, 32, 68, 72, 145, 82, 102, 0, 101, 22, 165, 153, 33, 138, 68, 74, 10, 102, 37, 17, 164, 106, 137, 41, 101, 72, 36, 98, 20, 101, 85, 132, 41, 169, 146, 106, 81, 41, 98, 148, 37, 9, 86, 6, 148, 38, 32, 17, 138, 146, 148, 96, 150, 105, 105, 150, 129, 105, 102, 149, 128, 137, 102, 149, 25, 96, 104, 8, 166, 82, 97, 100, 154, 81, 130, 152, 101, 166, 38, 153, 37, 24, 104, 81, 150, 138, 21, 150, 8, 136, 85, 104, 69, 9, 153, 81, 42, 25, 41, 137, 138, 154, 89, 138, 169, 0, 166, 90, 130, 80, 144, 166, 102, 22, 165, 25, 18, 169, 69, 0, 144, 165, 166, 154, 97, 138, 21, 170, 154, 153, 138, 104, 24, 36, 5, 20, 160, 70, 64, 72, 36, 34, 33, 66, 152, 32, 42, 18, 144, 80, 8, 166, 97, 152, 0, 25, 9, 97, 72, 101, 72, 10, 36, 102, 162, 128, 130, 66, 80, 26, 101, 1, 146, 73, 100, 16, 32, 6, 20, 152, 105, 2, 4, 164, 24, 10, 6, 69, 32, 144, 144, 38, 65, 68, 41, 72, 81, 134, 136, 37, 137, 32, 16, 68, 9, 136, 100, 150, 21, 104, 10, 41, 0, 96, 168, 153, 73, 8, 133, 6, 138, 130, 105, 69, 85, 81, 105, 134, 128, 98, 20, 129, 1, 96, 22, 161, 148, 41, 102, 2, 20, 90, 32, 102, 169, 150, 104, 25, 162, 65, 8, 81, 64, 130, 102, 26, 149, 81, 168, 41, 134, 42, 38, 97, 88, 165, 153, 166, 138, 74, 4, 65, 164, 168, 145, 0, 86, 1, 134, 97, 132, 66, 85, 152, 138, 18, 132, 10, 101, 162, 160, 166, 73, 170, 1, 81, 160, 5, 81, 5, 0, 98, 136, 33, 104, 25, 0, 130, 101, 97, 18, 38, 68, 81, 85, 136, 150, 134, 134, 150, 162, 16},
    {169, 65, 37, 18, 85, 33, 89, 68, 85, 101, 104, 98, 32, 85, 80, 81, 132, 84, 81, 89, 165, 128, 40, 137, 104, 169, 36, 102, 137, 166, 6, 133, 40, 32, 40, 161, 42, 86, 101, 102, 170, 96, 169, 168, 146, 160, 153, 154, 128, 70, 5, 37, 100, 148, 90, 37, 145, 21, 32, 105, 137, 6, 164, 170, 85, 85, 81, 160, 169, 130, 21, 64, 38, 34, 164, 21, 21, 70, 37, 85, 22, 148, 170, 42, 86, 74, 136, 85, 133, 134, 66, 5, 134, 96, 88, 65, 9, 102, 65, 106, 65, 144, 8, 150, 102, 17, 104, 136, 10, 154, 169, 26, 86, 101, 6, 134, 130, 74, 168, 98, 133, 37, 165, 164, 86, 10, 154, 150, 37, 81, 129, 133, 85, 69, 80, 88, 150, 165, 168, 153, 136, 150, 170, 4, 21, 22, 168, 9, 166, 145, 0, 9, 165, 148, 96, 150, 138, 34, 64, 16, 96, 9, 64, 65, 73, 132, 162, 37, 162, 146, 68, 26, 102, 80, 138, 161, 18, 169, 10, 96, 98, 86, 81, 129, 26, 74, 154, 22, 86, 164, 36, 164, 20, 40, 104, 138, 26, 145, 18, 101, 16, 22, 8, 40, 105, 0, 32, 96, 97, 134, 40, 16, 0, 144, 38, 134, 8, 34, 2, 64, 68, 16, 0, 5, 161, 1, 97, 32, 5, 133, 6, 132, 150, 128, 130, 80, 0, 150, 9, 41, 18, 85, 36, 1, 149, 33, 97, 5, 17, 4, 33, 8, 130, 37, 144, 1, 40, 64, 33, 8, 22, 150, 90, 82, 0, 150, 26, 144, 16, 136, 0, 72, 134, 86, 37, 22, 0, 22, 38, 24, 146, 161, 96, 165, 74, 88, 150, 132, 96, 132, 150, 22, 88, 145, 4, 17, 97, 21, 90, 106, 154, 38, 9, 102, 128, 20, 149, 1, 132, 40, 17, 26, 169, 98, 164, 90, 70, 34, 65, 70, 38, 21, 128, 105, 89, 22, 104, 42, 105, 88, 168, 82, 69, 82, 80, 150, 0, 6, 168, 166, 104, 128, 0, 148, 102, 5, 89, 74, 26, 17, 144, 2, 73, 2, 130, 134, 86, 32, 165, 97, 100, 8, 106, 101, 1, 150, 166, 89, 82, 168, 20, 32, 170, 17, 128, 68, 148, 42, 73, 102, 165, 166, 42, 106},
    {136, 72, 37, 73, 105, 146, 82, 170, 104, 104, 65, 24, 169, 133, 130, 96, 85, 8, 32, 17, 41, 162, 0, 1, 105, 70, 144, 100, 150, 86, 129, 102, 96, 22, 37, 89, 41, 42, 134, 149, 161, 6, 164, 166, 26, 73, 85, 73, 24, 100, 152, 100, 101, 82, 90, 10, 105, 38, 154, 40, 16, 5, 88, 34, 132, 101, 104, 10, 132, 128, 154, 41, 82, 90, 10, 170, 68, 130, 36, 166, 66, 100, 70, 1, 102, 70, 154, 70, 97, 169, 137, 150, 33, 101, 84, 69, 154, 36, 34, 72, 37, 20, 161, 170, 73, 145, 170, 104, 81, 102, 25, 162, 162, 70, 81, 20, 161, 41, 2, 82, 5, 152, 150, 38, 146, 25, 41, 42, 134, 146, 168, 9, 154, 101, 0, 97, 86, 152, 144, 145, 152, 97, 104, 85, 101, 81, 152, 26, 161, 81, 24, 160, 150, 166, 70, 84, 1, 66, 86, 72, 105, 154, 89, 10, 1, 73, 133, 144, 33, 81, 148, 101, 37, 20, 100, 24, 106, 153, 26, 33, 70, 149, 41, 41, 161, 101, 40, 102, 22, 36, 130, 41, 145, 102, 101, 6, 170, 137, 69, 102, 128, 16, 69, 80, 32, 137, 168, 149, 4, 145, 137, 85, 66, 102, 16, 146, 162, 21, 145, 36, 68, 8, 69, 68, 16, 21, 18, 144, 1, 18, 0, 136, 153, 84, 17, 8, 2, 144, 16, 132, 8, 136, 97, 25, 144, 5, 104, 36, 138, 106, 66, 81, 64, 68, 2, 164, 100, 164, 133, 148, 20, 132, 82, 69, 82, 24, 145, 149, 80, 0, 66, 81, 149, 132, 41, 4, 36, 16, 161, 34, 160, 168, 161, 32, 161, 16, 74, 152, 69, 152, 137, 101, 169, 8, 170, 168, 101, 161, 82, 88, 38, 37, 136, 132, 9, 66, 154, 18, 105, 170, 153, 144, 164, 81, 81, 170, 137, 132, 22, 149, 20, 22, 162, 37, 134, 73, 168, 86, 10, 69, 21, 38, 90, 5, 33, 168, 148, 98, 73, 166, 41, 38, 100, 98, 37, 148, 146, 17, 149, 26, 66, 84, 22, 25, 138, 5, 17, 22, 98, 102, 101, 161, 101, 42, 168, 70, 101, 21, 74, 73, 0, 69, 88, 41, 5, 154, 106, 168, 1, 165, 138, 86, 97, 17},
    {16, 70, 160, 18, 145, 0, 18, 152, 130, 129, 88, 68, 65, 160, 66, 153, 1, 166, 152, 18, 9, 82, 74, 2, 88, 70, 101, 41, 146, 32, 160, 25, 41, 153, 170, 2, 105, 72, 137, 132, 154, 86, 169, 82, 162, 102, 82, 6, 2, 37, 90, 21, 81, 106, 72, 90, 68, 154, 130, 22, 17, 16, 80, 16, 0, 160, 148, 81, 16, 165, 73, 80, 165, 37, 154, 150, 86, 149, 41, 145, 37, 128, 153, 100, 0, 132, 65, 72, 6, 134, 170, 69, 37, 168, 148, 34, 64, 166, 162, 86, 38, 1, 160, 149, 146, 17, 133, 86, 85, 138, 128, 170, 166, 166, 20, 153, 84, 24, 72, 170, 153, 170, 169, 138, 38, 81, 105, 80, 98, 137, 80, 69, 106, 169, 88, 69, 38, 9, 73, 73, 138, 100, 5, 160, 169, 129, 85, 85, 134, 82, 82, 149, 164, 64, 102, 38, 81, 64, 84, 40, 150, 162, 90, 106, 102, 97, 96, 169, 85, 161, 84, 85, 170, 165, 102, 4, 73, 20, 102, 105, 38, 168, 5, 65, 89, 69, 168, 21, 102, 38, 146, 25, 81, 136, 4, 136, 164, 18, 154, 37, 5, 36, 144, 128, 68, 169, 168, 153, 152, 1, 40, 20, 18, 100, 68, 8, 18, 9, 74, 129, 40, 37, 40, 100, 69, 129, 80, 146, 96, 102, 73, 66, 36, 138, 70, 134, 169, 64, 144, 137, 64, 6, 145, 26, 0, 33, 132, 96, 102, 101, 152, 72, 32, 5, 68, 37, 136, 129, 149, 152, 90, 64, 146, 16, 0, 101, 144, 168, 132, 149, 164, 136, 65, 65, 1, 154, 101, 154, 80, 0, 64, 4, 25, 100, 2, 36, 8, 65, 20, 10, 10, 161, 170, 1, 152, 64, 170, 146, 17, 148, 40, 74, 86, 17, 168, 162, 84, 154, 152, 97, 148, 100, 90, 105, 162, 22, 101, 42, 9, 22, 168, 166, 97, 128, 162, 42, 154, 34, 25, 41, 102, 74, 81, 34, 38, 33, 153, 26, 25, 148, 41, 40, 153, 144, 138, 17, 88, 8, 98, 136, 86, 164, 38, 96, 36, 25, 154, 106, 8, 168, 105, 70, 153, 81, 26, 32, 166, 169, 22, 38, 168, 74, 64, 96, 17, 34, 145, 106, 168, 9, 6, 134, 80, 106},
    {149, 66, 65, 105, 8, 148, 68, 26, 96, 69, 85, 22, 37, 89, 0, 169, 64, 36, 164, 21, 88, 4, 32, 132, 150, 145, 154, 164, 165, 86, 134, 96, 34, 6, 36, 154, 150, 20, 146, 33, 166, 154, 68, 134, 5, 73, 90, 65, 169, 66, 149, 90, 9, 96, 146, 32, 130, 128, 136, 144, 138, 104, 144, 42, 152, 136, 137, 170, 89, 162, 138, 17, 105, 42, 36, 148, 1, 4, 150, 169, 101, 104, 22, 26, 69, 153, 134, 20, 128, 34, 34, 65, 20, 164, 104, 37, 105, 74, 134, 146, 4, 105, 82, 169, 146, 89, 9, 138, 100, 162, 149, 97, 148, 164, 20, 26, 154, 106, 169, 136, 100, 9, 41, 160, 42, 10, 86, 38, 152, 101, 81, 85, 90, 106, 82, 106, 160, 5, 152, 0, 33, 146, 2, 38, 88, 18, 41, 153, 150, 148, 170, 97, 8, 22, 166, 166, 138, 146, 85, 5, 20, 102, 8, 166, 68, 165, 42, 21, 8, 153, 164, 37, 169, 70, 168, 144, 168, 90, 136, 72, 18, 26, 128, 24, 106, 100, 10, 38, 20, 153, 149, 81, 161, 17, 137, 80, 152, 0, 160, 16, 128, 0, 9, 24, 0, 64, 6, 97, 130, 74, 24, 134, 132, 26, 0, 36, 2, 165, 36, 90, 133, 0, 166, 24, 144, 17, 0, 36, 144, 21, 132, 1, 137, 40, 164, 72, 64, 4, 65, 145, 9, 162, 20, 8, 162, 96, 9, 148, 24, 138, 0, 102, 132, 88, 133, 74, 145, 162, 133, 90, 1, 64, 74, 129, 6, 136, 34, 166, 82, 170, 73, 80, 70, 100, 144, 97, 34, 100, 65, 144, 40, 32, 20, 152, 132, 1, 1, 96, 41, 89, 25, 162, 74, 84, 74, 84, 38, 160, 32, 25, 150, 74, 40, 162, 104, 68, 21, 100, 106, 105, 90, 20, 85, 72, 70, 150, 33, 86, 136, 36, 148, 86, 40, 36, 153, 20, 16, 130, 6, 32, 37, 162, 136, 73, 84, 137, 41, 105, 17, 37, 132, 165, 33, 37, 41, 1, 149, 165, 128, 133, 18, 90, 100, 24, 153, 96, 160, 36, 85, 36, 90, 138, 154, 24, 88, 9, 149, 82, 136, 162, 65, 105, 4, 88, 161, 68, 100, 153, 25, 152, 146, 152, 90, 154},
    {42, 84, 64, 96, 82, 38, 0, 42, 42, 81, 145, 145, 20, 6, 1, 88, 162, 168, 168, 162, 17, 85, 34, 88, 34, 41, 68, 9, 169, 101, 134, 129, 166, 148, 150, 162, 38, 73, 105, 37, 4, 106, 4, 74, 40, 146, 148, 22, 102, 21, 160, 149, 36, 106, 0, 105, 16, 16, 69, 150, 149, 65, 34, 22, 36, 98, 106, 10, 164, 153, 40, 89, 150, 21, 20, 74, 74, 41, 21, 72, 169, 160, 16, 82, 80, 21, 166, 97, 152, 166, 17, 97, 144, 5, 169, 85, 17, 85, 5, 70, 85, 106, 149, 102, 101, 102, 169, 90, 70, 137, 10, 160, 129, 4, 24, 106, 154, 168, 102, 82, 25, 2, 73, 132, 162, 161, 32, 148, 65, 96, 25, 102, 1, 26, 88, 170, 89, 82, 105, 34, 154, 162, 169, 84, 65, 84, 18, 164, 148, 106, 86, 168, 165, 145, 132, 146, 101, 18, 166, 68, 80, 22, 104, 128, 164, 150, 33, 40, 146, 88, 161, 133, 22, 129, 165, 6, 168, 65, 130, 89, 85, 88, 166, 42, 170, 132, 130, 134, 84, 38, 85, 100, 166, 1, 16, 0, 17, 66, 164, 33, 0, 8, 132, 37, 33, 128, 80, 36, 68, 148, 9, 1, 9, 33, 82, 148, 2, 154, 2, 1, 17, 105, 66, 162, 34, 164, 80, 148, 82, 22, 86, 82, 20, 32, 162, 6, 9, 130, 168, 72, 84, 168, 1, 168, 160, 40, 42, 40, 130, 40, 32, 130, 17, 6, 170, 32, 9, 36, 84, 6, 10, 18, 165, 0, 21, 146, 5, 32, 1, 162, 89, 101, 70, 84, 64, 81, 66, 146, 22, 100, 40, 85, 82, 73, 134, 138, 146, 134, 81, 5, 102, 20, 72, 149, 150, 152, 149, 128, 166, 133, 32, 170, 165, 90, 148, 88, 161, 89, 80, 89, 40, 154, 153, 168, 149, 152, 17, 150, 102, 165, 81, 169, 85, 4, 165, 105, 17, 88, 166, 162, 162, 82, 85, 129, 89, 146, 0, 64, 4, 166, 154, 106, 133, 90, 144, 9, 130, 20, 148, 164, 88, 24, 34, 86, 10, 25, 38, 165, 168, 105, 106, 106, 146, 102, 100, 81, 89, 160, 98, 148, 25, 81, 6, 66, 73, 106, 153, 146, 84, 84, 106, 86, 24, 170},
    {133, 32, 144, 128, 134, 136, 165, 82, 133, 149, 152, 106, 6, 154, 21, 26, 24, 18, 149, 166, 20, 129, 152, 16, 10, 4, 106, 21, 86, 98, 81, 84, 105, 34, 1, 4, 161, 149, 100, 162, 105, 166, 25, 98, 149, 148, 98, 9, 128, 72, 132, 88, 134, 9, 102, 136, 66, 17, 132, 130, 5, 98, 86, 168, 0, 25, 64, 73, 136, 21, 68, 64, 138, 106, 17, 5, 102, 66, 70, 70, 32, 4, 9, 73, 105, 9, 132, 86, 86, 169, 146, 96, 90, 64, 150, 164, 9, 86, 128, 150, 82, 133, 84, 137, 104, 150, 90, 89, 164, 84, 169, 90, 66, 168, 21, 154, 22, 90, 165, 154, 88, 165, 148, 130, 89, 38, 130, 9, 22, 88, 33, 145, 154, 26, 74, 150, 102, 37, 145, 165, 152, 165, 72, 138, 106, 100, 133, 160, 34, 89, 152, 153, 20, 134, 102, 96, 33, 146, 42, 133, 150, 164, 24, 73, 133, 98, 40, 129, 161, 146, 101, 0, 80, 2, 9, 86, 85, 165, 106, 5, 38, 98, 138, 17, 97, 101, 152, 34, 68, 69, 106, 130, 146, 20, 65, 2, 1, 17, 80, 81, 8, 100, 21, 4, 85, 10, 97, 148, 146, 153, 145, 97, 42, 86, 96, 130, 74, 88, 72, 36, 66, 136, 89, 25, 16, 66, 144, 128, 25, 20, 9, 37, 6, 18, 162, 132, 96, 82, 82, 102, 164, 133, 37, 2, 33, 154, 128, 88, 154, 101, 134, 81, 160, 102, 8, 84, 2, 97, 84, 132, 18, 4, 34, 17, 148, 168, 37, 10, 162, 97, 128, 4, 154, 152, 17, 20, 17, 102, 81, 36, 1, 153, 21, 8, 149, 106, 8, 144, 74, 17, 164, 105, 146, 133, 100, 74, 84, 40, 8, 134, 145, 138, 21, 8, 81, 132, 101, 162, 152, 162, 9, 82, 41, 8, 168, 65, 104, 133, 134, 105, 37, 10, 85, 42, 133, 170, 86, 85, 32, 146, 129, 66, 86, 138, 102, 38, 4, 74, 17, 133, 25, 145, 168, 128, 168, 144, 137, 36, 81, 166, 0, 16, 106, 144, 16, 22, 33, 24, 150, 10, 32, 89, 161, 2, 70, 165, 0, 169, 81, 101, 102, 105, 146, 129, 41, 101, 38, 150, 153, 149, 89, 133, 101, 100},
    {24, 100, 145, 41, 166, 97, 132, 90, 24, 5, 152, 138, 169, 64, 37, 161, 88, 69, 90, 133, 84, 134, 146, 90, 26, 146, 166, 105, 17, 81, 105, 25, 102, 148, 42, 73, 150, 154, 166, 161, 6, 74, 90, 149, 88, 72, 33, 80, 41, 18, 73, 6, 89, 65, 150, 69, 4, 33, 148, 20, 160, 82, 86, 138, 69, 6, 165, 9, 169, 86, 170, 5, 170, 97, 73, 132, 105, 164, 72, 153, 164, 24, 16, 134, 166, 146, 161, 42, 25, 25, 96, 133, 81, 165, 106, 97, 2, 22, 164, 133, 34, 90, 133, 6, 34, 137, 148, 150, 150, 86, 104, 22, 88, 88, 69, 152, 37, 148, 5, 25, 85, 105, 149, 6, 24, 41, 86, 89, 85, 102, 5, 26, 165, 166, 74, 42, 102, 98, 165, 73, 149, 161, 102, 106, 4, 82, 9, 164, 18, 33, 133, 162, 101, 33, 17, 72, 165, 129, 168, 96, 6, 106, 106, 106, 8, 22, 70, 169, 153, 42, 86, 148, 89, 22, 0, 25, 153, 8, 84, 66, 85, 85, 138, 148, 20, 68, 132, 85, 36, 8, 24, 169, 17, 96, 98, 1, 130, 2, 96, 72, 136, 0, 133, 16, 21, 18, 166, 129, 34, 68, 165, 128, 161, 25, 34, 130, 130, 137, 128, 105, 34, 40, 102, 138, 136, 138, 9, 42, 169, 106, 170, 8, 24, 132, 17, 128, 36, 9, 2, 37, 9, 106, 164, 40, 37, 16, 2, 138, 24, 24, 128, 1, 37, 144, 40, 16, 34, 37, 161, 24, 66, 69, 6, 42, 128, 74, 20, 104, 152, 4, 20, 6, 65, 9, 1, 0, 16, 10, 9, 164, 25, 40, 137, 65, 8, 26, 10, 26, 38, 82, 18, 5, 164, 8, 68, 106, 96, 10, 25, 9, 138, 153, 154, 153, 85, 148, 88, 102, 160, 68, 80, 74, 85, 0, 10, 69, 97, 164, 38, 37, 104, 101, 21, 150, 146, 105, 36, 82, 150, 137, 85, 38, 6, 96, 101, 81, 137, 74, 9, 168, 165, 10, 106, 148, 154, 72, 41, 6, 86, 37, 65, 166, 37, 169, 149, 145, 148, 160, 1, 70, 37, 96, 169, 40, 41, 2, 169, 149, 102, 41, 85, 98, 25, 38, 6, 104, 32, 169, 40, 24, 144, 22, 146, 26},
    {148, 0, 70, 88, 146, 17, 106, 96, 150, 36, 102, 146, 148, 8, 150, 105, 88, 153, 16, 2, 130, 149, 101, 41, 65, 42, 105, 22, 106, 81, 74, 21, 101, 9, 2, 68, 69, 68, 65, 162, 90, 16, 170, 106, 152, 166, 74, 150, 144, 96, 132, 101, 66, 65, 97, 136, 162, 149, 153, 106, 152, 64, 40, 145, 32, 102, 82, 100, 89, 169, 17, 89, 73, 42, 88, 136, 34, 10, 86, 80, 25, 69, 102, 22, 5, 101, 146, 34, 86, 134, 96, 145, 100, 86, 164, 41, 148, 73, 9, 168, 69, 153, 40, 24, 18, 152, 130, 145, 34, 102, 161, 37, 96, 96, 66, 37, 102, 134, 96, 160, 137, 169, 90, 34, 33, 42, 97, 9, 98, 105, 169, 133, 137, 86, 86, 42, 149, 90, 104, 145, 128, 161, 106, 68, 105, 105, 145, 128, 96, 32, 130, 22, 169, 128, 37, 100, 69, 170, 64, 86, 170, 21, 106, 85, 26, 137, 74, 168, 9, 42, 169, 85, 32, 152, 6, 106, 134, 86, 86, 166, 86, 1, 8, 170, 41, 22, 105, 97, 149, 152, 89, 10, 169, 2, 36, 101, 0, 152, 129, 0, 152, 64, 9, 105, 130, 16, 6, 137, 72, 6, 132, 0, 41, 128, 68, 25, 33, 16, 146, 144, 4, 42, 82, 144, 128, 130, 133, 32, 26, 144, 0, 17, 74, 24, 2, 97, 25, 170, 40, 25, 33, 152, 96, 168, 148, 64, 144, 150, 64, 81, 73, 130, 10, 1, 42, 80, 41, 20, 96, 160, 32, 37, 97, 8, 16, 8, 16, 146, 64, 18, 8, 8, 73, 33, 5, 6, 98, 96, 0, 145, 162, 100, 38, 17, 160, 146, 0, 100, 0, 16, 89, 100, 106, 153, 132, 105, 66, 97, 98, 81, 26, 18, 42, 104, 144, 24, 4, 21, 18, 41, 168, 32, 129, 90, 168, 20, 144, 37, 136, 85, 89, 41, 10, 64, 154, 128, 101, 149, 74, 164, 6, 64, 102, 102, 17, 160, 64, 66, 150, 148, 153, 149, 84, 90, 64, 165, 160, 64, 165, 148, 65, 136, 22, 89, 137, 68, 42, 154, 146, 169, 137, 150, 85, 40, 161, 152, 97, 2, 26, 96, 98, 97, 9, 145, 16, 136, 145, 154, 165, 37, 154, 170, 130, 154},
    {129, 22, 2, 17, 4, 69, 145, 164, 128, 148, 2, 96, 149, 20, 150, 32, 26, 90, 88, 169, 133, 154, 25, 34, 144, 162, 145, 66, 18, 86, 129, 149, 132, 24, 101, 102, 98, 105, 149, 26, 42, 25, 170, 4, 105, 37, 164, 81, 133, 98, 17, 82, 2, 90, 38, 149, 22, 153, 8, 144, 8, 90, 32, 145, 100, 89, 73, 154, 166, 25, 86, 26, 34, 24, 41, 168, 18, 168, 25, 34, 90, 64, 72, 65, 81, 8, 161, 88, 148, 21, 65, 148, 84, 102, 21, 104, 17, 106, 100, 97, 38, 21, 0, 169, 1, 161, 0, 133, 105, 85, 89, 21, 81, 6, 145, 136, 88, 66, 137, 106, 128, 22, 152, 26, 64, 153, 85, 154, 128, 42, 149, 165, 161, 88, 66, 153, 85, 73, 161, 145, 149, 129, 26, 102, 98, 100, 128, 129, 1, 17, 33, 88, 146, 166, 104, 106, 106, 1, 21, 102, 10, 69, 105, 86, 90, 129, 86, 26, 150, 97, 153, 145, 74, 41, 149, 88, 152, 153, 33, 166, 68, 74, 80, 137, 153, 138, 136, 137, 24, 64, 4, 169, 32, 98, 170, 66, 0, 137, 68, 136, 1, 42, 128, 68, 144, 17, 137, 17, 32, 154, 25, 5, 68, 136, 38, 74, 32, 88, 80, 22, 4, 20, 104, 129, 104, 80, 2, 96, 1, 34, 32, 128, 148, 8, 16, 149, 100, 144, 1, 104, 37, 5, 36, 17, 16, 154, 145, 152, 40, 150, 5, 1, 104, 146, 0, 16, 0, 10, 134, 40, 40, 70, 90, 104, 72, 68, 88, 69, 70, 170, 80, 0, 21, 2, 2, 0, 9, 2, 16, 161, 148, 96, 65, 66, 4, 18, 144, 145, 104, 9, 0, 6, 130, 37, 65, 0, 4, 106, 20, 96, 26, 21, 144, 42, 165, 41, 160, 72, 162, 168, 148, 162, 137, 149, 97, 164, 104, 128, 169, 149, 149, 104, 169, 41, 169, 133, 25, 166, 5, 129, 138, 166, 97, 170, 101, 18, 149, 26, 84, 98, 153, 134, 2, 37, 160, 26, 160, 86, 6, 106, 41, 134, 105, 21, 16, 6, 6, 22, 168, 33, 97, 86, 170, 34, 168, 149, 86, 73, 98, 66, 85, 98, 101, 37, 146, 105, 102, 70, 40, 4, 146, 73, 96, 20},
    {25, 22, 24, 146, 10, 10, 170, 136, 145, 6, 170, 89, 26, 162, 18, 165, 150, 37, 170, 169, 17, 80, 90, 134, 166, 8, 161, 69, 74, 146, 128, 73, 17, 170, 82, 102, 41, 33, 84, 16, 150, 33, 149, 162, 153, 88, 6, 22, 16, 32, 6, 42, 80, 146, 64, 24, 0, 138, 66, 37, 85, 146, 25, 4, 69, 145, 146, 96, 5, 144, 73, 138, 10, 88, 165, 134, 144, 153, 134, 134, 165, 85, 5, 168, 69, 9, 73, 161, 70, 42, 38, 154, 70, 86, 154, 170, 154, 2, 41, 100, 138, 72, 38, 33, 8, 130, 88, 25, 10, 26, 5, 25, 153, 98, 73, 150, 96, 152, 21, 164, 10, 164, 105, 96, 69, 26, 138, 164, 36, 10, 90, 152, 42, 160, 148, 88, 34, 36, 86, 17, 16, 22, 166, 106, 42, 165, 65, 73, 106, 86, 128, 80, 42, 102, 9, 146, 129, 153, 136, 66, 166, 166, 5, 149, 100, 101, 25, 37, 85, 22, 149, 69, 153, 152, 72, 24, 148, 154, 20, 34, 22, 98, 84, 152, 168, 149, 98, 105, 133, 68, 5, 101, 81, 164, 96, 162, 130, 152, 65, 64, 90, 2, 32, 32, 160, 26, 74, 17, 97, 144, 81, 66, 8, 65, 100, 8, 64, 20, 24, 132, 42, 24, 64, 98, 64, 154, 17, 2, 4, 162, 144, 149, 148, 41, 65, 41, 104, 18, 169, 4, 97, 36, 166, 88, 22, 136, 65, 24, 65, 164, 1, 89, 96, 8, 132, 154, 136, 166, 16, 64, 149, 0, 66, 37, 4, 4, 162, 132, 98, 0, 138, 130, 84, 21, 16, 34, 70, 144, 149, 40, 148, 20, 145, 90, 133, 149, 165, 149, 160, 64, 161, 106, 42, 100, 74, 18, 128, 166, 65, 84, 105, 165, 89, 138, 64, 81, 133, 153, 84, 96, 85, 38, 100, 96, 149, 82, 89, 0, 138, 36, 136, 130, 106, 100, 102, 90, 69, 72, 162, 69, 81, 33, 26, 24, 2, 168, 168, 150, 38, 128, 105, 74, 146, 169, 133, 138, 81, 89, 33, 164, 165, 85, 154, 98, 38, 20, 90, 25, 160, 137, 36, 169, 164, 20, 88, 90, 134, 150, 5, 105, 40, 166, 5, 100, 72, 89, 72, 129, 97, 5, 73, 98, 130, 85},
    {82, 138, 164, 18, 42, 74, 82, 82, 20, 82, 145, 17, 74, 18, 88, 137, 161, 73, 38, 85, 26, 85, 42, 41, 133, 106, 162, 16, 128, 21, 86, 146, 165, 40, 101, 133, 82, 170, 70, 65, 104, 144, 16, 85, 170, 42, 105, 161, 90, 165, 80, 161, 32, 129, 42, 90, 168, 9, 80, 160, 136, 133, 82, 40, 26, 132, 104, 137, 38, 168, 74, 32, 66, 34, 97, 73, 10, 86, 145, 90, 134, 133, 165, 166, 165, 164, 42, 145, 68, 166, 164, 72, 133, 8, 169, 37, 40, 98, 16, 132, 101, 102, 133, 20, 137, 89, 154, 138, 97, 105, 102, 102, 165, 0, 17, 170, 162, 104, 88, 150, 148, 5, 25, 105, 84, 153, 85, 42, 86, 21, 25, 90, 6, 26, 98, 133, 133, 9, 41, 24, 90, 33, 33, 74, 153, 6, 66, 90, 20, 97, 32, 90, 146, 165, 134, 97, 96, 4, 73, 36, 1, 128, 105, 41, 105, 150, 144, 138, 73, 73, 101, 100, 84, 21, 70, 170, 34, 89, 81, 148, 160, 134, 21, 89, 106, 132, 128, 73, 37, 68, 169, 81, 18, 168, 72, 132, 32, 72, 130, 72, 24, 73, 18, 2, 2, 64, 82, 6, 25, 137, 154, 32, 136, 90, 5, 16, 2, 18, 25, 8, 138, 128, 8, 8, 0, 152, 65, 133, 90, 88, 73, 9, 105, 16, 1, 72, 38, 25, 128, 134, 134, 32, 33, 130, 6, 18, 154, 88, 65, 97, 4, 98, 1, 68, 138, 84, 10, 130, 40, 5, 0, 100, 148, 130, 150, 37, 148, 136, 37, 129, 6, 16, 69, 97, 10, 161, 129, 65, 72, 70, 89, 2, 8, 34, 25, 1, 73, 73, 33, 150, 86, 100, 145, 100, 169, 133, 34, 97, 149, 162, 74, 137, 26, 166, 70, 100, 154, 169, 82, 8, 73, 102, 106, 26, 90, 82, 90, 21, 38, 1, 32, 161, 104, 146, 90, 24, 138, 26, 137, 149, 82, 40, 153, 160, 166, 136, 133, 169, 82, 161, 70, 85, 33, 36, 34, 153, 74, 133, 4, 88, 133, 86, 5, 101, 138, 161, 164, 104, 81, 132, 86, 0, 85, 138, 84, 38, 8, 38, 129, 149, 134, 162, 42, 20, 90, 146, 144, 132, 72, 162, 90, 168, 136, 26},
    {68, 100, 144, 65, 165, 64, 32, 86, 81, 169, 148, 105, 6, 150, 36, 162, 2, 17, 166, 104, 36, 97, 5, 25, 21, 134, 170, 2, 1, 73, 166, 69, 26, 41, 129, 90, 128, 162, 129, 150, 164, 90, 129, 97, 24, 170, 161, 65, 100, 40, 6, 128, 22, 82, 33, 34, 17, 162, 148, 21, 161, 5, 37, 166, 82, 16, 82, 90, 102, 17, 80, 65, 21, 37, 170, 69, 96, 169, 129, 68, 85, 90, 149, 162, 154, 153, 36, 66, 137, 162, 17, 74, 137, 164, 40, 90, 128, 148, 21, 69, 130, 101, 24, 21, 129, 165, 104, 85, 165, 153, 25, 21, 165, 138, 105, 2, 97, 2, 33, 74, 138, 153, 148, 153, 138, 41, 73, 36, 98, 154, 129, 38, 102, 169, 100, 168, 37, 64, 164, 164, 6, 69, 154, 90, 150, 149, 106, 82, 18, 85, 102, 86, 85, 66, 5, 2, 89, 66, 85, 74, 146, 154, 70, 146, 72, 152, 146, 165, 170, 73, 146, 168, 97, 104, 26, 134, 98, 96, 98, 89, 86, 74, 68, 101, 97, 153, 165, 66, 153, 21, 80, 37, 168, 136, 153, 88, 32, 0, 0, 64, 6, 64, 32, 4, 37, 70, 16, 146, 128, 5, 161, 22, 72, 32, 16, 66, 80, 2, 137, 32, 40, 86, 150, 150, 18, 84, 40, 145, 6, 20, 18, 133, 5, 0, 73, 129, 98, 16, 128, 74, 32, 0, 4, 33, 8, 97, 32, 33, 0, 101, 66, 8, 18, 65, 162, 97, 1, 6, 0, 74, 137, 162, 64, 128, 164, 86, 64, 130, 0, 16, 40, 0, 2, 128, 100, 168, 34, 1, 130, 5, 132, 10, 138, 96, 144, 20, 145, 129, 25, 21, 65, 168, 72, 41, 138, 1, 18, 85, 80, 128, 33, 168, 152, 41, 166, 102, 106, 22, 105, 138, 38, 0, 16, 9, 69, 73, 85, 42, 148, 26, 36, 98, 150, 22, 138, 70, 90, 22, 72, 134, 37, 90, 20, 89, 165, 129, 20, 152, 160, 138, 69, 4, 16, 33, 164, 136, 101, 106, 96, 38, 100, 133, 85, 137, 1, 130, 65, 0, 100, 146, 17, 85, 153, 88, 2, 165, 90, 42, 150, 9, 169, 144, 104, 134, 21, 37, 152, 41, 0, 169, 26, 164, 170, 0},
    {138, 20, 10, 68, 20, 80, 150, 162, 165, 4, 153, 170, 70, 102, 160, 169, 85, 9, 4, 148, 146, 162, 26, 154, 81, 134, 40, 85, 165, 166, 18, 168, 164, 25, 72, 169, 161, 148, 134, 102, 106, 102, 8, 106, 86, 138, 168, 136, 82, 33, 6, 5, 96, 85, 128, 70, 104, 138, 148, 69, 136, 72, 34, 90, 68, 82, 0, 101, 98, 153, 166, 41, 102, 22, 40, 154, 38, 1, 96, 106, 24, 168, 37, 85, 86, 133, 134, 145, 17, 89, 9, 86, 153, 18, 85, 129, 100, 104, 168, 168, 9, 85, 152, 98, 105, 164, 166, 85, 81, 84, 129, 162, 101, 72, 89, 134, 149, 130, 165, 102, 89, 161, 162, 144, 66, 153, 100, 153, 81, 166, 102, 102, 98, 165, 100, 34, 166, 82, 153, 6, 170, 90, 25, 22, 104, 136, 69, 164, 153, 25, 162, 154, 136, 40, 9, 84, 137, 86, 152, 164, 166, 6, 153, 90, 170, 101, 130, 25, 6, 150, 153, 129, 161, 22, 72, 97, 166, 166, 34, 148, 37, 154, 10, 166, 26, 145, 153, 81, 81, 16, 129, 136, 42, 1, 4, 17, 21, 2, 161, 70, 0, 81, 160, 1, 137, 70, 2, 32, 69, 65, 166, 88, 129, 130, 16, 1, 129, 42, 165, 138, 4, 2, 68, 134, 129, 34, 5, 137, 162, 36, 4, 36, 16, 18, 25, 66, 10, 32, 40, 9, 96, 145, 9, 162, 40, 6, 34, 128, 134, 64, 40, 170, 25, 102, 128, 38, 36, 129, 1, 9, 1, 74, 21, 1, 89, 145, 1, 168, 22, 24, 66, 144, 1, 5, 161, 145, 1, 9, 100, 170, 0, 1, 101, 5, 41, 106, 69, 1, 41, 10, 38, 72, 38, 160, 148, 153, 5, 169, 154, 144, 130, 86, 166, 65, 146, 150, 21, 101, 68, 165, 161, 165, 148, 84, 137, 38, 26, 162, 154, 85, 24, 5, 22, 152, 154, 97, 97, 22, 165, 72, 134, 105, 145, 89, 137, 138, 16, 85, 22, 68, 42, 0, 16, 41, 10, 148, 34, 68, 166, 138, 162, 170, 70, 166, 152, 169, 148, 166, 40, 89, 70, 166, 69, 165, 105, 136, 97, 32, 152, 36, 89, 149, 86, 8, 153, 34, 42, 152, 26, 148, 161, 70, 133, 98},
    {65, 38, 41, 102, 36, 100, 100, 36, 1, 36, 100, 41, 0, 21, 160, 97, 148, 161, 37, 105, 100, 137, 66, 36, 37, 41, 88, 106, 40, 37, 160, 133, 97, 144, 10, 1, 97, 89, 97, 82, 26, 129, 86, 134, 80, 137, 154, 148, 36, 144, 105, 24, 128, 162, 85, 132, 153, 34, 97, 96, 89, 138, 97, 0, 85, 85, 37, 154, 144, 98, 168, 130, 136, 85, 90, 38, 16, 164, 168, 34, 97, 90, 153, 148, 138, 25, 137, 149, 86, 84, 37, 166, 90, 130, 5, 10, 102, 68, 26, 153, 10, 161, 16, 85, 153, 89, 145, 82, 144, 152, 146, 132, 137, 69, 37, 42, 138, 36, 40, 25, 38, 20, 134, 65, 168, 84, 149, 170, 5, 137, 164, 161, 18, 106, 106, 34, 137, 104, 6, 166, 8, 145, 98, 88, 66, 73, 6, 66, 25, 150, 129, 166, 146, 22, 40, 81, 42, 153, 34, 18, 132, 90, 136, 81, 154, 165, 21, 17, 161, 65, 133, 41, 165, 162, 81, 33, 26, 70, 70, 146, 149, 130, 161, 105, 104, 85, 42, 4, 105, 41, 168, 32, 169, 64, 32, 10, 16, 16, 64, 32, 130, 18, 40, 33, 6, 65, 6, 0, 6, 80, 9, 4, 132, 33, 10, 152, 70, 129, 152, 134, 9, 164, 128, 9, 0, 5, 0, 16, 8, 0, 146, 88, 6, 5, 40, 128, 85, 42, 4, 20, 138, 16, 20, 96, 32, 32, 33, 33, 16, 20, 0, 104, 144, 4, 9, 68, 32, 4, 162, 32, 38, 146, 5, 41, 0, 24, 81, 18, 170, 84, 144, 9, 6, 2, 36, 2, 82, 18, 2, 85, 0, 16, 34, 8, 130, 32, 130, 2, 90, 8, 68, 154, 36, 133, 89, 33, 22, 154, 17, 73, 68, 149, 6, 138, 65, 166, 96, 133, 0, 101, 145, 153, 38, 72, 32, 165, 104, 148, 17, 70, 102, 89, 169, 168, 168, 42, 166, 104, 165, 89, 72, 2, 34, 64, 68, 69, 138, 154, 17, 88, 145, 102, 6, 136, 65, 154, 164, 145, 22, 69, 84, 153, 42, 66, 128, 162, 84, 101, 98, 162, 22, 105, 98, 17, 84, 9, 168, 137, 74, 72, 154, 18, 69, 98, 100, 21, 85, 65, 170, 149, 38, 129, 97, 136},
    {16, 69, 8, 96, 104, 128, 161, 42, 129, 41, 16, 162, 21, 90, 10, 106, 138, 168, 166, 146, 33, 26, 161, 162, 134, 84, 148, 162, 4, 32, 106, 138, 6, 20, 34, 98, 104, 21, 70, 40, 138, 9, 168, 37, 10, 9, 105, 106, 1, 148, 136, 0, 32, 144, 21, 38, 97, 32, 64, 165, 86, 169, 170, 8, 85, 0, 32, 133, 97, 86, 70, 1, 105, 40, 162, 82, 5, 4, 101, 22, 161, 38, 2, 129, 21, 22, 9, 85, 168, 153, 150, 80, 22, 161, 5, 42, 73, 133, 149, 145, 134, 34, 154, 34, 64, 104, 164, 104, 154, 149, 40, 96, 86, 166, 170, 132, 168, 105, 22, 137, 164, 26, 102, 170, 168, 88, 150, 145, 73, 166, 106, 96, 101, 164, 18, 6, 66, 149, 105, 106, 168, 10, 10, 133, 149, 17, 104, 84, 20, 102, 105, 102, 4, 137, 134, 72, 145, 105, 164, 86, 170, 128, 20, 66, 101, 40, 73, 90, 136, 150, 106, 82, 97, 169, 40, 105, 41, 9, 41, 25, 1, 5, 42, 168, 153, 85, 145, 153, 170, 42, 2, 154, 9, 0, 65, 4, 17, 4, 169, 170, 128, 2, 21, 80, 16, 24, 41, 1, 21, 132, 41, 170, 26, 2, 97, 18, 89, 41, 0, 160, 72, 169, 169, 42, 25, 20, 36, 65, 10, 74, 130, 64, 86, 165, 105, 16, 148, 65, 22, 16, 37, 81, 80, 41, 32, 2, 16, 8, 100, 65, 86, 64, 154, 74, 170, 16, 8, 4, 154, 129, 2, 38, 0, 4, 129, 32, 89, 136, 100, 133, 5, 90, 40, 160, 16, 148, 144, 100, 96, 10, 162, 18, 74, 161, 97, 2, 68, 68, 150, 69, 18, 20, 41, 25, 134, 5, 65, 22, 105, 69, 36, 24, 24, 86, 153, 169, 21, 25, 165, 165, 41, 100, 38, 81, 100, 104, 9, 90, 33, 134, 17, 153, 97, 4, 170, 88, 150, 17, 22, 137, 106, 66, 65, 128, 42, 102, 132, 130, 88, 6, 38, 128, 22, 137, 128, 146, 1, 1, 101, 85, 136, 34, 100, 69, 106, 150, 69, 162, 88, 154, 150, 66, 70, 85, 166, 153, 144, 82, 133, 88, 164, 164, 145, 136, 41, 41, 37, 88, 42, 129, 150, 84, 145, 162},
    {102, 88, 4, 90, 10, 34, 106, 74, 26, 134, 149, 134, 6, 148, 10, 161, 21, 98, 42, 98, 164, 10, 137, 136, 81, 84, 41, 149, 89, 166, 106, 22, 80, 89, 170, 104, 9, 9, 101, 165, 101, 89, 154, 18, 149, 26, 34, 21, 10, 145, 70, 153, 21, 20, 80, 21, 70, 70, 129, 153, 145, 88, 5, 18, 133, 170, 132, 154, 164, 65, 106, 38, 66, 34, 154, 41, 4, 41, 26, 22, 72, 74, 166, 89, 85, 81, 22, 132, 154, 145, 8, 98, 134, 153, 154, 89, 24, 149, 36, 36, 145, 34, 40, 70, 41, 89, 9, 25, 20, 165, 102, 102, 33, 24, 88, 8, 100, 105, 146, 152, 10, 81, 168, 105, 132, 25, 148, 41, 32, 150, 21, 0, 25, 170, 1, 169, 105, 40, 153, 70, 137, 149, 40, 89, 165, 165, 104, 70, 149, 74, 37, 162, 73, 68, 89, 134, 148, 129, 144, 98, 104, 81, 170, 101, 166, 70, 1, 98, 169, 1, 22, 132, 98, 69, 101, 68, 81, 22, 64, 145, 133, 40, 22, 97, 134, 1, 88, 145, 10, 106, 137, 170, 70, 73, 129, 40, 96, 6, 136, 149, 4, 132, 41, 161, 73, 134, 68, 144, 2, 68, 96, 148, 153, 33, 66, 136, 40, 148, 26, 64, 74, 165, 0, 128, 5, 148, 128, 64, 20, 133, 146, 146, 81, 145, 36, 26, 73, 6, 137, 9, 41, 33, 169, 2, 16, 136, 98, 16, 64, 80, 41, 32, 104, 148, 65, 133, 161, 106, 36, 128, 152, 80, 32, 34, 37, 64, 32, 8, 165, 102, 1, 152, 132, 153, 40, 137, 0, 4, 146, 65, 26, 169, 6, 1, 73, 81, 74, 160, 153, 38, 36, 164, 73, 105, 18, 9, 154, 132, 97, 82, 169, 152, 170, 41, 106, 90, 38, 18, 72, 74, 21, 22, 134, 150, 32, 149, 96, 74, 104, 34, 165, 138, 64, 105, 170, 100, 69, 33, 128, 146, 106, 84, 137, 146, 88, 38, 164, 160, 166, 18, 106, 40, 24, 17, 17, 152, 168, 153, 105, 169, 81, 98, 148, 38, 73, 25, 36, 32, 80, 98, 162, 70, 25, 38, 38, 88, 89, 72, 86, 100, 80, 4, 100, 2, 1, 84, 81, 26, 41, 72, 72, 136, 5, 86},
    {20, 90, 36, 6, 16, 16, 18, 81, 25, 18, 73, 144, 146, 165, 10, 36, 36, 80, 154, 10, 130, 161, 85, 152, 166, 16, 68, 170, 154, 166, 68, 144, 154, 65, 136, 154, 70, 34, 4, 65, 154, 153, 1, 8, 85, 136, 166, 21, 18, 36, 80, 162, 41, 105, 32, 84, 160, 90, 101, 41, 64, 1, 65, 73, 36, 153, 80, 164, 137, 136, 16, 169, 101, 37, 17, 153, 86, 6, 16, 129, 106, 22, 2, 145, 1, 137, 33, 32, 150, 65, 170, 73, 145, 152, 85, 90, 104, 133, 150, 148, 68, 86, 70, 64, 154, 102, 81, 70, 168, 21, 37, 68, 160, 160, 26, 66, 170, 86, 33, 21, 20, 22, 136, 102, 89, 34, 85, 36, 42, 41, 4, 32, 32, 168, 102, 133, 22, 96, 36, 66, 20, 68, 153, 170, 132, 22, 90, 128, 133, 40, 2, 168, 170, 168, 162, 165, 152, 101, 69, 81, 88, 4, 4, 42, 97, 88, 102, 98, 40, 153, 9, 84, 89, 149, 130, 164, 137, 37, 101, 17, 5, 164, 132, 73, 69, 153, 88, 37, 84, 88, 72, 21, 96, 129, 136, 132, 17, 80, 170, 132, 88, 64, 9, 164, 1, 88, 154, 69, 16, 33, 32, 130, 148, 129, 0, 70, 2, 70, 104, 1, 25, 97, 34, 106, 20, 81, 25, 88, 74, 89, 81, 70, 104, 138, 8, 105, 148, 97, 1, 146, 138, 146, 150, 104, 128, 1, 20, 136, 2, 162, 68, 152, 150, 129, 68, 73, 136, 17, 17, 4, 100, 8, 162, 8, 6, 160, 128, 38, 136, 80, 68, 41, 0, 69, 17, 33, 161, 96, 41, 8, 97, 146, 1, 2, 1, 0, 69, 64, 145, 25, 150, 166, 134, 82, 160, 6, 137, 64, 96, 169, 81, 165, 144, 166, 17, 164, 42, 128, 166, 100, 162, 149, 134, 38, 153, 85, 97, 20, 100, 105, 25, 164, 38, 9, 102, 144, 154, 82, 166, 160, 5, 146, 6, 162, 97, 100, 36, 168, 81, 68, 20, 90, 137, 148, 0, 90, 146, 18, 104, 42, 165, 105, 106, 166, 17, 144, 26, 10, 153, 169, 134, 22, 137, 138, 106, 152, 154, 166, 162, 149, 89, 161, 66, 160, 21, 74, 165, 153, 42, 10, 16, 105, 33, 36},
    {6, 149, 32, 128, 144, 22, 68, 16, 82, 72, 33, 102, 136, 84, 96, 162, 32, 22, 85, 152, 130, 64, 128, 4, 105, 82, 146, 73, 0, 149, 72, 138, 81, 73, 33, 106, 10, 41, 21, 18, 101, 149, 1, 69, 38, 166, 162, 102, 150, 41, 22, 161, 41, 41, 5, 160, 65, 149, 150, 26, 146, 105, 146, 150, 149, 72, 72, 161, 106, 84, 18, 64, 96, 81, 73, 150, 89, 129, 106, 88, 1, 0, 65, 97, 1, 9, 42, 16, 98, 98, 105, 148, 104, 72, 32, 132, 161, 73, 84, 85, 73, 134, 33, 166, 1, 42, 2, 138, 69, 132, 6, 148, 68, 164, 166, 138, 133, 138, 33, 73, 128, 73, 152, 104, 165, 82, 97, 104, 170, 106, 90, 150, 20, 90, 169, 145, 81, 98, 137, 150, 66, 149, 69, 86, 72, 68, 144, 146, 69, 148, 73, 144, 22, 69, 82, 98, 162, 133, 166, 149, 33, 24, 161, 130, 133, 66, 170, 150, 169, 162, 64, 20, 98, 81, 34, 166, 146, 146, 166, 25, 105, 89, 98, 137, 138, 85, 32, 102, 102, 134, 32, 149, 166, 80, 161, 65, 68, 134, 152, 81, 134, 101, 25, 9, 130, 10, 0, 17, 8, 68, 130, 133, 33, 146, 37, 40, 162, 96, 136, 9, 38, 129, 128, 137, 96, 9, 6, 32, 144, 4, 1, 97, 10, 160, 10, 10, 65, 138, 137, 65, 128, 6, 81, 130, 148, 0, 166, 132, 98, 97, 24, 130, 96, 64, 164, 24, 129, 128, 69, 104, 4, 68, 98, 137, 42, 36, 88, 134, 80, 37, 84, 145, 150, 8, 64, 1, 1, 42, 129, 84, 162, 65, 73, 69, 2, 138, 10, 34, 41, 136, 89, 4, 144, 16, 69, 138, 161, 36, 137, 97, 132, 88, 168, 80, 90, 42, 20, 40, 100, 36, 145, 149, 69, 165, 144, 22, 97, 86, 168, 170, 89, 129, 26, 153, 144, 89, 32, 149, 74, 137, 130, 133, 100, 33, 10, 90, 32, 169, 97, 20, 85, 2, 37, 73, 136, 101, 136, 37, 170, 18, 8, 132, 32, 16, 102, 88, 101, 10, 64, 134, 32, 154, 100, 25, 130, 90, 18, 154, 41, 90, 68, 105, 144, 16, 146, 166, 101, 133, 154, 9, 85, 102, 82, 8},
    {25, 100, 24, 161, 17, 17, 84, 97, 168, 138, 97, 8, 165, 149, 153, 72, 97, 162, 9, 36, 145, 18, 90, 70, 84, 149, 105, 1, 165, 98, 128, 85, 37, 96, 154, 68, 134, 88, 128, 42, 80, 166, 10, 2, 153, 166, 105, 150, 8, 164, 152, 69, 162, 5, 85, 128, 170, 32, 85, 129, 64, 160, 74, 90, 21, 65, 0, 168, 138, 81, 137, 149, 66, 164, 170, 69, 132, 69, 80, 138, 81, 166, 86, 5, 72, 129, 137, 42, 10, 102, 132, 89, 98, 70, 5, 169, 169, 106, 72, 146, 40, 8, 160, 150, 88, 146, 38, 6, 132, 168, 144, 42, 104, 97, 38, 86, 105, 164, 162, 42, 152, 170, 166, 166, 86, 22, 104, 10, 106, 89, 6, 70, 88, 25, 165, 1, 169, 170, 22, 144, 154, 161, 82, 144, 40, 72, 97, 5, 65, 153, 134, 149, 69, 160, 69, 105, 138, 166, 144, 165, 133, 84, 106, 105, 166, 164, 100, 153, 161, 130, 145, 133, 170, 33, 101, 153, 0, 150, 34, 22, 6, 2, 145, 166, 149, 130, 106, 152, 24, 82, 105, 168, 154, 2, 168, 68, 64, 136, 2, 5, 134, 0, 170, 6, 2, 0, 168, 134, 66, 25, 0, 162, 36, 102, 4, 97, 8, 21, 73, 21, 84, 134, 154, 149, 4, 66, 36, 2, 21, 73, 0, 154, 6, 0, 10, 74, 1, 2, 66, 17, 82, 0, 66, 146, 129, 0, 130, 128, 74, 69, 66, 136, 6, 33, 169, 2, 160, 138, 169, 36, 85, 16, 98, 41, 86, 65, 80, 149, 34, 132, 97, 33, 164, 128, 5, 132, 134, 16, 146, 9, 160, 153, 144, 149, 22, 0, 10, 10, 100, 88, 4, 130, 8, 132, 106, 24, 169, 66, 86, 133, 21, 34, 25, 65, 26, 152, 165, 134, 152, 37, 146, 33, 88, 136, 101, 128, 144, 132, 89, 105, 153, 105, 153, 2, 25, 137, 137, 70, 85, 69, 146, 70, 106, 137, 161, 165, 1, 38, 81, 33, 2, 96, 101, 25, 129, 165, 106, 100, 96, 42, 80, 22, 73, 26, 170, 134, 85, 18, 104, 146, 137, 148, 129, 86, 21, 17, 150, 105, 88, 154, 69, 38, 74, 1, 9, 26, 100, 165, 169, 65, 150, 82, 10, 104},
    {86, 32, 1, 6, 33, 2, 37, 70, 21, 100, 145, 22, 20, 25, 6, 42, 90, 86, 6, 161, 16, 146, 1, 16, 24, 18, 73, 154, 134, 37, 166, 138, 37, 137, 2, 32, 68, 69, 128, 101, 6, 82, 69, 165, 154, 152, 105, 84, 150, 41, 6, 9, 81, 152, 89, 70, 1, 102, 102, 168, 136, 20, 80, 40, 66, 96, 37, 152, 8, 10, 38, 42, 105, 5, 100, 97, 64, 160, 9, 25, 169, 90, 81, 105, 168, 33, 16, 132, 102, 164, 69, 161, 170, 8, 129, 170, 22, 170, 101, 101, 161, 166, 161, 36, 169, 70, 129, 4, 129, 40, 64, 72, 89, 89, 137, 146, 17, 153, 85, 169, 161, 105, 160, 106, 90, 42, 90, 130, 138, 25, 16, 82, 41, 37, 69, 161, 100, 22, 169, 82, 102, 90, 161, 164, 105, 105, 150, 18, 66, 34, 102, 150, 26, 136, 138, 154, 150, 145, 10, 150, 40, 86, 41, 84, 162, 148, 168, 153, 146, 170, 105, 152, 85, 38, 40, 148, 82, 161, 85, 9, 8, 169, 22, 24, 37, 145, 146, 152, 72, 102, 84, 5, 80, 160, 166, 0, 169, 16, 6, 104, 69, 170, 166, 26, 162, 4, 86, 32, 97, 24, 90, 68, 65, 80, 80, 97, 6, 16, 26, 97, 2, 26, 18, 74, 40, 68, 144, 8, 86, 70, 64, 66, 65, 130, 1, 80, 36, 81, 2, 161, 64, 72, 161, 80, 18, 154, 80, 20, 80, 72, 36, 6, 169, 24, 84, 2, 164, 133, 96, 32, 32, 164, 152, 32, 33, 73, 128, 0, 129, 101, 144, 160, 153, 128, 65, 130, 168, 105, 86, 102, 16, 152, 34, 40, 37, 64, 80, 17, 97, 154, 5, 1, 97, 6, 154, 170, 25, 129, 129, 25, 134, 97, 21, 104, 37, 22, 84, 40, 130, 32, 25, 37, 133, 165, 165, 129, 102, 130, 132, 104, 138, 170, 70, 41, 165, 152, 134, 70, 129, 100, 129, 33, 154, 72, 154, 90, 97, 8, 148, 1, 37, 36, 42, 33, 85, 97, 69, 41, 9, 129, 132, 102, 16, 24, 150, 41, 128, 90, 153, 169, 38, 22, 169, 148, 70, 88, 165, 41, 105, 38, 161, 41, 169, 80, 150, 90, 129, 36, 74, 26, 84, 160, 41, 69},
    {89, 106, 41, 38, 32, 32, 165, 8, 70, 37, 165, 98, 72, 37, 65, 90, 129, 106, 100, 37, 97, 90, 81, 169, 22, 148, 18, 129, 81, 38, 165, 6, 20, 130, 88, 134, 4, 10, 106, 160, 72, 66, 10, 21, 8, 148, 20, 70, 105, 154, 97, 138, 17, 69, 70, 9, 26, 17, 137, 38, 10, 40, 136, 38, 9, 96, 104, 88, 169, 130, 145, 68, 133, 8, 144, 170, 105, 89, 153, 129, 164, 22, 138, 38, 2, 154, 88, 24, 146, 133, 21, 132, 22, 37, 162, 37, 98, 128, 133, 37, 21, 42, 154, 106, 100, 90, 38, 96, 102, 166, 9, 106, 169, 161, 160, 73, 72, 37, 138, 161, 161, 73, 154, 169, 17, 38, 104, 16, 37, 86, 132, 72, 102, 148, 150, 98, 153, 41, 149, 105, 73, 104, 17, 98, 149, 133, 97, 86, 33, 136, 33, 42, 21, 24, 166, 40, 102, 26, 148, 8, 65, 41, 169, 104, 102, 97, 166, 73, 17, 162, 69, 102, 26, 148, 26, 80, 86, 65, 89, 164, 144, 153, 74, 74, 36, 86, 100, 137, 154, 153, 130, 70, 104, 148, 72, 149, 69, 104, 16, 144, 81, 1, 36, 65, 70, 100, 10, 18, 161, 146, 74, 40, 5, 40, 24, 37, 0, 98, 81, 86, 41, 82, 136, 85, 84, 41, 65, 130, 70, 73, 89, 88, 153, 160, 25, 129, 38, 136, 160, 86, 164, 104, 20, 72, 74, 168, 72, 2, 128, 22, 129, 106, 132, 138, 90, 33, 81, 96, 17, 32, 8, 130, 166, 64, 168, 18, 97, 69, 165, 104, 0, 129, 33, 133, 81, 129, 162, 17, 88, 96, 136, 5, 80, 84, 128, 41, 152, 136, 144, 170, 25, 70, 169, 102, 160, 128, 148, 145, 161, 170, 169, 146, 85, 37, 4, 105, 65, 161, 82, 129, 72, 80, 166, 88, 70, 161, 85, 96, 105, 136, 34, 25, 85, 154, 161, 81, 168, 144, 9, 170, 82, 152, 153, 152, 64, 149, 1, 2, 66, 80, 98, 105, 41, 146, 104, 128, 136, 168, 165, 0, 144, 154, 24, 100, 98, 33, 102, 1, 144, 42, 38, 8, 169, 100, 84, 16, 130, 81, 21, 130, 148, 102, 66, 74, 137, 73, 145, 22, 160, 26, 81, 17, 130, 105},
    {26, 65, 34, 34, 98, 26, 98, 24, 18, 168, 165, 149, 102, 105, 161, 144, 136, 169, 160, 82, 85, 100, 88, 26, 96, 170, 97, 68, 149, 81, 20, 65, 89, 152, 86, 129, 170, 80, 66, 138, 37, 98, 8, 138, 150, 148, 81, 145, 104, 145, 73, 137, 17, 8, 33, 153, 100, 33, 88, 85, 102, 25, 33, 98, 89, 2, 26, 21, 85, 0, 133, 132, 84, 80, 102, 16, 101, 165, 86, 22, 165, 170, 84, 165, 17, 144, 68, 144, 134, 169, 21, 42, 149, 149, 4, 4, 105, 165, 4, 90, 136, 98, 146, 70, 72, 136, 80, 6, 26, 132, 82, 69, 96, 86, 74, 132, 150, 160, 1, 133, 154, 2, 134, 102, 105, 42, 69, 21, 161, 132, 162, 64, 170, 150, 101, 104, 132, 165, 132, 64, 162, 170, 138, 150, 137, 22, 32, 128, 38, 24, 69, 101, 146, 150, 145, 97, 22, 37, 106, 20, 18, 148, 153, 97, 73, 86, 41, 80, 106, 90, 41, 100, 160, 40, 149, 169, 33, 66, 168, 165, 1, 149, 65, 42, 129, 145, 10, 102, 136, 74, 1, 40, 106, 132, 129, 144, 6, 38, 96, 145, 70, 136, 16, 2, 128, 132, 38, 26, 16, 18, 96, 0, 21, 169, 40, 164, 137, 32, 25, 85, 165, 84, 0, 32, 100, 132, 72, 68, 106, 166, 72, 98, 101, 154, 165, 36, 150, 33, 0, 18, 34, 37, 132, 72, 0, 26, 100, 161, 73, 1, 16, 128, 20, 2, 68, 26, 146, 38, 88, 129, 40, 137, 154, 72, 16, 65, 130, 1, 161, 20, 6, 130, 64, 42, 64, 137, 25, 161, 98, 10, 32, 70, 1, 82, 33, 165, 165, 165, 153, 24, 70, 0, 10, 82, 85, 160, 38, 80, 102, 89, 36, 138, 105, 72, 166, 134, 162, 134, 72, 88, 32, 105, 73, 104, 105, 166, 97, 21, 16, 105, 90, 24, 73, 85, 38, 73, 133, 170, 101, 8, 42, 6, 68, 24, 144, 86, 22, 5, 64, 104, 96, 9, 86, 137, 81, 90, 69, 165, 164, 89, 24, 74, 22, 33, 128, 154, 130, 20, 68, 73, 166, 22, 82, 81, 136, 102, 25, 128, 146, 69, 145, 25, 170, 102, 132, 98, 129, 170, 38, 153, 160, 6, 98, 74},
    {73, 6, 20, 154, 129, 152, 152, 65, 36, 161, 134, 164, 102, 24, 24, 148, 132, 137, 21, 154, 5, 2, 165, 100, 70, 70, 160, 6, 137, 65, 70, 4, 102, 73, 6, 165, 6, 101, 101, 146, 102, 22, 73, 162, 84, 144, 149, 162, 64, 32, 69, 22, 2, 18, 64, 18, 88, 166, 164, 170, 5, 102, 137, 101, 85, 149, 66, 42, 82, 72, 32, 96, 36, 34, 164, 32, 36, 137, 74, 146, 74, 102, 104, 152, 20, 1, 97, 1, 36, 36, 150, 136, 166, 64, 153, 80, 85, 80, 169, 26, 73, 8, 90, 106, 148, 85, 36, 22, 98, 18, 80, 170, 160, 84, 104, 84, 9, 134, 86, 86, 105, 26, 22, 16, 84, 166, 160, 10, 82, 152, 162, 68, 24, 65, 161, 74, 153, 146, 148, 6, 69, 165, 150, 153, 22, 66, 33, 168, 166, 154, 134, 134, 26, 169, 150, 65, 26, 149, 82, 153, 145, 22, 26, 164, 88, 161, 36, 86, 133, 9, 10, 102, 42, 33, 154, 85, 102, 101, 74, 34, 132, 82, 32, 102, 100, 170, 98, 162, 170, 42, 41, 101, 98, 32, 64, 148, 137, 42, 81, 6, 2, 64, 81, 64, 105, 130, 129, 100, 68, 34, 161, 130, 5, 73, 17, 66, 4, 6, 152, 73, 1, 65, 88, 18, 164, 18, 73, 164, 16, 128, 64, 166, 68, 90, 170, 6, 0, 0, 101, 20, 68, 168, 128, 96, 160, 104, 160, 8, 0, 100, 84, 0, 148, 34, 40, 96, 4, 73, 102, 69, 86, 72, 1, 20, 128, 8, 1, 17, 5, 20, 1, 133, 138, 1, 96, 69, 130, 36, 162, 104, 42, 148, 164, 17, 160, 40, 9, 2, 1, 169, 24, 22, 37, 161, 105, 130, 0, 21, 85, 145, 32, 86, 128, 152, 137, 102, 74, 68, 86, 90, 69, 72, 133, 89, 128, 100, 5, 105, 10, 82, 164, 84, 101, 145, 130, 132, 97, 22, 146, 169, 146, 98, 81, 9, 138, 146, 81, 4, 129, 164, 144, 138, 72, 134, 149, 4, 89, 65, 133, 33, 72, 153, 90, 137, 98, 102, 152, 86, 5, 152, 42, 36, 138, 152, 168, 132, 101, 89, 89, 148, 137, 128, 136, 82, 70, 42, 85, 86, 69, 129, 106, 36, 0, 37},
    {65, 26, 169, 100, 130, 26, 38, 154, 160, 1, 32, 150, 90, 1, 10, 170, 106, 86, 130, 9, 100, 10, 148, 5, 69, 153, 88, 134, 102, 104, 18, 96, 4, 168, 65, 165, 165, 152, 84, 86, 64, 89, 74, 37, 26, 88, 38, 129, 21, 154, 41, 10, 152, 162, 21, 16, 90, 152, 21, 86, 70, 65, 40, 144, 130, 96, 133, 129, 150, 132, 85, 21, 169, 20, 40, 72, 88, 5, 4, 169, 2, 165, 37, 64, 69, 37, 17, 138, 34, 161, 18, 8, 37, 97, 26, 145, 74, 4, 84, 86, 86, 100, 5, 101, 161, 145, 10, 168, 41, 65, 41, 133, 22, 161, 34, 134, 105, 86, 80, 106, 165, 17, 138, 106, 134, 128, 66, 10, 96, 24, 165, 168, 97, 85, 40, 101, 81, 154, 101, 133, 25, 81, 4, 9, 146, 36, 105, 10, 134, 42, 104, 146, 165, 5, 105, 97, 42, 106, 154, 65, 81, 16, 90, 80, 169, 105, 37, 137, 64, 170, 154, 10, 90, 5, 101, 65, 69, 160, 82, 6, 102, 134, 82, 145, 21, 106, 149, 5, 162, 134, 74, 80, 5, 0, 0, 80, 138, 130, 69, 98, 34, 0, 150, 134, 1, 2, 137, 5, 16, 149, 82, 32, 65, 66, 16, 72, 65, 0, 85, 105, 146, 130, 102, 66, 170, 32, 144, 41, 17, 128, 0, 130, 169, 70, 137, 153, 98, 145, 68, 96, 65, 162, 81, 36, 100, 134, 2, 82, 10, 42, 5, 10, 72, 128, 168, 160, 32, 129, 133, 69, 69, 33, 69, 130, 17, 42, 69, 104, 130, 72, 133, 133, 80, 81, 20, 4, 134, 40, 17, 64, 25, 2, 65, 2, 33, 168, 129, 153, 150, 36, 68, 90, 32, 5, 17, 74, 102, 33, 5, 0, 24, 144, 40, 133, 90, 104, 102, 80, 144, 90, 17, 32, 153, 166, 165, 40, 152, 84, 166, 74, 81, 68, 82, 148, 154, 36, 102, 86, 8, 25, 148, 32, 90, 42, 129, 165, 69, 18, 102, 149, 20, 16, 6, 136, 1, 24, 24, 101, 34, 89, 136, 153, 5, 24, 82, 68, 148, 154, 132, 81, 38, 170, 166, 136, 90, 100, 97, 69, 16, 1, 97, 2, 33, 66, 24, 153, 133, 5, 162, 170, 137, 153, 89, 133},
    {26, 18, 66, 89, 130, 0, 145, 88, 36, 16, 134, 36, 132, 164, 38, 42, 36, 26, 74, 133, 21, 34, 40, 137, 164, 89, 137, 96, 102, 106, 65, 98, 69, 90, 128, 41, 106, 149, 90, 90, 17, 25, 134, 9, 144, 41, 9, 72, 64, 165, 86, 69, 5, 1, 136, 106, 98, 150, 170, 36, 89, 22, 106, 64, 86, 132, 168, 104, 5, 152, 73, 6, 25, 88, 22, 132, 153, 145, 1, 90, 145, 26, 84, 9, 153, 18, 32, 128, 161, 161, 70, 90, 153, 133, 160, 41, 4, 169, 33, 170, 153, 22, 26, 102, 86, 150, 74, 86, 169, 138, 64, 26, 154, 69, 86, 102, 165, 169, 88, 106, 149, 88, 164, 64, 8, 70, 24, 168, 102, 89, 90, 86, 102, 33, 96, 64, 65, 105, 33, 96, 102, 170, 153, 144, 40, 40, 86, 38, 2, 0, 42, 165, 36, 69, 134, 25, 137, 6, 100, 89, 169, 72, 42, 152, 69, 33, 101, 86, 164, 73, 166, 69, 74, 18, 68, 41, 34, 101, 68, 42, 33, 150, 66, 105, 161, 144, 81, 34, 25, 9, 9, 106, 34, 129, 5, 136, 9, 72, 132, 0, 10, 153, 144, 152, 168, 96, 73, 26, 160, 24, 2, 129, 33, 96, 36, 38, 100, 66, 133, 8, 6, 106, 17, 37, 106, 0, 4, 1, 81, 4, 8, 148, 80, 162, 102, 20, 146, 80, 0, 130, 129, 72, 137, 64, 10, 90, 4, 32, 102, 32, 4, 68, 136, 66, 166, 24, 1, 24, 20, 38, 4, 144, 129, 17, 32, 38, 128, 34, 24, 32, 22, 0, 72, 25, 66, 145, 16, 37, 85, 134, 86, 153, 1, 154, 64, 100, 5, 65, 148, 96, 102, 136, 153, 42, 25, 128, 68, 148, 22, 164, 145, 165, 9, 153, 86, 36, 100, 170, 148, 34, 170, 100, 153, 149, 38, 90, 86, 42, 21, 165, 105, 149, 18, 149, 82, 100, 168, 80, 38, 42, 86, 134, 88, 129, 21, 102, 152, 133, 98, 82, 18, 86, 16, 137, 9, 106, 138, 150, 89, 132, 68, 70, 161, 69, 82, 24, 161, 152, 105, 33, 18, 0, 9, 102, 5, 86, 106, 129, 152, 36, 25, 37, 106, 33, 165, 85, 4, 38, 162, 102, 6, 74, 145, 1},
    {42, 80, 9, 73, 41, 10, 169, 160, 97, 170, 20, 1, 41, 17, 169, 164, 18, 145, 32, 154, 9, 21, 16, 20, 84, 85, 162, 33, 16, 150, 72, 40, 81, 6, 21, 150, 100, 38, 20, 42, 22, 148, 85, 1, 89, 86, 86, 96, 25, 148, 96, 68, 133, 0, 134, 154, 129, 81, 10, 160, 88, 6, 150, 69, 9, 146, 96, 4, 16, 170, 72, 36, 73, 96, 4, 18, 42, 42, 105, 129, 130, 1, 165, 102, 137, 101, 152, 129, 101, 16, 150, 104, 82, 106, 89, 162, 22, 16, 34, 102, 132, 41, 4, 105, 145, 161, 89, 82, 166, 145, 96, 102, 166, 145, 153, 81, 38, 153, 86, 6, 129, 18, 161, 154, 74, 136, 149, 154, 152, 21, 137, 73, 153, 25, 64, 105, 69, 86, 145, 24, 65, 101, 152, 149, 82, 170, 33, 105, 102, 96, 130, 105, 20, 70, 26, 5, 98, 40, 104, 72, 162, 137, 166, 86, 102, 38, 148, 136, 26, 145, 38, 42, 104, 154, 74, 104, 148, 80, 0, 36, 100, 21, 73, 150, 148, 5, 24, 26, 154, 106, 150, 37, 40, 1, 68, 161, 16, 82, 33, 149, 154, 81, 6, 8, 86, 40, 68, 88, 32, 16, 90, 144, 6, 128, 166, 82, 36, 8, 4, 66, 34, 84, 33, 85, 84, 40, 16, 70, 73, 1, 20, 65, 22, 41, 132, 34, 73, 22, 82, 9, 40, 70, 5, 42, 1, 32, 104, 70, 100, 86, 168, 100, 148, 8, 22, 73, 21, 10, 132, 170, 9, 84, 32, 22, 153, 86, 32, 64, 129, 153, 105, 134, 153, 16, 10, 22, 18, 70, 8, 8, 88, 81, 136, 81, 150, 40, 130, 144, 17, 1, 106, 17, 41, 38, 0, 18, 84, 17, 97, 17, 5, 36, 80, 82, 81, 133, 26, 133, 72, 134, 85, 2, 89, 21, 138, 26, 8, 96, 21, 162, 41, 85, 69, 162, 165, 72, 36, 4, 69, 129, 24, 168, 166, 85, 73, 89, 40, 132, 170, 41, 41, 37, 102, 4, 65, 129, 161, 32, 149, 137, 21, 161, 32, 37, 38, 166, 153, 134, 85, 80, 149, 134, 64, 101, 161, 73, 86, 129, 150, 170, 162, 17, 102, 89, 89, 168, 137, 22, 0, 98, 8, 0, 69, 32},
    {81, 18, 0, 38, 66, 85, 6, 21, 40, 36, 153, 42, 98, 133, 6, 73, 144, 84, 154, 1, 129, 68, 16, 26, 168, 84, 65, 160, 84, 150, 90, 130, 138, 42, 106, 149, 64, 165, 162, 22, 4, 153, 100, 168, 65, 89, 150, 26, 4, 152, 84, 152, 154, 150, 21, 150, 42, 20, 101, 0, 105, 152, 20, 101, 146, 153, 69, 88, 168, 2, 80, 89, 73, 33, 162, 88, 101, 106, 106, 162, 164, 154, 26, 97, 65, 74, 2, 161, 85, 25, 146, 6, 82, 86, 89, 72, 152, 104, 72, 106, 33, 138, 104, 100, 153, 166, 144, 146, 169, 168, 97, 80, 89, 153, 152, 150, 154, 70, 34, 137, 104, 90, 162, 73, 84, 150, 86, 162, 153, 81, 36, 149, 154, 161, 132, 154, 42, 105, 106, 144, 6, 34, 132, 81, 73, 105, 134, 100, 73, 9, 6, 89, 9, 73, 153, 88, 40, 66, 133, 66, 84, 6, 82, 21, 6, 149, 89, 69, 22, 164, 68, 166, 25, 42, 164, 17, 164, 160, 22, 169, 25, 150, 65, 165, 98, 153, 154, 137, 66, 128, 137, 170, 1, 105, 69, 138, 104, 6, 65, 133, 33, 4, 72, 169, 97, 4, 5, 40, 32, 38, 40, 149, 129, 33, 4, 161, 1, 164, 22, 24, 84, 33, 6, 102, 65, 4, 64, 98, 34, 80, 32, 162, 168, 5, 133, 128, 72, 165, 104, 0, 128, 24, 41, 0, 18, 66, 2, 68, 160, 169, 168, 85, 170, 36, 80, 69, 64, 0, 8, 136, 18, 1, 20, 64, 153, 40, 84, 74, 1, 16, 17, 102, 36, 80, 130, 74, 74, 5, 134, 64, 160, 66, 162, 64, 129, 128, 162, 148, 134, 17, 65, 88, 106, 16, 38, 81, 153, 169, 90, 162, 104, 166, 137, 170, 162, 80, 102, 5, 1, 37, 130, 105, 17, 86, 85, 82, 16, 160, 154, 138, 42, 106, 84, 166, 105, 64, 160, 170, 89, 90, 9, 73, 24, 130, 6, 72, 38, 150, 37, 4, 98, 130, 162, 134, 145, 145, 146, 154, 90, 41, 136, 129, 128, 145, 90, 144, 137, 24, 138, 9, 104, 101, 41, 88, 105, 148, 6, 154, 20, 70, 89, 25, 138, 166, 36, 18, 105, 169, 134, 149, 101, 154, 41, 38},
    {69, 105, 146, 4, 32, 69, 33, 32, 104, 129, 138, 86, 17, 33, 166, 18, 90, 81, 85, 146, 165, 80, 2, 166, 137, 102, 36, 153, 168, 105, 84, 90, 165, 169, 36, 84, 166, 74, 165, 97, 21, 22, 42, 129, 26, 170, 170, 70, 1, 90, 65, 8, 17, 104, 42, 68, 9, 161, 101, 144, 40, 150, 164, 33, 22, 149, 33, 169, 134, 97, 65, 90, 88, 169, 80, 37, 101, 22, 129, 36, 80, 6, 130, 20, 2, 106, 106, 26, 162, 137, 160, 5, 138, 128, 137, 152, 40, 150, 150, 64, 168, 128, 70, 98, 170, 89, 160, 17, 40, 20, 8, 20, 38, 138, 146, 69, 165, 137, 85, 10, 24, 86, 5, 74, 160, 149, 169, 21, 146, 101, 25, 149, 138, 160, 133, 150, 74, 100, 102, 22, 70, 132, 129, 160, 20, 6, 166, 9, 150, 104, 101, 169, 38, 88, 86, 102, 149, 17, 154, 68, 105, 97, 82, 101, 70, 81, 88, 104, 150, 144, 101, 100, 136, 84, 166, 165, 34, 136, 69, 136, 154, 18, 153, 97, 89, 74, 152, 82, 82, 150, 40, 133, 69, 146, 130, 152, 37, 104, 168, 152, 65, 164, 10, 65, 166, 97, 130, 64, 130, 97, 20, 1, 4, 162, 136, 16, 41, 17, 169, 34, 145, 1, 136, 2, 20, 97, 0, 0, 148, 22, 129, 86, 65, 34, 42, 66, 4, 24, 100, 22, 134, 132, 132, 64, 105, 73, 21, 169, 26, 130, 18, 26, 22, 72, 5, 104, 128, 133, 17, 162, 96, 154, 32, 148, 165, 34, 161, 37, 170, 5, 41, 134, 73, 149, 21, 161, 128, 64, 17, 6, 64, 20, 68, 16, 17, 2, 65, 1, 8, 34, 85, 144, 2, 165, 162, 138, 169, 106, 0, 150, 22, 134, 32, 0, 20, 5, 90, 154, 105, 25, 26, 160, 36, 70, 154, 166, 36, 102, 101, 86, 81, 105, 5, 154, 68, 144, 106, 169, 101, 134, 74, 161, 144, 42, 154, 1, 16, 0, 101, 18, 128, 18, 9, 21, 168, 41, 138, 74, 168, 82, 40, 169, 74, 16, 21, 85, 168, 86, 26, 66, 66, 166, 149, 102, 41, 150, 170, 105, 168, 90, 100, 129, 100, 22, 148, 90, 136, 150, 152, 66, 37, 166, 100, 164},
    {34, 149, 106, 130, 97, 32, 129, 84, 36, 33, 8, 169, 22, 82, 150, 25, 170, 145, 100, 153, 106, 134, 97, 101, 65, 32, 42, 22, 10, 134, 97, 146, 106, 18, 6, 160, 64, 105, 90, 98, 69, 73, 150, 33, 128, 132, 102, 73, 160, 82, 164, 106, 101, 150, 9, 162, 130, 138, 42, 137, 101, 65, 64, 85, 98, 81, 37, 34, 169, 10, 128, 165, 32, 96, 20, 25, 16, 106, 40, 149, 68, 104, 105, 145, 101, 97, 134, 17, 134, 166, 104, 154, 32, 169, 134, 137, 84, 8, 106, 106, 22, 148, 33, 149, 96, 149, 153, 96, 33, 42, 0, 26, 146, 9, 88, 85, 165, 20, 21, 133, 90, 81, 150, 96, 89, 148, 101, 82, 166, 149, 96, 128, 97, 26, 10, 165, 73, 164, 97, 150, 82, 153, 102, 24, 38, 102, 25, 88, 106, 22, 106, 150, 10, 133, 36, 6, 38, 66, 84, 166, 72, 90, 161, 96, 161, 154, 169, 150, 37, 90, 86, 136, 148, 72, 100, 102, 64, 21, 128, 36, 169, 81, 21, 85, 2, 146, 37, 146, 132, 82, 41, 69, 154, 97, 33, 1, 160, 64, 161, 69, 138, 165, 96, 34, 104, 8, 132, 16, 10, 146, 152, 161, 97, 9, 129, 162, 64, 134, 0, 40, 0, 17, 33, 149, 68, 1, 16, 41, 148, 20, 21, 4, 1, 170, 66, 89, 168, 6, 73, 160, 162, 5, 96, 25, 128, 86, 81, 17, 86, 32, 68, 0, 170, 84, 73, 80, 166, 32, 70, 65, 144, 97, 161, 101, 138, 164, 106, 128, 40, 137, 18, 0, 6, 16, 86, 33, 36, 0, 20, 128, 16, 4, 20, 134, 81, 89, 89, 84, 18, 149, 162, 38, 168, 130, 34, 101, 170, 169, 166, 70, 101, 40, 8, 100, 150, 145, 22, 25, 36, 42, 165, 150, 129, 82, 161, 86, 96, 134, 130, 20, 40, 161, 6, 38, 136, 18, 10, 66, 152, 97, 153, 165, 136, 97, 84, 86, 26, 25, 162, 100, 166, 128, 0, 100, 34, 105, 89, 1, 41, 145, 138, 20, 132, 69, 41, 144, 20, 80, 169, 102, 137, 90, 100, 101, 138, 32, 106, 18, 137, 162, 66, 9, 152, 102, 69, 161, 104, 97, 40, 105, 132, 165, 1, 38},
    {152, 69, 6, 69, 5, 1, 1, 149, 86, 72, 34, 64, 90, 101, 70, 4, 136, 73, 106, 69, 65, 105, 25, 40, 106, 82, 4, 100, 164, 162, 18, 100, 98, 146, 34, 170, 89, 89, 85, 105, 73, 169, 128, 16, 80, 169, 168, 166, 1, 130, 9, 164, 40, 165, 81, 9, 154, 33, 4, 6, 162, 154, 25, 149, 69, 97, 72, 144, 4, 64, 68, 37, 18, 85, 102, 105, 33, 169, 101, 22, 20, 96, 166, 132, 170, 20, 20, 2, 101, 9, 38, 150, 166, 36, 149, 130, 161, 100, 128, 10, 2, 34, 90, 17, 162, 85, 89, 101, 24, 162, 97, 149, 166, 2, 170, 21, 149, 153, 73, 97, 162, 146, 69, 170, 102, 26, 152, 153, 105, 150, 149, 73, 68, 84, 166, 101, 36, 138, 134, 81, 85, 80, 162, 73, 132, 130, 96, 73, 82, 32, 154, 97, 5, 136, 82, 166, 170, 5, 97, 90, 18, 20, 37, 1, 89, 150, 133, 68, 98, 153, 70, 80, 164, 150, 97, 41, 81, 89, 33, 154, 74, 129, 153, 69, 170, 164, 18, 134, 150, 105, 8, 97, 89, 6, 33, 130, 26, 1, 34, 1, 17, 130, 154, 146, 152, 0, 64, 21, 33, 16, 88, 24, 18, 73, 134, 138, 0, 73, 5, 148, 8, 148, 37, 37, 24, 1, 64, 24, 64, 69, 81, 80, 18, 6, 152, 68, 2, 152, 8, 162, 154, 64, 162, 20, 84, 37, 96, 165, 40, 128, 42, 105, 146, 8, 72, 1, 148, 32, 85, 72, 97, 161, 144, 0, 16, 152, 64, 2, 162, 88, 21, 32, 160, 26, 89, 90, 136, 24, 1, 68, 40, 8, 17, 0, 10, 130, 74, 24, 10, 66, 84, 100, 82, 106, 22, 82, 168, 137, 10, 154, 104, 86, 4, 160, 105, 149, 82, 138, 165, 102, 1, 148, 42, 169, 22, 85, 136, 90, 152, 133, 165, 86, 9, 138, 90, 128, 88, 105, 37, 102, 105, 146, 166, 102, 42, 150, 134, 2, 36, 72, 97, 24, 160, 150, 24, 102, 89, 22, 97, 97, 38, 164, 18, 1, 36, 32, 80, 1, 65, 150, 21, 81, 146, 25, 170, 17, 106, 149, 74, 42, 134, 152, 146, 80, 100, 145, 10, 65, 88, 25, 38, 165, 42, 85},
    {4, 16, 145, 170, 72, 138, 74, 138, 165, 146, 169, 104, 40, 169, 96, 32, 84, 42, 20, 40, 170, 10, 84, 41, 74, 169, 150, 10, 41, 164, 34, 105, 37, 36, 168, 64, 106, 97, 105, 149, 81, 80, 153, 133, 105, 106, 38, 86, 154, 37, 70, 64, 40, 24, 128, 2, 97, 82, 34, 137, 165, 1, 26, 24, 32, 84, 148, 81, 4, 69, 145, 97, 162, 146, 170, 74, 2, 101, 150, 164, 160, 80, 101, 105, 25, 101, 162, 37, 154, 37, 4, 128, 41, 145, 18, 137, 144, 34, 41, 97, 26, 22, 69, 166, 21, 170, 72, 150, 153, 85, 106, 26, 4, 1, 154, 166, 100, 8, 42, 37, 137, 96, 74, 73, 85, 42, 105, 17, 130, 96, 104, 90, 104, 160, 22, 98, 100, 146, 97, 26, 106, 86, 165, 17, 96, 129, 22, 40, 32, 88, 64, 90, 97, 96, 170, 148, 133, 150, 148, 104, 97, 100, 161, 88, 168, 32, 160, 40, 134, 18, 153, 153, 74, 69, 66, 144, 69, 21, 18, 164, 101, 101, 10, 25, 152, 101, 161, 168, 42, 82, 24, 144, 26, 33, 169, 4, 160, 9, 25, 2, 81, 1, 129, 152, 32, 145, 153, 0, 40, 2, 40, 90, 129, 161, 16, 165, 26, 16, 105, 1, 40, 88, 24, 65, 160, 145, 34, 32, 2, 129, 32, 97, 164, 1, 96, 1, 37, 24, 128, 132, 20, 2, 132, 8, 90, 10, 72, 105, 133, 64, 20, 129, 165, 144, 10, 72, 136, 106, 98, 17, 2, 4, 129, 2, 166, 132, 160, 97, 149, 100, 10, 10, 90, 16, 66, 36, 32, 33, 72, 16, 64, 36, 161, 66, 32, 154, 37, 72, 161, 84, 18, 33, 32, 150, 68, 73, 72, 152, 18, 164, 36, 9, 34, 5, 80, 170, 40, 73, 70, 6, 97, 25, 85, 169, 150, 64, 153, 136, 145, 161, 42, 37, 149, 33, 168, 169, 104, 9, 132, 165, 88, 40, 66, 133, 105, 26, 148, 137, 68, 168, 42, 149, 145, 4, 161, 169, 90, 41, 89, 102, 102, 10, 105, 146, 42, 161, 20, 154, 100, 137, 169, 136, 86, 41, 90, 166, 128, 21, 17, 22, 160, 169, 20, 150, 18, 96, 130, 102, 136, 100, 40, 69, 170, 40},
    {8, 36, 81, 6, 69, 165, 5, 105, 1, 69, 136, 26, 132, 74, 137, 74, 0, 26, 165, 18, 134, 134, 138, 90, 65, 104, 80, 21, 104, 25, 145, 170, 6, 32, 104, 42, 133, 2, 86, 22, 145, 10, 148, 86, 5, 41, 25, 102, 68, 1, 32, 42, 1, 133, 34, 129, 0, 166, 130, 2, 74, 38, 161, 0, 36, 37, 37, 145, 2, 102, 98, 66, 138, 105, 101, 38, 98, 68, 90, 73, 89, 138, 82, 161, 86, 98, 153, 38, 17, 161, 81, 165, 169, 40, 32, 4, 134, 89, 153, 137, 154, 4, 70, 165, 9, 165, 130, 20, 34, 154, 162, 101, 16, 137, 105, 133, 133, 144, 168, 32, 10, 105, 64, 138, 8, 37, 153, 169, 9, 97, 128, 161, 133, 161, 154, 150, 106, 8, 90, 100, 164, 85, 0, 2, 81, 86, 162, 145, 26, 36, 152, 134, 97, 105, 20, 73, 41, 153, 132, 96, 106, 98, 106, 86, 2, 5, 10, 34, 69, 169, 85, 85, 128, 152, 146, 170, 6, 65, 170, 106, 26, 101, 128, 144, 34, 102, 166, 68, 104, 36, 80, 170, 128, 85, 4, 88, 1, 128, 74, 160, 136, 9, 88, 136, 86, 164, 21, 64, 0, 80, 20, 24, 64, 74, 1, 137, 10, 64, 18, 32, 133, 6, 64, 134, 161, 160, 5, 66, 38, 129, 1, 4, 17, 34, 2, 68, 169, 21, 160, 40, 80, 128, 65, 146, 18, 98, 128, 18, 169, 65, 40, 130, 73, 101, 128, 136, 0, 1, 64, 0, 82, 16, 64, 4, 18, 32, 34, 26, 1, 154, 36, 36, 73, 65, 41, 24, 74, 149, 5, 129, 145, 32, 68, 40, 25, 148, 5, 149, 64, 64, 148, 18, 84, 168, 66, 160, 164, 68, 145, 96, 98, 26, 165, 0, 149, 146, 66, 146, 1, 33, 82, 138, 148, 153, 32, 134, 86, 2, 96, 17, 0, 33, 26, 106, 102, 8, 21, 42, 149, 10, 153, 104, 82, 16, 18, 97, 17, 80, 149, 9, 4, 33, 146, 128, 169, 105, 153, 2, 66, 86, 136, 145, 26, 162, 68, 80, 90, 153, 42, 150, 64, 82, 2, 85, 133, 96, 161, 132, 146, 38, 68, 73, 153, 133, 2, 161, 106, 138, 138, 152, 104, 170, 101, 85},
    {130, 4, 69, 168, 72, 162, 144, 34, 170, 152, 104, 98, 26, 42, 8, 66, 102, 161, 144, 101, 164, 18, 134, 149, 80, 86, 72, 37, 6, 32, 17, 100, 1, 104, 168, 82, 26, 2, 149, 152, 130, 22, 129, 25, 132, 106, 128, 2, 38, 104, 2, 85, 20, 165, 20, 145, 81, 153, 170, 17, 80, 40, 150, 170, 166, 1, 8, 20, 128, 5, 73, 40, 106, 161, 42, 152, 136, 36, 9, 161, 36, 18, 105, 86, 86, 81, 134, 69, 38, 90, 10, 4, 18, 72, 98, 33, 97, 40, 66, 90, 81, 144, 89, 105, 98, 152, 22, 36, 170, 86, 40, 9, 105, 100, 104, 136, 89, 25, 150, 82, 150, 85, 89, 96, 5, 9, 65, 170, 34, 146, 88, 133, 65, 10, 149, 72, 148, 105, 128, 164, 150, 144, 96, 169, 73, 42, 150, 150, 80, 25, 34, 89, 65, 8, 164, 38, 138, 164, 69, 104, 74, 69, 85, 20, 153, 162, 90, 41, 166, 170, 5, 170, 21, 98, 134, 98, 22, 153, 42, 146, 84, 104, 88, 150, 133, 97, 153, 9, 5, 128, 17, 170, 165, 26, 0, 72, 10, 144, 89, 68, 128, 8, 82, 153, 20, 136, 40, 134, 64, 160, 128, 33, 33, 20, 64, 104, 96, 9, 16, 20, 17, 152, 26, 9, 0, 150, 65, 4, 138, 10, 2, 152, 85, 66, 32, 144, 74, 145, 80, 34, 90, 144, 24, 0, 165, 133, 2, 136, 64, 82, 80, 0, 104, 168, 128, 144, 16, 26, 38, 42, 4, 6, 161, 80, 169, 64, 72, 136, 9, 96, 104, 18, 5, 80, 17, 26, 42, 40, 24, 154, 152, 40, 170, 42, 18, 149, 64, 1, 104, 134, 128, 17, 105, 37, 72, 68, 153, 64, 161, 160, 149, 168, 149, 81, 2, 166, 144, 137, 85, 145, 130, 24, 1, 21, 148, 148, 34, 33, 149, 152, 154, 106, 40, 40, 160, 24, 21, 41, 86, 104, 146, 161, 69, 2, 41, 128, 106, 8, 38, 100, 86, 37, 37, 96, 72, 69, 81, 85, 20, 96, 34, 162, 104, 138, 132, 38, 149, 164, 26, 170, 145, 134, 20, 70, 90, 85, 150, 96, 96, 170, 164, 18, 25, 160, 166, 90, 90, 5, 161, 33, 86, 102, 106, 97},
    {162, 89, 1, 149, 84, 5, 21, 101, 36, 17, 65, 130, 149, 101, 132, 2, 128, 82, 32, 129, 153, 90, 70, 73, 33, 86, 154, 21, 149, 149, 128, 68, 169, 0, 0, 66, 84, 16, 9, 33, 89, 84, 70, 17, 149, 40, 22, 8, 128, 65, 68, 96, 24, 101, 74, 33, 68, 22, 6, 34, 26, 152, 0, 133, 96, 154, 98, 161, 41, 6, 100, 25, 152, 170, 106, 10, 73, 132, 165, 137, 89, 18, 41, 73, 80, 96, 145, 0, 166, 153, 25, 106, 154, 145, 34, 165, 136, 65, 73, 154, 86, 22, 64, 20, 33, 98, 153, 100, 72, 33, 40, 85, 2, 137, 20, 34, 104, 96, 42, 169, 42, 90, 106, 101, 100, 68, 128, 38, 130, 133, 70, 20, 1, 161, 74, 17, 64, 136, 168, 149, 152, 20, 96, 25, 74, 152, 133, 40, 144, 82, 104, 90, 41, 81, 165, 80, 134, 161, 70, 17, 68, 85, 106, 97, 104, 132, 65, 101, 32, 154, 98, 65, 146, 90, 38, 82, 162, 149, 64, 148, 89, 85, 170, 18, 84, 73, 166, 134, 97, 42, 10, 150, 138, 5, 101, 128, 16, 18, 133, 64, 2, 72, 145, 129, 149, 10, 148, 152, 20, 90, 161, 100, 5, 69, 16, 86, 164, 70, 32, 32, 70, 25, 21, 37, 80, 40, 17, 165, 144, 2, 64, 8, 81, 36, 8, 72, 40, 70, 165, 2, 148, 134, 133, 133, 42, 130, 72, 100, 74, 101, 144, 4, 80, 2, 32, 2, 161, 20, 8, 17, 2, 96, 129, 5, 20, 10, 18, 6, 25, 85, 10, 0, 2, 0, 96, 21, 81, 65, 38, 132, 38, 137, 1, 24, 4, 8, 64, 0, 25, 8, 162, 98, 5, 38, 145, 105, 154, 148, 133, 168, 148, 129, 106, 89, 9, 42, 17, 69, 132, 146, 69, 9, 166, 85, 32, 5, 86, 130, 137, 38, 81, 98, 161, 129, 133, 97, 6, 40, 88, 81, 168, 161, 9, 74, 80, 42, 134, 89, 32, 81, 82, 4, 88, 166, 161, 97, 165, 85, 34, 85, 84, 64, 42, 150, 130, 134, 85, 33, 98, 104, 101, 72, 134, 85, 134, 82, 65, 164, 153, 17, 16, 73, 152, 80, 166, 105, 17, 166, 164, 170, 161, 73, 89, 70},
    {38, 144, 104, 166, 166, 164, 165, 133, 152, 1, 81, 144, 134, 100, 134, 18, 70, 22, 154, 148, 165, 150, 145, 90, 21, 160, 80, 134, 101, 150, 105, 164, 148, 90, 73, 105, 170, 74, 166, 69, 132, 90, 149, 81, 10, 168, 90, 166, 164, 106, 20, 152, 72, 18, 145, 144, 88, 150, 165, 17, 89, 74, 170, 34, 165, 66, 153, 106, 89, 9, 1, 65, 64, 170, 152, 145, 138, 105, 169, 66, 70, 74, 82, 72, 86, 89, 170, 88, 169, 98, 85, 161, 82, 88, 101, 105, 166, 88, 81, 97, 72, 150, 96, 170, 74, 132, 166, 170, 153, 82, 153, 166, 38, 89, 133, 134, 100, 166, 166, 100, 102, 101, 26, 85, 149, 144, 128, 74, 148, 89, 137, 145, 97, 74, 150, 38, 102, 85, 89, 132, 166, 166, 105, 90, 89, 81, 132, 164, 88, 166, 165, 134, 65, 97, 82, 18, 74, 162, 162, 106, 32, 161, 84, 164, 137, 168, 154, 149, 161, 170, 132, 160, 166, 169, 168, 154, 166, 145, 152, 65, 90, 101, 164, 166, 133, 82, 84, 69, 97, 160, 88, 169, 166, 89, 144, 73, 85, 132, 66, 152, 134, 65, 68, 66, 84, 152, 129, 160, 88, 168, 162, 160, 81, 148, 41, 89, 144, 136, 6, 89, 36, 130, 170, 130, 85, 168, 0, 88, 166, 134, 38, 37, 81, 42, 88, 68, 73, 144, 80, 69, 106, 68, 81, 162, 166, 128, 166, 144, 80, 89, 80, 146, 81, 129, 162, 130, 64, 96, 1, 88, 162, 80, 65, 98, 24, 88, 106, 136, 88, 136, 154, 102, 164, 68, 166, 96, 74, 81, 162, 132, 128, 36, 37, 134, 89, 137, 69, 8, 105, 165, 100, 89, 66, 16, 8, 37, 82, 104, 41, 89, 144, 138, 145, 85, 165, 153, 161, 9, 82, 146, 165, 86, 145, 150, 38, 153, 154, 137, 102, 20, 166, 80, 144, 89, 154, 130, 0, 146, 85, 166, 166, 85, 88, 86, 72, 169, 72, 40, 136, 105, 137, 152, 106, 80, 68, 74, 166, 80, 90, 168, 105, 129, 100, 132, 66, 65, 84, 146, 162, 86, 41, 166, 102, 89, 150, 101, 152, 101, 82, 90, 90, 81, 160, 129, 170, 134, 90, 22, 144, 81, 149, 84, 73, 136},
    {164, 97, 130, 144, 41, 36, 100, 4, 34, 169, 168, 6, 137, 148, 20, 130, 84, 85, 5, 82, 38, 72, 145, 21, 130, 100, 138, 65, 85, 148, 146, 74, 80, 25, 150, 6, 149, 106, 81, 36, 40, 162, 73, 88, 165, 149, 153, 144, 132, 85, 32, 0, 148, 86, 105, 2, 129, 104, 34, 152, 160, 82, 160, 8, 148, 136, 98, 138, 160, 136, 170, 73, 70, 100, 42, 153, 138, 106, 104, 10, 101, 149, 24, 169, 169, 161, 162, 40, 5, 170, 24, 97, 150, 81, 165, 154, 1, 2, 66, 8, 154, 165, 169, 97, 34, 21, 102, 40, 69, 170, 148, 100, 164, 154, 84, 16, 154, 168, 89, 26, 136, 152, 165, 162, 133, 18, 25, 90, 101, 153, 65, 101, 41, 129, 18, 149, 160, 24, 10, 4, 106, 97, 152, 154, 90, 104, 38, 21, 26, 81, 101, 133, 86, 18, 65, 66, 90, 1, 41, 0, 97, 148, 170, 145, 145, 69, 154, 37, 89, 165, 9, 161, 17, 102, 101, 137, 152, 81, 150, 33, 72, 144, 102, 97, 170, 25, 25, 26, 168, 148, 38, 169, 102, 88, 0, 152, 72, 37, 162, 161, 32, 32, 130, 138, 104, 4, 25, 65, 145, 81, 82, 40, 88, 32, 20, 25, 170, 69, 160, 70, 144, 37, 133, 160, 104, 130, 74, 81, 1, 10, 68, 80, 150, 130, 16, 134, 105, 148, 168, 104, 24, 34, 26, 6, 6, 69, 20, 130, 162, 10, 130, 40, 80, 81, 2, 104, 130, 81, 85, 152, 133, 160, 97, 128, 89, 4, 72, 162, 34, 16, 69, 4, 97, 0, 4, 74, 1, 8, 4, 170, 81, 9, 144, 97, 148, 150, 148, 145, 84, 160, 82, 26, 82, 137, 166, 25, 89, 168, 169, 137, 10, 154, 106, 64, 101, 80, 130, 148, 132, 70, 166, 149, 169, 129, 9, 33, 138, 38, 74, 20, 100, 160, 89, 130, 152, 106, 149, 100, 66, 26, 32, 104, 104, 134, 152, 102, 86, 16, 161, 82, 168, 80, 153, 70, 64, 25, 37, 70, 74, 138, 88, 24, 90, 25, 98, 25, 85, 68, 160, 81, 106, 104, 42, 148, 102, 102, 128, 144, 9, 73, 69, 33, 102, 18, 69, 68, 149, 26, 97, 148, 165, 98, 89, 137},
    {149, 6, 168, 24, 20, 144, 37, 20, 149, 165, 40, 160, 164, 26, 145, 8, 145, 41, 149, 104, 6, 6, 85, 73, 150, 2, 16, 36, 88, 101, 74, 161, 82, 104, 65, 101, 22, 136, 42, 37, 133, 25, 148, 165, 154, 73, 89, 21, 82, 42, 40, 4, 96, 0, 68, 32, 85, 132, 128, 70, 154, 153, 148, 20, 134, 2, 150, 20, 106, 169, 170, 72, 165, 129, 145, 89, 10, 9, 169, 168, 166, 64, 18, 148, 10, 82, 146, 138, 90, 81, 73, 160, 26, 129, 89, 97, 86, 98, 73, 25, 106, 150, 102, 21, 73, 20, 102, 144, 24, 98, 170, 68, 80, 106, 162, 148, 72, 37, 104, 34, 86, 169, 98, 104, 73, 149, 154, 85, 20, 128, 170, 137, 134, 104, 26, 101, 4, 170, 106, 169, 138, 86, 88, 146, 97, 84, 149, 138, 144, 38, 42, 170, 80, 97, 145, 73, 82, 24, 102, 42, 73, 152, 25, 38, 42, 133, 33, 8, 153, 16, 149, 148, 165, 106, 38, 20, 70, 150, 1, 42, 105, 168, 133, 84, 66, 81, 16, 161, 148, 69, 104, 86, 21, 74, 72, 34, 146, 145, 36, 136, 20, 24, 38, 66, 25, 21, 169, 102, 42, 20, 130, 8, 73, 41, 1, 168, 33, 4, 85, 86, 144, 70, 33, 84, 64, 68, 26, 153, 145, 153, 153, 146, 152, 38, 72, 160, 34, 32, 85, 34, 1, 153, 0, 0, 132, 150, 144, 98, 40, 10, 66, 8, 153, 2, 64, 1, 8, 2, 8, 34, 68, 96, 41, 18, 16, 24, 81, 17, 17, 8, 1, 137, 16, 9, 17, 25, 24, 136, 0, 129, 74, 26, 1, 82, 168, 4, 5, 40, 105, 16, 101, 98, 161, 41, 16, 136, 80, 73, 5, 165, 38, 65, 148, 32, 137, 133, 132, 96, 66, 64, 2, 40, 106, 137, 6, 150, 134, 105, 85, 134, 129, 98, 84, 41, 5, 88, 65, 154, 129, 101, 98, 170, 98, 10, 161, 134, 89, 74, 102, 9, 162, 166, 68, 169, 42, 144, 9, 40, 4, 160, 17, 133, 100, 37, 74, 40, 88, 100, 98, 74, 138, 153, 89, 154, 132, 153, 40, 84, 89, 148, 105, 104, 106, 148, 144, 170, 166, 84, 24, 104, 168, 106, 5, 134}
};
# 25 "./data_include.h" 2
# 1 "./data_4th/k_weights.h" 1

const attn_fixed_t k_scale = 18.834289550781;
const uint8_t k_weights[96][384] = {
    {146, 37, 166, 97, 165, 32, 97, 4, 81, 20, 165, 85, 136, 150, 160, 26, 136, 65, 16, 90, 162, 82, 168, 170, 41, 129, 80, 70, 88, 90, 97, 80, 144, 144, 104, 136, 136, 144, 22, 169, 152, 42, 20, 170, 89, 152, 149, 24, 165, 42, 164, 80, 170, 64, 9, 166, 136, 137, 37, 65, 145, 152, 136, 129, 166, 146, 68, 145, 102, 96, 25, 32, 18, 17, 98, 22, 85, 34, 129, 88, 81, 165, 37, 149, 85, 149, 90, 6, 152, 136, 130, 65, 165, 6, 37, 2, 32, 26, 18, 136, 168, 33, 10, 41, 106, 82, 5, 162, 22, 170, 86, 65, 40, 130, 5, 166, 150, 37, 24, 146, 38, 25, 133, 69, 162, 102, 148, 165, 38, 146, 84, 134, 20, 106, 145, 100, 2, 104, 162, 26, 37, 98, 38, 26, 152, 128, 37, 10, 34, 34, 168, 33, 134, 80, 4, 134, 146, 148, 152, 89, 88, 24, 81, 136, 86, 132, 80, 64, 128, 18, 165, 38, 81, 5, 162, 150, 130, 82, 17, 17, 2, 38, 40, 36, 101, 17, 101, 9, 105, 152, 4, 73, 41, 17, 137, 0, 1, 100, 74, 5, 0, 40, 88, 134, 24, 0, 146, 68, 69, 33, 86, 154, 154, 149, 10, 5, 24, 1, 74, 38, 8, 18, 70, 24, 85, 72, 133, 34, 72, 136, 36, 74, 101, 97, 80, 100, 1, 2, 6, 21, 98, 32, 152, 74, 32, 37, 66, 153, 5, 144, 2, 16, 6, 145, 32, 129, 169, 40, 96, 38, 33, 25, 162, 88, 4, 0, 104, 34, 137, 136, 36, 9, 5, 40, 1, 6, 8, 164, 72, 42, 98, 66, 74, 144, 40, 32, 38, 38, 42, 5, 100, 89, 74, 149, 154, 5, 137, 105, 161, 152, 148, 136, 164, 102, 90, 149, 106, 154, 41, 86, 150, 9, 128, 5, 133, 154, 88, 42, 69, 42, 74, 89, 26, 40, 25, 26, 37, 64, 90, 105, 88, 166, 165, 165, 69, 101, 90, 84, 36, 144, 137, 73, 10, 90, 38, 2, 6, 148, 90, 81, 72, 21, 88, 152, 144, 145, 24, 134, 65, 89, 169, 8, 152, 96, 64, 154, 165, 102, 88, 154, 137, 37, 25, 106, 25, 104, 64, 74, 2, 130, 86, 148, 88, 89},
    {73, 162, 89, 170, 162, 166, 36, 164, 38, 162, 64, 20, 41, 153, 2, 98, 137, 134, 72, 148, 129, 129, 161, 74, 68, 133, 2, 97, 130, 69, 150, 165, 85, 16, 26, 102, 82, 24, 101, 96, 74, 148, 86, 97, 65, 66, 164, 90, 162, 84, 36, 88, 2, 160, 146, 36, 84, 166, 37, 160, 34, 89, 134, 165, 36, 144, 166, 105, 88, 169, 148, 146, 84, 101, 102, 38, 149, 138, 104, 16, 4, 149, 105, 166, 154, 164, 88, 160, 74, 148, 164, 73, 166, 170, 160, 165, 170, 86, 85, 80, 82, 165, 8, 165, 42, 145, 36, 146, 2, 168, 138, 34, 73, 152, 161, 38, 152, 38, 134, 66, 165, 9, 148, 26, 149, 149, 166, 9, 149, 165, 5, 88, 154, 80, 165, 166, 165, 24, 130, 88, 82, 69, 150, 129, 86, 89, 168, 33, 81, 162, 170, 138, 90, 85, 20, 26, 150, 133, 145, 104, 26, 69, 74, 138, 152, 136, 128, 138, 25, 32, 9, 130, 97, 97, 150, 148, 102, 1, 80, 102, 161, 36, 90, 81, 68, 165, 161, 26, 137, 74, 165, 98, 136, 86, 18, 86, 69, 97, 160, 152, 41, 80, 74, 32, 128, 33, 161, 38, 146, 100, 160, 10, 144, 8, 84, 5, 21, 164, 80, 88, 6, 106, 138, 18, 169, 65, 161, 26, 66, 69, 33, 33, 160, 64, 8, 82, 33, 4, 146, 33, 2, 105, 81, 130, 160, 164, 169, 129, 145, 153, 128, 1, 73, 20, 33, 32, 2, 105, 134, 73, 148, 6, 0, 134, 0, 22, 96, 41, 8, 89, 100, 82, 128, 162, 4, 166, 82, 153, 6, 65, 96, 32, 10, 68, 164, 128, 17, 160, 82, 37, 90, 26, 42, 101, 161, 154, 24, 88, 160, 89, 105, 154, 68, 2, 161, 169, 36, 89, 20, 69, 134, 86, 137, 17, 41, 166, 1, 90, 90, 73, 89, 98, 88, 42, 38, 37, 129, 97, 96, 82, 90, 9, 161, 37, 169, 65, 88, 164, 165, 16, 34, 100, 104, 21, 80, 104, 101, 73, 42, 170, 137, 24, 17, 41, 66, 42, 1, 36, 64, 85, 42, 150, 81, 90, 74, 20, 34, 170, 18, 152, 82, 132, 146, 82, 134, 88, 160, 18, 90, 38, 104, 149, 64, 82},
    {134, 90, 132, 80, 106, 88, 64, 33, 105, 86, 166, 64, 81, 105, 100, 25, 161, 22, 97, 137, 38, 170, 90, 100, 170, 22, 170, 162, 73, 162, 16, 85, 138, 145, 153, 161, 161, 165, 34, 145, 164, 134, 105, 74, 84, 161, 104, 164, 26, 161, 149, 96, 160, 160, 4, 169, 134, 74, 89, 154, 74, 146, 32, 96, 85, 165, 72, 168, 82, 10, 26, 81, 9, 25, 106, 16, 80, 136, 73, 97, 149, 88, 97, 150, 133, 72, 149, 18, 169, 166, 90, 166, 106, 89, 32, 22, 89, 37, 148, 166, 37, 74, 98, 82, 96, 81, 105, 106, 32, 33, 24, 100, 22, 133, 98, 64, 37, 104, 149, 1, 97, 22, 85, 161, 69, 150, 168, 102, 148, 17, 72, 5, 149, 69, 2, 161, 98, 25, 129, 164, 37, 70, 90, 66, 81, 132, 2, 2, 144, 88, 170, 84, 69, 38, 128, 165, 86, 40, 21, 41, 33, 136, 169, 138, 170, 104, 165, 153, 84, 82, 154, 106, 100, 105, 41, 133, 134, 144, 133, 133, 4, 88, 137, 104, 25, 134, 10, 144, 24, 37, 96, 169, 90, 100, 37, 16, 66, 88, 146, 132, 90, 37, 130, 146, 26, 42, 34, 66, 8, 105, 2, 72, 104, 70, 165, 34, 130, 82, 5, 17, 40, 85, 4, 165, 84, 0, 90, 145, 165, 32, 74, 130, 80, 69, 37, 8, 80, 2, 17, 21, 132, 90, 36, 154, 26, 104, 10, 98, 20, 145, 8, 10, 0, 32, 106, 74, 160, 74, 40, 128, 0, 165, 96, 16, 16, 152, 8, 10, 133, 73, 0, 161, 68, 22, 18, 152, 1, 16, 134, 161, 96, 146, 130, 132, 82, 1, 88, 2, 165, 74, 145, 41, 150, 65, 102, 164, 66, 96, 149, 165, 162, 152, 8, 33, 81, 17, 166, 168, 90, 146, 68, 148, 98, 82, 42, 32, 73, 97, 146, 34, 90, 132, 164, 169, 10, 26, 106, 22, 34, 164, 161, 82, 106, 86, 73, 5, 101, 106, 9, 164, 145, 132, 102, 106, 132, 73, 105, 4, 32, 160, 166, 17, 40, 65, 161, 1, 170, 6, 36, 136, 161, 161, 74, 105, 102, 149, 149, 8, 149, 154, 168, 26, 150, 133, 152, 161, 6, 148, 33, 133, 34, 0, 160, 128},
    {1, 148, 104, 9, 17, 16, 36, 128, 0, 26, 86, 21, 8, 10, 40, 42, 80, 5, 154, 69, 170, 85, 161, 96, 10, 8, 40, 150, 85, 65, 98, 72, 166, 97, 0, 38, 100, 102, 105, 69, 38, 132, 166, 86, 128, 33, 89, 105, 16, 160, 4, 32, 42, 129, 169, 88, 10, 134, 10, 165, 80, 96, 69, 129, 106, 128, 80, 98, 40, 33, 138, 146, 162, 148, 150, 33, 26, 81, 5, 145, 73, 148, 149, 168, 36, 17, 42, 18, 101, 84, 16, 18, 145, 154, 145, 137, 17, 97, 38, 38, 106, 24, 100, 146, 37, 148, 21, 148, 166, 70, 129, 10, 16, 128, 146, 129, 70, 90, 65, 100, 88, 145, 153, 6, 132, 153, 4, 148, 154, 88, 16, 96, 102, 20, 152, 148, 149, 154, 74, 96, 100, 36, 26, 150, 34, 98, 153, 133, 101, 128, 69, 90, 5, 104, 22, 96, 168, 148, 166, 97, 102, 134, 165, 74, 36, 145, 5, 150, 90, 24, 152, 149, 24, 81, 101, 74, 101, 98, 162, 97, 5, 25, 96, 100, 104, 146, 26, 2, 17, 105, 25, 100, 136, 129, 82, 0, 162, 6, 104, 64, 32, 66, 101, 104, 37, 2, 162, 81, 170, 82, 18, 100, 165, 22, 32, 170, 162, 18, 164, 129, 164, 32, 66, 144, 130, 128, 24, 101, 36, 130, 130, 40, 136, 70, 100, 9, 18, 41, 145, 8, 104, 42, 32, 73, 64, 20, 0, 128, 6, 37, 129, 16, 96, 17, 144, 149, 0, 33, 17, 104, 154, 24, 70, 82, 134, 34, 164, 169, 97, 96, 20, 97, 66, 74, 162, 152, 38, 154, 4, 0, 64, 0, 0, 130, 168, 1, 17, 16, 164, 16, 1, 40, 36, 32, 138, 66, 154, 145, 5, 22, 32, 100, 1, 34, 145, 9, 160, 160, 162, 88, 170, 106, 168, 104, 154, 152, 38, 169, 169, 102, 130, 66, 138, 102, 40, 154, 145, 24, 162, 68, 98, 137, 22, 84, 133, 41, 41, 136, 85, 101, 101, 128, 170, 96, 0, 18, 8, 74, 8, 69, 170, 69, 36, 18, 145, 65, 42, 38, 160, 168, 164, 128, 130, 162, 145, 97, 166, 82, 161, 160, 0, 145, 130, 104, 166, 68, 32, 165, 70, 164, 24, 144, 10, 97},
    {97, 153, 32, 134, 144, 144, 130, 166, 6, 80, 164, 86, 129, 16, 9, 102, 150, 133, 136, 82, 21, 90, 133, 73, 36, 86, 24, 150, 145, 164, 34, 6, 69, 105, 22, 104, 33, 106, 149, 169, 65, 22, 169, 146, 41, 65, 16, 136, 149, 40, 6, 4, 100, 26, 164, 4, 40, 144, 9, 42, 73, 84, 132, 160, 84, 161, 149, 9, 90, 41, 36, 40, 169, 132, 164, 104, 66, 150, 165, 41, 169, 149, 150, 65, 104, 20, 104, 144, 40, 150, 84, 106, 148, 148, 128, 84, 160, 97, 106, 96, 96, 134, 81, 34, 41, 38, 152, 164, 98, 90, 86, 148, 153, 72, 130, 6, 81, 148, 100, 106, 74, 66, 132, 138, 138, 17, 106, 42, 86, 161, 22, 105, 170, 105, 149, 150, 148, 106, 154, 25, 40, 105, 150, 85, 73, 82, 134, 84, 89, 150, 40, 148, 85, 21, 37, 100, 73, 162, 84, 69, 97, 154, 34, 152, 100, 16, 97, 86, 150, 84, 137, 22, 137, 25, 162, 85, 145, 90, 90, 170, 148, 149, 136, 104, 24, 20, 150, 153, 41, 105, 134, 104, 22, 96, 34, 97, 161, 136, 82, 36, 145, 136, 70, 138, 130, 152, 25, 130, 69, 160, 22, 130, 73, 4, 9, 85, 64, 1, 136, 8, 104, 137, 148, 81, 6, 154, 16, 106, 73, 105, 64, 2, 136, 148, 129, 32, 148, 25, 74, 5, 90, 2, 33, 86, 154, 144, 21, 21, 101, 137, 72, 70, 65, 21, 24, 144, 101, 154, 33, 80, 0, 100, 8, 64, 128, 104, 138, 24, 160, 133, 88, 41, 132, 72, 161, 146, 170, 73, 96, 32, 138, 18, 41, 96, 1, 136, 128, 138, 97, 16, 100, 162, 154, 146, 138, 161, 82, 104, 34, 10, 70, 37, 82, 26, 133, 148, 38, 98, 146, 149, 18, 80, 129, 26, 72, 146, 133, 161, 152, 106, 20, 26, 26, 40, 64, 21, 21, 150, 101, 34, 32, 86, 146, 86, 148, 74, 128, 168, 150, 149, 97, 4, 74, 42, 102, 161, 137, 96, 85, 6, 149, 145, 170, 22, 73, 72, 104, 17, 22, 37, 145, 20, 25, 104, 129, 153, 149, 22, 40, 148, 41, 148, 104, 169, 74, 25, 150, 161, 24, 86, 98, 133, 20, 160},
    {0, 17, 70, 0, 66, 154, 86, 137, 136, 138, 68, 4, 66, 41, 136, 101, 105, 137, 137, 96, 74, 41, 96, 166, 160, 8, 169, 74, 84, 102, 136, 69, 145, 4, 38, 150, 164, 134, 73, 149, 148, 4, 86, 40, 41, 37, 9, 149, 90, 133, 64, 21, 37, 89, 133, 105, 0, 41, 106, 90, 134, 84, 9, 97, 102, 17, 26, 34, 16, 21, 128, 152, 82, 1, 34, 130, 169, 88, 84, 38, 149, 32, 104, 152, 25, 73, 4, 72, 150, 164, 96, 144, 38, 82, 70, 137, 88, 6, 133, 37, 84, 73, 21, 72, 6, 24, 132, 97, 148, 4, 24, 96, 145, 70, 104, 160, 144, 81, 150, 102, 65, 21, 128, 86, 73, 145, 22, 37, 74, 146, 137, 150, 150, 164, 170, 154, 73, 90, 136, 146, 69, 20, 16, 73, 10, 68, 88, 152, 149, 160, 65, 26, 161, 20, 152, 34, 162, 102, 102, 132, 69, 89, 150, 41, 145, 97, 164, 168, 106, 168, 90, 169, 145, 101, 66, 24, 8, 42, 21, 130, 168, 41, 149, 132, 72, 26, 10, 86, 21, 84, 105, 150, 96, 21, 148, 21, 64, 72, 4, 18, 105, 80, 101, 100, 132, 66, 26, 2, 129, 26, 168, 88, 132, 168, 0, 133, 68, 129, 149, 165, 21, 36, 65, 73, 41, 6, 136, 37, 16, 82, 152, 37, 0, 106, 152, 105, 32, 133, 102, 32, 65, 0, 6, 102, 74, 150, 104, 165, 161, 165, 97, 1, 9, 82, 74, 66, 6, 132, 80, 4, 36, 152, 70, 69, 152, 132, 82, 136, 32, 152, 136, 86, 16, 16, 150, 74, 165, 164, 134, 24, 132, 0, 16, 134, 128, 36, 96, 161, 68, 74, 37, 166, 164, 104, 64, 146, 36, 2, 69, 2, 5, 102, 5, 25, 90, 16, 40, 154, 4, 161, 64, 96, 161, 137, 153, 40, 73, 168, 1, 136, 168, 0, 10, 148, 165, 101, 152, 165, 134, 102, 5, 132, 80, 100, 10, 36, 96, 42, 0, 101, 65, 136, 165, 100, 4, 129, 105, 20, 69, 105, 36, 149, 89, 5, 38, 153, 84, 105, 72, 145, 74, 73, 130, 20, 170, 72, 105, 73, 132, 65, 128, 169, 132, 20, 86, 20, 40, 20, 4, 73, 36, 41, 104, 84},
    {25, 134, 17, 82, 6, 5, 162, 150, 162, 165, 154, 36, 145, 166, 154, 0, 68, 134, 102, 170, 70, 164, 132, 88, 36, 149, 170, 166, 162, 26, 102, 145, 153, 24, 85, 153, 65, 106, 98, 74, 153, 169, 73, 153, 98, 149, 162, 85, 6, 5, 97, 36, 4, 10, 98, 82, 65, 0, 148, 137, 97, 41, 85, 128, 70, 9, 164, 24, 104, 85, 102, 98, 8, 9, 168, 16, 10, 98, 165, 105, 10, 134, 150, 146, 8, 2, 133, 68, 89, 10, 166, 64, 5, 5, 1, 133, 134, 74, 133, 153, 69, 130, 153, 148, 105, 82, 34, 154, 0, 149, 134, 154, 9, 169, 170, 129, 136, 68, 133, 37, 138, 96, 138, 165, 102, 40, 72, 165, 80, 5, 26, 89, 90, 169, 160, 138, 132, 165, 34, 73, 153, 153, 34, 149, 20, 89, 40, 132, 41, 150, 25, 160, 20, 81, 25, 89, 69, 38, 132, 89, 169, 164, 100, 85, 150, 8, 88, 166, 85, 132, 101, 165, 41, 90, 80, 102, 102, 134, 106, 98, 150, 136, 65, 137, 36, 164, 166, 16, 85, 5, 149, 37, 102, 0, 81, 168, 161, 132, 0, 68, 132, 82, 153, 5, 8, 0, 9, 152, 164, 16, 129, 81, 65, 4, 82, 97, 129, 97, 98, 148, 106, 145, 149, 0, 132, 22, 2, 80, 9, 73, 0, 132, 160, 24, 68, 138, 16, 129, 82, 4, 42, 68, 8, 5, 6, 170, 150, 4, 166, 80, 162, 41, 144, 5, 18, 128, 72, 4, 0, 80, 106, 10, 74, 69, 130, 65, 8, 34, 32, 18, 41, 74, 4, 72, 32, 4, 16, 105, 161, 8, 16, 133, 21, 33, 164, 5, 148, 132, 85, 162, 145, 65, 138, 90, 80, 68, 37, 164, 164, 168, 65, 102, 80, 90, 34, 82, 128, 73, 154, 134, 82, 150, 21, 162, 5, 42, 164, 97, 6, 4, 25, 66, 89, 85, 134, 134, 166, 144, 150, 169, 21, 149, 1, 86, 69, 85, 24, 102, 98, 153, 26, 162, 65, 1, 9, 84, 166, 105, 4, 90, 2, 164, 65, 100, 81, 160, 105, 102, 152, 18, 90, 153, 164, 85, 129, 170, 86, 22, 168, 70, 74, 134, 84, 18, 74, 89, 138, 129, 37, 98, 68, 86, 146, 89},
    {129, 100, 26, 106, 65, 65, 100, 25, 100, 34, 20, 18, 33, 20, 128, 85, 98, 105, 37, 101, 1, 160, 152, 128, 134, 153, 37, 0, 74, 85, 20, 84, 136, 90, 74, 38, 90, 10, 105, 106, 22, 32, 133, 8, 88, 132, 165, 162, 68, 2, 101, 138, 18, 166, 9, 132, 136, 101, 149, 102, 80, 74, 89, 85, 26, 100, 105, 146, 154, 70, 138, 168, 72, 81, 64, 37, 41, 74, 90, 70, 0, 89, 73, 80, 168, 9, 26, 9, 150, 68, 36, 146, 133, 133, 42, 20, 4, 25, 86, 128, 146, 41, 106, 17, 148, 152, 169, 6, 137, 96, 33, 10, 40, 164, 68, 17, 10, 160, 162, 150, 65, 170, 17, 150, 41, 105, 37, 68, 9, 65, 86, 150, 81, 20, 17, 145, 24, 144, 82, 8, 6, 100, 160, 161, 98, 86, 101, 136, 4, 65, 128, 1, 104, 150, 66, 105, 38, 101, 97, 168, 148, 100, 34, 168, 4, 146, 40, 129, 128, 149, 153, 25, 98, 41, 20, 153, 105, 133, 74, 18, 73, 166, 146, 4, 81, 169, 98, 70, 34, 90, 69, 21, 17, 34, 164, 34, 68, 65, 0, 36, 25, 98, 8, 88, 98, 25, 97, 104, 98, 2, 2, 26, 0, 69, 22, 2, 144, 18, 130, 65, 74, 64, 17, 128, 101, 74, 32, 98, 6, 10, 0, 138, 66, 105, 137, 42, 1, 8, 98, 129, 82, 148, 98, 84, 17, 0, 25, 37, 130, 0, 9, 5, 8, 128, 145, 69, 162, 9, 2, 161, 6, 102, 8, 162, 70, 154, 0, 84, 0, 137, 132, 0, 68, 22, 70, 37, 70, 2, 66, 160, 10, 4, 98, 36, 96, 90, 8, 2, 145, 32, 134, 164, 18, 160, 98, 100, 5, 164, 145, 70, 5, 22, 132, 21, 106, 41, 96, 162, 68, 102, 1, 2, 36, 129, 150, 161, 89, 9, 41, 170, 102, 10, 5, 146, 86, 145, 169, 169, 6, 66, 17, 165, 161, 81, 84, 85, 144, 64, 16, 80, 6, 102, 100, 40, 146, 101, 164, 144, 144, 68, 80, 129, 6, 85, 166, 86, 169, 162, 96, 40, 69, 9, 24, 133, 81, 86, 72, 161, 4, 80, 70, 88, 170, 134, 6, 22, 16, 164, 165, 170, 9, 169, 17, 66},
    {129, 68, 16, 102, 6, 100, 69, 36, 98, 166, 41, 90, 32, 169, 38, 21, 9, 148, 37, 21, 41, 153, 134, 152, 25, 38, 24, 74, 0, 133, 90, 42, 24, 24, 89, 40, 89, 154, 169, 90, 26, 41, 17, 26, 96, 70, 164, 9, 34, 137, 169, 25, 130, 105, 154, 5, 144, 5, 146, 134, 88, 72, 70, 10, 170, 160, 149, 24, 17, 69, 96, 25, 69, 6, 37, 5, 102, 144, 84, 152, 22, 164, 41, 102, 25, 37, 152, 102, 161, 38, 36, 64, 169, 38, 70, 100, 65, 154, 16, 153, 16, 34, 146, 130, 154, 97, 165, 86, 97, 38, 100, 166, 138, 138, 161, 86, 65, 38, 33, 16, 80, 162, 88, 128, 150, 162, 6, 105, 36, 164, 100, 88, 88, 26, 37, 136, 134, 129, 100, 25, 152, 25, 40, 164, 88, 152, 32, 101, 166, 105, 101, 165, 169, 89, 105, 84, 10, 80, 38, 73, 152, 102, 16, 149, 70, 72, 154, 5, 65, 6, 164, 37, 161, 74, 100, 162, 133, 96, 90, 16, 102, 161, 153, 152, 144, 161, 38, 169, 85, 144, 104, 154, 38, 0, 25, 2, 101, 65, 136, 68, 160, 25, 130, 36, 17, 36, 32, 36, 82, 128, 17, 138, 0, 69, 74, 5, 38, 36, 144, 133, 90, 68, 36, 66, 68, 130, 40, 80, 24, 136, 33, 64, 37, 17, 152, 16, 6, 88, 4, 164, 136, 1, 160, 64, 32, 4, 18, 101, 70, 72, 169, 4, 144, 100, 160, 101, 96, 136, 42, 160, 32, 88, 72, 136, 25, 18, 129, 130, 104, 161, 9, 8, 80, 136, 40, 37, 16, 64, 1, 137, 17, 4, 37, 8, 4, 5, 36, 64, 86, 38, 9, 86, 153, 161, 106, 86, 136, 22, 149, 34, 162, 138, 162, 1, 100, 4, 161, 154, 137, 10, 132, 130, 38, 42, 154, 33, 168, 86, 153, 154, 18, 25, 89, 146, 37, 164, 102, 38, 154, 146, 90, 102, 160, 166, 132, 148, 5, 81, 160, 74, 72, 96, 136, 73, 66, 161, 164, 166, 17, 16, 16, 16, 22, 134, 153, 90, 145, 136, 37, 169, 41, 21, 152, 86, 32, 153, 150, 81, 152, 97, 89, 100, 138, 26, 25, 89, 169, 90, 81, 38, 89, 102, 21, 89},
    {90, 100, 137, 37, 101, 32, 4, 69, 10, 16, 5, 104, 81, 133, 73, 152, 64, 5, 38, 85, 69, 37, 101, 22, 130, 24, 22, 22, 2, 96, 25, 89, 150, 161, 152, 146, 150, 154, 5, 144, 154, 80, 25, 16, 96, 9, 105, 105, 105, 136, 64, 150, 89, 166, 66, 137, 24, 84, 96, 153, 42, 88, 81, 132, 64, 146, 160, 150, 133, 150, 36, 41, 2, 66, 17, 73, 82, 104, 41, 22, 6, 100, 5, 66, 24, 101, 133, 5, 73, 9, 101, 154, 33, 96, 100, 166, 133, 145, 74, 130, 169, 41, 152, 89, 150, 85, 161, 66, 146, 98, 69, 81, 70, 64, 5, 72, 150, 165, 88, 25, 160, 64, 154, 86, 42, 86, 164, 101, 90, 105, 5, 18, 17, 170, 164, 145, 68, 82, 37, 146, 153, 146, 161, 102, 148, 152, 1, 4, 136, 166, 160, 102, 38, 89, 85, 105, 170, 16, 69, 137, 89, 89, 150, 166, 74, 89, 138, 102, 148, 161, 6, 2, 32, 149, 64, 134, 162, 2, 25, 154, 84, 81, 146, 152, 133, 86, 33, 21, 85, 90, 97, 154, 69, 136, 144, 128, 32, 36, 152, 134, 33, 165, 169, 137, 88, 72, 98, 73, 24, 33, 80, 37, 152, 146, 96, 154, 9, 81, 18, 16, 90, 73, 105, 25, 132, 72, 0, 1, 136, 2, 82, 36, 64, 146, 138, 9, 5, 106, 89, 168, 137, 38, 160, 80, 0, 20, 105, 18, 20, 128, 153, 6, 130, 32, 80, 5, 18, 33, 1, 162, 17, 34, 129, 104, 152, 18, 136, 66, 36, 38, 133, 8, 5, 96, 152, 64, 144, 26, 74, 128, 20, 100, 106, 128, 66, 82, 104, 98, 138, 101, 146, 136, 148, 2, 85, 136, 2, 137, 101, 9, 168, 161, 166, 80, 5, 38, 37, 162, 74, 102, 22, 18, 132, 144, 138, 85, 84, 168, 98, 36, 162, 168, 153, 134, 70, 160, 105, 22, 154, 80, 162, 4, 132, 20, 21, 25, 153, 37, 5, 153, 80, 10, 169, 80, 40, 26, 86, 82, 41, 137, 162, 149, 97, 25, 168, 169, 106, 104, 41, 2, 154, 84, 165, 25, 41, 153, 40, 69, 154, 84, 137, 100, 25, 84, 102, 146, 36, 90, 145, 106, 137, 8, 105, 136},
    {25, 16, 1, 0, 1, 88, 18, 25, 40, 104, 33, 24, 65, 73, 74, 154, 4, 22, 68, 150, 106, 164, 66, 40, 64, 89, 22, 65, 81, 98, 66, 149, 65, 128, 149, 148, 145, 153, 2, 148, 165, 1, 129, 38, 130, 145, 74, 22, 90, 164, 64, 21, 33, 84, 132, 104, 168, 134, 10, 72, 162, 136, 8, 34, 104, 37, 88, 38, 26, 168, 4, 164, 134, 88, 104, 17, 72, 148, 0, 154, 20, 74, 90, 89, 149, 106, 162, 98, 169, 138, 64, 150, 106, 101, 146, 96, 88, 162, 128, 4, 161, 88, 150, 96, 136, 106, 40, 106, 153, 24, 132, 22, 134, 5, 160, 97, 149, 104, 86, 69, 41, 22, 106, 86, 85, 2, 85, 106, 38, 20, 137, 37, 149, 153, 106, 42, 86, 86, 74, 21, 164, 149, 90, 102, 133, 169, 90, 10, 37, 130, 162, 0, 162, 134, 37, 132, 22, 106, 25, 22, 133, 96, 6, 66, 100, 149, 148, 102, 41, 82, 144, 40, 86, 152, 21, 101, 153, 106, 70, 129, 89, 102, 165, 136, 145, 150, 100, 128, 146, 129, 10, 165, 98, 153, 146, 66, 18, 96, 41, 2, 104, 36, 25, 36, 84, 8, 72, 1, 18, 132, 82, 33, 134, 80, 166, 144, 164, 18, 133, 24, 148, 21, 101, 36, 97, 161, 106, 0, 148, 136, 4, 66, 70, 0, 90, 2, 97, 148, 166, 9, 133, 97, 137, 0, 32, 22, 42, 146, 66, 32, 136, 88, 82, 2, 32, 25, 144, 73, 16, 9, 38, 66, 36, 25, 74, 38, 16, 0, 160, 169, 32, 150, 96, 36, 145, 66, 128, 38, 138, 161, 34, 8, 153, 17, 10, 32, 134, 4, 38, 10, 148, 32, 18, 164, 34, 41, 8, 165, 85, 130, 70, 102, 170, 149, 146, 104, 149, 133, 160, 102, 89, 165, 88, 65, 104, 70, 89, 5, 154, 36, 150, 129, 160, 133, 154, 102, 105, 106, 154, 88, 146, 89, 105, 138, 68, 165, 149, 42, 16, 129, 90, 38, 38, 129, 88, 166, 73, 165, 153, 68, 17, 0, 133, 101, 144, 136, 101, 102, 150, 162, 90, 72, 170, 89, 148, 41, 38, 100, 129, 106, 134, 66, 138, 1, 21, 153, 106, 5, 4, 90, 133, 73, 65, 169},
    {161, 2, 17, 106, 162, 160, 137, 165, 128, 1, 6, 66, 8, 149, 34, 165, 10, 169, 41, 133, 149, 82, 97, 41, 1, 137, 148, 68, 42, 36, 148, 129, 73, 86, 98, 105, 144, 90, 97, 145, 82, 96, 82, 164, 72, 169, 165, 100, 38, 85, 17, 70, 38, 145, 5, 102, 150, 8, 69, 1, 90, 89, 165, 8, 149, 17, 161, 22, 98, 154, 168, 161, 90, 1, 153, 168, 161, 68, 80, 88, 80, 169, 165, 90, 90, 132, 24, 168, 72, 165, 166, 8, 160, 150, 165, 97, 26, 86, 90, 0, 65, 164, 97, 134, 72, 160, 154, 42, 85, 2, 137, 10, 154, 70, 96, 169, 64, 164, 132, 81, 97, 170, 90, 90, 166, 130, 100, 42, 136, 161, 136, 88, 90, 36, 165, 32, 160, 22, 168, 130, 64, 84, 169, 169, 82, 84, 33, 129, 133, 168, 137, 137, 40, 16, 85, 22, 102, 84, 1, 37, 85, 162, 161, 74, 166, 81, 106, 170, 145, 165, 41, 161, 69, 105, 73, 32, 34, 164, 70, 136, 132, 169, 85, 24, 21, 97, 134, 65, 16, 90, 145, 102, 64, 88, 65, 2, 17, 129, 34, 138, 145, 88, 65, 24, 105, 152, 82, 66, 130, 80, 33, 81, 66, 33, 134, 73, 64, 1, 168, 105, 170, 8, 146, 4, 161, 8, 162, 106, 22, 22, 134, 4, 5, 136, 138, 129, 165, 26, 106, 134, 64, 32, 72, 6, 102, 88, 133, 1, 145, 1, 72, 33, 136, 80, 5, 9, 2, 36, 2, 98, 6, 88, 66, 1, 24, 85, 42, 161, 0, 129, 16, 66, 162, 70, 154, 166, 70, 38, 6, 4, 96, 38, 18, 150, 97, 73, 129, 33, 68, 136, 149, 162, 0, 145, 10, 5, 74, 8, 130, 101, 88, 164, 84, 132, 105, 26, 165, 10, 89, 165, 38, 65, 165, 152, 96, 168, 161, 170, 97, 165, 0, 144, 85, 68, 149, 149, 166, 152, 148, 41, 37, 152, 41, 160, 106, 86, 73, 106, 160, 64, 160, 170, 66, 1, 69, 25, 33, 102, 82, 168, 105, 9, 65, 65, 84, 36, 6, 148, 145, 33, 138, 161, 86, 100, 84, 106, 154, 165, 68, 104, 82, 133, 90, 80, 101, 90, 82, 5, 73, 21, 88, 34, 133, 84},
    {168, 69, 10, 73, 72, 4, 9, 20, 97, 36, 42, 160, 169, 86, 150, 162, 65, 161, 129, 160, 136, 134, 33, 152, 165, 37, 70, 17, 84, 105, 4, 34, 10, 2, 170, 5, 162, 34, 100, 136, 164, 10, 38, 70, 66, 25, 72, 169, 85, 136, 38, 0, 32, 66, 169, 5, 41, 128, 18, 90, 165, 38, 100, 152, 130, 160, 16, 69, 6, 34, 97, 138, 105, 8, 168, 5, 148, 88, 9, 8, 90, 69, 170, 149, 16, 5, 74, 84, 170, 144, 41, 74, 101, 132, 89, 33, 74, 2, 9, 160, 33, 144, 170, 137, 5, 84, 166, 148, 84, 150, 149, 5, 130, 97, 65, 161, 164, 165, 165, 169, 170, 98, 64, 154, 100, 16, 18, 105, 84, 164, 106, 18, 68, 10, 69, 89, 82, 24, 101, 138, 166, 38, 136, 134, 153, 150, 106, 9, 6, 9, 169, 129, 166, 26, 70, 150, 169, 68, 88, 96, 169, 88, 97, 22, 90, 137, 146, 20, 100, 149, 170, 152, 1, 170, 81, 17, 101, 26, 90, 8, 104, 133, 148, 104, 150, 10, 97, 100, 148, 72, 154, 165, 82, 160, 32, 33, 25, 22, 160, 132, 128, 149, 168, 20, 66, 154, 10, 96, 128, 80, 38, 145, 128, 148, 68, 130, 86, 165, 86, 68, 36, 100, 6, 0, 69, 33, 88, 40, 166, 138, 21, 41, 166, 34, 128, 98, 64, 148, 96, 89, 106, 0, 153, 32, 70, 4, 168, 20, 5, 73, 162, 138, 146, 128, 5, 0, 105, 8, 129, 130, 32, 65, 146, 104, 128, 88, 2, 70, 161, 168, 4, 66, 84, 166, 153, 32, 32, 161, 96, 38, 164, 41, 160, 25, 70, 164, 132, 0, 169, 40, 146, 133, 162, 162, 105, 33, 69, 104, 10, 16, 133, 128, 22, 88, 97, 132, 20, 6, 33, 81, 106, 1, 161, 100, 65, 105, 154, 169, 170, 146, 70, 0, 148, 98, 33, 165, 21, 64, 137, 169, 168, 144, 149, 17, 166, 150, 65, 68, 18, 154, 24, 32, 169, 170, 153, 133, 149, 40, 146, 138, 6, 166, 106, 168, 86, 160, 36, 138, 80, 22, 82, 5, 104, 0, 21, 106, 149, 105, 104, 166, 34, 2, 2, 2, 10, 42, 74, 169, 74, 149, 32, 22, 102, 41},
    {97, 42, 17, 149, 96, 34, 65, 170, 162, 105, 5, 84, 136, 69, 69, 64, 84, 9, 105, 64, 105, 82, 40, 86, 154, 40, 82, 105, 66, 85, 69, 129, 134, 130, 144, 106, 22, 134, 145, 154, 22, 134, 154, 1, 73, 104, 85, 134, 137, 6, 41, 38, 129, 4, 34, 4, 130, 130, 162, 170, 98, 149, 66, 136, 165, 169, 36, 162, 64, 33, 100, 34, 148, 72, 37, 74, 65, 81, 33, 5, 26, 24, 101, 101, 146, 169, 129, 21, 10, 86, 105, 129, 105, 1, 101, 37, 88, 130, 164, 36, 170, 65, 41, 9, 96, 136, 101, 69, 165, 8, 90, 104, 0, 89, 85, 161, 74, 96, 106, 134, 26, 40, 84, 73, 37, 1, 42, 169, 105, 84, 65, 150, 150, 138, 165, 105, 129, 164, 101, 154, 130, 26, 97, 101, 26, 81, 32, 161, 165, 90, 80, 102, 170, 154, 22, 8, 25, 165, 169, 106, 104, 169, 82, 70, 105, 5, 134, 73, 101, 100, 134, 104, 70, 128, 154, 152, 166, 17, 154, 148, 129, 69, 38, 166, 80, 85, 73, 22, 26, 154, 33, 136, 161, 9, 34, 25, 74, 64, 17, 130, 66, 10, 100, 68, 0, 80, 24, 101, 25, 0, 96, 145, 1, 2, 138, 82, 145, 80, 73, 68, 26, 101, 9, 10, 68, 150, 64, 152, 66, 150, 4, 161, 33, 17, 10, 32, 21, 128, 149, 80, 102, 1, 148, 101, 104, 138, 36, 40, 132, 4, 5, 146, 24, 130, 129, 70, 4, 22, 168, 68, 17, 154, 9, 132, 81, 133, 80, 89, 98, 64, 102, 2, 8, 69, 34, 105, 73, 1, 150, 66, 102, 68, 84, 34, 129, 130, 37, 4, 36, 64, 5, 133, 89, 90, 5, 132, 148, 22, 1, 144, 104, 84, 169, 169, 97, 82, 100, 166, 152, 17, 165, 148, 9, 24, 84, 41, 101, 90, 24, 21, 22, 24, 86, 152, 81, 169, 105, 149, 154, 166, 18, 5, 105, 165, 33, 73, 21, 96, 41, 102, 22, 165, 38, 88, 6, 154, 152, 149, 66, 64, 146, 17, 149, 20, 106, 88, 170, 145, 128, 130, 90, 41, 80, 165, 26, 72, 10, 153, 128, 21, 154, 33, 130, 132, 149, 134, 101, 146, 134, 130, 26, 132, 25, 130},
    {22, 81, 24, 24, 105, 133, 5, 149, 41, 161, 33, 22, 168, 101, 144, 136, 149, 101, 165, 21, 37, 70, 148, 2, 166, 133, 84, 100, 65, 148, 90, 41, 82, 8, 10, 146, 10, 8, 164, 66, 64, 4, 25, 160, 85, 134, 166, 72, 149, 104, 132, 0, 138, 73, 68, 144, 168, 100, 37, 170, 22, 40, 150, 37, 22, 6, 90, 90, 73, 89, 82, 64, 153, 161, 4, 88, 2, 74, 6, 136, 40, 21, 70, 21, 74, 85, 9, 20, 106, 6, 166, 136, 5, 37, 133, 36, 104, 8, 129, 18, 138, 105, 18, 88, 138, 33, 148, 96, 168, 102, 148, 24, 26, 98, 100, 80, 136, 22, 37, 148, 72, 74, 88, 134, 84, 26, 106, 89, 149, 97, 134, 130, 106, 72, 5, 104, 104, 41, 65, 74, 162, 134, 149, 148, 170, 70, 85, 4, 150, 138, 20, 137, 22, 154, 36, 134, 21, 165, 166, 133, 162, 97, 74, 101, 21, 170, 38, 133, 37, 85, 8, 102, 146, 154, 22, 166, 85, 17, 90, 74, 132, 86, 154, 10, 89, 137, 70, 8, 36, 42, 165, 74, 21, 10, 138, 2, 72, 5, 145, 164, 68, 34, 165, 72, 137, 17, 168, 129, 72, 25, 1, 138, 74, 132, 2, 18, 129, 128, 22, 2, 2, 170, 17, 134, 148, 82, 38, 24, 42, 106, 6, 68, 5, 144, 0, 96, 4, 34, 144, 68, 168, 17, 74, 21, 20, 149, 101, 80, 128, 2, 37, 169, 8, 40, 144, 5, 10, 88, 70, 42, 128, 32, 2, 36, 105, 130, 74, 152, 8, 64, 98, 98, 128, 90, 104, 149, 154, 10, 26, 98, 18, 85, 72, 32, 16, 73, 84, 81, 104, 65, 166, 138, 85, 144, 81, 33, 168, 24, 154, 70, 96, 105, 133, 105, 133, 150, 6, 74, 70, 166, 101, 169, 81, 166, 74, 36, 85, 17, 169, 80, 66, 88, 170, 88, 100, 165, 133, 5, 90, 170, 153, 149, 149, 36, 34, 40, 42, 82, 1, 34, 149, 97, 72, 21, 96, 38, 97, 166, 169, 145, 41, 101, 9, 166, 88, 144, 81, 9, 69, 9, 166, 164, 74, 25, 162, 32, 85, 134, 42, 5, 72, 4, 169, 10, 105, 16, 85, 161, 170, 166, 82, 37, 97, 10},
    {150, 146, 97, 146, 170, 146, 130, 146, 149, 154, 85, 150, 150, 105, 146, 101, 101, 150, 146, 170, 154, 146, 162, 101, 101, 150, 101, 154, 69, 150, 5, 134, 101, 105, 101, 101, 101, 105, 150, 105, 97, 85, 101, 146, 81, 105, 146, 97, 154, 105, 150, 105, 97, 69, 40, 154, 89, 84, 170, 81, 97, 65, 138, 146, 134, 69, 138, 65, 65, 101, 130, 97, 129, 146, 138, 166, 146, 165, 138, 97, 97, 150, 146, 82, 97, 150, 41, 154, 101, 26, 146, 105, 150, 154, 90, 22, 154, 97, 97, 97, 97, 154, 101, 150, 105, 162, 145, 146, 90, 73, 150, 154, 97, 129, 154, 130, 85, 150, 162, 69, 100, 97, 150, 89, 150, 130, 146, 148, 150, 154, 150, 105, 101, 97, 154, 150, 154, 105, 150, 101, 101, 101, 150, 154, 105, 101, 150, 150, 97, 90, 150, 90, 97, 101, 105, 97, 74, 154, 150, 105, 97, 134, 73, 150, 134, 148, 69, 154, 150, 138, 90, 154, 152, 161, 130, 170, 146, 154, 101, 105, 150, 150, 101, 97, 146, 150, 150, 69, 4, 101, 154, 97, 146, 101, 65, 97, 73, 154, 162, 66, 150, 105, 165, 169, 85, 150, 90, 134, 65, 73, 150, 138, 101, 22, 97, 105, 146, 150, 101, 97, 97, 148, 162, 130, 150, 40, 150, 101, 101, 105, 82, 154, 130, 72, 65, 33, 130, 40, 162, 138, 165, 146, 105, 150, 146, 148, 150, 82, 89, 105, 165, 146, 101, 86, 154, 146, 73, 97, 101, 38, 138, 105, 97, 169, 69, 73, 97, 154, 69, 68, 161, 97, 150, 101, 105, 150, 101, 65, 81, 105, 36, 154, 97, 73, 146, 32, 162, 136, 80, 154, 66, 84, 162, 146, 169, 97, 97, 73, 146, 136, 154, 161, 134, 162, 138, 146, 138, 101, 73, 130, 154, 105, 86, 146, 144, 154, 154, 138, 101, 102, 69, 105, 97, 97, 150, 150, 146, 146, 101, 148, 97, 154, 150, 150, 146, 165, 101, 104, 146, 101, 146, 154, 97, 105, 65, 72, 170, 97, 73, 146, 97, 154, 137, 154, 101, 97, 105, 154, 134, 85, 69, 154, 105, 105, 88, 101, 22, 150, 105, 154, 105, 90, 101, 161, 129, 97, 144, 165, 97, 90, 165, 146, 146, 97},
    {161, 86, 96, 66, 84, 86, 82, 20, 86, 82, 144, 81, 164, 80, 97, 70, 4, 152, 82, 2, 102, 144, 146, 72, 144, 82, 40, 22, 136, 34, 6, 129, 160, 9, 41, 72, 72, 169, 18, 73, 32, 134, 169, 150, 149, 69, 86, 37, 90, 133, 128, 10, 34, 129, 148, 153, 101, 152, 20, 38, 144, 17, 154, 148, 82, 64, 21, 160, 97, 69, 90, 18, 82, 100, 68, 24, 98, 165, 21, 84, 1, 66, 10, 82, 152, 90, 161, 16, 161, 150, 86, 101, 26, 18, 64, 82, 82, 89, 168, 168, 97, 18, 164, 154, 41, 148, 96, 84, 102, 161, 18, 34, 33, 145, 166, 21, 36, 22, 85, 168, 162, 85, 154, 69, 37, 17, 162, 137, 134, 42, 6, 41, 32, 169, 86, 2, 85, 164, 68, 5, 41, 165, 70, 22, 137, 168, 86, 88, 137, 85, 101, 22, 136, 97, 137, 41, 25, 42, 144, 106, 169, 153, 1, 150, 82, 106, 169, 20, 64, 70, 64, 66, 150, 38, 154, 148, 2, 32, 161, 73, 148, 86, 101, 168, 166, 70, 22, 133, 98, 145, 150, 9, 38, 8, 137, 161, 80, 20, 33, 85, 84, 5, 41, 128, 26, 6, 150, 73, 80, 97, 74, 165, 32, 22, 137, 165, 38, 69, 105, 72, 145, 88, 69, 145, 21, 32, 26, 161, 9, 145, 17, 152, 86, 105, 42, 21, 128, 1, 6, 2, 128, 18, 130, 106, 36, 16, 22, 70, 16, 168, 26, 22, 37, 22, 166, 18, 72, 5, 4, 32, 21, 161, 169, 65, 32, 32, 4, 5, 42, 97, 5, 74, 32, 33, 25, 22, 73, 150, 80, 73, 161, 64, 21, 25, 150, 164, 16, 34, 129, 82, 164, 8, 37, 8, 81, 166, 169, 65, 134, 153, 144, 17, 6, 166, 22, 96, 82, 137, 21, 160, 70, 137, 160, 166, 146, 152, 130, 165, 66, 149, 80, 41, 41, 41, 160, 130, 98, 98, 104, 16, 169, 132, 100, 148, 26, 168, 170, 150, 86, 40, 84, 16, 136, 128, 137, 168, 165, 89, 98, 84, 101, 1, 9, 2, 100, 165, 82, 128, 21, 81, 169, 90, 25, 170, 69, 164, 168, 160, 128, 22, 25, 86, 41, 41, 25, 133, 150, 164, 5, 89, 96, 149, 32, 137},
    {90, 8, 0, 162, 98, 98, 26, 81, 164, 164, 145, 97, 2, 81, 168, 20, 133, 32, 168, 105, 150, 66, 165, 149, 148, 100, 0, 8, 0, 165, 68, 137, 153, 169, 21, 148, 153, 89, 20, 21, 133, 21, 153, 101, 89, 165, 70, 137, 98, 41, 134, 137, 165, 66, 162, 5, 89, 24, 85, 65, 72, 129, 38, 5, 72, 105, 72, 137, 128, 89, 128, 153, 166, 40, 132, 80, 70, 72, 9, 6, 129, 102, 21, 73, 144, 106, 129, 98, 149, 82, 38, 165, 66, 10, 106, 101, 96, 160, 145, 153, 148, 96, 21, 40, 137, 162, 65, 70, 128, 86, 70, 72, 136, 170, 69, 130, 0, 24, 138, 164, 85, 26, 38, 168, 80, 148, 26, 170, 38, 170, 66, 146, 97, 136, 170, 128, 104, 168, 90, 21, 81, 98, 8, 34, 164, 149, 68, 104, 80, 102, 82, 166, 42, 169, 166, 145, 25, 73, 40, 160, 40, 102, 150, 72, 20, 90, 5, 168, 0, 101, 26, 146, 134, 105, 106, 21, 16, 65, 149, 5, 102, 80, 146, 0, 85, 104, 69, 160, 146, 128, 104, 165, 40, 152, 128, 0, 24, 68, 130, 4, 80, 144, 5, 1, 33, 4, 74, 96, 74, 86, 64, 146, 32, 20, 26, 148, 102, 136, 2, 1, 32, 72, 154, 154, 100, 2, 70, 33, 16, 148, 70, 26, 6, 132, 5, 42, 68, 165, 33, 80, 132, 9, 144, 40, 38, 68, 10, 10, 5, 130, 33, 97, 164, 152, 1, 70, 130, 0, 5, 145, 146, 1, 38, 138, 24, 133, 82, 80, 1, 22, 66, 9, 70, 34, 148, 74, 6, 8, 138, 148, 133, 98, 0, 82, 100, 129, 160, 165, 160, 34, 88, 170, 90, 66, 66, 32, 17, 5, 26, 102, 106, 2, 165, 134, 74, 18, 5, 133, 90, 20, 84, 6, 90, 82, 10, 74, 74, 22, 21, 98, 146, 69, 152, 25, 105, 170, 74, 80, 144, 65, 37, 88, 102, 170, 84, 152, 128, 162, 98, 145, 24, 80, 149, 170, 24, 168, 166, 130, 160, 68, 25, 22, 33, 2, 16, 89, 166, 84, 40, 148, 149, 1, 161, 65, 136, 25, 22, 102, 17, 100, 149, 98, 22, 152, 129, 137, 169, 66, 136, 90, 89, 101, 37, 137},
    {72, 40, 22, 41, 136, 169, 9, 170, 137, 9, 20, 8, 169, 21, 72, 150, 69, 104, 89, 152, 73, 104, 169, 86, 84, 169, 38, 169, 165, 169, 84, 170, 22, 22, 22, 150, 22, 22, 24, 22, 22, 37, 150, 169, 21, 86, 169, 150, 169, 22, 73, 166, 68, 149, 10, 41, 22, 69, 169, 21, 68, 100, 104, 169, 169, 22, 153, 21, 85, 6, 137, 100, 106, 136, 137, 42, 89, 74, 41, 5, 86, 41, 41, 33, 150, 41, 90, 137, 150, 101, 33, 102, 169, 169, 37, 33, 105, 134, 86, 102, 86, 169, 134, 105, 70, 41, 9, 104, 102, 38, 137, 137, 6, 153, 25, 170, 22, 41, 160, 132, 17, 85, 105, 69, 152, 73, 153, 74, 169, 41, 25, 86, 86, 22, 170, 105, 169, 85, 73, 86, 166, 6, 105, 41, 22, 6, 169, 89, 38, 85, 72, 97, 86, 150, 102, 166, 150, 105, 25, 102, 86, 72, 86, 89, 9, 24, 150, 25, 41, 153, 85, 41, 20, 34, 170, 168, 42, 169, 166, 22, 41, 73, 86, 86, 138, 41, 137, 100, 81, 22, 41, 22, 9, 86, 86, 150, 102, 41, 9, 4, 105, 102, 66, 137, 102, 105, 68, 137, 86, 70, 40, 104, 86, 4, 22, 70, 105, 10, 68, 132, 86, 106, 9, 74, 41, 16, 9, 22, 86, 86, 70, 9, 137, 38, 164, 80, 41, 16, 25, 41, 152, 137, 6, 73, 169, 5, 9, 102, 68, 36, 9, 41, 70, 5, 89, 41, 4, 22, 20, 130, 137, 20, 6, 90, 2, 70, 132, 137, 4, 2, 168, 68, 40, 86, 70, 169, 70, 134, 150, 68, 150, 137, 0, 38, 8, 152, 9, 136, 148, 40, 42, 84, 136, 168, 73, 150, 148, 22, 10, 8, 72, 137, 137, 104, 41, 104, 137, 70, 69, 168, 41, 22, 133, 89, 73, 169, 40, 90, 133, 102, 6, 86, 6, 150, 89, 25, 41, 137, 102, 72, 150, 40, 169, 105, 169, 146, 84, 85, 41, 4, 41, 41, 86, 64, 149, 36, 105, 86, 86, 88, 86, 137, 74, 40, 150, 70, 6, 73, 168, 86, 134, 153, 70, 20, 36, 68, 73, 9, 86, 105, 150, 41, 102, 18, 82, 22, 41, 80, 102, 137, 26, 105, 41, 22},
    {66, 164, 24, 129, 149, 161, 148, 18, 165, 42, 34, 37, 9, 24, 97, 90, 81, 69, 0, 38, 106, 100, 42, 72, 80, 97, 146, 65, 128, 165, 85, 170, 148, 134, 36, 0, 2, 102, 84, 152, 105, 90, 166, 6, 165, 33, 137, 64, 164, 81, 40, 136, 85, 88, 68, 97, 4, 85, 165, 34, 81, 162, 70, 129, 0, 85, 4, 34, 96, 146, 133, 164, 165, 168, 96, 162, 74, 6, 32, 85, 130, 101, 68, 68, 166, 36, 160, 34, 9, 153, 101, 26, 85, 41, 169, 160, 164, 88, 106, 98, 33, 165, 169, 136, 10, 101, 89, 129, 66, 9, 150, 149, 81, 146, 154, 37, 66, 105, 88, 102, 168, 150, 85, 90, 104, 150, 40, 106, 98, 100, 86, 74, 104, 69, 86, 72, 84, 165, 38, 20, 74, 154, 144, 160, 69, 106, 164, 128, 38, 146, 100, 69, 22, 146, 69, 90, 138, 104, 166, 170, 80, 133, 80, 101, 166, 64, 84, 101, 88, 154, 86, 41, 84, 86, 98, 84, 161, 162, 64, 150, 66, 85, 69, 66, 170, 24, 129, 134, 146, 26, 64, 133, 134, 104, 165, 162, 97, 1, 40, 18, 5, 5, 38, 89, 42, 33, 168, 16, 96, 136, 136, 88, 98, 2, 144, 153, 0, 137, 170, 0, 41, 69, 16, 16, 20, 5, 130, 0, 134, 152, 68, 81, 21, 132, 42, 86, 32, 17, 20, 160, 22, 34, 106, 1, 148, 133, 153, 160, 20, 66, 84, 168, 138, 149, 128, 133, 165, 96, 146, 66, 146, 26, 4, 33, 10, 89, 40, 128, 69, 132, 70, 32, 40, 130, 106, 16, 2, 145, 8, 66, 17, 101, 104, 9, 26, 81, 85, 100, 73, 133, 100, 36, 10, 101, 130, 98, 170, 160, 161, 128, 81, 102, 20, 169, 145, 21, 102, 90, 165, 164, 105, 106, 96, 137, 98, 81, 9, 162, 21, 21, 170, 38, 164, 130, 145, 169, 73, 89, 68, 150, 160, 129, 85, 69, 42, 26, 73, 136, 133, 136, 81, 145, 37, 20, 152, 6, 149, 24, 96, 68, 6, 32, 101, 69, 42, 17, 149, 89, 6, 18, 17, 38, 150, 154, 18, 160, 34, 69, 130, 150, 6, 102, 132, 26, 0, 106, 130, 170, 42, 41, 16, 25, 26, 148},
    {132, 4, 136, 134, 166, 68, 38, 128, 166, 90, 138, 148, 80, 102, 85, 73, 105, 24, 66, 6, 160, 84, 90, 9, 82, 86, 106, 41, 37, 6, 145, 89, 154, 134, 21, 85, 34, 165, 166, 89, 5, 101, 153, 66, 17, 145, 32, 154, 22, 129, 74, 101, 33, 133, 164, 89, 82, 101, 105, 1, 161, 10, 89, 36, 162, 17, 32, 89, 25, 161, 70, 2, 81, 65, 100, 36, 104, 170, 152, 70, 133, 134, 66, 145, 145, 66, 72, 64, 149, 22, 18, 154, 128, 82, 17, 65, 9, 10, 25, 105, 25, 10, 41, 169, 9, 8, 169, 1, 101, 5, 6, 25, 90, 153, 164, 90, 38, 105, 101, 69, 170, 2, 70, 17, 134, 104, 73, 168, 96, 170, 10, 129, 153, 90, 86, 33, 25, 9, 36, 153, 41, 161, 104, 97, 105, 153, 18, 101, 88, 100, 97, 101, 8, 149, 34, 149, 105, 100, 89, 22, 82, 90, 150, 9, 100, 34, 137, 36, 34, 153, 98, 98, 4, 26, 10, 102, 2, 38, 133, 150, 32, 104, 153, 17, 166, 166, 101, 149, 160, 89, 86, 90, 74, 161, 1, 34, 164, 81, 154, 69, 0, 129, 138, 144, 18, 100, 65, 164, 168, 161, 97, 85, 66, 73, 5, 106, 128, 6, 10, 6, 2, 161, 133, 65, 73, 164, 74, 72, 129, 128, 68, 97, 84, 162, 40, 129, 74, 0, 16, 32, 152, 88, 20, 154, 18, 38, 5, 101, 64, 84, 150, 24, 8, 101, 80, 36, 6, 10, 64, 1, 148, 24, 136, 138, 168, 82, 134, 16, 80, 101, 129, 162, 0, 150, 164, 80, 65, 66, 132, 145, 68, 73, 165, 73, 20, 84, 20, 64, 33, 64, 25, 38, 130, 20, 1, 138, 88, 40, 38, 165, 133, 100, 165, 150, 70, 70, 86, 128, 65, 68, 82, 25, 160, 150, 9, 2, 88, 137, 98, 81, 24, 165, 162, 144, 128, 84, 102, 166, 145, 150, 146, 97, 136, 130, 74, 170, 132, 9, 84, 40, 104, 4, 8, 133, 10, 138, 1, 145, 153, 36, 22, 128, 150, 73, 16, 2, 25, 162, 22, 154, 4, 84, 86, 149, 149, 150, 138, 22, 22, 70, 149, 96, 152, 6, 25, 41, 90, 102, 16, 150, 134, 170, 90, 96},
    {42, 101, 24, 105, 164, 161, 101, 128, 80, 5, 80, 16, 105, 145, 82, 2, 74, 161, 90, 0, 164, 82, 169, 152, 146, 169, 129, 169, 102, 105, 21, 90, 154, 86, 86, 150, 20, 84, 96, 82, 86, 106, 86, 37, 70, 106, 169, 18, 41, 22, 105, 17, 26, 144, 68, 170, 90, 36, 168, 80, 74, 10, 160, 101, 9, 73, 161, 150, 22, 9, 40, 86, 89, 33, 90, 6, 106, 145, 72, 64, 96, 101, 170, 168, 86, 105, 18, 169, 82, 41, 97, 152, 33, 169, 41, 161, 98, 86, 22, 5, 86, 106, 82, 42, 26, 82, 144, 162, 81, 146, 168, 9, 86, 154, 168, 24, 21, 130, 97, 170, 89, 89, 38, 150, 161, 138, 152, 84, 138, 169, 138, 18, 134, 88, 129, 105, 104, 154, 169, 84, 18, 82, 96, 169, 86, 146, 105, 41, 22, 65, 33, 37, 146, 24, 146, 25, 160, 164, 25, 17, 149, 105, 149, 37, 153, 8, 145, 165, 169, 137, 169, 10, 145, 81, 10, 153, 102, 101, 146, 86, 169, 169, 86, 22, 154, 37, 169, 101, 104, 86, 169, 86, 41, 150, 149, 26, 100, 33, 25, 68, 36, 20, 1, 4, 36, 160, 41, 105, 82, 6, 37, 105, 25, 128, 26, 153, 129, 88, 129, 24, 37, 101, 9, 0, 161, 66, 164, 82, 22, 20, 166, 65, 16, 64, 70, 21, 41, 21, 33, 104, 82, 32, 20, 41, 104, 33, 32, 129, 146, 10, 146, 164, 2, 66, 169, 36, 145, 9, 17, 24, 152, 26, 129, 33, 102, 22, 100, 130, 18, 72, 18, 149, 66, 148, 86, 41, 80, 146, 82, 150, 16, 105, 88, 2, 1, 146, 137, 1, 150, 101, 161, 20, 154, 96, 105, 150, 82, 153, 169, 130, 40, 146, 130, 88, 73, 41, 9, 70, 106, 80, 169, 146, 40, 129, 165, 106, 170, 84, 102, 70, 9, 89, 86, 86, 101, 165, 169, 8, 86, 145, 150, 161, 165, 165, 169, 16, 26, 1, 97, 26, 149, 69, 64, 133, 90, 102, 160, 104, 86, 129, 21, 168, 97, 8, 137, 10, 40, 138, 25, 169, 22, 137, 149, 24, 144, 80, 16, 105, 146, 169, 70, 161, 148, 150, 37, 150, 152, 26, 86, 165, 82, 41, 105, 90},
    {81, 36, 82, 149, 6, 165, 165, 65, 4, 84, 73, 154, 81, 10, 81, 42, 90, 24, 21, 134, 72, 89, 21, 169, 154, 89, 66, 16, 72, 86, 24, 101, 130, 162, 170, 41, 42, 170, 90, 42, 42, 161, 162, 20, 153, 34, 101, 133, 21, 42, 85, 42, 89, 146, 138, 22, 106, 68, 84, 170, 100, 2, 41, 84, 81, 9, 84, 170, 166, 145, 16, 8, 82, 34, 1, 149, 101, 102, 81, 170, 106, 149, 150, 17, 136, 85, 166, 17, 165, 149, 17, 9, 22, 89, 84, 80, 64, 170, 74, 88, 169, 21, 9, 150, 106, 81, 88, 84, 90, 153, 149, 82, 154, 154, 74, 85, 133, 88, 165, 98, 24, 24, 89, 40, 146, 74, 17, 146, 38, 149, 149, 166, 90, 162, 149, 88, 89, 100, 85, 10, 32, 168, 85, 84, 34, 106, 85, 17, 34, 20, 80, 101, 72, 36, 64, 105, 162, 84, 170, 165, 161, 21, 104, 84, 37, 18, 105, 33, 129, 149, 138, 128, 86, 5, 37, 84, 65, 130, 162, 34, 81, 85, 42, 42, 137, 85, 86, 170, 162, 162, 149, 170, 145, 42, 42, 38, 145, 17, 70, 68, 25, 128, 42, 20, 42, 88, 144, 9, 72, 161, 8, 154, 154, 16, 128, 22, 38, 146, 130, 9, 10, 169, 165, 34, 144, 88, 24, 40, 170, 42, 88, 17, 129, 22, 70, 106, 85, 16, 24, 37, 42, 148, 18, 84, 21, 161, 25, 153, 132, 144, 64, 66, 98, 136, 16, 17, 0, 80, 24, 98, 20, 165, 130, 152, 98, 154, 98, 21, 165, 74, 68, 168, 6, 136, 136, 145, 41, 18, 136, 98, 88, 37, 72, 132, 25, 161, 88, 20, 42, 145, 137, 166, 101, 70, 148, 106, 133, 8, 73, 165, 96, 38, 101, 69, 145, 149, 38, 17, 21, 38, 82, 33, 137, 36, 102, 150, 149, 10, 18, 166, 90, 170, 130, 170, 20, 80, 85, 37, 165, 80, 5, 85, 81, 65, 148, 168, 68, 168, 4, 146, 36, 102, 106, 152, 170, 36, 69, 5, 168, 162, 138, 37, 18, 132, 40, 130, 72, 150, 84, 74, 70, 18, 38, 165, 153, 146, 101, 85, 170, 100, 42, 84, 170, 160, 144, 104, 21, 166, 106, 18, 130, 26, 96, 98},
    {40, 86, 170, 0, 106, 68, 104, 90, 74, 66, 84, 5, 72, 66, 72, 150, 130, 150, 90, 81, 74, 41, 89, 10, 146, 66, 102, 106, 128, 106, 90, 136, 148, 9, 146, 128, 166, 170, 150, 145, 136, 4, 9, 104, 162, 21, 104, 153, 66, 160, 85, 128, 168, 20, 42, 64, 145, 38, 104, 129, 96, 144, 90, 102, 133, 154, 106, 149, 153, 37, 66, 153, 146, 64, 128, 24, 162, 144, 134, 8, 145, 74, 102, 165, 134, 98, 144, 90, 144, 81, 90, 161, 64, 72, 64, 88, 105, 148, 168, 129, 16, 101, 166, 105, 144, 101, 86, 69, 129, 160, 153, 20, 161, 17, 106, 17, 148, 86, 38, 145, 105, 37, 98, 34, 81, 170, 65, 130, 69, 97, 96, 144, 166, 154, 104, 42, 80, 37, 106, 150, 153, 128, 82, 88, 145, 154, 98, 38, 130, 169, 34, 166, 166, 68, 161, 152, 169, 106, 105, 134, 20, 89, 132, 82, 36, 129, 164, 149, 86, 82, 169, 32, 9, 42, 17, 0, 22, 34, 164, 137, 81, 102, 146, 150, 8, 106, 106, 134, 168, 145, 88, 21, 98, 146, 133, 22, 64, 104, 24, 20, 10, 144, 150, 89, 166, 104, 73, 74, 16, 65, 100, 168, 166, 24, 165, 22, 8, 10, 16, 150, 150, 8, 25, 4, 98, 153, 102, 161, 129, 132, 2, 96, 4, 24, 40, 2, 66, 150, 10, 0, 26, 97, 128, 98, 97, 88, 100, 144, 134, 160, 18, 34, 148, 33, 38, 8, 25, 148, 21, 164, 89, 129, 8, 144, 129, 165, 8, 72, 168, 164, 74, 33, 32, 134, 148, 65, 132, 0, 145, 150, 148, 64, 128, 68, 66, 41, 130, 33, 144, 64, 72, 97, 16, 90, 133, 38, 144, 134, 74, 97, 69, 73, 42, 81, 86, 73, 150, 81, 146, 72, 84, 21, 73, 88, 66, 96, 98, 137, 144, 161, 134, 161, 169, 138, 80, 98, 66, 166, 148, 160, 133, 102, 82, 72, 102, 16, 26, 70, 41, 4, 101, 148, 136, 145, 130, 25, 65, 133, 22, 64, 152, 81, 1, 42, 84, 146, 160, 20, 40, 133, 137, 98, 32, 166, 10, 90, 34, 85, 165, 82, 145, 104, 153, 129, 138, 134, 66, 148, 153, 137, 165, 37, 74, 145},
    {37, 26, 69, 42, 9, 98, 9, 160, 138, 25, 1, 168, 138, 85, 70, 6, 148, 138, 37, 132, 86, 86, 84, 21, 38, 24, 169, 70, 69, 74, 8, 85, 82, 169, 153, 148, 101, 153, 84, 149, 145, 41, 1, 168, 105, 20, 26, 169, 74, 149, 1, 1, 21, 18, 72, 10, 145, 145, 134, 161, 146, 133, 100, 34, 73, 84, 154, 18, 4, 81, 26, 168, 145, 166, 40, 72, 82, 100, 66, 154, 145, 88, 106, 74, 145, 74, 164, 102, 129, 102, 74, 149, 66, 20, 102, 70, 70, 145, 33, 164, 145, 146, 65, 90, 148, 34, 89, 64, 90, 1, 106, 90, 130, 26, 86, 165, 37, 88, 82, 9, 17, 33, 98, 42, 168, 97, 69, 166, 101, 150, 106, 33, 21, 165, 134, 9, 38, 137, 33, 161, 129, 169, 66, 82, 153, 17, 82, 70, 41, 170, 86, 72, 97, 0, 164, 129, 100, 6, 74, 133, 96, 41, 20, 138, 80, 22, 21, 100, 64, 100, 101, 72, 38, 8, 101, 10, 169, 41, 161, 33, 106, 70, 145, 160, 80, 98, 33, 152, 145, 9, 82, 145, 90, 149, 132, 144, 17, 98, 74, 170, 34, 4, 5, 72, 161, 64, 18, 1, 153, 5, 100, 6, 150, 162, 129, 148, 26, 25, 5, 1, 33, 149, 134, 136, 106, 165, 72, 148, 160, 161, 134, 64, 70, 160, 96, 0, 162, 69, 64, 106, 24, 72, 132, 64, 66, 128, 96, 165, 154, 152, 104, 106, 36, 138, 102, 34, 21, 133, 36, 90, 73, 40, 145, 1, 104, 20, 64, 65, 24, 20, 24, 161, 22, 152, 1, 106, 133, 17, 161, 160, 37, 86, 96, 17, 96, 1, 16, 86, 21, 104, 96, 150, 145, 4, 169, 162, 24, 137, 24, 20, 86, 84, 10, 164, 1, 84, 130, 38, 33, 5, 96, 169, 162, 26, 74, 40, 90, 133, 85, 34, 65, 164, 133, 149, 74, 90, 146, 96, 130, 106, 153, 106, 90, 70, 154, 138, 1, 88, 64, 25, 4, 10, 148, 41, 73, 128, 106, 73, 20, 134, 1, 68, 129, 6, 40, 17, 152, 26, 74, 150, 25, 18, 145, 22, 70, 169, 41, 130, 145, 100, 97, 90, 169, 145, 1, 133, 106, 170, 149, 22, 17, 97, 22, 148},
    {134, 66, 32, 8, 37, 36, 32, 136, 165, 149, 152, 38, 88, 37, 25, 66, 32, 133, 145, 161, 86, 153, 38, 165, 149, 2, 1, 85, 72, 137, 136, 102, 69, 104, 161, 2, 38, 70, 170, 170, 4, 148, 40, 22, 106, 104, 24, 6, 41, 17, 0, 4, 148, 33, 104, 136, 22, 86, 98, 69, 8, 25, 96, 101, 22, 149, 64, 82, 104, 4, 134, 24, 33, 40, 144, 21, 168, 170, 161, 89, 34, 100, 149, 106, 134, 100, 96, 80, 100, 18, 148, 88, 132, 98, 136, 2, 105, 170, 22, 22, 152, 89, 34, 138, 22, 168, 164, 21, 146, 134, 106, 26, 2, 170, 81, 150, 130, 137, 42, 164, 168, 34, 154, 148, 70, 80, 85, 41, 137, 41, 138, 0, 69, 41, 148, 38, 26, 152, 26, 32, 38, 70, 169, 137, 154, 65, 5, 148, 4, 98, 84, 21, 102, 96, 164, 36, 5, 17, 137, 101, 138, 37, 134, 84, 88, 18, 150, 26, 65, 105, 150, 148, 106, 102, 42, 166, 38, 73, 170, 90, 84, 96, 134, 164, 153, 160, 97, 137, 169, 34, 145, 134, 0, 130, 96, 161, 25, 21, 0, 0, 149, 17, 36, 64, 68, 16, 90, 64, 128, 152, 70, 25, 2, 100, 170, 144, 106, 74, 88, 68, 136, 22, 17, 84, 84, 132, 4, 32, 0, 146, 153, 34, 128, 37, 102, 34, 17, 136, 69, 69, 106, 24, 16, 42, 8, 164, 4, 130, 4, 2, 98, 96, 144, 106, 144, 100, 160, 144, 162, 0, 129, 88, 32, 129, 20, 26, 100, 80, 0, 132, 4, 36, 4, 25, 130, 149, 5, 10, 170, 2, 21, 81, 10, 17, 138, 162, 0, 162, 80, 129, 85, 144, 40, 20, 169, 2, 70, 98, 98, 25, 150, 73, 105, 150, 73, 130, 166, 105, 72, 10, 69, 102, 5, 160, 148, 101, 16, 6, 34, 72, 85, 38, 42, 64, 84, 133, 88, 6, 150, 133, 106, 34, 169, 169, 88, 16, 10, 42, 32, 1, 133, 21, 74, 145, 21, 74, 9, 138, 104, 38, 32, 136, 133, 138, 166, 2, 36, 136, 133, 165, 98, 34, 6, 70, 145, 153, 18, 32, 65, 153, 1, 17, 25, 146, 105, 102, 68, 166, 89, 26, 36, 81, 152, 102},
    {26, 32, 86, 96, 136, 136, 10, 130, 164, 162, 20, 133, 26, 100, 134, 74, 24, 22, 26, 73, 162, 88, 1, 97, 153, 102, 153, 153, 168, 16, 36, 82, 41, 37, 101, 89, 101, 101, 89, 105, 100, 82, 69, 136, 164, 70, 145, 74, 137, 68, 146, 166, 70, 36, 5, 81, 34, 26, 90, 133, 2, 138, 64, 152, 132, 86, 148, 2, 96, 8, 72, 170, 106, 102, 168, 84, 138, 24, 154, 138, 104, 65, 129, 24, 105, 1, 98, 154, 84, 150, 0, 42, 146, 26, 154, 26, 24, 36, 68, 101, 170, 154, 100, 20, 42, 150, 0, 4, 42, 106, 150, 9, 153, 70, 9, 150, 134, 138, 70, 42, 74, 133, 89, 73, 145, 144, 40, 34, 138, 149, 17, 65, 41, 36, 152, 134, 153, 69, 86, 102, 34, 33, 144, 9, 68, 128, 24, 24, 84, 5, 102, 10, 82, 145, 128, 161, 102, 8, 153, 101, 98, 22, 96, 80, 132, 133, 88, 170, 154, 42, 0, 26, 64, 73, 154, 153, 166, 100, 102, 68, 18, 82, 137, 106, 106, 89, 26, 105, 9, 132, 26, 160, 9, 68, 102, 129, 6, 146, 85, 152, 138, 64, 70, 24, 85, 10, 130, 138, 1, 10, 82, 4, 80, 86, 5, 24, 104, 8, 69, 4, 101, 98, 6, 72, 90, 36, 65, 33, 65, 84, 4, 16, 8, 128, 65, 164, 162, 21, 160, 10, 41, 17, 6, 1, 144, 106, 72, 148, 128, 148, 1, 128, 88, 34, 64, 26, 69, 68, 96, 34, 8, 132, 73, 36, 25, 41, 1, 136, 136, 68, 138, 97, 9, 160, 64, 130, 1, 17, 1, 38, 2, 168, 128, 0, 8, 0, 6, 8, 2, 8, 145, 86, 82, 32, 96, 88, 38, 73, 104, 10, 146, 101, 5, 8, 130, 82, 144, 6, 25, 146, 34, 102, 17, 162, 38, 64, 37, 85, 98, 169, 89, 101, 68, 166, 130, 162, 150, 144, 161, 88, 105, 152, 153, 104, 90, 169, 149, 96, 1, 69, 130, 162, 16, 100, 26, 149, 154, 100, 161, 137, 165, 168, 0, 69, 130, 16, 149, 21, 90, 85, 40, 69, 90, 37, 152, 70, 21, 136, 164, 165, 41, 64, 81, 40, 105, 102, 154, 165, 72, 25, 101, 88, 26, 96},
    {170, 81, 138, 145, 73, 89, 81, 10, 6, 144, 128, 105, 81, 37, 40, 136, 2, 42, 81, 88, 133, 153, 153, 24, 26, 132, 73, 89, 136, 25, 70, 97, 86, 6, 136, 38, 32, 38, 80, 22, 32, 41, 170, 1, 166, 33, 128, 34, 149, 98, 146, 73, 34, 100, 165, 17, 162, 89, 25, 170, 72, 130, 133, 17, 128, 88, 40, 81, 168, 20, 81, 34, 153, 73, 25, 20, 165, 68, 81, 98, 166, 153, 85, 33, 81, 25, 162, 149, 68, 153, 81, 102, 25, 41, 89, 100, 17, 96, 170, 34, 34, 84, 130, 82, 101, 74, 145, 144, 32, 169, 146, 101, 97, 36, 5, 144, 170, 21, 74, 80, 80, 20, 133, 5, 133, 138, 33, 69, 74, 0, 138, 170, 38, 10, 144, 85, 88, 74, 146, 162, 166, 34, 21, 101, 102, 34, 153, 153, 41, 169, 153, 21, 165, 42, 38, 10, 9, 22, 153, 153, 42, 154, 21, 165, 128, 88, 162, 96, 86, 20, 162, 89, 128, 130, 69, 69, 21, 144, 42, 166, 137, 85, 70, 102, 25, 17, 85, 101, 84, 38, 17, 100, 96, 6, 136, 2, 152, 137, 160, 162, 9, 34, 2, 86, 144, 161, 66, 24, 162, 6, 21, 40, 36, 132, 106, 166, 152, 5, 162, 72, 160, 85, 82, 162, 153, 97, 145, 34, 2, 106, 137, 8, 0, 133, 148, 34, 40, 134, 164, 9, 170, 129, 34, 1, 69, 85, 65, 164, 132, 152, 154, 153, 38, 64, 37, 152, 4, 90, 74, 42, 81, 162, 36, 0, 86, 162, 80, 4, 38, 136, 73, 38, 132, 66, 8, 152, 34, 128, 26, 170, 144, 100, 66, 25, 90, 70, 97, 6, 104, 21, 20, 24, 41, 68, 65, 42, 96, 138, 148, 9, 148, 144, 105, 136, 89, 34, 102, 2, 40, 80, 81, 165, 153, 145, 16, 132, 161, 10, 84, 74, 66, 96, 102, 166, 41, 81, 152, 37, 6, 73, 162, 72, 21, 1, 148, 150, 66, 68, 73, 0, 85, 17, 146, 160, 148, 80, 65, 165, 148, 25, 102, 165, 100, 21, 66, 10, 86, 20, 97, 134, 154, 89, 154, 104, 150, 89, 9, 133, 166, 150, 102, 89, 38, 134, 5, 34, 137, 66, 6, 129, 162, 149, 89, 102},
    {73, 70, 166, 9, 70, 65, 64, 68, 26, 148, 166, 72, 1, 166, 73, 4, 144, 4, 18, 5, 72, 73, 69, 130, 82, 164, 134, 17, 164, 72, 146, 136, 166, 164, 4, 37, 164, 150, 169, 166, 2, 9, 166, 137, 21, 37, 41, 34, 65, 134, 80, 150, 22, 34, 21, 17, 68, 70, 101, 8, 98, 36, 89, 74, 73, 26, 16, 42, 104, 134, 153, 82, 89, 164, 26, 169, 66, 132, 40, 18, 134, 80, 72, 105, 88, 69, 154, 1, 98, 36, 10, 168, 69, 80, 104, 81, 170, 26, 85, 165, 150, 96, 165, 165, 100, 1, 102, 97, 32, 6, 90, 70, 150, 80, 104, 98, 84, 6, 153, 146, 89, 133, 105, 134, 82, 6, 85, 69, 81, 153, 5, 164, 100, 89, 105, 68, 18, 137, 97, 150, 73, 138, 21, 105, 146, 150, 98, 98, 22, 102, 161, 144, 102, 9, 74, 26, 64, 89, 89, 169, 133, 152, 162, 16, 81, 9, 88, 68, 89, 97, 74, 97, 160, 149, 24, 24, 64, 161, 148, 166, 81, 66, 134, 148, 81, 104, 101, 170, 168, 134, 25, 38, 65, 20, 148, 16, 36, 40, 81, 86, 33, 154, 6, 18, 102, 65, 170, 6, 41, 164, 2, 129, 168, 85, 130, 137, 1, 20, 101, 36, 2, 146, 20, 84, 105, 42, 73, 170, 10, 138, 138, 65, 72, 165, 69, 170, 5, 34, 40, 132, 73, 161, 32, 4, 80, 22, 136, 37, 8, 162, 81, 64, 160, 10, 153, 132, 130, 130, 146, 80, 89, 65, 153, 2, 25, 37, 4, 25, 64, 36, 17, 136, 68, 24, 34, 73, 165, 26, 68, 18, 160, 105, 40, 22, 96, 160, 32, 137, 166, 64, 101, 128, 132, 96, 20, 166, 165, 164, 88, 89, 98, 105, 0, 166, 80, 137, 145, 20, 24, 36, 88, 144, 98, 66, 165, 105, 105, 166, 22, 145, 17, 20, 101, 134, 10, 81, 32, 36, 136, 88, 162, 81, 82, 18, 73, 161, 161, 145, 153, 160, 5, 128, 2, 0, 170, 68, 68, 104, 164, 42, 137, 25, 74, 10, 164, 73, 22, 102, 68, 138, 36, 22, 40, 149, 73, 168, 166, 22, 150, 65, 162, 2, 166, 168, 41, 146, 89, 42, 166, 160, 160, 88, 73, 144},
    {129, 38, 9, 18, 85, 101, 102, 101, 22, 2, 154, 105, 98, 169, 81, 161, 138, 38, 96, 34, 80, 4, 96, 133, 38, 69, 129, 64, 42, 64, 2, 153, 161, 2, 164, 169, 137, 154, 81, 128, 137, 165, 134, 102, 153, 129, 65, 169, 72, 22, 2, 0, 70, 22, 68, 85, 34, 149, 105, 166, 153, 154, 5, 1, 36, 129, 128, 37, 137, 40, 36, 169, 36, 169, 170, 69, 65, 152, 106, 154, 153, 86, 101, 65, 133, 69, 10, 84, 137, 88, 34, 26, 64, 64, 85, 105, 129, 150, 161, 37, 134, 68, 168, 38, 136, 102, 32, 100, 5, 20, 102, 68, 154, 152, 9, 74, 133, 69, 18, 134, 2, 138, 6, 168, 70, 84, 84, 9, 98, 69, 98, 9, 160, 161, 82, 134, 104, 162, 102, 128, 153, 152, 85, 69, 34, 170, 84, 101, 25, 96, 102, 134, 72, 5, 138, 66, 153, 4, 68, 137, 5, 80, 168, 70, 101, 165, 130, 170, 86, 101, 134, 33, 150, 132, 5, 90, 150, 101, 81, 128, 80, 68, 162, 169, 97, 82, 64, 149, 166, 128, 81, 161, 84, 166, 165, 18, 8, 105, 34, 22, 64, 134, 34, 80, 169, 65, 33, 100, 169, 37, 1, 96, 10, 4, 106, 160, 64, 41, 26, 64, 152, 42, 6, 0, 72, 128, 24, 138, 128, 129, 72, 40, 100, 133, 40, 5, 65, 138, 16, 74, 40, 22, 128, 66, 66, 4, 1, 0, 137, 64, 0, 5, 136, 64, 10, 69, 130, 8, 10, 68, 70, 145, 20, 136, 145, 170, 65, 20, 22, 37, 0, 144, 136, 149, 10, 84, 162, 154, 161, 37, 0, 134, 2, 66, 97, 161, 66, 21, 101, 74, 8, 40, 34, 2, 90, 41, 18, 154, 26, 85, 85, 129, 86, 134, 154, 68, 168, 133, 160, 85, 66, 160, 24, 70, 85, 9, 84, 26, 86, 9, 8, 152, 40, 138, 34, 106, 102, 65, 37, 86, 136, 89, 70, 86, 102, 146, 136, 22, 144, 164, 96, 22, 9, 164, 152, 148, 154, 146, 169, 154, 166, 98, 153, 69, 33, 168, 17, 89, 96, 170, 96, 96, 81, 165, 146, 90, 97, 86, 41, 90, 168, 102, 130, 145, 148, 130, 81, 128, 4, 81, 164, 86, 97, 169},
    {25, 149, 64, 34, 88, 96, 2, 100, 84, 16, 128, 36, 33, 86, 34, 166, 138, 10, 18, 100, 37, 146, 26, 101, 81, 74, 17, 166, 21, 38, 37, 162, 73, 73, 89, 149, 105, 161, 138, 73, 132, 90, 85, 86, 128, 37, 22, 22, 8, 84, 154, 32, 102, 100, 22, 42, 81, 145, 129, 73, 153, 134, 64, 84, 138, 72, 37, 149, 145, 89, 165, 2, 162, 98, 21, 165, 37, 170, 18, 68, 69, 96, 162, 70, 65, 42, 16, 34, 97, 128, 148, 33, 100, 100, 169, 145, 148, 32, 88, 89, 165, 162, 37, 134, 165, 162, 160, 70, 0, 89, 82, 74, 153, 104, 150, 42, 154, 162, 86, 106, 22, 133, 6, 69, 146, 5, 164, 64, 98, 166, 38, 41, 97, 89, 153, 164, 150, 160, 86, 17, 146, 149, 38, 37, 80, 40, 149, 20, 25, 85, 84, 146, 104, 1, 105, 1, 20, 160, 98, 149, 42, 86, 26, 81, 133, 162, 8, 134, 102, 102, 37, 160, 145, 165, 40, 130, 130, 150, 148, 41, 0, 98, 161, 132, 154, 150, 150, 153, 165, 97, 138, 144, 96, 17, 153, 36, 2, 6, 25, 32, 0, 97, 65, 81, 9, 146, 128, 25, 64, 17, 144, 72, 2, 32, 40, 16, 90, 1, 152, 0, 0, 72, 65, 20, 6, 73, 0, 33, 65, 81, 64, 84, 98, 69, 80, 88, 98, 22, 102, 6, 88, 0, 1, 134, 32, 101, 18, 132, 34, 160, 98, 130, 6, 37, 21, 2, 0, 1, 96, 25, 32, 32, 137, 65, 81, 152, 84, 154, 73, 144, 88, 65, 162, 169, 24, 70, 33, 128, 33, 1, 164, 102, 4, 16, 2, 9, 2, 0, 5, 136, 153, 134, 42, 132, 42, 1, 89, 161, 10, 162, 24, 128, 150, 170, 2, 98, 21, 153, 85, 85, 154, 33, 89, 166, 6, 90, 38, 18, 32, 100, 153, 69, 1, 89, 2, 34, 98, 104, 148, 74, 81, 73, 170, 82, 2, 38, 25, 130, 162, 1, 89, 34, 133, 40, 152, 97, 22, 26, 69, 84, 21, 18, 106, 166, 5, 169, 88, 134, 80, 25, 37, 25, 88, 36, 73, 66, 8, 38, 85, 132, 137, 38, 41, 33, 37, 89, 162, 85, 69, 154, 33, 74, 4, 105},
    {34, 20, 24, 17, 132, 132, 132, 97, 20, 150, 149, 165, 149, 24, 10, 38, 6, 160, 37, 41, 22, 152, 134, 165, 4, 152, 90, 134, 41, 134, 84, 169, 146, 64, 72, 34, 41, 73, 153, 72, 10, 89, 90, 100, 89, 97, 166, 38, 148, 88, 164, 8, 25, 2, 26, 148, 104, 21, 166, 72, 82, 24, 21, 22, 165, 33, 165, 88, 146, 73, 1, 33, 166, 2, 70, 65, 169, 73, 154, 9, 9, 149, 5, 4, 72, 5, 88, 133, 98, 86, 38, 98, 37, 134, 150, 150, 150, 32, 72, 105, 82, 132, 26, 73, 32, 148, 41, 149, 148, 100, 129, 9, 41, 160, 150, 165, 101, 144, 24, 33, 134, 104, 4, 96, 166, 134, 161, 17, 84, 1, 134, 70, 69, 82, 133, 133, 106, 106, 133, 2, 36, 66, 165, 21, 81, 102, 33, 34, 42, 9, 165, 89, 146, 26, 138, 148, 17, 165, 66, 105, 98, 34, 150, 101, 169, 162, 128, 160, 22, 145, 134, 134, 41, 166, 144, 2, 128, 17, 40, 104, 132, 34, 41, 90, 18, 146, 145, 90, 104, 72, 148, 25, 82, 72, 24, 8, 5, 132, 34, 128, 36, 73, 106, 80, 74, 148, 164, 82, 36, 89, 73, 66, 34, 128, 9, 161, 24, 4, 8, 4, 98, 65, 16, 144, 6, 97, 162, 105, 128, 138, 165, 133, 4, 129, 22, 0, 0, 40, 64, 148, 106, 38, 82, 10, 16, 73, 32, 133, 133, 164, 64, 2, 10, 80, 130, 33, 33, 98, 72, 18, 18, 10, 90, 34, 0, 16, 20, 132, 65, 100, 160, 8, 145, 106, 68, 148, 64, 162, 41, 10, 24, 5, 164, 132, 8, 90, 128, 16, 136, 84, 106, 133, 100, 34, 81, 24, 148, 9, 132, 168, 101, 105, 24, 96, 152, 5, 146, 18, 89, 86, 165, 69, 80, 37, 80, 153, 162, 165, 88, 70, 145, 90, 9, 73, 161, 153, 130, 101, 98, 161, 106, 146, 20, 102, 129, 36, 136, 84, 4, 130, 165, 150, 24, 104, 37, 32, 134, 64, 102, 72, 25, 162, 138, 132, 97, 40, 128, 34, 73, 81, 106, 164, 72, 26, 146, 98, 89, 104, 74, 145, 8, 38, 105, 42, 26, 9, 150, 73, 6, 37, 146, 150, 166, 9},
    {134, 2, 65, 98, 170, 162, 146, 128, 162, 18, 37, 106, 164, 137, 98, 164, 65, 166, 129, 10, 6, 97, 42, 89, 73, 169, 73, 170, 88, 10, 65, 161, 89, 82, 65, 81, 73, 65, 170, 85, 85, 73, 101, 166, 98, 89, 170, 81, 162, 69, 38, 81, 73, 89, 138, 1, 85, 149, 18, 97, 145, 22, 160, 0, 166, 9, 24, 149, 17, 145, 169, 89, 38, 134, 162, 136, 137, 154, 133, 85, 86, 162, 170, 138, 84, 170, 85, 166, 73, 170, 130, 85, 134, 150, 166, 162, 134, 81, 101, 97, 85, 162, 84, 146, 81, 38, 149, 22, 86, 100, 152, 148, 17, 89, 146, 168, 129, 33, 101, 105, 145, 88, 149, 81, 170, 96, 74, 154, 166, 170, 34, 65, 100, 65, 10, 42, 170, 89, 170, 81, 105, 81, 146, 134, 81, 73, 170, 166, 101, 145, 162, 133, 149, 85, 36, 153, 97, 170, 133, 105, 85, 154, 105, 129, 153, 170, 101, 162, 34, 82, 161, 130, 97, 134, 166, 169, 162, 18, 89, 68, 170, 162, 85, 81, 73, 130, 146, 88, 154, 89, 170, 85, 166, 85, 65, 81, 4, 166, 2, 33, 134, 81, 4, 34, 101, 6, 132, 162, 69, 1, 160, 26, 64, 165, 80, 85, 69, 90, 102, 16, 74, 64, 66, 65, 162, 80, 98, 64, 81, 81, 68, 18, 130, 68, 33, 24, 166, 81, 166, 38, 88, 166, 144, 162, 138, 0, 170, 164, 97, 65, 32, 128, 73, 145, 90, 165, 65, 4, 17, 5, 10, 89, 10, 0, 41, 73, 6, 130, 145, 1, 153, 84, 100, 69, 65, 166, 9, 64, 81, 85, 137, 160, 88, 65, 130, 80, 138, 168, 73, 166, 90, 97, 10, 166, 86, 97, 97, 105, 90, 68, 154, 97, 170, 154, 162, 38, 17, 101, 1, 82, 170, 85, 17, 148, 170, 25, 168, 100, 88, 74, 101, 165, 85, 80, 162, 162, 170, 166, 85, 34, 89, 160, 162, 166, 138, 25, 0, 105, 130, 73, 170, 166, 21, 90, 69, 86, 34, 26, 81, 166, 82, 170, 64, 162, 105, 5, 89, 38, 170, 148, 85, 133, 69, 89, 65, 0, 161, 170, 69, 170, 84, 162, 65, 81, 69, 89, 170, 89, 97, 162, 85, 138, 136, 85},
    {6, 26, 21, 104, 168, 146, 106, 149, 169, 145, 165, 36, 97, 164, 41, 86, 80, 40, 104, 8, 86, 168, 146, 82, 68, 152, 146, 129, 2, 162, 100, 169, 105, 18, 34, 20, 144, 41, 152, 74, 4, 134, 1, 72, 16, 146, 5, 101, 22, 41, 22, 1, 104, 33, 152, 74, 68, 64, 73, 74, 10, 69, 85, 154, 149, 100, 25, 165, 38, 69, 73, 36, 89, 40, 154, 68, 26, 169, 169, 102, 165, 136, 33, 41, 17, 25, 69, 137, 74, 104, 4, 34, 2, 89, 66, 74, 98, 40, 86, 6, 90, 0, 10, 73, 86, 168, 138, 41, 146, 168, 168, 41, 37, 0, 0, 170, 166, 25, 138, 17, 134, 18, 6, 37, 169, 134, 133, 22, 161, 169, 24, 38, 64, 170, 150, 38, 105, 70, 166, 70, 86, 165, 136, 72, 104, 20, 82, 150, 132, 138, 150, 162, 86, 105, 128, 17, 18, 161, 138, 146, 24, 66, 82, 32, 152, 74, 20, 105, 160, 154, 148, 41, 5, 101, 9, 37, 170, 160, 36, 133, 32, 165, 22, 101, 21, 145, 1, 90, 9, 70, 88, 65, 164, 17, 88, 9, 9, 32, 100, 138, 4, 64, 102, 70, 70, 32, 133, 96, 20, 128, 18, 0, 149, 84, 153, 144, 33, 24, 33, 26, 16, 146, 73, 64, 37, 10, 0, 165, 64, 66, 152, 145, 72, 18, 33, 18, 128, 2, 2, 65, 86, 68, 160, 133, 32, 34, 6, 148, 9, 146, 98, 96, 64, 144, 36, 86, 138, 4, 8, 101, 9, 40, 64, 16, 6, 0, 96, 102, 21, 90, 74, 82, 0, 8, 2, 129, 132, 145, 24, 74, 66, 169, 69, 1, 65, 6, 138, 146, 40, 138, 148, 160, 90, 22, 144, 33, 166, 168, 100, 82, 74, 138, 153, 33, 36, 154, 85, 26, 100, 42, 20, 65, 66, 166, 25, 153, 145, 154, 82, 128, 82, 72, 17, 166, 38, 137, 106, 168, 168, 36, 164, 137, 106, 24, 4, 73, 69, 136, 90, 165, 150, 137, 24, 150, 146, 2, 20, 81, 86, 97, 102, 64, 104, 136, 98, 69, 130, 138, 81, 32, 97, 164, 96, 149, 100, 20, 137, 16, 38, 37, 65, 153, 102, 128, 129, 70, 130, 85, 70, 89, 138, 90, 40, 136},
    {153, 73, 66, 68, 9, 41, 8, 32, 74, 102, 148, 145, 162, 97, 20, 0, 154, 88, 32, 33, 169, 74, 152, 133, 153, 161, 129, 170, 21, 160, 149, 34, 145, 2, 132, 133, 149, 5, 164, 128, 128, 72, 6, 89, 90, 84, 40, 1, 41, 102, 138, 38, 36, 5, 96, 25, 134, 69, 154, 144, 90, 22, 64, 74, 170, 82, 33, 132, 68, 144, 97, 100, 24, 68, 105, 5, 88, 26, 129, 86, 69, 169, 101, 105, 33, 72, 38, 42, 166, 25, 137, 70, 104, 138, 70, 165, 90, 70, 164, 134, 100, 8, 1, 90, 86, 22, 90, 105, 160, 70, 133, 98, 166, 86, 96, 105, 10, 102, 17, 21, 0, 22, 100, 84, 98, 40, 90, 98, 37, 100, 164, 69, 74, 102, 145, 1, 102, 150, 105, 132, 85, 90, 169, 106, 38, 133, 26, 129, 26, 165, 129, 101, 9, 144, 66, 161, 149, 42, 101, 149, 165, 33, 68, 40, 161, 146, 38, 102, 41, 149, 162, 68, 64, 144, 34, 128, 10, 89, 4, 133, 74, 10, 80, 149, 128, 168, 9, 90, 18, 85, 81, 148, 136, 26, 149, 0, 104, 32, 130, 37, 104, 96, 70, 106, 84, 162, 160, 74, 33, 34, 168, 106, 18, 25, 20, 33, 36, 104, 84, 18, 16, 74, 33, 160, 73, 70, 72, 21, 66, 132, 41, 169, 37, 33, 0, 6, 144, 1, 144, 65, 90, 0, 106, 152, 2, 1, 0, 33, 69, 85, 88, 169, 40, 9, 137, 36, 5, 18, 64, 134, 34, 4, 18, 33, 106, 85, 162, 38, 82, 2, 170, 20, 129, 86, 72, 32, 17, 32, 160, 134, 20, 32, 8, 33, 4, 20, 152, 132, 80, 90, 26, 164, 170, 24, 102, 64, 153, 81, 36, 129, 85, 145, 154, 6, 137, 8, 149, 85, 40, 162, 65, 133, 42, 160, 20, 10, 161, 102, 101, 66, 89, 149, 133, 20, 26, 41, 168, 41, 73, 90, 128, 41, 169, 104, 10, 6, 164, 105, 80, 72, 96, 168, 165, 82, 72, 133, 9, 98, 169, 97, 90, 70, 104, 137, 149, 160, 34, 106, 66, 22, 161, 105, 22, 101, 130, 65, 133, 42, 148, 145, 2, 168, 86, 168, 166, 22, 105, 89, 150, 134, 133, 66, 168, 22},
    {9, 100, 128, 102, 73, 100, 17, 88, 89, 160, 70, 146, 6, 106, 10, 144, 2, 5, 25, 102, 164, 72, 148, 138, 129, 82, 88, 101, 4, 150, 161, 34, 68, 168, 65, 133, 129, 137, 74, 9, 161, 86, 22, 69, 70, 26, 165, 128, 70, 161, 66, 169, 132, 101, 136, 102, 148, 37, 144, 20, 129, 166, 162, 150, 98, 161, 8, 88, 36, 90, 5, 97, 21, 97, 100, 40, 98, 64, 32, 106, 88, 68, 134, 96, 80, 66, 160, 98, 153, 150, 36, 41, 80, 132, 86, 84, 16, 137, 132, 145, 148, 80, 74, 24, 148, 146, 18, 5, 137, 85, 1, 85, 9, 153, 138, 37, 73, 133, 68, 154, 138, 6, 26, 96, 137, 66, 146, 5, 102, 86, 66, 136, 4, 9, 165, 90, 144, 134, 33, 80, 152, 73, 82, 148, 70, 154, 21, 133, 81, 68, 149, 100, 65, 8, 33, 132, 105, 138, 102, 37, 1, 72, 164, 85, 169, 17, 73, 38, 26, 134, 97, 97, 89, 102, 80, 150, 17, 102, 168, 80, 100, 101, 68, 89, 104, 82, 0, 25, 37, 32, 166, 129, 25, 129, 132, 84, 1, 72, 26, 20, 64, 33, 65, 5, 0, 16, 153, 4, 42, 40, 161, 132, 17, 24, 5, 9, 102, 133, 96, 25, 129, 9, 40, 132, 37, 64, 4, 33, 96, 129, 4, 164, 104, 32, 101, 34, 24, 97, 24, 68, 37, 25, 129, 16, 96, 34, 34, 144, 128, 148, 88, 145, 97, 2, 72, 0, 145, 73, 4, 70, 18, 129, 0, 32, 164, 161, 6, 24, 1, 0, 70, 41, 32, 137, 164, 34, 64, 145, 149, 104, 72, 96, 65, 34, 20, 81, 82, 21, 145, 64, 128, 160, 26, 104, 101, 129, 161, 160, 101, 1, 144, 80, 66, 6, 42, 88, 169, 160, 88, 102, 129, 165, 74, 37, 106, 37, 102, 8, 86, 37, 68, 8, 137, 9, 37, 134, 16, 32, 152, 84, 81, 74, 40, 66, 165, 168, 129, 81, 68, 137, 133, 40, 134, 144, 146, 66, 84, 150, 149, 22, 4, 70, 69, 98, 88, 26, 90, 89, 86, 17, 105, 148, 152, 100, 88, 154, 89, 86, 165, 5, 82, 84, 4, 152, 128, 33, 22, 145, 101, 101, 136, 162, 42, 40},
    {69, 132, 160, 137, 138, 82, 152, 72, 162, 16, 168, 97, 66, 105, 80, 100, 130, 16, 133, 102, 24, 1, 161, 85, 146, 137, 137, 129, 129, 42, 169, 105, 21, 129, 89, 21, 34, 66, 149, 18, 18, 33, 81, 133, 21, 105, 88, 164, 25, 10, 1, 37, 33, 168, 82, 88, 40, 152, 138, 134, 154, 65, 21, 168, 104, 38, 2, 41, 22, 128, 162, 20, 138, 21, 90, 161, 98, 145, 34, 6, 34, 137, 5, 25, 148, 9, 98, 40, 132, 168, 18, 2, 10, 154, 160, 1, 24, 134, 73, 10, 134, 160, 89, 133, 149, 36, 73, 106, 37, 72, 97, 8, 154, 101, 129, 105, 6, 104, 149, 6, 169, 144, 129, 10, 70, 41, 161, 144, 70, 101, 69, 84, 86, 69, 149, 168, 161, 37, 84, 85, 85, 68, 137, 161, 154, 26, 33, 100, 96, 153, 26, 22, 101, 5, 102, 6, 85, 100, 69, 17, 82, 8, 90, 25, 85, 74, 68, 20, 10, 84, 2, 89, 153, 132, 37, 41, 164, 149, 149, 0, 69, 136, 130, 70, 66, 137, 168, 153, 162, 22, 85, 2, 1, 68, 69, 36, 153, 153, 6, 80, 152, 18, 68, 90, 82, 16, 161, 102, 72, 82, 33, 144, 160, 65, 168, 1, 36, 33, 134, 9, 17, 8, 70, 5, 74, 148, 2, 6, 70, 18, 146, 20, 8, 134, 150, 32, 161, 128, 5, 1, 18, 146, 150, 32, 154, 65, 40, 1, 65, 24, 97, 101, 144, 73, 132, 80, 0, 16, 64, 36, 34, 68, 130, 22, 18, 146, 150, 160, 86, 165, 130, 16, 88, 102, 82, 1, 6, 128, 97, 20, 160, 98, 96, 90, 33, 32, 160, 36, 40, 132, 1, 73, 36, 166, 164, 74, 146, 32, 129, 4, 106, 32, 136, 20, 68, 37, 129, 100, 168, 69, 100, 98, 170, 38, 1, 169, 168, 132, 168, 65, 170, 66, 150, 162, 74, 74, 105, 26, 84, 85, 22, 5, 154, 1, 161, 100, 152, 168, 153, 64, 16, 136, 150, 72, 0, 168, 74, 4, 72, 132, 104, 161, 164, 154, 84, 38, 20, 70, 36, 153, 34, 150, 22, 86, 81, 100, 146, 166, 86, 154, 17, 40, 24, 84, 8, 164, 64, 101, 145, 144, 38, 166, 65, 170},
    {98, 161, 128, 100, 33, 64, 0, 69, 5, 26, 160, 21, 36, 146, 74, 149, 106, 66, 105, 101, 72, 18, 9, 128, 130, 64, 148, 97, 160, 6, 154, 130, 42, 136, 169, 170, 154, 137, 86, 169, 169, 166, 150, 65, 149, 168, 85, 146, 97, 153, 82, 153, 144, 81, 154, 84, 152, 9, 66, 136, 96, 21, 69, 68, 128, 162, 89, 104, 69, 165, 4, 137, 85, 16, 169, 134, 86, 134, 9, 149, 161, 70, 85, 97, 136, 86, 169, 68, 170, 89, 64, 169, 69, 98, 41, 32, 85, 138, 162, 166, 10, 81, 166, 101, 169, 68, 37, 146, 170, 66, 68, 66, 104, 90, 89, 144, 162, 65, 36, 146, 149, 85, 101, 26, 74, 8, 104, 166, 101, 22, 64, 162, 25, 9, 80, 133, 82, 70, 38, 138, 154, 106, 81, 89, 168, 134, 89, 17, 170, 168, 37, 133, 166, 22, 154, 102, 106, 148, 82, 40, 146, 89, 134, 73, 169, 102, 74, 149, 82, 101, 138, 144, 37, 101, 150, 148, 166, 100, 168, 137, 100, 69, 160, 162, 105, 106, 101, 136, 153, 138, 69, 168, 85, 26, 170, 16, 129, 97, 6, 136, 82, 152, 36, 33, 160, 101, 32, 22, 148, 16, 73, 10, 70, 73, 166, 24, 100, 24, 4, 134, 154, 4, 0, 0, 82, 6, 5, 152, 130, 170, 20, 97, 84, 73, 129, 68, 80, 168, 82, 4, 130, 9, 34, 68, 68, 129, 0, 72, 153, 32, 148, 105, 8, 73, 90, 1, 98, 160, 128, 170, 80, 26, 37, 128, 25, 144, 36, 86, 72, 18, 80, 160, 37, 154, 136, 69, 146, 129, 169, 38, 138, 24, 130, 1, 130, 42, 100, 9, 42, 38, 84, 148, 42, 69, 88, 17, 134, 8, 82, 106, 40, 166, 36, 168, 149, 89, 70, 10, 166, 148, 37, 165, 9, 161, 146, 41, 88, 98, 37, 144, 153, 37, 42, 168, 102, 89, 65, 148, 170, 68, 161, 85, 106, 102, 88, 74, 86, 17, 16, 6, 65, 8, 153, 66, 104, 133, 161, 169, 16, 21, 26, 6, 26, 101, 149, 26, 128, 100, 64, 153, 84, 82, 169, 134, 102, 68, 10, 85, 152, 150, 144, 85, 138, 4, 154, 137, 22, 104, 170, 38, 165, 69, 69, 168},
    {24, 101, 148, 40, 5, 0, 73, 21, 152, 88, 145, 16, 104, 138, 26, 148, 145, 128, 144, 102, 133, 136, 81, 9, 106, 149, 69, 21, 96, 88, 5, 132, 130, 98, 164, 138, 162, 34, 18, 164, 137, 154, 105, 89, 97, 70, 81, 138, 65, 134, 89, 150, 26, 24, 164, 38, 2, 169, 165, 33, 169, 25, 20, 169, 149, 42, 25, 162, 98, 22, 130, 128, 170, 165, 149, 82, 153, 81, 128, 42, 104, 101, 26, 2, 42, 66, 0, 65, 170, 129, 65, 8, 144, 148, 36, 133, 24, 36, 149, 150, 104, 85, 136, 145, 34, 152, 70, 106, 74, 106, 17, 101, 162, 72, 145, 42, 34, 85, 25, 70, 170, 41, 154, 24, 69, 133, 25, 102, 144, 4, 152, 34, 138, 162, 16, 16, 82, 160, 2, 134, 66, 2, 104, 69, 162, 148, 65, 132, 22, 42, 18, 153, 154, 168, 37, 68, 70, 68, 100, 4, 38, 161, 66, 21, 21, 100, 64, 25, 86, 82, 170, 160, 65, 130, 102, 145, 150, 154, 104, 70, 24, 16, 161, 42, 24, 144, 89, 132, 161, 38, 88, 86, 17, 165, 164, 18, 0, 90, 21, 134, 18, 164, 160, 101, 133, 10, 144, 81, 154, 34, 64, 5, 17, 84, 162, 154, 128, 17, 169, 20, 137, 40, 138, 146, 4, 138, 64, 0, 34, 166, 152, 25, 24, 22, 90, 25, 102, 137, 16, 70, 100, 80, 165, 149, 81, 34, 72, 144, 154, 25, 16, 144, 74, 18, 16, 134, 161, 9, 136, 10, 69, 38, 101, 33, 84, 42, 20, 10, 68, 22, 2, 34, 38, 32, 97, 82, 40, 144, 0, 20, 24, 96, 169, 38, 144, 160, 153, 73, 164, 97, 98, 0, 2, 74, 96, 18, 165, 134, 106, 73, 1, 101, 168, 25, 22, 40, 0, 166, 146, 32, 86, 145, 154, 89, 149, 85, 134, 144, 160, 102, 164, 169, 138, 100, 169, 33, 89, 84, 138, 145, 164, 8, 90, 9, 133, 129, 162, 37, 80, 154, 21, 8, 128, 2, 165, 134, 20, 80, 148, 10, 41, 85, 8, 70, 105, 153, 90, 138, 38, 166, 37, 20, 101, 106, 42, 88, 129, 80, 34, 26, 33, 85, 166, 104, 73, 37, 38, 102, 168, 106, 133, 82, 25, 104},
    {106, 129, 42, 169, 9, 66, 105, 98, 64, 69, 32, 40, 20, 18, 42, 65, 130, 41, 148, 65, 22, 165, 42, 84, 38, 74, 5, 164, 68, 64, 89, 72, 130, 17, 21, 169, 128, 164, 4, 128, 133, 74, 84, 81, 137, 40, 104, 8, 104, 144, 104, 145, 137, 64, 153, 164, 129, 85, 106, 136, 42, 132, 68, 88, 160, 145, 104, 104, 146, 145, 104, 85, 145, 10, 101, 84, 4, 72, 164, 21, 145, 98, 104, 32, 85, 64, 161, 96, 137, 74, 33, 153, 104, 40, 128, 102, 16, 101, 162, 168, 165, 64, 69, 90, 22, 69, 42, 80, 20, 65, 0, 88, 86, 168, 8, 97, 81, 97, 85, 168, 101, 133, 80, 169, 41, 168, 137, 88, 33, 41, 74, 144, 149, 37, 136, 69, 85, 136, 80, 134, 97, 129, 17, 24, 129, 40, 82, 166, 166, 21, 26, 101, 150, 33, 6, 164, 102, 10, 165, 149, 161, 138, 162, 154, 42, 89, 42, 38, 105, 70, 38, 70, 0, 166, 82, 2, 64, 9, 170, 73, 98, 104, 164, 5, 98, 90, 65, 138, 130, 148, 34, 25, 137, 165, 149, 164, 145, 1, 170, 36, 72, 129, 64, 82, 70, 74, 160, 96, 4, 161, 66, 25, 24, 96, 149, 129, 138, 96, 18, 68, 149, 64, 98, 2, 98, 85, 2, 133, 164, 145, 37, 26, 41, 16, 166, 97, 65, 32, 153, 10, 88, 16, 129, 26, 34, 20, 82, 0, 4, 66, 8, 130, 0, 21, 1, 4, 129, 82, 165, 162, 169, 133, 138, 18, 162, 65, 144, 8, 5, 10, 6, 133, 5, 1, 133, 40, 133, 160, 20, 137, 69, 21, 5, 134, 4, 96, 40, 128, 33, 72, 82, 37, 170, 69, 25, 130, 145, 25, 84, 89, 89, 134, 84, 136, 128, 134, 160, 168, 149, 81, 128, 145, 97, 70, 85, 82, 105, 138, 4, 41, 132, 20, 129, 145, 72, 0, 104, 16, 41, 154, 4, 166, 106, 170, 38, 166, 160, 138, 86, 86, 133, 86, 88, 170, 130, 152, 84, 26, 133, 20, 21, 70, 168, 18, 22, 33, 154, 84, 1, 146, 153, 128, 152, 16, 38, 154, 144, 72, 25, 68, 21, 64, 138, 137, 144, 38, 98, 90, 145, 106, 106, 82, 130, 153},
    {160, 105, 129, 88, 105, 72, 74, 165, 129, 146, 128, 169, 86, 132, 168, 150, 38, 102, 68, 144, 8, 0, 40, 100, 150, 153, 42, 84, 66, 85, 34, 69, 132, 10, 150, 22, 98, 170, 17, 166, 42, 168, 66, 18, 26, 133, 20, 42, 25, 38, 41, 148, 4, 64, 165, 84, 150, 102, 161, 38, 168, 72, 38, 89, 37, 36, 0, 70, 170, 70, 38, 162, 68, 74, 9, 97, 148, 100, 153, 32, 24, 80, 102, 41, 170, 33, 168, 5, 161, 25, 105, 144, 73, 105, 90, 25, 0, 100, 21, 86, 102, 17, 26, 21, 134, 148, 36, 41, 84, 66, 154, 74, 22, 153, 101, 169, 66, 2, 90, 168, 149, 146, 69, 106, 129, 133, 70, 89, 169, 84, 104, 34, 36, 169, 168, 149, 166, 145, 148, 34, 162, 98, 145, 85, 66, 4, 41, 101, 170, 146, 152, 9, 98, 166, 68, 165, 73, 38, 133, 104, 22, 90, 170, 88, 69, 32, 165, 149, 101, 38, 4, 1, 138, 130, 153, 22, 25, 101, 41, 136, 17, 40, 162, 70, 69, 80, 105, 104, 134, 42, 100, 70, 149, 0, 32, 0, 10, 129, 132, 18, 4, 162, 160, 16, 160, 72, 40, 73, 2, 16, 161, 5, 34, 134, 18, 130, 8, 89, 133, 20, 32, 21, 85, 146, 0, 128, 161, 160, 42, 42, 145, 33, 33, 22, 4, 64, 21, 64, 153, 18, 25, 145, 0, 17, 21, 9, 9, 22, 134, 150, 8, 40, 24, 10, 128, 0, 68, 1, 0, 134, 89, 10, 32, 33, 136, 2, 0, 1, 34, 133, 25, 2, 0, 1, 68, 132, 134, 36, 97, 106, 4, 5, 8, 6, 9, 73, 17, 65, 70, 40, 154, 148, 166, 90, 73, 152, 8, 85, 145, 96, 86, 24, 86, 22, 97, 25, 146, 97, 106, 68, 161, 166, 80, 132, 101, 22, 21, 24, 2, 137, 2, 1, 138, 90, 81, 165, 18, 82, 161, 161, 154, 64, 86, 128, 40, 10, 152, 105, 161, 22, 8, 20, 85, 150, 8, 149, 134, 134, 82, 80, 166, 33, 89, 69, 136, 73, 6, 80, 81, 149, 10, 20, 105, 134, 152, 37, 72, 21, 134, 169, 164, 101, 138, 137, 37, 6, 144, 2, 166, 161, 34, 69, 25, 96},
    {98, 153, 22, 41, 37, 9, 25, 144, 21, 97, 73, 132, 24, 100, 96, 80, 65, 152, 41, 154, 84, 4, 148, 137, 66, 136, 21, 165, 81, 162, 170, 20, 70, 146, 134, 70, 38, 70, 89, 82, 18, 152, 22, 89, 18, 165, 169, 100, 169, 18, 104, 36, 146, 72, 37, 137, 16, 73, 6, 148, 96, 90, 66, 4, 82, 74, 90, 90, 38, 132, 105, 70, 69, 165, 68, 16, 41, 65, 4, 9, 145, 161, 169, 102, 86, 161, 22, 90, 150, 137, 41, 90, 41, 17, 169, 37, 73, 86, 134, 102, 86, 137, 66, 149, 98, 149, 17, 40, 102, 86, 165, 153, 150, 86, 65, 40, 20, 89, 81, 81, 70, 169, 89, 42, 41, 6, 100, 153, 86, 16, 16, 90, 130, 22, 89, 165, 138, 134, 5, 82, 70, 86, 161, 105, 22, 22, 169, 105, 66, 64, 65, 97, 166, 154, 150, 74, 106, 10, 136, 37, 166, 169, 66, 160, 165, 164, 70, 133, 169, 129, 98, 153, 88, 130, 26, 154, 25, 101, 86, 22, 41, 169, 150, 74, 65, 37, 105, 85, 21, 18, 137, 100, 137, 166, 64, 150, 80, 41, 162, 6, 73, 82, 25, 146, 153, 24, 161, 145, 38, 65, 33, 25, 160, 170, 102, 130, 136, 162, 70, 0, 102, 137, 0, 6, 26, 80, 169, 22, 2, 34, 169, 37, 128, 24, 68, 134, 5, 2, 80, 64, 146, 129, 80, 168, 153, 89, 5, 160, 138, 128, 134, 168, 6, 18, 137, 25, 8, 69, 133, 22, 4, 160, 145, 9, 4, 10, 20, 128, 26, 65, 64, 18, 40, 128, 68, 137, 16, 0, 34, 100, 24, 152, 2, 65, 37, 84, 97, 128, 38, 153, 18, 6, 82, 73, 149, 162, 96, 22, 25, 152, 9, 98, 18, 148, 161, 84, 104, 102, 150, 72, 65, 154, 74, 9, 134, 73, 105, 161, 168, 24, 102, 86, 86, 68, 37, 153, 169, 165, 102, 69, 2, 170, 97, 138, 169, 160, 6, 150, 137, 6, 85, 81, 86, 149, 4, 86, 169, 65, 104, 170, 150, 5, 165, 144, 82, 80, 70, 41, 2, 150, 26, 40, 150, 73, 84, 9, 26, 5, 134, 149, 145, 9, 2, 146, 89, 150, 41, 161, 102, 105, 36, 144, 73, 86},
    {144, 2, 25, 66, 34, 70, 6, 98, 6, 70, 66, 150, 88, 134, 86, 153, 66, 4, 82, 69, 165, 80, 21, 9, 166, 150, 37, 90, 106, 38, 169, 21, 100, 169, 165, 133, 161, 165, 38, 165, 137, 162, 169, 150, 90, 69, 82, 153, 82, 165, 90, 9, 166, 69, 34, 128, 128, 150, 16, 1, 164, 145, 26, 24, 86, 33, 26, 137, 0, 16, 162, 130, 105, 2, 137, 149, 18, 9, 21, 73, 40, 66, 86, 82, 169, 86, 133, 70, 169, 82, 66, 169, 86, 86, 70, 70, 98, 133, 33, 9, 149, 86, 25, 150, 129, 70, 150, 88, 101, 85, 170, 154, 153, 145, 86, 38, 128, 88, 162, 160, 81, 130, 84, 97, 86, 6, 20, 153, 86, 150, 90, 105, 5, 33, 70, 102, 86, 165, 90, 37, 161, 37, 26, 86, 133, 5, 66, 90, 137, 18, 89, 22, 86, 8, 134, 136, 169, 66, 22, 168, 136, 146, 160, 85, 98, 1, 85, 34, 80, 74, 20, 90, 166, 73, 20, 102, 150, 150, 169, 169, 70, 90, 169, 105, 66, 86, 82, 25, 96, 169, 90, 161, 22, 165, 89, 165, 129, 98, 84, 90, 98, 169, 98, 106, 145, 70, 17, 160, 132, 153, 66, 73, 5, 10, 41, 164, 86, 32, 22, 161, 33, 9, 9, 20, 82, 170, 86, 1, 161, 33, 68, 70, 150, 170, 80, 133, 66, 129, 165, 6, 33, 69, 129, 70, 82, 74, 66, 130, 86, 16, 70, 70, 1, 34, 0, 82, 41, 33, 33, 96, 136, 153, 9, 105, 129, 149, 149, 4, 40, 149, 4, 105, 26, 9, 32, 82, 33, 133, 160, 100, 42, 18, 129, 0, 150, 169, 0, 128, 161, 82, 25, 100, 153, 152, 128, 134, 37, 153, 66, 41, 33, 64, 81, 89, 88, 146, 10, 37, 153, 38, 84, 133, 150, 82, 81, 81, 70, 1, 40, 144, 40, 9, 129, 9, 66, 74, 66, 74, 165, 100, 41, 130, 70, 86, 86, 105, 9, 0, 90, 68, 69, 22, 5, 9, 17, 134, 21, 5, 100, 40, 88, 146, 97, 1, 32, 153, 148, 64, 152, 100, 134, 86, 152, 169, 128, 144, 154, 68, 137, 90, 161, 66, 137, 105, 21, 41, 70, 41, 161, 86, 169, 18, 42, 41},
    {154, 66, 160, 17, 18, 82, 150, 66, 90, 2, 144, 64, 82, 5, 105, 8, 40, 82, 16, 26, 32, 98, 86, 160, 96, 25, 42, 105, 88, 42, 82, 150, 85, 162, 161, 160, 164, 165, 33, 161, 168, 82, 41, 18, 4, 101, 106, 165, 90, 169, 82, 32, 70, 1, 90, 20, 149, 90, 18, 104, 162, 128, 1, 90, 1, 41, 25, 2, 165, 164, 68, 24, 134, 24, 73, 10, 65, 73, 81, 165, 1, 82, 82, 80, 106, 90, 133, 84, 169, 86, 81, 168, 84, 102, 81, 80, 80, 40, 18, 165, 162, 88, 37, 85, 37, 89, 42, 68, 162, 164, 86, 18, 170, 165, 2, 153, 134, 146, 16, 161, 170, 89, 144, 1, 170, 80, 134, 97, 82, 105, 85, 164, 104, 161, 86, 89, 25, 85, 81, 161, 165, 38, 17, 34, 137, 96, 90, 88, 100, 150, 154, 150, 37, 146, 161, 33, 1, 98, 101, 22, 136, 69, 137, 38, 90, 66, 105, 80, 36, 88, 9, 168, 150, 73, 81, 80, 153, 34, 168, 169, 80, 152, 162, 168, 152, 18, 18, 134, 98, 33, 82, 41, 137, 160, 4, 38, 144, 24, 34, 101, 88, 133, 0, 82, 10, 24, 4, 37, 153, 16, 74, 153, 16, 88, 132, 162, 22, 161, 136, 33, 169, 64, 17, 68, 73, 41, 84, 160, 165, 128, 146, 132, 148, 85, 96, 134, 80, 164, 16, 64, 169, 150, 10, 68, 88, 81, 80, 88, 20, 86, 6, 100, 128, 132, 153, 16, 68, 152, 164, 32, 1, 37, 36, 9, 42, 1, 40, 40, 36, 8, 4, 134, 10, 164, 160, 16, 161, 166, 161, 22, 41, 34, 165, 36, 4, 96, 150, 38, 169, 70, 33, 9, 37, 101, 72, 134, 106, 168, 25, 101, 64, 37, 64, 37, 170, 21, 22, 165, 164, 148, 74, 160, 106, 89, 165, 1, 101, 98, 105, 41, 105, 165, 169, 42, 89, 84, 88, 74, 132, 33, 133, 82, 70, 85, 144, 129, 149, 73, 17, 33, 130, 0, 16, 160, 104, 166, 161, 161, 34, 161, 149, 74, 89, 161, 137, 154, 170, 169, 21, 8, 150, 144, 0, 85, 24, 132, 70, 41, 38, 105, 137, 90, 164, 32, 168, 161, 70, 165, 162, 80, 42, 84, 98, 101},
    {66, 144, 1, 20, 21, 102, 132, 2, 145, 90, 25, 160, 74, 21, 86, 101, 40, 130, 149, 148, 32, 5, 22, 165, 105, 100, 65, 150, 81, 161, 86, 129, 169, 105, 153, 37, 96, 105, 64, 97, 41, 102, 65, 102, 22, 149, 146, 33, 150, 170, 88, 8, 8, 96, 130, 130, 133, 0, 164, 65, 129, 106, 98, 134, 26, 25, 20, 106, 129, 101, 10, 105, 5, 42, 165, 20, 42, 21, 146, 137, 89, 148, 146, 150, 106, 144, 104, 129, 149, 70, 146, 101, 148, 2, 150, 82, 5, 169, 97, 106, 68, 149, 96, 138, 105, 145, 69, 17, 101, 145, 146, 149, 17, 25, 90, 1, 41, 21, 128, 36, 145, 18, 153, 162, 22, 42, 148, 149, 70, 80, 150, 104, 21, 21, 22, 136, 146, 106, 164, 96, 105, 40, 144, 134, 152, 105, 148, 38, 97, 146, 102, 86, 144, 146, 89, 40, 40, 102, 154, 66, 26, 150, 98, 32, 10, 25, 105, 65, 138, 162, 24, 40, 37, 21, 132, 69, 84, 24, 104, 81, 166, 82, 101, 96, 42, 6, 0, 33, 146, 105, 130, 40, 150, 9, 101, 17, 149, 130, 144, 66, 18, 65, 16, 136, 4, 74, 8, 6, 154, 166, 34, 2, 25, 16, 68, 25, 4, 65, 150, 81, 89, 82, 34, 138, 148, 17, 150, 32, 41, 89, 148, 162, 160, 64, 37, 160, 82, 9, 18, 1, 33, 22, 33, 22, 148, 144, 98, 64, 72, 69, 74, 9, 41, 64, 8, 20, 16, 17, 128, 104, 162, 1, 5, 0, 168, 20, 128, 128, 64, 10, 72, 96, 6, 68, 25, 130, 65, 169, 33, 72, 4, 136, 8, 96, 32, 101, 24, 169, 0, 80, 89, 9, 1, 130, 150, 37, 66, 41, 161, 169, 146, 86, 148, 17, 42, 22, 148, 102, 166, 164, 70, 101, 165, 97, 170, 40, 152, 90, 84, 22, 2, 101, 40, 73, 25, 90, 82, 105, 84, 86, 1, 22, 148, 84, 38, 81, 41, 136, 86, 73, 10, 18, 42, 73, 24, 137, 148, 100, 85, 16, 133, 24, 145, 84, 74, 89, 98, 162, 146, 169, 25, 6, 66, 105, 80, 81, 100, 26, 105, 26, 137, 146, 104, 97, 1, 89, 146, 137, 9, 18, 73, 134, 34, 73},
    {69, 154, 2, 4, 165, 16, 129, 40, 148, 40, 6, 86, 0, 86, 22, 100, 72, 98, 32, 20, 162, 34, 170, 74, 96, 38, 101, 18, 153, 86, 128, 101, 16, 65, 85, 41, 73, 81, 150, 153, 97, 89, 101, 10, 17, 25, 162, 21, 152, 88, 64, 5, 1, 16, 144, 98, 98, 104, 130, 168, 134, 17, 42, 160, 145, 33, 136, 170, 166, 104, 66, 165, 89, 8, 5, 34, 72, 90, 38, 165, 97, 170, 102, 162, 41, 154, 10, 132, 160, 26, 6, 37, 134, 26, 101, 100, 168, 82, 20, 37, 84, 152, 69, 136, 153, 26, 38, 154, 136, 66, 170, 170, 165, 105, 24, 138, 42, 6, 105, 89, 0, 81, 4, 88, 22, 150, 170, 104, 102, 128, 66, 25, 24, 84, 82, 18, 84, 72, 66, 81, 65, 105, 0, 170, 89, 68, 166, 170, 6, 74, 6, 97, 169, 84, 8, 25, 24, 138, 22, 20, 69, 166, 89, 98, 82, 168, 81, 66, 18, 146, 69, 26, 97, 37, 90, 130, 38, 137, 101, 41, 38, 134, 161, 105, 9, 166, 26, 97, 5, 73, 98, 89, 134, 84, 81, 17, 161, 128, 0, 9, 160, 73, 81, 129, 17, 162, 33, 42, 40, 34, 66, 40, 69, 81, 1, 65, 74, 66, 165, 149, 65, 6, 168, 96, 8, 128, 6, 96, 65, 65, 32, 66, 16, 5, 16, 22, 130, 105, 100, 129, 16, 146, 69, 134, 136, 25, 170, 101, 144, 1, 0, 9, 33, 106, 84, 25, 69, 145, 73, 64, 68, 65, 85, 40, 6, 150, 144, 132, 20, 150, 134, 96, 170, 65, 81, 70, 25, 68, 80, 101, 85, 10, 33, 73, 153, 148, 130, 86, 101, 136, 41, 82, 149, 26, 136, 130, 4, 42, 105, 144, 152, 128, 154, 5, 105, 144, 22, 136, 154, 68, 162, 22, 22, 129, 150, 132, 136, 40, 145, 169, 1, 81, 165, 9, 154, 166, 38, 162, 165, 154, 5, 34, 104, 22, 38, 144, 100, 170, 24, 144, 145, 144, 70, 165, 129, 6, 42, 145, 72, 145, 68, 16, 148, 170, 6, 84, 129, 70, 98, 160, 88, 20, 166, 66, 1, 21, 70, 150, 41, 138, 21, 138, 33, 33, 36, 81, 144, 134, 105, 153, 149, 154, 106, 17},
    {86, 105, 4, 170, 65, 82, 80, 80, 40, 134, 37, 88, 130, 21, 26, 38, 152, 40, 80, 65, 21, 16, 25, 82, 6, 104, 149, 88, 101, 18, 170, 10, 5, 42, 150, 20, 166, 170, 81, 150, 82, 102, 10, 89, 97, 26, 80, 82, 137, 6, 134, 162, 165, 136, 66, 129, 34, 38, 73, 169, 21, 104, 166, 69, 146, 145, 26, 129, 168, 74, 96, 133, 18, 162, 40, 66, 129, 72, 98, 166, 65, 153, 85, 97, 81, 105, 164, 24, 134, 169, 165, 9, 24, 24, 73, 33, 74, 166, 38, 22, 160, 89, 152, 74, 100, 2, 8, 105, 145, 101, 21, 128, 150, 161, 25, 9, 133, 97, 97, 100, 25, 26, 70, 170, 89, 144, 74, 170, 105, 168, 41, 36, 69, 89, 145, 97, 69, 86, 106, 38, 22, 86, 81, 152, 166, 132, 105, 102, 148, 132, 162, 81, 148, 146, 102, 150, 5, 34, 132, 154, 170, 24, 96, 144, 150, 170, 150, 150, 18, 88, 26, 136, 105, 169, 97, 165, 81, 88, 38, 72, 97, 81, 166, 38, 153, 97, 169, 84, 105, 22, 41, 166, 169, 134, 84, 6, 98, 41, 153, 84, 40, 144, 160, 160, 106, 96, 64, 8, 166, 66, 82, 129, 0, 72, 146, 2, 133, 10, 2, 18, 2, 138, 146, 146, 105, 38, 33, 4, 18, 134, 41, 32, 153, 16, 101, 20, 64, 164, 162, 97, 137, 137, 134, 129, 169, 96, 8, 66, 68, 20, 132, 5, 81, 68, 136, 42, 0, 42, 32, 4, 136, 16, 129, 136, 74, 130, 162, 136, 17, 1, 80, 152, 0, 18, 34, 105, 32, 0, 150, 144, 132, 1, 85, 168, 129, 6, 22, 18, 134, 73, 24, 150, 88, 18, 41, 154, 100, 169, 9, 160, 105, 134, 42, 138, 89, 101, 64, 100, 26, 68, 89, 150, 133, 145, 128, 97, 153, 136, 9, 34, 104, 42, 22, 6, 73, 105, 148, 25, 20, 41, 132, 101, 66, 41, 36, 4, 144, 137, 72, 132, 80, 160, 137, 150, 137, 168, 10, 72, 6, 168, 73, 16, 170, 20, 162, 98, 8, 24, 101, 145, 133, 134, 85, 165, 170, 89, 168, 5, 86, 85, 106, 101, 150, 38, 106, 5, 5, 38, 86, 105, 5, 25, 21, 6},
    {82, 133, 154, 132, 133, 86, 20, 100, 80, 20, 138, 88, 2, 170, 68, 132, 153, 144, 134, 68, 16, 90, 80, 1, 133, 4, 16, 102, 65, 145, 170, 2, 137, 161, 169, 21, 145, 17, 134, 136, 41, 133, 105, 148, 168, 161, 86, 133, 6, 41, 150, 1, 169, 162, 17, 164, 145, 69, 106, 80, 136, 162, 81, 88, 136, 145, 102, 89, 16, 73, 90, 137, 34, 89, 70, 68, 154, 64, 165, 98, 98, 82, 21, 22, 32, 10, 73, 6, 17, 86, 86, 34, 70, 70, 134, 133, 150, 41, 144, 104, 97, 150, 41, 34, 162, 20, 138, 162, 36, 152, 128, 150, 22, 145, 5, 152, 69, 166, 85, 162, 148, 168, 84, 32, 82, 137, 138, 86, 81, 26, 86, 65, 169, 101, 84, 37, 84, 25, 70, 1, 169, 105, 22, 90, 33, 104, 150, 160, 89, 85, 102, 21, 41, 105, 137, 9, 137, 70, 161, 73, 165, 6, 153, 152, 153, 34, 153, 21, 98, 162, 25, 84, 84, 85, 89, 149, 86, 70, 21, 170, 18, 69, 169, 69, 42, 133, 166, 168, 166, 105, 148, 37, 102, 41, 32, 104, 32, 132, 32, 72, 144, 2, 34, 132, 40, 80, 66, 66, 1, 73, 74, 22, 128, 130, 18, 96, 1, 2, 0, 33, 4, 130, 150, 137, 22, 64, 40, 41, 161, 8, 104, 146, 134, 98, 148, 0, 64, 0, 70, 84, 134, 130, 64, 2, 150, 136, 20, 6, 104, 104, 37, 64, 144, 16, 6, 96, 32, 169, 161, 88, 6, 102, 168, 36, 8, 72, 8, 96, 134, 9, 0, 5, 89, 40, 33, 6, 129, 96, 41, 97, 40, 128, 150, 9, 36, 130, 146, 32, 137, 102, 70, 169, 4, 86, 38, 170, 137, 137, 150, 134, 145, 41, 128, 37, 74, 86, 22, 42, 164, 145, 134, 32, 152, 150, 32, 72, 81, 20, 101, 105, 33, 161, 102, 161, 70, 150, 153, 82, 21, 166, 149, 129, 149, 74, 150, 129, 86, 169, 22, 90, 102, 81, 73, 42, 42, 153, 65, 164, 169, 164, 98, 101, 73, 150, 138, 88, 149, 88, 100, 169, 146, 66, 152, 161, 86, 70, 24, 18, 152, 150, 161, 86, 33, 102, 105, 73, 149, 22, 42, 98, 164, 70, 150, 40},
    {37, 22, 169, 2, 24, 86, 133, 80, 34, 86, 37, 145, 74, 65, 150, 33, 128, 37, 22, 66, 96, 165, 100, 168, 38, 81, 168, 100, 5, 82, 150, 21, 154, 153, 169, 149, 169, 170, 102, 169, 169, 66, 40, 102, 169, 153, 86, 138, 84, 42, 133, 170, 74, 82, 8, 80, 138, 74, 69, 106, 170, 8, 5, 84, 4, 162, 68, 138, 130, 88, 90, 102, 130, 168, 146, 102, 96, 128, 96, 161, 105, 100, 70, 86, 137, 5, 165, 6, 136, 16, 22, 9, 86, 69, 101, 84, 70, 170, 164, 161, 137, 96, 89, 6, 132, 86, 37, 89, 161, 73, 98, 9, 152, 154, 102, 17, 137, 100, 86, 168, 85, 2, 102, 160, 10, 102, 105, 69, 150, 102, 69, 152, 165, 153, 32, 132, 102, 166, 6, 137, 153, 153, 85, 101, 170, 138, 69, 37, 153, 101, 165, 166, 150, 170, 154, 137, 137, 170, 166, 72, 169, 24, 137, 134, 98, 42, 9, 86, 132, 33, 6, 88, 168, 170, 153, 154, 69, 33, 137, 9, 100, 98, 162, 136, 72, 101, 102, 160, 38, 170, 70, 24, 6, 9, 40, 80, 41, 2, 32, 105, 37, 25, 36, 129, 100, 5, 33, 97, 34, 137, 36, 169, 1, 144, 152, 16, 132, 73, 8, 81, 40, 97, 1, 0, 36, 9, 96, 0, 8, 154, 1, 90, 20, 80, 68, 96, 22, 24, 128, 70, 170, 20, 33, 66, 4, 66, 134, 80, 22, 16, 22, 6, 128, 74, 68, 22, 9, 40, 168, 169, 82, 90, 168, 8, 165, 148, 6, 20, 16, 1, 18, 26, 8, 169, 137, 102, 20, 10, 72, 136, 89, 20, 8, 128, 38, 136, 18, 17, 138, 69, 89, 42, 153, 72, 101, 153, 166, 41, 22, 24, 42, 22, 102, 105, 85, 90, 132, 89, 164, 104, 104, 170, 32, 106, 154, 152, 100, 149, 82, 165, 162, 128, 154, 169, 102, 86, 165, 20, 145, 84, 10, 36, 133, 36, 20, 145, 0, 26, 69, 130, 96, 0, 130, 137, 128, 129, 100, 138, 68, 102, 70, 70, 160, 4, 154, 5, 154, 38, 41, 26, 138, 80, 154, 169, 133, 26, 36, 24, 16, 70, 169, 102, 41, 25, 153, 170, 134, 154, 90, 162, 152, 20, 37, 137},
    {102, 145, 170, 37, 145, 0, 5, 153, 136, 133, 42, 8, 133, 129, 66, 2, 168, 8, 84, 89, 145, 68, 69, 136, 104, 133, 69, 145, 40, 33, 168, 6, 148, 38, 161, 154, 34, 42, 33, 42, 18, 40, 96, 73, 168, 165, 18, 102, 149, 168, 81, 10, 129, 153, 89, 160, 164, 36, 89, 145, 38, 162, 74, 145, 65, 130, 160, 36, 32, 36, 1, 137, 89, 1, 101, 81, 152, 6, 128, 40, 42, 149, 84, 84, 137, 148, 170, 36, 70, 86, 85, 38, 80, 17, 133, 21, 17, 162, 170, 74, 162, 85, 8, 88, 166, 152, 69, 101, 145, 166, 81, 81, 22, 26, 9, 5, 154, 136, 24, 37, 38, 24, 166, 152, 89, 168, 6, 165, 130, 86, 133, 162, 166, 169, 133, 8, 69, 148, 22, 170, 74, 34, 24, 145, 42, 10, 68, 17, 96, 169, 22, 169, 133, 170, 166, 138, 1, 134, 41, 106, 72, 81, 80, 17, 89, 86, 170, 154, 145, 145, 22, 17, 17, 4, 152, 146, 149, 97, 106, 169, 1, 145, 162, 166, 97, 105, 80, 169, 4, 136, 85, 68, 81, 160, 166, 104, 80, 88, 33, 68, 25, 72, 129, 100, 0, 69, 22, 161, 153, 101, 37, 164, 128, 17, 138, 21, 101, 2, 41, 9, 138, 40, 161, 20, 144, 98, 0, 170, 104, 34, 64, 72, 73, 97, 160, 106, 20, 137, 72, 80, 168, 82, 102, 148, 65, 1, 88, 144, 24, 66, 152, 148, 24, 21, 145, 81, 32, 128, 161, 1, 80, 2, 160, 2, 98, 168, 96, 1, 34, 10, 40, 40, 36, 166, 170, 85, 168, 84, 161, 40, 168, 64, 40, 146, 144, 161, 24, 96, 32, 133, 90, 149, 88, 17, 148, 138, 97, 130, 72, 133, 8, 24, 81, 5, 65, 80, 5, 10, 136, 89, 0, 153, 5, 145, 22, 38, 105, 100, 162, 98, 161, 70, 138, 40, 65, 149, 89, 90, 9, 166, 170, 146, 148, 89, 149, 105, 42, 137, 9, 134, 86, 5, 170, 32, 64, 72, 20, 106, 128, 26, 10, 162, 97, 90, 150, 96, 170, 5, 8, 42, 160, 138, 166, 104, 38, 40, 74, 37, 18, 82, 162, 85, 24, 24, 42, 170, 24, 18, 41, 149, 36, 152, 85, 168},
    {34, 145, 70, 145, 145, 17, 129, 20, 33, 5, 130, 42, 0, 86, 41, 69, 102, 169, 81, 166, 82, 134, 89, 90, 74, 128, 84, 80, 132, 166, 33, 38, 100, 168, 73, 134, 32, 106, 100, 89, 72, 106, 97, 72, 86, 150, 161, 104, 152, 105, 0, 154, 98, 66, 145, 82, 73, 149, 146, 10, 170, 104, 73, 149, 36, 66, 33, 161, 98, 85, 0, 5, 162, 106, 101, 150, 102, 169, 40, 106, 2, 36, 86, 164, 105, 17, 73, 166, 36, 148, 17, 162, 132, 25, 150, 153, 150, 82, 32, 137, 64, 84, 90, 137, 38, 90, 89, 165, 146, 84, 1, 153, 89, 104, 132, 102, 85, 150, 133, 170, 98, 24, 170, 82, 88, 36, 144, 33, 150, 101, 148, 34, 165, 106, 133, 136, 144, 154, 150, 102, 74, 80, 132, 41, 85, 98, 130, 149, 104, 149, 133, 165, 73, 169, 106, 72, 165, 144, 86, 153, 4, 33, 134, 2, 137, 153, 90, 86, 74, 146, 150, 84, 150, 85, 134, 84, 145, 134, 170, 69, 128, 33, 10, 0, 85, 145, 36, 66, 80, 6, 21, 106, 5, 10, 138, 72, 68, 148, 105, 40, 148, 100, 20, 100, 128, 134, 68, 5, 152, 69, 2, 37, 145, 32, 89, 90, 144, 2, 130, 32, 18, 20, 36, 170, 80, 133, 145, 74, 64, 25, 145, 21, 25, 2, 22, 9, 32, 84, 24, 166, 16, 73, 36, 1, 5, 134, 144, 16, 26, 88, 128, 146, 34, 20, 145, 4, 25, 0, 133, 38, 9, 105, 97, 9, 100, 88, 37, 2, 106, 128, 6, 16, 2, 105, 132, 148, 96, 89, 80, 168, 18, 2, 68, 65, 25, 72, 145, 74, 8, 145, 97, 133, 74, 37, 129, 74, 162, 101, 37, 85, 153, 74, 40, 17, 165, 86, 81, 170, 97, 149, 21, 132, 168, 134, 42, 128, 148, 69, 37, 164, 85, 66, 16, 34, 42, 153, 145, 38, 101, 164, 36, 65, 4, 133, 150, 101, 132, 72, 150, 42, 160, 149, 136, 136, 0, 149, 154, 42, 106, 40, 104, 38, 5, 101, 90, 161, 37, 150, 65, 40, 90, 84, 40, 169, 146, 84, 5, 40, 26, 170, 96, 132, 41, 34, 165, 98, 26, 73, 9, 133, 8, 20, 170, 72},
    {10, 72, 65, 64, 165, 138, 96, 6, 1, 32, 90, 153, 26, 164, 1, 33, 16, 162, 100, 90, 25, 169, 72, 81, 146, 145, 106, 154, 70, 74, 138, 10, 82, 69, 80, 70, 0, 69, 88, 148, 100, 38, 101, 170, 150, 100, 42, 37, 74, 22, 8, 69, 40, 150, 4, 170, 145, 66, 88, 82, 137, 20, 149, 66, 145, 85, 168, 90, 137, 6, 146, 37, 42, 84, 73, 130, 82, 138, 153, 40, 70, 34, 150, 164, 21, 145, 97, 130, 38, 169, 22, 32, 154, 169, 4, 138, 133, 100, 73, 74, 148, 146, 37, 10, 85, 133, 26, 154, 21, 105, 170, 10, 97, 9, 24, 130, 146, 88, 162, 68, 145, 100, 169, 89, 26, 105, 25, 33, 26, 138, 170, 68, 148, 84, 168, 26, 150, 169, 137, 6, 34, 101, 160, 154, 22, 85, 8, 2, 101, 38, 106, 154, 85, 6, 86, 16, 96, 153, 129, 100, 101, 161, 37, 145, 38, 90, 40, 25, 152, 133, 136, 18, 160, 153, 6, 153, 10, 168, 33, 38, 104, 138, 65, 84, 86, 168, 150, 105, 149, 69, 138, 5, 146, 4, 165, 64, 74, 42, 150, 5, 72, 96, 68, 1, 5, 42, 26, 69, 86, 6, 96, 144, 129, 16, 32, 64, 2, 169, 132, 32, 84, 105, 136, 165, 8, 0, 16, 16, 69, 37, 2, 170, 8, 161, 144, 96, 9, 72, 17, 4, 85, 26, 34, 34, 24, 17, 80, 8, 40, 32, 69, 40, 41, 8, 25, 104, 5, 18, 84, 4, 20, 134, 20, 4, 18, 165, 32, 88, 0, 36, 80, 1, 146, 84, 102, 10, 68, 1, 164, 69, 0, 26, 0, 98, 2, 17, 170, 25, 37, 72, 40, 165, 101, 170, 104, 5, 42, 37, 104, 153, 16, 26, 42, 74, 168, 24, 148, 164, 137, 10, 166, 80, 8, 2, 165, 89, 148, 42, 88, 162, 105, 82, 165, 101, 154, 161, 8, 132, 73, 152, 65, 106, 90, 154, 168, 105, 129, 21, 138, 18, 66, 82, 5, 24, 169, 138, 17, 22, 86, 10, 10, 2, 81, 166, 84, 38, 37, 152, 138, 5, 26, 166, 69, 164, 74, 37, 97, 170, 5, 150, 65, 152, 166, 4, 69, 85, 8, 36, 74, 133, 81, 161, 90, 165},
    {129, 17, 2, 105, 137, 2, 97, 6, 165, 2, 6, 40, 144, 104, 137, 2, 152, 41, 100, 9, 153, 152, 10, 166, 134, 154, 154, 170, 32, 84, 40, 16, 69, 165, 69, 65, 33, 152, 145, 132, 166, 152, 37, 86, 106, 26, 90, 5, 16, 144, 17, 34, 16, 68, 37, 154, 81, 133, 17, 36, 150, 65, 138, 40, 74, 129, 73, 130, 16, 66, 154, 70, 84, 162, 168, 101, 20, 154, 97, 146, 37, 148, 100, 129, 73, 10, 64, 154, 37, 138, 150, 16, 26, 128, 72, 168, 69, 153, 145, 165, 37, 2, 96, 36, 169, 90, 150, 26, 32, 25, 66, 21, 36, 88, 22, 152, 101, 150, 96, 98, 9, 100, 138, 66, 81, 154, 89, 165, 146, 41, 24, 41, 81, 169, 132, 6, 81, 86, 130, 161, 105, 1, 70, 145, 144, 90, 22, 69, 169, 165, 38, 165, 88, 72, 80, 22, 150, 86, 85, 166, 101, 90, 17, 21, 106, 154, 145, 81, 128, 10, 161, 34, 164, 132, 17, 152, 144, 152, 82, 169, 136, 34, 5, 40, 73, 133, 106, 21, 102, 101, 66, 41, 128, 24, 8, 1, 152, 128, 70, 20, 128, 132, 68, 4, 40, 136, 5, 64, 0, 41, 32, 64, 89, 0, 0, 129, 72, 162, 24, 132, 4, 132, 74, 16, 130, 40, 22, 97, 36, 133, 130, 152, 150, 130, 153, 68, 0, 149, 2, 146, 38, 20, 24, 100, 36, 40, 34, 136, 1, 20, 2, 72, 9, 144, 68, 128, 69, 2, 69, 34, 98, 65, 64, 164, 0, 36, 42, 10, 161, 10, 134, 132, 152, 68, 64, 146, 106, 36, 105, 64, 97, 138, 88, 20, 40, 97, 16, 33, 10, 150, 66, 73, 18, 20, 105, 148, 33, 101, 73, 68, 152, 10, 152, 17, 170, 146, 170, 164, 85, 150, 17, 129, 133, 98, 85, 137, 86, 104, 154, 84, 162, 81, 85, 64, 70, 70, 168, 134, 18, 89, 97, 162, 170, 2, 134, 36, 105, 8, 64, 41, 162, 152, 100, 82, 130, 164, 40, 32, 133, 85, 81, 74, 88, 88, 100, 34, 104, 90, 102, 104, 70, 168, 102, 104, 5, 144, 165, 18, 85, 66, 32, 154, 2, 22, 65, 160, 146, 6, 21, 24, 42, 16, 98, 65},
    {65, 73, 164, 144, 41, 33, 42, 170, 145, 152, 20, 85, 136, 88, 130, 168, 81, 101, 2, 106, 16, 81, 17, 166, 33, 138, 132, 74, 144, 102, 82, 5, 166, 132, 128, 85, 134, 149, 170, 149, 20, 74, 21, 138, 106, 17, 88, 85, 25, 6, 144, 82, 148, 8, 1, 97, 162, 73, 97, 101, 153, 148, 18, 153, 144, 21, 129, 130, 90, 134, 17, 22, 154, 102, 138, 106, 136, 160, 74, 166, 20, 104, 81, 65, 133, 104, 154, 72, 149, 145, 97, 148, 73, 9, 72, 106, 9, 150, 74, 102, 149, 32, 42, 160, 6, 138, 40, 69, 21, 5, 90, 153, 33, 38, 97, 22, 84, 96, 41, 154, 166, 165, 25, 34, 166, 148, 100, 105, 74, 148, 97, 86, 150, 26, 104, 170, 128, 150, 89, 150, 162, 5, 41, 97, 149, 150, 41, 66, 98, 25, 101, 89, 17, 20, 152, 166, 97, 38, 129, 42, 150, 24, 38, 21, 82, 100, 70, 89, 70, 98, 153, 168, 9, 164, 164, 64, 168, 41, 148, 145, 104, 66, 133, 134, 170, 169, 73, 37, 149, 148, 74, 134, 89, 145, 165, 144, 0, 64, 9, 33, 64, 133, 34, 72, 166, 10, 152, 64, 105, 9, 34, 148, 138, 160, 4, 16, 25, 22, 148, 6, 134, 149, 90, 65, 73, 20, 32, 17, 5, 133, 41, 104, 72, 148, 161, 6, 18, 37, 85, 88, 37, 24, 153, 66, 34, 36, 98, 33, 0, 0, 25, 138, 132, 33, 10, 65, 96, 146, 41, 164, 81, 144, 146, 6, 17, 18, 152, 84, 40, 134, 2, 133, 33, 153, 38, 104, 136, 137, 134, 37, 150, 88, 5, 104, 36, 148, 86, 0, 150, 145, 68, 24, 144, 96, 153, 97, 84, 152, 153, 148, 129, 104, 106, 144, 164, 130, 33, 101, 168, 166, 73, 26, 65, 69, 84, 26, 90, 80, 168, 102, 40, 148, 165, 149, 89, 106, 90, 21, 70, 101, 68, 89, 41, 5, 64, 149, 32, 88, 25, 102, 32, 9, 24, 149, 64, 82, 2, 22, 65, 128, 82, 137, 145, 21, 149, 40, 149, 164, 16, 82, 149, 128, 80, 102, 161, 102, 82, 1, 149, 37, 148, 73, 149, 37, 25, 150, 170, 69, 149, 104, 86, 106, 33, 144},
    {8, 81, 34, 26, 86, 89, 64, 4, 86, 69, 65, 68, 88, 169, 17, 146, 25, 16, 133, 89, 86, 37, 84, 69, 169, 85, 18, 89, 16, 73, 90, 80, 169, 134, 42, 4, 36, 166, 73, 132, 102, 81, 166, 104, 150, 21, 80, 6, 89, 164, 80, 36, 10, 105, 161, 146, 170, 80, 64, 40, 104, 22, 26, 65, 85, 166, 40, 18, 42, 16, 24, 102, 25, 9, 129, 160, 24, 2, 25, 38, 170, 25, 65, 85, 98, 85, 134, 89, 102, 88, 153, 164, 16, 89, 152, 21, 153, 144, 34, 81, 166, 17, 88, 9, 165, 148, 89, 137, 129, 69, 106, 8, 21, 6, 152, 170, 40, 85, 97, 106, 102, 138, 20, 4, 80, 128, 81, 136, 70, 145, 22, 164, 150, 102, 149, 137, 169, 169, 81, 38, 97, 86, 37, 84, 130, 101, 89, 168, 41, 98, 9, 32, 18, 168, 21, 73, 166, 85, 161, 21, 164, 168, 166, 64, 89, 148, 21, 6, 89, 24, 100, 130, 96, 150, 70, 85, 88, 10, 104, 166, 89, 81, 100, 144, 21, 73, 89, 165, 146, 38, 16, 134, 80, 138, 160, 82, 97, 96, 6, 81, 65, 100, 145, 9, 153, 64, 101, 152, 10, 6, 20, 40, 160, 65, 138, 38, 1, 84, 132, 18, 128, 1, 65, 138, 17, 34, 25, 130, 2, 134, 68, 8, 96, 100, 16, 32, 8, 17, 41, 89, 128, 101, 42, 153, 81, 89, 97, 97, 100, 97, 24, 81, 2, 104, 145, 97, 129, 0, 146, 152, 20, 130, 166, 1, 18, 162, 32, 0, 0, 34, 96, 0, 84, 22, 70, 89, 36, 132, 130, 162, 166, 74, 9, 0, 25, 150, 97, 145, 145, 74, 161, 104, 130, 16, 68, 133, 42, 166, 134, 166, 145, 25, 40, 104, 102, 72, 128, 38, 170, 18, 86, 162, 17, 2, 17, 154, 81, 41, 104, 34, 130, 42, 164, 134, 105, 89, 88, 6, 166, 137, 36, 137, 25, 25, 129, 164, 36, 6, 20, 168, 97, 4, 150, 96, 134, 64, 169, 166, 105, 65, 22, 10, 130, 37, 25, 22, 98, 97, 73, 106, 164, 82, 166, 6, 37, 166, 17, 89, 166, 84, 166, 69, 37, 38, 32, 166, 81, 134, 170, 5, 149, 89, 105, 42},
    {10, 105, 129, 74, 96, 34, 96, 86, 66, 6, 98, 74, 34, 100, 22, 16, 146, 82, 150, 82, 72, 106, 105, 138, 132, 38, 5, 106, 101, 160, 169, 32, 149, 137, 21, 134, 21, 138, 150, 105, 132, 137, 132, 101, 138, 81, 106, 145, 106, 149, 66, 17, 150, 165, 72, 138, 70, 69, 102, 69, 42, 145, 26, 9, 105, 148, 85, 133, 169, 133, 40, 81, 102, 65, 144, 97, 42, 40, 0, 165, 26, 104, 104, 22, 148, 106, 134, 88, 132, 72, 72, 145, 98, 102, 64, 82, 97, 153, 42, 129, 165, 81, 150, 85, 153, 146, 128, 166, 25, 165, 105, 5, 9, 66, 74, 166, 9, 170, 149, 150, 170, 145, 104, 96, 97, 145, 162, 101, 82, 37, 168, 153, 136, 164, 102, 153, 165, 84, 162, 149, 149, 144, 4, 104, 134, 146, 105, 105, 152, 145, 97, 102, 144, 133, 90, 146, 149, 72, 128, 73, 37, 97, 37, 106, 105, 88, 102, 105, 22, 81, 164, 89, 69, 89, 165, 104, 130, 9, 68, 138, 82, 21, 145, 153, 66, 70, 64, 134, 90, 149, 65, 153, 136, 9, 69, 130, 41, 80, 22, 6, 74, 129, 18, 130, 129, 104, 88, 170, 17, 5, 65, 72, 25, 104, 152, 148, 98, 18, 86, 128, 80, 74, 98, 24, 40, 130, 101, 134, 21, 132, 4, 33, 164, 145, 68, 21, 26, 132, 170, 40, 74, 1, 129, 16, 2, 0, 65, 41, 129, 129, 160, 66, 145, 137, 66, 8, 0, 16, 21, 166, 34, 134, 0, 66, 128, 164, 146, 82, 168, 73, 130, 152, 6, 4, 65, 96, 69, 128, 68, 145, 132, 96, 33, 96, 38, 162, 160, 5, 165, 1, 20, 70, 137, 69, 104, 100, 36, 73, 72, 72, 40, 154, 88, 160, 96, 90, 162, 100, 22, 166, 161, 161, 105, 169, 33, 90, 154, 26, 73, 166, 85, 137, 64, 72, 106, 168, 86, 8, 148, 169, 153, 74, 74, 105, 96, 6, 130, 26, 36, 38, 105, 166, 138, 20, 32, 1, 104, 136, 74, 130, 81, 66, 0, 24, 68, 6, 9, 38, 84, 133, 166, 40, 42, 21, 21, 166, 149, 170, 128, 96, 68, 106, 37, 138, 1, 129, 104, 153, 134, 32, 70, 90, 166, 146},
    {25, 160, 84, 37, 4, 16, 137, 169, 100, 4, 166, 81, 0, 166, 8, 40, 25, 145, 160, 82, 16, 84, 150, 166, 97, 148, 105, 26, 105, 150, 102, 88, 170, 68, 66, 130, 10, 42, 89, 36, 40, 38, 2, 133, 106, 162, 165, 134, 20, 98, 152, 0, 70, 38, 17, 33, 136, 170, 154, 41, 17, 134, 105, 133, 22, 102, 96, 146, 74, 88, 153, 37, 150, 16, 165, 101, 17, 105, 150, 98, 74, 134, 133, 145, 10, 153, 102, 129, 90, 128, 145, 80, 86, 34, 153, 25, 149, 106, 8, 24, 106, 149, 9, 149, 89, 152, 25, 149, 88, 152, 69, 20, 150, 80, 69, 129, 74, 149, 169, 26, 90, 37, 145, 153, 22, 98, 82, 148, 90, 65, 20, 106, 106, 74, 149, 170, 145, 41, 10, 106, 106, 82, 101, 133, 97, 80, 154, 160, 24, 101, 145, 25, 26, 34, 169, 26, 40, 153, 22, 33, 90, 68, 98, 36, 41, 144, 106, 98, 4, 69, 102, 169, 145, 20, 97, 81, 144, 1, 161, 74, 149, 37, 98, 90, 25, 149, 24, 170, 166, 96, 148, 74, 165, 104, 24, 42, 136, 17, 22, 166, 149, 17, 33, 20, 161, 16, 136, 33, 42, 74, 128, 21, 16, 154, 80, 26, 16, 0, 80, 38, 72, 149, 96, 24, 128, 64, 145, 10, 74, 72, 9, 1, 134, 96, 132, 100, 160, 145, 17, 16, 101, 145, 68, 149, 85, 10, 133, 152, 42, 132, 36, 152, 10, 18, 133, 160, 40, 160, 34, 18, 80, 96, 24, 32, 33, 22, 144, 16, 70, 169, 2, 70, 154, 72, 96, 21, 66, 128, 106, 104, 152, 6, 9, 170, 160, 164, 145, 4, 42, 5, 21, 102, 80, 37, 65, 150, 90, 98, 137, 100, 74, 168, 150, 86, 41, 149, 85, 34, 81, 96, 145, 97, 165, 89, 133, 69, 81, 80, 32, 25, 41, 2, 98, 106, 154, 149, 137, 85, 162, 20, 98, 165, 5, 149, 164, 102, 9, 18, 36, 88, 40, 85, 24, 1, 32, 24, 154, 72, 6, 101, 10, 129, 36, 134, 170, 82, 10, 146, 64, 21, 146, 136, 90, 90, 69, 70, 132, 85, 74, 25, 34, 133, 165, 10, 98, 106, 136, 98, 98, 136, 138, 134, 153, 74},
    {89, 84, 164, 86, 165, 89, 21, 72, 25, 24, 37, 90, 104, 36, 81, 70, 97, 17, 104, 65, 138, 82, 90, 164, 153, 33, 70, 90, 133, 22, 6, 70, 130, 165, 132, 153, 132, 165, 21, 137, 153, 133, 164, 168, 164, 86, 73, 70, 104, 6, 17, 6, 38, 129, 0, 129, 150, 65, 0, 162, 133, 21, 22, 73, 106, 133, 90, 130, 146, 38, 88, 98, 138, 18, 170, 98, 74, 133, 104, 164, 37, 90, 106, 89, 37, 89, 165, 105, 85, 90, 72, 162, 106, 24, 82, 90, 89, 134, 134, 132, 133, 153, 148, 26, 165, 106, 160, 89, 134, 149, 90, 170, 40, 70, 138, 37, 22, 105, 90, 145, 166, 168, 40, 1, 22, 10, 22, 105, 106, 85, 90, 133, 164, 132, 40, 144, 74, 16, 40, 165, 133, 150, 73, 106, 150, 148, 168, 106, 129, 73, 137, 106, 70, 136, 161, 129, 74, 41, 100, 129, 37, 149, 169, 106, 86, 40, 34, 106, 73, 104, 105, 97, 64, 165, 132, 104, 22, 148, 149, 20, 154, 72, 161, 134, 154, 90, 2, 161, 85, 133, 74, 37, 42, 149, 133, 144, 4, 64, 138, 69, 34, 5, 38, 169, 68, 105, 132, 96, 6, 4, 136, 132, 40, 16, 0, 16, 26, 16, 66, 164, 165, 40, 9, 96, 24, 20, 72, 4, 37, 133, 68, 82, 16, 1, 105, 68, 10, 36, 22, 104, 166, 168, 133, 10, 40, 65, 66, 80, 18, 33, 144, 17, 169, 85, 154, 20, 136, 32, 100, 8, 80, 149, 169, 2, 165, 169, 148, 154, 165, 40, 145, 33, 88, 22, 136, 80, 17, 24, 5, 134, 1, 1, 82, 74, 146, 161, 66, 33, 130, 74, 1, 169, 36, 97, 74, 24, 4, 149, 102, 101, 26, 134, 72, 97, 137, 106, 97, 165, 145, 73, 74, 137, 106, 88, 81, 82, 136, 25, 38, 105, 86, 100, 137, 161, 24, 90, 81, 154, 137, 164, 36, 138, 72, 106, 72, 165, 1, 134, 98, 132, 10, 32, 144, 0, 18, 145, 65, 144, 165, 41, 16, 98, 66, 97, 24, 153, 33, 104, 106, 98, 149, 89, 130, 164, 10, 134, 164, 97, 65, 89, 133, 106, 164, 132, 148, 132, 26, 1, 101, 66, 20, 90, 105, 132},
    {137, 150, 73, 150, 150, 66, 22, 64, 86, 153, 32, 104, 6, 162, 81, 100, 169, 165, 34, 146, 2, 154, 4, 160, 170, 146, 144, 0, 145, 128, 65, 72, 165, 97, 97, 97, 101, 73, 41, 102, 72, 162, 88, 130, 105, 102, 150, 170, 150, 104, 146, 160, 72, 4, 154, 0, 169, 161, 96, 132, 148, 98, 26, 2, 68, 101, 88, 161, 9, 37, 165, 164, 106, 104, 74, 146, 5, 69, 162, 72, 100, 161, 162, 146, 105, 26, 105, 26, 86, 38, 134, 69, 22, 146, 150, 132, 17, 102, 34, 65, 102, 133, 97, 74, 68, 90, 128, 86, 86, 81, 26, 146, 168, 105, 86, 37, 41, 22, 137, 105, 68, 170, 82, 21, 138, 152, 21, 26, 38, 154, 150, 64, 6, 101, 10, 8, 162, 169, 18, 98, 37, 69, 150, 80, 84, 97, 146, 146, 133, 82, 90, 146, 100, 34, 100, 160, 150, 85, 86, 89, 85, 22, 106, 160, 149, 134, 105, 170, 22, 65, 162, 152, 40, 84, 146, 20, 164, 90, 74, 40, 144, 152, 97, 101, 97, 146, 146, 72, 24, 33, 136, 81, 138, 73, 73, 64, 153, 132, 100, 18, 128, 80, 97, 68, 97, 130, 152, 36, 170, 154, 17, 70, 40, 21, 104, 168, 42, 42, 40, 97, 105, 5, 22, 8, 132, 104, 134, 128, 64, 96, 10, 144, 18, 10, 145, 73, 2, 41, 162, 150, 102, 129, 64, 144, 6, 130, 24, 25, 40, 1, 106, 0, 154, 146, 1, 84, 32, 97, 84, 36, 102, 101, 64, 96, 66, 168, 0, 146, 64, 2, 20, 96, 166, 97, 65, 146, 133, 26, 68, 64, 101, 18, 34, 144, 0, 65, 153, 69, 33, 22, 153, 38, 18, 90, 86, 32, 42, 165, 169, 89, 66, 105, 21, 102, 90, 128, 129, 146, 165, 170, 34, 41, 18, 101, 34, 18, 72, 82, 105, 100, 144, 73, 89, 105, 104, 164, 20, 85, 129, 36, 41, 166, 17, 2, 86, 8, 42, 8, 1, 96, 22, 165, 97, 4, 169, 106, 152, 89, 129, 146, 65, 66, 88, 104, 37, 70, 32, 36, 162, 82, 66, 136, 1, 97, 166, 145, 145, 22, 101, 170, 84, 150, 104, 36, 68, 96, 134, 100, 101, 17, 165, 148, 90, 168},
    {160, 148, 10, 21, 132, 148, 146, 146, 36, 144, 32, 80, 9, 82, 137, 128, 104, 33, 161, 150, 96, 153, 145, 40, 96, 132, 1, 168, 168, 5, 105, 169, 105, 104, 6, 34, 33, 88, 106, 165, 66, 128, 106, 40, 26, 21, 136, 128, 149, 66, 128, 82, 97, 64, 101, 129, 41, 80, 5, 105, 100, 72, 150, 148, 22, 84, 37, 2, 86, 89, 153, 144, 22, 22, 150, 66, 89, 97, 166, 86, 70, 133, 153, 148, 105, 129, 74, 21, 69, 37, 133, 74, 144, 17, 132, 165, 133, 70, 104, 41, 104, 161, 106, 144, 26, 66, 1, 10, 42, 88, 18, 68, 86, 90, 20, 38, 82, 169, 136, 160, 74, 133, 150, 136, 20, 38, 169, 168, 162, 133, 89, 90, 89, 90, 64, 24, 153, 100, 25, 80, 162, 21, 162, 20, 86, 106, 132, 128, 105, 21, 152, 149, 100, 104, 98, 98, 130, 130, 37, 149, 166, 101, 80, 69, 5, 21, 106, 86, 165, 90, 101, 133, 0, 42, 165, 100, 162, 152, 26, 40, 153, 150, 64, 2, 144, 82, 152, 82, 18, 101, 129, 32, 4, 74, 0, 72, 154, 148, 98, 81, 145, 64, 72, 42, 97, 129, 20, 72, 0, 148, 17, 64, 36, 152, 37, 146, 134, 96, 164, 65, 66, 33, 161, 128, 17, 128, 37, 96, 65, 6, 133, 160, 149, 138, 0, 24, 26, 20, 144, 72, 26, 32, 34, 0, 145, 132, 145, 145, 144, 37, 16, 18, 16, 16, 136, 148, 42, 96, 37, 90, 150, 82, 104, 74, 104, 32, 66, 149, 74, 32, 145, 74, 164, 22, 33, 129, 65, 100, 98, 2, 130, 145, 16, 37, 16, 10, 145, 144, 100, 136, 10, 100, 90, 145, 138, 73, 104, 32, 38, 68, 100, 18, 153, 21, 16, 8, 5, 98, 32, 86, 144, 105, 36, 148, 150, 34, 37, 166, 137, 40, 25, 18, 100, 105, 166, 84, 137, 96, 65, 128, 69, 133, 149, 6, 81, 96, 34, 74, 149, 42, 138, 98, 2, 104, 97, 138, 68, 6, 41, 73, 26, 134, 24, 136, 70, 5, 98, 104, 88, 136, 90, 137, 136, 88, 26, 170, 129, 42, 101, 101, 10, 21, 105, 74, 70, 106, 154, 37, 102, 169, 165, 165, 72, 73},
    {9, 134, 26, 21, 164, 21, 10, 165, 64, 66, 33, 148, 88, 88, 149, 69, 85, 20, 136, 85, 72, 160, 128, 86, 40, 128, 102, 133, 161, 150, 170, 34, 2, 130, 70, 81, 105, 32, 34, 22, 37, 154, 37, 18, 17, 21, 17, 105, 149, 42, 68, 32, 74, 82, 164, 128, 33, 169, 81, 37, 9, 88, 136, 72, 26, 26, 136, 100, 18, 137, 24, 132, 80, 100, 169, 136, 81, 41, 164, 74, 102, 166, 134, 144, 70, 128, 1, 148, 65, 145, 169, 64, 129, 153, 85, 145, 17, 100, 42, 96, 101, 20, 161, 74, 89, 20, 134, 86, 84, 82, 26, 166, 106, 4, 137, 150, 102, 73, 1, 150, 165, 128, 6, 10, 34, 26, 146, 101, 154, 22, 10, 101, 88, 102, 37, 9, 100, 34, 90, 101, 42, 104, 0, 153, 65, 18, 169, 154, 98, 100, 0, 0, 162, 165, 20, 85, 165, 37, 42, 137, 40, 24, 64, 100, 36, 9, 22, 137, 86, 25, 70, 162, 130, 133, 42, 74, 106, 137, 104, 96, 168, 132, 101, 105, 25, 101, 25, 72, 80, 68, 137, 73, 152, 68, 34, 21, 1, 137, 153, 101, 128, 5, 17, 88, 160, 138, 90, 8, 8, 133, 144, 64, 26, 32, 65, 16, 42, 20, 128, 4, 80, 70, 1, 0, 16, 69, 146, 148, 69, 82, 84, 144, 129, 149, 144, 32, 24, 105, 168, 128, 90, 16, 64, 25, 144, 38, 8, 133, 160, 5, 96, 10, 25, 6, 24, 164, 68, 128, 149, 137, 0, 5, 128, 1, 10, 21, 130, 4, 84, 36, 66, 17, 128, 86, 102, 145, 84, 18, 68, 106, 0, 5, 64, 68, 24, 66, 32, 97, 101, 132, 5, 88, 89, 169, 36, 82, 106, 1, 18, 132, 9, 72, 42, 85, 130, 25, 148, 100, 132, 98, 133, 74, 97, 144, 105, 138, 4, 137, 137, 4, 166, 129, 97, 130, 150, 153, 169, 9, 74, 88, 84, 153, 153, 82, 1, 132, 8, 100, 144, 0, 17, 17, 5, 73, 90, 73, 104, 74, 74, 20, 166, 169, 88, 73, 133, 37, 17, 69, 170, 24, 132, 160, 100, 72, 153, 105, 37, 137, 105, 154, 97, 137, 105, 66, 136, 90, 136, 98, 66, 85, 32, 153, 149, 20},
    {101, 160, 6, 90, 130, 32, 33, 69, 150, 36, 86, 80, 25, 134, 96, 25, 80, 85, 100, 145, 90, 146, 1, 168, 72, 161, 21, 89, 137, 137, 136, 84, 88, 132, 152, 129, 130, 130, 130, 97, 161, 154, 146, 169, 90, 85, 85, 166, 88, 34, 81, 166, 2, 42, 36, 68, 161, 33, 136, 37, 10, 130, 101, 25, 36, 2, 70, 81, 40, 145, 105, 26, 138, 148, 25, 146, 68, 165, 153, 168, 134, 21, 74, 66, 130, 72, 73, 88, 150, 65, 20, 132, 129, 37, 88, 73, 41, 32, 134, 85, 34, 81, 154, 89, 129, 90, 4, 64, 17, 26, 70, 96, 134, 70, 133, 81, 90, 40, 73, 41, 146, 169, 168, 98, 97, 70, 101, 73, 70, 89, 64, 6, 10, 169, 85, 132, 22, 152, 89, 136, 154, 134, 70, 81, 74, 150, 1, 101, 4, 4, 72, 165, 148, 166, 86, 168, 89, 100, 133, 170, 104, 88, 137, 74, 4, 8, 18, 72, 85, 5, 26, 90, 165, 5, 1, 106, 72, 16, 38, 161, 101, 86, 166, 137, 153, 149, 96, 150, 168, 164, 85, 169, 85, 154, 133, 18, 162, 64, 16, 101, 69, 36, 9, 68, 64, 145, 152, 8, 152, 161, 40, 68, 20, 65, 36, 0, 6, 144, 1, 17, 24, 166, 17, 4, 69, 152, 72, 144, 138, 10, 64, 34, 84, 0, 128, 130, 64, 8, 16, 90, 10, 96, 26, 81, 97, 161, 1, 5, 6, 100, 90, 8, 106, 164, 81, 1, 17, 9, 133, 138, 64, 96, 162, 5, 154, 100, 152, 81, 133, 80, 130, 137, 1, 161, 0, 84, 37, 148, 24, 104, 33, 68, 24, 34, 98, 160, 74, 149, 160, 17, 68, 133, 152, 33, 20, 105, 33, 166, 86, 90, 0, 26, 33, 100, 100, 25, 106, 40, 160, 21, 22, 150, 96, 102, 16, 166, 97, 84, 5, 18, 164, 8, 166, 170, 89, 69, 66, 152, 148, 152, 152, 88, 84, 20, 105, 70, 80, 38, 24, 26, 165, 137, 164, 105, 65, 170, 41, 102, 129, 0, 148, 154, 154, 16, 88, 153, 18, 81, 17, 164, 169, 97, 149, 170, 168, 134, 16, 85, 18, 70, 37, 21, 129, 82, 160, 0, 100, 88, 154, 81, 150, 82, 84, 154},
    {130, 32, 6, 8, 89, 136, 104, 9, 73, 1, 81, 4, 8, 148, 5, 102, 98, 36, 40, 137, 88, 134, 26, 25, 9, 25, 4, 5, 34, 144, 90, 32, 10, 20, 42, 168, 82, 86, 82, 70, 98, 137, 85, 26, 22, 169, 146, 4, 168, 70, 160, 73, 74, 41, 128, 4, 1, 106, 8, 169, 85, 150, 146, 81, 33, 0, 2, 130, 145, 166, 128, 132, 101, 165, 168, 161, 16, 80, 9, 162, 98, 74, 21, 40, 36, 137, 66, 152, 168, 154, 162, 101, 162, 105, 1, 25, 34, 106, 134, 70, 169, 40, 86, 160, 42, 1, 98, 152, 165, 106, 145, 102, 38, 149, 144, 88, 90, 82, 36, 128, 88, 149, 105, 101, 9, 24, 6, 69, 144, 5, 152, 65, 10, 33, 41, 88, 97, 69, 9, 134, 105, 170, 144, 105, 104, 164, 146, 82, 6, 129, 98, 101, 72, 69, 166, 129, 26, 86, 10, 164, 32, 22, 152, 70, 101, 148, 8, 149, 168, 24, 130, 97, 20, 4, 154, 9, 34, 85, 166, 24, 138, 21, 6, 102, 0, 65, 69, 166, 6, 145, 152, 41, 129, 160, 68, 25, 128, 4, 9, 129, 166, 2, 88, 85, 38, 164, 4, 104, 144, 138, 146, 102, 132, 6, 26, 137, 80, 34, 2, 22, 1, 70, 10, 34, 72, 81, 128, 9, 162, 16, 144, 1, 153, 32, 37, 130, 0, 81, 8, 34, 9, 161, 32, 84, 133, 149, 6, 134, 16, 128, 80, 68, 134, 0, 132, 128, 149, 137, 1, 89, 73, 41, 17, 32, 38, 152, 1, 136, 32, 162, 69, 70, 65, 105, 2, 8, 96, 73, 5, 18, 9, 41, 70, 0, 17, 96, 148, 73, 85, 154, 150, 25, 73, 166, 98, 129, 160, 80, 72, 134, 33, 165, 26, 80, 81, 82, 74, 150, 98, 166, 65, 37, 149, 41, 166, 6, 24, 166, 36, 40, 81, 20, 165, 170, 170, 101, 16, 5, 102, 133, 21, 100, 133, 18, 137, 134, 6, 26, 36, 70, 136, 74, 70, 22, 132, 80, 165, 169, 81, 8, 96, 146, 37, 170, 129, 70, 82, 81, 149, 153, 6, 169, 90, 96, 146, 101, 98, 169, 84, 101, 2, 168, 38, 168, 17, 4, 10, 100, 36, 104, 33, 169, 152, 72},
    {154, 104, 4, 34, 32, 138, 2, 134, 100, 64, 96, 136, 85, 152, 145, 168, 70, 8, 149, 16, 138, 97, 134, 133, 101, 170, 104, 5, 81, 1, 81, 34, 21, 21, 21, 149, 33, 148, 10, 145, 89, 18, 101, 86, 105, 129, 106, 21, 138, 81, 42, 101, 25, 84, 72, 26, 129, 73, 42, 101, 9, 65, 17, 70, 162, 165, 20, 16, 136, 97, 2, 68, 149, 132, 18, 96, 2, 81, 10, 65, 89, 144, 150, 2, 21, 162, 133, 74, 149, 70, 34, 64, 168, 170, 137, 32, 66, 149, 41, 128, 145, 38, 5, 34, 97, 98, 88, 85, 149, 169, 130, 8, 153, 82, 88, 69, 162, 168, 36, 170, 81, 26, 153, 130, 170, 165, 88, 149, 136, 162, 26, 21, 25, 145, 154, 102, 89, 38, 90, 21, 145, 85, 162, 22, 21, 149, 98, 34, 32, 81, 73, 32, 162, 153, 132, 145, 69, 138, 166, 21, 145, 166, 98, 90, 86, 153, 84, 170, 128, 145, 145, 17, 38, 130, 73, 166, 42, 138, 146, 89, 34, 74, 85, 73, 164, 166, 96, 101, 161, 80, 66, 136, 128, 21, 16, 148, 0, 98, 69, 161, 104, 65, 132, 65, 41, 0, 85, 34, 37, 1, 64, 81, 9, 33, 18, 1, 6, 90, 34, 24, 144, 65, 102, 42, 170, 133, 40, 148, 81, 69, 40, 2, 10, 164, 9, 160, 138, 16, 162, 2, 101, 40, 85, 34, 34, 170, 98, 10, 170, 73, 4, 128, 1, 144, 42, 168, 8, 65, 145, 0, 34, 17, 161, 38, 89, 24, 5, 96, 81, 73, 88, 64, 65, 0, 81, 42, 24, 9, 20, 69, 138, 146, 81, 72, 32, 16, 10, 148, 25, 162, 138, 89, 138, 168, 41, 97, 5, 0, 132, 134, 132, 85, 104, 33, 105, 166, 26, 69, 136, 10, 74, 21, 73, 38, 34, 73, 138, 104, 132, 130, 37, 168, 73, 1, 166, 170, 170, 168, 134, 104, 81, 34, 2, 138, 154, 80, 85, 169, 38, 81, 96, 4, 25, 129, 90, 169, 72, 86, 137, 102, 101, 18, 37, 144, 84, 33, 154, 170, 69, 37, 132, 20, 98, 105, 88, 166, 169, 106, 66, 65, 69, 2, 85, 82, 168, 145, 136, 97, 149, 138, 169, 162, 70, 160},
    {72, 0, 69, 146, 82, 41, 80, 9, 82, 24, 150, 9, 33, 40, 26, 24, 102, 146, 22, 154, 81, 160, 90, 165, 42, 161, 41, 21, 10, 70, 146, 152, 161, 74, 98, 68, 26, 106, 134, 98, 65, 130, 82, 5, 130, 97, 98, 10, 144, 6, 42, 134, 6, 0, 153, 66, 22, 162, 165, 70, 5, 150, 80, 33, 145, 134, 90, 37, 73, 38, 168, 129, 74, 33, 65, 133, 161, 6, 146, 102, 38, 154, 145, 25, 169, 152, 98, 165, 70, 74, 138, 34, 16, 25, 16, 5, 161, 6, 88, 162, 98, 149, 145, 144, 96, 22, 38, 80, 81, 64, 4, 6, 106, 128, 133, 20, 90, 89, 149, 86, 0, 134, 161, 165, 74, 82, 144, 18, 145, 154, 24, 80, 42, 88, 69, 36, 166, 145, 161, 102, 134, 2, 145, 145, 96, 133, 129, 145, 88, 82, 40, 88, 64, 22, 162, 41, 69, 100, 25, 5, 82, 68, 41, 41, 153, 2, 104, 36, 153, 149, 169, 144, 86, 42, 168, 0, 20, 149, 98, 69, 36, 146, 106, 38, 1, 36, 149, 106, 6, 80, 153, 4, 133, 64, 72, 154, 72, 17, 37, 16, 16, 34, 21, 36, 37, 66, 88, 21, 26, 25, 148, 72, 32, 82, 34, 18, 32, 90, 89, 0, 26, 88, 90, 153, 82, 66, 165, 144, 72, 98, 136, 133, 132, 2, 41, 145, 18, 5, 18, 38, 37, 165, 102, 37, 165, 16, 133, 24, 134, 165, 37, 100, 1, 36, 24, 65, 74, 9, 72, 160, 2, 100, 32, 84, 2, 160, 1, 152, 70, 105, 0, 18, 168, 18, 64, 144, 129, 34, 88, 36, 129, 17, 105, 97, 21, 102, 0, 153, 104, 149, 0, 170, 130, 168, 105, 145, 138, 104, 6, 133, 97, 84, 105, 145, 165, 146, 145, 41, 85, 4, 25, 73, 37, 148, 68, 160, 144, 170, 1, 153, 2, 105, 105, 42, 18, 144, 144, 25, 133, 65, 96, 148, 162, 16, 137, 26, 73, 16, 146, 64, 104, 130, 36, 73, 96, 144, 169, 136, 98, 100, 69, 150, 90, 40, 98, 166, 6, 81, 104, 162, 86, 0, 102, 137, 6, 70, 105, 153, 66, 160, 66, 24, 169, 97, 138, 96, 5, 32, 104, 169, 90, 133, 69, 68},
    {146, 25, 37, 105, 152, 26, 153, 74, 105, 82, 105, 73, 32, 160, 86, 65, 81, 0, 8, 132, 66, 90, 90, 165, 149, 168, 80, 169, 128, 81, 72, 160, 6, 86, 168, 100, 4, 166, 70, 102, 36, 38, 36, 85, 161, 73, 90, 84, 136, 68, 90, 96, 128, 129, 22, 80, 34, 153, 153, 138, 25, 165, 86, 0, 84, 128, 89, 1, 132, 41, 146, 100, 90, 82, 89, 0, 21, 161, 73, 9, 129, 90, 148, 90, 38, 152, 36, 144, 10, 25, 154, 85, 25, 100, 89, 129, 8, 146, 34, 38, 132, 162, 4, 166, 6, 40, 130, 148, 106, 86, 72, 150, 150, 106, 96, 145, 89, 17, 10, 5, 161, 100, 146, 42, 105, 42, 102, 17, 65, 74, 132, 36, 149, 165, 154, 42, 132, 102, 33, 85, 68, 68, 36, 82, 102, 36, 153, 170, 38, 98, 38, 152, 97, 165, 10, 81, 21, 33, 25, 18, 82, 98, 90, 89, 97, 70, 64, 25, 25, 4, 90, 8, 66, 37, 98, 84, 69, 33, 100, 164, 129, 85, 6, 101, 169, 80, 168, 168, 66, 102, 152, 130, 153, 33, 34, 145, 70, 70, 37, 90, 4, 0, 133, 149, 64, 20, 98, 129, 106, 68, 42, 130, 40, 24, 34, 68, 130, 21, 36, 129, 100, 168, 32, 8, 9, 144, 73, 6, 40, 106, 106, 106, 24, 133, 21, 26, 148, 165, 146, 133, 17, 18, 26, 132, 129, 9, 2, 10, 152, 26, 149, 69, 5, 154, 41, 1, 40, 164, 105, 21, 8, 81, 32, 32, 97, 33, 0, 169, 146, 66, 85, 32, 4, 130, 98, 24, 128, 98, 162, 4, 148, 154, 42, 74, 170, 149, 138, 136, 154, 1, 36, 162, 69, 144, 165, 42, 9, 42, 102, 170, 136, 40, 88, 2, 169, 165, 136, 82, 42, 72, 21, 134, 148, 26, 160, 85, 138, 70, 96, 6, 136, 1, 96, 32, 105, 26, 145, 145, 6, 90, 26, 72, 25, 145, 169, 100, 38, 88, 24, 38, 106, 65, 64, 36, 166, 130, 72, 96, 24, 40, 73, 33, 133, 138, 153, 149, 70, 64, 130, 130, 25, 89, 102, 153, 81, 33, 22, 146, 72, 40, 65, 89, 101, 2, 65, 165, 1, 134, 162, 166, 97, 153, 137, 161},
    {72, 17, 168, 33, 26, 18, 8, 40, 65, 144, 33, 70, 69, 165, 162, 34, 105, 104, 106, 128, 26, 4, 128, 74, 106, 162, 42, 166, 25, 9, 22, 5, 1, 65, 100, 102, 96, 96, 34, 97, 68, 10, 85, 136, 42, 101, 145, 88, 153, 70, 128, 96, 2, 165, 90, 4, 4, 148, 6, 34, 160, 64, 84, 169, 128, 97, 145, 96, 84, 41, 154, 152, 85, 17, 88, 90, 162, 16, 18, 72, 96, 89, 26, 148, 100, 144, 1, 168, 102, 152, 152, 161, 20, 144, 161, 154, 149, 32, 89, 138, 132, 152, 34, 73, 90, 146, 73, 152, 20, 106, 22, 161, 73, 101, 153, 128, 104, 144, 102, 98, 168, 33, 84, 25, 1, 24, 68, 129, 86, 161, 164, 4, 106, 100, 2, 170, 138, 89, 161, 36, 97, 102, 145, 22, 0, 42, 128, 25, 98, 5, 153, 148, 0, 100, 106, 102, 85, 90, 70, 98, 33, 149, 101, 65, 144, 41, 32, 164, 134, 22, 145, 8, 37, 90, 41, 82, 128, 150, 41, 101, 144, 8, 104, 42, 168, 146, 149, 33, 22, 101, 24, 104, 145, 70, 134, 106, 10, 153, 0, 37, 152, 68, 170, 169, 132, 144, 154, 25, 88, 82, 149, 166, 97, 4, 97, 105, 26, 25, 166, 5, 38, 41, 18, 148, 148, 6, 80, 64, 86, 68, 66, 145, 17, 98, 8, 25, 129, 106, 104, 145, 145, 137, 134, 40, 133, 2, 144, 134, 0, 4, 88, 138, 72, 81, 0, 16, 32, 150, 96, 34, 97, 32, 33, 98, 17, 65, 24, 2, 4, 22, 105, 16, 0, 100, 132, 24, 4, 105, 134, 144, 36, 100, 2, 5, 8, 33, 138, 40, 2, 152, 132, 36, 136, 41, 1, 86, 36, 69, 129, 101, 90, 98, 149, 152, 37, 90, 138, 100, 38, 10, 150, 165, 166, 144, 9, 133, 154, 38, 37, 162, 102, 104, 100, 102, 26, 161, 146, 42, 96, 96, 106, 144, 170, 130, 153, 80, 32, 133, 89, 10, 22, 137, 161, 33, 80, 138, 133, 21, 64, 153, 81, 21, 169, 22, 102, 41, 166, 128, 25, 84, 149, 18, 134, 37, 97, 1, 106, 130, 102, 145, 104, 16, 68, 6, 102, 69, 153, 69, 70, 148, 102, 26, 166, 162},
    {104, 20, 33, 80, 17, 146, 145, 6, 25, 148, 168, 80, 148, 34, 18, 86, 90, 84, 26, 150, 165, 9, 26, 66, 104, 154, 24, 138, 86, 69, 149, 160, 88, 73, 16, 10, 8, 40, 136, 106, 98, 102, 104, 150, 96, 69, 148, 81, 17, 102, 128, 152, 98, 18, 26, 4, 100, 42, 152, 73, 10, 97, 134, 21, 129, 24, 20, 40, 21, 73, 138, 34, 24, 161, 32, 146, 153, 88, 145, 68, 100, 150, 106, 133, 97, 136, 105, 0, 100, 152, 22, 20, 149, 148, 149, 154, 137, 98, 32, 164, 69, 149, 70, 137, 161, 130, 100, 149, 33, 69, 86, 21, 84, 98, 128, 152, 74, 162, 90, 106, 168, 102, 154, 104, 20, 153, 36, 97, 152, 148, 148, 101, 42, 26, 4, 24, 148, 89, 137, 37, 34, 86, 17, 166, 16, 100, 25, 169, 105, 24, 41, 152, 168, 40, 10, 70, 88, 37, 153, 86, 38, 149, 102, 101, 90, 9, 102, 168, 20, 102, 152, 153, 98, 40, 24, 149, 144, 153, 100, 1, 148, 153, 105, 170, 161, 145, 168, 97, 86, 64, 132, 170, 165, 64, 134, 74, 17, 129, 18, 90, 129, 26, 64, 40, 64, 148, 129, 145, 96, 152, 160, 137, 97, 32, 9, 66, 0, 82, 16, 70, 64, 4, 73, 128, 65, 86, 130, 97, 89, 34, 86, 4, 36, 68, 72, 4, 36, 0, 165, 152, 105, 128, 64, 129, 25, 70, 128, 128, 98, 8, 64, 2, 105, 16, 37, 22, 132, 0, 80, 9, 26, 64, 8, 84, 9, 66, 26, 128, 129, 137, 82, 144, 0, 105, 64, 137, 105, 82, 86, 17, 36, 97, 1, 90, 70, 98, 4, 0, 90, 145, 104, 69, 105, 105, 38, 100, 69, 104, 26, 32, 133, 96, 144, 65, 150, 152, 24, 97, 16, 25, 145, 17, 81, 154, 97, 144, 170, 33, 89, 162, 85, 104, 64, 100, 153, 150, 153, 102, 72, 162, 73, 165, 101, 144, 144, 84, 169, 86, 148, 96, 132, 149, 84, 96, 162, 64, 152, 161, 133, 37, 0, 166, 100, 164, 101, 169, 18, 72, 152, 106, 169, 73, 21, 2, 162, 85, 41, 16, 74, 136, 68, 152, 98, 97, 88, 98, 104, 81, 98, 24, 0, 106, 85, 104},
    {73, 4, 17, 133, 144, 81, 0, 72, 69, 81, 8, 153, 68, 170, 24, 65, 9, 68, 146, 153, 89, 166, 22, 22, 40, 81, 104, 90, 24, 89, 170, 85, 166, 164, 38, 26, 165, 164, 2, 170, 166, 166, 165, 100, 90, 73, 89, 166, 41, 134, 72, 18, 22, 6, 144, 21, 16, 25, 17, 160, 101, 162, 88, 96, 164, 170, 68, 144, 166, 22, 149, 162, 169, 40, 137, 84, 89, 17, 136, 38, 162, 80, 148, 169, 166, 89, 24, 105, 170, 24, 9, 82, 89, 89, 80, 80, 89, 162, 36, 96, 2, 89, 6, 97, 70, 0, 97, 89, 166, 90, 73, 84, 100, 170, 88, 149, 102, 66, 145, 153, 90, 166, 104, 42, 21, 162, 22, 145, 88, 17, 128, 162, 4, 128, 101, 81, 89, 170, 89, 38, 168, 102, 80, 89, 146, 38, 66, 137, 34, 26, 89, 25, 40, 36, 169, 130, 148, 89, 154, 100, 160, 130, 101, 90, 21, 97, 137, 41, 25, 85, 32, 149, 85, 22, 137, 106, 65, 152, 166, 129, 85, 89, 102, 166, 160, 16, 89, 98, 38, 162, 81, 165, 89, 38, 70, 160, 138, 9, 101, 16, 72, 166, 100, 148, 134, 8, 0, 16, 97, 2, 96, 2, 144, 97, 2, 129, 4, 160, 153, 8, 160, 40, 64, 33, 65, 0, 69, 128, 166, 166, 129, 153, 25, 97, 65, 9, 72, 153, 24, 88, 36, 69, 134, 89, 25, 128, 80, 73, 0, 101, 73, 20, 8, 8, 1, 0, 0, 4, 146, 68, 128, 6, 20, 4, 38, 37, 166, 33, 98, 102, 168, 128, 32, 134, 166, 88, 32, 149, 166, 36, 144, 0, 170, 32, 88, 150, 25, 144, 36, 128, 41, 21, 25, 89, 144, 36, 68, 70, 24, 136, 80, 136, 37, 129, 146, 21, 89, 97, 42, 168, 86, 38, 89, 89, 134, 138, 89, 145, 22, 22, 106, 134, 10, 166, 89, 89, 89, 84, 96, 86, 105, 105, 65, 24, 105, 170, 136, 4, 85, 97, 152, 145, 150, 97, 33, 66, 84, 98, 64, 137, 164, 138, 22, 38, 137, 160, 74, 89, 145, 90, 105, 129, 134, 105, 69, 154, 106, 65, 134, 26, 170, 89, 132, 102, 168, 166, 105, 170, 164, 149, 130, 89, 102, 36},
    {137, 64, 133, 1, 170, 81, 9, 105, 5, 33, 16, 134, 88, 73, 10, 24, 0, 105, 153, 81, 144, 85, 146, 101, 149, 90, 165, 81, 102, 81, 154, 152, 145, 166, 36, 33, 160, 160, 81, 34, 161, 85, 165, 73, 102, 34, 73, 165, 66, 130, 65, 161, 10, 64, 169, 100, 96, 10, 144, 153, 148, 133, 97, 154, 105, 37, 105, 42, 150, 106, 90, 101, 165, 101, 16, 144, 104, 150, 22, 36, 100, 90, 24, 74, 37, 88, 102, 82, 132, 72, 88, 160, 18, 88, 106, 90, 90, 166, 162, 34, 165, 90, 16, 24, 132, 84, 22, 153, 105, 5, 73, 144, 132, 5, 89, 8, 9, 90, 89, 134, 166, 100, 144, 169, 90, 153, 18, 16, 105, 8, 88, 165, 165, 38, 105, 84, 82, 169, 89, 164, 133, 165, 89, 26, 169, 102, 82, 80, 36, 41, 34, 105, 162, 165, 100, 101, 137, 82, 153, 65, 169, 69, 41, 149, 105, 86, 133, 144, 81, 89, 100, 90, 8, 82, 34, 66, 66, 74, 41, 160, 74, 90, 164, 36, 106, 89, 89, 165, 101, 165, 24, 166, 26, 129, 169, 20, 0, 72, 144, 89, 10, 101, 68, 68, 164, 72, 168, 24, 24, 161, 152, 96, 160, 90, 164, 16, 89, 26, 130, 165, 38, 165, 89, 80, 88, 100, 74, 164, 129, 161, 104, 24, 9, 132, 144, 69, 70, 0, 97, 18, 148, 10, 33, 22, 18, 82, 74, 26, 40, 164, 84, 73, 128, 84, 32, 68, 160, 130, 2, 81, 24, 36, 133, 100, 8, 165, 68, 136, 37, 128, 20, 37, 80, 41, 32, 88, 165, 169, 37, 1, 161, 66, 8, 128, 24, 4, 90, 128, 16, 74, 133, 17, 134, 73, 34, 85, 128, 166, 82, 64, 40, 138, 1, 105, 9, 88, 90, 134, 89, 105, 26, 74, 25, 160, 154, 86, 74, 97, 38, 96, 9, 4, 37, 160, 74, 89, 26, 74, 169, 74, 165, 88, 89, 74, 24, 165, 149, 66, 104, 4, 166, 10, 165, 33, 133, 64, 18, 161, 150, 36, 25, 136, 166, 153, 5, 149, 105, 82, 72, 101, 166, 82, 165, 101, 153, 165, 153, 90, 166, 90, 166, 10, 168, 165, 36, 133, 18, 84, 38, 90, 37, 89, 105, 133},
    {169, 18, 40, 80, 80, 128, 152, 161, 88, 164, 105, 105, 6, 34, 129, 164, 1, 17, 129, 146, 34, 96, 149, 17, 161, 98, 162, 169, 17, 105, 134, 68, 84, 128, 137, 81, 145, 150, 101, 153, 24, 81, 154, 85, 90, 154, 106, 21, 132, 130, 128, 86, 96, 85, 22, 8, 32, 164, 130, 132, 88, 25, 66, 74, 20, 136, 0, 132, 162, 144, 133, 16, 86, 154, 164, 72, 102, 65, 137, 101, 10, 97, 165, 162, 148, 36, 168, 65, 169, 10, 69, 102, 2, 6, 137, 90, 154, 150, 38, 34, 160, 101, 21, 84, 69, 168, 10, 150, 150, 84, 20, 85, 84, 81, 25, 90, 20, 105, 133, 106, 74, 153, 38, 85, 65, 1, 41, 72, 166, 169, 86, 130, 165, 149, 102, 162, 105, 40, 101, 132, 81, 17, 65, 106, 164, 40, 102, 154, 88, 132, 38, 166, 84, 160, 24, 168, 8, 40, 154, 149, 66, 26, 150, 136, 150, 81, 82, 36, 160, 144, 102, 26, 37, 25, 66, 101, 90, 33, 66, 152, 86, 89, 137, 86, 86, 132, 37, 72, 153, 128, 84, 101, 100, 40, 138, 73, 100, 4, 65, 10, 22, 9, 90, 165, 0, 69, 2, 2, 34, 128, 2, 134, 20, 32, 152, 17, 86, 65, 16, 41, 72, 82, 132, 133, 70, 89, 42, 25, 153, 152, 74, 32, 33, 89, 89, 129, 98, 18, 133, 66, 98, 36, 165, 64, 9, 72, 2, 145, 70, 165, 102, 69, 16, 5, 2, 33, 8, 128, 130, 2, 33, 168, 9, 10, 161, 70, 69, 97, 137, 16, 65, 153, 130, 136, 34, 33, 66, 9, 130, 145, 129, 8, 138, 10, 86, 21, 69, 129, 160, 22, 32, 137, 104, 128, 88, 160, 166, 82, 41, 128, 90, 34, 105, 162, 150, 20, 152, 36, 21, 36, 86, 18, 170, 37, 98, 2, 85, 84, 21, 17, 169, 137, 133, 136, 81, 136, 166, 32, 132, 84, 129, 138, 22, 84, 169, 0, 169, 26, 89, 160, 38, 82, 88, 146, 69, 5, 134, 25, 41, 65, 128, 32, 88, 34, 165, 89, 84, 132, 18, 73, 137, 137, 165, 153, 98, 80, 150, 133, 18, 17, 169, 137, 90, 164, 149, 137, 102, 138, 150, 10, 149, 150, 34, 169},
    {128, 64, 8, 74, 81, 82, 34, 69, 33, 128, 170, 104, 36, 164, 10, 73, 132, 160, 162, 64, 26, 168, 90, 41, 145, 160, 25, 82, 5, 162, 22, 162, 169, 16, 153, 24, 41, 137, 170, 149, 137, 166, 149, 102, 136, 134, 166, 137, 18, 145, 8, 132, 152, 144, 1, 170, 1, 37, 66, 86, 17, 89, 74, 96, 22, 149, 38, 133, 106, 148, 102, 37, 9, 134, 102, 136, 34, 17, 162, 102, 24, 70, 42, 38, 105, 66, 137, 102, 153, 170, 102, 85, 42, 86, 150, 74, 22, 65, 145, 1, 137, 98, 10, 102, 73, 41, 162, 100, 85, 18, 70, 106, 69, 160, 165, 152, 38, 102, 69, 154, 154, 105, 137, 17, 150, 24, 102, 152, 42, 102, 38, 153, 168, 138, 37, 98, 38, 153, 138, 153, 169, 17, 36, 70, 101, 136, 10, 137, 17, 33, 86, 6, 152, 136, 89, 85, 89, 164, 170, 65, 165, 70, 85, 85, 21, 70, 85, 88, 166, 36, 89, 105, 100, 144, 101, 96, 136, 170, 169, 153, 34, 6, 145, 145, 138, 34, 74, 165, 17, 145, 38, 152, 72, 153, 133, 138, 16, 66, 130, 86, 70, 17, 164, 134, 129, 98, 8, 162, 72, 73, 166, 80, 73, 2, 97, 88, 2, 72, 9, 8, 73, 36, 165, 17, 66, 72, 68, 9, 145, 81, 100, 41, 96, 2, 40, 36, 10, 96, 66, 152, 149, 152, 137, 162, 98, 70, 6, 41, 166, 36, 130, 18, 25, 0, 80, 98, 97, 137, 1, 145, 16, 24, 21, 148, 21, 85, 2, 18, 164, 65, 22, 1, 80, 21, 153, 166, 149, 17, 41, 153, 20, 72, 0, 149, 98, 96, 100, 105, 9, 68, 105, 145, 65, 81, 165, 65, 152, 26, 102, 22, 84, 170, 164, 148, 84, 154, 42, 17, 162, 42, 102, 145, 148, 106, 81, 106, 66, 42, 144, 32, 82, 25, 89, 89, 86, 34, 32, 34, 153, 102, 153, 101, 68, 166, 10, 149, 136, 128, 102, 168, 36, 96, 148, 145, 133, 64, 88, 69, 16, 96, 32, 132, 72, 84, 146, 42, 37, 170, 138, 89, 152, 106, 89, 41, 164, 164, 102, 90, 145, 34, 153, 82, 17, 153, 89, 24, 166, 73, 169, 102, 137, 98, 38, 153},
    {9, 164, 64, 166, 34, 68, 132, 128, 165, 161, 166, 89, 166, 2, 149, 145, 21, 104, 6, 69, 164, 9, 105, 86, 152, 170, 89, 86, 6, 160, 34, 32, 138, 25, 42, 22, 154, 72, 132, 88, 16, 154, 153, 37, 86, 37, 165, 22, 25, 38, 9, 102, 134, 66, 170, 37, 150, 32, 17, 24, 85, 160, 68, 21, 137, 102, 101, 85, 81, 22, 162, 41, 98, 2, 9, 40, 37, 164, 36, 86, 86, 38, 72, 81, 25, 169, 90, 9, 17, 101, 162, 150, 6, 80, 100, 37, 136, 150, 137, 82, 146, 161, 88, 64, 26, 73, 145, 102, 70, 17, 170, 164, 22, 89, 164, 73, 134, 149, 40, 85, 162, 25, 26, 26, 133, 86, 145, 72, 98, 33, 150, 153, 86, 16, 81, 166, 66, 85, 6, 150, 90, 17, 166, 41, 6, 89, 165, 33, 25, 166, 134, 38, 86, 6, 88, 4, 66, 149, 161, 1, 149, 24, 18, 164, 33, 106, 20, 74, 136, 72, 150, 97, 5, 68, 32, 105, 85, 22, 80, 150, 101, 130, 18, 84, 149, 98, 166, 149, 105, 26, 165, 89, 168, 80, 65, 24, 104, 160, 20, 105, 164, 72, 73, 6, 85, 36, 34, 37, 34, 10, 33, 164, 128, 8, 88, 90, 164, 133, 148, 150, 72, 5, 164, 16, 41, 84, 0, 128, 18, 26, 144, 33, 129, 149, 72, 149, 33, 90, 128, 96, 146, 9, 84, 33, 160, 32, 33, 72, 137, 81, 21, 97, 10, 97, 137, 164, 18, 4, 40, 82, 134, 154, 84, 73, 2, 88, 70, 146, 152, 97, 150, 17, 132, 144, 84, 168, 8, 90, 20, 84, 85, 160, 34, 74, 8, 24, 96, 2, 154, 37, 89, 80, 2, 38, 98, 9, 17, 136, 72, 1, 37, 25, 97, 2, 164, 96, 2, 146, 42, 102, 150, 84, 16, 152, 36, 150, 102, 17, 86, 69, 41, 105, 154, 34, 32, 36, 105, 38, 152, 5, 82, 32, 70, 33, 34, 90, 8, 66, 38, 8, 68, 36, 150, 25, 88, 101, 25, 166, 8, 170, 20, 165, 36, 161, 89, 132, 41, 105, 82, 10, 81, 5, 133, 152, 105, 165, 81, 97, 16, 168, 18, 169, 26, 150, 148, 26, 64, 138, 40, 148, 136, 101, 133, 145},
    {8, 106, 129, 40, 34, 106, 129, 5, 137, 154, 161, 106, 90, 165, 42, 36, 150, 18, 136, 128, 136, 132, 152, 132, 133, 136, 134, 106, 37, 166, 149, 24, 86, 21, 133, 86, 22, 149, 33, 137, 132, 74, 21, 26, 105, 149, 102, 86, 170, 85, 42, 5, 69, 21, 106, 90, 85, 9, 42, 165, 162, 81, 170, 2, 170, 170, 66, 86, 133, 4, 152, 137, 145, 85, 133, 64, 40, 64, 105, 69, 165, 40, 40, 106, 17, 170, 149, 10, 70, 42, 138, 5, 106, 42, 106, 170, 26, 85, 85, 85, 84, 170, 66, 154, 86, 82, 148, 168, 154, 153, 74, 105, 86, 146, 26, 161, 17, 137, 21, 145, 74, 100, 86, 132, 170, 36, 154, 137, 154, 42, 10, 149, 22, 17, 128, 64, 106, 150, 8, 69, 133, 22, 2, 105, 68, 6, 138, 89, 128, 105, 133, 89, 68, 149, 164, 153, 145, 161, 41, 85, 149, 34, 36, 18, 1, 168, 138, 10, 17, 80, 104, 153, 36, 80, 170, 74, 9, 8, 4, 148, 42, 73, 86, 149, 149, 106, 137, 152, 36, 149, 138, 5, 165, 4, 85, 133, 20, 2, 40, 5, 1, 5, 4, 9, 18, 9, 72, 40, 21, 4, 42, 8, 144, 0, 105, 20, 24, 42, 133, 36, 21, 169, 41, 8, 10, 69, 40, 100, 148, 85, 42, 66, 34, 132, 1, 24, 128, 133, 162, 106, 161, 26, 84, 169, 40, 2, 10, 100, 86, 81, 144, 80, 4, 88, 170, 68, 69, 20, 20, 137, 138, 4, 0, 6, 5, 38, 9, 42, 68, 1, 153, 17, 32, 0, 85, 170, 132, 70, 84, 16, 148, 170, 34, 4, 100, 16, 0, 128, 85, 26, 17, 17, 148, 89, 66, 1, 146, 24, 102, 20, 162, 5, 25, 6, 132, 164, 73, 148, 32, 70, 154, 149, 10, 74, 146, 98, 89, 5, 36, 132, 17, 134, 84, 20, 85, 72, 106, 42, 144, 88, 21, 106, 42, 104, 9, 134, 149, 84, 170, 149, 85, 102, 96, 21, 37, 149, 105, 8, 153, 21, 68, 6, 154, 85, 133, 133, 137, 154, 137, 165, 85, 9, 16, 85, 154, 148, 161, 138, 133, 153, 69, 26, 85, 21, 161, 21, 154, 132, 132, 106, 5, 104, 169, 132},
    {168, 36, 128, 68, 162, 70, 134, 136, 25, 37, 137, 169, 149, 148, 5, 8, 137, 106, 148, 38, 4, 145, 66, 5, 153, 130, 138, 100, 74, 96, 136, 97, 137, 40, 41, 104, 168, 89, 73, 170, 9, 145, 9, 84, 150, 160, 84, 64, 164, 21, 34, 100, 1, 86, 33, 17, 25, 33, 102, 102, 24, 24, 105, 72, 5, 89, 102, 86, 22, 73, 36, 86, 137, 100, 130, 18, 84, 153, 134, 88, 169, 138, 166, 100, 129, 166, 149, 133, 10, 146, 80, 73, 36, 134, 166, 38, 86, 153, 169, 164, 9, 102, 136, 70, 41, 85, 136, 150, 133, 25, 70, 36, 32, 1, 145, 86, 101, 34, 161, 169, 88, 102, 65, 104, 161, 68, 161, 68, 166, 10, 148, 41, 169, 42, 69, 161, 148, 105, 17, 105, 26, 149, 102, 70, 153, 17, 102, 6, 16, 22, 96, 169, 169, 146, 73, 16, 148, 101, 86, 106, 88, 88, 153, 100, 130, 166, 41, 100, 165, 9, 25, 22, 33, 85, 105, 64, 129, 16, 9, 137, 133, 100, 73, 137, 137, 165, 166, 25, 134, 161, 150, 137, 132, 152, 169, 152, 4, 36, 138, 133, 36, 4, 8, 136, 9, 165, 70, 24, 26, 22, 42, 84, 80, 161, 82, 160, 64, 9, 146, 40, 104, 136, 166, 32, 101, 144, 37, 9, 16, 97, 21, 70, 69, 129, 5, 89, 65, 0, 9, 169, 73, 68, 2, 17, 5, 40, 101, 166, 73, 65, 89, 101, 133, 21, 68, 33, 32, 42, 20, 169, 154, 66, 138, 32, 138, 73, 34, 0, 9, 37, 25, 38, 166, 138, 168, 132, 153, 4, 128, 97, 9, 132, 8, 32, 85, 65, 65, 162, 17, 130, 65, 10, 98, 102, 133, 42, 66, 41, 70, 33, 166, 101, 96, 81, 146, 66, 138, 162, 138, 90, 101, 105, 105, 72, 100, 160, 148, 153, 166, 164, 170, 145, 85, 137, 70, 148, 148, 21, 88, 164, 25, 10, 150, 134, 74, 106, 80, 86, 102, 105, 161, 148, 164, 101, 104, 104, 130, 96, 18, 161, 88, 73, 22, 84, 104, 8, 88, 22, 166, 153, 134, 86, 90, 89, 26, 154, 18, 5, 9, 84, 137, 6, 89, 65, 98, 105, 150, 89, 89, 37, 24, 165, 65, 89},
    {64, 136, 16, 161, 138, 96, 34, 102, 105, 65, 85, 37, 70, 84, 97, 18, 97, 101, 74, 170, 80, 2, 104, 130, 26, 100, 149, 106, 24, 86, 22, 37, 16, 24, 168, 138, 144, 166, 105, 133, 130, 38, 152, 96, 165, 136, 102, 145, 64, 146, 101, 136, 165, 64, 138, 81, 144, 86, 80, 137, 152, 165, 164, 165, 38, 4, 89, 5, 152, 128, 100, 64, 130, 88, 98, 166, 101, 162, 170, 21, 152, 6, 104, 20, 153, 100, 153, 106, 148, 86, 106, 5, 81, 1, 68, 22, 105, 148, 2, 150, 20, 88, 134, 37, 149, 98, 21, 102, 136, 73, 160, 84, 152, 25, 149, 86, 170, 86, 105, 145, 73, 168, 42, 70, 81, 160, 104, 162, 66, 104, 70, 154, 161, 89, 86, 21, 100, 40, 166, 145, 148, 162, 34, 104, 150, 146, 96, 128, 153, 21, 6, 148, 16, 162, 41, 153, 149, 73, 149, 137, 22, 18, 149, 74, 38, 154, 74, 102, 102, 16, 64, 132, 89, 137, 85, 86, 165, 149, 133, 153, 68, 161, 136, 153, 68, 101, 100, 129, 161, 152, 98, 148, 104, 137, 152, 161, 66, 70, 160, 160, 66, 42, 32, 20, 8, 66, 82, 148, 128, 154, 22, 26, 65, 32, 2, 97, 96, 21, 105, 129, 24, 65, 68, 0, 86, 9, 68, 0, 144, 128, 102, 69, 34, 104, 34, 41, 70, 40, 34, 80, 150, 22, 152, 72, 66, 129, 22, 105, 102, 104, 160, 2, 2, 137, 102, 72, 9, 16, 25, 160, 133, 170, 9, 136, 128, 4, 129, 2, 138, 80, 36, 41, 65, 17, 145, 100, 33, 97, 129, 128, 137, 148, 145, 20, 166, 136, 98, 24, 10, 138, 69, 80, 149, 65, 36, 89, 0, 17, 21, 68, 98, 68, 65, 26, 6, 102, 32, 152, 21, 90, 68, 154, 164, 0, 10, 86, 105, 170, 153, 70, 160, 138, 144, 154, 10, 38, 100, 154, 134, 86, 137, 102, 8, 82, 68, 20, 17, 41, 66, 160, 18, 70, 168, 90, 130, 32, 148, 2, 153, 37, 168, 42, 144, 86, 73, 165, 89, 69, 10, 130, 105, 89, 74, 25, 168, 128, 70, 72, 161, 164, 136, 85, 154, 81, 129, 152, 22, 153, 152, 82, 97, 64, 100, 145},
    {24, 6, 1, 162, 128, 146, 138, 38, 138, 86, 97, 2, 138, 8, 18, 80, 0, 6, 18, 149, 154, 166, 150, 2, 105, 145, 88, 170, 85, 86, 1, 149, 97, 105, 89, 97, 97, 105, 162, 101, 69, 154, 97, 6, 24, 149, 134, 97, 146, 145, 74, 1, 9, 102, 132, 32, 9, 82, 26, 102, 89, 104, 73, 41, 86, 81, 162, 130, 32, 89, 138, 138, 161, 138, 162, 34, 146, 9, 42, 153, 25, 138, 162, 98, 98, 166, 1, 2, 101, 22, 146, 9, 138, 70, 150, 18, 130, 65, 8, 73, 72, 150, 105, 149, 89, 82, 102, 166, 85, 97, 146, 162, 9, 170, 128, 2, 97, 74, 138, 98, 88, 85, 166, 96, 166, 152, 164, 97, 170, 170, 138, 69, 89, 97, 134, 18, 150, 9, 162, 97, 69, 21, 150, 166, 17, 104, 82, 134, 101, 153, 129, 154, 8, 69, 106, 106, 164, 100, 164, 85, 89, 22, 41, 168, 146, 69, 42, 170, 132, 86, 152, 90, 106, 81, 37, 74, 6, 20, 69, 105, 134, 2, 105, 89, 24, 134, 170, 169, 152, 101, 138, 65, 133, 89, 69, 105, 2, 130, 137, 0, 2, 69, 8, 169, 146, 10, 130, 145, 9, 17, 130, 133, 41, 146, 69, 40, 168, 102, 65, 24, 68, 105, 145, 1, 146, 73, 150, 37, 81, 69, 134, 6, 130, 40, 98, 64, 130, 17, 137, 74, 86, 134, 152, 132, 134, 68, 38, 145, 98, 32, 106, 146, 9, 0, 148, 2, 33, 148, 69, 72, 133, 84, 137, 69, 74, 69, 74, 146, 64, 69, 106, 81, 144, 73, 64, 130, 9, 37, 65, 65, 65, 34, 73, 70, 66, 65, 4, 161, 89, 150, 128, 106, 106, 22, 169, 80, 25, 149, 164, 161, 26, 169, 18, 37, 70, 130, 168, 137, 152, 154, 166, 85, 146, 146, 37, 150, 137, 65, 86, 129, 36, 42, 85, 73, 136, 162, 162, 166, 69, 100, 9, 168, 154, 10, 26, 101, 17, 1, 134, 25, 162, 6, 32, 161, 106, 137, 162, 137, 84, 20, 17, 64, 161, 137, 72, 97, 37, 166, 133, 97, 88, 80, 100, 89, 96, 104, 36, 66, 101, 150, 105, 130, 105, 69, 16, 137, 2, 89, 89, 18, 169, 154, 138, 89},
    {65, 1, 36, 65, 0, 152, 0, 70, 36, 134, 32, 148, 2, 10, 150, 41, 153, 72, 148, 102, 98, 69, 164, 84, 36, 132, 41, 148, 82, 22, 42, 165, 106, 74, 40, 97, 138, 130, 144, 161, 42, 98, 136, 38, 25, 153, 2, 20, 16, 32, 17, 8, 34, 170, 101, 17, 5, 128, 152, 101, 8, 82, 145, 88, 161, 69, 162, 8, 74, 9, 152, 96, 64, 165, 8, 133, 150, 168, 161, 97, 84, 128, 152, 150, 40, 144, 160, 0, 90, 149, 17, 96, 128, 166, 85, 0, 16, 34, 41, 25, 96, 145, 4, 22, 81, 149, 138, 166, 85, 6, 144, 37, 69, 20, 154, 166, 34, 166, 130, 40, 10, 89, 38, 74, 134, 22, 154, 160, 36, 164, 160, 70, 100, 152, 6, 132, 133, 88, 149, 65, 40, 37, 144, 146, 36, 102, 17, 25, 17, 20, 64, 133, 102, 162, 98, 1, 6, 162, 33, 89, 104, 89, 106, 133, 148, 89, 166, 145, 169, 18, 96, 153, 18, 16, 150, 84, 129, 22, 102, 74, 149, 2, 100, 38, 154, 73, 128, 105, 100, 88, 153, 72, 152, 8, 41, 2, 5, 24, 170, 149, 2, 0, 138, 162, 133, 64, 21, 144, 68, 138, 161, 98, 6, 165, 70, 88, 64, 85, 104, 41, 80, 34, 8, 161, 101, 74, 150, 66, 32, 89, 6, 5, 149, 10, 104, 20, 33, 134, 8, 1, 66, 129, 20, 128, 8, 90, 145, 1, 64, 133, 80, 129, 162, 84, 168, 8, 8, 130, 16, 164, 81, 145, 42, 24, 98, 8, 74, 0, 0, 37, 64, 154, 6, 18, 85, 148, 32, 66, 16, 9, 130, 17, 38, 1, 148, 72, 20, 136, 2, 33, 73, 149, 134, 80, 136, 69, 38, 89, 32, 101, 65, 153, 152, 102, 144, 69, 170, 85, 136, 134, 169, 137, 9, 34, 165, 5, 133, 22, 2, 148, 88, 164, 4, 128, 164, 146, 129, 6, 69, 88, 66, 137, 128, 130, 148, 137, 64, 170, 1, 64, 0, 130, 146, 105, 73, 90, 149, 146, 82, 81, 86, 137, 149, 101, 89, 89, 105, 100, 148, 73, 73, 154, 86, 74, 9, 74, 72, 149, 6, 150, 105, 10, 74, 101, 137, 66, 66, 4, 26, 154, 88, 150, 81, 22},
    {33, 146, 41, 18, 20, 86, 80, 144, 152, 84, 101, 18, 70, 170, 90, 85, 21, 144, 150, 17, 66, 148, 20, 170, 37, 150, 33, 16, 2, 101, 134, 82, 169, 161, 168, 97, 32, 40, 130, 168, 97, 66, 129, 89, 170, 166, 86, 41, 22, 105, 84, 1, 104, 152, 65, 154, 137, 65, 154, 84, 165, 81, 81, 86, 86, 9, 1, 89, 162, 168, 16, 101, 164, 88, 86, 22, 86, 133, 42, 106, 32, 146, 86, 86, 169, 150, 105, 150, 106, 26, 86, 41, 82, 82, 84, 86, 24, 170, 101, 97, 160, 150, 170, 22, 64, 86, 153, 86, 101, 42, 82, 154, 137, 74, 22, 150, 105, 69, 96, 170, 10, 82, 145, 37, 82, 81, 148, 144, 154, 85, 90, 34, 105, 164, 148, 65, 150, 69, 81, 42, 32, 42, 85, 148, 104, 170, 22, 85, 42, 70, 37, 101, 41, 40, 144, 170, 166, 149, 2, 161, 98, 150, 97, 65, 105, 22, 97, 88, 84, 132, 73, 26, 21, 37, 90, 150, 26, 106, 105, 168, 90, 80, 33, 105, 69, 24, 86, 169, 138, 170, 86, 165, 80, 40, 168, 20, 33, 148, 80, 4, 100, 1, 164, 86, 33, 137, 150, 2, 42, 89, 130, 68, 64, 165, 16, 1, 82, 138, 24, 40, 168, 26, 18, 104, 166, 40, 144, 9, 32, 96, 16, 84, 82, 129, 1, 66, 133, 20, 80, 133, 32, 70, 65, 86, 82, 152, 66, 0, 22, 85, 6, 134, 96, 24, 4, 36, 161, 9, 26, 128, 82, 164, 137, 34, 100, 17, 65, 10, 40, 72, 146, 33, 145, 25, 136, 86, 169, 64, 84, 97, 64, 152, 166, 32, 102, 34, 86, 16, 66, 154, 97, 128, 100, 165, 170, 145, 34, 165, 145, 138, 70, 24, 146, 82, 5, 150, 41, 34, 106, 161, 134, 34, 68, 150, 26, 42, 84, 73, 165, 161, 33, 41, 40, 161, 86, 101, 86, 66, 165, 136, 33, 85, 144, 154, 150, 162, 169, 154, 20, 105, 36, 144, 32, 37, 98, 137, 153, 102, 34, 150, 64, 84, 153, 149, 105, 128, 22, 82, 100, 165, 65, 22, 161, 37, 86, 166, 97, 134, 40, 154, 169, 86, 165, 41, 41, 37, 82, 130, 168, 86, 168, 82, 85, 168},
    {130, 0, 66, 73, 2, 85, 74, 16, 0, 96, 42, 1, 104, 24, 106, 134, 136, 169, 105, 37, 73, 41, 102, 1, 150, 22, 150, 105, 17, 170, 168, 165, 148, 133, 150, 165, 148, 22, 162, 166, 144, 86, 80, 170, 154, 136, 89, 148, 105, 150, 104, 146, 154, 9, 152, 104, 146, 134, 10, 100, 128, 20, 36, 2, 82, 169, 70, 16, 37, 148, 144, 129, 104, 80, 80, 128, 104, 8, 81, 162, 128, 69, 73, 105, 146, 105, 150, 89, 149, 104, 101, 128, 104, 101, 72, 104, 73, 134, 148, 100, 150, 105, 146, 73, 164, 154, 6, 74, 66, 138, 89, 97, 36, 105, 101, 66, 138, 105, 90, 8, 160, 101, 146, 84, 37, 72, 170, 1, 26, 86, 153, 150, 134, 154, 101, 26, 72, 106, 82, 160, 134, 138, 72, 105, 26, 133, 41, 84, 160, 146, 96, 154, 149, 149, 4, 97, 89, 166, 10, 136, 166, 168, 82, 105, 73, 97, 26, 72, 65, 98, 150, 9, 89, 37, 154, 97, 136, 73, 144, 144, 90, 96, 149, 146, 98, 72, 105, 162, 21, 149, 69, 0, 86, 130, 26, 161, 164, 4, 9, 41, 85, 164, 72, 69, 36, 166, 40, 70, 129, 150, 64, 6, 144, 9, 18, 137, 25, 37, 16, 134, 32, 134, 24, 65, 96, 145, 105, 146, 128, 137, 24, 90, 5, 33, 68, 149, 34, 133, 8, 102, 69, 96, 134, 104, 102, 145, 64, 18, 153, 18, 105, 105, 164, 146, 90, 37, 16, 40, 89, 40, 0, 170, 166, 88, 38, 146, 36, 101, 133, 64, 164, 134, 128, 153, 20, 105, 154, 4, 17, 0, 152, 73, 6, 104, 25, 148, 149, 16, 130, 85, 65, 148, 88, 38, 70, 148, 21, 138, 72, 69, 41, 88, 66, 89, 96, 101, 37, 9, 166, 106, 105, 166, 89, 81, 154, 170, 145, 133, 42, 0, 17, 84, 138, 148, 73, 105, 89, 16, 165, 34, 146, 74, 97, 65, 105, 36, 34, 64, 105, 130, 32, 20, 132, 20, 65, 152, 21, 145, 10, 69, 149, 149, 144, 34, 68, 165, 138, 90, 105, 134, 150, 2, 153, 85, 104, 148, 21, 9, 150, 104, 132, 105, 89, 133, 150, 144, 80, 149, 146, 80, 17, 98, 89, 146},
    {17, 162, 21, 130, 166, 42, 32, 164, 20, 40, 22, 65, 96, 153, 40, 145, 73, 89, 41, 70, 85, 169, 104, 85, 153, 138, 32, 106, 137, 84, 132, 100, 146, 148, 148, 145, 149, 149, 170, 149, 21, 104, 21, 42, 90, 36, 101, 145, 2, 145, 170, 129, 17, 74, 161, 74, 32, 138, 9, 101, 64, 88, 41, 24, 37, 16, 18, 66, 84, 21, 104, 149, 132, 160, 100, 64, 41, 86, 164, 138, 24, 42, 74, 106, 153, 106, 149, 106, 21, 41, 106, 149, 42, 170, 166, 38, 68, 85, 21, 37, 153, 106, 145, 104, 149, 41, 90, 130, 85, 162, 105, 26, 85, 74, 98, 106, 149, 170, 97, 138, 170, 168, 164, 146, 106, 168, 73, 18, 106, 98, 37, 149, 148, 129, 32, 6, 104, 33, 70, 21, 129, 149, 40, 106, 145, 80, 98, 42, 137, 33, 36, 37, 144, 149, 81, 90, 80, 38, 106, 148, 133, 160, 16, 32, 22, 10, 21, 97, 42, 106, 169, 106, 160, 89, 73, 8, 98, 6, 153, 149, 98, 106, 17, 148, 148, 101, 106, 21, 41, 153, 105, 145, 98, 21, 132, 17, 36, 34, 24, 0, 42, 152, 152, 26, 8, 166, 36, 8, 85, 20, 98, 146, 64, 10, 1, 97, 25, 101, 154, 145, 33, 153, 16, 42, 98, 145, 74, 4, 145, 129, 168, 32, 104, 24, 22, 36, 64, 145, 96, 96, 150, 74, 130, 72, 170, 160, 98, 33, 4, 16, 89, 4, 84, 38, 40, 136, 168, 128, 4, 24, 104, 17, 18, 128, 80, 85, 128, 105, 8, 148, 129, 128, 32, 17, 128, 106, 153, 32, 132, 0, 17, 33, 161, 0, 105, 17, 32, 133, 0, 162, 100, 128, 168, 98, 22, 88, 165, 26, 74, 88, 41, 9, 166, 2, 102, 106, 10, 86, 145, 105, 170, 154, 104, 106, 70, 162, 102, 85, 96, 96, 149, 25, 149, 149, 82, 74, 106, 170, 85, 18, 25, 2, 40, 34, 90, 85, 65, 146, 106, 149, 73, 134, 145, 86, 24, 84, 154, 26, 132, 2, 86, 41, 85, 138, 89, 149, 102, 73, 26, 38, 0, 134, 165, 148, 73, 148, 152, 105, 152, 37, 149, 98, 85, 149, 22, 21, 106, 144, 21, 168, 145, 106, 104, 149},
    {38, 2, 81, 70, 2, 10, 2, 170, 100, 105, 0, 129, 149, 86, 34, 154, 137, 42, 161, 66, 65, 86, 37, 97, 65, 0, 144, 106, 98, 165, 169, 90, 81, 153, 22, 68, 149, 145, 65, 154, 20, 41, 5, 38, 152, 86, 68, 165, 166, 17, 34, 80, 145, 42, 130, 9, 20, 162, 166, 6, 150, 17, 73, 22, 38, 69, 129, 162, 81, 137, 100, 97, 149, 132, 102, 166, 98, 84, 86, 129, 152, 68, 36, 102, 169, 162, 25, 26, 70, 164, 98, 153, 134, 86, 38, 98, 98, 65, 160, 148, 105, 100, 80, 162, 149, 105, 70, 68, 166, 130, 82, 130, 133, 80, 104, 85, 88, 150, 90, 2, 153, 24, 98, 41, 102, 70, 4, 80, 42, 162, 106, 153, 81, 81, 34, 86, 170, 33, 149, 21, 153, 164, 22, 42, 97, 1, 170, 130, 20, 6, 148, 150, 80, 169, 102, 41, 104, 170, 106, 85, 152, 130, 104, 132, 84, 134, 98, 152, 74, 104, 162, 102, 170, 145, 6, 133, 64, 66, 153, 10, 102, 86, 149, 17, 96, 170, 85, 161, 170, 161, 165, 5, 66, 97, 97, 88, 162, 130, 89, 146, 150, 134, 65, 16, 97, 0, 133, 66, 132, 170, 32, 134, 128, 6, 145, 2, 4, 70, 0, 72, 9, 89, 16, 16, 166, 18, 104, 138, 25, 153, 74, 170, 34, 74, 168, 70, 102, 9, 64, 2, 5, 130, 33, 70, 2, 96, 134, 34, 133, 37, 64, 64, 128, 34, 160, 162, 8, 1, 38, 81, 84, 65, 17, 84, 128, 73, 168, 17, 21, 85, 41, 136, 2, 81, 36, 106, 0, 17, 96, 0, 73, 18, 136, 128, 166, 17, 97, 8, 137, 66, 0, 129, 20, 154, 74, 10, 169, 98, 38, 101, 69, 20, 102, 86, 106, 169, 26, 133, 104, 34, 154, 153, 169, 22, 105, 88, 38, 89, 37, 18, 170, 80, 149, 81, 70, 162, 161, 148, 69, 41, 132, 138, 106, 96, 2, 81, 165, 97, 22, 145, 26, 10, 17, 21, 73, 164, 41, 133, 2, 72, 26, 1, 69, 18, 9, 153, 133, 100, 9, 8, 150, 96, 138, 168, 132, 73, 106, 84, 145, 37, 72, 70, 4, 149, 168, 81, 145, 70, 149, 170, 149, 98, 25, 25},
    {96, 137, 100, 65, 37, 1, 24, 136, 149, 17, 146, 161, 129, 21, 81, 82, 22, 90, 169, 17, 154, 73, 90, 34, 80, 42, 132, 168, 101, 1, 164, 89, 33, 101, 101, 102, 98, 170, 21, 6, 10, 81, 104, 149, 38, 102, 145, 104, 105, 10, 153, 98, 34, 4, 90, 22, 136, 84, 84, 36, 138, 37, 102, 145, 26, 42, 128, 134, 37, 169, 5, 168, 137, 104, 88, 152, 80, 20, 9, 133, 104, 81, 25, 153, 106, 137, 34, 25, 106, 146, 144, 106, 85, 89, 98, 26, 128, 100, 106, 10, 70, 153, 8, 128, 162, 5, 81, 152, 74, 10, 129, 161, 34, 9, 154, 153, 65, 85, 25, 152, 85, 66, 89, 74, 21, 81, 38, 128, 81, 69, 33, 102, 96, 33, 154, 33, 161, 152, 17, 34, 10, 38, 81, 145, 88, 8, 165, 26, 34, 86, 66, 16, 24, 100, 41, 96, 170, 4, 26, 106, 34, 6, 74, 22, 25, 33, 105, 89, 89, 148, 18, 153, 38, 38, 34, 18, 85, 21, 150, 6, 130, 149, 102, 41, 153, 152, 25, 102, 36, 166, 153, 66, 69, 6, 2, 70, 154, 152, 65, 74, 130, 6, 37, 69, 41, 146, 153, 37, 132, 145, 129, 10, 0, 10, 64, 152, 25, 128, 16, 40, 134, 106, 68, 26, 33, 102, 148, 0, 8, 2, 1, 16, 153, 82, 82, 0, 9, 20, 146, 24, 97, 8, 88, 33, 65, 36, 160, 18, 18, 106, 4, 136, 72, 22, 69, 132, 32, 37, 37, 26, 81, 4, 97, 164, 8, 106, 9, 128, 32, 26, 2, 130, 0, 101, 160, 145, 32, 128, 4, 8, 132, 1, 17, 170, 149, 70, 16, 85, 138, 1, 88, 170, 65, 165, 100, 153, 105, 130, 100, 101, 72, 21, 1, 1, 138, 90, 24, 106, 26, 25, 16, 166, 154, 82, 37, 0, 17, 70, 170, 26, 97, 72, 106, 36, 89, 24, 88, 17, 90, 82, 170, 9, 169, 24, 149, 33, 82, 33, 36, 86, 129, 152, 98, 106, 128, 8, 26, 98, 162, 137, 138, 70, 89, 132, 24, 26, 88, 82, 138, 169, 69, 169, 149, 106, 82, 64, 74, 22, 66, 16, 37, 153, 0, 2, 101, 32, 17, 153, 161, 146, 2, 149, 1, 100},
    {166, 89, 34, 70, 89, 102, 72, 74, 20, 100, 37, 68, 42, 165, 70, 40, 164, 98, 20, 5, 96, 86, 102, 128, 38, 84, 70, 70, 89, 38, 97, 149, 42, 153, 136, 169, 153, 133, 170, 154, 153, 168, 153, 106, 153, 137, 82, 146, 102, 89, 164, 149, 100, 130, 105, 82, 25, 26, 5, 152, 0, 152, 68, 73, 38, 154, 154, 152, 146, 152, 100, 128, 70, 40, 10, 74, 6, 24, 86, 170, 153, 66, 102, 86, 160, 86, 145, 68, 153, 69, 74, 8, 101, 68, 88, 90, 73, 145, 169, 8, 153, 82, 138, 102, 152, 68, 25, 0, 25, 136, 36, 40, 170, 128, 82, 33, 34, 68, 42, 145, 149, 74, 137, 24, 106, 38, 104, 90, 84, 100, 20, 129, 166, 160, 102, 160, 72, 160, 74, 137, 168, 170, 154, 102, 89, 129, 170, 168, 133, 152, 74, 41, 166, 133, 166, 2, 9, 96, 70, 166, 16, 106, 152, 104, 101, 104, 101, 84, 80, 88, 136, 89, 42, 170, 33, 100, 100, 101, 137, 144, 102, 96, 129, 137, 144, 106, 105, 73, 16, 153, 90, 170, 98, 9, 65, 2, 168, 0, 132, 4, 104, 129, 64, 145, 169, 96, 0, 154, 129, 138, 66, 133, 33, 98, 128, 132, 32, 6, 5, 152, 70, 104, 149, 97, 106, 129, 69, 153, 128, 165, 73, 65, 100, 150, 74, 96, 130, 81, 160, 18, 128, 170, 137, 98, 66, 74, 96, 68, 101, 5, 133, 64, 144, 90, 102, 41, 25, 137, 152, 38, 6, 144, 161, 24, 168, 129, 170, 38, 138, 129, 128, 10, 17, 153, 137, 102, 129, 37, 145, 146, 129, 80, 5, 153, 64, 36, 101, 80, 137, 73, 34, 136, 162, 136, 106, 152, 89, 130, 42, 32, 106, 4, 96, 101, 138, 90, 70, 18, 169, 105, 20, 144, 153, 66, 84, 26, 38, 145, 165, 42, 165, 152, 146, 153, 102, 102, 86, 2, 136, 166, 169, 70, 90, 102, 100, 146, 161, 104, 64, 128, 9, 81, 133, 70, 40, 160, 74, 74, 152, 2, 144, 166, 66, 82, 89, 138, 145, 66, 98, 105, 165, 170, 129, 149, 144, 166, 64, 38, 72, 102, 152, 84, 164, 34, 153, 137, 106, 148, 129, 100, 166, 102, 102, 137},
    {6, 104, 148, 26, 64, 106, 96, 88, 73, 32, 32, 138, 90, 97, 73, 80, 128, 150, 101, 10, 101, 133, 137, 145, 69, 105, 130, 105, 153, 132, 105, 41, 18, 150, 144, 84, 150, 4, 106, 138, 84, 6, 134, 90, 164, 148, 89, 150, 41, 4, 40, 68, 80, 9, 20, 145, 26, 17, 153, 138, 89, 8, 40, 90, 137, 134, 88, 81, 137, 80, 90, 65, 21, 97, 86, 88, 152, 89, 9, 88, 144, 104, 105, 34, 38, 104, 85, 169, 85, 73, 24, 86, 105, 104, 73, 10, 24, 21, 22, 70, 148, 42, 66, 42, 148, 0, 84, 80, 166, 38, 89, 72, 86, 149, 154, 69, 148, 100, 100, 6, 137, 74, 145, 24, 106, 132, 101, 10, 38, 89, 104, 148, 22, 40, 90, 169, 106, 150, 9, 149, 21, 70, 169, 104, 150, 166, 40, 96, 36, 72, 74, 89, 69, 84, 38, 37, 101, 16, 36, 84, 150, 41, 36, 88, 6, 170, 164, 137, 9, 24, 166, 138, 42, 154, 105, 104, 82, 153, 165, 166, 96, 73, 21, 150, 152, 33, 10, 136, 10, 18, 90, 150, 169, 132, 84, 168, 64, 72, 32, 68, 104, 68, 4, 4, 22, 105, 97, 81, 160, 17, 64, 70, 128, 0, 168, 0, 32, 18, 148, 0, 146, 17, 101, 17, 9, 130, 41, 134, 20, 128, 0, 81, 18, 162, 152, 145, 40, 70, 150, 72, 148, 74, 4, 42, 9, 96, 106, 0, 32, 64, 42, 68, 138, 88, 168, 96, 148, 72, 21, 33, 16, 86, 165, 82, 6, 150, 0, 136, 34, 170, 105, 22, 32, 21, 22, 89, 132, 128, 20, 148, 21, 73, 21, 65, 132, 2, 170, 32, 145, 40, 146, 20, 34, 8, 148, 96, 37, 84, 154, 128, 84, 137, 41, 9, 98, 37, 136, 160, 85, 145, 101, 86, 105, 9, 9, 26, 105, 136, 86, 6, 0, 21, 149, 6, 105, 106, 105, 36, 149, 18, 21, 74, 65, 10, 105, 148, 20, 145, 41, 146, 32, 82, 145, 70, 132, 70, 102, 1, 38, 170, 148, 80, 22, 138, 145, 88, 162, 105, 100, 37, 166, 170, 10, 81, 80, 102, 42, 105, 22, 73, 133, 105, 149, 21, 25, 150, 24, 154, 90, 169, 85, 129, 150, 22},
    {136, 17, 10, 16, 21, 133, 133, 169, 72, 2, 18, 9, 134, 72, 138, 134, 40, 85, 18, 169, 166, 1, 132, 154, 136, 101, 144, 98, 34, 164, 154, 102, 22, 72, 72, 90, 68, 73, 170, 154, 104, 170, 106, 160, 101, 149, 134, 136, 148, 101, 138, 98, 105, 100, 21, 25, 40, 68, 132, 86, 104, 90, 38, 64, 164, 104, 33, 145, 72, 74, 32, 170, 17, 84, 130, 66, 133, 149, 33, 90, 128, 20, 2, 21, 97, 33, 153, 133, 9, 146, 150, 90, 132, 133, 17, 6, 85, 8, 26, 106, 70, 100, 38, 65, 130, 34, 165, 153, 84, 145, 105, 80, 40, 152, 150, 9, 160, 37, 160, 72, 106, 16, 36, 150, 4, 136, 36, 82, 40, 85, 22, 168, 106, 129, 165, 160, 166, 149, 166, 9, 72, 106, 134, 101, 74, 106, 4, 5, 136, 25, 165, 33, 26, 98, 1, 16, 152, 38, 150, 97, 80, 90, 17, 132, 70, 96, 164, 97, 102, 166, 82, 166, 33, 70, 149, 144, 138, 32, 144, 26, 132, 130, 105, 96, 38, 164, 100, 153, 66, 154, 22, 70, 22, 104, 65, 152, 136, 2, 161, 0, 2, 130, 74, 37, 74, 37, 73, 36, 10, 70, 4, 5, 17, 129, 18, 41, 149, 165, 70, 64, 88, 20, 16, 128, 36, 130, 0, 66, 10, 74, 34, 168, 162, 160, 33, 10, 132, 64, 162, 129, 2, 33, 169, 64, 4, 2, 130, 0, 130, 128, 161, 101, 8, 169, 22, 36, 2, 88, 88, 9, 132, 65, 21, 66, 1, 38, 1, 38, 160, 80, 129, 66, 100, 82, 0, 2, 90, 0, 96, 41, 106, 164, 40, 145, 96, 0, 2, 100, 36, 10, 169, 102, 74, 2, 82, 33, 36, 85, 132, 100, 5, 138, 150, 146, 104, 162, 97, 18, 33, 90, 98, 106, 130, 38, 149, 98, 17, 148, 146, 152, 162, 88, 41, 89, 86, 21, 69, 133, 152, 160, 24, 161, 144, 128, 162, 20, 86, 65, 148, 37, 66, 80, 25, 88, 160, 161, 162, 136, 37, 82, 90, 146, 82, 33, 37, 96, 36, 165, 80, 26, 106, 96, 149, 101, 104, 136, 134, 134, 8, 137, 90, 64, 26, 5, 73, 106, 144, 168, 85, 132, 145, 138, 149, 81},
    {65, 148, 136, 105, 150, 82, 70, 98, 4, 72, 130, 146, 81, 70, 42, 10, 36, 0, 4, 66, 5, 21, 16, 106, 41, 102, 68, 164, 96, 81, 144, 25, 96, 2, 34, 170, 170, 152, 9, 42, 160, 5, 98, 89, 90, 149, 42, 162, 84, 136, 8, 146, 154, 69, 160, 153, 130, 84, 24, 37, 10, 16, 41, 80, 66, 137, 10, 22, 69, 68, 145, 129, 104, 98, 97, 65, 89, 16, 18, 161, 88, 96, 64, 149, 168, 84, 34, 5, 96, 25, 149, 21, 68, 96, 85, 69, 41, 134, 149, 137, 138, 0, 162, 165, 169, 72, 25, 85, 170, 130, 102, 16, 166, 166, 85, 80, 22, 89, 69, 74, 25, 70, 5, 144, 42, 85, 129, 161, 21, 105, 81, 132, 153, 170, 4, 146, 18, 165, 88, 170, 138, 32, 68, 161, 128, 150, 69, 85, 22, 97, 101, 25, 138, 85, 34, 74, 37, 137, 84, 102, 105, 101, 102, 152, 98, 145, 90, 98, 26, 70, 38, 105, 165, 146, 137, 22, 146, 84, 38, 137, 21, 150, 138, 168, 104, 133, 81, 104, 88, 150, 69, 162, 84, 161, 162, 0, 21, 0, 170, 88, 68, 8, 162, 104, 166, 69, 145, 97, 130, 73, 5, 88, 144, 18, 10, 152, 134, 9, 168, 166, 16, 164, 96, 128, 85, 97, 20, 97, 161, 166, 149, 6, 73, 10, 96, 82, 21, 18, 85, 85, 170, 22, 1, 66, 33, 65, 84, 165, 18, 10, 134, 148, 149, 88, 20, 2, 162, 164, 64, 36, 73, 152, 25, 66, 153, 10, 160, 133, 104, 4, 132, 36, 40, 168, 5, 68, 8, 2, 168, 128, 42, 81, 37, 144, 34, 96, 69, 81, 26, 129, 0, 138, 9, 69, 152, 100, 72, 74, 105, 90, 146, 137, 85, 2, 133, 73, 34, 37, 24, 101, 161, 98, 21, 86, 1, 84, 100, 89, 98, 16, 33, 169, 138, 8, 68, 22, 21, 1, 146, 154, 10, 17, 101, 89, 148, 160, 80, 154, 97, 68, 33, 164, 166, 128, 2, 160, 165, 36, 165, 161, 164, 149, 162, 69, 38, 162, 20, 165, 101, 165, 168, 85, 81, 2, 20, 34, 160, 84, 16, 105, 164, 149, 5, 153, 130, 42, 148, 149, 10, 34, 104, 20, 9, 66},
    {88, 36, 64, 149, 32, 18, 170, 82, 150, 4, 41, 9, 84, 36, 80, 42, 148, 136, 65, 73, 34, 88, 81, 36, 10, 152, 8, 20, 70, 146, 148, 89, 98, 40, 37, 96, 101, 169, 25, 165, 40, 150, 102, 89, 148, 149, 86, 37, 20, 168, 86, 40, 2, 133, 41, 17, 128, 18, 36, 166, 160, 97, 150, 149, 133, 33, 24, 164, 165, 34, 17, 98, 105, 69, 134, 148, 154, 97, 100, 8, 96, 146, 153, 132, 32, 25, 106, 152, 38, 149, 82, 34, 21, 88, 132, 134, 86, 5, 40, 41, 22, 81, 36, 1, 41, 26, 8, 168, 17, 170, 6, 41, 137, 33, 88, 16, 34, 26, 85, 73, 6, 133, 86, 105, 145, 148, 145, 106, 97, 145, 86, 33, 104, 18, 82, 81, 85, 38, 82, 165, 102, 96, 86, 90, 33, 169, 146, 26, 104, 146, 104, 90, 42, 5, 32, 4, 96, 88, 74, 166, 104, 132, 10, 81, 150, 38, 1, 9, 85, 25, 32, 90, 16, 161, 101, 81, 88, 84, 32, 36, 153, 88, 168, 97, 170, 148, 148, 166, 165, 100, 24, 41, 18, 160, 33, 74, 170, 16, 145, 82, 138, 32, 64, 2, 96, 0, 1, 84, 160, 2, 17, 161, 33, 81, 168, 166, 80, 128, 136, 0, 160, 25, 145, 25, 85, 160, 69, 100, 165, 36, 21, 18, 144, 2, 160, 65, 80, 132, 105, 1, 165, 145, 34, 80, 20, 22, 17, 152, 24, 1, 65, 65, 34, 64, 1, 86, 132, 4, 38, 105, 149, 64, 69, 5, 40, 98, 104, 149, 138, 138, 72, 32, 22, 132, 166, 24, 4, 37, 38, 37, 4, 22, 65, 18, 64, 96, 153, 150, 38, 148, 24, 129, 18, 70, 133, 98, 166, 165, 129, 165, 16, 86, 150, 72, 74, 18, 18, 4, 168, 88, 20, 96, 144, 24, 161, 88, 81, 98, 144, 17, 38, 101, 96, 36, 84, 89, 24, 25, 137, 150, 37, 152, 84, 154, 138, 97, 104, 130, 21, 102, 106, 150, 169, 160, 105, 161, 137, 41, 37, 168, 85, 88, 133, 132, 41, 102, 166, 138, 144, 154, 153, 90, 80, 102, 146, 101, 86, 89, 169, 86, 36, 152, 166, 97, 102, 160, 144, 104, 37, 70, 97, 82, 70, 37},
    {168, 85, 160, 26, 18, 4, 16, 136, 26, 6, 134, 38, 65, 64, 82, 10, 4, 85, 33, 134, 4, 80, 165, 164, 137, 9, 68, 21, 37, 106, 161, 153, 72, 146, 22, 166, 130, 154, 36, 134, 4, 72, 74, 21, 69, 164, 106, 137, 16, 96, 137, 6, 88, 74, 160, 2, 22, 6, 26, 38, 6, 74, 34, 164, 64, 24, 154, 101, 5, 160, 105, 104, 160, 97, 82, 97, 73, 85, 97, 134, 24, 81, 33, 73, 160, 65, 38, 64, 170, 169, 5, 146, 25, 81, 33, 88, 72, 166, 168, 161, 20, 32, 154, 89, 134, 69, 152, 97, 25, 134, 105, 137, 164, 82, 138, 104, 89, 149, 97, 73, 70, 137, 85, 166, 101, 98, 170, 101, 89, 5, 22, 134, 86, 86, 169, 36, 161, 154, 133, 2, 70, 36, 6, 105, 134, 38, 145, 72, 36, 89, 169, 24, 166, 138, 96, 132, 84, 149, 144, 153, 130, 38, 21, 169, 68, 32, 166, 102, 96, 85, 10, 4, 89, 128, 88, 40, 8, 89, 162, 154, 73, 9, 170, 22, 152, 17, 86, 138, 37, 6, 41, 134, 138, 66, 98, 2, 24, 17, 128, 104, 25, 154, 4, 130, 160, 16, 69, 5, 20, 17, 64, 24, 80, 96, 160, 66, 10, 8, 162, 128, 6, 138, 21, 100, 153, 134, 4, 4, 132, 6, 21, 65, 16, 134, 132, 80, 72, 138, 41, 0, 150, 9, 18, 33, 20, 36, 1, 32, 34, 128, 170, 105, 20, 65, 33, 0, 34, 70, 68, 100, 9, 169, 0, 0, 148, 136, 82, 130, 136, 65, 18, 36, 128, 2, 144, 81, 129, 128, 2, 70, 102, 81, 149, 153, 106, 162, 96, 134, 96, 21, 161, 152, 138, 149, 90, 100, 85, 134, 145, 98, 149, 168, 66, 16, 33, 41, 73, 166, 86, 161, 26, 138, 102, 73, 169, 32, 89, 148, 16, 90, 102, 134, 164, 146, 37, 73, 100, 153, 130, 144, 164, 73, 149, 73, 104, 130, 164, 72, 65, 161, 153, 150, 102, 162, 34, 96, 68, 129, 128, 70, 166, 89, 146, 10, 101, 132, 2, 69, 164, 98, 146, 36, 162, 82, 22, 26, 37, 162, 138, 89, 166, 72, 170, 154, 166, 146, 73, 148, 86, 70, 33, 65, 26, 10},
    {25, 64, 16, 4, 90, 88, 24, 24, 0, 2, 165, 96, 82, 154, 68, 128, 37, 81, 42, 153, 154, 101, 137, 9, 130, 86, 42, 10, 97, 25, 34, 0, 100, 36, 32, 161, 165, 164, 10, 132, 101, 86, 165, 26, 65, 133, 146, 101, 90, 96, 21, 36, 0, 160, 154, 72, 5, 18, 104, 2, 97, 5, 138, 145, 68, 69, 74, 97, 165, 97, 88, 101, 66, 106, 138, 20, 90, 0, 166, 22, 97, 152, 10, 22, 128, 26, 133, 10, 165, 24, 8, 165, 90, 90, 9, 72, 10, 36, 129, 1, 22, 90, 102, 18, 38, 88, 86, 22, 153, 70, 137, 146, 161, 100, 16, 146, 100, 89, 41, 133, 80, 97, 90, 100, 85, 82, 98, 98, 82, 80, 88, 102, 37, 133, 162, 42, 90, 24, 22, 36, 100, 106, 152, 26, 145, 21, 89, 89, 102, 10, 97, 154, 97, 100, 101, 102, 85, 145, 88, 42, 161, 169, 165, 106, 106, 101, 37, 42, 26, 84, 88, 90, 161, 100, 80, 170, 90, 154, 148, 164, 70, 90, 165, 101, 17, 42, 90, 169, 41, 37, 154, 37, 18, 5, 96, 169, 10, 8, 153, 72, 64, 33, 133, 128, 32, 145, 10, 4, 41, 88, 16, 2, 106, 74, 5, 97, 18, 148, 97, 32, 164, 72, 21, 89, 66, 149, 74, 128, 97, 36, 104, 0, 82, 145, 145, 136, 4, 1, 136, 20, 102, 146, 165, 16, 18, 8, 66, 88, 100, 34, 5, 9, 16, 25, 106, 72, 32, 102, 36, 133, 18, 161, 129, 36, 128, 36, 129, 24, 129, 69, 146, 40, 90, 104, 162, 26, 101, 130, 33, 33, 101, 8, 33, 70, 82, 128, 69, 8, 162, 26, 153, 166, 145, 153, 90, 162, 162, 164, 33, 101, 86, 66, 10, 133, 24, 104, 152, 2, 169, 145, 10, 32, 153, 22, 17, 70, 154, 89, 88, 18, 161, 102, 165, 169, 137, 26, 146, 8, 101, 161, 101, 26, 25, 18, 82, 101, 33, 6, 88, 161, 24, 2, 100, 137, 32, 106, 106, 5, 136, 153, 132, 20, 102, 82, 153, 161, 34, 153, 144, 69, 154, 106, 165, 66, 74, 150, 97, 146, 21, 97, 37, 90, 164, 166, 36, 33, 138, 18, 145, 88, 97, 24, 70, 97},
    {16, 33, 9, 16, 4, 133, 130, 165, 133, 5, 69, 144, 105, 32, 0, 38, 81, 170, 132, 162, 101, 21, 17, 65, 149, 170, 98, 25, 105, 20, 148, 170, 0, 162, 72, 26, 97, 102, 96, 64, 64, 18, 64, 25, 96, 10, 41, 145, 128, 98, 128, 68, 41, 32, 80, 0, 96, 80, 148, 66, 68, 26, 81, 89, 129, 104, 33, 73, 161, 5, 148, 6, 150, 148, 133, 18, 169, 72, 137, 2, 98, 5, 133, 164, 84, 133, 72, 101, 138, 41, 149, 98, 129, 168, 165, 149, 10, 86, 17, 137, 80, 21, 2, 153, 145, 9, 21, 145, 102, 150, 165, 34, 10, 152, 164, 81, 146, 165, 148, 100, 18, 88, 145, 169, 6, 73, 150, 168, 129, 10, 132, 80, 104, 38, 149, 130, 25, 153, 168, 98, 84, 90, 0, 144, 69, 70, 138, 129, 24, 128, 89, 164, 104, 72, 134, 8, 102, 145, 129, 22, 24, 88, 106, 96, 150, 169, 69, 10, 165, 37, 8, 102, 134, 166, 136, 154, 138, 154, 34, 106, 154, 33, 88, 102, 6, 166, 100, 106, 98, 129, 145, 90, 8, 82, 72, 8, 145, 149, 65, 1, 17, 136, 66, 0, 100, 5, 5, 36, 69, 10, 98, 152, 0, 69, 10, 16, 33, 132, 106, 96, 84, 32, 4, 0, 5, 32, 5, 66, 70, 16, 149, 128, 137, 38, 96, 98, 144, 5, 133, 132, 4, 137, 64, 168, 136, 36, 129, 0, 129, 0, 1, 37, 90, 64, 137, 5, 0, 20, 72, 70, 128, 24, 98, 132, 22, 8, 2, 25, 73, 146, 5, 104, 16, 74, 69, 144, 74, 64, 38, 68, 10, 130, 22, 80, 1, 40, 132, 40, 22, 41, 90, 102, 9, 33, 8, 90, 90, 105, 144, 97, 133, 18, 20, 97, 144, 41, 88, 146, 106, 38, 169, 106, 82, 37, 164, 138, 20, 16, 149, 66, 97, 102, 136, 70, 133, 150, 37, 86, 104, 90, 70, 145, 100, 104, 154, 74, 86, 98, 105, 154, 146, 69, 1, 152, 102, 102, 102, 42, 37, 106, 6, 0, 161, 100, 20, 100, 1, 144, 166, 106, 89, 161, 24, 69, 154, 17, 106, 41, 18, 170, 98, 4, 68, 90, 10, 98, 152, 38, 160, 101, 106, 148, 88, 98},
    {66, 26, 69, 145, 154, 152, 146, 20, 145, 165, 104, 18, 134, 101, 129, 88, 32, 161, 146, 169, 34, 80, 152, 100, 38, 20, 80, 150, 68, 132, 64, 132, 4, 72, 42, 98, 6, 102, 148, 74, 73, 70, 85, 97, 84, 170, 169, 10, 146, 81, 33, 34, 9, 152, 1, 160, 32, 2, 152, 70, 41, 161, 89, 153, 100, 169, 144, 18, 66, 4, 0, 73, 154, 164, 148, 68, 160, 0, 153, 81, 82, 38, 148, 149, 69, 145, 101, 150, 104, 166, 166, 72, 150, 160, 152, 154, 133, 10, 98, 102, 2, 154, 80, 25, 90, 129, 70, 150, 136, 88, 164, 168, 26, 100, 34, 2, 41, 33, 149, 80, 162, 101, 154, 69, 101, 37, 90, 25, 150, 128, 6, 98, 18, 154, 154, 165, 26, 105, 132, 164, 18, 89, 165, 9, 5, 72, 138, 162, 86, 0, 102, 129, 66, 98, 102, 86, 152, 90, 21, 154, 102, 165, 100, 24, 166, 150, 6, 129, 37, 146, 165, 138, 41, 74, 149, 69, 146, 165, 98, 74, 18, 101, 106, 22, 37, 162, 154, 41, 96, 88, 25, 90, 68, 0, 8, 100, 138, 152, 88, 41, 24, 136, 6, 153, 150, 8, 138, 130, 70, 128, 154, 42, 32, 5, 100, 8, 2, 64, 84, 5, 90, 136, 133, 88, 22, 85, 136, 0, 10, 10, 164, 148, 21, 9, 72, 64, 132, 24, 21, 64, 98, 128, 136, 8, 168, 4, 0, 145, 69, 5, 68, 138, 40, 161, 0, 144, 17, 2, 38, 42, 68, 130, 169, 86, 10, 68, 90, 154, 0, 72, 104, 18, 128, 9, 74, 132, 97, 8, 8, 154, 137, 169, 164, 138, 148, 0, 21, 1, 18, 128, 32, 144, 9, 82, 153, 98, 40, 2, 36, 166, 80, 149, 24, 85, 160, 149, 70, 134, 82, 144, 33, 105, 165, 37, 24, 170, 42, 24, 0, 106, 105, 106, 136, 106, 128, 149, 149, 129, 72, 1, 102, 37, 134, 84, 166, 97, 101, 1, 100, 98, 153, 22, 20, 101, 86, 168, 152, 106, 154, 164, 68, 64, 129, 105, 74, 98, 168, 154, 20, 136, 106, 152, 168, 97, 102, 74, 148, 9, 81, 128, 4, 168, 100, 74, 72, 96, 153, 18, 88, 144, 105, 84, 34, 101},
    {88, 2, 129, 162, 66, 146, 10, 70, 34, 102, 17, 162, 40, 22, 2, 132, 152, 32, 146, 17, 102, 85, 133, 21, 97, 38, 138, 169, 98, 70, 128, 38, 74, 64, 37, 85, 17, 73, 102, 88, 9, 37, 165, 98, 149, 144, 38, 90, 38, 89, 129, 153, 1, 153, 10, 36, 0, 81, 128, 133, 73, 152, 169, 66, 168, 137, 16, 89, 146, 101, 96, 134, 88, 170, 42, 69, 40, 160, 161, 25, 74, 102, 74, 42, 17, 34, 153, 4, 21, 136, 74, 106, 162, 160, 138, 100, 98, 25, 85, 89, 70, 34, 144, 162, 2, 101, 8, 98, 98, 97, 160, 36, 24, 25, 42, 169, 133, 102, 106, 153, 74, 169, 90, 101, 37, 168, 166, 89, 25, 133, 146, 81, 169, 153, 24, 166, 169, 65, 100, 128, 153, 81, 34, 164, 105, 153, 164, 37, 21, 74, 98, 102, 41, 21, 153, 65, 85, 69, 20, 149, 22, 164, 34, 97, 164, 136, 25, 41, 165, 38, 33, 144, 72, 154, 20, 69, 42, 20, 24, 85, 150, 146, 137, 89, 36, 170, 166, 164, 169, 88, 146, 166, 146, 1, 101, 153, 90, 70, 165, 70, 70, 66, 129, 8, 128, 82, 34, 33, 26, 26, 165, 100, 96, 84, 8, 16, 130, 65, 164, 33, 162, 33, 68, 64, 98, 98, 38, 160, 81, 130, 6, 10, 24, 100, 42, 25, 6, 32, 165, 98, 132, 164, 72, 133, 166, 148, 10, 68, 82, 100, 24, 4, 82, 88, 162, 86, 168, 6, 152, 69, 145, 97, 136, 165, 17, 26, 146, 144, 9, 69, 80, 153, 18, 40, 64, 20, 65, 170, 24, 132, 101, 32, 104, 0, 170, 9, 6, 8, 9, 102, 105, 69, 40, 84, 18, 129, 0, 65, 90, 84, 96, 134, 4, 42, 4, 42, 9, 170, 160, 106, 150, 152, 33, 162, 132, 42, 144, 36, 154, 130, 81, 160, 17, 149, 22, 6, 166, 96, 104, 100, 88, 169, 170, 166, 68, 16, 129, 22, 38, 81, 88, 10, 16, 8, 26, 80, 41, 162, 25, 105, 37, 162, 152, 70, 149, 88, 37, 8, 70, 86, 5, 160, 1, 81, 10, 21, 101, 169, 9, 154, 21, 41, 133, 25, 137, 145, 98, 22, 137, 102, 138, 102, 168, 148},
    {152, 160, 69, 164, 162, 130, 134, 138, 132, 133, 81, 150, 136, 69, 164, 72, 85, 166, 129, 146, 162, 165, 162, 89, 85, 133, 72, 170, 97, 130, 72, 134, 89, 88, 72, 81, 89, 81, 166, 73, 17, 84, 89, 129, 85, 90, 169, 89, 166, 88, 133, 80, 82, 66, 136, 166, 88, 129, 168, 64, 73, 72, 138, 169, 162, 84, 128, 104, 90, 88, 162, 73, 70, 162, 150, 160, 170, 168, 166, 80, 69, 166, 170, 132, 85, 166, 81, 166, 80, 165, 166, 82, 162, 162, 166, 164, 168, 88, 80, 89, 88, 162, 69, 169, 82, 150, 165, 166, 169, 64, 168, 160, 89, 85, 164, 166, 97, 166, 133, 104, 102, 89, 166, 86, 138, 150, 150, 170, 166, 160, 148, 89, 81, 82, 166, 162, 160, 89, 33, 90, 85, 85, 162, 166, 85, 85, 162, 160, 81, 160, 161, 164, 97, 81, 89, 89, 81, 170, 138, 89, 80, 130, 90, 170, 169, 169, 86, 162, 170, 170, 162, 160, 130, 165, 152, 164, 160, 170, 89, 81, 162, 160, 89, 81, 165, 166, 164, 89, 97, 89, 166, 25, 170, 85, 89, 80, 81, 164, 102, 144, 160, 80, 97, 98, 81, 160, 136, 164, 81, 40, 165, 162, 81, 148, 64, 85, 134, 149, 84, 72, 85, 132, 162, 144, 128, 40, 162, 80, 81, 85, 162, 166, 166, 65, 129, 16, 160, 21, 101, 161, 104, 134, 89, 166, 162, 132, 164, 129, 81, 72, 101, 133, 81, 169, 130, 160, 82, 104, 80, 72, 162, 88, 96, 86, 9, 88, 104, 162, 106, 160, 130, 80, 146, 82, 85, 162, 90, 89, 80, 65, 25, 162, 100, 0, 128, 89, 164, 36, 84, 170, 149, 104, 64, 136, 166, 81, 88, 69, 166, 100, 130, 85, 138, 18, 164, 154, 133, 85, 64, 166, 128, 89, 170, 168, 164, 166, 164, 154, 82, 100, 69, 64, 89, 80, 166, 166, 170, 170, 85, 88, 85, 130, 129, 162, 170, 90, 85, 68, 150, 97, 170, 166, 65, 64, 85, 81, 138, 81, 88, 168, 70, 166, 22, 160, 73, 89, 105, 170, 132, 89, 85, 164, 88, 89, 154, 105, 148, 166, 89, 136, 88, 166, 88, 25, 137, 81, 38, 88, 89, 166, 81, 161, 169, 89},
    {98, 18, 137, 134, 85, 138, 38, 68, 2, 148, 21, 4, 2, 8, 150, 22, 5, 165, 69, 72, 6, 69, 133, 25, 165, 38, 105, 36, 145, 146, 154, 134, 10, 137, 137, 148, 21, 41, 2, 165, 21, 42, 152, 152, 73, 2, 150, 24, 146, 33, 132, 164, 133, 5, 164, 133, 150, 22, 152, 26, 86, 72, 132, 85, 42, 102, 148, 150, 152, 100, 146, 82, 129, 66, 102, 74, 74, 20, 82, 106, 33, 161, 90, 66, 149, 6, 136, 96, 88, 166, 36, 130, 146, 25, 162, 130, 6, 1, 72, 161, 73, 166, 73, 84, 33, 22, 69, 68, 21, 161, 152, 68, 9, 90, 146, 38, 154, 166, 134, 150, 97, 145, 38, 145, 166, 17, 133, 85, 37, 134, 86, 40, 90, 161, 166, 134, 101, 146, 73, 152, 40, 105, 133, 70, 41, 137, 96, 18, 41, 89, 101, 86, 90, 86, 148, 137, 152, 166, 170, 21, 69, 150, 42, 162, 150, 17, 133, 154, 66, 25, 40, 85, 166, 169, 165, 164, 18, 74, 84, 161, 6, 4, 1, 89, 153, 82, 86, 152, 152, 25, 106, 33, 22, 81, 136, 80, 96, 36, 42, 161, 160, 33, 10, 168, 40, 8, 5, 9, 153, 88, 18, 33, 20, 36, 149, 85, 106, 5, 138, 4, 128, 6, 0, 137, 169, 152, 42, 25, 137, 137, 36, 22, 128, 26, 2, 18, 97, 22, 128, 96, 9, 36, 80, 42, 130, 130, 0, 134, 6, 6, 0, 32, 17, 85, 164, 33, 34, 128, 1, 89, 32, 37, 89, 170, 89, 129, 8, 169, 1, 16, 36, 21, 0, 25, 162, 66, 18, 33, 0, 137, 144, 24, 154, 96, 128, 145, 150, 129, 161, 70, 96, 149, 72, 70, 68, 152, 136, 101, 133, 168, 106, 145, 102, 106, 80, 4, 162, 37, 41, 8, 17, 130, 64, 134, 146, 37, 96, 21, 24, 40, 169, 25, 21, 129, 162, 166, 148, 100, 102, 153, 8, 65, 81, 32, 26, 8, 168, 154, 82, 81, 97, 152, 90, 65, 97, 90, 80, 40, 9, 86, 6, 82, 89, 0, 17, 25, 73, 146, 34, 6, 134, 150, 132, 34, 133, 106, 21, 70, 154, 145, 153, 2, 25, 25, 25, 9, 166, 9, 149, 154, 101, 164, 68, 137},
    {128, 149, 96, 36, 20, 134, 149, 70, 4, 25, 42, 69, 133, 42, 101, 81, 40, 1, 20, 64, 133, 72, 4, 168, 86, 74, 138, 22, 2, 132, 4, 68, 25, 9, 104, 40, 104, 74, 5, 33, 10, 4, 42, 144, 148, 105, 154, 106, 149, 66, 128, 72, 97, 2, 69, 164, 9, 152, 42, 26, 33, 65, 22, 146, 81, 105, 148, 104, 169, 8, 65, 89, 145, 21, 150, 133, 88, 38, 6, 82, 105, 84, 148, 20, 74, 4, 40, 133, 106, 6, 149, 73, 148, 18, 161, 148, 133, 106, 106, 74, 98, 148, 166, 20, 73, 22, 149, 17, 89, 22, 162, 22, 24, 104, 128, 6, 154, 20, 129, 166, 36, 74, 133, 74, 5, 72, 149, 136, 86, 85, 90, 104, 86, 104, 162, 148, 6, 170, 70, 104, 40, 106, 145, 133, 74, 106, 149, 64, 36, 98, 154, 132, 74, 106, 72, 102, 90, 129, 70, 26, 8, 149, 100, 165, 154, 153, 102, 138, 169, 148, 97, 81, 161, 24, 105, 33, 2, 144, 25, 106, 5, 149, 104, 104, 106, 153, 149, 97, 80, 42, 164, 66, 148, 74, 42, 74, 134, 133, 81, 162, 132, 10, 102, 153, 17, 5, 33, 84, 74, 70, 148, 9, 105, 32, 105, 42, 65, 64, 84, 136, 9, 65, 4, 17, 133, 1, 133, 0, 105, 73, 5, 150, 145, 2, 74, 129, 134, 66, 5, 162, 153, 145, 33, 80, 21, 134, 144, 98, 170, 1, 72, 132, 10, 104, 153, 133, 24, 4, 0, 42, 80, 106, 41, 146, 80, 88, 69, 153, 8, 16, 97, 9, 100, 104, 1, 148, 8, 8, 74, 153, 64, 148, 97, 0, 18, 106, 20, 26, 106, 148, 89, 148, 81, 18, 146, 74, 5, 6, 152, 89, 161, 89, 100, 102, 84, 132, 20, 137, 133, 21, 165, 85, 130, 81, 89, 144, 105, 128, 0, 1, 26, 104, 9, 66, 149, 5, 150, 69, 153, 105, 40, 17, 148, 22, 21, 84, 41, 102, 149, 154, 166, 85, 168, 88, 8, 36, 37, 0, 34, 150, 66, 17, 145, 18, 69, 154, 101, 153, 17, 160, 41, 134, 170, 105, 150, 101, 148, 148, 88, 68, 170, 149, 106, 106, 168, 74, 128, 65, 8, 150, 42, 20, 98, 74}
};
# 26 "./data_include.h" 2
# 1 "./data_4th/v_weights.h" 1

const attn_fixed_t v_scale = 10.926223754883;
const uint8_t v_weights[96][384] = {
    {10, 34, 101, 18, 1, 169, 33, 90, 81, 69, 5, 149, 154, 136, 89, 137, 0, 150, 9, 34, 165, 150, 37, 138, 86, 129, 162, 65, 90, 161, 133, 162, 102, 20, 37, 145, 18, 145, 40, 137, 86, 37, 40, 22, 89, 145, 36, 133, 146, 161, 165, 0, 148, 74, 148, 16, 9, 25, 96, 81, 145, 102, 101, 26, 74, 98, 21, 41, 26, 146, 41, 81, 148, 149, 5, 153, 106, 145, 134, 106, 80, 21, 169, 89, 97, 8, 161, 32, 144, 70, 38, 74, 134, 89, 73, 105, 38, 41, 89, 169, 129, 149, 166, 38, 22, 164, 6, 18, 41, 154, 21, 1, 8, 101, 37, 170, 136, 88, 90, 18, 41, 88, 73, 106, 146, 169, 129, 162, 149, 90, 4, 33, 8, 104, 152, 21, 162, 138, 25, 85, 153, 165, 22, 90, 106, 33, 148, 37, 160, 82, 89, 105, 96, 36, 101, 102, 5, 98, 82, 82, 21, 85, 146, 89, 25, 154, 130, 154, 98, 73, 4, 73, 34, 88, 36, 149, 74, 38, 133, 150, 41, 134, 66, 80, 164, 101, 129, 100, 70, 5, 22, 0, 26, 40, 145, 138, 101, 37, 70, 105, 165, 4, 101, 85, 148, 130, 104, 26, 38, 5, 65, 162, 169, 22, 66, 106, 42, 69, 150, 89, 169, 106, 26, 25, 138, 165, 133, 18, 150, 4, 86, 81, 41, 165, 153, 149, 89, 81, 86, 166, 98, 162, 0, 104, 20, 86, 90, 22, 4, 42, 89, 105, 73, 129, 169, 162, 18, 106, 82, 152, 16, 150, 149, 134, 100, 101, 69, 18, 90, 70, 102, 102, 90, 68, 84, 74, 37, 154, 106, 149, 153, 73, 37, 86, 134, 66, 160, 134, 166, 128, 17, 160, 18, 104, 165, 169, 144, 106, 164, 68, 70, 153, 89, 145, 144, 138, 72, 42, 145, 102, 136, 96, 170, 154, 74, 24, 21, 20, 2, 16, 89, 145, 38, 136, 168, 162, 164, 73, 98, 70, 133, 170, 24, 72, 69, 20, 73, 70, 165, 8, 86, 152, 84, 9, 32, 4, 152, 166, 33, 165, 101, 150, 69, 136, 36, 17, 6, 74, 84, 41, 129, 9, 6, 104, 101, 10, 42, 101, 2, 149, 88, 146, 26, 161, 164, 169, 20, 86, 102, 34, 36, 84, 153, 150},
    {154, 168, 170, 100, 74, 5, 86, 81, 166, 41, 65, 153, 21, 169, 86, 165, 68, 6, 32, 16, 26, 145, 65, 36, 106, 68, 69, 90, 102, 149, 165, 41, 84, 96, 97, 22, 106, 105, 146, 153, 84, 166, 33, 70, 132, 73, 97, 26, 138, 149, 84, 64, 25, 149, 161, 8, 134, 152, 149, 42, 170, 105, 138, 85, 40, 41, 165, 170, 38, 6, 72, 40, 149, 74, 18, 153, 100, 42, 169, 90, 42, 153, 102, 22, 25, 101, 37, 162, 17, 132, 101, 21, 90, 37, 8, 68, 5, 38, 89, 165, 164, 70, 90, 36, 150, 101, 136, 102, 100, 33, 164, 149, 64, 34, 24, 154, 138, 97, 26, 84, 21, 74, 169, 73, 36, 41, 169, 42, 170, 160, 149, 81, 130, 89, 22, 166, 98, 85, 88, 85, 32, 68, 153, 169, 106, 2, 128, 149, 154, 89, 138, 97, 160, 162, 36, 102, 146, 22, 101, 165, 102, 85, 84, 137, 105, 66, 129, 70, 134, 166, 22, 69, 69, 100, 89, 65, 25, 164, 74, 90, 168, 41, 85, 72, 86, 101, 169, 145, 148, 136, 98, 85, 69, 148, 166, 154, 36, 149, 25, 165, 34, 90, 161, 144, 66, 104, 149, 64, 85, 90, 137, 41, 166, 38, 105, 152, 38, 165, 88, 102, 1, 41, 169, 102, 4, 21, 164, 150, 74, 70, 148, 64, 74, 96, 9, 101, 100, 40, 146, 146, 136, 100, 25, 129, 162, 84, 70, 86, 146, 150, 10, 136, 166, 138, 17, 5, 80, 69, 4, 154, 105, 169, 33, 161, 161, 73, 24, 137, 101, 98, 4, 69, 154, 105, 168, 154, 132, 17, 153, 69, 34, 10, 90, 166, 153, 96, 170, 168, 69, 137, 42, 38, 97, 89, 137, 88, 66, 106, 72, 169, 146, 21, 32, 148, 41, 134, 40, 22, 4, 42, 102, 22, 20, 104, 26, 64, 5, 97, 36, 41, 150, 20, 89, 100, 84, 136, 136, 133, 169, 98, 65, 22, 162, 97, 2, 72, 69, 25, 5, 102, 138, 104, 40, 8, 37, 37, 20, 17, 33, 72, 82, 134, 101, 102, 153, 146, 85, 160, 100, 24, 160, 10, 97, 169, 136, 18, 136, 129, 4, 41, 129, 161, 160, 22, 20, 162, 149, 98, 6, 100, 152, 144, 33, 162},
    {169, 130, 37, 82, 130, 86, 146, 72, 148, 145, 101, 80, 90, 97, 106, 160, 90, 86, 21, 101, 89, 86, 145, 88, 101, 166, 69, 68, 84, 81, 42, 17, 89, 96, 137, 96, 130, 37, 166, 101, 86, 2, 146, 168, 85, 74, 150, 68, 105, 146, 98, 96, 98, 97, 96, 38, 20, 150, 10, 102, 81, 66, 74, 100, 25, 85, 89, 90, 69, 136, 98, 42, 33, 133, 2, 100, 42, 104, 100, 10, 166, 96, 165, 68, 154, 70, 6, 152, 8, 106, 105, 80, 170, 138, 152, 85, 152, 164, 104, 137, 105, 101, 40, 0, 104, 169, 136, 148, 6, 25, 38, 168, 69, 145, 102, 168, 150, 154, 42, 88, 145, 10, 72, 106, 152, 138, 9, 34, 88, 9, 8, 41, 153, 42, 8, 128, 41, 145, 86, 153, 153, 146, 128, 170, 80, 166, 22, 81, 21, 98, 161, 18, 146, 104, 20, 145, 149, 5, 164, 33, 82, 165, 164, 20, 86, 134, 162, 5, 150, 97, 70, 164, 90, 90, 134, 106, 10, 10, 22, 88, 170, 137, 152, 33, 128, 82, 150, 26, 134, 150, 149, 66, 129, 86, 37, 89, 149, 148, 70, 25, 1, 96, 97, 18, 81, 84, 98, 154, 102, 25, 137, 162, 90, 166, 33, 96, 129, 88, 170, 72, 165, 133, 154, 170, 170, 153, 90, 104, 32, 74, 149, 104, 65, 36, 149, 90, 70, 10, 136, 162, 165, 161, 24, 1, 146, 70, 84, 137, 18, 38, 153, 166, 0, 32, 166, 86, 41, 150, 72, 97, 161, 38, 80, 36, 134, 65, 90, 6, 96, 154, 22, 105, 133, 150, 165, 136, 84, 104, 86, 146, 6, 101, 10, 150, 137, 36, 104, 144, 138, 8, 81, 26, 161, 133, 145, 153, 6, 106, 154, 21, 82, 0, 34, 149, 86, 65, 2, 36, 32, 34, 152, 138, 133, 74, 102, 106, 42, 150, 5, 128, 128, 2, 152, 97, 148, 137, 169, 134, 80, 72, 40, 42, 22, 26, 85, 81, 17, 5, 104, 170, 66, 84, 148, 2, 162, 169, 138, 154, 38, 8, 100, 64, 21, 69, 144, 89, 89, 73, 84, 4, 90, 20, 101, 73, 101, 66, 86, 69, 169, 2, 72, 25, 160, 153, 85, 2, 146, 102, 152, 22, 137, 24, 86, 68},
    {144, 84, 80, 85, 88, 73, 89, 6, 132, 166, 149, 134, 22, 168, 162, 74, 148, 5, 104, 98, 160, 153, 80, 20, 85, 160, 6, 106, 72, 148, 2, 5, 148, 89, 69, 144, 69, 132, 137, 104, 38, 137, 5, 8, 145, 90, 82, 73, 129, 105, 8, 34, 105, 21, 37, 42, 88, 138, 9, 169, 42, 18, 89, 86, 96, 166, 32, 37, 70, 145, 37, 148, 1, 129, 169, 18, 65, 22, 102, 162, 86, 26, 104, 105, 9, 17, 9, 65, 146, 0, 33, 5, 86, 16, 70, 73, 106, 2, 90, 96, 161, 145, 154, 20, 84, 85, 5, 26, 26, 150, 89, 24, 40, 169, 134, 101, 160, 130, 154, 69, 1, 72, 88, 169, 168, 65, 138, 106, 74, 153, 37, 137, 6, 149, 153, 17, 86, 9, 150, 37, 72, 73, 149, 170, 42, 106, 101, 150, 160, 164, 150, 169, 169, 70, 137, 165, 36, 154, 85, 97, 104, 10, 8, 164, 21, 1, 165, 170, 153, 154, 105, 130, 161, 10, 90, 0, 154, 144, 168, 166, 90, 85, 81, 88, 105, 166, 89, 22, 96, 26, 72, 96, 37, 154, 65, 33, 1, 133, 149, 154, 80, 89, 80, 96, 33, 170, 1, 5, 86, 137, 149, 106, 100, 65, 101, 134, 105, 145, 33, 82, 134, 138, 160, 72, 169, 85, 81, 144, 132, 154, 165, 105, 101, 169, 33, 133, 2, 150, 22, 84, 101, 106, 25, 24, 25, 144, 168, 129, 134, 161, 26, 8, 138, 106, 134, 152, 17, 97, 145, 89, 36, 166, 166, 104, 160, 137, 74, 33, 82, 170, 138, 34, 152, 64, 21, 37, 6, 164, 149, 152, 37, 132, 165, 161, 129, 144, 134, 150, 18, 4, 152, 9, 101, 69, 100, 89, 133, 18, 128, 96, 168, 100, 160, 106, 86, 38, 102, 9, 4, 165, 149, 86, 97, 42, 128, 1, 165, 137, 73, 22, 100, 69, 42, 20, 82, 4, 145, 88, 132, 97, 100, 69, 154, 144, 106, 90, 90, 101, 85, 5, 82, 170, 88, 137, 74, 90, 138, 34, 40, 133, 136, 16, 134, 20, 106, 154, 100, 1, 97, 40, 86, 168, 134, 101, 85, 145, 160, 73, 9, 101, 164, 70, 97, 129, 69, 144, 21, 169, 68, 132, 85, 148, 41, 81},
    {24, 20, 97, 89, 97, 86, 170, 154, 146, 1, 152, 26, 4, 81, 148, 37, 81, 134, 41, 8, 74, 164, 150, 162, 66, 150, 21, 129, 128, 41, 161, 161, 148, 82, 42, 161, 5, 40, 100, 106, 138, 90, 96, 88, 1, 65, 34, 74, 8, 160, 26, 97, 82, 153, 25, 89, 41, 132, 26, 10, 74, 0, 101, 97, 153, 105, 66, 102, 5, 169, 168, 145, 74, 82, 74, 68, 25, 37, 152, 80, 132, 84, 170, 136, 81, 148, 138, 152, 101, 101, 166, 5, 102, 169, 40, 133, 170, 146, 65, 8, 34, 97, 73, 1, 148, 137, 26, 89, 0, 86, 96, 137, 106, 166, 38, 42, 165, 25, 89, 137, 106, 144, 168, 169, 66, 86, 168, 9, 133, 38, 145, 22, 162, 86, 164, 129, 88, 104, 106, 166, 0, 32, 37, 37, 85, 81, 38, 88, 128, 26, 25, 106, 65, 152, 98, 102, 104, 86, 96, 154, 145, 21, 152, 37, 73, 33, 148, 137, 145, 41, 84, 26, 10, 149, 36, 169, 88, 146, 134, 72, 145, 166, 88, 106, 89, 164, 101, 154, 100, 1, 149, 101, 101, 105, 146, 74, 129, 136, 129, 16, 150, 85, 146, 2, 136, 105, 169, 68, 166, 146, 21, 5, 25, 21, 81, 130, 26, 152, 149, 149, 129, 104, 136, 33, 161, 5, 130, 106, 74, 22, 166, 90, 9, 154, 102, 0, 82, 8, 1, 162, 86, 145, 97, 85, 129, 102, 89, 128, 165, 96, 160, 169, 90, 170, 105, 42, 64, 138, 137, 101, 18, 10, 26, 20, 160, 10, 72, 26, 22, 97, 105, 106, 154, 81, 148, 165, 149, 165, 21, 165, 2, 101, 146, 69, 170, 70, 97, 136, 169, 165, 100, 17, 41, 106, 42, 100, 149, 102, 136, 105, 6, 144, 36, 105, 88, 105, 134, 64, 32, 168, 106, 97, 134, 145, 106, 168, 165, 128, 81, 84, 64, 96, 81, 153, 137, 36, 74, 134, 166, 161, 153, 85, 102, 73, 10, 36, 133, 164, 84, 105, 85, 5, 82, 17, 42, 150, 146, 168, 129, 36, 86, 37, 8, 25, 24, 20, 150, 85, 18, 40, 1, 16, 169, 66, 96, 133, 101, 104, 145, 74, 97, 148, 73, 81, 82, 130, 154, 98, 40, 102, 72, 32, 101, 98},
    {134, 37, 68, 16, 133, 152, 1, 26, 38, 133, 84, 170, 168, 102, 98, 105, 22, 22, 130, 134, 64, 85, 72, 152, 86, 90, 4, 162, 106, 161, 64, 86, 164, 88, 144, 152, 153, 97, 85, 74, 84, 84, 98, 36, 101, 86, 101, 98, 10, 101, 89, 96, 165, 69, 17, 20, 170, 138, 101, 73, 100, 137, 144, 154, 164, 144, 154, 104, 161, 72, 102, 80, 25, 165, 165, 133, 0, 166, 136, 21, 85, 70, 33, 84, 37, 133, 84, 129, 152, 153, 9, 18, 152, 144, 89, 41, 168, 74, 130, 149, 84, 85, 102, 136, 138, 129, 160, 25, 162, 65, 38, 166, 16, 10, 22, 152, 154, 69, 1, 169, 66, 41, 168, 100, 90, 74, 148, 42, 37, 69, 149, 97, 160, 102, 85, 25, 4, 133, 40, 40, 37, 145, 69, 72, 105, 150, 166, 154, 101, 65, 146, 26, 36, 70, 134, 34, 6, 149, 105, 21, 73, 149, 106, 4, 90, 36, 64, 25, 36, 168, 33, 73, 89, 100, 102, 22, 96, 102, 170, 104, 89, 40, 69, 2, 20, 102, 85, 2, 105, 17, 102, 69, 66, 130, 24, 165, 168, 38, 105, 64, 153, 150, 133, 82, 149, 162, 150, 18, 34, 89, 21, 18, 10, 169, 90, 128, 138, 146, 148, 18, 82, 41, 150, 18, 86, 32, 101, 18, 65, 144, 70, 84, 20, 85, 21, 105, 88, 149, 152, 164, 160, 20, 134, 170, 149, 38, 101, 8, 41, 84, 170, 84, 106, 97, 81, 145, 96, 169, 70, 33, 72, 80, 81, 73, 37, 40, 10, 8, 9, 0, 69, 34, 104, 21, 165, 105, 41, 86, 129, 96, 90, 154, 73, 106, 65, 134, 17, 18, 89, 65, 144, 153, 41, 5, 25, 153, 106, 16, 153, 149, 25, 98, 1, 137, 26, 85, 9, 41, 0, 96, 154, 130, 98, 165, 8, 65, 69, 153, 134, 144, 149, 84, 34, 6, 100, 148, 32, 69, 40, 152, 148, 128, 89, 26, 2, 128, 42, 170, 149, 161, 72, 166, 169, 130, 138, 85, 98, 9, 101, 66, 40, 96, 20, 86, 88, 6, 154, 133, 22, 169, 148, 166, 106, 81, 0, 20, 134, 82, 34, 86, 17, 37, 97, 86, 0, 161, 154, 134, 170, 130, 160, 100, 153, 89},
    {21, 136, 26, 9, 36, 97, 137, 149, 6, 89, 0, 4, 146, 160, 89, 22, 72, 153, 85, 102, 105, 38, 36, 169, 102, 86, 168, 34, 41, 10, 161, 37, 137, 134, 22, 162, 73, 150, 40, 150, 80, 72, 74, 74, 41, 166, 84, 106, 36, 97, 25, 97, 41, 168, 165, 154, 68, 4, 133, 137, 40, 40, 86, 129, 22, 85, 89, 166, 65, 146, 38, 169, 73, 101, 32, 153, 25, 136, 36, 146, 16, 65, 100, 150, 97, 136, 133, 89, 128, 88, 148, 128, 33, 66, 133, 89, 98, 38, 85, 24, 4, 149, 82, 66, 18, 165, 82, 153, 161, 97, 17, 21, 168, 88, 89, 42, 102, 136, 104, 146, 165, 41, 129, 145, 133, 98, 166, 102, 10, 150, 69, 170, 138, 89, 74, 165, 86, 137, 154, 69, 73, 85, 149, 64, 162, 20, 73, 4, 152, 154, 69, 33, 150, 105, 5, 65, 82, 165, 169, 146, 73, 132, 41, 166, 106, 97, 145, 136, 70, 84, 152, 149, 98, 152, 134, 98, 38, 73, 74, 25, 89, 102, 169, 164, 6, 74, 33, 89, 145, 168, 81, 22, 154, 36, 37, 90, 153, 65, 33, 74, 134, 81, 16, 70, 25, 104, 160, 148, 161, 5, 6, 81, 64, 41, 102, 169, 138, 102, 85, 69, 148, 25, 6, 133, 160, 90, 66, 161, 146, 161, 10, 170, 146, 70, 168, 42, 102, 82, 4, 105, 129, 150, 25, 37, 133, 104, 168, 169, 34, 101, 133, 170, 105, 74, 98, 153, 154, 90, 68, 129, 89, 89, 100, 32, 86, 22, 149, 161, 85, 132, 153, 160, 97, 25, 74, 152, 84, 72, 105, 101, 169, 85, 69, 144, 26, 154, 38, 88, 0, 70, 164, 129, 169, 73, 104, 150, 89, 36, 102, 69, 70, 32, 101, 153, 162, 10, 98, 146, 69, 66, 33, 86, 16, 150, 89, 154, 169, 65, 86, 36, 100, 169, 86, 148, 73, 154, 97, 22, 105, 102, 86, 2, 5, 134, 68, 170, 154, 68, 149, 25, 149, 166, 129, 162, 9, 160, 133, 4, 21, 80, 144, 162, 41, 137, 133, 84, 34, 42, 146, 132, 162, 38, 33, 97, 72, 74, 152, 72, 148, 148, 26, 33, 98, 25, 165, 170, 138, 134, 168, 96, 149, 129, 65, 82},
    {0, 38, 40, 26, 72, 18, 149, 101, 74, 88, 80, 98, 134, 86, 149, 138, 152, 17, 154, 102, 6, 100, 85, 8, 169, 5, 9, 85, 84, 98, 40, 90, 10, 102, 100, 101, 70, 70, 164, 86, 32, 128, 106, 38, 98, 68, 74, 133, 26, 74, 17, 170, 102, 38, 66, 70, 73, 161, 148, 37, 130, 101, 68, 96, 70, 168, 148, 21, 134, 148, 18, 85, 144, 148, 25, 98, 8, 166, 170, 166, 170, 150, 37, 37, 9, 154, 100, 136, 10, 166, 73, 82, 170, 166, 169, 149, 154, 168, 80, 134, 38, 101, 153, 20, 100, 25, 153, 72, 18, 80, 169, 41, 25, 34, 25, 66, 38, 40, 98, 74, 25, 152, 16, 82, 20, 21, 70, 70, 164, 166, 5, 100, 10, 1, 97, 22, 145, 102, 168, 146, 8, 170, 133, 129, 153, 89, 86, 84, 152, 102, 9, 64, 148, 86, 169, 24, 85, 98, 105, 170, 89, 68, 150, 80, 33, 153, 100, 18, 162, 168, 170, 101, 4, 170, 164, 160, 153, 37, 152, 26, 86, 101, 133, 169, 101, 166, 70, 146, 153, 134, 98, 102, 153, 22, 134, 82, 81, 41, 136, 100, 33, 153, 97, 144, 149, 89, 166, 84, 10, 104, 70, 146, 106, 1, 4, 84, 41, 40, 170, 149, 8, 74, 38, 20, 164, 8, 74, 22, 10, 169, 9, 37, 106, 98, 164, 144, 169, 130, 136, 80, 9, 166, 138, 80, 149, 16, 150, 101, 41, 133, 37, 40, 154, 129, 106, 34, 129, 106, 36, 1, 128, 86, 145, 2, 69, 9, 41, 166, 144, 21, 85, 153, 38, 41, 40, 21, 153, 68, 86, 34, 88, 162, 149, 165, 148, 134, 88, 72, 74, 166, 106, 85, 34, 2, 160, 9, 68, 106, 98, 138, 153, 80, 84, 133, 133, 65, 89, 21, 137, 42, 24, 137, 101, 102, 96, 170, 89, 40, 5, 70, 41, 161, 65, 104, 8, 4, 102, 102, 25, 170, 104, 100, 150, 90, 72, 170, 17, 36, 145, 98, 84, 72, 168, 20, 169, 32, 98, 26, 104, 160, 102, 82, 5, 134, 154, 154, 84, 68, 145, 16, 16, 68, 6, 26, 166, 36, 34, 64, 161, 85, 32, 74, 96, 137, 153, 41, 150, 162, 17, 42, 73, 166, 148, 68},
    {37, 102, 106, 85, 85, 37, 130, 90, 150, 84, 132, 154, 73, 40, 170, 89, 10, 169, 5, 145, 101, 64, 88, 144, 152, 98, 150, 146, 86, 85, 170, 81, 40, 145, 38, 128, 26, 84, 86, 164, 150, 153, 144, 98, 90, 42, 80, 150, 72, 85, 148, 37, 85, 98, 37, 65, 165, 18, 169, 129, 40, 21, 65, 152, 33, 152, 96, 148, 138, 74, 148, 154, 101, 85, 20, 100, 133, 149, 26, 162, 70, 10, 136, 86, 149, 22, 166, 0, 137, 134, 8, 74, 84, 25, 98, 130, 145, 161, 40, 86, 74, 81, 164, 132, 101, 146, 17, 138, 170, 70, 5, 138, 25, 106, 153, 36, 134, 150, 166, 86, 98, 41, 6, 22, 64, 137, 97, 85, 41, 38, 89, 168, 165, 102, 26, 26, 138, 70, 89, 5, 130, 148, 26, 128, 18, 164, 104, 133, 88, 25, 166, 152, 169, 134, 146, 104, 138, 148, 70, 153, 160, 22, 20, 86, 74, 89, 90, 98, 106, 10, 104, 169, 150, 165, 20, 136, 137, 89, 96, 169, 168, 166, 134, 81, 164, 154, 89, 42, 162, 74, 8, 82, 65, 65, 37, 128, 2, 10, 66, 98, 150, 85, 133, 170, 168, 2, 38, 69, 104, 73, 100, 34, 69, 22, 102, 26, 162, 168, 101, 137, 16, 1, 160, 70, 90, 10, 136, 166, 133, 149, 168, 152, 70, 16, 26, 96, 149, 86, 85, 5, 21, 86, 0, 26, 65, 86, 138, 4, 90, 98, 145, 100, 130, 165, 66, 86, 164, 148, 34, 169, 136, 8, 40, 161, 152, 105, 69, 105, 6, 2, 89, 37, 40, 152, 154, 89, 74, 154, 5, 150, 72, 96, 90, 33, 9, 84, 132, 17, 96, 5, 9, 85, 86, 154, 21, 98, 26, 161, 129, 42, 64, 161, 65, 9, 162, 161, 68, 168, 161, 70, 81, 169, 64, 80, 154, 72, 146, 169, 154, 64, 21, 68, 74, 160, 22, 70, 69, 101, 146, 168, 164, 41, 16, 20, 101, 73, 105, 38, 101, 72, 73, 145, 21, 88, 164, 66, 90, 128, 166, 105, 18, 26, 153, 153, 104, 133, 81, 134, 97, 24, 150, 105, 148, 68, 64, 73, 26, 153, 1, 148, 74, 84, 74, 5, 148, 90, 81, 106, 129, 21, 86, 72, 169, 36},
    {70, 97, 17, 6, 38, 65, 153, 25, 169, 84, 154, 82, 168, 5, 149, 106, 85, 86, 146, 168, 42, 25, 169, 4, 166, 26, 21, 97, 8, 26, 98, 10, 89, 22, 40, 105, 154, 152, 154, 34, 129, 86, 137, 164, 133, 169, 152, 6, 16, 138, 82, 106, 41, 146, 133, 134, 82, 74, 154, 129, 70, 73, 169, 168, 150, 88, 80, 161, 149, 42, 40, 162, 154, 144, 145, 66, 133, 150, 25, 42, 82, 90, 132, 146, 81, 81, 18, 10, 128, 32, 90, 106, 154, 169, 149, 38, 146, 1, 101, 161, 89, 101, 69, 34, 18, 102, 85, 42, 162, 41, 74, 144, 90, 145, 22, 84, 97, 101, 42, 105, 72, 144, 146, 162, 85, 132, 165, 73, 161, 89, 25, 1, 73, 90, 149, 169, 97, 98, 97, 37, 168, 105, 85, 64, 88, 136, 137, 85, 165, 68, 101, 164, 42, 98, 106, 36, 146, 132, 37, 42, 64, 161, 37, 10, 17, 6, 101, 105, 104, 168, 21, 98, 88, 166, 86, 153, 145, 133, 166, 132, 16, 42, 86, 24, 101, 128, 20, 65, 105, 145, 150, 129, 90, 70, 25, 160, 24, 166, 97, 137, 2, 137, 165, 65, 149, 84, 1, 133, 33, 73, 144, 34, 102, 165, 102, 149, 41, 166, 40, 148, 69, 166, 69, 101, 145, 74, 38, 64, 97, 148, 89, 161, 33, 170, 1, 74, 36, 89, 17, 133, 129, 133, 162, 132, 70, 137, 40, 90, 86, 130, 101, 25, 154, 6, 33, 9, 1, 170, 165, 152, 129, 20, 68, 73, 37, 26, 40, 16, 102, 72, 98, 100, 86, 70, 149, 1, 20, 25, 80, 161, 0, 154, 73, 69, 100, 16, 80, 84, 97, 2, 146, 37, 18, 161, 86, 150, 165, 6, 8, 26, 170, 170, 133, 136, 96, 145, 136, 96, 2, 106, 26, 106, 146, 32, 145, 17, 6, 81, 134, 134, 101, 20, 2, 18, 22, 133, 101, 36, 104, 104, 73, 133, 138, 72, 17, 98, 90, 33, 42, 5, 132, 97, 26, 134, 88, 101, 70, 106, 25, 81, 160, 72, 85, 160, 24, 130, 38, 74, 26, 166, 40, 152, 24, 21, 69, 73, 80, 89, 70, 82, 22, 1, 130, 41, 164, 96, 154, 84, 25, 138, 32, 128, 24, 90},
    {42, 89, 42, 33, 101, 81, 105, 130, 42, 150, 90, 138, 85, 150, 20, 102, 149, 166, 73, 98, 149, 97, 148, 165, 26, 144, 133, 84, 134, 4, 37, 69, 88, 70, 74, 42, 100, 105, 68, 106, 106, 25, 66, 150, 81, 89, 10, 70, 64, 98, 42, 166, 34, 33, 149, 41, 22, 85, 170, 153, 136, 162, 137, 154, 136, 169, 18, 97, 101, 160, 144, 82, 72, 89, 134, 161, 32, 104, 38, 89, 165, 148, 105, 70, 26, 88, 33, 89, 169, 41, 104, 148, 101, 168, 10, 68, 150, 16, 18, 84, 169, 81, 26, 154, 9, 152, 98, 145, 85, 146, 42, 89, 20, 82, 169, 42, 85, 5, 90, 162, 152, 168, 165, 145, 65, 106, 149, 146, 85, 69, 144, 1, 32, 6, 73, 96, 86, 144, 21, 2, 105, 37, 169, 136, 38, 145, 164, 41, 102, 21, 149, 168, 149, 105, 38, 69, 97, 134, 1, 89, 106, 18, 69, 88, 169, 148, 40, 40, 42, 153, 166, 66, 70, 170, 70, 85, 85, 128, 0, 162, 9, 138, 85, 149, 41, 68, 88, 42, 90, 150, 41, 166, 148, 134, 146, 150, 26, 98, 86, 96, 36, 165, 162, 34, 97, 42, 89, 166, 170, 165, 153, 64, 26, 18, 106, 20, 10, 101, 128, 130, 34, 26, 136, 146, 134, 40, 74, 84, 133, 38, 146, 89, 24, 69, 88, 165, 73, 104, 137, 105, 5, 82, 133, 86, 22, 84, 136, 149, 69, 66, 133, 153, 154, 41, 150, 10, 149, 154, 97, 153, 89, 166, 102, 169, 82, 153, 138, 6, 26, 22, 64, 162, 98, 18, 82, 42, 106, 90, 26, 10, 165, 37, 105, 102, 165, 22, 86, 134, 41, 69, 101, 25, 0, 130, 101, 133, 68, 136, 64, 25, 34, 42, 85, 8, 170, 146, 134, 4, 100, 86, 80, 41, 137, 34, 106, 149, 21, 70, 81, 20, 21, 166, 22, 170, 38, 90, 73, 153, 80, 96, 86, 69, 149, 129, 42, 134, 41, 137, 64, 101, 130, 88, 105, 8, 42, 21, 25, 10, 164, 18, 133, 22, 81, 33, 150, 161, 72, 42, 2, 8, 148, 8, 22, 70, 154, 102, 36, 85, 85, 146, 68, 106, 96, 16, 86, 164, 145, 105, 148, 128, 86, 137, 138, 133},
    {65, 74, 84, 72, 22, 84, 101, 82, 134, 89, 81, 69, 148, 70, 148, 164, 69, 69, 168, 154, 104, 33, 168, 34, 150, 138, 149, 166, 96, 136, 42, 166, 42, 134, 168, 166, 68, 145, 145, 8, 5, 100, 24, 149, 166, 18, 82, 160, 89, 134, 65, 88, 5, 152, 42, 10, 26, 25, 96, 170, 32, 88, 134, 21, 84, 150, 69, 1, 133, 102, 73, 24, 18, 169, 97, 34, 38, 34, 37, 138, 101, 101, 105, 166, 165, 102, 42, 102, 24, 81, 22, 97, 74, 150, 36, 166, 1, 161, 85, 166, 149, 41, 146, 153, 170, 90, 6, 68, 82, 82, 90, 66, 130, 166, 74, 136, 166, 105, 170, 81, 40, 150, 22, 25, 38, 149, 88, 26, 134, 41, 65, 20, 26, 42, 102, 105, 66, 166, 166, 105, 89, 2, 100, 26, 145, 170, 104, 101, 26, 36, 34, 170, 36, 148, 84, 10, 144, 149, 8, 168, 106, 134, 153, 149, 6, 66, 25, 38, 129, 4, 165, 162, 161, 101, 90, 105, 101, 66, 89, 81, 37, 165, 150, 20, 105, 162, 9, 86, 70, 154, 2, 9, 152, 70, 149, 154, 38, 64, 136, 164, 22, 84, 169, 145, 9, 34, 85, 2, 152, 152, 128, 90, 85, 10, 104, 98, 90, 152, 81, 133, 38, 101, 150, 145, 9, 86, 162, 132, 138, 88, 34, 106, 162, 18, 162, 21, 85, 4, 106, 165, 33, 73, 82, 106, 104, 42, 84, 86, 86, 134, 106, 86, 154, 6, 150, 105, 153, 133, 84, 137, 9, 152, 89, 168, 96, 105, 97, 96, 64, 84, 154, 166, 166, 165, 168, 66, 4, 169, 84, 66, 34, 162, 18, 18, 40, 73, 169, 170, 90, 136, 1, 20, 9, 85, 40, 134, 1, 34, 154, 4, 148, 105, 16, 20, 72, 132, 166, 170, 96, 89, 64, 22, 66, 149, 86, 36, 161, 17, 22, 8, 2, 97, 37, 80, 153, 104, 162, 1, 36, 84, 136, 5, 5, 84, 106, 146, 64, 100, 10, 41, 38, 102, 164, 18, 10, 74, 82, 2, 5, 104, 73, 150, 74, 85, 4, 138, 146, 40, 90, 6, 166, 26, 101, 106, 37, 74, 25, 5, 68, 98, 101, 26, 145, 153, 2, 146, 149, 5, 101, 102, 36, 148, 153, 129},
    {97, 160, 85, 65, 4, 106, 82, 37, 144, 146, 102, 98, 85, 42, 166, 165, 106, 21, 170, 86, 164, 154, 25, 42, 97, 150, 72, 1, 153, 129, 165, 68, 32, 86, 144, 168, 17, 25, 10, 41, 105, 9, 10, 82, 153, 105, 36, 138, 40, 153, 154, 133, 86, 145, 64, 86, 164, 17, 168, 66, 169, 146, 22, 137, 20, 145, 90, 82, 17, 146, 170, 149, 90, 6, 150, 36, 165, 134, 152, 106, 136, 32, 105, 81, 130, 97, 129, 128, 16, 85, 81, 133, 88, 73, 85, 145, 165, 148, 17, 86, 129, 65, 101, 150, 130, 73, 80, 21, 5, 85, 106, 42, 85, 73, 161, 86, 138, 138, 170, 1, 154, 170, 69, 18, 68, 154, 97, 5, 137, 136, 164, 170, 89, 96, 37, 4, 18, 160, 24, 98, 97, 22, 149, 106, 136, 82, 17, 5, 38, 73, 5, 165, 106, 105, 24, 69, 106, 70, 66, 102, 101, 149, 66, 169, 101, 86, 84, 169, 86, 162, 96, 41, 37, 164, 20, 98, 138, 21, 100, 170, 160, 2, 101, 104, 40, 98, 152, 104, 166, 22, 165, 169, 106, 160, 18, 153, 73, 98, 36, 70, 150, 68, 34, 138, 165, 129, 73, 6, 153, 22, 138, 138, 25, 170, 64, 168, 68, 106, 154, 152, 164, 22, 88, 137, 162, 161, 18, 100, 90, 102, 18, 133, 21, 84, 6, 65, 84, 106, 70, 168, 8, 165, 8, 40, 21, 100, 24, 1, 42, 130, 169, 133, 90, 88, 170, 154, 97, 145, 37, 165, 64, 33, 86, 6, 145, 73, 130, 104, 1, 137, 102, 1, 40, 90, 8, 166, 85, 168, 170, 26, 34, 90, 82, 137, 105, 98, 154, 105, 138, 160, 106, 102, 85, 152, 6, 102, 88, 6, 4, 104, 149, 68, 81, 21, 8, 89, 164, 165, 129, 42, 41, 104, 70, 129, 86, 162, 100, 1, 41, 90, 64, 88, 166, 164, 130, 2, 154, 166, 128, 170, 106, 66, 9, 33, 21, 22, 164, 170, 69, 148, 166, 100, 98, 34, 16, 98, 72, 85, 69, 100, 153, 40, 37, 80, 38, 21, 6, 6, 69, 32, 4, 84, 9, 144, 40, 152, 133, 81, 69, 168, 69, 70, 88, 0, 102, 22, 105, 89, 10, 100, 89, 104, 88, 40},
    {82, 104, 144, 89, 72, 170, 100, 104, 6, 168, 81, 36, 96, 153, 69, 74, 90, 106, 100, 149, 98, 105, 4, 89, 17, 104, 169, 160, 70, 25, 144, 164, 154, 136, 162, 150, 98, 69, 152, 168, 162, 21, 98, 105, 133, 154, 64, 21, 8, 134, 10, 169, 90, 169, 165, 144, 137, 40, 21, 97, 138, 146, 80, 144, 85, 162, 25, 101, 148, 150, 170, 136, 98, 166, 169, 74, 129, 82, 152, 24, 32, 170, 41, 138, 18, 82, 41, 128, 170, 98, 132, 4, 150, 84, 84, 42, 89, 36, 170, 106, 169, 150, 154, 85, 73, 144, 86, 101, 153, 138, 84, 152, 149, 18, 8, 18, 133, 72, 26, 96, 9, 161, 10, 161, 69, 165, 98, 20, 145, 37, 168, 90, 26, 66, 73, 42, 64, 73, 150, 168, 85, 165, 90, 86, 8, 104, 149, 137, 168, 69, 37, 17, 144, 150, 169, 86, 106, 105, 134, 101, 154, 40, 153, 133, 25, 98, 89, 8, 169, 85, 102, 102, 130, 26, 42, 24, 104, 104, 21, 65, 82, 150, 82, 85, 41, 81, 41, 85, 37, 168, 74, 162, 34, 37, 89, 149, 26, 102, 105, 101, 17, 2, 25, 32, 165, 96, 165, 20, 38, 73, 152, 37, 80, 86, 150, 169, 137, 146, 22, 74, 101, 42, 22, 20, 134, 146, 18, 169, 33, 160, 40, 101, 97, 168, 88, 148, 88, 169, 97, 105, 150, 162, 144, 146, 169, 169, 9, 105, 170, 161, 169, 85, 73, 86, 81, 38, 85, 98, 164, 73, 153, 149, 148, 21, 21, 150, 69, 22, 82, 105, 104, 82, 0, 133, 18, 165, 90, 128, 104, 85, 133, 85, 150, 154, 153, 166, 33, 21, 101, 26, 148, 17, 165, 101, 5, 166, 104, 81, 128, 165, 160, 165, 33, 164, 70, 4, 64, 64, 101, 102, 168, 90, 101, 18, 162, 97, 165, 36, 4, 4, 40, 26, 104, 17, 164, 90, 85, 6, 72, 166, 101, 130, 146, 104, 162, 82, 2, 150, 73, 74, 0, 89, 40, 18, 148, 101, 164, 1, 152, 145, 22, 40, 162, 20, 10, 84, 90, 90, 152, 26, 10, 97, 148, 82, 133, 137, 148, 153, 21, 38, 89, 101, 102, 90, 145, 82, 70, 88, 161, 96, 100, 101, 88, 82},
    {80, 41, 21, 166, 42, 150, 134, 9, 154, 6, 101, 133, 40, 165, 149, 38, 150, 104, 154, 130, 128, 168, 25, 102, 149, 145, 36, 80, 104, 6, 73, 170, 129, 21, 149, 80, 144, 6, 82, 130, 18, 150, 34, 129, 130, 2, 146, 18, 25, 65, 98, 86, 82, 81, 40, 102, 138, 152, 144, 26, 10, 85, 70, 162, 1, 145, 134, 82, 26, 24, 145, 98, 9, 10, 36, 85, 86, 166, 102, 149, 84, 38, 98, 149, 98, 89, 104, 162, 129, 2, 153, 41, 22, 170, 0, 4, 150, 150, 137, 41, 74, 153, 88, 145, 86, 146, 34, 153, 84, 153, 154, 5, 42, 72, 85, 69, 169, 137, 166, 69, 21, 70, 168, 160, 69, 154, 170, 166, 154, 32, 73, 86, 165, 88, 6, 9, 154, 145, 89, 153, 98, 18, 152, 104, 132, 106, 6, 148, 82, 153, 150, 150, 86, 106, 149, 130, 98, 170, 102, 85, 170, 74, 96, 33, 166, 41, 170, 132, 137, 164, 101, 137, 74, 21, 154, 74, 96, 153, 144, 10, 73, 74, 153, 104, 90, 24, 149, 166, 24, 90, 70, 148, 32, 74, 9, 89, 162, 166, 2, 170, 150, 74, 153, 154, 16, 86, 149, 85, 138, 86, 165, 106, 168, 164, 154, 160, 68, 82, 96, 149, 169, 164, 137, 106, 168, 161, 18, 104, 101, 168, 97, 153, 134, 88, 169, 170, 104, 162, 18, 102, 148, 129, 89, 72, 138, 80, 86, 168, 154, 73, 150, 69, 73, 149, 84, 161, 21, 168, 90, 148, 21, 70, 162, 102, 88, 10, 66, 42, 133, 105, 106, 98, 130, 66, 22, 69, 16, 130, 130, 166, 165, 166, 145, 73, 152, 22, 42, 72, 42, 4, 8, 8, 25, 86, 146, 161, 66, 34, 26, 82, 70, 154, 97, 128, 69, 170, 9, 37, 2, 66, 130, 164, 34, 133, 149, 150, 146, 10, 138, 160, 89, 145, 0, 85, 74, 89, 129, 21, 152, 73, 97, 65, 80, 21, 148, 132, 164, 165, 9, 86, 34, 89, 70, 65, 42, 153, 24, 36, 150, 165, 90, 96, 138, 66, 149, 97, 10, 20, 96, 104, 17, 65, 21, 146, 18, 82, 68, 90, 154, 136, 136, 85, 10, 20, 18, 132, 25, 73, 65, 129, 137, 90, 66, 101},
    {36, 9, 0, 9, 80, 8, 33, 0, 38, 20, 36, 168, 40, 24, 38, 40, 40, 36, 32, 40, 20, 168, 22, 20, 20, 40, 2, 20, 4, 85, 36, 24, 36, 36, 0, 8, 20, 16, 165, 153, 40, 6, 40, 40, 36, 36, 165, 24, 16, 42, 38, 168, 26, 34, 24, 4, 40, 32, 104, 0, 9, 25, 40, 38, 4, 0, 41, 8, 168, 9, 132, 2, 8, 74, 24, 8, 102, 0, 164, 36, 36, 16, 9, 40, 98, 153, 36, 20, 8, 40, 164, 2, 2, 128, 160, 104, 102, 20, 41, 18, 33, 24, 41, 41, 4, 36, 4, 17, 20, 36, 22, 25, 36, 149, 68, 34, 152, 20, 152, 10, 104, 169, 132, 36, 40, 152, 36, 4, 20, 4, 72, 100, 20, 20, 36, 64, 144, 165, 166, 88, 105, 16, 37, 148, 20, 65, 164, 148, 70, 22, 138, 4, 150, 149, 132, 20, 136, 165, 4, 100, 89, 4, 86, 8, 6, 8, 20, 20, 69, 4, 22, 16, 106, 22, 41, 168, 170, 24, 26, 96, 102, 16, 84, 36, 33, 21, 36, 104, 8, 4, 4, 152, 168, 162, 70, 138, 149, 25, 154, 4, 136, 84, 97, 168, 88, 17, 26, 2, 146, 88, 4, 68, 20, 144, 4, 70, 21, 153, 26, 68, 16, 8, 89, 100, 40, 65, 148, 162, 128, 72, 72, 16, 34, 106, 37, 161, 169, 133, 26, 150, 166, 72, 36, 0, 149, 40, 24, 148, 42, 1, 160, 17, 22, 24, 160, 96, 154, 24, 134, 5, 37, 24, 22, 66, 90, 82, 6, 170, 21, 148, 8, 105, 148, 41, 129, 105, 37, 5, 170, 104, 36, 2, 18, 89, 21, 34, 66, 136, 36, 70, 148, 20, 2, 10, 42, 9, 32, 4, 104, 0, 36, 73, 88, 90, 40, 18, 38, 34, 26, 10, 24, 24, 4, 40, 32, 8, 164, 66, 8, 36, 0, 6, 8, 42, 98, 40, 40, 4, 40, 4, 9, 2, 20, 32, 100, 10, 36, 136, 26, 8, 10, 8, 21, 97, 8, 26, 24, 33, 16, 6, 24, 40, 21, 4, 25, 32, 4, 41, 100, 96, 104, 0, 10, 36, 9, 10, 36, 8, 2, 10, 20, 42, 36, 18, 24, 8, 8, 21, 20, 4, 36, 16, 16, 25},
    {134, 17, 26, 105, 129, 40, 154, 88, 68, 153, 33, 69, 25, 9, 86, 65, 133, 64, 106, 146, 32, 102, 150, 38, 16, 42, 105, 17, 160, 128, 72, 69, 102, 41, 9, 128, 20, 69, 84, 74, 100, 138, 105, 132, 69, 149, 132, 149, 36, 134, 101, 165, 10, 25, 70, 37, 17, 33, 106, 38, 73, 134, 89, 65, 90, 21, 26, 74, 70, 146, 85, 97, 146, 41, 144, 169, 165, 106, 70, 26, 104, 136, 33, 90, 17, 86, 100, 64, 129, 90, 22, 146, 101, 100, 38, 105, 164, 146, 86, 40, 90, 17, 89, 18, 104, 133, 162, 105, 169, 73, 0, 101, 38, 68, 4, 90, 145, 36, 74, 129, 160, 74, 134, 148, 42, 169, 102, 162, 66, 90, 146, 69, 25, 164, 101, 137, 74, 89, 149, 85, 166, 149, 149, 100, 6, 148, 149, 170, 150, 170, 138, 133, 1, 101, 162, 85, 152, 153, 145, 65, 170, 136, 105, 25, 150, 105, 84, 81, 4, 90, 106, 146, 138, 41, 25, 9, 130, 134, 166, 166, 129, 90, 166, 149, 133, 129, 37, 150, 153, 153, 38, 74, 138, 69, 165, 85, 90, 81, 20, 21, 90, 86, 37, 132, 42, 18, 164, 137, 38, 168, 166, 86, 86, 17, 5, 104, 81, 137, 4, 90, 168, 73, 133, 104, 148, 166, 70, 89, 84, 10, 146, 34, 0, 101, 150, 133, 85, 146, 138, 25, 161, 146, 4, 164, 162, 21, 148, 74, 90, 21, 169, 162, 25, 69, 169, 18, 37, 73, 144, 5, 170, 72, 130, 86, 129, 90, 146, 18, 106, 41, 80, 170, 80, 164, 25, 8, 10, 105, 166, 33, 2, 101, 138, 165, 34, 132, 86, 37, 166, 2, 22, 21, 69, 90, 42, 134, 105, 100, 20, 165, 145, 106, 132, 160, 100, 74, 86, 89, 66, 165, 85, 162, 89, 133, 154, 64, 105, 104, 9, 70, 154, 72, 34, 102, 68, 98, 130, 86, 42, 98, 101, 69, 98, 154, 166, 9, 1, 0, 37, 161, 152, 18, 152, 5, 17, 25, 150, 146, 128, 34, 90, 98, 17, 6, 133, 34, 82, 88, 88, 165, 96, 80, 98, 5, 72, 134, 106, 162, 104, 36, 166, 25, 149, 96, 80, 96, 105, 102, 85, 165, 154, 34, 18, 170},
    {36, 134, 161, 20, 104, 42, 4, 41, 100, 105, 170, 69, 2, 132, 165, 104, 86, 162, 134, 22, 154, 74, 138, 6, 145, 134, 20, 170, 136, 33, 133, 74, 37, 150, 134, 102, 6, 85, 98, 100, 148, 6, 4, 146, 168, 168, 74, 36, 72, 20, 33, 164, 148, 102, 38, 21, 160, 97, 154, 17, 64, 25, 153, 25, 42, 90, 22, 153, 41, 26, 25, 89, 97, 32, 24, 38, 25, 41, 68, 25, 96, 106, 136, 82, 98, 70, 169, 149, 98, 22, 164, 150, 144, 17, 85, 88, 100, 102, 82, 90, 6, 84, 32, 73, 98, 74, 89, 153, 72, 65, 38, 6, 137, 85, 170, 169, 154, 9, 20, 101, 1, 138, 150, 137, 161, 81, 136, 106, 169, 134, 9, 166, 66, 165, 136, 138, 42, 86, 98, 134, 102, 90, 90, 21, 170, 152, 34, 84, 20, 160, 169, 106, 105, 162, 9, 154, 105, 97, 170, 132, 38, 74, 129, 100, 8, 81, 25, 20, 22, 137, 154, 102, 133, 149, 104, 24, 22, 153, 146, 10, 162, 149, 65, 89, 90, 165, 165, 41, 148, 154, 37, 150, 144, 170, 106, 168, 85, 25, 17, 73, 170, 161, 34, 70, 162, 145, 154, 154, 170, 41, 154, 128, 70, 88, 88, 96, 38, 144, 138, 66, 84, 86, 4, 154, 169, 40, 98, 150, 166, 38, 38, 102, 97, 41, 74, 90, 102, 146, 129, 165, 128, 102, 41, 84, 89, 133, 137, 74, 8, 145, 168, 154, 160, 106, 74, 150, 4, 73, 84, 128, 85, 164, 84, 133, 101, 85, 102, 134, 105, 133, 150, 106, 2, 37, 89, 165, 86, 145, 148, 89, 96, 25, 1, 21, 41, 130, 0, 138, 152, 2, 106, 154, 145, 152, 166, 40, 73, 81, 4, 102, 102, 17, 104, 9, 153, 5, 166, 4, 149, 8, 85, 6, 10, 105, 166, 160, 36, 10, 161, 132, 133, 146, 169, 64, 150, 148, 101, 104, 152, 100, 145, 136, 154, 25, 65, 96, 168, 169, 106, 161, 105, 104, 40, 64, 65, 130, 96, 80, 72, 106, 132, 37, 41, 80, 161, 168, 25, 16, 149, 88, 80, 16, 70, 84, 42, 81, 73, 72, 138, 20, 134, 9, 129, 36, 9, 32, 68, 154, 33, 130, 41, 168, 133, 166},
    {88, 101, 96, 32, 160, 160, 82, 64, 128, 146, 81, 65, 16, 16, 80, 144, 145, 161, 16, 34, 66, 32, 65, 146, 70, 2, 81, 98, 82, 164, 144, 162, 33, 102, 152, 80, 128, 66, 128, 96, 145, 145, 144, 96, 160, 104, 65, 96, 130, 162, 89, 162, 130, 80, 81, 81, 146, 0, 128, 32, 26, 96, 98, 32, 128, 69, 162, 130, 88, 144, 146, 8, 89, 69, 145, 64, 168, 36, 160, 97, 81, 18, 146, 128, 74, 97, 85, 152, 81, 80, 144, 104, 64, 98, 81, 106, 128, 20, 64, 166, 136, 0, 84, 82, 166, 5, 162, 18, 161, 145, 98, 160, 18, 145, 2, 96, 90, 65, 82, 68, 133, 40, 9, 168, 148, 169, 164, 38, 2, 89, 5, 2, 146, 82, 130, 98, 42, 1, 150, 70, 105, 1, 41, 72, 85, 97, 153, 162, 90, 106, 66, 169, 144, 18, 160, 132, 161, 132, 169, 160, 26, 0, 64, 65, 98, 96, 65, 66, 166, 96, 82, 145, 149, 2, 18, 150, 137, 160, 128, 106, 138, 85, 132, 148, 9, 82, 88, 137, 136, 148, 33, 146, 33, 89, 68, 90, 154, 165, 81, 34, 145, 146, 150, 144, 42, 97, 166, 96, 154, 37, 24, 96, 82, 81, 69, 150, 129, 138, 152, 146, 37, 66, 160, 164, 145, 4, 138, 169, 73, 84, 148, 129, 166, 82, 18, 129, 169, 66, 88, 66, 152, 36, 137, 65, 9, 101, 160, 73, 150, 42, 169, 136, 138, 88, 10, 37, 66, 88, 17, 69, 24, 70, 82, 69, 34, 86, 160, 138, 33, 104, 82, 88, 161, 144, 22, 102, 132, 132, 8, 64, 101, 166, 10, 145, 145, 97, 69, 144, 1, 100, 1, 16, 32, 128, 96, 129, 80, 128, 36, 162, 17, 32, 161, 97, 72, 144, 64, 81, 36, 20, 146, 34, 16, 98, 16, 34, 80, 81, 161, 9, 16, 81, 80, 162, 150, 0, 16, 132, 2, 144, 145, 145, 146, 96, 20, 66, 81, 18, 160, 82, 162, 34, 97, 65, 25, 144, 80, 4, 2, 162, 170, 33, 97, 144, 16, 146, 130, 161, 65, 152, 32, 34, 97, 160, 98, 96, 145, 64, 132, 129, 17, 82, 80, 81, 166, 168, 97, 97, 130, 81, 128, 0, 33, 80},
    {138, 82, 153, 17, 86, 161, 41, 162, 100, 33, 138, 21, 149, 10, 10, 102, 168, 134, 98, 144, 169, 26, 150, 37, 133, 37, 33, 24, 132, 6, 169, 169, 66, 153, 162, 70, 97, 68, 98, 164, 82, 84, 88, 89, 102, 169, 97, 170, 81, 22, 70, 84, 96, 149, 165, 148, 68, 133, 133, 105, 153, 168, 86, 154, 165, 136, 84, 100, 33, 153, 165, 10, 72, 136, 5, 80, 133, 144, 64, 21, 136, 129, 165, 161, 106, 38, 104, 100, 149, 144, 148, 160, 137, 168, 85, 84, 133, 16, 36, 80, 160, 40, 150, 42, 165, 106, 97, 84, 164, 165, 8, 150, 20, 101, 33, 82, 150, 152, 22, 102, 90, 105, 26, 165, 150, 86, 170, 8, 97, 106, 144, 5, 70, 86, 69, 80, 85, 97, 25, 104, 101, 150, 9, 166, 81, 37, 82, 160, 85, 82, 21, 137, 150, 65, 0, 97, 106, 22, 136, 25, 102, 161, 145, 74, 132, 90, 130, 98, 96, 153, 150, 154, 102, 80, 168, 170, 24, 25, 24, 70, 74, 17, 150, 130, 149, 96, 170, 104, 73, 170, 169, 24, 81, 150, 152, 34, 162, 38, 42, 162, 149, 85, 66, 90, 85, 101, 150, 145, 164, 133, 69, 9, 168, 168, 129, 9, 90, 154, 68, 161, 170, 10, 21, 130, 101, 18, 97, 146, 100, 133, 153, 74, 37, 85, 18, 73, 74, 165, 17, 81, 132, 73, 97, 153, 106, 102, 161, 154, 90, 106, 85, 36, 90, 74, 164, 105, 130, 169, 149, 85, 1, 84, 84, 16, 70, 162, 101, 98, 169, 4, 37, 152, 154, 146, 32, 38, 105, 153, 138, 72, 137, 138, 85, 88, 41, 97, 17, 5, 25, 132, 10, 96, 169, 166, 24, 134, 64, 149, 22, 136, 0, 33, 22, 40, 88, 88, 164, 97, 97, 153, 166, 66, 144, 166, 20, 145, 133, 105, 41, 21, 16, 152, 150, 20, 72, 41, 133, 18, 10, 161, 25, 69, 106, 169, 169, 168, 133, 128, 1, 101, 40, 32, 86, 1, 10, 102, 89, 84, 164, 134, 154, 36, 132, 152, 165, 100, 84, 6, 34, 20, 25, 98, 137, 10, 70, 24, 17, 166, 66, 150, 96, 16, 96, 88, 146, 17, 8, 25, 6, 24, 170, 102, 2, 100},
    {149, 133, 6, 22, 6, 70, 22, 106, 17, 144, 133, 36, 24, 152, 96, 38, 85, 128, 154, 70, 38, 89, 150, 81, 69, 98, 149, 101, 26, 9, 1, 33, 148, 132, 17, 86, 168, 80, 70, 26, 20, 104, 134, 42, 70, 25, 137, 169, 160, 101, 81, 98, 73, 144, 86, 6, 105, 89, 138, 81, 154, 169, 90, 86, 154, 165, 105, 90, 169, 146, 64, 84, 25, 97, 164, 145, 69, 36, 101, 170, 85, 144, 134, 22, 37, 0, 105, 84, 73, 160, 104, 165, 17, 149, 105, 170, 153, 5, 81, 41, 137, 21, 136, 165, 136, 150, 89, 101, 106, 160, 105, 104, 38, 165, 68, 101, 162, 89, 18, 81, 165, 144, 168, 85, 38, 81, 166, 41, 153, 148, 106, 152, 105, 21, 166, 148, 85, 165, 104, 128, 105, 66, 90, 106, 148, 25, 100, 150, 149, 25, 66, 82, 149, 101, 20, 6, 101, 166, 38, 153, 89, 84, 69, 150, 153, 148, 152, 10, 86, 162, 97, 137, 152, 70, 145, 90, 136, 152, 73, 42, 162, 89, 84, 89, 161, 86, 66, 105, 165, 165, 133, 130, 166, 100, 105, 146, 74, 18, 150, 33, 96, 128, 96, 134, 97, 65, 153, 153, 85, 72, 21, 146, 144, 38, 90, 5, 149, 70, 150, 153, 129, 104, 89, 96, 0, 170, 100, 152, 166, 86, 154, 85, 137, 88, 74, 154, 102, 81, 36, 130, 137, 16, 26, 4, 104, 150, 17, 164, 170, 89, 73, 133, 105, 5, 41, 98, 132, 98, 73, 168, 137, 26, 65, 146, 128, 42, 10, 96, 100, 69, 22, 10, 36, 97, 170, 169, 17, 88, 90, 6, 150, 104, 4, 89, 88, 8, 148, 170, 101, 70, 168, 106, 20, 102, 162, 154, 161, 38, 136, 84, 70, 160, 33, 161, 90, 20, 89, 85, 84, 40, 25, 148, 73, 152, 166, 6, 84, 34, 132, 170, 100, 65, 33, 42, 1, 138, 102, 80, 66, 98, 6, 88, 100, 137, 170, 132, 82, 33, 166, 137, 149, 168, 150, 138, 152, 148, 34, 82, 41, 25, 150, 24, 128, 128, 166, 65, 166, 85, 161, 10, 8, 88, 22, 81, 68, 38, 170, 80, 42, 152, 154, 34, 73, 18, 82, 96, 86, 166, 96, 80, 6, 89, 85, 84},
    {85, 145, 24, 40, 98, 25, 73, 138, 17, 66, 6, 166, 38, 36, 89, 165, 1, 74, 153, 145, 165, 26, 17, 89, 9, 133, 21, 37, 80, 9, 64, 134, 134, 0, 146, 80, 34, 104, 150, 86, 74, 98, 64, 149, 17, 65, 137, 16, 73, 38, 25, 85, 100, 149, 65, 132, 101, 164, 165, 20, 38, 70, 153, 22, 161, 161, 128, 154, 145, 102, 150, 101, 104, 10, 80, 41, 96, 144, 17, 150, 70, 150, 133, 106, 42, 65, 40, 72, 165, 102, 130, 97, 34, 8, 33, 74, 36, 164, 148, 150, 170, 88, 1, 8, 168, 69, 101, 8, 42, 89, 104, 149, 153, 149, 100, 134, 26, 1, 137, 5, 105, 70, 32, 86, 136, 6, 130, 5, 128, 40, 26, 154, 134, 165, 102, 69, 24, 105, 106, 41, 149, 105, 154, 132, 96, 137, 164, 166, 97, 106, 149, 164, 162, 24, 2, 34, 165, 10, 32, 81, 133, 69, 89, 160, 32, 74, 37, 0, 104, 144, 73, 133, 98, 85, 81, 164, 64, 170, 26, 72, 169, 150, 66, 106, 146, 168, 102, 165, 101, 102, 90, 84, 136, 25, 145, 154, 101, 70, 1, 16, 68, 98, 168, 6, 73, 5, 148, 73, 40, 73, 40, 38, 146, 16, 90, 101, 102, 33, 154, 160, 136, 0, 70, 137, 168, 128, 149, 162, 166, 20, 80, 145, 73, 104, 69, 81, 26, 64, 70, 70, 74, 86, 32, 166, 137, 165, 26, 160, 145, 32, 36, 134, 34, 166, 25, 153, 21, 136, 134, 86, 96, 169, 154, 5, 68, 161, 165, 1, 105, 70, 146, 146, 89, 9, 6, 40, 100, 166, 154, 100, 164, 102, 162, 5, 154, 34, 20, 105, 65, 64, 97, 104, 32, 26, 16, 36, 16, 6, 129, 133, 8, 80, 86, 137, 88, 88, 100, 34, 38, 97, 82, 89, 150, 138, 36, 105, 160, 6, 153, 80, 98, 65, 37, 10, 17, 169, 8, 98, 145, 101, 106, 153, 6, 64, 102, 1, 22, 100, 66, 104, 17, 21, 69, 128, 65, 169, 162, 36, 148, 5, 80, 84, 86, 88, 6, 32, 164, 88, 149, 154, 153, 134, 150, 90, 9, 89, 146, 89, 100, 90, 161, 25, 24, 73, 2, 18, 134, 17, 162, 149, 42, 82, 128, 130},
    {97, 84, 81, 1, 24, 70, 102, 170, 152, 165, 166, 104, 161, 84, 101, 133, 138, 74, 42, 166, 138, 128, 154, 145, 85, 5, 33, 81, 33, 150, 169, 152, 154, 5, 82, 85, 132, 73, 22, 41, 86, 69, 2, 18, 148, 42, 169, 100, 18, 146, 2, 4, 21, 86, 133, 148, 9, 105, 20, 149, 145, 150, 17, 26, 18, 37, 154, 101, 146, 0, 42, 42, 161, 166, 65, 104, 90, 5, 89, 88, 86, 133, 144, 16, 69, 84, 20, 69, 18, 144, 82, 38, 21, 26, 9, 84, 34, 102, 38, 170, 170, 10, 169, 166, 106, 22, 22, 1, 85, 72, 24, 38, 102, 162, 152, 74, 144, 170, 88, 26, 136, 16, 136, 96, 169, 66, 152, 37, 144, 169, 145, 138, 90, 8, 68, 149, 90, 42, 170, 137, 42, 85, 73, 102, 98, 85, 73, 32, 137, 166, 70, 130, 101, 162, 160, 17, 25, 85, 105, 130, 166, 169, 84, 145, 134, 74, 81, 69, 165, 162, 154, 138, 164, 1, 150, 134, 136, 129, 36, 42, 73, 4, 133, 164, 65, 149, 149, 25, 137, 69, 74, 21, 74, 169, 66, 42, 6, 97, 102, 25, 85, 89, 84, 161, 25, 154, 88, 42, 149, 81, 144, 25, 42, 4, 17, 130, 89, 70, 9, 37, 6, 9, 169, 150, 6, 134, 154, 36, 73, 85, 8, 96, 100, 25, 25, 8, 42, 138, 149, 153, 102, 168, 41, 133, 150, 16, 169, 169, 150, 104, 164, 70, 74, 106, 170, 150, 82, 149, 85, 162, 36, 129, 169, 89, 17, 133, 41, 26, 86, 10, 89, 132, 84, 144, 102, 68, 165, 0, 42, 128, 82, 165, 6, 80, 85, 86, 26, 70, 24, 96, 38, 86, 161, 152, 129, 80, 8, 65, 34, 170, 17, 9, 85, 136, 165, 152, 25, 17, 21, 166, 169, 169, 84, 9, 80, 6, 137, 170, 20, 86, 66, 150, 21, 42, 166, 97, 21, 73, 133, 101, 146, 6, 145, 89, 72, 164, 36, 89, 17, 154, 5, 164, 81, 10, 134, 164, 97, 81, 88, 106, 85, 150, 169, 129, 165, 166, 22, 36, 164, 152, 42, 98, 134, 106, 32, 17, 88, 72, 69, 8, 134, 96, 88, 166, 137, 128, 18, 22, 90, 18, 86, 40, 6, 69},
    {98, 69, 2, 165, 36, 85, 37, 100, 40, 9, 165, 145, 148, 86, 150, 72, 150, 20, 88, 106, 164, 153, 165, 41, 86, 145, 149, 65, 37, 106, 154, 168, 73, 20, 150, 16, 40, 105, 88, 37, 21, 68, 90, 66, 21, 90, 104, 86, 98, 144, 10, 96, 38, 72, 38, 89, 104, 165, 33, 2, 164, 162, 26, 89, 134, 161, 152, 102, 69, 104, 137, 73, 97, 164, 170, 73, 86, 105, 37, 17, 168, 86, 105, 22, 0, 64, 169, 105, 152, 134, 136, 137, 104, 74, 146, 5, 69, 138, 134, 150, 166, 164, 101, 145, 105, 41, 136, 153, 128, 169, 137, 66, 9, 170, 38, 105, 130, 34, 149, 148, 153, 10, 166, 162, 132, 88, 104, 136, 138, 81, 37, 84, 104, 1, 89, 85, 106, 170, 153, 20, 42, 25, 68, 89, 105, 137, 88, 166, 16, 10, 98, 162, 34, 74, 34, 84, 33, 102, 134, 26, 152, 34, 2, 89, 170, 149, 10, 104, 132, 100, 21, 9, 69, 102, 1, 81, 84, 102, 25, 149, 21, 20, 22, 42, 148, 21, 40, 149, 145, 70, 25, 4, 72, 68, 69, 82, 146, 146, 16, 149, 106, 90, 137, 90, 102, 134, 145, 70, 148, 6, 162, 17, 144, 22, 1, 129, 170, 145, 98, 101, 33, 100, 42, 168, 21, 70, 100, 102, 69, 74, 37, 21, 89, 37, 42, 38, 82, 165, 132, 82, 24, 82, 40, 169, 36, 148, 38, 90, 105, 33, 37, 25, 152, 26, 32, 5, 136, 86, 38, 101, 152, 169, 37, 26, 144, 74, 17, 74, 161, 37, 65, 102, 153, 138, 145, 73, 2, 17, 18, 169, 136, 10, 18, 84, 5, 41, 84, 84, 89, 130, 0, 128, 40, 80, 9, 145, 86, 148, 101, 148, 80, 154, 170, 5, 132, 88, 160, 150, 145, 25, 160, 144, 41, 101, 26, 169, 42, 2, 8, 102, 102, 1, 97, 9, 4, 6, 25, 41, 74, 73, 38, 89, 150, 137, 82, 5, 89, 81, 10, 32, 153, 150, 42, 2, 10, 129, 164, 136, 136, 33, 42, 82, 5, 10, 20, 152, 9, 90, 34, 162, 136, 162, 68, 146, 145, 162, 150, 70, 86, 138, 98, 150, 144, 20, 36, 138, 5, 165, 21, 148, 10, 26, 2, 145},
    {162, 66, 105, 17, 148, 0, 41, 148, 132, 97, 100, 134, 136, 89, 89, 101, 41, 166, 36, 166, 82, 17, 34, 168, 72, 146, 162, 102, 36, 150, 74, 22, 97, 34, 148, 80, 105, 136, 1, 73, 17, 64, 0, 150, 0, 90, 40, 160, 152, 4, 69, 80, 65, 161, 97, 169, 81, 88, 137, 40, 81, 150, 66, 96, 42, 37, 150, 72, 138, 25, 169, 154, 101, 105, 168, 161, 1, 153, 164, 33, 0, 32, 128, 21, 101, 170, 98, 166, 97, 21, 90, 144, 34, 36, 84, 74, 36, 149, 21, 86, 64, 150, 66, 133, 106, 154, 150, 154, 32, 36, 89, 106, 149, 86, 105, 89, 89, 89, 36, 42, 105, 169, 97, 136, 160, 40, 153, 86, 162, 168, 66, 98, 38, 22, 20, 90, 105, 80, 144, 138, 166, 16, 104, 86, 102, 81, 86, 170, 134, 145, 104, 21, 89, 149, 74, 106, 96, 164, 101, 18, 170, 149, 20, 72, 169, 106, 166, 106, 164, 22, 40, 21, 20, 32, 66, 101, 104, 160, 16, 145, 149, 84, 21, 153, 106, 106, 73, 169, 165, 89, 166, 149, 106, 98, 89, 9, 101, 24, 33, 153, 106, 5, 22, 129, 150, 165, 42, 41, 42, 153, 160, 90, 149, 73, 145, 80, 80, 170, 20, 148, 21, 69, 129, 90, 100, 166, 89, 105, 21, 64, 42, 0, 97, 148, 9, 169, 104, 89, 170, 86, 101, 42, 22, 22, 82, 100, 88, 21, 37, 169, 97, 84, 81, 133, 85, 36, 165, 97, 152, 6, 25, 150, 20, 129, 144, 169, 161, 21, 132, 86, 148, 72, 165, 146, 129, 17, 66, 150, 169, 144, 81, 146, 148, 42, 138, 105, 26, 132, 0, 24, 154, 82, 168, 144, 89, 64, 24, 150, 153, 138, 153, 1, 170, 102, 64, 88, 165, 36, 5, 148, 86, 25, 26, 154, 33, 9, 81, 81, 170, 129, 40, 160, 65, 18, 96, 34, 101, 88, 96, 10, 9, 102, 138, 80, 2, 22, 82, 64, 4, 90, 170, 98, 134, 8, 106, 149, 33, 102, 16, 0, 106, 128, 150, 133, 32, 100, 149, 148, 21, 0, 8, 96, 82, 133, 66, 169, 70, 34, 130, 74, 88, 64, 25, 104, 2, 133, 18, 104, 69, 97, 97, 168, 105, 41},
    {150, 129, 98, 8, 20, 146, 25, 153, 73, 32, 0, 162, 18, 34, 137, 65, 8, 82, 86, 74, 33, 21, 65, 85, 24, 41, 70, 98, 150, 138, 150, 170, 21, 105, 101, 34, 88, 65, 161, 153, 100, 154, 169, 10, 106, 10, 153, 90, 85, 104, 86, 104, 138, 132, 81, 97, 34, 149, 68, 69, 101, 97, 134, 160, 134, 1, 70, 85, 85, 68, 138, 102, 69, 42, 68, 145, 153, 17, 66, 170, 34, 10, 134, 0, 33, 89, 17, 72, 153, 105, 97, 137, 22, 164, 154, 89, 26, 133, 74, 89, 168, 129, 170, 149, 73, 165, 164, 34, 86, 130, 146, 101, 42, 80, 104, 41, 137, 154, 132, 100, 85, 5, 164, 102, 165, 169, 18, 10, 97, 70, 105, 90, 164, 160, 168, 137, 88, 89, 80, 137, 162, 98, 148, 168, 72, 10, 101, 89, 81, 69, 26, 105, 70, 25, 152, 8, 2, 154, 164, 26, 34, 21, 70, 5, 38, 82, 133, 97, 41, 84, 24, 10, 152, 84, 40, 97, 102, 134, 152, 169, 165, 134, 162, 40, 129, 89, 16, 166, 169, 69, 170, 105, 168, 152, 164, 81, 146, 98, 41, 104, 170, 84, 5, 34, 17, 145, 88, 134, 164, 106, 90, 2, 26, 128, 41, 17, 150, 166, 166, 18, 160, 166, 150, 73, 130, 10, 137, 133, 85, 152, 5, 81, 161, 150, 85, 74, 129, 26, 22, 86, 0, 162, 86, 146, 134, 84, 9, 154, 160, 145, 137, 164, 160, 161, 168, 149, 105, 85, 82, 168, 65, 145, 98, 18, 153, 68, 66, 26, 68, 6, 146, 170, 148, 170, 85, 149, 70, 153, 134, 169, 89, 74, 40, 21, 73, 17, 154, 133, 40, 17, 89, 17, 145, 72, 161, 64, 66, 16, 34, 152, 150, 148, 81, 6, 41, 134, 26, 90, 144, 165, 42, 42, 166, 166, 90, 90, 149, 104, 1, 33, 133, 34, 38, 168, 72, 74, 133, 69, 102, 34, 33, 88, 21, 70, 129, 149, 149, 137, 26, 164, 66, 70, 170, 80, 165, 36, 148, 24, 166, 68, 4, 85, 74, 149, 4, 72, 100, 6, 169, 84, 138, 150, 84, 10, 149, 24, 21, 106, 149, 102, 86, 37, 162, 169, 82, 42, 137, 166, 169, 4, 38, 84, 145, 34},
    {160, 17, 98, 69, 149, 74, 150, 137, 0, 21, 169, 96, 21, 73, 98, 96, 18, 33, 4, 4, 65, 166, 38, 128, 33, 161, 150, 68, 73, 18, 74, 132, 102, 137, 9, 70, 10, 69, 101, 18, 81, 149, 73, 88, 90, 38, 36, 97, 104, 24, 36, 8, 164, 85, 145, 134, 33, 86, 89, 72, 34, 40, 161, 18, 8, 150, 6, 16, 134, 9, 36, 5, 100, 9, 70, 106, 102, 150, 134, 37, 22, 66, 10, 18, 154, 21, 164, 89, 138, 164, 101, 37, 70, 81, 150, 170, 102, 165, 18, 105, 89, 148, 138, 145, 68, 41, 149, 149, 85, 25, 70, 168, 74, 86, 18, 84, 26, 101, 128, 69, 74, 17, 128, 106, 130, 164, 85, 17, 129, 136, 136, 144, 170, 86, 162, 170, 41, 32, 2, 88, 152, 17, 97, 26, 84, 137, 25, 134, 102, 0, 73, 26, 100, 138, 88, 166, 150, 166, 21, 145, 153, 144, 5, 42, 164, 164, 98, 165, 133, 170, 84, 26, 134, 162, 24, 37, 145, 154, 106, 85, 90, 97, 145, 145, 105, 24, 69, 101, 146, 68, 66, 88, 68, 21, 21, 145, 101, 153, 18, 170, 89, 22, 154, 36, 16, 166, 86, 66, 20, 165, 85, 34, 152, 105, 73, 88, 32, 20, 2, 89, 166, 68, 161, 80, 86, 165, 165, 138, 144, 146, 38, 150, 145, 128, 70, 134, 73, 85, 80, 8, 33, 73, 165, 96, 10, 88, 164, 149, 74, 104, 74, 129, 137, 144, 168, 106, 84, 169, 154, 162, 137, 72, 153, 130, 102, 22, 37, 32, 72, 9, 9, 64, 104, 90, 169, 82, 41, 146, 134, 134, 40, 24, 22, 146, 89, 22, 65, 26, 97, 85, 152, 128, 138, 10, 102, 36, 80, 1, 106, 152, 32, 37, 168, 101, 146, 32, 32, 34, 130, 170, 164, 100, 72, 73, 68, 41, 74, 152, 138, 32, 166, 148, 42, 42, 33, 136, 168, 168, 170, 130, 86, 145, 68, 73, 96, 73, 132, 166, 18, 166, 166, 150, 80, 10, 17, 17, 132, 138, 90, 69, 154, 105, 134, 100, 68, 73, 2, 8, 41, 10, 41, 160, 132, 106, 150, 146, 4, 0, 129, 146, 136, 34, 34, 100, 6, 102, 150, 16, 25, 149, 86, 89, 166, 88},
    {25, 170, 137, 42, 88, 72, 42, 74, 169, 153, 154, 164, 149, 33, 37, 149, 149, 36, 33, 42, 153, 162, 104, 38, 8, 145, 69, 165, 149, 72, 37, 166, 65, 1, 100, 168, 161, 106, 88, 154, 153, 101, 129, 104, 153, 84, 90, 138, 36, 102, 74, 150, 20, 66, 104, 72, 134, 70, 70, 166, 86, 102, 106, 64, 70, 88, 138, 153, 145, 66, 80, 42, 160, 169, 161, 41, 134, 10, 104, 104, 33, 70, 149, 105, 162, 73, 101, 72, 22, 5, 68, 100, 89, 82, 104, 153, 38, 70, 26, 170, 154, 169, 101, 86, 42, 36, 88, 70, 18, 102, 145, 38, 106, 82, 17, 165, 98, 145, 89, 74, 168, 169, 152, 152, 138, 88, 106, 149, 85, 22, 105, 21, 9, 169, 25, 153, 165, 22, 72, 145, 40, 81, 145, 26, 138, 74, 164, 38, 166, 150, 169, 160, 137, 137, 41, 80, 33, 10, 38, 68, 42, 154, 82, 38, 168, 101, 74, 102, 102, 72, 138, 8, 34, 136, 101, 69, 69, 81, 136, 86, 150, 170, 168, 150, 169, 81, 66, 84, 154, 102, 104, 37, 106, 134, 74, 136, 25, 4, 21, 69, 98, 161, 32, 89, 105, 152, 74, 169, 153, 101, 129, 68, 80, 166, 148, 33, 97, 82, 32, 101, 86, 80, 90, 166, 137, 80, 36, 105, 68, 72, 96, 18, 96, 38, 72, 5, 98, 89, 161, 149, 37, 144, 32, 24, 20, 101, 106, 64, 25, 9, 86, 164, 42, 168, 102, 41, 170, 169, 148, 22, 36, 133, 128, 90, 169, 85, 70, 81, 152, 161, 132, 101, 150, 102, 69, 104, 24, 73, 88, 162, 165, 16, 152, 26, 145, 64, 138, 25, 40, 90, 106, 86, 170, 168, 24, 165, 65, 100, 150, 69, 26, 10, 69, 69, 168, 101, 22, 98, 0, 84, 33, 104, 146, 86, 42, 146, 4, 96, 97, 146, 21, 138, 89, 148, 102, 144, 82, 160, 80, 2, 132, 100, 68, 88, 97, 32, 136, 164, 168, 134, 153, 137, 34, 166, 153, 22, 18, 33, 6, 165, 84, 132, 72, 100, 153, 6, 65, 150, 170, 132, 80, 148, 37, 2, 64, 18, 64, 18, 4, 133, 105, 84, 153, 146, 168, 153, 96, 4, 149, 90, 98, 161, 100, 146},
    {74, 102, 96, 96, 166, 102, 20, 129, 161, 90, 22, 105, 154, 170, 100, 130, 168, 100, 65, 164, 144, 86, 40, 89, 97, 17, 129, 16, 149, 40, 90, 41, 42, 169, 105, 166, 22, 100, 97, 153, 102, 138, 97, 100, 146, 165, 150, 5, 42, 161, 80, 101, 106, 152, 154, 132, 153, 101, 145, 38, 153, 105, 102, 85, 145, 97, 133, 34, 97, 106, 137, 17, 70, 68, 164, 150, 37, 97, 70, 17, 101, 154, 169, 169, 38, 102, 161, 146, 6, 161, 153, 22, 106, 133, 20, 137, 145, 146, 36, 64, 86, 26, 70, 133, 25, 32, 41, 22, 88, 97, 153, 168, 89, 73, 17, 169, 40, 153, 106, 164, 96, 166, 102, 84, 150, 89, 36, 129, 146, 98, 20, 22, 170, 145, 153, 42, 97, 20, 154, 105, 20, 70, 133, 162, 18, 21, 144, 101, 136, 144, 65, 145, 154, 169, 4, 24, 104, 69, 17, 101, 32, 80, 20, 20, 144, 166, 144, 168, 137, 81, 160, 137, 102, 10, 20, 169, 21, 150, 164, 170, 164, 42, 152, 88, 149, 70, 84, 90, 21, 4, 4, 150, 9, 169, 74, 168, 81, 166, 36, 152, 100, 130, 41, 90, 101, 24, 154, 164, 0, 70, 40, 146, 133, 138, 154, 86, 42, 90, 170, 98, 21, 22, 86, 41, 164, 26, 90, 25, 138, 132, 169, 69, 86, 96, 106, 82, 81, 32, 138, 17, 20, 128, 74, 138, 85, 166, 102, 90, 80, 136, 132, 80, 169, 88, 40, 81, 18, 69, 170, 149, 85, 90, 154, 22, 153, 18, 169, 74, 89, 86, 74, 26, 80, 170, 86, 81, 154, 70, 81, 165, 154, 32, 137, 9, 97, 164, 133, 154, 128, 32, 85, 38, 97, 133, 154, 36, 100, 6, 146, 21, 22, 161, 17, 88, 89, 9, 82, 170, 149, 88, 166, 73, 149, 64, 82, 134, 21, 68, 170, 0, 102, 88, 146, 129, 137, 25, 5, 74, 150, 160, 160, 102, 36, 96, 80, 66, 34, 105, 73, 70, 22, 129, 64, 18, 105, 149, 86, 22, 128, 101, 137, 33, 153, 101, 10, 138, 98, 38, 154, 80, 90, 90, 150, 22, 18, 68, 153, 148, 144, 24, 162, 101, 40, 166, 153, 37, 129, 70, 90, 153, 86, 130, 132, 170},
    {34, 152, 170, 25, 4, 137, 168, 74, 17, 105, 98, 17, 41, 150, 38, 5, 170, 145, 161, 89, 24, 74, 26, 40, 153, 41, 85, 148, 145, 150, 69, 130, 102, 152, 37, 36, 38, 170, 101, 133, 165, 106, 17, 42, 36, 6, 22, 16, 40, 37, 164, 169, 69, 149, 70, 153, 81, 40, 133, 136, 66, 89, 88, 24, 150, 65, 17, 82, 66, 16, 21, 149, 162, 26, 97, 85, 85, 102, 98, 102, 1, 5, 153, 81, 134, 98, 82, 145, 148, 64, 169, 38, 101, 89, 150, 22, 82, 101, 165, 97, 85, 170, 153, 162, 34, 161, 165, 21, 40, 144, 72, 136, 21, 137, 153, 102, 72, 169, 5, 149, 37, 70, 84, 146, 84, 145, 102, 36, 128, 153, 85, 138, 88, 137, 128, 25, 85, 74, 66, 133, 88, 160, 89, 6, 36, 132, 90, 136, 165, 89, 154, 10, 105, 153, 161, 6, 130, 40, 5, 17, 1, 74, 134, 74, 69, 82, 21, 105, 162, 89, 97, 88, 66, 37, 26, 37, 170, 136, 38, 101, 150, 25, 101, 105, 85, 89, 168, 170, 101, 26, 26, 160, 101, 8, 162, 88, 137, 70, 149, 149, 90, 38, 144, 161, 26, 0, 68, 105, 168, 106, 130, 98, 164, 25, 166, 132, 22, 26, 64, 82, 74, 137, 73, 104, 168, 36, 132, 10, 170, 65, 69, 106, 22, 100, 105, 137, 1, 97, 90, 165, 169, 36, 154, 22, 128, 153, 102, 37, 10, 73, 166, 1, 72, 129, 4, 90, 149, 169, 100, 90, 65, 26, 106, 98, 72, 153, 33, 1, 164, 25, 21, 165, 148, 22, 17, 130, 26, 153, 165, 21, 154, 26, 70, 88, 138, 160, 64, 88, 81, 164, 38, 153, 134, 152, 86, 96, 42, 144, 20, 152, 154, 101, 105, 68, 38, 70, 22, 37, 4, 96, 146, 86, 169, 20, 85, 85, 101, 25, 161, 6, 169, 6, 150, 145, 84, 5, 20, 169, 102, 160, 42, 85, 170, 25, 72, 85, 72, 153, 84, 16, 82, 153, 144, 88, 33, 90, 17, 148, 169, 86, 69, 25, 72, 69, 133, 165, 148, 105, 136, 24, 81, 73, 105, 101, 169, 168, 101, 152, 37, 22, 134, 88, 26, 72, 104, 72, 165, 9, 144, 26, 101, 66, 106, 128},
    {80, 161, 165, 129, 73, 148, 20, 129, 22, 146, 150, 145, 152, 101, 102, 154, 160, 149, 42, 38, 165, 24, 106, 169, 85, 81, 85, 96, 88, 70, 0, 6, 16, 149, 132, 102, 73, 5, 149, 105, 82, 154, 165, 22, 144, 66, 85, 129, 18, 154, 20, 145, 154, 128, 134, 82, 162, 6, 18, 102, 169, 17, 100, 133, 73, 148, 168, 84, 20, 74, 68, 90, 89, 40, 153, 2, 149, 20, 149, 33, 153, 168, 74, 65, 168, 168, 106, 96, 138, 150, 21, 160, 105, 168, 168, 169, 86, 105, 170, 164, 85, 80, 69, 102, 69, 34, 137, 133, 153, 90, 144, 21, 133, 105, 153, 86, 21, 136, 86, 85, 153, 69, 101, 134, 22, 138, 134, 165, 10, 133, 100, 134, 36, 152, 170, 22, 6, 101, 8, 165, 150, 169, 170, 90, 32, 132, 152, 84, 150, 166, 89, 105, 168, 66, 104, 72, 16, 146, 153, 6, 90, 104, 40, 42, 133, 70, 144, 68, 17, 33, 26, 21, 166, 90, 96, 69, 22, 134, 169, 86, 138, 41, 136, 166, 164, 89, 90, 168, 166, 144, 26, 149, 86, 32, 150, 106, 33, 136, 33, 9, 32, 25, 16, 6, 88, 137, 102, 102, 86, 153, 33, 134, 102, 148, 168, 34, 165, 70, 74, 150, 168, 33, 20, 152, 86, 138, 40, 154, 146, 85, 86, 64, 68, 106, 82, 168, 5, 41, 137, 26, 17, 161, 70, 72, 137, 26, 144, 137, 164, 102, 5, 144, 66, 136, 90, 150, 97, 169, 154, 42, 153, 0, 101, 34, 90, 89, 21, 69, 33, 81, 162, 26, 41, 149, 153, 149, 160, 81, 38, 144, 165, 130, 16, 98, 21, 133, 160, 86, 134, 128, 152, 80, 38, 5, 129, 5, 146, 1, 164, 102, 90, 138, 74, 34, 80, 34, 38, 137, 96, 128, 166, 41, 169, 84, 134, 6, 101, 161, 80, 161, 86, 22, 26, 129, 165, 136, 149, 161, 133, 70, 138, 144, 69, 86, 88, 10, 149, 137, 137, 161, 134, 72, 36, 138, 100, 65, 34, 130, 161, 9, 104, 84, 32, 133, 40, 106, 82, 36, 32, 10, 96, 149, 129, 132, 74, 160, 84, 89, 89, 10, 41, 68, 17, 153, 162, 85, 5, 84, 161, 137, 86, 1, 164, 153},
    {4, 8, 154, 85, 162, 1, 149, 152, 86, 164, 128, 153, 89, 148, 9, 161, 106, 82, 130, 88, 38, 22, 133, 42, 160, 69, 41, 136, 166, 154, 26, 97, 22, 82, 42, 168, 5, 128, 81, 81, 38, 145, 165, 104, 97, 146, 22, 74, 97, 40, 166, 102, 0, 82, 41, 104, 101, 86, 166, 130, 21, 106, 146, 9, 133, 138, 104, 104, 102, 98, 37, 104, 100, 74, 146, 154, 154, 152, 38, 25, 149, 74, 165, 81, 162, 162, 22, 104, 73, 6, 128, 41, 73, 74, 132, 81, 152, 169, 165, 166, 80, 168, 69, 160, 129, 100, 101, 128, 18, 69, 153, 88, 18, 161, 150, 21, 89, 166, 136, 152, 25, 32, 148, 65, 169, 134, 145, 101, 82, 85, 4, 98, 161, 129, 18, 22, 98, 74, 24, 165, 164, 137, 34, 160, 153, 102, 106, 18, 38, 132, 166, 170, 150, 133, 68, 106, 34, 132, 18, 33, 101, 21, 105, 150, 149, 160, 136, 136, 85, 136, 137, 86, 86, 69, 89, 25, 85, 97, 80, 74, 36, 22, 81, 101, 169, 128, 38, 169, 4, 22, 24, 86, 80, 164, 133, 166, 146, 168, 137, 104, 166, 85, 85, 169, 42, 36, 26, 24, 101, 89, 104, 25, 104, 165, 6, 138, 42, 86, 74, 90, 169, 164, 88, 153, 102, 105, 22, 24, 98, 144, 133, 6, 105, 70, 153, 74, 74, 138, 148, 149, 169, 101, 106, 154, 82, 162, 42, 8, 41, 148, 90, 153, 80, 106, 137, 134, 145, 165, 85, 146, 145, 36, 21, 36, 128, 64, 10, 129, 161, 88, 66, 106, 169, 170, 148, 22, 80, 89, 168, 72, 162, 148, 86, 102, 150, 88, 168, 64, 134, 37, 80, 106, 162, 104, 18, 22, 104, 106, 0, 70, 69, 16, 101, 106, 41, 90, 102, 101, 42, 138, 161, 26, 16, 129, 18, 4, 128, 161, 10, 32, 106, 20, 161, 69, 104, 17, 34, 0, 145, 2, 98, 42, 69, 22, 88, 130, 20, 86, 153, 34, 81, 20, 170, 102, 105, 10, 101, 132, 34, 100, 64, 32, 102, 130, 65, 148, 129, 20, 86, 70, 137, 102, 1, 37, 96, 149, 74, 82, 85, 89, 25, 26, 169, 150, 96, 37, 85, 81, 10, 17, 170, 40, 100, 41},
    {8, 149, 164, 20, 72, 154, 165, 102, 162, 34, 165, 170, 152, 4, 8, 84, 168, 8, 40, 20, 70, 128, 84, 36, 81, 72, 33, 81, 20, 0, 160, 169, 80, 74, 106, 20, 138, 137, 38, 84, 169, 64, 169, 164, 90, 105, 85, 66, 26, 154, 9, 138, 74, 82, 10, 8, 1, 134, 138, 133, 40, 84, 6, 138, 84, 36, 26, 136, 137, 88, 150, 64, 102, 74, 42, 73, 73, 37, 2, 96, 18, 70, 33, 81, 102, 8, 153, 68, 89, 24, 96, 154, 129, 104, 136, 6, 25, 21, 105, 22, 98, 165, 85, 148, 68, 88, 25, 8, 89, 26, 86, 73, 84, 137, 90, 90, 148, 106, 152, 97, 33, 90, 18, 90, 137, 132, 73, 22, 90, 162, 169, 169, 153, 105, 105, 38, 17, 24, 105, 165, 106, 69, 161, 90, 73, 137, 169, 18, 4, 90, 70, 37, 40, 132, 166, 153, 74, 145, 102, 137, 66, 138, 105, 40, 106, 170, 72, 21, 160, 90, 160, 136, 144, 74, 133, 105, 145, 38, 98, 70, 81, 137, 161, 153, 169, 100, 74, 18, 1, 64, 41, 38, 138, 26, 85, 153, 37, 36, 34, 152, 90, 166, 161, 148, 161, 86, 152, 38, 170, 64, 170, 160, 144, 21, 41, 165, 86, 106, 18, 146, 164, 41, 69, 136, 154, 32, 166, 81, 133, 88, 162, 129, 144, 21, 74, 70, 90, 106, 168, 64, 42, 85, 160, 101, 42, 97, 80, 22, 26, 80, 165, 102, 38, 0, 96, 21, 162, 164, 26, 9, 41, 38, 97, 85, 166, 106, 22, 134, 152, 106, 38, 161, 145, 10, 169, 85, 153, 169, 72, 70, 85, 98, 26, 70, 161, 74, 90, 33, 68, 129, 10, 26, 26, 148, 36, 169, 129, 16, 9, 36, 70, 90, 136, 85, 98, 0, 6, 6, 69, 1, 69, 134, 8, 70, 8, 64, 68, 18, 90, 81, 137, 161, 161, 85, 85, 165, 130, 18, 89, 68, 5, 40, 166, 86, 136, 38, 136, 80, 152, 166, 168, 41, 24, 10, 86, 85, 36, 161, 82, 72, 90, 8, 98, 84, 128, 82, 168, 10, 86, 26, 133, 0, 38, 106, 80, 106, 66, 10, 66, 42, 133, 132, 146, 0, 6, 100, 150, 136, 6, 40, 88, 22, 137, 24},
    {105, 102, 34, 166, 33, 161, 86, 136, 22, 5, 101, 22, 88, 133, 96, 66, 24, 97, 2, 138, 6, 33, 102, 21, 134, 74, 133, 73, 22, 105, 161, 74, 144, 34, 149, 70, 21, 85, 170, 102, 80, 41, 161, 100, 74, 68, 97, 97, 100, 5, 154, 24, 97, 33, 106, 136, 130, 69, 153, 8, 20, 17, 138, 26, 104, 33, 21, 25, 33, 96, 144, 8, 72, 102, 97, 106, 21, 170, 105, 1, 24, 134, 148, 129, 16, 64, 97, 9, 144, 132, 74, 136, 24, 0, 160, 68, 154, 128, 106, 73, 69, 73, 90, 169, 88, 65, 166, 145, 162, 37, 153, 84, 106, 4, 26, 132, 37, 164, 33, 65, 153, 86, 100, 165, 170, 150, 22, 90, 154, 161, 10, 168, 152, 106, 85, 85, 65, 20, 166, 89, 22, 106, 89, 133, 102, 96, 153, 64, 20, 34, 25, 89, 90, 36, 105, 168, 96, 164, 72, 42, 18, 42, 105, 33, 18, 74, 149, 128, 129, 148, 88, 66, 102, 42, 8, 168, 74, 166, 152, 170, 150, 162, 154, 162, 65, 41, 90, 150, 26, 152, 149, 138, 136, 153, 104, 8, 81, 41, 105, 150, 145, 36, 164, 69, 170, 148, 161, 90, 105, 144, 132, 38, 42, 106, 25, 96, 2, 40, 73, 164, 98, 72, 164, 4, 104, 97, 26, 161, 26, 98, 25, 166, 105, 9, 165, 90, 105, 66, 5, 85, 100, 17, 165, 101, 65, 152, 137, 134, 88, 101, 81, 133, 150, 86, 153, 134, 105, 38, 149, 136, 100, 89, 168, 170, 168, 102, 42, 153, 68, 21, 84, 24, 153, 80, 86, 98, 89, 102, 69, 170, 132, 74, 148, 105, 149, 150, 70, 149, 4, 40, 153, 152, 133, 105, 34, 169, 97, 25, 34, 137, 90, 69, 84, 6, 170, 105, 38, 144, 137, 6, 169, 6, 73, 102, 164, 2, 89, 85, 86, 32, 161, 145, 17, 164, 164, 88, 146, 85, 40, 34, 72, 106, 170, 161, 145, 149, 148, 73, 104, 20, 104, 146, 136, 162, 82, 80, 82, 16, 97, 16, 106, 69, 82, 162, 9, 164, 150, 1, 134, 34, 154, 145, 98, 41, 38, 18, 82, 133, 38, 101, 10, 144, 88, 102, 170, 130, 164, 162, 82, 73, 169, 166, 90, 18},
    {145, 97, 69, 85, 68, 100, 138, 38, 90, 164, 33, 101, 37, 162, 26, 104, 25, 145, 10, 74, 98, 16, 160, 25, 148, 152, 101, 18, 36, 5, 64, 86, 146, 42, 86, 20, 104, 66, 88, 165, 90, 96, 88, 72, 168, 25, 2, 86, 154, 26, 68, 169, 154, 160, 104, 16, 164, 149, 128, 20, 70, 100, 90, 160, 74, 9, 20, 40, 105, 148, 150, 85, 2, 89, 106, 1, 132, 149, 42, 134, 106, 98, 162, 40, 88, 169, 104, 84, 73, 36, 37, 2, 136, 86, 9, 5, 20, 100, 1, 165, 90, 102, 169, 86, 148, 4, 106, 21, 26, 86, 153, 105, 145, 84, 134, 90, 137, 84, 132, 153, 73, 0, 21, 148, 149, 134, 152, 164, 154, 137, 90, 164, 144, 100, 96, 86, 145, 154, 72, 150, 17, 90, 33, 89, 133, 133, 105, 165, 168, 170, 134, 134, 9, 72, 106, 72, 10, 170, 90, 160, 138, 86, 88, 85, 166, 20, 170, 145, 42, 149, 17, 150, 73, 74, 162, 70, 65, 21, 36, 89, 162, 104, 129, 164, 104, 104, 38, 96, 134, 153, 24, 136, 169, 98, 80, 98, 96, 66, 6, 66, 10, 134, 26, 74, 132, 74, 148, 165, 152, 138, 25, 34, 101, 162, 133, 41, 5, 98, 84, 153, 69, 84, 166, 137, 148, 88, 154, 5, 128, 38, 25, 90, 86, 74, 150, 164, 138, 145, 0, 36, 132, 134, 26, 82, 21, 34, 42, 6, 84, 106, 153, 132, 86, 165, 40, 22, 105, 82, 89, 105, 129, 37, 17, 137, 137, 22, 133, 102, 72, 33, 42, 145, 166, 134, 133, 98, 88, 132, 22, 22, 26, 149, 5, 162, 150, 153, 32, 105, 85, 128, 148, 86, 170, 105, 88, 130, 41, 85, 164, 86, 81, 104, 5, 132, 134, 149, 73, 165, 16, 38, 146, 144, 102, 64, 149, 165, 5, 98, 22, 21, 169, 25, 165, 80, 169, 73, 136, 170, 42, 164, 97, 146, 88, 81, 137, 41, 130, 170, 17, 160, 133, 128, 34, 101, 86, 20, 133, 98, 2, 38, 84, 1, 104, 26, 86, 10, 32, 0, 89, 69, 81, 170, 105, 160, 88, 40, 153, 70, 165, 169, 0, 161, 101, 105, 89, 37, 90, 72, 150, 17, 38, 84, 24, 104},
    {161, 1, 145, 66, 22, 16, 18, 129, 152, 102, 74, 137, 146, 4, 68, 0, 80, 37, 144, 72, 148, 148, 42, 21, 81, 148, 34, 9, 85, 105, 84, 100, 98, 96, 160, 150, 24, 170, 10, 84, 97, 150, 150, 170, 85, 73, 88, 170, 137, 9, 150, 96, 134, 149, 90, 101, 144, 101, 153, 22, 101, 6, 161, 85, 20, 72, 105, 154, 98, 150, 70, 65, 150, 148, 144, 161, 22, 4, 128, 65, 153, 165, 37, 98, 85, 169, 20, 144, 21, 154, 21, 162, 70, 148, 136, 137, 41, 40, 85, 106, 86, 36, 154, 36, 72, 134, 82, 153, 89, 36, 33, 104, 65, 105, 145, 38, 40, 25, 106, 84, 106, 21, 153, 97, 145, 24, 90, 90, 89, 74, 89, 90, 136, 149, 145, 150, 90, 74, 165, 86, 24, 85, 25, 1, 34, 16, 22, 88, 164, 1, 148, 6, 145, 169, 21, 105, 90, 145, 80, 98, 137, 33, 145, 10, 42, 42, 73, 164, 106, 86, 41, 25, 25, 89, 81, 21, 128, 22, 148, 153, 154, 132, 26, 169, 164, 86, 64, 82, 102, 41, 65, 80, 148, 33, 1, 169, 22, 70, 21, 106, 86, 146, 72, 162, 165, 65, 74, 134, 20, 86, 20, 4, 160, 20, 154, 102, 89, 152, 137, 162, 104, 42, 68, 80, 145, 64, 102, 26, 85, 150, 72, 170, 106, 25, 85, 18, 24, 85, 37, 68, 162, 96, 104, 96, 134, 4, 85, 148, 148, 32, 33, 88, 86, 106, 105, 84, 153, 34, 25, 168, 154, 89, 96, 25, 73, 170, 98, 6, 102, 164, 81, 10, 38, 137, 146, 32, 41, 26, 88, 134, 152, 37, 165, 169, 80, 86, 101, 105, 101, 5, 68, 153, 5, 73, 100, 150, 129, 149, 32, 168, 105, 84, 138, 33, 73, 97, 101, 152, 4, 90, 132, 154, 132, 105, 2, 17, 21, 82, 138, 8, 22, 170, 146, 98, 9, 164, 88, 153, 166, 169, 166, 169, 73, 89, 90, 82, 148, 80, 101, 161, 129, 70, 25, 9, 5, 129, 74, 6, 17, 74, 41, 104, 68, 90, 90, 38, 4, 85, 162, 41, 65, 106, 73, 145, 84, 68, 38, 73, 74, 34, 144, 104, 137, 73, 84, 88, 25, 130, 17, 137, 101, 89, 137, 144},
    {10, 162, 85, 145, 169, 100, 4, 102, 102, 41, 5, 154, 85, 100, 25, 128, 20, 169, 154, 154, 86, 100, 66, 70, 161, 154, 164, 102, 80, 101, 26, 86, 102, 10, 169, 65, 149, 148, 144, 26, 17, 105, 160, 169, 68, 66, 133, 20, 70, 166, 101, 89, 102, 132, 170, 6, 161, 170, 81, 86, 161, 38, 106, 90, 86, 162, 148, 34, 101, 146, 150, 145, 68, 81, 162, 33, 25, 70, 164, 88, 166, 101, 86, 88, 85, 145, 85, 105, 81, 36, 36, 34, 106, 161, 168, 22, 40, 42, 37, 18, 40, 153, 37, 26, 101, 65, 70, 153, 37, 165, 152, 101, 169, 18, 86, 69, 166, 70, 134, 148, 38, 162, 170, 149, 24, 5, 73, 90, 102, 153, 129, 84, 132, 68, 162, 74, 90, 36, 138, 34, 25, 170, 89, 153, 154, 149, 148, 86, 25, 149, 38, 70, 36, 18, 4, 42, 85, 89, 164, 74, 26, 154, 166, 166, 149, 89, 69, 33, 128, 105, 89, 154, 88, 161, 22, 138, 42, 80, 104, 104, 25, 70, 130, 162, 145, 81, 21, 73, 73, 69, 74, 82, 17, 162, 154, 106, 41, 66, 133, 150, 84, 85, 65, 150, 149, 20, 97, 90, 34, 145, 152, 37, 138, 22, 22, 18, 129, 86, 154, 105, 100, 41, 164, 21, 165, 96, 146, 102, 161, 41, 98, 41, 146, 150, 152, 169, 148, 73, 85, 22, 148, 145, 1, 38, 21, 164, 137, 40, 32, 10, 70, 9, 170, 70, 162, 26, 152, 129, 85, 25, 152, 37, 84, 68, 104, 24, 20, 130, 21, 170, 41, 9, 106, 18, 152, 153, 2, 90, 149, 96, 132, 129, 90, 170, 137, 37, 84, 22, 74, 168, 85, 85, 146, 25, 18, 153, 106, 8, 169, 80, 101, 38, 164, 97, 153, 166, 66, 161, 85, 149, 144, 6, 137, 100, 22, 149, 1, 65, 132, 105, 26, 85, 168, 150, 66, 80, 81, 2, 80, 4, 134, 84, 72, 102, 168, 137, 72, 21, 34, 104, 136, 80, 130, 16, 138, 34, 166, 16, 69, 106, 37, 18, 100, 152, 41, 68, 146, 6, 102, 18, 98, 136, 81, 148, 97, 170, 105, 66, 37, 90, 97, 170, 81, 101, 164, 89, 86, 90, 25, 105, 146, 164, 73, 102},
    {18, 37, 149, 153, 82, 32, 132, 106, 168, 106, 34, 160, 150, 168, 81, 162, 37, 86, 152, 148, 105, 168, 100, 154, 138, 136, 168, 88, 72, 88, 161, 134, 138, 134, 138, 150, 133, 16, 164, 132, 40, 170, 102, 133, 145, 25, 20, 105, 37, 6, 89, 162, 133, 24, 166, 105, 106, 86, 160, 21, 154, 90, 2, 86, 81, 150, 154, 80, 97, 85, 128, 170, 82, 161, 72, 149, 10, 42, 134, 84, 1, 170, 105, 10, 100, 136, 153, 18, 137, 162, 84, 169, 37, 106, 132, 86, 73, 88, 148, 132, 102, 25, 102, 97, 137, 26, 146, 42, 154, 144, 20, 136, 162, 168, 170, 80, 148, 154, 37, 85, 134, 26, 105, 154, 104, 150, 98, 154, 81, 138, 81, 80, 21, 22, 161, 153, 69, 102, 145, 90, 150, 153, 9, 0, 106, 146, 89, 86, 101, 42, 102, 104, 22, 166, 37, 148, 106, 22, 150, 133, 36, 149, 88, 72, 41, 5, 26, 164, 137, 105, 16, 137, 22, 86, 66, 2, 150, 145, 165, 9, 41, 41, 100, 6, 102, 72, 136, 104, 69, 138, 98, 10, 98, 81, 98, 145, 152, 2, 170, 26, 105, 98, 64, 70, 1, 148, 169, 148, 145, 8, 8, 37, 66, 144, 96, 26, 146, 169, 82, 40, 66, 144, 148, 170, 90, 170, 25, 145, 98, 154, 66, 42, 6, 170, 64, 105, 40, 88, 86, 1, 34, 69, 137, 149, 146, 24, 161, 81, 106, 162, 24, 168, 73, 0, 22, 5, 1, 85, 41, 165, 10, 90, 85, 90, 81, 90, 88, 153, 169, 161, 165, 106, 153, 102, 70, 6, 136, 148, 160, 149, 104, 5, 69, 154, 138, 98, 1, 82, 169, 153, 136, 5, 104, 21, 5, 168, 37, 150, 65, 168, 65, 2, 32, 42, 89, 74, 82, 18, 26, 105, 98, 101, 86, 101, 42, 128, 64, 33, 41, 25, 164, 64, 80, 170, 86, 154, 136, 161, 168, 36, 170, 154, 100, 168, 145, 105, 97, 22, 106, 8, 6, 42, 10, 69, 148, 73, 38, 134, 37, 134, 32, 33, 66, 128, 34, 161, 26, 17, 72, 100, 88, 104, 6, 152, 26, 149, 42, 6, 80, 146, 81, 152, 150, 37, 82, 129, 81, 104, 106, 40, 9, 96, 161, 64},
    {101, 133, 5, 81, 102, 165, 81, 22, 84, 21, 153, 24, 8, 74, 150, 68, 66, 98, 138, 81, 34, 88, 68, 80, 73, 130, 130, 9, 25, 128, 166, 88, 1, 21, 134, 5, 41, 138, 37, 104, 129, 130, 86, 66, 145, 89, 168, 69, 16, 34, 73, 129, 20, 101, 133, 42, 65, 164, 150, 101, 22, 170, 160, 152, 25, 166, 90, 168, 148, 69, 165, 105, 137, 18, 152, 145, 24, 162, 10, 84, 148, 101, 85, 132, 152, 169, 169, 134, 72, 36, 74, 137, 22, 70, 22, 134, 9, 37, 16, 102, 166, 84, 17, 10, 36, 97, 34, 161, 98, 1, 25, 24, 36, 168, 21, 1, 22, 74, 20, 86, 105, 144, 88, 38, 102, 100, 132, 26, 69, 86, 104, 90, 21, 170, 137, 65, 21, 88, 162, 161, 68, 146, 65, 137, 161, 98, 162, 81, 105, 88, 16, 96, 8, 145, 96, 6, 1, 102, 85, 22, 102, 148, 146, 153, 166, 21, 86, 160, 105, 133, 150, 96, 154, 150, 2, 134, 169, 22, 154, 170, 70, 22, 20, 26, 102, 166, 170, 24, 150, 169, 153, 148, 106, 136, 2, 89, 70, 133, 138, 22, 74, 132, 81, 165, 41, 72, 138, 36, 32, 138, 132, 40, 168, 84, 102, 65, 89, 98, 160, 34, 17, 150, 42, 165, 70, 106, 104, 84, 68, 26, 21, 20, 82, 89, 100, 88, 82, 105, 164, 132, 20, 69, 21, 105, 80, 74, 25, 129, 88, 90, 81, 66, 42, 101, 96, 144, 22, 102, 101, 98, 86, 64, 0, 154, 105, 2, 40, 88, 86, 24, 21, 170, 101, 165, 68, 17, 64, 165, 153, 98, 73, 144, 130, 146, 85, 154, 33, 9, 1, 84, 164, 137, 106, 146, 40, 37, 166, 150, 128, 104, 69, 169, 138, 41, 66, 137, 18, 169, 66, 82, 102, 129, 89, 128, 21, 133, 137, 146, 73, 21, 8, 132, 138, 81, 162, 100, 72, 168, 170, 102, 6, 17, 32, 37, 166, 134, 134, 160, 22, 166, 22, 69, 148, 130, 73, 73, 81, 66, 132, 64, 129, 134, 133, 101, 38, 134, 2, 22, 169, 138, 89, 84, 165, 18, 145, 96, 37, 40, 85, 40, 74, 17, 146, 32, 73, 166, 16, 22, 9, 148, 32, 90, 70, 85},
    {138, 6, 70, 153, 106, 153, 88, 133, 88, 82, 152, 38, 37, 5, 166, 90, 10, 150, 89, 130, 10, 137, 18, 106, 106, 104, 137, 96, 144, 101, 165, 17, 106, 41, 164, 97, 146, 80, 68, 146, 162, 100, 105, 96, 105, 138, 134, 145, 68, 90, 85, 161, 69, 89, 89, 70, 106, 18, 133, 36, 34, 164, 37, 69, 148, 150, 6, 37, 148, 70, 69, 128, 105, 149, 166, 96, 16, 25, 106, 130, 42, 10, 153, 168, 96, 38, 25, 161, 165, 90, 86, 154, 136, 96, 168, 145, 146, 88, 133, 64, 170, 129, 145, 38, 10, 72, 134, 170, 33, 166, 5, 42, 9, 84, 16, 88, 86, 37, 40, 137, 98, 138, 86, 169, 150, 106, 153, 81, 137, 148, 153, 137, 102, 17, 85, 98, 146, 36, 102, 162, 72, 106, 150, 148, 90, 134, 72, 146, 130, 84, 89, 82, 138, 100, 24, 10, 9, 40, 96, 88, 20, 33, 4, 89, 162, 90, 70, 166, 154, 90, 145, 38, 33, 169, 88, 105, 82, 129, 101, 154, 164, 162, 136, 36, 42, 154, 166, 136, 38, 168, 82, 37, 9, 17, 89, 101, 101, 25, 6, 106, 37, 89, 65, 153, 21, 149, 90, 128, 68, 170, 134, 138, 70, 102, 74, 5, 154, 138, 98, 72, 105, 100, 161, 162, 86, 133, 133, 68, 149, 170, 38, 41, 160, 105, 82, 68, 152, 152, 26, 105, 42, 70, 37, 96, 133, 84, 84, 161, 106, 97, 150, 149, 37, 96, 153, 105, 6, 166, 74, 86, 170, 85, 130, 170, 100, 85, 105, 81, 6, 22, 152, 37, 22, 73, 170, 169, 86, 170, 169, 5, 26, 161, 90, 26, 5, 144, 152, 2, 42, 36, 90, 170, 18, 148, 165, 161, 129, 154, 132, 145, 32, 42, 132, 73, 169, 85, 65, 90, 129, 132, 101, 96, 84, 161, 169, 69, 101, 162, 152, 16, 20, 161, 89, 37, 36, 164, 97, 5, 129, 68, 6, 149, 37, 81, 70, 5, 104, 34, 105, 33, 85, 161, 170, 100, 168, 97, 68, 6, 34, 33, 84, 169, 138, 105, 74, 101, 41, 106, 152, 38, 145, 80, 134, 66, 70, 165, 72, 86, 36, 133, 150, 41, 32, 104, 106, 137, 2, 145, 5, 149, 165, 81, 40, 88},
    {129, 104, 88, 152, 168, 161, 162, 128, 86, 32, 8, 4, 150, 16, 168, 85, 33, 74, 128, 85, 102, 25, 165, 69, 73, 138, 68, 138, 106, 170, 146, 154, 74, 145, 41, 149, 33, 22, 160, 21, 100, 149, 42, 73, 145, 152, 10, 148, 86, 165, 86, 1, 34, 146, 154, 5, 100, 86, 149, 8, 106, 170, 152, 17, 106, 149, 70, 82, 89, 100, 70, 84, 137, 150, 5, 132, 82, 96, 134, 66, 9, 90, 102, 18, 161, 168, 154, 170, 8, 40, 32, 149, 8, 170, 26, 164, 37, 10, 18, 88, 4, 149, 69, 150, 146, 97, 21, 170, 106, 38, 33, 40, 153, 105, 85, 106, 106, 84, 150, 153, 102, 16, 81, 170, 84, 96, 86, 105, 70, 170, 146, 90, 169, 154, 81, 154, 89, 84, 134, 130, 42, 160, 73, 128, 8, 152, 154, 165, 74, 97, 81, 130, 85, 32, 26, 169, 85, 106, 132, 97, 102, 149, 73, 86, 128, 8, 100, 106, 21, 89, 101, 98, 70, 73, 72, 137, 153, 22, 136, 153, 84, 137, 148, 38, 97, 164, 38, 74, 101, 165, 105, 88, 138, 80, 81, 89, 165, 146, 66, 129, 106, 152, 1, 16, 170, 70, 136, 36, 73, 42, 40, 154, 89, 10, 154, 64, 90, 34, 88, 37, 69, 73, 96, 106, 98, 20, 165, 101, 136, 138, 80, 5, 0, 26, 160, 10, 25, 153, 145, 0, 133, 80, 20, 86, 97, 148, 102, 6, 105, 100, 100, 134, 70, 105, 130, 22, 170, 170, 42, 166, 169, 85, 128, 136, 17, 89, 150, 36, 82, 68, 100, 73, 166, 9, 168, 65, 86, 32, 164, 80, 105, 84, 86, 105, 40, 168, 20, 73, 102, 136, 137, 161, 154, 85, 149, 153, 102, 81, 169, 41, 89, 10, 136, 106, 98, 33, 161, 18, 148, 104, 24, 145, 26, 37, 85, 9, 74, 164, 22, 41, 70, 26, 164, 66, 8, 1, 134, 38, 66, 106, 6, 149, 20, 129, 160, 90, 21, 132, 40, 18, 41, 165, 138, 41, 165, 9, 170, 6, 89, 170, 104, 165, 98, 105, 26, 65, 133, 148, 145, 106, 165, 88, 145, 6, 21, 166, 137, 168, 38, 154, 82, 81, 86, 68, 138, 72, 138, 21, 100, 104, 170, 2, 152, 132},
    {136, 74, 154, 137, 37, 161, 154, 96, 85, 150, 88, 73, 41, 153, 66, 65, 24, 37, 165, 90, 137, 149, 132, 70, 85, 145, 38, 68, 86, 106, 146, 72, 101, 165, 38, 170, 105, 134, 42, 152, 42, 84, 137, 73, 74, 101, 152, 18, 24, 85, 169, 86, 18, 145, 21, 70, 84, 38, 129, 10, 133, 166, 5, 170, 22, 8, 129, 24, 40, 161, 149, 165, 6, 137, 134, 154, 165, 97, 152, 154, 73, 137, 149, 136, 9, 24, 64, 165, 68, 26, 5, 90, 85, 41, 69, 37, 169, 136, 165, 153, 148, 153, 82, 150, 16, 104, 101, 154, 96, 80, 153, 106, 90, 164, 168, 105, 68, 69, 26, 104, 102, 137, 169, 105, 81, 170, 153, 168, 101, 149, 134, 17, 66, 70, 69, 89, 88, 70, 101, 166, 104, 18, 170, 98, 161, 21, 136, 164, 101, 138, 138, 101, 137, 5, 100, 81, 106, 145, 130, 88, 161, 98, 144, 25, 161, 73, 161, 89, 133, 66, 101, 96, 4, 150, 4, 40, 129, 5, 106, 133, 149, 170, 80, 26, 105, 80, 166, 84, 85, 161, 160, 149, 105, 152, 38, 97, 82, 134, 70, 133, 34, 129, 154, 137, 129, 5, 42, 40, 138, 164, 166, 128, 36, 169, 22, 42, 161, 168, 168, 34, 82, 153, 129, 17, 105, 137, 164, 80, 73, 6, 37, 96, 98, 101, 161, 134, 25, 166, 16, 22, 22, 86, 85, 97, 6, 88, 32, 86, 33, 100, 168, 105, 162, 38, 106, 96, 152, 170, 134, 86, 69, 132, 133, 164, 98, 105, 137, 149, 36, 85, 6, 168, 168, 150, 102, 146, 168, 149, 170, 106, 9, 22, 34, 89, 6, 104, 69, 165, 162, 26, 162, 104, 69, 136, 4, 100, 104, 64, 84, 73, 130, 154, 73, 98, 22, 36, 74, 65, 64, 90, 84, 8, 144, 36, 4, 145, 88, 88, 98, 0, 132, 25, 1, 42, 72, 154, 152, 97, 170, 20, 96, 69, 42, 128, 33, 138, 133, 24, 70, 101, 106, 161, 6, 100, 161, 162, 0, 25, 24, 74, 165, 5, 160, 154, 136, 102, 145, 84, 8, 101, 25, 22, 153, 90, 129, 22, 152, 32, 24, 90, 21, 42, 160, 134, 81, 154, 2, 133, 160, 10, 101, 170, 90, 73},
    {80, 36, 101, 22, 84, 150, 166, 32, 162, 98, 22, 74, 165, 74, 100, 160, 164, 20, 86, 17, 89, 146, 134, 162, 149, 8, 36, 106, 129, 106, 37, 42, 36, 84, 2, 86, 146, 137, 161, 153, 37, 97, 81, 25, 64, 168, 16, 9, 89, 161, 34, 154, 130, 101, 169, 69, 130, 104, 146, 42, 41, 9, 74, 36, 74, 84, 168, 73, 21, 17, 89, 84, 90, 21, 82, 85, 8, 42, 85, 4, 21, 153, 40, 6, 80, 42, 136, 144, 74, 153, 25, 16, 152, 134, 5, 42, 166, 152, 40, 97, 86, 148, 80, 40, 40, 36, 146, 144, 24, 137, 144, 26, 150, 34, 98, 161, 105, 89, 153, 66, 154, 150, 102, 154, 153, 24, 166, 152, 145, 150, 133, 36, 102, 33, 70, 149, 97, 166, 42, 129, 82, 152, 149, 150, 90, 20, 105, 136, 105, 134, 81, 105, 17, 81, 149, 40, 74, 74, 84, 68, 101, 105, 105, 148, 102, 88, 38, 74, 145, 85, 80, 161, 154, 149, 150, 84, 102, 106, 149, 100, 9, 162, 9, 18, 160, 97, 25, 37, 101, 66, 69, 0, 34, 152, 97, 137, 81, 154, 152, 154, 41, 128, 69, 170, 100, 160, 98, 132, 168, 106, 101, 170, 90, 6, 88, 26, 34, 153, 25, 2, 150, 90, 146, 168, 129, 37, 21, 165, 133, 144, 16, 42, 129, 165, 101, 89, 146, 101, 160, 21, 105, 34, 164, 74, 89, 148, 136, 137, 149, 148, 17, 0, 68, 9, 148, 68, 145, 22, 145, 153, 100, 149, 96, 162, 40, 129, 152, 22, 104, 154, 129, 152, 88, 40, 68, 153, 26, 101, 168, 40, 68, 170, 40, 106, 98, 130, 166, 100, 100, 105, 168, 102, 130, 86, 162, 98, 4, 86, 85, 144, 105, 169, 160, 128, 138, 69, 136, 150, 134, 65, 154, 132, 64, 10, 132, 137, 81, 65, 20, 69, 73, 5, 146, 106, 80, 38, 10, 38, 169, 37, 98, 24, 153, 132, 22, 84, 152, 100, 152, 72, 132, 32, 40, 36, 80, 42, 101, 64, 106, 86, 73, 68, 164, 81, 20, 90, 70, 5, 149, 133, 4, 164, 64, 152, 74, 37, 170, 152, 89, 26, 89, 9, 153, 5, 165, 104, 68, 81, 74, 148, 154, 105, 4, 85},
    {138, 88, 88, 64, 154, 37, 164, 69, 20, 149, 9, 106, 21, 64, 149, 97, 170, 84, 165, 161, 134, 149, 80, 96, 24, 152, 144, 130, 34, 144, 96, 149, 89, 136, 25, 17, 169, 41, 5, 154, 26, 162, 96, 162, 98, 150, 16, 41, 33, 36, 22, 145, 134, 145, 165, 41, 165, 84, 74, 9, 90, 154, 90, 100, 170, 69, 134, 34, 20, 70, 145, 5, 65, 70, 150, 65, 88, 98, 170, 145, 138, 64, 136, 69, 32, 168, 70, 40, 81, 150, 21, 82, 89, 168, 72, 38, 104, 129, 89, 164, 145, 85, 66, 144, 166, 24, 9, 169, 105, 88, 137, 85, 148, 81, 146, 38, 100, 150, 96, 20, 153, 129, 100, 166, 72, 138, 42, 146, 170, 40, 149, 136, 25, 134, 136, 101, 82, 105, 16, 18, 132, 73, 41, 42, 146, 148, 34, 132, 37, 153, 164, 32, 42, 34, 136, 66, 90, 69, 2, 25, 98, 25, 170, 97, 106, 2, 97, 100, 162, 66, 90, 4, 133, 164, 85, 6, 89, 101, 88, 6, 25, 81, 101, 32, 102, 105, 152, 101, 89, 136, 25, 20, 102, 136, 16, 16, 104, 68, 89, 153, 37, 0, 18, 154, 97, 137, 96, 148, 86, 70, 17, 164, 81, 101, 88, 25, 132, 22, 16, 22, 161, 132, 166, 101, 33, 72, 154, 81, 26, 5, 20, 26, 33, 148, 26, 134, 128, 42, 153, 150, 80, 98, 84, 164, 100, 74, 136, 106, 64, 150, 133, 133, 149, 137, 101, 20, 24, 38, 170, 40, 97, 146, 34, 25, 138, 146, 26, 26, 170, 102, 16, 100, 164, 97, 72, 33, 154, 146, 154, 84, 26, 153, 153, 148, 134, 38, 2, 101, 153, 36, 26, 166, 100, 65, 164, 100, 86, 17, 129, 69, 104, 148, 166, 70, 22, 34, 170, 72, 5, 128, 102, 149, 149, 70, 64, 65, 102, 149, 102, 132, 106, 65, 68, 146, 145, 41, 90, 132, 20, 40, 42, 41, 1, 100, 129, 97, 165, 168, 74, 69, 132, 32, 129, 72, 5, 0, 104, 100, 138, 160, 98, 37, 128, 98, 105, 130, 69, 101, 149, 160, 68, 86, 88, 72, 145, 17, 64, 17, 1, 170, 148, 70, 138, 149, 85, 137, 102, 88, 129, 66, 132, 69, 36, 153},
    {4, 98, 138, 22, 22, 153, 1, 68, 80, 38, 100, 168, 66, 37, 168, 18, 154, 153, 128, 165, 84, 80, 81, 129, 105, 150, 90, 101, 70, 8, 37, 102, 25, 137, 85, 146, 6, 150, 24, 85, 170, 9, 34, 101, 82, 21, 72, 68, 169, 149, 32, 10, 38, 89, 104, 134, 69, 161, 105, 41, 166, 133, 26, 168, 86, 41, 74, 74, 165, 21, 18, 65, 85, 133, 102, 34, 81, 168, 170, 18, 106, 26, 40, 41, 106, 24, 164, 152, 165, 40, 89, 105, 82, 152, 80, 65, 68, 88, 100, 68, 136, 38, 82, 148, 64, 2, 24, 98, 164, 138, 42, 36, 9, 129, 6, 149, 89, 88, 105, 33, 138, 101, 168, 170, 164, 74, 22, 36, 134, 169, 6, 80, 136, 5, 152, 149, 152, 165, 90, 165, 64, 90, 41, 9, 102, 80, 149, 21, 101, 130, 86, 101, 88, 134, 154, 24, 169, 85, 10, 161, 20, 152, 38, 170, 96, 33, 166, 97, 86, 16, 144, 101, 161, 144, 165, 38, 40, 130, 160, 17, 145, 149, 18, 165, 133, 166, 85, 84, 42, 164, 6, 82, 90, 133, 10, 136, 26, 16, 65, 70, 145, 150, 136, 64, 26, 146, 73, 37, 146, 89, 160, 17, 84, 84, 69, 128, 20, 162, 10, 149, 10, 153, 100, 145, 130, 150, 98, 90, 104, 81, 90, 97, 74, 106, 69, 165, 97, 88, 106, 73, 89, 85, 73, 150, 166, 25, 97, 85, 153, 137, 166, 33, 168, 18, 25, 164, 97, 104, 149, 69, 105, 168, 69, 70, 42, 70, 133, 168, 9, 148, 42, 97, 169, 16, 96, 42, 133, 100, 10, 81, 80, 82, 106, 5, 129, 20, 128, 168, 98, 38, 161, 144, 22, 153, 90, 105, 81, 68, 8, 24, 146, 85, 97, 73, 162, 88, 22, 80, 68, 132, 162, 97, 146, 164, 161, 81, 134, 5, 101, 2, 152, 165, 146, 70, 89, 133, 148, 25, 130, 6, 68, 24, 9, 129, 42, 37, 137, 170, 148, 98, 102, 89, 4, 10, 168, 37, 66, 104, 98, 20, 130, 81, 82, 133, 170, 98, 170, 128, 152, 42, 0, 66, 149, 102, 82, 10, 25, 68, 64, 86, 84, 166, 102, 149, 2, 166, 21, 130, 144, 80, 86, 136, 146, 138},
    {166, 98, 17, 2, 33, 72, 86, 10, 152, 132, 166, 72, 148, 88, 129, 86, 162, 21, 89, 97, 41, 128, 106, 160, 100, 72, 133, 2, 130, 97, 164, 100, 154, 100, 4, 165, 170, 101, 84, 20, 168, 86, 137, 144, 40, 162, 8, 166, 86, 96, 66, 33, 162, 144, 168, 105, 88, 145, 41, 85, 73, 74, 66, 138, 169, 5, 154, 80, 68, 161, 38, 16, 82, 69, 168, 154, 86, 90, 81, 9, 145, 34, 74, 26, 85, 161, 90, 65, 82, 24, 10, 168, 65, 150, 105, 90, 42, 166, 133, 85, 130, 164, 70, 86, 170, 24, 85, 102, 137, 132, 25, 105, 73, 161, 89, 26, 146, 168, 1, 154, 21, 149, 9, 89, 101, 98, 82, 106, 26, 36, 136, 165, 150, 86, 8, 133, 138, 17, 22, 22, 90, 34, 133, 80, 20, 4, 21, 166, 2, 133, 169, 41, 20, 150, 146, 101, 106, 65, 105, 165, 166, 98, 38, 130, 149, 134, 161, 137, 86, 41, 74, 128, 25, 149, 0, 6, 166, 20, 162, 25, 170, 166, 38, 90, 132, 132, 34, 149, 90, 8, 166, 74, 26, 65, 134, 130, 98, 0, 165, 66, 161, 8, 22, 170, 154, 81, 145, 42, 74, 165, 150, 81, 149, 66, 5, 96, 100, 165, 166, 100, 134, 161, 104, 86, 133, 170, 68, 41, 100, 9, 22, 37, 100, 128, 152, 81, 21, 74, 2, 105, 166, 10, 84, 42, 105, 137, 17, 137, 0, 86, 65, 81, 20, 100, 86, 130, 25, 136, 66, 1, 134, 33, 20, 152, 102, 100, 9, 73, 104, 9, 42, 161, 73, 149, 133, 97, 70, 146, 148, 85, 106, 165, 85, 153, 97, 18, 130, 32, 162, 40, 105, 72, 37, 82, 84, 102, 129, 68, 2, 96, 106, 69, 4, 72, 6, 16, 106, 150, 164, 18, 82, 138, 69, 166, 69, 84, 17, 88, 149, 64, 137, 6, 34, 86, 38, 146, 38, 0, 166, 36, 153, 33, 10, 36, 68, 8, 129, 42, 6, 165, 82, 164, 81, 10, 101, 101, 165, 10, 73, 138, 0, 149, 137, 2, 165, 166, 25, 41, 102, 64, 128, 138, 104, 4, 68, 166, 148, 68, 168, 136, 38, 16, 148, 22, 1, 161, 41, 96, 21, 70, 33, 32, 154, 38},
    {170, 129, 102, 106, 25, 150, 153, 68, 84, 80, 165, 102, 153, 81, 42, 165, 24, 166, 74, 69, 105, 169, 130, 148, 82, 150, 81, 166, 101, 65, 138, 38, 98, 72, 26, 17, 65, 149, 25, 128, 42, 149, 90, 84, 166, 152, 21, 72, 106, 66, 132, 64, 154, 169, 150, 97, 22, 170, 21, 166, 102, 153, 160, 80, 36, 136, 101, 18, 161, 89, 86, 161, 164, 34, 153, 146, 153, 150, 26, 2, 105, 42, 68, 169, 21, 90, 10, 149, 170, 152, 100, 166, 72, 64, 128, 36, 36, 86, 42, 36, 165, 152, 42, 22, 17, 84, 104, 166, 153, 37, 38, 9, 41, 164, 90, 146, 164, 81, 165, 146, 105, 85, 85, 40, 164, 89, 160, 152, 162, 164, 33, 68, 66, 106, 41, 138, 82, 106, 128, 165, 98, 104, 129, 42, 34, 96, 38, 161, 82, 169, 69, 66, 82, 82, 40, 82, 41, 138, 170, 22, 133, 34, 96, 89, 102, 70, 148, 4, 82, 162, 69, 37, 10, 160, 150, 97, 106, 138, 73, 32, 88, 6, 2, 165, 66, 160, 148, 168, 36, 10, 41, 138, 105, 16, 165, 153, 100, 9, 16, 22, 25, 162, 32, 164, 148, 101, 137, 4, 24, 22, 133, 21, 162, 86, 146, 24, 161, 81, 90, 89, 36, 41, 165, 72, 81, 105, 162, 32, 134, 21, 160, 36, 100, 145, 161, 154, 105, 106, 82, 138, 85, 21, 161, 21, 168, 170, 21, 144, 152, 8, 74, 132, 132, 25, 166, 134, 100, 144, 154, 106, 0, 90, 149, 146, 146, 26, 154, 33, 96, 98, 153, 168, 164, 133, 32, 80, 41, 162, 130, 5, 148, 168, 105, 86, 148, 168, 128, 132, 144, 64, 153, 145, 72, 17, 84, 17, 22, 41, 65, 34, 130, 20, 160, 134, 65, 152, 132, 36, 18, 10, 73, 148, 38, 25, 74, 144, 146, 1, 98, 1, 34, 41, 1, 20, 145, 161, 85, 128, 137, 86, 66, 64, 102, 145, 148, 96, 100, 41, 169, 74, 137, 4, 132, 1, 164, 37, 85, 132, 80, 154, 85, 37, 81, 5, 6, 106, 18, 36, 102, 0, 132, 41, 84, 136, 86, 64, 97, 25, 132, 41, 100, 38, 85, 138, 161, 97, 70, 70, 66, 100, 153, 9, 33, 153},
    {132, 134, 149, 102, 68, 150, 6, 136, 153, 26, 148, 21, 18, 150, 74, 154, 134, 134, 101, 90, 25, 105, 165, 85, 96, 96, 153, 66, 20, 0, 105, 146, 65, 84, 66, 89, 102, 4, 146, 88, 42, 66, 138, 73, 90, 137, 168, 96, 37, 166, 85, 69, 137, 138, 34, 70, 25, 149, 164, 138, 65, 86, 128, 26, 96, 128, 90, 162, 102, 137, 85, 21, 146, 164, 64, 138, 149, 130, 148, 66, 22, 42, 66, 129, 102, 100, 145, 168, 154, 42, 82, 104, 21, 22, 101, 165, 137, 132, 166, 10, 160, 24, 85, 26, 146, 153, 9, 68, 42, 0, 26, 102, 0, 22, 33, 153, 8, 152, 86, 90, 153, 132, 161, 90, 26, 136, 73, 166, 165, 89, 170, 153, 169, 10, 149, 154, 22, 85, 25, 34, 145, 133, 101, 6, 165, 10, 96, 42, 136, 81, 137, 41, 138, 1, 34, 153, 40, 170, 88, 9, 86, 101, 153, 84, 20, 98, 104, 1, 84, 153, 8, 25, 81, 154, 89, 6, 96, 8, 148, 150, 164, 17, 90, 160, 42, 17, 149, 98, 146, 24, 98, 70, 150, 38, 138, 72, 165, 42, 86, 40, 146, 26, 21, 150, 149, 97, 166, 170, 145, 97, 146, 137, 162, 97, 81, 133, 148, 154, 65, 137, 68, 152, 64, 97, 26, 144, 73, 37, 41, 136, 165, 96, 80, 81, 86, 4, 84, 146, 136, 69, 84, 72, 89, 169, 169, 100, 20, 134, 84, 64, 105, 138, 101, 22, 85, 38, 90, 80, 89, 38, 66, 101, 90, 150, 101, 97, 37, 98, 165, 169, 145, 136, 98, 85, 100, 68, 129, 34, 2, 36, 80, 25, 102, 106, 73, 21, 89, 162, 89, 9, 153, 129, 21, 69, 98, 154, 36, 152, 65, 85, 73, 106, 42, 97, 0, 164, 164, 85, 10, 88, 166, 18, 100, 22, 34, 160, 65, 17, 161, 144, 25, 26, 137, 6, 17, 16, 88, 144, 137, 33, 33, 133, 90, 89, 164, 42, 81, 134, 102, 102, 130, 132, 96, 25, 85, 166, 96, 136, 168, 146, 86, 90, 168, 101, 22, 134, 162, 90, 0, 153, 153, 66, 100, 134, 0, 33, 100, 150, 38, 134, 21, 134, 65, 18, 22, 136, 41, 169, 4, 134, 162, 26, 80, 10},
    {102, 20, 169, 2, 10, 20, 24, 37, 36, 42, 162, 106, 32, 38, 169, 90, 6, 21, 9, 38, 169, 6, 24, 42, 17, 166, 165, 97, 106, 81, 21, 69, 169, 150, 17, 70, 69, 144, 97, 85, 21, 85, 86, 98, 160, 70, 168, 33, 133, 10, 37, 22, 41, 164, 34, 132, 168, 38, 26, 89, 97, 132, 25, 168, 136, 6, 152, 0, 0, 5, 86, 138, 26, 74, 17, 89, 24, 161, 41, 17, 149, 68, 1, 69, 36, 98, 89, 98, 18, 144, 89, 104, 152, 37, 134, 145, 22, 166, 26, 101, 154, 70, 137, 4, 5, 68, 168, 153, 170, 150, 16, 104, 164, 72, 153, 132, 32, 42, 89, 169, 37, 73, 102, 37, 64, 152, 17, 36, 102, 128, 128, 9, 132, 81, 88, 137, 74, 6, 8, 168, 73, 10, 16, 41, 154, 96, 102, 144, 162, 22, 98, 168, 137, 90, 154, 106, 26, 149, 20, 168, 37, 24, 42, 86, 97, 89, 106, 85, 32, 41, 98, 86, 89, 40, 146, 137, 21, 169, 81, 65, 65, 74, 86, 149, 100, 152, 37, 66, 86, 82, 20, 10, 72, 74, 90, 102, 146, 161, 69, 152, 146, 9, 66, 137, 68, 85, 24, 154, 81, 8, 154, 96, 69, 161, 88, 5, 105, 150, 10, 34, 153, 9, 165, 5, 138, 33, 66, 18, 162, 166, 134, 106, 164, 16, 138, 1, 97, 82, 100, 32, 132, 65, 10, 153, 69, 16, 0, 41, 101, 148, 101, 2, 170, 81, 132, 18, 154, 106, 98, 33, 133, 149, 69, 37, 102, 89, 65, 72, 90, 6, 85, 153, 166, 4, 42, 97, 152, 66, 128, 73, 133, 152, 26, 153, 164, 72, 40, 21, 100, 105, 161, 21, 84, 69, 106, 84, 97, 149, 20, 33, 1, 169, 26, 96, 69, 150, 74, 69, 129, 73, 105, 130, 88, 134, 149, 24, 69, 128, 145, 136, 69, 21, 64, 137, 144, 85, 2, 161, 101, 65, 98, 98, 134, 97, 22, 105, 4, 68, 170, 86, 136, 149, 153, 22, 102, 9, 25, 32, 32, 132, 21, 88, 168, 66, 42, 104, 86, 69, 134, 0, 133, 138, 66, 20, 129, 164, 82, 64, 129, 9, 160, 98, 90, 86, 5, 88, 80, 70, 98, 26, 153, 88, 102, 26},
    {130, 148, 166, 42, 9, 134, 74, 154, 105, 18, 88, 137, 6, 40, 146, 101, 169, 68, 6, 96, 154, 10, 81, 90, 154, 1, 21, 34, 128, 41, 73, 74, 97, 73, 169, 73, 89, 5, 149, 66, 36, 72, 96, 152, 145, 88, 5, 144, 170, 73, 129, 164, 42, 136, 73, 81, 145, 164, 149, 72, 70, 42, 68, 20, 41, 32, 88, 97, 37, 150, 81, 154, 89, 149, 80, 102, 26, 154, 70, 86, 160, 102, 88, 70, 37, 86, 138, 42, 106, 146, 150, 16, 42, 144, 149, 130, 40, 90, 134, 72, 145, 69, 42, 153, 98, 100, 153, 21, 38, 34, 16, 98, 81, 40, 8, 5, 26, 154, 154, 150, 153, 88, 169, 74, 101, 153, 82, 100, 81, 18, 84, 165, 25, 21, 149, 145, 88, 6, 101, 132, 101, 81, 74, 166, 154, 26, 145, 106, 165, 74, 132, 90, 4, 134, 81, 85, 104, 70, 168, 97, 34, 37, 89, 102, 161, 128, 42, 165, 90, 100, 37, 37, 88, 106, 37, 66, 152, 154, 150, 170, 154, 17, 137, 166, 74, 84, 84, 18, 144, 153, 168, 88, 105, 105, 17, 73, 169, 162, 149, 90, 166, 25, 160, 133, 22, 154, 21, 1, 154, 40, 90, 5, 66, 102, 81, 133, 86, 5, 70, 150, 170, 100, 16, 37, 168, 130, 38, 1, 88, 150, 38, 18, 17, 89, 162, 168, 2, 72, 153, 88, 81, 101, 42, 100, 165, 168, 148, 38, 162, 81, 148, 42, 170, 24, 148, 64, 164, 24, 84, 166, 80, 170, 132, 98, 34, 88, 5, 69, 130, 144, 69, 170, 130, 96, 86, 24, 136, 21, 73, 102, 98, 166, 37, 170, 70, 88, 85, 133, 40, 17, 161, 129, 65, 1, 149, 25, 4, 130, 128, 137, 64, 9, 40, 81, 1, 161, 168, 37, 26, 41, 149, 102, 2, 101, 0, 144, 170, 85, 170, 128, 74, 6, 137, 166, 70, 102, 41, 170, 106, 105, 149, 97, 70, 8, 161, 73, 165, 6, 1, 132, 37, 101, 153, 6, 105, 24, 166, 72, 18, 8, 0, 80, 65, 152, 80, 170, 101, 89, 4, 130, 90, 81, 146, 97, 149, 16, 42, 38, 36, 149, 129, 37, 133, 85, 82, 4, 144, 74, 138, 145, 165, 9, 32, 138},
    {9, 38, 18, 138, 170, 136, 22, 129, 80, 145, 100, 68, 1, 36, 38, 169, 154, 96, 138, 90, 149, 146, 154, 24, 25, 133, 18, 148, 85, 69, 146, 74, 89, 70, 100, 90, 90, 148, 1, 25, 34, 149, 22, 146, 129, 136, 153, 89, 73, 4, 24, 32, 84, 144, 41, 37, 34, 161, 1, 24, 37, 165, 97, 133, 102, 106, 33, 86, 90, 41, 149, 34, 8, 69, 22, 85, 134, 106, 69, 137, 150, 37, 86, 22, 90, 36, 96, 149, 98, 129, 9, 161, 154, 74, 102, 138, 102, 85, 134, 149, 65, 40, 9, 170, 8, 134, 170, 136, 102, 90, 88, 4, 37, 37, 82, 82, 85, 24, 97, 148, 17, 85, 97, 165, 21, 24, 162, 66, 164, 38, 81, 165, 145, 36, 37, 104, 102, 149, 130, 38, 34, 148, 37, 138, 160, 150, 90, 25, 161, 36, 137, 40, 2, 82, 152, 70, 88, 134, 86, 170, 74, 170, 165, 88, 37, 89, 170, 85, 130, 133, 84, 85, 149, 154, 72, 74, 42, 102, 41, 1, 1, 1, 97, 64, 74, 170, 169, 138, 22, 132, 90, 81, 101, 0, 162, 102, 105, 149, 97, 41, 32, 133, 34, 41, 17, 137, 69, 130, 104, 106, 168, 149, 72, 17, 82, 134, 100, 170, 66, 168, 152, 96, 160, 21, 148, 128, 16, 38, 146, 85, 42, 154, 18, 16, 153, 73, 70, 84, 26, 22, 34, 16, 146, 102, 132, 102, 34, 24, 85, 98, 34, 164, 170, 162, 137, 86, 96, 24, 153, 164, 106, 129, 165, 132, 166, 74, 81, 170, 106, 145, 89, 84, 96, 2, 102, 38, 166, 69, 137, 74, 16, 137, 42, 162, 24, 73, 26, 74, 133, 132, 136, 101, 134, 16, 34, 37, 169, 73, 134, 134, 21, 146, 73, 130, 134, 146, 90, 154, 32, 42, 165, 5, 22, 97, 64, 2, 66, 136, 89, 21, 34, 10, 161, 33, 162, 80, 82, 36, 24, 146, 144, 65, 73, 22, 97, 166, 149, 40, 10, 2, 128, 24, 38, 24, 149, 8, 145, 160, 22, 86, 165, 73, 38, 73, 25, 66, 25, 106, 81, 26, 98, 86, 154, 152, 21, 170, 40, 40, 133, 22, 153, 166, 154, 68, 38, 149, 128, 101, 149, 84, 36, 164, 154, 26},
    {82, 161, 134, 145, 80, 24, 106, 89, 89, 85, 130, 90, 18, 34, 66, 166, 96, 65, 34, 42, 86, 101, 25, 97, 25, 146, 20, 37, 162, 128, 90, 148, 153, 101, 97, 133, 10, 97, 16, 32, 33, 106, 169, 148, 162, 134, 101, 85, 152, 145, 26, 169, 33, 26, 90, 154, 165, 162, 70, 37, 85, 134, 149, 8, 38, 33, 166, 160, 17, 24, 97, 154, 34, 90, 69, 133, 26, 82, 34, 145, 74, 168, 26, 101, 38, 69, 137, 69, 154, 170, 101, 134, 81, 89, 149, 26, 146, 105, 5, 134, 84, 16, 16, 22, 89, 86, 166, 74, 41, 82, 169, 169, 106, 166, 68, 137, 161, 146, 42, 73, 150, 96, 164, 154, 81, 144, 105, 166, 149, 18, 154, 145, 130, 104, 21, 146, 70, 169, 70, 20, 133, 37, 149, 85, 105, 146, 72, 72, 150, 105, 104, 85, 165, 25, 6, 105, 33, 40, 138, 161, 105, 165, 66, 153, 40, 150, 68, 73, 169, 106, 146, 72, 10, 72, 136, 37, 17, 89, 146, 90, 153, 98, 42, 89, 138, 89, 154, 105, 166, 16, 165, 154, 170, 4, 164, 101, 164, 42, 96, 90, 17, 170, 153, 81, 90, 102, 104, 166, 169, 69, 146, 166, 85, 133, 153, 81, 153, 130, 6, 89, 150, 145, 105, 64, 100, 65, 16, 161, 144, 17, 34, 134, 88, 149, 164, 66, 26, 6, 34, 104, 169, 36, 130, 90, 89, 97, 38, 105, 104, 166, 90, 166, 150, 164, 20, 165, 104, 152, 154, 90, 129, 8, 138, 133, 97, 86, 65, 98, 148, 96, 33, 74, 82, 80, 9, 80, 72, 64, 162, 168, 21, 40, 33, 38, 85, 162, 68, 36, 5, 128, 6, 106, 98, 98, 165, 153, 102, 34, 138, 5, 74, 85, 134, 18, 90, 9, 102, 170, 161, 166, 165, 136, 1, 0, 97, 37, 89, 0, 133, 129, 145, 8, 74, 148, 105, 68, 145, 170, 38, 86, 164, 9, 161, 161, 26, 128, 26, 64, 145, 24, 128, 96, 1, 64, 85, 169, 97, 24, 161, 170, 81, 165, 154, 36, 85, 169, 86, 144, 129, 80, 90, 9, 85, 86, 38, 168, 154, 134, 133, 148, 1, 97, 84, 164, 90, 148, 153, 38, 128, 73, 146, 37, 170, 32},
    {169, 130, 169, 166, 18, 104, 16, 97, 9, 96, 70, 148, 69, 33, 74, 22, 33, 106, 170, 136, 134, 168, 162, 146, 38, 130, 162, 89, 81, 40, 86, 166, 81, 22, 73, 160, 106, 96, 97, 104, 82, 85, 170, 97, 105, 89, 66, 132, 160, 132, 85, 134, 162, 134, 21, 130, 24, 64, 105, 153, 145, 74, 1, 69, 80, 38, 80, 5, 146, 132, 6, 152, 89, 17, 80, 102, 138, 104, 36, 41, 73, 146, 137, 86, 73, 72, 82, 168, 74, 138, 105, 70, 89, 136, 42, 72, 22, 5, 90, 148, 90, 97, 137, 26, 10, 164, 153, 105, 129, 32, 149, 25, 153, 42, 106, 170, 150, 168, 100, 144, 33, 17, 69, 9, 82, 18, 69, 84, 145, 104, 102, 102, 5, 66, 90, 152, 170, 82, 86, 37, 100, 2, 133, 21, 134, 73, 90, 34, 73, 102, 96, 138, 69, 154, 149, 18, 0, 102, 168, 105, 8, 70, 70, 96, 21, 32, 89, 154, 149, 25, 1, 154, 133, 37, 150, 164, 168, 89, 153, 149, 74, 5, 69, 165, 145, 149, 36, 89, 168, 5, 90, 161, 152, 5, 150, 38, 5, 82, 166, 21, 65, 37, 10, 88, 34, 169, 22, 101, 33, 97, 146, 89, 88, 133, 9, 70, 97, 128, 74, 6, 88, 154, 128, 73, 170, 69, 166, 16, 25, 164, 97, 101, 36, 149, 37, 21, 138, 105, 37, 41, 134, 89, 104, 89, 129, 102, 105, 17, 89, 86, 169, 74, 160, 86, 66, 2, 133, 38, 97, 16, 130, 149, 150, 149, 152, 146, 169, 153, 152, 1, 26, 85, 73, 149, 98, 5, 85, 132, 84, 69, 66, 101, 25, 89, 164, 97, 18, 38, 25, 100, 105, 169, 66, 74, 36, 102, 169, 169, 144, 40, 84, 134, 153, 16, 165, 137, 102, 32, 0, 137, 169, 150, 81, 100, 148, 161, 160, 146, 166, 68, 41, 73, 42, 26, 21, 17, 36, 68, 34, 101, 85, 150, 81, 86, 17, 81, 1, 145, 17, 128, 165, 106, 22, 26, 66, 134, 145, 136, 166, 154, 102, 9, 73, 89, 164, 137, 162, 9, 41, 88, 33, 152, 81, 16, 149, 102, 134, 72, 152, 84, 6, 132, 74, 34, 160, 96, 65, 134, 102, 98, 34, 16, 22, 72},
    {102, 162, 145, 138, 150, 128, 134, 5, 105, 154, 69, 85, 17, 145, 148, 82, 170, 148, 42, 66, 102, 132, 164, 97, 9, 38, 66, 74, 128, 129, 162, 86, 20, 26, 20, 33, 98, 133, 96, 24, 33, 18, 10, 73, 40, 84, 21, 38, 104, 42, 133, 90, 26, 138, 89, 1, 38, 41, 100, 17, 153, 153, 26, 32, 100, 89, 166, 168, 166, 97, 166, 88, 73, 170, 96, 100, 32, 136, 160, 86, 154, 33, 10, 129, 132, 81, 34, 164, 149, 42, 8, 5, 86, 97, 73, 133, 24, 64, 90, 106, 22, 21, 102, 81, 85, 22, 150, 73, 72, 161, 21, 136, 166, 90, 170, 149, 81, 20, 133, 5, 149, 100, 10, 105, 149, 150, 88, 138, 20, 149, 168, 69, 18, 21, 22, 129, 34, 81, 88, 65, 22, 160, 104, 97, 98, 146, 102, 37, 101, 132, 98, 32, 37, 164, 81, 38, 166, 2, 100, 68, 106, 26, 170, 89, 24, 89, 17, 8, 132, 102, 100, 130, 165, 169, 9, 129, 20, 106, 20, 21, 150, 102, 96, 89, 21, 89, 82, 81, 25, 38, 68, 101, 148, 10, 164, 149, 17, 153, 26, 169, 72, 134, 1, 26, 21, 168, 164, 97, 69, 85, 105, 152, 146, 37, 37, 105, 32, 133, 84, 170, 25, 104, 73, 25, 2, 73, 161, 162, 168, 2, 69, 69, 154, 66, 160, 86, 38, 10, 88, 104, 6, 138, 134, 105, 5, 72, 5, 165, 146, 2, 84, 133, 170, 21, 73, 160, 1, 149, 136, 85, 4, 8, 97, 20, 25, 130, 64, 145, 160, 32, 98, 166, 37, 86, 101, 145, 106, 81, 154, 5, 138, 70, 25, 6, 24, 134, 106, 18, 100, 148, 132, 10, 170, 164, 86, 102, 166, 149, 137, 82, 168, 150, 149, 150, 162, 138, 169, 34, 165, 40, 130, 84, 130, 85, 34, 22, 36, 80, 105, 8, 168, 96, 37, 102, 84, 129, 65, 0, 69, 134, 69, 9, 161, 98, 66, 70, 166, 166, 82, 36, 138, 166, 37, 104, 2, 33, 6, 1, 153, 105, 41, 97, 102, 97, 136, 70, 25, 9, 64, 106, 170, 25, 6, 129, 5, 22, 86, 32, 86, 40, 170, 149, 138, 10, 165, 130, 97, 70, 150, 34, 105, 97, 102, 32},
    {160, 101, 24, 134, 148, 98, 81, 33, 101, 170, 102, 37, 152, 69, 85, 25, 10, 37, 96, 161, 25, 65, 105, 10, 1, 165, 166, 74, 10, 84, 161, 42, 82, 16, 2, 66, 138, 150, 105, 84, 138, 86, 74, 40, 9, 9, 164, 106, 137, 88, 102, 138, 72, 66, 64, 80, 84, 21, 105, 88, 90, 136, 150, 74, 21, 37, 169, 9, 34, 101, 169, 10, 26, 38, 170, 169, 128, 150, 9, 133, 81, 86, 82, 166, 162, 70, 72, 10, 130, 137, 88, 169, 8, 37, 150, 17, 97, 41, 69, 136, 154, 17, 162, 133, 65, 34, 69, 88, 137, 80, 5, 170, 132, 73, 18, 24, 0, 89, 90, 152, 68, 101, 129, 74, 70, 40, 21, 168, 102, 132, 80, 98, 40, 42, 101, 70, 41, 130, 10, 20, 130, 134, 89, 162, 106, 105, 105, 22, 162, 4, 149, 154, 85, 41, 89, 154, 105, 146, 104, 18, 21, 149, 10, 97, 134, 154, 104, 102, 41, 25, 134, 73, 164, 153, 137, 146, 128, 137, 82, 146, 153, 162, 84, 129, 69, 5, 22, 5, 106, 169, 41, 150, 162, 38, 38, 104, 152, 98, 21, 81, 153, 6, 26, 100, 65, 85, 80, 161, 88, 169, 168, 26, 25, 146, 168, 85, 128, 90, 170, 36, 101, 129, 0, 8, 160, 85, 89, 81, 164, 150, 20, 138, 64, 98, 33, 18, 90, 34, 41, 38, 169, 26, 105, 80, 137, 88, 106, 34, 38, 1, 25, 145, 73, 18, 101, 82, 100, 69, 21, 170, 1, 2, 70, 162, 102, 102, 161, 21, 97, 24, 68, 38, 33, 136, 4, 105, 68, 80, 32, 22, 33, 10, 136, 153, 105, 169, 165, 73, 34, 64, 101, 170, 68, 132, 84, 160, 166, 148, 100, 106, 134, 102, 145, 64, 10, 96, 132, 150, 20, 137, 101, 17, 144, 5, 106, 165, 22, 165, 38, 153, 38, 20, 72, 97, 169, 88, 36, 10, 38, 148, 137, 41, 169, 153, 90, 10, 1, 168, 37, 40, 25, 85, 138, 21, 164, 164, 36, 10, 128, 22, 73, 133, 25, 38, 21, 40, 64, 1, 2, 85, 8, 149, 102, 64, 102, 32, 106, 5, 130, 82, 149, 162, 20, 153, 20, 169, 73, 168, 40, 133, 101, 37, 136, 128},
    {161, 84, 168, 144, 34, 148, 21, 17, 68, 138, 40, 69, 160, 26, 24, 34, 100, 152, 164, 9, 26, 41, 10, 150, 102, 89, 169, 40, 165, 162, 82, 101, 102, 106, 70, 36, 170, 40, 105, 133, 97, 154, 42, 25, 38, 6, 149, 26, 10, 150, 90, 105, 86, 25, 149, 72, 6, 84, 37, 8, 150, 146, 133, 101, 26, 106, 166, 170, 81, 38, 102, 169, 37, 85, 41, 17, 154, 34, 146, 162, 104, 82, 169, 166, 25, 168, 81, 150, 150, 74, 88, 21, 68, 5, 170, 26, 85, 102, 150, 105, 42, 134, 169, 129, 106, 74, 152, 21, 82, 169, 102, 18, 10, 86, 152, 104, 85, 40, 9, 136, 138, 145, 154, 133, 105, 154, 164, 106, 150, 41, 137, 84, 86, 37, 106, 82, 24, 8, 106, 149, 102, 169, 21, 145, 16, 17, 144, 86, 165, 41, 133, 2, 34, 165, 82, 98, 10, 104, 148, 105, 101, 162, 145, 72, 148, 148, 85, 20, 2, 72, 168, 69, 22, 165, 2, 34, 37, 18, 165, 4, 20, 166, 129, 85, 170, 22, 148, 81, 104, 22, 136, 89, 42, 101, 166, 85, 106, 85, 2, 22, 21, 38, 160, 65, 101, 25, 41, 36, 149, 154, 164, 169, 20, 106, 137, 97, 134, 89, 149, 16, 42, 98, 32, 105, 98, 80, 101, 68, 150, 150, 165, 0, 88, 144, 33, 22, 166, 169, 101, 22, 138, 161, 26, 97, 86, 101, 41, 144, 170, 104, 36, 42, 98, 98, 10, 85, 4, 97, 162, 106, 146, 85, 22, 148, 136, 130, 133, 72, 25, 40, 64, 32, 40, 105, 134, 16, 152, 86, 26, 169, 38, 20, 81, 64, 68, 150, 102, 134, 102, 84, 104, 36, 20, 130, 40, 101, 90, 149, 41, 161, 153, 85, 89, 85, 70, 20, 150, 36, 90, 166, 148, 22, 73, 150, 8, 137, 18, 154, 154, 80, 16, 73, 160, 96, 74, 166, 32, 170, 36, 72, 16, 106, 105, 86, 38, 4, 166, 144, 69, 154, 64, 84, 148, 4, 22, 168, 144, 10, 106, 0, 65, 168, 150, 154, 81, 134, 162, 162, 70, 149, 33, 169, 8, 166, 148, 160, 133, 168, 146, 164, 154, 154, 65, 82, 161, 34, 165, 26, 90, 148, 70, 134, 69, 134},
    {86, 148, 90, 42, 26, 160, 41, 69, 81, 68, 33, 146, 8, 154, 102, 106, 102, 80, 138, 149, 85, 102, 0, 129, 169, 162, 145, 32, 1, 166, 41, 38, 16, 72, 18, 104, 165, 146, 138, 166, 97, 146, 34, 86, 160, 150, 170, 144, 25, 168, 20, 149, 37, 17, 73, 104, 165, 90, 129, 152, 90, 6, 64, 90, 168, 73, 73, 164, 165, 42, 33, 22, 170, 146, 102, 86, 82, 84, 137, 65, 25, 153, 106, 105, 26, 20, 165, 146, 6, 145, 81, 41, 20, 85, 169, 106, 70, 68, 166, 146, 105, 128, 148, 9, 170, 162, 166, 134, 101, 26, 89, 42, 150, 146, 150, 100, 90, 150, 88, 150, 106, 37, 70, 82, 38, 8, 21, 165, 106, 101, 81, 37, 105, 26, 2, 6, 136, 153, 166, 148, 88, 98, 86, 106, 134, 102, 90, 17, 89, 136, 42, 138, 138, 42, 38, 22, 153, 5, 137, 149, 88, 154, 73, 10, 22, 6, 41, 22, 105, 149, 102, 33, 6, 33, 149, 150, 88, 150, 161, 150, 84, 130, 18, 102, 24, 89, 90, 153, 26, 104, 8, 168, 9, 97, 102, 161, 6, 136, 10, 26, 86, 33, 72, 101, 86, 21, 164, 132, 97, 26, 88, 88, 137, 160, 20, 88, 133, 106, 105, 90, 97, 150, 21, 2, 97, 165, 16, 97, 97, 104, 129, 104, 98, 138, 16, 105, 89, 74, 150, 138, 162, 37, 132, 38, 150, 162, 104, 41, 42, 16, 138, 10, 82, 164, 86, 85, 9, 17, 73, 86, 22, 134, 18, 37, 104, 72, 105, 41, 104, 138, 81, 102, 146, 144, 16, 128, 149, 164, 161, 149, 74, 102, 96, 97, 82, 154, 22, 153, 40, 18, 161, 161, 134, 68, 165, 26, 86, 1, 26, 153, 24, 22, 81, 104, 96, 82, 85, 133, 100, 170, 137, 134, 16, 148, 128, 32, 153, 168, 6, 20, 26, 64, 74, 33, 37, 9, 154, 26, 164, 81, 41, 68, 100, 161, 80, 101, 96, 164, 5, 17, 98, 5, 40, 8, 84, 170, 134, 85, 34, 64, 81, 148, 136, 148, 68, 161, 8, 41, 145, 130, 32, 9, 149, 160, 26, 85, 10, 85, 136, 24, 81, 41, 136, 97, 137, 97, 6, 106, 21, 128, 104, 34, 66, 170},
    {145, 153, 154, 166, 5, 18, 88, 106, 137, 86, 22, 65, 168, 138, 164, 89, 165, 0, 105, 68, 74, 148, 134, 34, 84, 169, 152, 133, 149, 80, 80, 154, 161, 128, 100, 102, 82, 102, 69, 16, 145, 32, 17, 102, 70, 154, 165, 34, 38, 18, 85, 132, 136, 169, 102, 153, 33, 130, 84, 37, 36, 38, 41, 82, 161, 104, 105, 26, 66, 137, 37, 0, 84, 162, 166, 85, 154, 150, 138, 136, 9, 37, 148, 33, 89, 88, 80, 26, 166, 85, 42, 162, 152, 101, 128, 134, 36, 66, 101, 129, 165, 100, 138, 37, 150, 84, 134, 106, 132, 22, 105, 24, 137, 148, 152, 133, 154, 138, 16, 169, 154, 1, 25, 160, 105, 134, 134, 164, 101, 89, 150, 102, 97, 101, 85, 106, 84, 168, 84, 9, 169, 102, 136, 168, 145, 6, 42, 146, 42, 133, 101, 10, 132, 154, 16, 81, 1, 160, 130, 5, 166, 84, 1, 24, 154, 86, 102, 68, 65, 5, 82, 153, 104, 132, 150, 169, 70, 168, 80, 16, 128, 138, 144, 154, 100, 41, 100, 149, 104, 134, 150, 170, 18, 65, 96, 149, 69, 88, 73, 106, 153, 68, 36, 90, 100, 41, 154, 101, 132, 168, 165, 68, 128, 166, 16, 25, 16, 73, 70, 160, 129, 129, 34, 96, 100, 133, 105, 130, 105, 90, 150, 26, 105, 134, 166, 98, 105, 165, 40, 96, 130, 164, 149, 89, 165, 150, 86, 90, 5, 105, 42, 168, 9, 74, 129, 150, 74, 105, 106, 106, 136, 85, 84, 26, 22, 105, 152, 68, 73, 106, 70, 16, 21, 148, 0, 170, 88, 42, 146, 169, 10, 85, 98, 97, 104, 149, 97, 170, 165, 69, 21, 133, 105, 88, 86, 69, 138, 169, 37, 74, 9, 160, 134, 74, 25, 84, 128, 134, 80, 70, 96, 100, 133, 145, 69, 86, 145, 146, 132, 0, 166, 65, 41, 145, 129, 8, 72, 105, 105, 98, 165, 98, 130, 146, 42, 84, 66, 165, 37, 2, 22, 169, 102, 66, 80, 153, 81, 32, 106, 164, 148, 74, 5, 84, 170, 133, 42, 101, 86, 32, 26, 148, 26, 22, 133, 166, 1, 96, 166, 170, 18, 84, 42, 9, 36, 150, 74, 146, 101, 89, 85, 165, 9, 136},
    {84, 170, 20, 40, 133, 2, 104, 26, 153, 73, 144, 81, 24, 146, 41, 153, 150, 102, 0, 8, 144, 8, 101, 34, 170, 6, 9, 106, 21, 68, 86, 10, 160, 5, 84, 138, 102, 170, 162, 26, 145, 41, 169, 38, 165, 65, 6, 42, 144, 168, 169, 5, 25, 73, 2, 138, 164, 81, 138, 104, 85, 152, 37, 69, 2, 130, 69, 73, 74, 150, 154, 149, 146, 162, 22, 150, 165, 42, 145, 42, 96, 40, 101, 161, 154, 144, 170, 169, 38, 137, 8, 9, 25, 101, 138, 80, 106, 106, 41, 149, 134, 16, 36, 133, 18, 138, 89, 164, 154, 4, 21, 150, 130, 145, 154, 74, 18, 169, 18, 22, 133, 129, 132, 170, 9, 90, 40, 150, 104, 4, 101, 166, 90, 80, 152, 74, 89, 150, 168, 105, 33, 164, 104, 10, 154, 165, 38, 150, 149, 133, 9, 149, 33, 89, 149, 154, 104, 97, 38, 69, 136, 145, 153, 153, 128, 85, 106, 38, 9, 73, 74, 134, 85, 85, 65, 170, 165, 137, 150, 149, 102, 65, 89, 146, 132, 106, 168, 72, 154, 37, 104, 164, 162, 105, 150, 9, 73, 104, 97, 160, 105, 65, 18, 101, 21, 149, 86, 161, 129, 169, 162, 38, 86, 133, 26, 132, 132, 84, 88, 134, 100, 65, 102, 26, 42, 134, 137, 82, 169, 106, 10, 130, 8, 32, 162, 37, 152, 138, 41, 153, 160, 137, 102, 37, 72, 18, 150, 104, 146, 26, 133, 69, 150, 134, 138, 25, 37, 9, 17, 70, 18, 106, 90, 105, 138, 73, 42, 18, 97, 150, 162, 24, 69, 97, 10, 5, 101, 86, 152, 170, 168, 100, 129, 136, 154, 137, 65, 148, 106, 65, 100, 165, 20, 97, 150, 132, 33, 162, 6, 128, 137, 84, 65, 17, 154, 85, 153, 84, 1, 22, 166, 98, 26, 85, 85, 97, 165, 74, 153, 33, 136, 164, 165, 26, 164, 81, 169, 166, 84, 150, 154, 86, 104, 64, 20, 98, 37, 21, 166, 136, 152, 10, 5, 128, 65, 162, 73, 6, 84, 132, 72, 1, 8, 26, 166, 166, 84, 100, 149, 9, 84, 81, 98, 37, 150, 38, 105, 81, 6, 36, 101, 84, 86, 37, 65, 170, 74, 0, 153, 25, 130, 169, 96, 152},
    {70, 162, 145, 170, 74, 6, 102, 41, 37, 64, 2, 150, 169, 32, 90, 136, 85, 145, 170, 73, 164, 34, 102, 73, 161, 97, 164, 85, 17, 104, 64, 64, 101, 66, 37, 33, 148, 102, 149, 164, 80, 88, 36, 166, 5, 132, 104, 25, 82, 105, 25, 165, 74, 98, 149, 106, 150, 26, 82, 18, 154, 42, 105, 69, 152, 129, 102, 150, 138, 146, 106, 37, 96, 40, 133, 100, 37, 73, 33, 105, 86, 105, 129, 64, 82, 98, 169, 96, 168, 24, 89, 66, 84, 150, 145, 22, 85, 25, 69, 33, 25, 85, 101, 89, 149, 165, 101, 149, 105, 102, 149, 37, 89, 22, 96, 145, 161, 10, 101, 73, 169, 5, 136, 36, 42, 136, 149, 162, 89, 16, 150, 2, 86, 161, 81, 81, 86, 18, 162, 22, 42, 133, 170, 98, 6, 22, 150, 104, 162, 37, 165, 98, 138, 166, 154, 17, 20, 34, 73, 40, 102, 138, 90, 2, 68, 169, 161, 150, 166, 34, 106, 170, 97, 149, 88, 169, 69, 85, 148, 21, 24, 32, 21, 82, 152, 90, 138, 38, 150, 102, 8, 73, 134, 134, 128, 149, 33, 73, 145, 82, 170, 89, 136, 165, 90, 69, 5, 80, 106, 80, 69, 148, 22, 136, 37, 81, 70, 41, 65, 36, 128, 138, 101, 165, 137, 96, 81, 133, 133, 89, 36, 5, 9, 5, 82, 169, 72, 96, 18, 97, 10, 38, 130, 138, 9, 74, 34, 33, 17, 162, 137, 104, 74, 102, 34, 150, 100, 144, 22, 153, 106, 85, 33, 101, 89, 104, 152, 9, 37, 21, 85, 102, 102, 74, 65, 169, 38, 40, 70, 96, 18, 169, 129, 134, 6, 106, 136, 0, 96, 68, 42, 69, 161, 168, 34, 102, 34, 168, 133, 88, 100, 150, 38, 24, 33, 149, 90, 133, 106, 169, 9, 25, 90, 104, 24, 129, 133, 8, 137, 18, 132, 130, 64, 25, 84, 150, 6, 33, 132, 129, 101, 137, 164, 0, 69, 38, 104, 154, 100, 41, 10, 165, 90, 0, 8, 32, 74, 20, 10, 165, 106, 170, 74, 24, 16, 68, 150, 16, 40, 138, 40, 130, 17, 136, 66, 10, 168, 25, 82, 106, 8, 98, 150, 166, 37, 42, 85, 26, 25, 37, 81, 129, 153, 22},
    {72, 105, 105, 148, 100, 146, 161, 106, 100, 70, 86, 84, 138, 64, 22, 65, 25, 160, 100, 9, 38, 154, 137, 21, 97, 150, 42, 152, 21, 6, 160, 26, 105, 170, 2, 22, 105, 160, 170, 66, 25, 146, 97, 9, 104, 106, 154, 169, 166, 68, 2, 164, 152, 138, 169, 74, 148, 162, 153, 4, 97, 73, 37, 161, 162, 97, 26, 102, 97, 132, 165, 89, 168, 97, 41, 150, 152, 1, 89, 68, 146, 74, 166, 166, 80, 25, 64, 68, 136, 152, 169, 168, 104, 149, 64, 72, 145, 137, 70, 134, 150, 153, 86, 170, 89, 32, 24, 81, 8, 137, 105, 84, 102, 145, 70, 138, 85, 100, 169, 149, 97, 2, 150, 105, 138, 100, 21, 138, 80, 40, 136, 164, 149, 82, 96, 81, 89, 82, 169, 146, 6, 37, 162, 148, 2, 170, 42, 25, 4, 9, 97, 145, 102, 130, 82, 41, 90, 26, 162, 166, 22, 100, 26, 154, 85, 161, 68, 132, 102, 24, 36, 134, 154, 9, 20, 164, 72, 154, 33, 22, 85, 85, 82, 84, 82, 6, 42, 90, 33, 128, 136, 150, 66, 85, 88, 74, 82, 166, 40, 170, 20, 138, 145, 97, 100, 138, 149, 73, 149, 132, 164, 10, 18, 88, 96, 69, 41, 162, 90, 149, 101, 153, 74, 90, 170, 164, 149, 6, 42, 68, 106, 33, 153, 18, 149, 106, 65, 169, 41, 106, 153, 25, 104, 38, 37, 33, 104, 90, 36, 102, 166, 86, 5, 41, 88, 138, 81, 145, 144, 20, 154, 74, 164, 26, 65, 74, 129, 102, 21, 102, 10, 154, 134, 169, 73, 170, 102, 161, 42, 70, 72, 73, 129, 144, 160, 165, 101, 84, 18, 102, 25, 98, 164, 80, 90, 41, 132, 85, 24, 90, 41, 84, 88, 137, 70, 33, 101, 88, 5, 164, 102, 2, 145, 165, 104, 133, 22, 97, 80, 82, 134, 20, 41, 153, 2, 129, 96, 150, 4, 130, 144, 134, 21, 9, 26, 170, 70, 74, 168, 166, 132, 153, 168, 2, 68, 89, 42, 22, 153, 9, 26, 72, 41, 169, 133, 129, 96, 36, 86, 6, 34, 73, 85, 84, 169, 9, 65, 81, 66, 129, 170, 37, 0, 129, 129, 130, 5, 69, 149, 161, 84, 105, 72, 17},
    {26, 32, 89, 90, 98, 42, 162, 41, 36, 64, 66, 137, 101, 32, 152, 84, 10, 162, 165, 133, 130, 85, 25, 80, 169, 104, 134, 105, 85, 73, 101, 66, 166, 169, 68, 72, 105, 81, 148, 138, 165, 17, 10, 21, 32, 97, 33, 88, 42, 6, 154, 133, 150, 165, 82, 86, 25, 104, 130, 25, 66, 68, 134, 42, 40, 105, 32, 101, 161, 100, 40, 86, 89, 73, 150, 160, 138, 105, 21, 25, 42, 22, 170, 137, 17, 148, 26, 38, 42, 134, 73, 168, 82, 146, 98, 38, 160, 170, 162, 98, 69, 137, 101, 106, 128, 9, 9, 65, 6, 69, 86, 72, 153, 81, 24, 69, 86, 154, 168, 169, 168, 0, 161, 170, 152, 145, 85, 25, 128, 102, 25, 70, 21, 36, 130, 102, 26, 89, 85, 149, 26, 101, 145, 168, 36, 97, 97, 88, 144, 5, 154, 68, 134, 37, 105, 24, 136, 86, 73, 160, 148, 102, 86, 133, 5, 154, 138, 85, 6, 138, 152, 10, 160, 161, 81, 89, 101, 160, 5, 150, 170, 161, 89, 100, 148, 90, 166, 65, 152, 166, 38, 84, 152, 106, 69, 153, 6, 166, 73, 101, 98, 6, 6, 38, 90, 25, 102, 89, 20, 80, 70, 38, 65, 86, 18, 4, 8, 129, 138, 34, 137, 37, 64, 170, 16, 16, 81, 26, 165, 102, 168, 162, 88, 0, 160, 66, 42, 5, 161, 97, 154, 1, 1, 101, 86, 165, 133, 82, 154, 88, 144, 89, 34, 90, 164, 5, 21, 66, 6, 106, 130, 165, 86, 22, 168, 145, 10, 150, 100, 129, 162, 85, 85, 9, 130, 138, 37, 68, 149, 152, 84, 82, 145, 138, 90, 170, 80, 130, 169, 18, 150, 138, 162, 161, 85, 166, 88, 25, 133, 148, 4, 2, 148, 73, 137, 37, 21, 90, 105, 146, 145, 138, 25, 89, 73, 133, 9, 65, 106, 146, 146, 20, 150, 105, 161, 73, 150, 105, 148, 65, 40, 133, 72, 133, 25, 5, 2, 170, 68, 22, 96, 128, 26, 20, 17, 24, 168, 104, 20, 100, 2, 150, 105, 134, 90, 64, 4, 85, 88, 89, 137, 145, 65, 37, 166, 84, 148, 146, 41, 24, 80, 165, 65, 80, 129, 24, 42, 4, 10, 106, 105, 98, 82, 18},
    {21, 169, 148, 86, 150, 37, 145, 89, 41, 132, 24, 40, 86, 168, 169, 148, 84, 98, 90, 170, 168, 18, 17, 80, 73, 132, 146, 24, 101, 38, 22, 102, 18, 106, 85, 134, 66, 17, 149, 25, 22, 133, 22, 22, 25, 34, 154, 64, 73, 168, 88, 162, 38, 101, 65, 102, 26, 96, 81, 105, 169, 85, 42, 144, 169, 149, 0, 160, 105, 106, 106, 133, 149, 133, 22, 72, 149, 149, 152, 150, 33, 154, 129, 20, 32, 105, 89, 152, 64, 40, 170, 72, 40, 73, 133, 89, 36, 70, 164, 137, 66, 132, 148, 2, 102, 25, 130, 153, 84, 150, 100, 100, 90, 129, 137, 36, 69, 166, 150, 81, 5, 20, 24, 153, 20, 145, 69, 24, 154, 137, 134, 4, 37, 166, 134, 100, 90, 33, 82, 164, 101, 169, 132, 138, 146, 166, 105, 98, 134, 106, 9, 69, 137, 106, 10, 168, 165, 170, 154, 145, 69, 153, 137, 36, 6, 0, 82, 82, 138, 152, 149, 137, 145, 32, 73, 10, 134, 170, 85, 24, 164, 149, 129, 144, 4, 170, 169, 166, 145, 104, 90, 2, 89, 168, 152, 26, 96, 100, 105, 40, 17, 169, 9, 64, 85, 136, 22, 168, 73, 170, 160, 40, 162, 150, 133, 165, 128, 145, 66, 102, 160, 150, 10, 70, 166, 65, 168, 9, 168, 153, 154, 96, 70, 104, 70, 85, 6, 154, 105, 74, 106, 101, 8, 144, 89, 153, 9, 129, 90, 138, 106, 153, 148, 106, 96, 74, 149, 69, 161, 165, 100, 105, 2, 25, 6, 166, 82, 36, 85, 138, 154, 154, 138, 89, 2, 100, 152, 132, 164, 138, 169, 149, 33, 106, 137, 145, 101, 66, 150, 154, 85, 100, 104, 134, 5, 4, 106, 2, 42, 66, 42, 36, 164, 136, 168, 169, 101, 68, 24, 9, 22, 86, 150, 86, 128, 134, 166, 105, 149, 146, 33, 165, 90, 150, 150, 150, 170, 41, 37, 9, 165, 149, 161, 146, 170, 65, 82, 137, 160, 34, 32, 166, 38, 38, 82, 66, 149, 136, 133, 104, 133, 105, 146, 90, 136, 133, 2, 168, 64, 160, 81, 86, 152, 85, 100, 40, 24, 170, 133, 33, 104, 102, 153, 16, 130, 153, 18, 66, 42, 84, 80, 132, 168, 69},
    {0, 101, 98, 104, 161, 133, 22, 20, 81, 88, 26, 8, 150, 129, 170, 166, 88, 146, 170, 32, 133, 150, 166, 6, 166, 150, 161, 146, 161, 144, 88, 90, 21, 150, 6, 88, 24, 149, 80, 104, 90, 68, 90, 90, 152, 154, 21, 70, 89, 169, 74, 42, 42, 153, 70, 5, 102, 132, 84, 166, 25, 82, 42, 80, 170, 16, 80, 148, 152, 86, 100, 73, 73, 32, 81, 96, 165, 90, 36, 106, 152, 96, 37, 168, 133, 102, 101, 80, 132, 26, 8, 70, 160, 165, 84, 97, 102, 128, 1, 90, 169, 148, 166, 106, 85, 84, 72, 154, 89, 106, 70, 88, 82, 22, 33, 152, 72, 152, 42, 42, 96, 32, 8, 18, 161, 149, 104, 148, 168, 97, 82, 22, 42, 106, 81, 145, 137, 10, 85, 86, 74, 104, 96, 145, 106, 145, 148, 42, 97, 134, 81, 86, 41, 84, 130, 21, 102, 66, 105, 85, 160, 148, 89, 38, 154, 25, 20, 24, 138, 134, 90, 149, 20, 0, 149, 65, 42, 161, 102, 41, 160, 150, 166, 100, 169, 33, 98, 162, 100, 149, 24, 129, 136, 22, 129, 98, 101, 138, 166, 41, 2, 149, 153, 69, 154, 152, 102, 128, 101, 6, 25, 10, 104, 153, 32, 9, 70, 102, 80, 1, 128, 129, 148, 102, 146, 81, 68, 41, 72, 165, 97, 5, 102, 2, 10, 153, 102, 153, 165, 90, 8, 65, 106, 74, 90, 101, 68, 65, 145, 6, 33, 86, 133, 166, 90, 86, 84, 69, 137, 162, 34, 102, 89, 128, 148, 149, 64, 26, 85, 73, 89, 41, 37, 74, 89, 165, 0, 134, 134, 84, 21, 40, 17, 69, 80, 33, 149, 132, 106, 65, 132, 82, 4, 133, 161, 84, 132, 25, 166, 18, 85, 144, 41, 162, 8, 146, 148, 41, 88, 134, 105, 128, 17, 154, 38, 86, 38, 10, 137, 33, 84, 90, 26, 33, 168, 153, 84, 134, 97, 88, 152, 82, 132, 40, 68, 170, 17, 41, 153, 130, 82, 164, 129, 37, 25, 10, 166, 84, 88, 148, 36, 84, 154, 10, 86, 129, 138, 10, 132, 153, 88, 2, 98, 90, 136, 9, 136, 21, 96, 96, 41, 144, 33, 168, 154, 86, 81, 70, 86, 68, 89, 4, 5, 101},
    {18, 90, 154, 89, 166, 65, 106, 169, 40, 89, 137, 164, 165, 2, 5, 165, 72, 128, 166, 128, 168, 170, 132, 4, 165, 164, 80, 80, 81, 34, 164, 128, 97, 165, 102, 154, 5, 145, 90, 129, 130, 5, 85, 169, 134, 149, 80, 85, 128, 90, 169, 40, 36, 70, 148, 145, 162, 164, 132, 86, 106, 153, 144, 150, 146, 70, 101, 4, 89, 86, 73, 82, 70, 22, 138, 133, 160, 82, 136, 149, 97, 1, 84, 166, 153, 100, 154, 86, 85, 90, 152, 42, 0, 38, 41, 21, 165, 138, 97, 90, 86, 38, 90, 25, 161, 21, 6, 169, 73, 17, 17, 2, 170, 104, 105, 162, 74, 37, 106, 169, 162, 41, 169, 145, 168, 69, 26, 132, 98, 18, 84, 68, 6, 145, 18, 6, 20, 106, 41, 33, 86, 73, 152, 104, 8, 106, 169, 154, 20, 152, 90, 165, 162, 102, 162, 154, 89, 25, 154, 153, 70, 102, 10, 150, 132, 165, 102, 102, 86, 105, 22, 104, 26, 168, 138, 41, 86, 33, 165, 74, 69, 101, 41, 160, 26, 89, 2, 70, 89, 68, 69, 149, 84, 9, 69, 145, 74, 161, 170, 82, 161, 153, 70, 145, 5, 165, 101, 154, 149, 134, 90, 40, 106, 169, 148, 8, 86, 38, 105, 42, 102, 36, 33, 104, 101, 165, 129, 153, 128, 86, 68, 145, 68, 41, 102, 148, 33, 150, 170, 153, 18, 149, 38, 105, 16, 154, 70, 106, 66, 26, 26, 84, 72, 161, 34, 153, 74, 17, 66, 138, 98, 10, 145, 33, 37, 154, 80, 165, 161, 81, 38, 37, 18, 104, 86, 128, 152, 69, 97, 82, 0, 170, 137, 101, 161, 68, 138, 25, 80, 89, 136, 2, 165, 26, 133, 70, 5, 22, 16, 22, 150, 33, 69, 152, 160, 42, 18, 70, 40, 96, 168, 97, 6, 84, 40, 89, 69, 84, 88, 144, 130, 69, 152, 169, 42, 150, 81, 150, 168, 21, 101, 41, 22, 154, 128, 1, 89, 144, 146, 5, 24, 149, 2, 65, 72, 170, 101, 66, 22, 134, 21, 145, 21, 6, 4, 10, 104, 70, 100, 97, 130, 34, 165, 100, 100, 169, 82, 26, 168, 153, 154, 97, 86, 134, 25, 42, 65, 86, 144, 86, 134, 24, 132, 24},
    {40, 1, 34, 22, 20, 150, 149, 150, 168, 32, 97, 24, 154, 97, 150, 134, 153, 160, 102, 38, 170, 101, 89, 150, 36, 146, 84, 8, 161, 88, 89, 8, 145, 33, 105, 100, 128, 150, 152, 105, 102, 84, 22, 162, 88, 106, 85, 168, 150, 106, 21, 85, 136, 169, 144, 133, 102, 81, 85, 86, 166, 65, 102, 37, 89, 169, 166, 150, 138, 102, 21, 5, 162, 1, 36, 6, 129, 21, 137, 150, 137, 100, 150, 6, 37, 84, 5, 24, 153, 41, 90, 165, 26, 73, 85, 104, 137, 84, 136, 72, 74, 162, 69, 166, 105, 168, 42, 106, 1, 106, 101, 37, 104, 106, 37, 152, 166, 169, 101, 32, 100, 21, 149, 164, 153, 170, 146, 8, 18, 6, 138, 101, 72, 146, 105, 26, 90, 166, 66, 106, 138, 102, 145, 73, 85, 136, 88, 164, 168, 42, 100, 137, 85, 105, 38, 170, 97, 22, 166, 134, 86, 128, 84, 144, 102, 89, 17, 20, 145, 70, 169, 85, 98, 162, 154, 138, 89, 24, 22, 100, 149, 86, 33, 137, 89, 166, 34, 101, 106, 130, 5, 149, 164, 170, 90, 170, 70, 41, 33, 98, 18, 65, 153, 102, 138, 105, 132, 170, 26, 24, 134, 65, 132, 21, 9, 8, 89, 169, 38, 24, 132, 129, 73, 6, 106, 85, 69, 34, 138, 169, 97, 2, 101, 168, 24, 130, 149, 41, 24, 26, 133, 148, 68, 38, 66, 98, 17, 88, 88, 105, 80, 106, 20, 17, 72, 134, 101, 22, 100, 68, 21, 88, 166, 85, 82, 25, 170, 1, 20, 106, 168, 88, 22, 69, 21, 129, 82, 153, 164, 134, 85, 89, 22, 36, 72, 134, 26, 153, 96, 69, 106, 22, 133, 80, 2, 81, 164, 66, 85, 90, 5, 170, 154, 40, 154, 101, 138, 165, 80, 16, 70, 105, 97, 66, 97, 36, 106, 154, 161, 17, 17, 89, 161, 6, 84, 128, 22, 150, 8, 97, 80, 161, 40, 96, 81, 152, 150, 26, 34, 37, 132, 24, 86, 69, 80, 16, 133, 86, 101, 152, 97, 6, 68, 97, 169, 128, 66, 161, 88, 104, 32, 69, 97, 153, 84, 68, 132, 89, 169, 133, 166, 66, 34, 106, 65, 138, 130, 138, 105, 148, 73, 128, 16, 6},
    {104, 6, 152, 154, 169, 146, 153, 149, 164, 84, 153, 33, 149, 80, 84, 169, 98, 90, 138, 129, 169, 161, 161, 72, 130, 153, 154, 64, 65, 21, 10, 129, 73, 10, 72, 150, 101, 84, 160, 36, 133, 80, 168, 90, 82, 37, 86, 4, 10, 98, 68, 170, 90, 162, 22, 64, 74, 161, 98, 90, 169, 40, 154, 41, 6, 17, 26, 84, 4, 145, 89, 41, 37, 22, 164, 26, 164, 101, 9, 66, 2, 133, 168, 154, 166, 74, 6, 149, 64, 101, 89, 153, 146, 85, 81, 68, 6, 170, 10, 98, 5, 84, 170, 165, 22, 105, 98, 101, 150, 36, 69, 154, 38, 81, 88, 145, 153, 42, 162, 1, 106, 169, 36, 129, 32, 41, 101, 5, 81, 96, 5, 34, 40, 20, 37, 162, 106, 70, 154, 85, 17, 21, 20, 84, 149, 154, 70, 41, 164, 90, 42, 161, 154, 68, 33, 98, 106, 90, 81, 98, 16, 89, 22, 137, 102, 129, 37, 40, 154, 5, 153, 137, 170, 90, 105, 25, 41, 25, 38, 100, 165, 150, 6, 137, 102, 134, 37, 36, 89, 160, 69, 36, 145, 80, 138, 90, 80, 37, 164, 106, 26, 32, 34, 138, 97, 133, 166, 21, 64, 152, 68, 106, 154, 97, 69, 100, 144, 164, 136, 97, 153, 164, 90, 26, 137, 90, 9, 160, 36, 90, 153, 169, 106, 33, 137, 153, 68, 149, 88, 40, 100, 66, 66, 89, 170, 38, 20, 26, 154, 160, 68, 20, 16, 82, 4, 34, 72, 106, 138, 128, 37, 137, 80, 136, 136, 145, 33, 97, 69, 25, 133, 26, 80, 102, 161, 168, 89, 132, 150, 0, 72, 154, 72, 90, 98, 148, 24, 74, 16, 146, 69, 100, 73, 138, 165, 101, 10, 146, 2, 138, 166, 40, 65, 166, 146, 104, 168, 69, 68, 130, 154, 104, 69, 37, 73, 168, 166, 73, 86, 166, 26, 144, 65, 102, 74, 150, 84, 161, 16, 170, 20, 4, 134, 129, 9, 154, 80, 106, 33, 166, 68, 73, 137, 152, 162, 149, 150, 24, 4, 149, 170, 136, 32, 160, 81, 150, 42, 26, 36, 25, 162, 130, 146, 80, 74, 74, 82, 162, 132, 168, 90, 161, 166, 10, 66, 146, 1, 105, 134, 33, 138, 164, 150, 4},
    {102, 153, 144, 36, 17, 36, 101, 129, 106, 153, 168, 36, 10, 38, 164, 138, 149, 105, 166, 86, 133, 81, 70, 26, 106, 20, 128, 166, 168, 64, 104, 100, 1, 22, 154, 97, 148, 144, 129, 66, 152, 165, 133, 149, 24, 154, 106, 97, 69, 101, 138, 104, 129, 153, 42, 150, 169, 25, 74, 166, 152, 89, 170, 18, 104, 73, 150, 80, 169, 8, 42, 132, 169, 24, 166, 17, 136, 72, 85, 25, 89, 134, 145, 160, 84, 97, 25, 21, 10, 136, 138, 42, 4, 152, 10, 153, 86, 149, 132, 8, 137, 102, 169, 168, 102, 154, 100, 80, 101, 41, 84, 72, 36, 166, 166, 17, 20, 33, 41, 90, 97, 80, 146, 150, 101, 152, 1, 100, 90, 101, 160, 168, 106, 170, 101, 36, 9, 34, 70, 164, 102, 153, 38, 170, 40, 8, 101, 6, 134, 145, 84, 84, 74, 153, 145, 41, 5, 165, 96, 2, 137, 4, 164, 88, 150, 130, 98, 9, 85, 152, 17, 21, 42, 137, 20, 150, 82, 84, 161, 24, 85, 41, 9, 72, 88, 102, 104, 169, 136, 6, 68, 9, 84, 102, 101, 100, 154, 37, 162, 170, 81, 82, 17, 10, 90, 38, 25, 164, 132, 20, 36, 138, 42, 70, 154, 165, 16, 136, 84, 97, 153, 86, 37, 73, 22, 164, 66, 90, 89, 9, 5, 165, 84, 145, 106, 144, 88, 138, 86, 137, 33, 168, 36, 97, 169, 98, 42, 145, 153, 90, 66, 86, 65, 18, 150, 85, 84, 129, 36, 70, 168, 101, 164, 149, 101, 165, 168, 69, 33, 41, 161, 37, 97, 148, 100, 20, 101, 34, 145, 161, 70, 161, 22, 106, 37, 152, 146, 101, 150, 18, 169, 6, 96, 70, 80, 130, 132, 32, 154, 150, 36, 41, 149, 40, 162, 22, 32, 160, 26, 168, 38, 9, 168, 81, 102, 149, 148, 145, 98, 145, 40, 106, 134, 154, 4, 166, 81, 20, 89, 72, 21, 105, 73, 4, 10, 160, 105, 154, 100, 69, 105, 22, 161, 33, 161, 146, 134, 152, 153, 130, 26, 5, 161, 165, 36, 64, 162, 81, 166, 36, 146, 164, 9, 132, 153, 8, 138, 104, 70, 102, 138, 150, 9, 73, 33, 68, 20, 100, 34, 148, 82, 8, 133, 6},
    {102, 136, 164, 24, 68, 90, 136, 82, 104, 85, 165, 73, 150, 2, 84, 101, 34, 89, 129, 152, 5, 20, 73, 160, 26, 169, 134, 66, 40, 160, 22, 42, 20, 82, 154, 88, 80, 144, 18, 148, 104, 153, 90, 10, 150, 162, 105, 102, 68, 150, 86, 88, 170, 150, 10, 82, 146, 25, 36, 98, 98, 6, 80, 38, 149, 81, 169, 32, 128, 169, 88, 149, 16, 33, 17, 145, 148, 128, 33, 88, 170, 84, 146, 74, 165, 0, 129, 106, 170, 25, 73, 138, 90, 149, 10, 146, 144, 153, 70, 145, 106, 34, 70, 37, 105, 16, 86, 168, 162, 134, 81, 132, 165, 88, 136, 38, 168, 85, 168, 26, 16, 33, 88, 168, 149, 150, 26, 68, 90, 105, 66, 36, 10, 86, 149, 20, 136, 97, 152, 137, 32, 129, 168, 98, 89, 90, 10, 40, 136, 160, 90, 149, 1, 106, 100, 153, 162, 154, 166, 74, 26, 148, 137, 89, 26, 86, 164, 90, 145, 153, 33, 20, 169, 24, 85, 73, 150, 42, 24, 89, 166, 160, 80, 104, 145, 42, 149, 98, 145, 132, 64, 65, 8, 149, 69, 129, 105, 8, 162, 66, 138, 86, 22, 22, 73, 96, 133, 42, 146, 65, 101, 72, 36, 16, 160, 38, 32, 166, 137, 130, 106, 24, 133, 102, 170, 166, 37, 152, 164, 152, 68, 40, 160, 18, 137, 101, 5, 165, 150, 82, 81, 37, 170, 86, 81, 164, 86, 74, 34, 21, 138, 98, 90, 72, 102, 68, 81, 68, 0, 37, 104, 161, 84, 101, 85, 96, 101, 10, 89, 144, 100, 166, 24, 68, 74, 26, 26, 18, 162, 138, 89, 150, 150, 169, 130, 104, 164, 145, 169, 80, 129, 34, 5, 89, 73, 1, 26, 132, 154, 16, 2, 100, 17, 2, 82, 152, 104, 5, 97, 89, 86, 154, 33, 38, 165, 8, 85, 2, 160, 145, 4, 37, 164, 90, 40, 161, 137, 0, 40, 33, 88, 41, 105, 24, 74, 148, 82, 101, 9, 86, 4, 149, 130, 32, 102, 25, 132, 162, 33, 160, 106, 129, 17, 149, 68, 161, 150, 81, 84, 104, 0, 164, 68, 68, 98, 64, 148, 150, 152, 32, 89, 132, 152, 73, 170, 25, 137, 90, 34, 6, 97, 41, 8, 128},
    {138, 86, 154, 106, 144, 129, 69, 90, 73, 96, 6, 17, 9, 80, 69, 4, 41, 66, 170, 38, 16, 65, 33, 145, 41, 166, 85, 38, 146, 37, 88, 152, 149, 5, 89, 145, 137, 149, 73, 136, 42, 9, 82, 20, 136, 18, 38, 170, 68, 32, 24, 86, 22, 21, 18, 97, 106, 152, 161, 5, 90, 86, 154, 101, 102, 165, 105, 1, 81, 96, 68, 165, 8, 144, 105, 150, 129, 89, 41, 26, 81, 70, 98, 164, 80, 36, 166, 98, 9, 88, 132, 2, 74, 129, 64, 133, 37, 72, 42, 68, 153, 102, 130, 16, 149, 90, 101, 73, 22, 145, 37, 26, 100, 101, 68, 26, 82, 150, 88, 6, 128, 134, 106, 36, 68, 105, 25, 128, 102, 37, 136, 25, 84, 149, 153, 164, 144, 70, 148, 90, 100, 128, 74, 149, 169, 26, 90, 72, 149, 130, 26, 5, 88, 90, 41, 101, 24, 33, 168, 165, 165, 80, 66, 36, 153, 132, 22, 32, 32, 133, 37, 145, 166, 89, 150, 42, 136, 69, 66, 152, 144, 2, 69, 4, 153, 85, 26, 20, 42, 106, 90, 168, 10, 169, 90, 165, 132, 89, 89, 152, 134, 128, 69, 104, 102, 41, 89, 90, 105, 160, 149, 25, 17, 66, 22, 41, 129, 37, 88, 144, 166, 85, 154, 85, 102, 101, 2, 33, 84, 153, 41, 132, 37, 20, 130, 106, 106, 89, 85, 153, 84, 9, 105, 88, 82, 169, 137, 145, 18, 82, 160, 154, 165, 85, 154, 154, 86, 165, 161, 33, 132, 84, 81, 144, 34, 160, 162, 33, 133, 169, 41, 33, 5, 26, 150, 152, 10, 26, 89, 85, 106, 73, 65, 97, 162, 0, 34, 138, 42, 40, 17, 6, 97, 16, 149, 100, 169, 25, 96, 6, 161, 144, 84, 138, 36, 25, 106, 98, 1, 70, 40, 165, 72, 70, 128, 41, 165, 152, 133, 65, 26, 65, 81, 84, 164, 132, 6, 18, 168, 21, 164, 145, 104, 82, 70, 100, 64, 64, 21, 38, 2, 18, 150, 65, 81, 86, 33, 66, 86, 132, 101, 88, 132, 149, 98, 168, 16, 74, 146, 137, 146, 41, 90, 168, 25, 150, 41, 37, 130, 170, 148, 146, 149, 80, 105, 146, 21, 69, 85, 64, 74, 169, 165, 69},
    {85, 80, 98, 84, 33, 89, 36, 2, 170, 137, 90, 26, 22, 70, 160, 98, 100, 20, 134, 74, 38, 25, 106, 24, 102, 22, 37, 97, 146, 26, 132, 98, 169, 26, 74, 150, 97, 97, 38, 73, 81, 25, 149, 90, 74, 98, 128, 144, 32, 106, 74, 64, 82, 89, 21, 38, 84, 104, 90, 148, 5, 85, 40, 36, 42, 162, 72, 145, 164, 152, 162, 73, 38, 38, 20, 153, 40, 32, 2, 8, 32, 5, 138, 38, 137, 69, 145, 164, 102, 85, 66, 85, 85, 170, 20, 102, 169, 149, 73, 169, 168, 6, 68, 22, 138, 18, 168, 82, 22, 162, 138, 97, 102, 129, 17, 101, 6, 90, 97, 165, 4, 25, 22, 74, 168, 85, 137, 153, 70, 146, 16, 154, 97, 166, 152, 74, 161, 85, 132, 34, 42, 149, 80, 104, 161, 132, 86, 70, 90, 86, 104, 88, 74, 134, 168, 33, 149, 84, 84, 26, 16, 162, 145, 34, 168, 10, 90, 169, 25, 162, 146, 41, 164, 70, 81, 80, 16, 38, 153, 137, 73, 161, 161, 69, 69, 36, 101, 70, 90, 85, 38, 86, 105, 152, 170, 149, 161, 154, 89, 128, 148, 88, 64, 98, 170, 82, 132, 136, 161, 21, 170, 146, 97, 86, 137, 72, 38, 154, 164, 104, 98, 74, 165, 66, 64, 162, 170, 85, 149, 36, 42, 24, 130, 36, 97, 128, 86, 22, 0, 89, 137, 25, 89, 170, 36, 84, 164, 36, 80, 90, 144, 98, 162, 20, 170, 22, 26, 89, 4, 33, 105, 38, 170, 133, 104, 168, 164, 104, 41, 10, 64, 104, 128, 166, 84, 81, 136, 32, 65, 106, 130, 17, 130, 65, 73, 165, 148, 22, 149, 66, 82, 40, 85, 69, 153, 32, 17, 86, 148, 85, 105, 66, 18, 130, 153, 102, 1, 104, 136, 100, 166, 2, 164, 165, 1, 146, 145, 18, 166, 145, 40, 98, 17, 25, 89, 150, 97, 138, 41, 106, 164, 82, 66, 85, 168, 24, 36, 80, 5, 154, 42, 36, 154, 36, 101, 6, 69, 33, 106, 24, 133, 90, 162, 132, 21, 104, 97, 21, 128, 36, 38, 133, 88, 138, 145, 69, 96, 21, 162, 134, 128, 165, 80, 150, 170, 105, 1, 166, 68, 149, 9, 165, 66, 166},
    {5, 42, 86, 168, 102, 81, 102, 38, 70, 40, 146, 37, 85, 65, 148, 102, 25, 170, 90, 38, 69, 162, 136, 138, 41, 17, 105, 25, 21, 85, 150, 101, 42, 145, 106, 144, 101, 169, 81, 165, 34, 133, 148, 5, 128, 104, 168, 38, 165, 169, 138, 0, 166, 132, 100, 104, 166, 72, 132, 84, 165, 160, 96, 104, 160, 105, 22, 148, 97, 86, 105, 66, 160, 105, 68, 82, 161, 160, 73, 149, 5, 160, 133, 2, 66, 65, 85, 154, 4, 90, 84, 128, 21, 154, 89, 154, 138, 101, 148, 73, 85, 68, 153, 134, 84, 90, 20, 72, 84, 32, 85, 88, 33, 34, 80, 133, 89, 166, 41, 105, 166, 105, 69, 169, 17, 68, 69, 26, 132, 89, 133, 10, 74, 41, 22, 148, 24, 164, 153, 152, 128, 145, 129, 153, 96, 98, 64, 85, 136, 165, 90, 130, 96, 84, 4, 148, 69, 105, 84, 144, 168, 88, 166, 88, 38, 40, 18, 89, 96, 165, 97, 169, 33, 166, 86, 150, 40, 96, 26, 6, 101, 165, 148, 90, 102, 144, 169, 152, 136, 90, 6, 17, 101, 69, 72, 84, 133, 165, 84, 144, 68, 104, 40, 4, 166, 9, 106, 5, 169, 22, 68, 169, 22, 88, 74, 85, 162, 148, 69, 166, 138, 10, 136, 64, 106, 102, 145, 98, 90, 100, 5, 170, 86, 69, 132, 64, 85, 168, 70, 165, 138, 5, 129, 1, 24, 104, 165, 88, 86, 73, 86, 138, 148, 84, 97, 162, 66, 168, 6, 85, 134, 137, 41, 133, 153, 146, 89, 105, 10, 165, 153, 128, 1, 133, 170, 148, 169, 0, 105, 168, 98, 136, 170, 130, 32, 66, 89, 105, 165, 66, 38, 153, 164, 18, 152, 149, 160, 96, 24, 148, 170, 96, 72, 38, 165, 40, 134, 169, 72, 153, 146, 9, 34, 165, 134, 70, 148, 20, 148, 98, 86, 34, 72, 4, 154, 25, 6, 37, 129, 136, 41, 26, 152, 40, 5, 170, 42, 70, 73, 2, 90, 9, 6, 6, 154, 88, 84, 161, 153, 85, 154, 149, 90, 69, 73, 148, 102, 132, 153, 5, 101, 145, 96, 134, 150, 86, 73, 6, 73, 153, 148, 22, 21, 130, 165, 82, 85, 128, 2, 21, 68, 82, 98, 161},
    {161, 149, 42, 169, 90, 98, 85, 97, 152, 166, 89, 138, 65, 170, 145, 89, 129, 165, 32, 97, 150, 66, 26, 97, 9, 2, 145, 22, 97, 40, 37, 85, 154, 89, 25, 136, 90, 70, 165, 74, 80, 73, 105, 66, 42, 104, 89, 0, 22, 18, 21, 10, 166, 105, 166, 102, 170, 88, 166, 149, 146, 154, 26, 90, 145, 86, 148, 168, 73, 100, 133, 5, 130, 161, 72, 170, 8, 32, 168, 102, 165, 162, 148, 89, 100, 32, 102, 132, 161, 150, 42, 98, 24, 80, 150, 149, 165, 68, 162, 170, 66, 80, 130, 89, 166, 6, 101, 154, 66, 153, 170, 149, 34, 81, 74, 85, 150, 164, 6, 166, 98, 85, 149, 66, 66, 6, 66, 85, 106, 24, 101, 70, 96, 72, 100, 168, 16, 72, 97, 168, 24, 21, 144, 161, 136, 97, 146, 8, 21, 129, 10, 80, 66, 154, 42, 136, 17, 166, 86, 98, 106, 34, 150, 8, 105, 101, 166, 138, 106, 37, 130, 73, 42, 129, 170, 134, 33, 137, 17, 38, 20, 168, 149, 136, 166, 101, 70, 72, 90, 84, 128, 66, 166, 138, 137, 5, 164, 145, 21, 32, 16, 38, 4, 166, 84, 42, 145, 97, 21, 133, 168, 36, 86, 153, 8, 166, 84, 72, 86, 72, 104, 69, 41, 136, 102, 81, 89, 169, 70, 22, 10, 41, 36, 154, 101, 104, 148, 41, 68, 88, 69, 145, 68, 90, 82, 22, 86, 85, 88, 81, 74, 25, 149, 162, 150, 162, 165, 148, 105, 104, 162, 154, 10, 166, 6, 150, 65, 136, 169, 138, 145, 134, 96, 168, 100, 133, 145, 105, 169, 105, 129, 101, 1, 26, 165, 1, 89, 148, 162, 101, 89, 6, 74, 21, 170, 73, 86, 74, 105, 169, 69, 70, 72, 144, 86, 97, 26, 106, 84, 9, 84, 26, 84, 136, 0, 9, 80, 150, 133, 4, 18, 82, 85, 146, 22, 137, 145, 25, 65, 9, 153, 21, 153, 10, 66, 84, 164, 10, 97, 105, 136, 165, 138, 26, 25, 133, 68, 4, 2, 66, 165, 148, 90, 152, 42, 162, 130, 105, 164, 89, 0, 0, 166, 106, 86, 2, 69, 101, 89, 80, 154, 165, 130, 32, 145, 130, 70, 20, 5, 21, 4, 145, 152, 161},
    {149, 150, 138, 34, 130, 170, 166, 168, 105, 1, 133, 101, 21, 74, 105, 146, 161, 4, 169, 37, 25, 0, 6, 100, 24, 26, 74, 90, 169, 64, 9, 134, 86, 18, 105, 96, 132, 105, 150, 16, 18, 101, 40, 90, 1, 26, 101, 98, 152, 33, 70, 16, 105, 26, 74, 146, 89, 153, 102, 20, 72, 133, 137, 153, 0, 134, 153, 37, 128, 165, 169, 85, 80, 137, 98, 96, 144, 38, 138, 17, 24, 41, 101, 145, 33, 90, 168, 149, 66, 96, 133, 145, 74, 136, 138, 150, 86, 66, 85, 149, 10, 41, 90, 137, 98, 138, 18, 41, 41, 97, 42, 8, 166, 133, 34, 85, 73, 149, 106, 21, 169, 38, 106, 84, 38, 6, 102, 148, 137, 100, 162, 162, 18, 2, 106, 96, 105, 165, 136, 149, 166, 106, 129, 73, 98, 137, 162, 169, 164, 154, 132, 105, 166, 136, 17, 161, 90, 169, 74, 73, 68, 166, 2, 106, 42, 148, 166, 170, 145, 146, 105, 148, 129, 97, 104, 137, 90, 166, 22, 66, 38, 105, 105, 152, 104, 25, 105, 98, 16, 73, 26, 149, 100, 6, 86, 72, 134, 40, 169, 16, 152, 37, 64, 72, 17, 130, 84, 85, 66, 153, 85, 22, 150, 162, 105, 130, 97, 37, 86, 33, 150, 21, 2, 69, 129, 104, 102, 101, 18, 24, 10, 105, 169, 102, 86, 82, 73, 41, 105, 66, 97, 22, 165, 2, 81, 152, 150, 82, 85, 164, 160, 69, 105, 90, 4, 24, 89, 148, 66, 64, 161, 168, 38, 74, 170, 89, 106, 66, 32, 37, 148, 88, 132, 102, 133, 133, 42, 25, 82, 101, 168, 150, 105, 133, 133, 133, 89, 134, 65, 74, 84, 130, 106, 73, 18, 17, 96, 5, 22, 97, 22, 82, 149, 10, 21, 33, 161, 144, 170, 101, 40, 85, 169, 154, 134, 74, 90, 86, 36, 34, 165, 73, 16, 170, 73, 42, 16, 84, 17, 144, 81, 98, 145, 153, 138, 74, 89, 80, 164, 128, 81, 153, 162, 20, 65, 81, 102, 105, 149, 146, 9, 17, 145, 162, 2, 18, 70, 161, 9, 84, 34, 169, 9, 100, 89, 26, 162, 98, 88, 86, 69, 137, 97, 101, 162, 72, 106, 5, 41, 169, 146, 96, 160, 88},
    {154, 22, 9, 16, 153, 150, 18, 6, 41, 81, 164, 136, 154, 104, 97, 73, 128, 160, 84, 38, 170, 72, 161, 162, 169, 153, 88, 106, 102, 17, 169, 73, 70, 160, 162, 161, 102, 168, 146, 40, 42, 26, 101, 18, 66, 168, 145, 100, 129, 86, 17, 153, 85, 146, 154, 149, 97, 149, 97, 129, 24, 81, 169, 134, 41, 21, 84, 105, 133, 17, 161, 164, 100, 96, 161, 16, 66, 41, 100, 65, 138, 100, 9, 85, 138, 89, 85, 152, 153, 137, 101, 22, 106, 104, 24, 160, 26, 6, 21, 22, 21, 134, 20, 70, 165, 34, 85, 85, 69, 105, 25, 146, 146, 133, 165, 86, 41, 84, 2, 149, 24, 106, 138, 72, 22, 80, 98, 66, 73, 165, 98, 165, 128, 86, 145, 6, 65, 89, 133, 81, 88, 168, 137, 42, 106, 69, 9, 150, 82, 86, 89, 169, 102, 149, 86, 130, 104, 84, 65, 82, 102, 152, 20, 74, 97, 37, 68, 154, 106, 97, 165, 9, 22, 82, 25, 90, 102, 84, 101, 170, 80, 100, 106, 36, 133, 161, 72, 41, 105, 69, 90, 136, 106, 6, 86, 150, 168, 37, 33, 154, 148, 89, 154, 73, 70, 148, 170, 34, 21, 102, 106, 6, 148, 168, 105, 150, 132, 169, 149, 165, 166, 164, 69, 41, 102, 160, 6, 20, 17, 21, 18, 98, 73, 70, 153, 149, 37, 100, 21, 1, 104, 26, 138, 144, 165, 41, 22, 73, 129, 41, 18, 165, 144, 153, 150, 5, 64, 0, 64, 170, 89, 129, 170, 5, 154, 104, 106, 97, 25, 161, 129, 153, 136, 165, 90, 84, 149, 149, 8, 97, 169, 40, 170, 33, 81, 97, 80, 84, 82, 16, 10, 145, 25, 166, 64, 38, 18, 18, 68, 101, 25, 6, 21, 84, 2, 64, 41, 10, 17, 6, 106, 22, 66, 166, 130, 22, 170, 2, 33, 106, 137, 106, 20, 97, 136, 41, 18, 132, 90, 144, 170, 10, 4, 96, 136, 101, 169, 134, 89, 86, 96, 42, 18, 98, 97, 105, 101, 129, 154, 164, 66, 90, 145, 106, 105, 70, 42, 86, 98, 102, 1, 65, 22, 102, 130, 74, 101, 16, 68, 98, 33, 97, 40, 34, 101, 146, 65, 162, 154, 128, 69, 64, 170, 128},
    {146, 169, 138, 88, 68, 69, 98, 38, 165, 66, 136, 128, 149, 136, 98, 170, 105, 162, 149, 20, 168, 86, 21, 98, 73, 128, 21, 100, 90, 4, 170, 2, 36, 97, 144, 145, 81, 104, 41, 170, 9, 102, 34, 101, 149, 164, 2, 8, 82, 22, 74, 145, 169, 73, 149, 22, 98, 70, 150, 97, 98, 86, 5, 106, 22, 148, 69, 38, 10, 26, 17, 153, 2, 144, 152, 90, 66, 26, 6, 80, 38, 21, 82, 18, 84, 70, 37, 21, 85, 69, 170, 145, 26, 6, 85, 148, 38, 85, 168, 90, 69, 137, 101, 6, 82, 137, 161, 153, 69, 40, 98, 16, 65, 26, 102, 136, 34, 145, 90, 106, 148, 144, 145, 22, 168, 69, 41, 37, 132, 34, 138, 104, 154, 70, 136, 10, 74, 106, 102, 8, 88, 21, 65, 161, 68, 149, 89, 150, 137, 129, 89, 37, 101, 105, 65, 164, 89, 32, 66, 73, 26, 17, 89, 145, 5, 80, 164, 153, 165, 38, 74, 132, 8, 37, 104, 105, 149, 146, 33, 102, 133, 136, 69, 161, 85, 42, 150, 168, 70, 100, 89, 90, 132, 96, 144, 136, 25, 70, 74, 17, 138, 168, 133, 166, 137, 37, 74, 32, 84, 170, 26, 86, 146, 129, 150, 90, 169, 41, 153, 101, 36, 96, 166, 21, 128, 72, 106, 70, 24, 169, 136, 154, 164, 104, 25, 32, 133, 152, 148, 18, 146, 148, 128, 36, 133, 32, 152, 138, 89, 166, 86, 26, 160, 8, 72, 144, 72, 133, 84, 68, 148, 106, 68, 72, 134, 144, 73, 72, 150, 84, 84, 164, 69, 37, 162, 132, 96, 37, 150, 10, 104, 154, 170, 10, 84, 102, 154, 18, 81, 160, 150, 85, 73, 138, 36, 86, 65, 145, 5, 34, 150, 24, 150, 160, 81, 168, 133, 105, 73, 133, 90, 152, 169, 96, 104, 72, 132, 102, 137, 145, 133, 169, 165, 136, 97, 170, 153, 146, 153, 144, 152, 41, 106, 138, 22, 24, 101, 164, 146, 0, 97, 132, 22, 73, 162, 88, 40, 16, 102, 68, 85, 8, 166, 138, 129, 89, 69, 72, 82, 80, 80, 68, 40, 41, 90, 165, 134, 10, 69, 86, 144, 154, 104, 2, 25, 96, 22, 146, 36, 21, 138, 89, 21, 89},
    {18, 86, 85, 26, 104, 36, 81, 41, 162, 90, 70, 138, 41, 22, 154, 26, 26, 41, 41, 102, 154, 33, 42, 41, 38, 149, 145, 81, 6, 96, 89, 90, 101, 20, 169, 20, 37, 165, 20, 40, 2, 90, 82, 36, 132, 42, 146, 90, 20, 85, 41, 1, 85, 2, 97, 84, 9, 148, 38, 100, 73, 42, 154, 25, 96, 24, 36, 132, 166, 97, 100, 90, 88, 130, 154, 17, 8, 138, 25, 149, 16, 85, 72, 149, 74, 89, 154, 145, 145, 42, 18, 164, 0, 152, 144, 73, 136, 69, 88, 72, 165, 24, 97, 24, 148, 128, 4, 144, 85, 101, 70, 169, 25, 138, 97, 162, 170, 144, 40, 170, 32, 101, 106, 90, 33, 106, 138, 169, 70, 166, 85, 90, 138, 169, 166, 98, 34, 153, 89, 42, 154, 154, 154, 168, 40, 74, 26, 5, 106, 165, 16, 88, 66, 168, 70, 146, 136, 86, 21, 85, 38, 150, 84, 150, 101, 90, 16, 33, 161, 134, 166, 89, 137, 168, 66, 153, 152, 105, 73, 5, 138, 144, 21, 22, 161, 148, 101, 96, 86, 33, 169, 106, 73, 32, 36, 168, 5, 69, 17, 102, 165, 90, 165, 98, 33, 97, 146, 85, 102, 166, 150, 165, 89, 137, 40, 144, 169, 105, 169, 162, 134, 70, 4, 97, 170, 146, 36, 74, 40, 25, 134, 86, 69, 100, 106, 69, 73, 73, 42, 72, 136, 9, 102, 1, 73, 106, 165, 153, 138, 22, 20, 10, 105, 170, 36, 130, 144, 98, 128, 16, 41, 166, 26, 136, 32, 128, 169, 104, 72, 9, 153, 69, 133, 169, 42, 81, 133, 160, 22, 74, 161, 148, 73, 20, 86, 37, 165, 161, 136, 36, 149, 22, 104, 170, 170, 85, 85, 33, 101, 134, 38, 4, 154, 96, 21, 33, 20, 24, 80, 64, 26, 41, 16, 136, 165, 40, 22, 42, 96, 96, 85, 25, 90, 133, 21, 41, 150, 1, 16, 166, 98, 16, 144, 137, 65, 64, 150, 169, 41, 0, 68, 169, 8, 34, 10, 153, 33, 0, 165, 26, 16, 21, 105, 166, 129, 81, 98, 6, 88, 154, 80, 22, 164, 37, 72, 17, 33, 88, 100, 42, 82, 69, 164, 21, 100, 37, 34, 149, 164, 22, 32, 22, 161, 136},
    {89, 4, 84, 36, 170, 86, 169, 105, 134, 105, 104, 26, 153, 85, 85, 148, 145, 137, 150, 73, 74, 101, 150, 18, 166, 145, 24, 133, 153, 36, 165, 106, 154, 90, 165, 129, 74, 152, 0, 68, 41, 164, 37, 37, 37, 24, 154, 85, 22, 154, 130, 162, 21, 70, 97, 102, 150, 149, 134, 145, 70, 145, 98, 42, 100, 24, 41, 73, 161, 74, 38, 8, 165, 64, 37, 136, 81, 104, 144, 129, 10, 64, 17, 20, 86, 82, 134, 137, 84, 128, 148, 40, 88, 128, 144, 148, 101, 42, 89, 97, 100, 169, 5, 64, 106, 153, 85, 165, 37, 137, 154, 106, 73, 138, 5, 86, 85, 25, 169, 73, 74, 26, 166, 161, 74, 4, 86, 72, 165, 70, 154, 73, 146, 168, 4, 162, 145, 5, 169, 168, 18, 36, 106, 42, 42, 149, 84, 101, 106, 149, 42, 36, 166, 106, 137, 21, 70, 85, 25, 162, 26, 97, 166, 150, 89, 168, 16, 86, 80, 137, 41, 129, 136, 161, 82, 8, 104, 161, 149, 152, 150, 84, 70, 102, 105, 81, 65, 6, 153, 85, 102, 70, 80, 9, 9, 85, 165, 105, 104, 154, 97, 137, 102, 153, 21, 21, 90, 101, 149, 84, 42, 150, 81, 170, 17, 129, 149, 65, 25, 37, 98, 36, 145, 106, 10, 150, 70, 26, 102, 161, 104, 148, 65, 165, 102, 17, 96, 24, 102, 73, 72, 170, 69, 85, 74, 17, 70, 69, 128, 161, 138, 130, 162, 100, 100, 154, 41, 38, 169, 105, 40, 160, 26, 90, 97, 26, 40, 8, 166, 133, 6, 85, 40, 132, 106, 170, 128, 101, 41, 89, 21, 26, 146, 42, 166, 86, 133, 10, 88, 150, 33, 64, 149, 130, 18, 82, 98, 74, 66, 169, 166, 9, 129, 34, 32, 105, 154, 149, 4, 137, 10, 69, 36, 153, 8, 33, 22, 162, 9, 26, 17, 106, 90, 1, 102, 68, 149, 26, 153, 25, 33, 97, 0, 170, 106, 2, 105, 130, 129, 164, 65, 96, 2, 26, 106, 4, 66, 26, 138, 22, 100, 33, 82, 36, 64, 40, 170, 42, 164, 0, 170, 168, 101, 36, 161, 82, 72, 102, 34, 26, 6, 40, 129, 166, 170, 150, 0, 152, 37, 104, 150, 37, 148, 136},
    {134, 145, 82, 149, 25, 69, 42, 80, 168, 132, 148, 86, 85, 17, 70, 73, 42, 148, 84, 106, 164, 24, 166, 20, 166, 80, 42, 69, 2, 138, 170, 70, 65, 26, 24, 64, 97, 154, 34, 24, 166, 69, 22, 90, 66, 138, 10, 66, 0, 74, 136, 150, 85, 144, 104, 90, 129, 69, 5, 152, 106, 88, 105, 6, 82, 100, 40, 161, 100, 146, 84, 148, 100, 80, 9, 81, 68, 72, 154, 18, 96, 34, 6, 68, 81, 25, 137, 144, 136, 17, 66, 89, 164, 149, 168, 80, 86, 149, 150, 138, 169, 144, 146, 25, 88, 4, 136, 97, 22, 149, 149, 21, 146, 149, 97, 104, 89, 26, 134, 168, 153, 98, 154, 18, 149, 73, 102, 138, 168, 165, 84, 22, 38, 162, 2, 132, 130, 101, 133, 150, 106, 96, 22, 138, 26, 104, 170, 152, 81, 69, 129, 42, 146, 170, 66, 106, 165, 37, 42, 164, 164, 9, 133, 68, 82, 106, 129, 105, 154, 136, 105, 165, 73, 145, 153, 160, 17, 149, 152, 16, 164, 154, 8, 69, 42, 106, 86, 84, 65, 66, 134, 86, 37, 82, 89, 26, 169, 154, 102, 22, 22, 34, 145, 170, 72, 72, 100, 74, 26, 73, 5, 65, 70, 144, 9, 145, 102, 86, 9, 73, 69, 42, 89, 169, 106, 2, 149, 20, 144, 74, 74, 96, 70, 90, 104, 150, 36, 86, 74, 146, 33, 85, 38, 20, 100, 104, 18, 22, 162, 145, 42, 37, 128, 100, 153, 4, 41, 145, 145, 162, 33, 86, 80, 64, 9, 21, 152, 0, 2, 42, 40, 40, 133, 102, 169, 97, 152, 5, 69, 85, 85, 102, 153, 38, 145, 98, 33, 4, 9, 137, 37, 104, 17, 25, 160, 168, 5, 16, 82, 6, 80, 22, 104, 66, 70, 68, 81, 96, 164, 154, 152, 2, 22, 90, 164, 152, 146, 73, 34, 4, 41, 38, 145, 148, 165, 25, 160, 132, 33, 68, 130, 32, 134, 70, 1, 89, 40, 98, 154, 152, 66, 145, 9, 17, 74, 80, 146, 25, 70, 150, 74, 145, 102, 150, 97, 16, 81, 154, 25, 100, 150, 169, 8, 64, 146, 26, 90, 41, 36, 154, 129, 24, 10, 38, 17, 161, 17, 166, 130, 146, 153, 106, 105, 134},
    {150, 169, 82, 37, 33, 149, 81, 69, 130, 133, 10, 154, 101, 89, 17, 102, 6, 153, 105, 24, 165, 106, 42, 160, 168, 38, 144, 41, 170, 33, 149, 22, 154, 166, 137, 69, 86, 21, 152, 24, 16, 89, 82, 86, 137, 42, 90, 36, 81, 165, 86, 150, 154, 74, 86, 68, 6, 24, 10, 90, 129, 90, 152, 89, 10, 154, 80, 154, 20, 100, 36, 101, 98, 90, 84, 160, 166, 1, 100, 148, 40, 165, 170, 25, 73, 66, 102, 68, 128, 150, 101, 26, 132, 150, 89, 34, 69, 138, 86, 133, 22, 165, 166, 85, 74, 154, 21, 37, 148, 102, 145, 24, 161, 136, 24, 82, 21, 20, 25, 22, 88, 4, 165, 146, 102, 38, 150, 130, 33, 26, 102, 169, 73, 166, 26, 88, 104, 149, 41, 68, 164, 17, 165, 144, 82, 32, 105, 36, 65, 132, 165, 149, 89, 150, 170, 165, 100, 106, 134, 41, 97, 146, 96, 149, 170, 97, 24, 138, 84, 162, 17, 24, 69, 37, 68, 25, 41, 98, 89, 90, 106, 130, 154, 24, 26, 33, 73, 97, 154, 82, 22, 101, 106, 88, 100, 25, 40, 150, 8, 136, 2, 101, 133, 96, 133, 8, 89, 37, 32, 170, 8, 98, 22, 101, 32, 1, 33, 161, 104, 106, 41, 105, 154, 38, 164, 18, 134, 89, 4, 165, 18, 10, 104, 149, 132, 74, 70, 153, 166, 73, 42, 34, 144, 149, 162, 20, 89, 137, 33, 33, 2, 104, 89, 89, 145, 152, 41, 37, 80, 90, 164, 21, 146, 90, 164, 129, 65, 168, 104, 80, 41, 105, 105, 102, 149, 22, 90, 166, 100, 134, 166, 73, 17, 81, 164, 96, 6, 130, 130, 0, 22, 10, 6, 24, 154, 161, 154, 97, 40, 70, 106, 101, 146, 74, 133, 146, 20, 22, 132, 42, 5, 5, 8, 22, 89, 74, 22, 18, 132, 170, 144, 153, 102, 168, 150, 85, 97, 153, 33, 105, 20, 26, 101, 152, 98, 102, 81, 129, 150, 106, 166, 138, 105, 0, 146, 65, 17, 32, 165, 82, 88, 100, 86, 40, 80, 150, 128, 84, 5, 97, 1, 0, 96, 41, 165, 73, 37, 85, 129, 86, 165, 69, 1, 88, 69, 38, 148, 162, 42, 18, 37, 74, 65, 164},
    {2, 1, 16, 104, 130, 81, 169, 137, 9, 2, 97, 4, 162, 85, 5, 104, 33, 25, 150, 102, 69, 9, 146, 133, 84, 89, 106, 5, 138, 170, 168, 84, 72, 149, 89, 105, 170, 169, 66, 98, 42, 70, 102, 41, 22, 130, 80, 164, 89, 170, 10, 20, 137, 154, 90, 41, 138, 73, 40, 89, 168, 22, 90, 82, 149, 85, 168, 130, 137, 9, 16, 37, 105, 32, 105, 86, 22, 80, 170, 165, 100, 146, 34, 4, 164, 97, 170, 2, 38, 86, 6, 20, 101, 0, 153, 170, 86, 74, 85, 90, 66, 148, 149, 89, 102, 146, 164, 136, 69, 165, 148, 80, 144, 73, 70, 134, 24, 166, 25, 154, 149, 72, 150, 161, 65, 66, 152, 70, 134, 85, 101, 152, 150, 0, 65, 133, 128, 101, 41, 85, 70, 9, 170, 138, 96, 88, 37, 160, 154, 100, 25, 164, 145, 154, 64, 8, 42, 82, 165, 74, 38, 38, 65, 106, 133, 26, 153, 150, 166, 130, 164, 138, 106, 102, 74, 104, 70, 22, 152, 102, 37, 26, 133, 153, 72, 152, 10, 165, 101, 129, 26, 101, 164, 68, 42, 86, 65, 160, 170, 21, 97, 8, 150, 64, 128, 81, 128, 101, 20, 37, 37, 150, 85, 90, 88, 69, 168, 36, 86, 37, 72, 98, 161, 90, 9, 166, 84, 153, 2, 24, 138, 160, 153, 105, 134, 154, 82, 69, 133, 98, 132, 106, 134, 98, 24, 102, 105, 165, 4, 26, 101, 160, 130, 17, 66, 136, 85, 89, 66, 165, 73, 168, 88, 152, 137, 74, 134, 145, 88, 70, 148, 96, 9, 70, 41, 25, 162, 153, 85, 9, 85, 66, 162, 10, 25, 98, 82, 154, 66, 161, 90, 74, 1, 84, 133, 148, 68, 25, 37, 65, 128, 153, 18, 168, 98, 5, 37, 130, 136, 146, 68, 84, 1, 160, 100, 26, 161, 101, 65, 129, 25, 164, 138, 17, 89, 70, 149, 84, 134, 20, 86, 104, 36, 164, 169, 21, 105, 150, 18, 162, 161, 170, 69, 33, 132, 17, 160, 98, 65, 32, 69, 37, 9, 8, 162, 20, 170, 80, 90, 10, 164, 0, 37, 138, 10, 148, 166, 34, 136, 138, 106, 149, 138, 0, 169, 168, 9, 144, 74, 153, 73, 73, 105, 164},
    {41, 0, 133, 37, 134, 153, 85, 154, 166, 73, 169, 17, 21, 73, 96, 81, 89, 101, 105, 145, 105, 165, 169, 9, 153, 148, 164, 41, 69, 2, 82, 149, 70, 152, 162, 137, 74, 86, 105, 150, 41, 85, 164, 25, 149, 69, 88, 65, 133, 97, 89, 90, 102, 101, 104, 66, 22, 130, 154, 106, 33, 152, 168, 89, 134, 41, 40, 18, 105, 20, 86, 145, 74, 26, 150, 169, 101, 17, 85, 161, 68, 85, 134, 6, 150, 85, 169, 169, 165, 153, 149, 104, 101, 153, 166, 145, 169, 170, 25, 98, 138, 65, 170, 96, 148, 130, 150, 153, 150, 153, 42, 42, 106, 101, 136, 42, 86, 40, 72, 144, 105, 154, 98, 146, 154, 21, 37, 66, 73, 170, 168, 6, 24, 98, 86, 102, 73, 74, 105, 34, 8, 4, 145, 164, 170, 101, 86, 38, 17, 98, 149, 133, 26, 145, 169, 102, 25, 149, 132, 165, 161, 42, 101, 129, 42, 72, 145, 6, 21, 154, 154, 72, 130, 25, 170, 133, 129, 144, 82, 37, 162, 101, 149, 26, 129, 42, 41, 26, 84, 148, 148, 104, 0, 9, 21, 82, 90, 152, 129, 149, 24, 168, 98, 20, 166, 170, 70, 154, 6, 150, 96, 41, 165, 129, 130, 72, 104, 82, 98, 149, 136, 38, 132, 73, 42, 148, 145, 41, 104, 0, 85, 86, 128, 169, 162, 80, 153, 98, 166, 97, 146, 166, 98, 26, 106, 20, 102, 73, 89, 9, 22, 106, 168, 148, 169, 106, 17, 170, 161, 132, 154, 106, 90, 96, 0, 98, 33, 138, 10, 9, 100, 5, 36, 10, 2, 149, 89, 128, 6, 40, 64, 89, 85, 154, 5, 34, 37, 90, 37, 36, 153, 17, 166, 2, 8, 165, 89, 2, 0, 136, 80, 160, 18, 64, 68, 146, 169, 74, 32, 5, 100, 164, 40, 145, 4, 89, 96, 86, 4, 9, 42, 137, 74, 149, 152, 89, 136, 82, 104, 152, 145, 0, 137, 10, 10, 154, 100, 37, 66, 18, 137, 10, 152, 18, 165, 145, 34, 73, 134, 18, 17, 148, 168, 161, 149, 152, 129, 82, 74, 152, 149, 33, 105, 21, 81, 170, 148, 70, 138, 33, 72, 88, 18, 101, 152, 133, 134, 154, 85, 85, 8, 101, 101, 16},
    {37, 169, 134, 17, 42, 33, 97, 26, 70, 170, 66, 69, 136, 16, 160, 132, 82, 41, 74, 4, 65, 153, 26, 154, 129, 98, 164, 152, 106, 68, 161, 134, 26, 150, 137, 82, 148, 153, 37, 164, 88, 22, 37, 130, 134, 162, 168, 98, 37, 16, 33, 133, 4, 161, 82, 153, 86, 68, 133, 1, 2, 132, 146, 138, 42, 132, 37, 84, 137, 65, 86, 98, 37, 150, 64, 73, 72, 149, 133, 137, 138, 88, 150, 104, 106, 41, 22, 161, 166, 137, 165, 10, 144, 153, 148, 84, 101, 85, 25, 24, 130, 73, 2, 41, 34, 32, 0, 37, 80, 24, 165, 152, 105, 17, 128, 154, 6, 88, 22, 16, 101, 98, 164, 4, 64, 166, 18, 104, 41, 154, 41, 68, 136, 148, 86, 153, 98, 82, 82, 129, 104, 104, 8, 105, 89, 42, 101, 102, 16, 88, 164, 86, 90, 104, 64, 82, 101, 102, 36, 106, 37, 170, 69, 166, 100, 104, 73, 24, 37, 88, 41, 81, 146, 150, 104, 102, 26, 134, 133, 165, 166, 89, 101, 66, 97, 154, 134, 26, 84, 69, 42, 153, 69, 149, 106, 18, 90, 165, 37, 100, 68, 168, 72, 70, 26, 134, 5, 73, 21, 42, 26, 66, 16, 90, 153, 137, 74, 74, 40, 101, 165, 153, 90, 38, 153, 145, 130, 134, 104, 149, 33, 73, 80, 17, 164, 149, 38, 42, 170, 36, 89, 6, 100, 162, 152, 4, 20, 24, 144, 166, 41, 160, 170, 38, 82, 66, 40, 6, 5, 33, 105, 161, 82, 84, 102, 89, 169, 144, 150, 144, 6, 97, 134, 5, 72, 145, 20, 24, 166, 88, 40, 90, 148, 152, 128, 102, 42, 168, 168, 136, 72, 133, 82, 38, 69, 168, 34, 152, 134, 88, 33, 80, 17, 66, 104, 32, 100, 150, 100, 70, 0, 90, 166, 130, 9, 34, 165, 133, 16, 21, 17, 6, 69, 161, 68, 97, 90, 20, 137, 90, 6, 100, 154, 26, 165, 169, 130, 88, 18, 26, 160, 130, 41, 22, 34, 21, 72, 32, 82, 130, 164, 164, 73, 89, 133, 153, 8, 130, 17, 18, 138, 165, 106, 0, 104, 68, 20, 160, 5, 86, 38, 38, 10, 20, 166, 90, 134, 165, 128, 150, 104, 164, 130, 165},
    {82, 105, 88, 74, 101, 138, 89, 168, 169, 24, 25, 42, 85, 85, 36, 65, 154, 24, 165, 20, 161, 74, 96, 82, 70, 98, 42, 133, 33, 42, 105, 162, 26, 81, 80, 100, 145, 84, 32, 38, 32, 100, 41, 164, 100, 24, 89, 37, 82, 80, 80, 6, 134, 74, 37, 97, 138, 106, 33, 98, 97, 102, 132, 106, 134, 38, 18, 84, 101, 106, 24, 17, 100, 72, 65, 145, 74, 25, 41, 134, 104, 90, 106, 154, 42, 26, 25, 137, 105, 102, 166, 16, 105, 165, 72, 0, 149, 82, 106, 154, 149, 102, 81, 32, 98, 144, 85, 105, 86, 144, 89, 85, 21, 161, 82, 138, 74, 90, 73, 148, 104, 40, 149, 150, 36, 149, 105, 145, 102, 42, 106, 38, 38, 20, 149, 26, 150, 37, 85, 89, 149, 105, 104, 86, 18, 32, 40, 86, 68, 89, 9, 84, 100, 34, 102, 36, 102, 132, 38, 68, 138, 82, 41, 96, 154, 160, 104, 2, 89, 129, 73, 170, 26, 149, 38, 88, 162, 17, 37, 129, 96, 84, 42, 150, 153, 102, 138, 81, 168, 40, 36, 84, 164, 5, 36, 148, 65, 129, 90, 166, 150, 164, 42, 169, 149, 100, 21, 138, 17, 102, 85, 162, 170, 154, 16, 144, 38, 165, 17, 128, 25, 26, 34, 165, 130, 146, 89, 97, 130, 164, 89, 81, 170, 81, 100, 22, 70, 98, 160, 162, 138, 24, 18, 170, 146, 72, 97, 102, 74, 160, 73, 150, 18, 149, 89, 106, 21, 106, 106, 72, 132, 90, 65, 149, 64, 9, 32, 9, 16, 169, 82, 34, 40, 18, 154, 66, 88, 152, 134, 154, 134, 169, 153, 154, 88, 170, 66, 162, 36, 6, 162, 150, 90, 42, 0, 148, 161, 72, 26, 42, 66, 24, 165, 69, 164, 32, 72, 150, 37, 86, 42, 21, 73, 154, 10, 160, 42, 38, 150, 9, 98, 34, 72, 132, 145, 5, 106, 24, 161, 72, 85, 25, 37, 26, 144, 148, 74, 84, 22, 145, 41, 153, 16, 90, 82, 165, 17, 65, 16, 145, 161, 84, 146, 148, 81, 20, 97, 4, 9, 73, 21, 89, 69, 160, 73, 16, 6, 0, 134, 41, 148, 85, 136, 154, 42, 32, 97, 74, 26, 154, 168, 37, 1, 85},
    {105, 168, 161, 146, 85, 154, 17, 65, 97, 105, 32, 149, 150, 130, 132, 102, 137, 98, 100, 42, 149, 70, 96, 96, 154, 89, 85, 102, 153, 10, 66, 165, 165, 25, 136, 18, 169, 169, 38, 150, 86, 6, 72, 42, 153, 106, 25, 22, 81, 154, 32, 18, 73, 65, 97, 5, 102, 164, 10, 32, 169, 33, 82, 22, 129, 102, 169, 36, 129, 73, 165, 149, 89, 42, 104, 138, 101, 18, 162, 66, 166, 38, 86, 88, 154, 85, 106, 90, 96, 72, 153, 98, 38, 149, 150, 138, 42, 170, 138, 34, 145, 0, 105, 21, 102, 84, 73, 82, 162, 162, 4, 32, 137, 105, 170, 41, 170, 21, 169, 66, 1, 96, 145, 102, 105, 18, 146, 130, 32, 106, 144, 10, 105, 81, 17, 89, 105, 82, 6, 26, 153, 85, 41, 8, 102, 20, 170, 42, 26, 0, 138, 133, 138, 64, 36, 149, 85, 70, 149, 42, 145, 148, 18, 18, 162, 66, 138, 36, 150, 102, 84, 26, 137, 69, 88, 73, 146, 144, 26, 85, 86, 154, 105, 70, 129, 86, 98, 152, 148, 90, 166, 149, 42, 148, 154, 166, 161, 86, 102, 84, 134, 145, 129, 24, 38, 137, 100, 16, 132, 100, 21, 150, 146, 73, 33, 149, 154, 132, 105, 17, 90, 144, 149, 40, 96, 164, 38, 105, 90, 104, 148, 137, 102, 9, 90, 104, 169, 166, 82, 69, 72, 34, 40, 33, 101, 150, 128, 10, 36, 148, 149, 161, 129, 38, 170, 25, 101, 97, 80, 98, 40, 6, 73, 4, 18, 148, 165, 169, 104, 130, 86, 168, 104, 169, 138, 153, 81, 86, 153, 40, 85, 130, 69, 144, 6, 89, 70, 170, 80, 97, 37, 169, 97, 9, 162, 96, 40, 137, 74, 98, 66, 106, 154, 129, 153, 72, 42, 168, 41, 33, 24, 81, 154, 26, 138, 65, 82, 24, 130, 0, 22, 74, 101, 153, 70, 1, 1, 5, 81, 86, 89, 132, 150, 0, 106, 85, 85, 138, 136, 165, 36, 104, 106, 64, 18, 145, 18, 33, 66, 149, 134, 20, 101, 164, 104, 161, 4, 41, 10, 36, 88, 106, 38, 161, 42, 137, 84, 168, 169, 36, 144, 65, 86, 38, 105, 96, 1, 86, 129, 153, 41, 153, 162, 153},
    {150, 105, 106, 154, 130, 42, 37, 138, 136, 164, 70, 152, 81, 162, 88, 97, 133, 160, 74, 65, 130, 98, 105, 74, 81, 145, 89, 97, 133, 82, 166, 90, 26, 89, 150, 161, 90, 65, 41, 165, 165, 145, 41, 138, 25, 20, 25, 105, 73, 81, 133, 101, 10, 65, 132, 169, 146, 134, 149, 149, 153, 164, 84, 40, 150, 170, 21, 37, 64, 32, 150, 81, 88, 145, 80, 26, 42, 169, 104, 160, 133, 96, 149, 74, 85, 86, 98, 22, 101, 32, 85, 69, 98, 168, 16, 168, 133, 25, 162, 100, 25, 86, 146, 72, 102, 97, 101, 65, 20, 150, 68, 9, 150, 85, 86, 96, 41, 132, 153, 170, 25, 149, 161, 70, 0, 144, 88, 101, 89, 132, 64, 144, 153, 38, 10, 86, 33, 32, 2, 149, 165, 37, 166, 85, 154, 84, 40, 34, 138, 5, 17, 106, 101, 5, 134, 144, 73, 170, 26, 85, 150, 101, 170, 164, 81, 150, 96, 90, 88, 5, 84, 169, 104, 89, 102, 41, 74, 105, 106, 152, 81, 162, 20, 102, 81, 162, 88, 8, 146, 84, 36, 80, 10, 82, 101, 64, 133, 89, 41, 38, 4, 38, 0, 17, 88, 128, 16, 85, 96, 68, 38, 41, 97, 150, 21, 65, 96, 89, 105, 96, 73, 144, 149, 162, 90, 89, 149, 104, 101, 130, 152, 101, 17, 66, 130, 24, 170, 4, 81, 4, 145, 97, 144, 154, 129, 166, 74, 1, 153, 161, 88, 82, 80, 169, 5, 2, 153, 152, 84, 10, 168, 80, 129, 170, 2, 9, 89, 42, 129, 138, 69, 9, 80, 68, 145, 10, 154, 154, 165, 130, 170, 149, 21, 102, 169, 102, 105, 129, 144, 80, 164, 81, 22, 150, 148, 98, 153, 90, 64, 169, 85, 21, 86, 128, 34, 9, 69, 148, 152, 153, 170, 40, 106, 134, 73, 72, 100, 170, 136, 69, 70, 146, 105, 104, 160, 90, 16, 96, 33, 132, 166, 36, 16, 22, 170, 138, 149, 80, 86, 170, 74, 133, 153, 2, 4, 144, 100, 88, 146, 96, 165, 153, 138, 42, 130, 89, 146, 170, 148, 8, 149, 8, 168, 90, 85, 82, 9, 164, 18, 1, 6, 69, 132, 152, 64, 34, 88, 16, 97, 128, 102, 6, 82, 21},
    {65, 80, 164, 97, 40, 81, 37, 153, 138, 160, 17, 138, 8, 146, 17, 138, 96, 84, 98, 42, 10, 16, 152, 169, 136, 66, 169, 40, 80, 40, 88, 161, 153, 138, 17, 88, 146, 72, 160, 85, 34, 8, 130, 145, 133, 18, 70, 42, 86, 81, 97, 133, 105, 24, 4, 41, 137, 102, 161, 82, 21, 97, 106, 5, 86, 40, 5, 26, 164, 6, 84, 88, 162, 100, 68, 37, 18, 106, 169, 65, 81, 70, 165, 80, 73, 97, 168, 74, 37, 106, 148, 133, 69, 106, 40, 72, 38, 6, 144, 81, 146, 33, 164, 168, 166, 169, 97, 106, 90, 133, 128, 85, 134, 86, 100, 18, 133, 144, 166, 106, 146, 164, 130, 105, 2, 134, 85, 25, 166, 161, 5, 149, 153, 36, 24, 26, 130, 37, 129, 134, 170, 96, 37, 154, 20, 101, 149, 102, 169, 102, 166, 168, 2, 164, 25, 129, 150, 97, 132, 149, 164, 25, 66, 98, 2, 166, 32, 84, 25, 96, 144, 165, 150, 154, 154, 96, 100, 69, 150, 41, 38, 146, 154, 137, 82, 40, 98, 169, 170, 24, 169, 101, 101, 18, 4, 148, 90, 90, 168, 149, 22, 170, 137, 102, 169, 149, 168, 38, 145, 38, 130, 38, 73, 82, 136, 144, 20, 33, 6, 18, 128, 166, 106, 0, 152, 90, 144, 69, 37, 2, 68, 25, 145, 133, 168, 169, 41, 69, 10, 102, 138, 100, 146, 128, 146, 136, 160, 129, 69, 137, 74, 132, 145, 160, 104, 165, 88, 38, 166, 152, 106, 97, 17, 4, 0, 145, 166, 150, 137, 85, 145, 148, 98, 101, 41, 65, 166, 165, 37, 169, 66, 145, 18, 0, 162, 86, 138, 66, 81, 69, 161, 42, 168, 2, 164, 136, 149, 102, 100, 145, 101, 65, 106, 146, 105, 82, 88, 81, 128, 88, 90, 84, 130, 102, 88, 98, 82, 36, 0, 2, 40, 85, 169, 166, 160, 130, 65, 146, 161, 152, 89, 148, 24, 16, 74, 105, 153, 168, 68, 164, 38, 81, 74, 96, 170, 138, 38, 161, 21, 106, 90, 24, 150, 74, 106, 145, 25, 90, 86, 100, 9, 136, 162, 33, 80, 132, 42, 70, 162, 132, 138, 162, 10, 134, 161, 86, 69, 153, 144, 168, 105, 86, 102, 84},
    {4, 18, 130, 106, 152, 133, 9, 97, 146, 104, 128, 170, 69, 18, 26, 86, 21, 8, 8, 144, 10, 86, 144, 145, 134, 152, 105, 26, 37, 82, 17, 74, 106, 136, 161, 8, 41, 149, 74, 148, 17, 9, 128, 20, 134, 85, 153, 149, 41, 105, 89, 81, 166, 89, 149, 129, 136, 154, 166, 153, 66, 161, 69, 32, 97, 17, 166, 64, 65, 68, 150, 134, 64, 164, 37, 16, 164, 37, 68, 0, 136, 170, 9, 146, 36, 70, 38, 137, 98, 41, 9, 106, 37, 104, 90, 132, 133, 133, 145, 102, 68, 25, 70, 90, 10, 72, 20, 130, 100, 40, 168, 96, 65, 6, 169, 73, 101, 145, 88, 136, 152, 80, 10, 70, 89, 85, 85, 101, 101, 170, 169, 90, 86, 90, 145, 150, 21, 162, 73, 4, 32, 68, 132, 146, 80, 149, 106, 105, 42, 154, 149, 166, 144, 1, 26, 84, 138, 152, 168, 148, 6, 101, 138, 152, 102, 101, 72, 130, 80, 162, 128, 153, 32, 166, 69, 138, 138, 165, 145, 70, 17, 101, 150, 5, 150, 129, 73, 90, 138, 8, 33, 170, 89, 133, 84, 97, 86, 21, 89, 154, 149, 74, 2, 148, 134, 40, 73, 84, 130, 128, 162, 162, 97, 21, 42, 20, 161, 152, 161, 164, 21, 152, 64, 145, 69, 132, 154, 69, 137, 105, 26, 102, 136, 128, 170, 153, 136, 166, 34, 5, 105, 98, 170, 134, 97, 68, 150, 40, 41, 21, 98, 168, 24, 161, 170, 36, 18, 22, 0, 104, 106, 25, 130, 137, 149, 22, 153, 70, 6, 148, 17, 86, 26, 153, 106, 168, 2, 90, 170, 100, 160, 146, 6, 38, 132, 137, 32, 166, 96, 74, 136, 164, 152, 168, 64, 153, 9, 101, 6, 170, 161, 88, 136, 132, 164, 154, 170, 72, 0, 169, 32, 106, 40, 32, 9, 85, 104, 152, 73, 36, 152, 160, 138, 160, 88, 168, 80, 24, 66, 22, 101, 40, 133, 98, 86, 6, 21, 132, 33, 69, 102, 97, 169, 132, 133, 145, 132, 10, 0, 74, 145, 96, 97, 153, 84, 130, 40, 105, 164, 153, 65, 42, 90, 69, 169, 138, 32, 5, 106, 6, 42, 129, 18, 132, 82, 9, 170, 6, 89, 16, 101, 129, 90, 97},
    {38, 169, 90, 37, 154, 74, 86, 161, 154, 37, 105, 102, 80, 101, 85, 69, 66, 165, 105, 68, 102, 8, 105, 150, 145, 18, 154, 65, 146, 170, 162, 81, 101, 162, 129, 42, 82, 169, 128, 105, 16, 66, 98, 160, 20, 41, 136, 168, 144, 18, 170, 21, 101, 105, 150, 18, 32, 72, 22, 133, 64, 138, 105, 37, 89, 81, 104, 42, 170, 41, 18, 34, 82, 133, 130, 37, 136, 90, 170, 26, 133, 129, 154, 25, 8, 90, 84, 40, 68, 106, 69, 82, 102, 105, 136, 148, 168, 9, 98, 86, 104, 104, 106, 8, 24, 130, 166, 65, 137, 170, 144, 161, 101, 70, 97, 22, 100, 162, 74, 65, 85, 130, 161, 6, 38, 80, 81, 130, 73, 102, 97, 100, 100, 37, 166, 106, 102, 81, 100, 74, 72, 101, 162, 24, 106, 170, 144, 164, 66, 68, 102, 133, 74, 70, 129, 149, 86, 85, 74, 89, 134, 22, 144, 69, 170, 8, 146, 85, 86, 26, 34, 149, 21, 70, 160, 32, 166, 80, 84, 105, 154, 81, 20, 102, 150, 101, 146, 146, 137, 80, 170, 65, 102, 136, 106, 69, 89, 102, 170, 164, 129, 89, 152, 154, 73, 34, 90, 161, 0, 32, 137, 0, 97, 145, 33, 70, 162, 166, 100, 2, 26, 154, 88, 85, 72, 152, 138, 164, 130, 104, 165, 82, 20, 133, 130, 88, 134, 8, 42, 4, 42, 81, 21, 152, 169, 26, 41, 137, 74, 137, 130, 101, 133, 152, 168, 6, 98, 130, 160, 18, 134, 81, 8, 160, 154, 18, 152, 102, 88, 85, 9, 37, 25, 137, 10, 146, 149, 146, 101, 105, 10, 42, 26, 37, 25, 104, 26, 10, 149, 105, 88, 21, 162, 170, 25, 102, 88, 41, 80, 152, 90, 154, 145, 36, 20, 105, 134, 24, 90, 25, 97, 80, 101, 18, 21, 85, 100, 84, 168, 86, 64, 101, 22, 5, 1, 22, 20, 90, 164, 9, 5, 8, 96, 134, 129, 2, 168, 164, 168, 161, 0, 104, 168, 128, 164, 73, 146, 98, 160, 18, 40, 133, 72, 166, 16, 80, 84, 128, 21, 169, 18, 85, 149, 148, 8, 164, 68, 37, 82, 38, 96, 82, 16, 152, 152, 144, 1, 85, 36, 129, 154, 160, 128, 86},
    {133, 148, 96, 152, 169, 145, 152, 42, 154, 37, 32, 161, 161, 153, 100, 22, 2, 81, 81, 88, 72, 72, 165, 18, 37, 5, 105, 6, 90, 24, 105, 170, 42, 161, 64, 0, 104, 25, 164, 80, 74, 133, 40, 153, 149, 25, 22, 104, 89, 85, 105, 166, 153, 38, 162, 149, 69, 160, 9, 166, 6, 4, 65, 65, 136, 34, 38, 10, 149, 90, 86, 40, 96, 137, 42, 130, 69, 102, 136, 6, 162, 85, 134, 21, 168, 150, 134, 168, 16, 164, 5, 165, 100, 5, 81, 34, 169, 137, 104, 6, 150, 41, 104, 150, 154, 82, 38, 164, 8, 0, 134, 32, 170, 21, 66, 154, 86, 9, 170, 9, 82, 161, 10, 38, 86, 32, 33, 166, 9, 4, 21, 73, 170, 154, 25, 161, 106, 149, 41, 148, 170, 100, 106, 1, 16, 166, 169, 16, 65, 85, 105, 104, 145, 165, 21, 168, 34, 5, 88, 166, 81, 38, 4, 84, 70, 100, 98, 89, 84, 102, 22, 88, 88, 33, 148, 161, 73, 130, 84, 164, 98, 102, 70, 97, 162, 169, 69, 146, 82, 86, 169, 36, 145, 64, 40, 74, 169, 170, 84, 70, 161, 65, 18, 84, 165, 98, 5, 41, 72, 136, 154, 161, 149, 102, 86, 1, 86, 169, 149, 136, 8, 42, 89, 41, 73, 82, 138, 166, 168, 153, 153, 106, 162, 104, 96, 153, 4, 162, 74, 5, 149, 148, 22, 2, 66, 138, 165, 5, 132, 34, 80, 130, 170, 86, 145, 134, 161, 149, 89, 9, 149, 166, 100, 81, 106, 26, 130, 153, 166, 104, 106, 101, 85, 148, 84, 33, 134, 85, 130, 38, 132, 70, 40, 138, 25, 152, 82, 146, 134, 65, 70, 70, 81, 17, 168, 4, 128, 6, 68, 33, 100, 69, 165, 17, 24, 148, 74, 148, 0, 2, 2, 9, 22, 25, 33, 8, 85, 81, 136, 42, 65, 8, 10, 164, 82, 4, 145, 34, 101, 1, 146, 138, 34, 1, 34, 89, 90, 10, 146, 1, 74, 104, 166, 66, 40, 164, 105, 160, 84, 160, 130, 74, 25, 148, 161, 133, 129, 134, 148, 2, 164, 17, 10, 154, 101, 169, 20, 84, 42, 105, 68, 97, 85, 133, 5, 88, 4, 8, 72, 136, 168, 138, 81, 5},
    {86, 26, 26, 34, 164, 80, 104, 25, 134, 69, 86, 90, 37, 88, 170, 150, 104, 166, 25, 153, 90, 161, 146, 152, 65, 152, 80, 65, 37, 170, 170, 70, 0, 26, 17, 41, 36, 128, 152, 33, 6, 88, 65, 72, 166, 133, 36, 136, 136, 152, 96, 36, 26, 25, 24, 17, 105, 82, 133, 148, 20, 84, 133, 70, 165, 90, 148, 148, 38, 169, 8, 33, 106, 106, 34, 168, 166, 38, 170, 105, 164, 148, 16, 42, 132, 0, 90, 81, 69, 134, 10, 89, 20, 18, 161, 69, 162, 74, 74, 2, 154, 104, 41, 102, 134, 128, 134, 41, 96, 149, 169, 86, 73, 133, 74, 4, 2, 106, 98, 70, 149, 164, 132, 129, 21, 16, 37, 36, 20, 149, 106, 90, 20, 170, 10, 81, 90, 169, 144, 145, 162, 105, 130, 38, 146, 144, 82, 153, 16, 105, 105, 89, 153, 6, 68, 34, 145, 24, 97, 90, 168, 33, 37, 5, 138, 152, 152, 134, 89, 66, 2, 134, 148, 168, 70, 170, 10, 146, 0, 104, 80, 170, 161, 169, 81, 90, 25, 38, 128, 97, 154, 146, 132, 64, 6, 6, 134, 105, 148, 17, 37, 34, 74, 41, 42, 25, 146, 64, 68, 82, 85, 128, 89, 150, 170, 100, 84, 18, 148, 34, 0, 168, 101, 96, 8, 137, 106, 169, 161, 24, 84, 98, 36, 18, 154, 21, 10, 40, 130, 146, 170, 38, 136, 170, 26, 32, 25, 148, 170, 160, 72, 17, 70, 102, 161, 96, 150, 164, 160, 98, 169, 97, 37, 85, 73, 36, 18, 166, 82, 128, 17, 166, 165, 106, 170, 168, 42, 88, 134, 98, 65, 102, 64, 154, 65, 9, 170, 168, 36, 8, 73, 98, 149, 106, 89, 89, 70, 137, 138, 86, 42, 136, 6, 69, 165, 21, 100, 41, 4, 134, 18, 20, 9, 34, 101, 168, 138, 69, 137, 166, 9, 86, 26, 162, 130, 169, 101, 37, 85, 70, 81, 170, 16, 96, 2, 41, 33, 150, 154, 132, 130, 37, 10, 8, 106, 38, 1, 128, 85, 2, 34, 165, 97, 70, 101, 136, 81, 153, 165, 90, 164, 5, 26, 160, 164, 64, 144, 165, 85, 106, 104, 2, 96, 106, 2, 152, 86, 90, 69, 129, 18, 166, 85, 89},
    {82, 33, 25, 38, 21, 85, 105, 89, 74, 89, 105, 22, 98, 134, 152, 26, 21, 24, 20, 161, 70, 105, 161, 16, 38, 136, 170, 97, 128, 85, 96, 2, 74, 38, 89, 25, 154, 104, 37, 6, 85, 105, 8, 102, 97, 21, 153, 104, 100, 102, 66, 165, 24, 169, 88, 42, 153, 134, 26, 42, 165, 24, 134, 102, 37, 68, 38, 73, 169, 153, 154, 170, 81, 138, 82, 70, 40, 41, 98, 169, 17, 89, 145, 133, 169, 74, 96, 145, 150, 148, 90, 100, 162, 162, 102, 26, 97, 37, 84, 64, 153, 89, 168, 74, 33, 154, 90, 10, 144, 150, 9, 81, 37, 37, 9, 168, 74, 85, 64, 20, 149, 102, 17, 170, 74, 34, 40, 150, 26, 86, 130, 90, 70, 10, 21, 145, 152, 2, 170, 96, 138, 88, 70, 101, 169, 104, 132, 74, 17, 145, 90, 1, 74, 72, 148, 106, 100, 98, 101, 40, 132, 89, 132, 168, 152, 134, 152, 162, 41, 104, 40, 106, 150, 38, 169, 161, 164, 85, 148, 154, 165, 85, 84, 148, 154, 97, 86, 98, 153, 152, 170, 145, 5, 105, 74, 21, 89, 82, 105, 18, 148, 149, 21, 16, 162, 33, 8, 149, 152, 25, 89, 132, 1, 41, 154, 10, 146, 24, 21, 160, 33, 84, 26, 169, 145, 69, 89, 89, 1, 25, 85, 88, 146, 145, 166, 138, 69, 89, 9, 160, 68, 150, 69, 36, 170, 24, 36, 24, 165, 170, 84, 149, 161, 4, 129, 81, 106, 64, 26, 86, 100, 26, 37, 18, 96, 86, 130, 152, 106, 105, 26, 165, 106, 168, 85, 153, 150, 96, 100, 8, 169, 38, 154, 86, 170, 148, 128, 134, 41, 21, 66, 66, 154, 24, 18, 1, 105, 34, 33, 100, 104, 102, 104, 129, 149, 89, 148, 16, 148, 25, 65, 96, 69, 130, 96, 26, 8, 40, 89, 6, 85, 88, 10, 166, 66, 161, 5, 21, 9, 85, 64, 106, 4, 73, 89, 2, 1, 90, 170, 90, 37, 90, 84, 32, 38, 133, 42, 133, 22, 36, 8, 104, 145, 146, 24, 5, 37, 26, 90, 168, 149, 80, 41, 86, 1, 42, 168, 2, 70, 85, 2, 106, 26, 81, 74, 5, 74, 166, 90, 41, 66, 144, 146, 129},
    {170, 152, 10, 153, 69, 170, 81, 90, 154, 38, 150, 165, 165, 152, 100, 150, 162, 2, 166, 154, 161, 136, 18, 145, 86, 88, 9, 137, 84, 105, 166, 106, 21, 86, 26, 170, 101, 152, 34, 105, 24, 33, 72, 90, 169, 82, 150, 16, 81, 4, 16, 100, 170, 20, 21, 32, 85, 129, 72, 42, 138, 32, 150, 148, 22, 161, 66, 41, 42, 2, 10, 145, 4, 4, 129, 73, 154, 32, 145, 22, 144, 70, 20, 10, 169, 24, 65, 152, 88, 69, 6, 128, 168, 129, 145, 153, 73, 160, 150, 162, 90, 138, 170, 81, 146, 153, 41, 38, 137, 1, 81, 33, 170, 162, 162, 100, 102, 162, 134, 88, 86, 10, 86, 90, 88, 152, 169, 32, 153, 166, 25, 152, 21, 101, 162, 86, 42, 100, 98, 102, 22, 33, 88, 8, 128, 150, 166, 133, 65, 137, 134, 74, 137, 128, 22, 32, 22, 153, 164, 153, 154, 100, 145, 166, 150, 150, 129, 37, 64, 86, 146, 101, 96, 154, 10, 149, 165, 146, 38, 164, 105, 170, 41, 152, 154, 166, 88, 9, 96, 153, 101, 26, 85, 10, 144, 32, 169, 97, 81, 17, 74, 2, 36, 69, 96, 32, 85, 137, 66, 32, 129, 148, 102, 144, 70, 101, 160, 20, 20, 21, 129, 64, 22, 97, 85, 105, 169, 6, 153, 1, 146, 85, 149, 66, 69, 82, 104, 160, 81, 150, 1, 170, 20, 101, 149, 170, 168, 86, 32, 4, 128, 41, 10, 82, 89, 34, 129, 105, 134, 73, 18, 160, 4, 132, 85, 146, 154, 86, 166, 166, 89, 88, 21, 137, 150, 86, 133, 150, 152, 18, 65, 100, 134, 21, 65, 136, 26, 153, 37, 1, 17, 6, 2, 137, 146, 70, 38, 101, 9, 72, 9, 40, 101, 100, 70, 34, 101, 144, 64, 150, 24, 73, 5, 154, 81, 38, 164, 134, 136, 161, 41, 145, 101, 18, 25, 10, 136, 104, 168, 154, 154, 130, 0, 65, 81, 132, 25, 150, 73, 5, 169, 8, 85, 137, 132, 136, 105, 80, 162, 4, 32, 166, 34, 132, 152, 170, 153, 96, 26, 145, 153, 66, 134, 40, 149, 25, 42, 104, 100, 41, 74, 8, 8, 132, 164, 162, 38, 104, 106, 90, 102, 150, 25, 105},
    {20, 40, 6, 8, 66, 26, 26, 5, 41, 41, 2, 33, 21, 165, 0, 37, 22, 1, 32, 17, 138, 26, 25, 70, 42, 34, 42, 42, 22, 145, 33, 144, 21, 42, 38, 25, 25, 40, 36, 42, 70, 36, 34, 136, 81, 4, 21, 41, 0, 38, 38, 25, 38, 161, 6, 6, 33, 42, 26, 32, 8, 22, 10, 25, 36, 6, 0, 25, 17, 26, 2, 101, 37, 38, 24, 20, 21, 82, 21, 40, 36, 34, 106, 70, 148, 66, 41, 9, 21, 26, 98, 145, 1, 2, 6, 25, 88, 25, 21, 36, 34, 25, 26, 36, 8, 26, 73, 4, 36, 20, 6, 2, 132, 66, 170, 86, 2, 68, 26, 33, 20, 25, 26, 36, 102, 130, 81, 154, 4, 89, 81, 168, 0, 18, 41, 22, 38, 40, 38, 22, 33, 1, 25, 5, 90, 40, 36, 5, 36, 153, 0, 168, 21, 8, 0, 4, 149, 86, 6, 34, 42, 168, 16, 89, 38, 26, 21, 9, 153, 105, 89, 32, 149, 129, 10, 36, 24, 42, 84, 150, 161, 33, 21, 102, 34, 34, 1, 73, 96, 25, 17, 9, 129, 150, 153, 16, 20, 22, 34, 134, 22, 133, 40, 0, 98, 70, 41, 164, 26, 41, 38, 98, 10, 149, 34, 134, 133, 129, 21, 21, 89, 106, 166, 146, 24, 2, 42, 26, 33, 17, 137, 42, 150, 4, 40, 148, 165, 137, 169, 36, 41, 2, 137, 89, 6, 41, 65, 86, 26, 37, 6, 10, 170, 22, 82, 8, 81, 38, 32, 0, 169, 18, 85, 84, 22, 161, 26, 82, 166, 81, 5, 130, 98, 38, 105, 40, 88, 170, 73, 26, 88, 24, 105, 42, 2, 89, 101, 153, 90, 168, 101, 10, 42, 32, 70, 21, 34, 21, 8, 42, 165, 5, 82, 144, 162, 22, 40, 32, 17, 38, 2, 20, 5, 40, 41, 10, 32, 138, 137, 74, 40, 6, 6, 34, 8, 21, 36, 18, 137, 41, 10, 20, 133, 38, 32, 10, 169, 128, 32, 20, 1, 37, 42, 102, 166, 16, 26, 88, 80, 25, 40, 21, 2, 4, 22, 8, 101, 26, 34, 68, 26, 106, 10, 22, 16, 9, 137, 0, 42, 38, 25, 129, 160, 42, 2, 66, 2, 2, 148, 5, 42, 17, 25, 4},
    {98, 0, 18, 100, 162, 154, 89, 149, 154, 162, 32, 80, 80, 33, 90, 152, 152, 26, 166, 170, 102, 144, 106, 100, 41, 4, 82, 22, 160, 169, 138, 100, 153, 101, 68, 34, 85, 1, 4, 25, 41, 144, 5, 96, 150, 90, 144, 96, 85, 149, 150, 74, 160, 160, 100, 36, 165, 170, 6, 97, 128, 88, 68, 166, 148, 70, 166, 128, 166, 148, 148, 81, 166, 149, 86, 105, 145, 145, 144, 160, 96, 26, 0, 165, 70, 164, 41, 149, 81, 154, 101, 80, 73, 154, 149, 69, 148, 89, 72, 152, 153, 26, 150, 146, 20, 152, 17, 72, 154, 104, 40, 18, 36, 84, 165, 37, 72, 64, 41, 146, 90, 74, 130, 69, 89, 101, 150, 86, 97, 64, 85, 154, 150, 134, 89, 85, 88, 102, 104, 129, 90, 89, 25, 89, 66, 82, 101, 32, 150, 37, 25, 165, 33, 145, 161, 154, 154, 166, 6, 162, 6, 149, 97, 105, 166, 145, 105, 16, 85, 81, 104, 152, 146, 26, 73, 150, 149, 84, 9, 168, 73, 145, 154, 101, 97, 168, 36, 89, 96, 22, 85, 132, 6, 150, 148, 8, 165, 138, 154, 82, 73, 154, 89, 164, 80, 168, 138, 41, 10, 101, 6, 86, 129, 41, 80, 88, 150, 104, 5, 104, 137, 18, 165, 10, 150, 32, 85, 2, 106, 130, 41, 85, 18, 165, 20, 106, 0, 16, 97, 33, 138, 146, 84, 40, 0, 146, 106, 65, 89, 32, 101, 150, 69, 8, 153, 2, 34, 85, 80, 164, 41, 104, 101, 98, 169, 169, 170, 133, 101, 106, 104, 42, 169, 10, 68, 84, 133, 33, 16, 86, 89, 97, 137, 164, 42, 72, 169, 73, 149, 74, 128, 73, 170, 130, 102, 36, 153, 0, 20, 4, 36, 89, 80, 64, 9, 166, 100, 145, 134, 5, 164, 88, 36, 104, 74, 16, 8, 90, 20, 152, 153, 168, 85, 132, 136, 4, 85, 153, 89, 165, 102, 24, 168, 166, 65, 160, 68, 101, 136, 153, 66, 150, 10, 4, 102, 152, 165, 37, 160, 150, 42, 96, 134, 133, 86, 101, 22, 160, 26, 166, 73, 70, 40, 22, 130, 170, 100, 88, 161, 88, 133, 97, 154, 153, 146, 152, 82, 160, 26, 85, 106, 164, 106, 154},
    {144, 25, 84, 148, 36, 132, 102, 32, 137, 10, 130, 24, 66, 4, 165, 133, 134, 2, 137, 129, 161, 69, 137, 153, 66, 106, 34, 64, 106, 82, 6, 149, 65, 81, 33, 65, 40, 26, 86, 68, 154, 166, 106, 20, 152, 89, 97, 26, 160, 149, 130, 6, 137, 85, 133, 69, 89, 105, 164, 5, 85, 70, 101, 73, 6, 18, 153, 20, 81, 25, 88, 5, 166, 33, 18, 80, 65, 153, 133, 68, 33, 85, 74, 80, 105, 84, 6, 10, 170, 2, 101, 65, 133, 169, 42, 86, 81, 153, 72, 153, 166, 32, 166, 89, 165, 4, 154, 66, 69, 22, 72, 41, 41, 161, 40, 160, 138, 25, 1, 70, 6, 17, 37, 153, 106, 165, 134, 66, 154, 150, 96, 170, 105, 169, 150, 128, 150, 74, 10, 6, 154, 102, 86, 169, 161, 81, 150, 18, 169, 96, 144, 132, 80, 148, 82, 145, 97, 82, 166, 17, 133, 166, 134, 102, 152, 85, 38, 105, 9, 85, 82, 86, 9, 5, 2, 169, 154, 133, 72, 97, 69, 146, 132, 168, 101, 37, 84, 38, 101, 165, 82, 136, 145, 88, 154, 80, 97, 85, 84, 160, 34, 169, 16, 166, 101, 146, 90, 26, 17, 102, 165, 101, 81, 10, 137, 170, 85, 85, 81, 102, 33, 100, 22, 168, 129, 101, 86, 144, 65, 97, 6, 106, 68, 137, 144, 25, 73, 154, 90, 24, 168, 164, 149, 136, 104, 22, 148, 96, 170, 88, 6, 152, 101, 152, 17, 82, 98, 66, 24, 10, 162, 80, 166, 85, 38, 89, 97, 145, 170, 138, 90, 65, 134, 150, 166, 164, 150, 18, 89, 86, 24, 9, 42, 169, 33, 41, 25, 70, 129, 69, 160, 145, 85, 149, 144, 72, 37, 144, 5, 153, 84, 20, 73, 82, 25, 40, 136, 89, 0, 134, 34, 106, 6, 41, 6, 21, 33, 138, 40, 0, 166, 80, 34, 106, 5, 22, 69, 138, 101, 145, 40, 162, 37, 69, 81, 65, 106, 1, 85, 9, 150, 88, 42, 8, 137, 128, 66, 130, 8, 101, 133, 9, 32, 26, 88, 165, 9, 65, 32, 97, 133, 41, 66, 129, 134, 168, 105, 38, 18, 38, 86, 17, 40, 150, 100, 85, 64, 74, 8, 98, 136, 137, 34, 149}
};
# 27 "./data_include.h" 2
# 1 "./data_4th/o_weights.h" 1

const attn_fixed_t o_scale = 11.110462188721;
const uint8_t o_weights[96][384] = {
    {150, 105, 168, 165, 134, 164, 153, 102, 165, 82, 2, 85, 2, 86, 66, 150, 162, 81, 162, 82, 106, 101, 89, 86, 100, 4, 25, 21, 134, 161, 72, 144, 144, 154, 153, 21, 70, 40, 136, 102, 130, 154, 2, 37, 22, 96, 148, 33, 168, 130, 160, 168, 80, 152, 146, 153, 146, 73, 33, 169, 73, 105, 26, 81, 102, 42, 106, 106, 81, 41, 74, 106, 137, 37, 138, 164, 26, 25, 18, 166, 81, 100, 102, 42, 169, 104, 97, 81, 88, 154, 154, 166, 36, 25, 86, 64, 26, 82, 74, 101, 34, 132, 161, 101, 18, 144, 66, 18, 89, 26, 73, 24, 18, 170, 68, 138, 161, 138, 73, 170, 42, 105, 100, 165, 144, 97, 96, 88, 100, 86, 128, 70, 98, 66, 105, 165, 81, 106, 85, 100, 146, 170, 152, 82, 106, 101, 169, 162, 102, 97, 22, 105, 22, 89, 74, 144, 64, 165, 66, 106, 170, 138, 40, 16, 41, 5, 70, 150, 149, 81, 70, 90, 160, 138, 153, 82, 148, 102, 65, 144, 105, 88, 89, 84, 88, 90, 26, 98, 105, 9, 149, 132, 138, 41, 149, 130, 162, 89, 133, 41, 2, 21, 70, 161, 148, 10, 96, 144, 165, 36, 90, 66, 152, 22, 85, 20, 40, 98, 69, 154, 165, 102, 18, 134, 40, 149, 80, 129, 41, 8, 145, 150, 38, 84, 73, 32, 24, 160, 105, 146, 18, 102, 98, 128, 42, 130, 36, 85, 16, 148, 72, 138, 89, 81, 38, 81, 129, 165, 130, 153, 105, 70, 148, 162, 169, 153, 130, 25, 166, 65, 153, 160, 66, 89, 69, 137, 73, 148, 144, 36, 69, 81, 32, 69, 129, 85, 33, 34, 101, 170, 132, 130, 166, 136, 138, 90, 148, 160, 150, 98, 101, 165, 100, 65, 84, 9, 138, 169, 38, 9, 104, 138, 150, 26, 154, 4, 170, 137, 148, 165, 98, 154, 66, 161, 165, 129, 10, 86, 26, 42, 166, 169, 41, 153, 37, 82, 170, 34, 68, 168, 160, 81, 66, 149, 36, 149, 97, 81, 150, 89, 33, 169, 70, 20, 73, 152, 21, 42, 168, 24, 133, 133, 146, 68, 22, 138, 100, 152, 40, 102, 66, 144, 164, 153, 21, 102, 133, 25, 136, 4, 16, 68, 96, 5},
    {22, 86, 5, 26, 104, 84, 26, 85, 154, 101, 5, 82, 145, 16, 69, 21, 101, 5, 98, 149, 80, 129, 32, 105, 168, 97, 25, 18, 102, 134, 154, 85, 165, 85, 85, 85, 102, 136, 18, 70, 100, 100, 22, 97, 88, 86, 165, 102, 150, 97, 64, 70, 153, 152, 106, 68, 170, 0, 145, 144, 64, 73, 145, 18, 152, 148, 89, 17, 102, 104, 1, 2, 169, 104, 106, 74, 134, 96, 154, 33, 9, 149, 84, 18, 18, 89, 101, 129, 161, 37, 149, 148, 165, 146, 22, 162, 162, 82, 137, 102, 98, 106, 149, 129, 88, 102, 136, 170, 84, 82, 164, 102, 10, 165, 96, 102, 168, 161, 137, 133, 41, 106, 162, 161, 105, 162, 1, 105, 85, 0, 97, 68, 100, 102, 149, 8, 132, 169, 138, 169, 70, 162, 148, 150, 165, 146, 9, 65, 165, 161, 105, 17, 160, 98, 96, 146, 129, 160, 154, 17, 70, 102, 24, 170, 161, 138, 25, 69, 24, 133, 4, 41, 101, 89, 4, 166, 170, 104, 154, 168, 153, 80, 152, 170, 102, 149, 165, 105, 170, 65, 162, 20, 74, 82, 22, 166, 36, 160, 84, 161, 154, 65, 34, 150, 98, 2, 24, 85, 25, 37, 21, 32, 5, 1, 154, 80, 90, 89, 136, 102, 88, 133, 138, 37, 106, 74, 149, 81, 102, 101, 152, 80, 41, 153, 162, 150, 153, 154, 152, 104, 22, 138, 160, 10, 70, 146, 102, 170, 64, 170, 21, 22, 66, 73, 106, 96, 170, 100, 133, 86, 153, 129, 144, 150, 41, 80, 81, 170, 26, 154, 148, 153, 38, 81, 100, 101, 153, 164, 161, 84, 170, 138, 21, 6, 165, 81, 85, 106, 154, 24, 169, 6, 102, 148, 105, 144, 104, 166, 37, 102, 38, 73, 134, 166, 85, 170, 153, 168, 132, 148, 150, 165, 33, 66, 168, 132, 85, 98, 22, 89, 169, 82, 170, 148, 36, 150, 154, 38, 70, 21, 80, 130, 89, 137, 84, 153, 101, 5, 161, 169, 66, 86, 105, 164, 149, 37, 166, 88, 38, 166, 105, 73, 97, 137, 6, 42, 150, 134, 70, 148, 70, 169, 97, 86, 81, 164, 84, 34, 146, 104, 90, 133, 9, 90, 166, 153, 134, 5, 166, 150, 133, 150, 165, 168},
    {24, 86, 9, 65, 86, 74, 105, 134, 170, 132, 166, 24, 89, 33, 132, 154, 134, 134, 105, 9, 132, 22, 84, 164, 86, 105, 2, 86, 88, 169, 2, 132, 10, 169, 165, 33, 138, 85, 26, 97, 160, 170, 101, 168, 42, 38, 162, 82, 145, 90, 149, 64, 168, 144, 169, 164, 90, 145, 170, 160, 72, 152, 154, 21, 150, 102, 166, 69, 90, 129, 130, 152, 130, 166, 146, 26, 10, 137, 86, 165, 34, 24, 150, 164, 134, 37, 73, 150, 144, 90, 153, 90, 4, 21, 40, 132, 150, 1, 74, 100, 80, 74, 153, 9, 169, 5, 138, 90, 36, 64, 133, 165, 169, 105, 149, 86, 90, 134, 89, 4, 16, 165, 88, 40, 32, 169, 160, 153, 154, 24, 40, 133, 150, 104, 88, 36, 152, 65, 145, 150, 154, 64, 16, 146, 166, 144, 38, 22, 90, 98, 154, 170, 154, 20, 133, 149, 106, 106, 154, 97, 74, 160, 25, 138, 138, 101, 86, 105, 136, 85, 37, 70, 69, 9, 133, 101, 96, 168, 69, 146, 162, 105, 168, 137, 148, 82, 84, 98, 153, 17, 69, 154, 97, 165, 20, 170, 18, 16, 85, 128, 22, 148, 85, 165, 161, 32, 166, 105, 38, 105, 137, 137, 130, 38, 132, 152, 149, 88, 162, 6, 73, 138, 21, 64, 132, 160, 166, 38, 84, 101, 21, 105, 169, 134, 146, 72, 42, 33, 80, 85, 10, 6, 89, 105, 26, 90, 104, 33, 153, 150, 162, 98, 17, 25, 150, 86, 146, 82, 38, 134, 73, 42, 72, 148, 34, 154, 166, 170, 74, 37, 37, 169, 5, 22, 86, 80, 96, 149, 101, 17, 150, 70, 42, 36, 105, 88, 25, 26, 0, 82, 153, 88, 17, 70, 80, 0, 42, 138, 149, 34, 101, 106, 73, 102, 72, 42, 106, 84, 138, 169, 84, 5, 164, 149, 169, 85, 100, 32, 72, 168, 153, 85, 72, 10, 74, 104, 100, 146, 37, 145, 40, 37, 160, 102, 133, 74, 98, 102, 90, 5, 100, 86, 70, 10, 169, 21, 18, 88, 24, 66, 9, 86, 148, 134, 165, 88, 170, 17, 90, 164, 88, 24, 85, 84, 149, 25, 101, 89, 81, 25, 170, 164, 36, 138, 148, 165, 74, 138, 137, 96, 42, 170, 146, 86},
    {150, 170, 72, 33, 81, 40, 104, 73, 134, 73, 150, 165, 152, 134, 165, 68, 42, 145, 89, 166, 26, 169, 149, 84, 24, 40, 84, 90, 105, 169, 84, 132, 70, 130, 101, 8, 38, 36, 132, 168, 41, 89, 82, 81, 154, 85, 22, 38, 10, 33, 101, 152, 150, 152, 137, 33, 149, 26, 88, 169, 153, 24, 134, 138, 9, 42, 73, 101, 164, 101, 5, 81, 90, 161, 38, 9, 100, 26, 153, 98, 74, 105, 166, 149, 41, 24, 89, 130, 104, 86, 134, 34, 168, 106, 33, 145, 81, 102, 82, 101, 73, 152, 165, 72, 102, 70, 101, 148, 169, 21, 100, 170, 69, 1, 74, 150, 148, 65, 132, 72, 161, 100, 65, 41, 164, 33, 86, 8, 73, 10, 101, 88, 146, 38, 80, 86, 80, 38, 96, 18, 36, 20, 160, 102, 153, 162, 145, 74, 21, 149, 98, 138, 132, 129, 165, 21, 136, 152, 154, 166, 102, 169, 72, 102, 21, 166, 133, 106, 106, 152, 6, 80, 128, 101, 166, 36, 88, 98, 26, 72, 152, 25, 169, 136, 128, 96, 68, 74, 32, 130, 160, 162, 85, 162, 89, 146, 16, 144, 160, 89, 105, 145, 154, 154, 42, 152, 136, 16, 145, 36, 105, 85, 17, 88, 89, 106, 149, 170, 88, 90, 168, 160, 101, 64, 138, 74, 101, 34, 149, 169, 132, 81, 102, 101, 32, 82, 81, 96, 153, 98, 150, 102, 129, 148, 17, 146, 16, 105, 81, 154, 105, 165, 20, 34, 85, 69, 4, 66, 70, 42, 164, 40, 65, 96, 146, 150, 132, 81, 137, 146, 37, 0, 10, 102, 145, 26, 149, 69, 104, 69, 166, 5, 132, 8, 153, 84, 102, 85, 90, 160, 90, 164, 36, 25, 89, 106, 72, 89, 105, 86, 161, 153, 145, 162, 169, 18, 42, 104, 150, 80, 89, 70, 81, 165, 101, 134, 128, 8, 166, 74, 8, 69, 41, 164, 70, 2, 106, 81, 132, 150, 36, 42, 5, 145, 98, 40, 162, 89, 134, 101, 150, 90, 149, 17, 166, 162, 22, 169, 82, 72, 82, 84, 86, 88, 68, 38, 148, 25, 37, 90, 101, 74, 72, 129, 134, 86, 133, 101, 137, 37, 84, 80, 88, 90, 154, 161, 68, 130, 133, 106, 102, 21, 150, 88},
    {5, 21, 138, 136, 25, 164, 10, 169, 73, 89, 64, 38, 149, 165, 162, 97, 38, 148, 130, 132, 104, 68, 42, 165, 170, 26, 5, 165, 73, 88, 153, 161, 26, 106, 102, 18, 153, 38, 16, 152, 18, 74, 145, 161, 166, 136, 136, 161, 100, 25, 162, 166, 170, 32, 38, 145, 66, 133, 88, 165, 89, 34, 66, 6, 6, 84, 20, 98, 170, 85, 26, 88, 81, 106, 82, 138, 150, 38, 70, 170, 21, 74, 165, 74, 98, 166, 166, 85, 134, 64, 160, 164, 150, 89, 40, 20, 169, 2, 74, 168, 102, 162, 24, 105, 170, 18, 169, 102, 165, 1, 38, 101, 80, 81, 169, 102, 9, 160, 106, 88, 161, 2, 36, 9, 129, 132, 97, 100, 150, 26, 2, 37, 17, 70, 128, 66, 166, 102, 36, 136, 36, 81, 128, 96, 161, 150, 170, 70, 148, 149, 161, 165, 170, 145, 166, 149, 22, 24, 5, 74, 149, 105, 6, 86, 86, 4, 133, 64, 84, 129, 165, 80, 90, 154, 101, 153, 102, 90, 152, 169, 5, 37, 86, 72, 153, 88, 25, 98, 24, 149, 105, 86, 70, 154, 132, 37, 96, 149, 165, 168, 169, 38, 73, 34, 6, 153, 137, 22, 5, 97, 84, 128, 34, 70, 101, 89, 88, 82, 106, 136, 74, 138, 164, 72, 81, 6, 90, 40, 153, 148, 101, 105, 161, 164, 106, 41, 100, 34, 165, 169, 25, 162, 153, 40, 98, 168, 162, 65, 82, 137, 37, 165, 9, 84, 38, 153, 1, 42, 90, 88, 65, 106, 150, 150, 84, 85, 82, 128, 137, 85, 81, 166, 89, 138, 86, 98, 89, 90, 104, 74, 98, 38, 148, 105, 69, 69, 106, 8, 169, 149, 133, 9, 80, 84, 169, 21, 169, 97, 168, 16, 64, 102, 150, 104, 0, 150, 73, 82, 170, 144, 105, 86, 42, 132, 162, 137, 70, 24, 97, 97, 130, 138, 84, 10, 169, 133, 17, 89, 166, 164, 164, 24, 162, 74, 89, 138, 145, 130, 134, 166, 105, 81, 150, 89, 69, 168, 150, 16, 85, 17, 18, 24, 22, 41, 169, 86, 150, 85, 68, 89, 89, 166, 1, 32, 164, 153, 82, 21, 20, 86, 34, 89, 17, 85, 106, 34, 41, 33, 33, 68, 24, 106, 73, 166},
    {41, 160, 165, 105, 154, 104, 150, 160, 101, 0, 89, 102, 162, 137, 88, 74, 128, 136, 90, 0, 22, 74, 129, 132, 8, 134, 162, 165, 100, 25, 81, 166, 41, 88, 152, 89, 65, 161, 149, 105, 10, 152, 169, 26, 166, 102, 70, 40, 1, 33, 22, 5, 105, 17, 106, 144, 17, 81, 150, 4, 25, 85, 88, 66, 145, 82, 22, 21, 168, 168, 86, 128, 42, 154, 104, 84, 105, 146, 134, 9, 148, 20, 84, 80, 65, 25, 102, 10, 82, 37, 106, 153, 150, 161, 170, 33, 169, 137, 153, 101, 73, 145, 166, 165, 85, 153, 32, 149, 88, 166, 41, 74, 70, 10, 36, 66, 152, 148, 106, 22, 105, 24, 166, 170, 84, 133, 0, 170, 166, 101, 149, 88, 42, 9, 86, 149, 18, 40, 18, 164, 104, 37, 21, 6, 9, 6, 162, 153, 170, 34, 98, 168, 38, 34, 160, 18, 162, 170, 150, 106, 100, 168, 102, 169, 166, 166, 5, 102, 101, 149, 165, 160, 69, 161, 133, 68, 68, 38, 1, 101, 81, 104, 82, 145, 5, 170, 34, 129, 85, 153, 105, 100, 170, 128, 25, 72, 42, 90, 1, 98, 105, 18, 70, 25, 149, 9, 170, 165, 38, 89, 38, 5, 166, 41, 42, 81, 134, 90, 128, 130, 2, 84, 100, 132, 130, 148, 145, 149, 150, 37, 164, 146, 165, 136, 98, 4, 96, 25, 26, 169, 86, 130, 88, 26, 6, 96, 133, 84, 166, 86, 0, 64, 136, 160, 149, 169, 102, 97, 165, 90, 70, 33, 150, 170, 89, 96, 82, 1, 144, 24, 85, 86, 81, 166, 86, 137, 85, 2, 150, 150, 150, 106, 66, 102, 169, 138, 137, 69, 168, 105, 144, 161, 138, 82, 170, 22, 154, 105, 161, 138, 148, 145, 10, 40, 98, 162, 152, 166, 160, 149, 133, 150, 80, 66, 73, 74, 88, 42, 150, 1, 20, 134, 146, 33, 165, 4, 100, 161, 42, 42, 82, 41, 133, 22, 33, 134, 153, 160, 149, 136, 24, 149, 102, 152, 148, 154, 144, 169, 81, 38, 128, 136, 85, 102, 18, 102, 133, 150, 137, 4, 6, 144, 10, 97, 38, 97, 104, 85, 130, 169, 9, 148, 149, 101, 133, 66, 89, 72, 34, 85, 148, 40, 16, 69},
    {72, 102, 65, 166, 42, 162, 66, 145, 40, 148, 26, 26, 134, 37, 101, 65, 106, 165, 100, 145, 10, 148, 69, 150, 170, 165, 42, 150, 162, 85, 33, 5, 152, 85, 37, 37, 33, 137, 102, 10, 5, 82, 132, 84, 146, 90, 145, 80, 68, 161, 88, 41, 104, 129, 4, 82, 85, 161, 166, 38, 40, 154, 24, 129, 105, 148, 73, 150, 150, 165, 89, 146, 170, 10, 138, 161, 81, 73, 170, 97, 89, 145, 22, 96, 16, 21, 1, 162, 153, 68, 24, 106, 96, 150, 130, 80, 70, 86, 154, 40, 166, 41, 150, 106, 165, 152, 40, 73, 130, 105, 170, 170, 86, 148, 104, 106, 25, 69, 88, 1, 98, 153, 153, 81, 65, 166, 170, 85, 149, 153, 68, 169, 102, 149, 165, 40, 166, 144, 69, 148, 37, 32, 150, 41, 72, 74, 133, 148, 80, 74, 106, 86, 149, 97, 37, 129, 81, 82, 68, 137, 21, 153, 22, 149, 100, 24, 129, 132, 26, 132, 170, 84, 129, 89, 88, 41, 168, 1, 86, 166, 164, 6, 40, 101, 138, 104, 149, 89, 25, 106, 33, 32, 102, 88, 106, 24, 22, 72, 145, 88, 69, 84, 89, 145, 8, 82, 89, 8, 38, 73, 4, 65, 134, 152, 85, 34, 153, 149, 89, 129, 16, 100, 34, 136, 66, 32, 130, 98, 144, 101, 145, 136, 161, 21, 150, 166, 85, 106, 106, 170, 106, 136, 98, 162, 106, 170, 73, 38, 26, 36, 20, 68, 134, 85, 33, 100, 138, 133, 22, 101, 73, 6, 5, 146, 82, 100, 169, 42, 134, 6, 168, 138, 138, 169, 74, 1, 145, 98, 137, 98, 169, 160, 105, 81, 65, 146, 153, 86, 152, 132, 70, 165, 1, 34, 165, 68, 170, 22, 5, 97, 69, 96, 138, 4, 145, 133, 105, 146, 42, 97, 106, 169, 105, 42, 22, 84, 64, 160, 162, 96, 36, 138, 20, 18, 8, 138, 136, 37, 96, 152, 37, 1, 86, 164, 88, 134, 162, 106, 137, 22, 21, 146, 144, 170, 24, 37, 137, 22, 144, 161, 105, 80, 165, 161, 82, 162, 100, 73, 170, 152, 162, 73, 168, 144, 85, 100, 21, 100, 24, 36, 70, 165, 70, 168, 89, 154, 89, 10, 84, 105, 10, 168, 85, 102},
    {2, 106, 5, 36, 132, 154, 82, 100, 150, 20, 130, 105, 146, 86, 42, 0, 66, 86, 97, 133, 136, 38, 102, 81, 70, 102, 90, 38, 73, 152, 90, 165, 34, 146, 102, 144, 128, 98, 40, 0, 148, 20, 89, 38, 86, 105, 101, 10, 90, 105, 6, 138, 100, 80, 153, 72, 70, 38, 164, 169, 168, 149, 38, 170, 154, 166, 105, 165, 33, 42, 98, 106, 84, 165, 105, 144, 154, 89, 82, 9, 90, 42, 161, 105, 166, 85, 161, 129, 102, 18, 6, 144, 38, 105, 26, 130, 88, 160, 9, 165, 97, 145, 22, 169, 169, 170, 22, 69, 153, 68, 136, 84, 98, 69, 165, 86, 169, 2, 68, 138, 86, 37, 41, 149, 138, 98, 70, 154, 81, 41, 41, 105, 136, 136, 104, 22, 21, 98, 152, 16, 89, 26, 152, 145, 134, 97, 24, 25, 22, 65, 152, 144, 162, 6, 101, 101, 26, 146, 37, 105, 70, 169, 73, 86, 152, 150, 96, 86, 20, 84, 80, 74, 101, 144, 106, 146, 1, 20, 150, 105, 70, 105, 37, 102, 22, 89, 150, 149, 22, 73, 81, 80, 166, 144, 90, 168, 150, 150, 18, 85, 96, 161, 97, 36, 168, 80, 160, 90, 145, 166, 146, 22, 106, 65, 102, 86, 136, 101, 96, 25, 72, 40, 146, 26, 88, 41, 169, 66, 161, 65, 154, 152, 101, 2, 104, 101, 160, 41, 84, 21, 1, 160, 68, 162, 9, 152, 166, 4, 17, 1, 8, 9, 42, 74, 36, 169, 129, 101, 0, 153, 81, 133, 0, 89, 90, 149, 165, 129, 70, 84, 169, 166, 74, 146, 154, 148, 146, 166, 38, 100, 154, 25, 134, 152, 130, 97, 148, 105, 80, 33, 9, 86, 152, 98, 105, 101, 101, 74, 102, 85, 74, 86, 165, 68, 38, 86, 89, 152, 149, 101, 36, 85, 33, 102, 149, 170, 165, 34, 148, 101, 82, 1, 96, 153, 80, 25, 4, 149, 148, 150, 154, 166, 132, 73, 81, 165, 161, 86, 145, 0, 136, 100, 5, 102, 5, 33, 41, 104, 82, 137, 82, 89, 26, 133, 41, 32, 128, 148, 33, 25, 149, 97, 162, 69, 34, 10, 160, 150, 154, 65, 137, 0, 136, 97, 85, 148, 100, 68, 154, 170, 162, 84, 166, 148},
    {24, 133, 102, 134, 41, 97, 105, 2, 153, 150, 137, 169, 82, 148, 86, 153, 41, 98, 96, 26, 38, 86, 149, 165, 153, 165, 41, 170, 150, 80, 97, 84, 96, 102, 150, 105, 8, 82, 32, 89, 17, 170, 84, 149, 88, 102, 102, 98, 86, 169, 105, 148, 146, 5, 102, 42, 148, 149, 81, 152, 161, 17, 42, 150, 81, 26, 166, 150, 105, 165, 16, 81, 169, 150, 168, 106, 145, 9, 85, 2, 154, 106, 104, 170, 134, 84, 104, 66, 36, 20, 89, 74, 17, 106, 66, 22, 166, 161, 138, 65, 102, 149, 66, 38, 32, 136, 132, 5, 137, 26, 34, 85, 26, 81, 138, 138, 165, 41, 168, 169, 89, 153, 0, 85, 170, 150, 37, 86, 128, 168, 150, 134, 138, 66, 20, 161, 73, 41, 153, 69, 80, 101, 26, 97, 72, 85, 148, 65, 22, 162, 74, 40, 161, 148, 170, 18, 85, 16, 166, 97, 138, 40, 69, 26, 69, 170, 90, 161, 169, 101, 150, 98, 69, 5, 18, 74, 5, 106, 74, 41, 22, 86, 164, 36, 24, 40, 106, 133, 2, 89, 81, 84, 21, 149, 144, 102, 81, 34, 21, 84, 34, 169, 38, 42, 22, 162, 154, 37, 129, 100, 153, 21, 104, 134, 133, 72, 68, 102, 32, 102, 97, 25, 74, 73, 18, 138, 166, 33, 41, 154, 150, 74, 166, 25, 165, 138, 169, 0, 145, 96, 145, 104, 5, 33, 74, 82, 136, 82, 162, 154, 98, 105, 170, 21, 164, 166, 161, 161, 106, 138, 37, 100, 21, 154, 150, 26, 9, 66, 105, 146, 154, 73, 21, 169, 85, 96, 146, 104, 72, 145, 34, 145, 85, 165, 105, 38, 41, 169, 149, 4, 68, 150, 164, 169, 166, 73, 152, 165, 145, 8, 5, 129, 144, 146, 170, 136, 148, 162, 72, 101, 169, 25, 69, 96, 41, 90, 154, 101, 16, 97, 21, 25, 25, 170, 70, 161, 104, 170, 88, 9, 133, 32, 162, 34, 102, 100, 165, 152, 88, 80, 26, 25, 148, 6, 20, 66, 81, 170, 17, 70, 101, 26, 170, 90, 42, 98, 150, 17, 25, 8, 128, 168, 130, 74, 90, 101, 72, 89, 72, 153, 162, 17, 100, 152, 90, 4, 74, 21, 74, 149, 65, 33, 36, 70},
    {162, 162, 69, 161, 90, 24, 90, 137, 102, 101, 169, 97, 150, 74, 38, 153, 8, 162, 137, 90, 24, 100, 170, 134, 154, 4, 6, 145, 10, 69, 66, 98, 129, 80, 6, 130, 170, 106, 5, 136, 170, 149, 89, 20, 66, 104, 17, 73, 36, 40, 154, 138, 88, 89, 138, 153, 85, 145, 88, 101, 146, 144, 101, 148, 100, 42, 17, 145, 25, 24, 168, 153, 165, 165, 41, 70, 164, 70, 97, 6, 69, 25, 74, 69, 162, 166, 66, 102, 100, 149, 152, 138, 102, 72, 89, 65, 41, 146, 88, 5, 42, 72, 105, 85, 150, 106, 5, 130, 96, 64, 130, 150, 18, 40, 4, 8, 132, 160, 32, 8, 74, 86, 84, 100, 165, 170, 24, 22, 160, 106, 165, 106, 81, 169, 6, 33, 89, 162, 150, 128, 105, 106, 69, 106, 146, 133, 88, 168, 37, 146, 105, 138, 6, 152, 162, 105, 66, 148, 85, 36, 80, 149, 96, 34, 74, 22, 102, 148, 82, 152, 137, 138, 153, 153, 38, 168, 97, 86, 129, 105, 98, 145, 97, 82, 69, 34, 26, 1, 32, 38, 69, 10, 85, 81, 69, 100, 144, 98, 25, 106, 24, 146, 25, 145, 138, 166, 150, 80, 133, 134, 130, 70, 4, 146, 100, 137, 74, 34, 153, 106, 26, 161, 100, 0, 84, 25, 128, 170, 168, 153, 90, 85, 90, 132, 65, 22, 66, 85, 145, 165, 85, 101, 148, 42, 169, 150, 149, 166, 82, 25, 70, 160, 81, 18, 152, 10, 70, 37, 146, 161, 96, 148, 165, 69, 5, 102, 96, 145, 150, 153, 66, 34, 128, 105, 4, 137, 90, 161, 152, 164, 146, 165, 42, 68, 104, 42, 25, 26, 168, 149, 68, 36, 133, 104, 72, 152, 170, 89, 148, 130, 152, 64, 101, 160, 101, 170, 65, 154, 170, 169, 85, 1, 105, 8, 33, 133, 16, 137, 81, 154, 21, 134, 154, 9, 1, 88, 145, 150, 162, 38, 105, 145, 104, 148, 105, 90, 150, 164, 10, 42, 10, 106, 130, 105, 2, 89, 170, 138, 154, 42, 82, 65, 154, 16, 82, 153, 154, 102, 17, 169, 169, 73, 160, 100, 152, 42, 168, 132, 100, 16, 170, 6, 154, 105, 16, 134, 41, 169, 101, 70, 37, 88, 132, 97},
    {102, 101, 100, 137, 146, 81, 98, 4, 73, 42, 5, 160, 150, 66, 161, 90, 42, 72, 162, 154, 102, 98, 100, 1, 149, 9, 17, 170, 166, 10, 97, 146, 150, 162, 161, 22, 170, 1, 33, 21, 98, 89, 73, 100, 169, 84, 24, 134, 149, 129, 170, 97, 104, 36, 133, 22, 166, 105, 162, 154, 64, 37, 166, 166, 168, 98, 149, 149, 89, 74, 85, 40, 9, 69, 5, 168, 164, 97, 89, 82, 25, 145, 160, 134, 74, 138, 81, 150, 34, 81, 149, 128, 165, 65, 85, 21, 154, 73, 166, 102, 41, 89, 104, 65, 2, 65, 65, 33, 74, 102, 88, 89, 98, 84, 68, 6, 133, 21, 64, 134, 138, 152, 133, 89, 106, 26, 0, 9, 162, 170, 33, 72, 22, 86, 105, 33, 148, 33, 101, 5, 162, 145, 22, 42, 70, 165, 150, 97, 136, 98, 65, 104, 137, 66, 137, 138, 37, 152, 74, 102, 152, 153, 164, 89, 38, 164, 84, 106, 102, 17, 25, 17, 154, 150, 89, 17, 164, 88, 40, 90, 90, 70, 86, 86, 106, 98, 137, 169, 170, 40, 25, 98, 102, 86, 4, 69, 98, 162, 129, 98, 1, 1, 98, 26, 25, 82, 18, 160, 129, 101, 10, 2, 169, 170, 160, 136, 96, 150, 90, 133, 161, 166, 104, 9, 161, 154, 90, 98, 104, 134, 164, 80, 70, 88, 162, 133, 164, 6, 129, 150, 81, 170, 133, 41, 37, 105, 6, 8, 165, 133, 149, 33, 154, 69, 68, 84, 80, 74, 66, 85, 64, 97, 10, 145, 138, 166, 148, 86, 33, 81, 100, 150, 42, 42, 18, 149, 162, 89, 153, 153, 33, 5, 34, 89, 89, 36, 106, 0, 1, 137, 17, 85, 82, 150, 129, 153, 10, 70, 38, 136, 41, 26, 170, 85, 73, 154, 81, 130, 4, 88, 70, 17, 165, 149, 100, 5, 132, 148, 24, 97, 146, 132, 162, 36, 34, 149, 169, 74, 40, 129, 129, 32, 166, 10, 80, 70, 162, 144, 169, 85, 105, 148, 34, 81, 82, 74, 153, 133, 36, 153, 85, 150, 85, 90, 16, 154, 106, 164, 166, 154, 68, 1, 84, 150, 148, 153, 69, 4, 144, 149, 89, 88, 9, 86, 25, 144, 154, 170, 168, 37, 104, 85, 25, 81},
    {169, 166, 81, 150, 82, 165, 85, 6, 69, 96, 145, 38, 106, 102, 81, 4, 8, 137, 33, 84, 74, 97, 129, 4, 104, 84, 154, 154, 82, 145, 36, 25, 154, 1, 2, 154, 40, 169, 70, 74, 161, 69, 160, 101, 90, 72, 132, 21, 98, 38, 161, 73, 105, 128, 42, 84, 74, 169, 64, 2, 85, 85, 42, 40, 26, 69, 88, 138, 88, 130, 148, 161, 86, 85, 146, 4, 26, 170, 169, 152, 84, 168, 24, 73, 89, 105, 153, 34, 145, 81, 137, 102, 5, 81, 89, 106, 41, 90, 170, 133, 152, 161, 10, 38, 150, 4, 149, 70, 168, 161, 97, 42, 160, 66, 149, 80, 153, 85, 18, 149, 40, 170, 25, 86, 74, 24, 34, 137, 134, 88, 38, 101, 74, 38, 2, 148, 24, 138, 170, 5, 100, 134, 146, 148, 70, 42, 104, 165, 105, 129, 21, 100, 105, 129, 73, 22, 106, 70, 81, 42, 81, 104, 24, 164, 40, 20, 74, 101, 134, 169, 97, 72, 0, 32, 86, 40, 132, 164, 41, 26, 66, 72, 146, 170, 82, 101, 133, 22, 70, 136, 42, 9, 154, 36, 16, 80, 21, 18, 96, 40, 17, 146, 101, 72, 6, 37, 25, 106, 169, 149, 38, 148, 149, 98, 148, 6, 137, 84, 20, 70, 90, 168, 70, 65, 70, 170, 170, 17, 170, 96, 88, 149, 22, 134, 6, 148, 170, 97, 82, 98, 133, 154, 9, 168, 154, 160, 97, 106, 137, 164, 84, 168, 134, 106, 169, 106, 102, 168, 98, 88, 150, 42, 145, 81, 98, 104, 136, 145, 165, 134, 88, 18, 169, 133, 101, 104, 84, 136, 4, 97, 148, 16, 72, 85, 89, 153, 136, 68, 165, 137, 42, 66, 4, 32, 86, 73, 5, 170, 162, 90, 69, 168, 170, 33, 86, 22, 98, 170, 72, 36, 86, 137, 164, 0, 25, 106, 88, 37, 80, 81, 10, 152, 164, 162, 101, 166, 153, 68, 161, 20, 16, 42, 88, 105, 146, 170, 129, 102, 85, 98, 72, 133, 145, 98, 154, 106, 64, 86, 40, 82, 42, 130, 148, 41, 100, 146, 82, 85, 68, 130, 6, 70, 130, 89, 21, 149, 34, 106, 10, 32, 164, 137, 105, 86, 1, 9, 145, 20, 132, 90, 133, 170, 134, 24},
    {150, 165, 130, 98, 86, 82, 22, 22, 25, 104, 170, 18, 129, 37, 33, 6, 88, 38, 86, 102, 85, 134, 169, 85, 102, 90, 150, 90, 154, 164, 25, 74, 149, 20, 168, 2, 169, 40, 134, 98, 162, 2, 33, 98, 149, 85, 96, 10, 37, 164, 86, 154, 70, 106, 20, 5, 97, 85, 154, 100, 166, 21, 70, 168, 32, 74, 25, 84, 84, 6, 154, 2, 170, 33, 152, 22, 162, 88, 160, 5, 20, 89, 86, 134, 152, 22, 90, 168, 81, 148, 9, 85, 100, 101, 154, 88, 169, 105, 101, 84, 102, 4, 134, 165, 81, 98, 101, 20, 8, 26, 69, 86, 166, 66, 82, 24, 86, 21, 16, 168, 74, 138, 42, 85, 17, 168, 42, 32, 36, 165, 145, 33, 150, 21, 22, 161, 64, 106, 162, 88, 81, 66, 153, 98, 26, 37, 69, 100, 165, 145, 90, 128, 88, 154, 20, 154, 89, 152, 85, 168, 165, 21, 6, 89, 165, 146, 70, 17, 10, 149, 89, 105, 98, 65, 89, 138, 105, 166, 81, 165, 65, 69, 85, 138, 136, 134, 98, 165, 81, 129, 84, 145, 90, 5, 34, 164, 86, 130, 144, 106, 133, 144, 154, 40, 105, 37, 81, 1, 146, 37, 138, 41, 90, 134, 150, 81, 166, 106, 166, 150, 97, 166, 84, 106, 80, 134, 34, 162, 34, 25, 133, 134, 81, 64, 22, 85, 18, 9, 170, 149, 66, 138, 154, 168, 90, 10, 96, 165, 160, 149, 145, 149, 41, 105, 102, 168, 69, 168, 105, 137, 89, 154, 85, 42, 10, 146, 161, 74, 4, 106, 170, 21, 89, 149, 134, 144, 129, 21, 145, 89, 166, 69, 144, 74, 106, 25, 138, 160, 101, 169, 150, 98, 170, 42, 102, 88, 73, 18, 166, 42, 170, 145, 101, 24, 101, 38, 2, 150, 149, 106, 165, 160, 168, 170, 74, 33, 129, 72, 137, 152, 40, 104, 64, 80, 89, 153, 80, 68, 133, 86, 68, 168, 168, 165, 73, 161, 106, 81, 90, 133, 74, 168, 168, 102, 22, 64, 134, 133, 38, 85, 170, 85, 106, 162, 84, 68, 153, 84, 86, 5, 100, 80, 36, 41, 41, 96, 21, 168, 149, 2, 133, 98, 38, 149, 26, 130, 104, 150, 24, 18, 168, 102, 150, 170},
    {149, 152, 82, 105, 22, 128, 89, 166, 164, 85, 84, 41, 169, 150, 89, 101, 72, 138, 90, 164, 86, 82, 170, 132, 134, 90, 42, 130, 9, 150, 72, 145, 85, 145, 136, 149, 41, 88, 149, 136, 26, 66, 85, 84, 170, 69, 74, 146, 96, 69, 101, 22, 82, 149, 162, 68, 161, 8, 153, 96, 161, 162, 134, 32, 101, 89, 162, 81, 82, 102, 2, 73, 134, 69, 8, 161, 22, 144, 96, 32, 138, 17, 138, 10, 85, 81, 70, 106, 70, 24, 10, 161, 169, 161, 24, 26, 146, 4, 166, 85, 89, 166, 162, 106, 81, 41, 106, 32, 89, 85, 101, 66, 150, 105, 82, 137, 170, 165, 105, 1, 152, 38, 150, 69, 154, 162, 42, 106, 166, 40, 80, 150, 106, 106, 88, 42, 165, 170, 98, 86, 100, 102, 98, 22, 150, 16, 170, 97, 148, 88, 102, 41, 98, 40, 138, 166, 65, 106, 20, 85, 72, 16, 24, 89, 6, 85, 149, 81, 170, 161, 34, 102, 146, 90, 129, 24, 5, 88, 154, 133, 6, 138, 69, 32, 133, 33, 153, 168, 128, 136, 100, 146, 170, 33, 105, 150, 88, 138, 98, 146, 169, 42, 132, 144, 160, 130, 150, 81, 104, 166, 160, 169, 80, 89, 132, 82, 150, 150, 69, 169, 86, 169, 88, 17, 65, 36, 166, 72, 72, 130, 150, 42, 164, 85, 145, 42, 37, 149, 170, 74, 152, 166, 69, 90, 18, 144, 4, 37, 82, 86, 162, 89, 162, 96, 84, 64, 85, 166, 154, 165, 85, 90, 36, 97, 21, 73, 160, 82, 169, 105, 165, 85, 88, 36, 90, 10, 164, 170, 145, 72, 150, 105, 168, 97, 33, 101, 5, 6, 90, 33, 82, 166, 9, 25, 150, 161, 129, 82, 165, 169, 22, 102, 86, 90, 82, 104, 25, 64, 153, 102, 153, 96, 41, 97, 105, 5, 41, 104, 165, 18, 149, 41, 144, 2, 138, 148, 105, 22, 105, 100, 84, 153, 85, 72, 33, 149, 73, 33, 133, 97, 21, 89, 132, 152, 64, 86, 138, 86, 85, 73, 154, 81, 32, 161, 81, 105, 101, 162, 86, 97, 4, 74, 104, 0, 33, 170, 145, 82, 90, 84, 24, 73, 162, 137, 88, 82, 150, 97, 36, 106, 89, 165, 97, 98},
    {101, 150, 90, 166, 84, 90, 17, 136, 86, 146, 152, 166, 146, 165, 153, 132, 16, 154, 97, 168, 81, 85, 38, 80, 152, 25, 154, 149, 81, 16, 85, 40, 102, 160, 4, 32, 42, 90, 138, 129, 9, 64, 96, 65, 16, 105, 96, 129, 148, 9, 161, 38, 81, 18, 80, 74, 1, 32, 38, 146, 149, 40, 134, 106, 96, 70, 101, 22, 148, 32, 104, 101, 66, 145, 164, 37, 10, 80, 6, 129, 102, 25, 148, 102, 166, 97, 82, 73, 136, 88, 146, 153, 133, 154, 41, 5, 64, 146, 145, 133, 22, 164, 34, 134, 66, 133, 154, 69, 137, 80, 70, 170, 101, 73, 73, 89, 88, 154, 33, 128, 136, 85, 145, 166, 26, 149, 25, 137, 137, 0, 10, 38, 134, 149, 154, 86, 84, 16, 74, 98, 22, 37, 26, 65, 98, 137, 146, 149, 161, 102, 162, 18, 101, 17, 72, 68, 37, 18, 38, 161, 153, 81, 82, 41, 72, 153, 165, 169, 69, 153, 130, 134, 170, 101, 102, 150, 38, 25, 89, 153, 170, 18, 101, 96, 4, 168, 145, 90, 73, 100, 165, 162, 149, 166, 145, 90, 80, 154, 166, 89, 24, 134, 37, 154, 69, 100, 136, 153, 32, 6, 73, 20, 149, 105, 144, 73, 144, 168, 100, 69, 166, 148, 164, 5, 41, 102, 82, 149, 165, 161, 36, 138, 161, 40, 41, 9, 162, 129, 162, 74, 130, 84, 101, 40, 88, 66, 81, 106, 170, 84, 145, 146, 153, 70, 154, 169, 36, 37, 72, 170, 150, 89, 73, 82, 41, 100, 40, 26, 102, 70, 166, 169, 161, 133, 134, 164, 98, 133, 36, 1, 36, 102, 89, 21, 84, 106, 144, 81, 105, 80, 74, 170, 69, 146, 41, 73, 101, 84, 144, 69, 37, 6, 144, 154, 168, 26, 40, 136, 1, 85, 26, 6, 81, 169, 42, 166, 170, 145, 4, 96, 38, 146, 17, 8, 90, 101, 137, 74, 90, 22, 70, 38, 104, 106, 105, 42, 82, 164, 170, 153, 88, 82, 102, 152, 136, 68, 166, 21, 64, 145, 69, 32, 154, 90, 16, 90, 161, 84, 89, 88, 148, 105, 66, 133, 161, 150, 160, 65, 32, 9, 42, 24, 69, 161, 82, 25, 97, 170, 169, 34, 85, 160, 10, 16},
    {73, 69, 169, 41, 97, 154, 145, 162, 36, 101, 70, 89, 166, 98, 86, 38, 84, 102, 20, 84, 70, 128, 86, 85, 86, 0, 149, 106, 136, 10, 102, 86, 38, 145, 20, 150, 17, 21, 162, 128, 82, 106, 37, 168, 5, 153, 98, 104, 10, 165, 26, 146, 88, 72, 102, 154, 162, 149, 160, 102, 144, 34, 145, 149, 18, 166, 166, 164, 32, 72, 18, 90, 170, 153, 97, 6, 154, 74, 98, 2, 88, 80, 106, 106, 70, 100, 74, 166, 132, 25, 102, 154, 162, 5, 162, 136, 165, 8, 74, 106, 37, 20, 42, 137, 146, 89, 16, 66, 168, 10, 81, 70, 154, 84, 86, 102, 149, 98, 85, 82, 144, 162, 101, 154, 106, 168, 170, 149, 26, 150, 100, 6, 17, 85, 165, 170, 130, 38, 144, 85, 33, 89, 88, 90, 148, 160, 166, 74, 41, 164, 101, 133, 66, 150, 5, 166, 169, 100, 154, 24, 104, 26, 150, 33, 145, 90, 96, 97, 16, 170, 41, 74, 166, 24, 5, 98, 64, 137, 136, 132, 96, 33, 42, 149, 6, 101, 137, 149, 152, 22, 38, 98, 73, 2, 25, 150, 86, 152, 98, 4, 84, 86, 41, 90, 64, 81, 85, 145, 41, 152, 98, 40, 165, 160, 86, 74, 162, 101, 136, 89, 69, 152, 96, 164, 1, 36, 153, 26, 85, 164, 8, 1, 10, 98, 154, 152, 129, 36, 106, 149, 90, 37, 168, 164, 2, 146, 73, 133, 144, 145, 74, 65, 40, 69, 70, 132, 169, 41, 88, 41, 81, 21, 40, 40, 102, 138, 146, 162, 22, 10, 104, 160, 89, 101, 6, 73, 132, 150, 149, 162, 26, 101, 161, 82, 136, 9, 170, 169, 106, 134, 165, 102, 137, 34, 149, 42, 148, 33, 38, 133, 168, 89, 137, 136, 8, 37, 165, 17, 138, 25, 170, 153, 148, 104, 0, 165, 137, 42, 32, 134, 145, 85, 150, 66, 166, 40, 34, 82, 22, 154, 86, 105, 149, 25, 105, 40, 6, 85, 26, 37, 18, 73, 128, 66, 37, 166, 101, 32, 65, 144, 97, 25, 170, 73, 144, 152, 22, 82, 105, 105, 2, 152, 144, 98, 160, 65, 137, 136, 69, 146, 148, 34, 170, 97, 152, 80, 81, 66, 8, 21, 65, 42, 89, 170},
    {149, 18, 152, 72, 74, 102, 169, 133, 33, 148, 17, 89, 24, 38, 38, 69, 101, 70, 153, 149, 33, 130, 84, 153, 69, 73, 42, 154, 150, 25, 85, 166, 100, 1, 90, 70, 89, 22, 84, 72, 97, 65, 64, 66, 170, 41, 37, 38, 164, 101, 42, 164, 145, 33, 0, 86, 37, 133, 133, 106, 149, 137, 104, 102, 161, 168, 149, 86, 38, 98, 33, 4, 138, 81, 130, 100, 65, 65, 17, 40, 164, 132, 85, 42, 137, 104, 72, 106, 86, 38, 100, 41, 148, 154, 152, 40, 25, 34, 154, 100, 42, 81, 82, 106, 69, 33, 6, 25, 0, 102, 66, 162, 150, 154, 81, 66, 73, 105, 137, 84, 169, 101, 164, 41, 10, 16, 105, 153, 153, 160, 86, 133, 84, 4, 41, 4, 170, 21, 9, 146, 153, 133, 106, 161, 98, 66, 101, 152, 168, 166, 40, 24, 41, 150, 37, 169, 64, 101, 144, 86, 148, 152, 161, 169, 144, 89, 169, 161, 154, 166, 98, 148, 102, 4, 138, 166, 26, 18, 97, 89, 169, 82, 73, 133, 162, 102, 5, 89, 101, 105, 166, 17, 26, 18, 153, 74, 166, 40, 100, 90, 154, 154, 138, 101, 101, 89, 33, 100, 25, 105, 69, 168, 129, 130, 32, 161, 165, 149, 150, 8, 100, 72, 97, 106, 138, 138, 8, 18, 145, 132, 101, 152, 18, 169, 149, 34, 105, 26, 80, 104, 136, 10, 25, 32, 145, 73, 86, 84, 86, 88, 22, 40, 136, 152, 132, 10, 166, 81, 104, 8, 36, 88, 88, 168, 74, 169, 85, 6, 22, 145, 22, 129, 134, 136, 22, 26, 8, 104, 2, 104, 102, 34, 150, 86, 162, 128, 102, 37, 149, 21, 170, 104, 89, 101, 129, 162, 150, 98, 38, 82, 88, 69, 41, 26, 82, 74, 137, 66, 33, 81, 102, 153, 80, 165, 2, 133, 102, 0, 21, 102, 161, 165, 101, 154, 152, 38, 17, 26, 102, 68, 37, 36, 32, 9, 146, 64, 73, 1, 169, 129, 74, 154, 150, 6, 130, 153, 133, 160, 22, 106, 146, 84, 41, 2, 102, 100, 145, 26, 33, 133, 153, 9, 149, 166, 102, 73, 152, 38, 161, 169, 168, 153, 22, 145, 68, 102, 170, 152, 85, 6, 169, 105, 38, 161},
    {74, 98, 160, 134, 85, 169, 33, 137, 41, 145, 137, 5, 134, 86, 21, 36, 161, 89, 162, 104, 41, 97, 106, 98, 104, 22, 144, 72, 149, 74, 84, 89, 137, 136, 42, 88, 152, 40, 149, 106, 128, 169, 84, 73, 17, 42, 4, 73, 106, 85, 36, 36, 168, 166, 165, 169, 149, 133, 154, 18, 150, 98, 105, 104, 90, 24, 100, 90, 73, 166, 72, 22, 104, 134, 136, 68, 153, 162, 69, 0, 160, 86, 4, 90, 25, 146, 105, 86, 21, 130, 21, 130, 16, 130, 137, 9, 38, 168, 166, 137, 101, 100, 4, 21, 134, 105, 134, 70, 137, 165, 165, 105, 170, 10, 42, 69, 145, 133, 66, 161, 154, 38, 100, 5, 32, 5, 16, 20, 152, 133, 72, 74, 130, 26, 85, 145, 150, 82, 32, 70, 96, 148, 5, 169, 69, 21, 133, 84, 149, 90, 165, 80, 102, 138, 153, 64, 98, 21, 89, 6, 85, 64, 165, 166, 96, 102, 149, 133, 72, 154, 101, 25, 138, 64, 154, 10, 165, 137, 38, 102, 165, 41, 169, 18, 152, 10, 149, 149, 6, 25, 82, 154, 26, 150, 85, 66, 166, 68, 74, 82, 86, 86, 153, 169, 136, 102, 169, 148, 98, 21, 104, 134, 65, 130, 170, 166, 104, 100, 8, 102, 72, 150, 68, 133, 25, 86, 32, 170, 149, 104, 162, 0, 149, 74, 86, 152, 134, 100, 70, 37, 106, 80, 18, 21, 106, 106, 34, 22, 33, 18, 33, 73, 21, 86, 149, 37, 65, 36, 166, 134, 69, 128, 89, 162, 37, 65, 134, 166, 0, 106, 97, 4, 81, 86, 34, 36, 68, 170, 128, 70, 102, 149, 162, 90, 42, 38, 134, 90, 153, 138, 101, 138, 89, 101, 106, 89, 37, 98, 17, 137, 149, 20, 102, 66, 104, 22, 41, 84, 88, 168, 134, 81, 150, 42, 105, 145, 138, 84, 165, 154, 84, 144, 86, 106, 100, 145, 82, 90, 9, 86, 132, 165, 169, 37, 10, 34, 21, 88, 33, 150, 161, 80, 82, 137, 90, 69, 152, 101, 8, 90, 148, 149, 9, 9, 168, 70, 128, 149, 150, 154, 70, 17, 106, 68, 66, 17, 26, 168, 86, 138, 20, 40, 101, 42, 88, 80, 106, 69, 150, 153, 82, 105, 73, 74},
    {84, 22, 68, 6, 98, 5, 149, 169, 149, 96, 42, 21, 90, 145, 106, 41, 106, 82, 72, 102, 40, 154, 129, 10, 129, 6, 33, 88, 22, 22, 148, 42, 137, 85, 98, 89, 146, 74, 146, 24, 137, 138, 137, 130, 154, 74, 40, 168, 150, 0, 145, 89, 24, 70, 150, 66, 160, 137, 68, 154, 85, 166, 136, 96, 25, 42, 153, 162, 165, 82, 88, 162, 84, 90, 128, 68, 42, 152, 166, 8, 101, 84, 100, 166, 160, 102, 81, 26, 0, 6, 33, 170, 85, 160, 84, 70, 36, 73, 74, 161, 34, 4, 2, 148, 169, 5, 133, 166, 81, 9, 100, 106, 164, 104, 137, 100, 90, 22, 169, 74, 136, 74, 150, 33, 138, 82, 73, 89, 33, 168, 98, 97, 138, 161, 165, 4, 85, 96, 164, 85, 98, 21, 84, 152, 148, 137, 85, 133, 37, 70, 161, 162, 150, 74, 42, 2, 133, 144, 102, 106, 16, 161, 145, 2, 17, 150, 68, 105, 153, 164, 64, 85, 24, 80, 164, 85, 161, 20, 21, 74, 160, 68, 137, 165, 74, 129, 69, 170, 148, 89, 73, 106, 81, 104, 85, 152, 17, 98, 17, 82, 149, 82, 38, 137, 154, 82, 22, 74, 5, 6, 4, 33, 161, 106, 34, 105, 89, 21, 1, 170, 1, 69, 70, 73, 150, 86, 4, 24, 66, 149, 34, 100, 136, 97, 36, 165, 18, 152, 96, 86, 149, 82, 20, 36, 104, 4, 33, 36, 88, 129, 137, 98, 100, 90, 26, 88, 86, 85, 89, 132, 144, 154, 4, 97, 154, 149, 98, 0, 169, 106, 34, 137, 166, 165, 86, 90, 133, 70, 42, 106, 106, 166, 18, 25, 86, 168, 26, 73, 145, 105, 41, 134, 85, 105, 154, 86, 10, 106, 37, 2, 150, 166, 68, 86, 25, 162, 17, 42, 17, 165, 68, 165, 169, 133, 40, 18, 66, 42, 21, 169, 86, 104, 162, 154, 148, 170, 69, 37, 138, 168, 169, 26, 85, 160, 82, 73, 138, 170, 133, 130, 145, 105, 88, 66, 69, 68, 84, 129, 32, 145, 106, 82, 86, 154, 33, 144, 97, 169, 97, 169, 148, 98, 21, 34, 101, 1, 73, 42, 169, 150, 17, 80, 149, 101, 66, 104, 1, 144, 153, 170, 70, 101, 33, 90},
    {38, 90, 33, 65, 37, 70, 22, 86, 165, 154, 66, 85, 36, 144, 162, 145, 6, 96, 165, 5, 144, 160, 34, 33, 149, 164, 86, 169, 169, 6, 133, 73, 129, 100, 150, 170, 145, 41, 26, 80, 161, 81, 80, 105, 102, 25, 170, 169, 133, 70, 149, 153, 160, 68, 42, 98, 42, 36, 70, 152, 153, 85, 85, 137, 69, 16, 132, 80, 41, 136, 5, 138, 74, 170, 105, 145, 25, 41, 68, 153, 148, 37, 152, 154, 65, 74, 21, 89, 26, 162, 145, 73, 168, 162, 168, 37, 161, 81, 41, 38, 134, 152, 146, 9, 6, 154, 6, 168, 145, 66, 170, 0, 132, 165, 101, 132, 154, 165, 6, 86, 100, 154, 149, 102, 98, 89, 64, 88, 33, 84, 132, 16, 70, 21, 26, 36, 69, 96, 24, 160, 70, 97, 88, 96, 8, 166, 98, 160, 166, 41, 36, 104, 133, 149, 164, 6, 0, 102, 138, 128, 133, 16, 21, 69, 88, 69, 32, 38, 81, 100, 101, 90, 161, 82, 161, 73, 101, 18, 26, 25, 69, 66, 21, 69, 81, 82, 21, 168, 149, 153, 64, 16, 133, 74, 104, 102, 162, 6, 149, 81, 154, 105, 98, 148, 105, 40, 149, 149, 18, 68, 138, 10, 161, 154, 74, 40, 128, 104, 168, 24, 96, 154, 73, 146, 100, 97, 81, 21, 130, 104, 4, 18, 153, 170, 66, 72, 21, 153, 86, 86, 149, 104, 0, 132, 150, 138, 168, 82, 169, 153, 102, 150, 6, 85, 82, 138, 32, 104, 146, 88, 86, 106, 88, 104, 133, 70, 128, 25, 134, 153, 84, 133, 145, 148, 68, 90, 5, 149, 101, 25, 81, 150, 146, 98, 170, 100, 150, 154, 154, 98, 72, 41, 72, 98, 105, 149, 96, 153, 152, 134, 160, 25, 17, 138, 16, 6, 42, 152, 101, 136, 1, 149, 102, 85, 25, 74, 84, 106, 168, 74, 152, 105, 132, 170, 5, 152, 82, 134, 102, 102, 66, 130, 148, 40, 105, 137, 100, 128, 6, 40, 24, 41, 130, 170, 21, 34, 100, 106, 18, 133, 137, 106, 36, 166, 25, 88, 169, 36, 169, 154, 98, 105, 160, 100, 102, 5, 42, 1, 82, 10, 149, 136, 24, 86, 5, 70, 148, 145, 26, 16, 38, 85, 100, 100},
    {1, 144, 105, 25, 85, 33, 0, 153, 96, 134, 106, 164, 145, 69, 41, 82, 162, 89, 22, 145, 98, 88, 102, 38, 40, 33, 150, 137, 89, 68, 5, 105, 129, 102, 69, 105, 96, 86, 101, 89, 169, 66, 149, 64, 137, 84, 150, 101, 102, 85, 74, 69, 102, 132, 105, 166, 22, 100, 70, 153, 84, 149, 9, 69, 5, 133, 25, 72, 145, 66, 106, 65, 80, 104, 72, 41, 85, 105, 72, 162, 154, 89, 152, 168, 34, 164, 0, 129, 102, 22, 72, 102, 165, 166, 105, 154, 161, 136, 136, 24, 138, 149, 42, 165, 42, 16, 101, 24, 25, 133, 8, 98, 153, 104, 42, 145, 90, 101, 26, 86, 38, 25, 105, 166, 18, 73, 96, 80, 134, 21, 101, 169, 150, 25, 134, 169, 66, 98, 146, 32, 165, 42, 26, 66, 162, 148, 90, 164, 34, 170, 165, 129, 68, 33, 26, 81, 106, 170, 133, 102, 168, 144, 104, 16, 133, 170, 137, 168, 136, 106, 36, 102, 102, 64, 149, 37, 145, 26, 133, 130, 160, 154, 100, 85, 106, 73, 74, 152, 26, 18, 164, 150, 161, 33, 34, 64, 170, 100, 21, 82, 148, 137, 26, 137, 69, 74, 144, 104, 160, 169, 105, 40, 1, 40, 82, 170, 149, 82, 85, 8, 170, 38, 133, 133, 68, 0, 80, 105, 33, 86, 169, 1, 86, 137, 74, 65, 150, 24, 168, 133, 89, 38, 164, 169, 82, 66, 97, 90, 88, 100, 98, 89, 148, 133, 81, 170, 162, 144, 170, 100, 81, 9, 4, 10, 137, 136, 21, 96, 21, 69, 102, 168, 90, 4, 22, 34, 85, 132, 73, 85, 36, 129, 146, 152, 136, 145, 168, 96, 101, 17, 105, 100, 84, 106, 88, 16, 10, 133, 9, 22, 164, 25, 170, 9, 73, 85, 146, 65, 20, 102, 21, 73, 66, 101, 40, 25, 84, 86, 101, 21, 88, 88, 137, 104, 133, 101, 68, 33, 40, 90, 33, 34, 132, 74, 9, 86, 42, 133, 9, 170, 145, 106, 38, 33, 145, 146, 100, 161, 101, 24, 96, 8, 84, 168, 164, 146, 165, 153, 100, 85, 169, 100, 166, 104, 137, 106, 101, 37, 150, 153, 8, 97, 64, 146, 166, 17, 146, 104, 86, 85, 65, 70, 162, 26},
    {69, 104, 150, 86, 150, 80, 138, 90, 148, 136, 165, 105, 146, 0, 134, 89, 69, 68, 154, 137, 165, 21, 32, 40, 105, 96, 41, 166, 144, 106, 165, 1, 105, 41, 105, 6, 160, 22, 150, 5, 82, 42, 86, 100, 42, 86, 150, 0, 154, 164, 32, 34, 82, 85, 66, 6, 149, 130, 38, 85, 170, 89, 98, 65, 104, 9, 102, 22, 24, 105, 98, 170, 25, 166, 25, 18, 90, 102, 136, 97, 144, 105, 144, 129, 97, 137, 150, 4, 22, 89, 37, 10, 130, 160, 144, 82, 162, 150, 154, 166, 38, 134, 74, 134, 66, 72, 169, 42, 144, 146, 165, 169, 41, 89, 85, 152, 166, 165, 86, 84, 20, 104, 166, 105, 164, 150, 137, 100, 74, 106, 68, 165, 136, 101, 137, 170, 6, 90, 137, 80, 149, 146, 38, 165, 41, 132, 37, 165, 10, 86, 149, 74, 162, 86, 84, 106, 152, 34, 144, 88, 137, 41, 88, 106, 73, 96, 145, 152, 38, 101, 90, 146, 40, 169, 82, 88, 34, 154, 21, 100, 89, 137, 18, 169, 6, 0, 18, 98, 162, 149, 166, 34, 104, 168, 9, 82, 73, 73, 133, 100, 101, 134, 20, 41, 102, 85, 41, 100, 101, 170, 169, 162, 97, 69, 84, 33, 134, 1, 170, 72, 133, 25, 86, 170, 154, 130, 168, 90, 166, 165, 162, 169, 149, 164, 5, 166, 133, 42, 105, 101, 101, 89, 88, 80, 161, 9, 97, 33, 128, 97, 154, 145, 100, 98, 132, 20, 164, 1, 164, 10, 161, 90, 68, 154, 41, 65, 96, 150, 26, 84, 65, 161, 152, 9, 161, 88, 100, 85, 149, 101, 105, 148, 166, 134, 9, 161, 98, 149, 22, 82, 102, 144, 105, 101, 154, 149, 22, 36, 73, 146, 146, 154, 84, 144, 166, 153, 24, 97, 105, 146, 153, 5, 85, 90, 22, 72, 166, 98, 4, 86, 154, 22, 160, 150, 166, 164, 65, 86, 96, 88, 138, 138, 168, 168, 148, 133, 148, 82, 105, 164, 104, 5, 86, 145, 153, 130, 170, 102, 106, 41, 153, 136, 168, 1, 152, 133, 86, 169, 100, 102, 153, 98, 33, 101, 85, 82, 38, 16, 85, 154, 145, 37, 89, 170, 21, 84, 6, 100, 64, 102, 33, 150, 101, 20},
    {97, 134, 88, 38, 144, 5, 70, 169, 150, 106, 101, 90, 162, 68, 152, 162, 68, 6, 21, 37, 90, 160, 100, 137, 96, 170, 136, 5, 89, 98, 73, 136, 169, 36, 138, 169, 165, 64, 100, 34, 41, 137, 10, 160, 152, 86, 160, 25, 26, 70, 149, 98, 72, 104, 133, 166, 20, 37, 130, 164, 104, 152, 136, 129, 36, 90, 102, 1, 65, 101, 96, 168, 137, 168, 82, 101, 154, 65, 82, 169, 148, 20, 42, 38, 1, 145, 170, 146, 90, 165, 164, 97, 9, 81, 36, 154, 165, 162, 22, 90, 153, 18, 165, 145, 40, 133, 132, 90, 153, 36, 100, 40, 65, 33, 104, 152, 150, 146, 24, 38, 154, 148, 105, 5, 100, 89, 130, 33, 81, 82, 34, 146, 164, 25, 18, 106, 18, 134, 41, 86, 21, 69, 69, 38, 26, 32, 133, 170, 129, 10, 84, 165, 165, 90, 161, 88, 18, 149, 70, 90, 148, 161, 145, 165, 138, 36, 65, 25, 100, 38, 22, 86, 5, 17, 84, 2, 85, 169, 146, 70, 102, 137, 104, 26, 106, 21, 150, 152, 168, 152, 1, 154, 89, 41, 85, 16, 134, 154, 42, 25, 10, 36, 69, 133, 90, 90, 85, 34, 169, 42, 161, 80, 85, 38, 81, 161, 90, 168, 69, 168, 102, 104, 66, 33, 5, 85, 36, 10, 38, 133, 100, 2, 85, 1, 82, 149, 5, 85, 66, 84, 85, 88, 168, 65, 137, 25, 4, 97, 102, 21, 149, 101, 85, 74, 74, 145, 74, 73, 17, 22, 41, 42, 65, 102, 168, 154, 17, 145, 102, 38, 2, 149, 21, 102, 148, 170, 145, 169, 70, 70, 101, 22, 21, 138, 165, 24, 106, 89, 73, 84, 86, 169, 164, 145, 73, 144, 144, 101, 24, 169, 32, 149, 37, 73, 102, 22, 96, 26, 168, 129, 5, 73, 38, 169, 41, 164, 170, 152, 81, 10, 70, 162, 20, 154, 136, 153, 37, 86, 150, 106, 101, 40, 72, 138, 74, 164, 69, 161, 80, 134, 73, 1, 36, 165, 148, 41, 153, 18, 134, 137, 144, 65, 38, 37, 97, 133, 132, 34, 100, 105, 160, 89, 21, 16, 166, 162, 102, 138, 164, 153, 18, 97, 154, 153, 36, 90, 21, 81, 70, 154, 2, 80, 65, 149},
    {90, 165, 18, 138, 130, 64, 154, 26, 1, 74, 74, 32, 38, 138, 132, 74, 162, 169, 96, 6, 106, 150, 134, 138, 17, 146, 170, 161, 169, 33, 66, 74, 37, 36, 169, 84, 90, 0, 82, 138, 90, 97, 72, 84, 149, 82, 90, 161, 102, 150, 166, 170, 149, 164, 68, 165, 152, 24, 98, 80, 101, 170, 90, 74, 73, 4, 69, 86, 148, 6, 98, 65, 42, 138, 69, 65, 17, 73, 160, 21, 145, 97, 86, 152, 138, 105, 166, 137, 130, 100, 73, 22, 104, 74, 154, 34, 42, 24, 154, 82, 134, 86, 73, 105, 146, 161, 1, 36, 89, 101, 36, 70, 100, 40, 170, 129, 138, 64, 104, 149, 88, 105, 152, 25, 21, 145, 166, 154, 164, 145, 138, 37, 100, 69, 150, 132, 73, 33, 165, 9, 74, 169, 37, 32, 37, 104, 25, 40, 165, 166, 96, 86, 9, 146, 66, 138, 24, 88, 170, 1, 128, 82, 74, 166, 133, 137, 101, 149, 106, 164, 161, 149, 149, 20, 168, 36, 89, 86, 130, 24, 138, 33, 98, 10, 40, 97, 149, 101, 21, 105, 164, 6, 34, 165, 20, 102, 96, 5, 145, 102, 134, 150, 21, 150, 5, 10, 132, 102, 37, 74, 85, 145, 138, 37, 96, 145, 34, 101, 72, 105, 86, 145, 65, 73, 38, 102, 70, 68, 152, 101, 42, 144, 38, 105, 138, 34, 34, 37, 80, 146, 81, 162, 134, 144, 168, 18, 98, 88, 106, 148, 65, 164, 137, 161, 138, 85, 0, 101, 26, 90, 164, 86, 152, 168, 148, 170, 169, 86, 38, 25, 80, 74, 38, 89, 85, 168, 34, 88, 18, 81, 148, 170, 152, 89, 101, 17, 102, 160, 145, 106, 153, 150, 84, 37, 65, 89, 106, 164, 21, 68, 18, 146, 9, 105, 96, 137, 36, 70, 21, 154, 105, 106, 145, 97, 105, 81, 102, 161, 84, 22, 153, 34, 40, 164, 37, 80, 33, 25, 69, 166, 84, 144, 41, 18, 160, 41, 106, 133, 150, 154, 150, 80, 96, 41, 89, 169, 65, 132, 37, 88, 88, 148, 152, 150, 86, 164, 17, 86, 104, 136, 150, 149, 166, 86, 64, 6, 26, 145, 86, 105, 100, 90, 165, 41, 9, 90, 137, 81, 102, 97, 128, 42, 25, 164},
    {106, 165, 153, 137, 104, 169, 101, 86, 33, 86, 96, 65, 100, 88, 66, 82, 84, 166, 97, 165, 9, 102, 40, 69, 105, 33, 82, 149, 37, 22, 153, 170, 168, 37, 101, 152, 169, 134, 166, 152, 138, 69, 21, 169, 26, 25, 20, 148, 97, 86, 10, 25, 86, 82, 104, 72, 90, 41, 70, 165, 165, 97, 86, 80, 148, 72, 33, 102, 85, 88, 129, 105, 90, 102, 25, 138, 82, 89, 105, 84, 97, 149, 73, 74, 81, 21, 145, 149, 106, 33, 169, 154, 17, 68, 169, 97, 89, 106, 98, 101, 37, 90, 144, 153, 130, 6, 88, 102, 84, 144, 138, 101, 84, 74, 130, 105, 165, 37, 166, 134, 10, 66, 82, 166, 68, 85, 42, 165, 149, 170, 106, 154, 20, 160, 98, 162, 138, 69, 101, 90, 89, 132, 74, 68, 164, 104, 149, 21, 21, 88, 100, 150, 90, 161, 68, 102, 165, 96, 133, 148, 82, 101, 10, 101, 134, 41, 25, 25, 169, 146, 10, 89, 20, 98, 144, 133, 168, 162, 86, 100, 169, 154, 170, 68, 105, 153, 89, 22, 133, 74, 89, 70, 20, 134, 88, 165, 16, 1, 26, 21, 146, 9, 100, 136, 149, 64, 82, 133, 18, 132, 133, 5, 153, 89, 146, 169, 86, 153, 33, 65, 101, 150, 74, 162, 72, 68, 134, 154, 70, 134, 161, 37, 42, 0, 69, 5, 144, 101, 38, 70, 82, 42, 105, 34, 64, 149, 145, 37, 88, 130, 106, 134, 101, 18, 149, 134, 153, 160, 160, 149, 25, 144, 164, 153, 22, 106, 134, 85, 154, 41, 89, 144, 73, 6, 162, 165, 5, 72, 80, 34, 101, 150, 161, 150, 36, 133, 165, 106, 69, 153, 40, 84, 9, 65, 129, 89, 21, 74, 154, 22, 149, 148, 25, 36, 25, 129, 97, 100, 21, 72, 137, 66, 106, 10, 89, 17, 6, 136, 42, 129, 65, 37, 74, 74, 90, 161, 97, 66, 20, 169, 69, 170, 80, 69, 102, 98, 90, 90, 129, 106, 152, 169, 149, 129, 25, 82, 129, 154, 80, 152, 86, 98, 33, 82, 137, 1, 101, 161, 138, 97, 73, 169, 153, 129, 86, 170, 105, 38, 161, 82, 80, 90, 102, 1, 101, 102, 17, 130, 82, 82, 97, 9, 137, 17},
    {168, 153, 70, 166, 153, 105, 152, 106, 4, 154, 69, 90, 154, 26, 22, 88, 97, 24, 148, 146, 74, 102, 88, 88, 149, 105, 89, 165, 89, 72, 70, 82, 37, 89, 73, 136, 84, 149, 96, 10, 138, 106, 102, 2, 73, 89, 149, 137, 37, 34, 66, 100, 86, 170, 69, 4, 146, 148, 101, 130, 133, 101, 165, 169, 26, 89, 70, 84, 138, 105, 104, 25, 161, 82, 169, 88, 153, 165, 100, 148, 101, 73, 137, 100, 98, 165, 69, 154, 38, 129, 89, 149, 80, 104, 85, 105, 41, 82, 66, 32, 85, 130, 165, 149, 33, 26, 82, 154, 164, 164, 33, 164, 18, 153, 169, 136, 149, 10, 153, 150, 166, 137, 102, 169, 10, 22, 1, 38, 81, 106, 170, 98, 98, 166, 86, 41, 166, 98, 84, 137, 70, 5, 104, 24, 4, 81, 85, 84, 9, 102, 154, 68, 153, 136, 89, 98, 170, 70, 85, 26, 25, 10, 37, 10, 165, 89, 166, 98, 86, 138, 5, 101, 165, 25, 22, 64, 106, 25, 85, 145, 22, 85, 90, 130, 138, 134, 85, 98, 98, 65, 17, 106, 64, 20, 101, 74, 85, 25, 144, 41, 146, 89, 129, 105, 145, 160, 82, 164, 72, 164, 101, 36, 21, 97, 72, 165, 162, 5, 84, 0, 166, 104, 166, 145, 81, 86, 169, 74, 73, 150, 161, 165, 74, 84, 136, 32, 36, 101, 106, 165, 154, 24, 90, 101, 153, 101, 136, 106, 137, 36, 102, 5, 138, 90, 2, 80, 74, 17, 100, 68, 65, 85, 17, 84, 150, 98, 149, 90, 2, 69, 144, 100, 18, 145, 153, 98, 170, 98, 9, 22, 85, 70, 164, 129, 0, 104, 168, 85, 101, 170, 105, 5, 40, 85, 90, 138, 85, 129, 169, 37, 165, 170, 153, 102, 170, 90, 42, 137, 97, 80, 10, 166, 4, 86, 130, 26, 100, 137, 65, 86, 168, 149, 154, 152, 154, 129, 169, 70, 97, 154, 41, 152, 70, 102, 164, 154, 153, 25, 41, 26, 102, 89, 38, 81, 137, 85, 133, 86, 36, 170, 84, 25, 105, 10, 24, 153, 40, 41, 18, 133, 153, 105, 20, 134, 64, 89, 97, 148, 136, 161, 164, 148, 85, 64, 149, 161, 66, 153, 150, 8, 22, 138, 98, 88},
    {98, 102, 25, 130, 5, 137, 74, 104, 148, 128, 128, 146, 133, 144, 1, 165, 153, 22, 166, 145, 149, 84, 97, 132, 161, 66, 36, 24, 102, 73, 149, 64, 104, 80, 101, 26, 97, 21, 36, 82, 0, 89, 69, 68, 101, 104, 165, 150, 134, 146, 81, 153, 81, 73, 22, 153, 161, 138, 169, 90, 66, 146, 161, 2, 148, 18, 84, 18, 21, 10, 32, 168, 164, 154, 164, 152, 100, 165, 105, 104, 132, 146, 162, 101, 146, 130, 149, 90, 5, 101, 134, 162, 162, 154, 154, 101, 6, 96, 5, 169, 98, 69, 69, 169, 148, 37, 90, 128, 69, 90, 106, 84, 89, 130, 152, 102, 89, 20, 26, 133, 132, 149, 86, 18, 160, 81, 89, 38, 169, 86, 98, 101, 145, 164, 8, 17, 97, 149, 104, 150, 162, 105, 85, 145, 8, 96, 41, 154, 66, 100, 85, 10, 73, 128, 150, 129, 72, 42, 166, 134, 154, 160, 9, 165, 153, 146, 69, 10, 69, 72, 70, 100, 137, 169, 85, 73, 136, 25, 38, 153, 165, 165, 40, 138, 153, 85, 82, 25, 41, 88, 36, 2, 74, 166, 104, 36, 37, 21, 136, 145, 73, 10, 81, 89, 101, 6, 6, 145, 86, 134, 164, 165, 105, 138, 145, 5, 154, 64, 84, 80, 73, 81, 169, 40, 133, 20, 0, 37, 138, 90, 80, 169, 169, 146, 149, 25, 102, 81, 146, 149, 144, 72, 69, 149, 168, 88, 88, 5, 41, 70, 133, 72, 70, 96, 105, 10, 169, 166, 85, 81, 170, 22, 6, 149, 148, 37, 170, 85, 85, 89, 166, 148, 88, 42, 86, 148, 38, 104, 129, 146, 68, 38, 97, 88, 74, 36, 42, 137, 25, 102, 24, 37, 101, 153, 41, 21, 84, 145, 160, 102, 34, 145, 105, 148, 170, 137, 20, 74, 168, 104, 37, 97, 68, 160, 82, 18, 97, 5, 144, 70, 41, 104, 26, 152, 96, 33, 153, 72, 153, 166, 80, 100, 73, 24, 74, 162, 137, 86, 129, 168, 0, 133, 150, 169, 68, 73, 150, 82, 97, 138, 42, 6, 97, 138, 73, 81, 165, 102, 102, 73, 134, 96, 84, 73, 37, 65, 70, 42, 10, 144, 97, 148, 0, 160, 88, 152, 84, 169, 138, 105, 144, 74, 154, 137},
    {166, 101, 38, 42, 90, 153, 90, 42, 149, 102, 146, 161, 150, 97, 100, 36, 20, 86, 25, 17, 105, 6, 84, 72, 98, 169, 66, 150, 145, 138, 36, 74, 89, 138, 68, 170, 68, 73, 152, 162, 84, 154, 130, 9, 106, 101, 90, 133, 9, 88, 80, 145, 170, 150, 96, 66, 89, 34, 106, 165, 133, 90, 166, 105, 154, 36, 154, 170, 69, 130, 8, 34, 36, 164, 82, 165, 89, 5, 90, 42, 134, 160, 90, 73, 64, 162, 36, 81, 86, 128, 84, 74, 164, 73, 166, 73, 150, 26, 152, 166, 152, 138, 97, 20, 164, 146, 21, 9, 165, 4, 37, 88, 70, 96, 41, 86, 170, 85, 169, 88, 154, 165, 166, 22, 104, 149, 25, 26, 105, 164, 81, 22, 146, 21, 160, 96, 26, 1, 138, 137, 16, 146, 82, 153, 165, 148, 6, 70, 32, 4, 85, 166, 105, 130, 82, 136, 42, 22, 17, 80, 90, 26, 161, 136, 22, 133, 26, 102, 148, 41, 42, 40, 153, 97, 85, 73, 132, 73, 153, 153, 170, 85, 41, 138, 165, 5, 69, 150, 32, 170, 74, 85, 149, 8, 136, 144, 97, 162, 82, 73, 101, 37, 146, 170, 165, 42, 73, 74, 105, 33, 8, 165, 69, 25, 82, 168, 105, 25, 148, 130, 74, 149, 85, 69, 89, 138, 162, 148, 160, 105, 133, 101, 137, 82, 90, 40, 80, 166, 166, 41, 105, 86, 97, 169, 90, 102, 146, 41, 97, 161, 154, 26, 38, 101, 8, 148, 165, 86, 85, 8, 73, 137, 42, 102, 106, 105, 74, 146, 100, 165, 169, 166, 154, 9, 85, 25, 96, 160, 150, 90, 8, 69, 17, 101, 17, 36, 25, 81, 148, 165, 148, 40, 105, 40, 149, 41, 101, 146, 96, 101, 81, 73, 153, 65, 105, 89, 137, 136, 133, 74, 165, 133, 16, 10, 25, 37, 152, 138, 149, 152, 154, 25, 102, 64, 10, 129, 154, 130, 137, 166, 144, 106, 154, 134, 26, 22, 166, 150, 5, 154, 81, 138, 133, 21, 165, 134, 84, 166, 96, 34, 38, 36, 84, 74, 153, 81, 90, 101, 149, 69, 25, 136, 86, 17, 81, 85, 170, 81, 165, 38, 105, 136, 41, 100, 165, 145, 6, 164, 162, 128, 69, 37, 96, 146},
    {81, 81, 21, 70, 104, 90, 137, 69, 33, 150, 40, 73, 149, 153, 33, 149, 24, 165, 17, 138, 152, 153, 97, 134, 72, 38, 170, 149, 37, 132, 154, 34, 73, 160, 20, 170, 101, 104, 102, 21, 84, 68, 98, 128, 146, 154, 26, 149, 161, 145, 106, 21, 38, 170, 101, 85, 162, 168, 9, 161, 68, 66, 37, 85, 89, 89, 86, 169, 152, 169, 26, 80, 138, 38, 150, 82, 70, 146, 21, 86, 161, 160, 129, 154, 153, 68, 90, 145, 130, 38, 96, 74, 161, 82, 86, 101, 160, 10, 20, 160, 37, 102, 37, 138, 153, 150, 66, 102, 90, 150, 25, 149, 90, 38, 136, 134, 74, 162, 81, 136, 105, 130, 9, 66, 6, 90, 21, 162, 72, 102, 69, 130, 20, 149, 96, 101, 145, 153, 82, 22, 65, 148, 102, 104, 128, 165, 98, 104, 5, 133, 21, 73, 170, 153, 40, 146, 2, 137, 154, 165, 25, 148, 97, 89, 68, 26, 105, 32, 37, 73, 137, 166, 37, 41, 164, 152, 170, 16, 20, 165, 89, 90, 89, 80, 154, 160, 101, 97, 149, 129, 5, 136, 22, 145, 8, 149, 146, 154, 25, 144, 133, 144, 10, 42, 1, 168, 17, 134, 161, 168, 137, 97, 70, 145, 132, 138, 165, 165, 104, 2, 145, 153, 5, 32, 98, 130, 68, 96, 146, 169, 89, 90, 166, 90, 89, 82, 149, 102, 161, 101, 16, 154, 66, 9, 152, 20, 72, 137, 165, 150, 130, 98, 106, 104, 169, 102, 144, 154, 33, 10, 37, 10, 68, 169, 64, 97, 26, 105, 102, 161, 6, 65, 90, 64, 170, 89, 17, 100, 105, 168, 100, 146, 149, 98, 105, 84, 160, 104, 148, 165, 69, 130, 80, 154, 165, 85, 133, 82, 68, 33, 106, 165, 80, 2, 69, 149, 85, 137, 102, 34, 170, 38, 34, 9, 85, 169, 137, 101, 161, 161, 165, 101, 0, 9, 165, 82, 101, 160, 100, 169, 40, 73, 1, 38, 138, 90, 133, 10, 42, 101, 22, 20, 26, 153, 152, 153, 104, 33, 154, 149, 106, 100, 101, 102, 10, 97, 41, 150, 1, 85, 106, 26, 164, 136, 36, 16, 5, 105, 96, 25, 6, 89, 149, 70, 85, 90, 137, 89, 166, 132, 148, 25, 149, 165},
    {84, 136, 101, 37, 38, 166, 133, 137, 34, 4, 88, 101, 164, 105, 17, 137, 85, 25, 88, 81, 70, 165, 153, 98, 40, 90, 88, 37, 69, 106, 73, 42, 33, 146, 73, 0, 136, 136, 138, 154, 86, 86, 169, 106, 101, 165, 33, 21, 66, 69, 170, 170, 105, 162, 26, 136, 152, 169, 73, 101, 84, 85, 73, 21, 88, 97, 128, 102, 101, 98, 160, 89, 66, 165, 90, 149, 89, 2, 9, 89, 162, 166, 168, 24, 166, 153, 89, 41, 145, 165, 24, 153, 168, 17, 138, 88, 165, 16, 73, 32, 90, 97, 10, 138, 37, 169, 41, 84, 36, 148, 81, 105, 104, 65, 166, 161, 96, 138, 137, 154, 161, 102, 169, 33, 105, 1, 96, 168, 104, 169, 166, 101, 136, 38, 85, 10, 102, 136, 153, 0, 90, 152, 34, 20, 149, 10, 170, 89, 72, 20, 106, 98, 89, 132, 74, 6, 102, 26, 84, 153, 5, 166, 168, 86, 22, 146, 90, 89, 74, 65, 138, 90, 100, 18, 88, 138, 74, 134, 89, 21, 74, 138, 24, 70, 168, 101, 41, 5, 88, 150, 0, 1, 134, 18, 84, 166, 89, 130, 24, 85, 102, 68, 24, 166, 137, 22, 90, 148, 70, 161, 1, 164, 86, 150, 164, 86, 74, 82, 70, 101, 100, 134, 85, 169, 85, 101, 104, 32, 165, 32, 96, 5, 9, 22, 98, 129, 170, 166, 146, 34, 146, 81, 90, 21, 25, 42, 134, 21, 17, 22, 74, 18, 10, 6, 26, 144, 90, 36, 90, 42, 89, 164, 5, 37, 104, 100, 153, 154, 66, 150, 41, 105, 138, 34, 136, 22, 34, 86, 82, 84, 148, 145, 38, 133, 166, 170, 8, 165, 102, 150, 2, 82, 102, 84, 18, 73, 133, 169, 130, 4, 74, 2, 88, 170, 74, 153, 146, 170, 150, 86, 5, 169, 169, 154, 42, 6, 105, 170, 40, 101, 21, 149, 65, 161, 169, 169, 154, 66, 106, 102, 85, 89, 90, 16, 150, 168, 81, 37, 85, 69, 84, 152, 81, 166, 106, 104, 42, 166, 134, 162, 146, 146, 150, 10, 21, 104, 90, 34, 154, 82, 90, 81, 106, 100, 22, 165, 105, 104, 148, 74, 73, 102, 166, 73, 165, 149, 72, 26, 25, 148, 150, 6, 66, 88},
    {85, 18, 42, 72, 134, 133, 166, 164, 86, 105, 41, 98, 9, 65, 106, 133, 85, 161, 82, 162, 133, 86, 70, 68, 64, 73, 72, 40, 165, 166, 10, 101, 146, 128, 26, 22, 66, 1, 170, 98, 165, 18, 96, 34, 98, 154, 32, 97, 160, 146, 42, 132, 98, 97, 149, 132, 26, 34, 98, 89, 130, 73, 33, 81, 170, 136, 38, 90, 138, 129, 22, 84, 86, 154, 66, 130, 102, 132, 161, 9, 90, 64, 153, 17, 85, 128, 26, 90, 161, 104, 161, 133, 165, 145, 42, 21, 90, 101, 90, 101, 86, 20, 5, 70, 41, 161, 4, 96, 154, 70, 24, 146, 102, 104, 2, 101, 105, 137, 96, 73, 21, 152, 102, 166, 150, 170, 98, 144, 169, 146, 153, 146, 102, 6, 33, 24, 40, 9, 5, 145, 100, 168, 153, 153, 130, 26, 10, 69, 146, 170, 74, 138, 34, 86, 97, 21, 86, 66, 21, 150, 69, 101, 97, 150, 145, 144, 2, 150, 41, 38, 162, 86, 153, 85, 100, 89, 10, 98, 86, 72, 89, 86, 85, 41, 106, 82, 5, 161, 104, 153, 146, 168, 9, 80, 89, 104, 169, 64, 129, 149, 16, 149, 161, 138, 149, 21, 20, 68, 69, 86, 32, 169, 10, 96, 129, 145, 130, 89, 102, 102, 90, 165, 24, 102, 97, 145, 166, 137, 161, 170, 42, 146, 150, 8, 85, 160, 128, 106, 101, 137, 102, 41, 1, 86, 161, 153, 166, 82, 34, 40, 34, 2, 70, 102, 149, 84, 165, 26, 69, 165, 86, 89, 133, 73, 10, 73, 166, 88, 137, 85, 106, 152, 129, 66, 145, 72, 38, 105, 170, 149, 81, 162, 166, 137, 154, 89, 97, 168, 33, 145, 98, 128, 128, 168, 89, 102, 41, 150, 150, 68, 74, 34, 97, 38, 6, 161, 161, 81, 150, 149, 16, 146, 89, 34, 166, 32, 10, 149, 101, 98, 26, 150, 86, 104, 170, 148, 138, 41, 102, 86, 146, 17, 149, 104, 72, 101, 106, 161, 144, 144, 42, 161, 170, 145, 24, 164, 90, 138, 168, 150, 154, 128, 73, 106, 166, 82, 101, 80, 34, 6, 82, 165, 85, 86, 105, 154, 84, 146, 74, 102, 170, 84, 106, 66, 144, 85, 88, 26, 146, 5, 66, 86, 88, 38},
    {149, 153, 69, 22, 105, 41, 73, 134, 130, 10, 85, 82, 166, 85, 25, 145, 0, 98, 69, 36, 2, 134, 81, 24, 154, 101, 26, 8, 24, 153, 104, 106, 104, 41, 86, 161, 4, 134, 150, 134, 97, 105, 33, 104, 144, 9, 104, 101, 105, 130, 84, 150, 21, 82, 86, 101, 106, 150, 40, 149, 169, 145, 80, 169, 20, 138, 70, 70, 37, 130, 106, 149, 10, 150, 40, 162, 42, 128, 144, 104, 68, 144, 86, 25, 105, 146, 17, 36, 81, 20, 166, 149, 170, 105, 149, 165, 152, 4, 42, 88, 89, 17, 101, 37, 170, 165, 100, 170, 33, 166, 96, 74, 98, 22, 74, 132, 89, 36, 85, 40, 88, 38, 146, 98, 102, 162, 69, 96, 104, 136, 68, 149, 32, 104, 37, 97, 161, 68, 169, 150, 98, 137, 101, 162, 41, 104, 90, 152, 153, 97, 96, 37, 70, 42, 166, 153, 90, 106, 37, 165, 106, 100, 97, 85, 149, 152, 161, 152, 25, 70, 149, 154, 36, 168, 133, 84, 26, 134, 33, 164, 160, 84, 165, 22, 66, 154, 41, 101, 168, 85, 65, 32, 136, 166, 25, 26, 5, 98, 105, 84, 170, 168, 88, 105, 164, 69, 88, 170, 166, 86, 146, 85, 26, 37, 98, 146, 86, 137, 24, 6, 26, 33, 25, 20, 85, 81, 162, 88, 97, 18, 21, 66, 34, 137, 133, 86, 66, 89, 86, 100, 90, 170, 9, 149, 85, 170, 165, 104, 133, 1, 64, 145, 6, 25, 154, 9, 101, 26, 86, 74, 160, 70, 169, 152, 104, 73, 169, 96, 138, 65, 40, 85, 150, 74, 144, 10, 38, 150, 164, 18, 40, 106, 148, 5, 74, 32, 165, 81, 137, 165, 169, 17, 17, 133, 130, 129, 17, 69, 86, 37, 134, 80, 154, 73, 37, 69, 102, 38, 145, 137, 153, 154, 144, 150, 89, 134, 153, 85, 166, 36, 145, 74, 101, 101, 20, 98, 32, 170, 65, 169, 164, 69, 105, 149, 10, 89, 102, 153, 150, 22, 80, 81, 166, 101, 84, 165, 74, 146, 150, 22, 104, 22, 38, 68, 149, 150, 20, 149, 166, 102, 4, 33, 69, 105, 128, 72, 37, 168, 42, 70, 170, 105, 2, 74, 88, 97, 24, 36, 128, 26, 26, 36, 5, 69},
    {42, 21, 98, 104, 72, 26, 136, 168, 41, 150, 98, 152, 106, 40, 82, 144, 160, 102, 21, 74, 152, 168, 165, 90, 153, 24, 170, 165, 72, 165, 132, 4, 138, 153, 165, 84, 150, 5, 40, 10, 134, 166, 170, 9, 84, 20, 130, 85, 21, 170, 89, 149, 153, 74, 154, 26, 68, 165, 20, 70, 106, 106, 73, 165, 148, 166, 128, 102, 37, 4, 149, 37, 89, 153, 82, 69, 37, 80, 26, 106, 81, 88, 84, 70, 88, 90, 0, 72, 134, 144, 82, 101, 40, 85, 146, 154, 97, 162, 152, 102, 90, 89, 88, 90, 81, 20, 68, 169, 166, 24, 66, 34, 42, 90, 129, 134, 148, 166, 165, 164, 128, 154, 166, 154, 166, 24, 1, 34, 68, 166, 26, 69, 144, 90, 9, 81, 133, 134, 21, 42, 21, 68, 18, 162, 137, 165, 130, 33, 90, 138, 2, 82, 81, 165, 89, 106, 38, 153, 26, 17, 81, 6, 104, 164, 144, 84, 41, 25, 170, 133, 170, 18, 41, 73, 86, 97, 150, 128, 16, 72, 81, 84, 161, 105, 70, 84, 32, 145, 90, 41, 102, 84, 68, 106, 161, 25, 133, 101, 102, 85, 40, 33, 133, 22, 128, 132, 25, 88, 41, 105, 25, 42, 80, 145, 149, 129, 73, 137, 170, 105, 84, 1, 98, 162, 6, 5, 165, 170, 85, 18, 81, 21, 169, 89, 2, 149, 146, 86, 128, 89, 5, 164, 33, 89, 102, 132, 38, 165, 88, 89, 86, 130, 136, 84, 169, 72, 68, 72, 101, 138, 36, 69, 152, 98, 152, 36, 85, 90, 166, 164, 101, 8, 148, 104, 18, 169, 41, 105, 170, 153, 154, 82, 86, 102, 144, 42, 97, 80, 166, 129, 74, 66, 169, 68, 154, 148, 102, 162, 74, 134, 38, 144, 22, 70, 150, 1, 166, 137, 22, 6, 102, 69, 105, 137, 162, 97, 73, 69, 5, 105, 144, 161, 133, 25, 98, 170, 70, 145, 98, 89, 102, 81, 5, 161, 26, 146, 102, 70, 138, 24, 105, 20, 129, 166, 9, 138, 24, 84, 86, 10, 105, 90, 70, 152, 89, 8, 152, 74, 80, 70, 68, 5, 38, 90, 70, 161, 170, 136, 106, 41, 137, 134, 34, 74, 85, 137, 144, 106, 105, 24, 145, 80, 164, 150},
    {145, 170, 133, 85, 84, 22, 160, 153, 101, 160, 161, 170, 150, 37, 66, 25, 26, 18, 168, 21, 168, 24, 85, 133, 65, 89, 132, 25, 42, 96, 22, 96, 70, 22, 145, 153, 160, 144, 65, 148, 6, 164, 86, 138, 106, 42, 81, 161, 80, 21, 21, 81, 150, 20, 41, 70, 17, 149, 100, 42, 106, 24, 134, 100, 40, 80, 162, 102, 153, 73, 21, 169, 138, 169, 38, 170, 136, 98, 40, 162, 168, 97, 69, 88, 40, 154, 1, 70, 96, 146, 149, 137, 149, 26, 25, 165, 106, 105, 152, 102, 38, 72, 148, 146, 17, 102, 82, 153, 148, 145, 81, 21, 149, 21, 100, 73, 34, 162, 148, 42, 169, 85, 166, 33, 170, 168, 149, 66, 162, 106, 36, 169, 164, 146, 130, 86, 84, 80, 104, 144, 69, 42, 148, 97, 170, 149, 86, 98, 149, 73, 149, 81, 138, 146, 133, 85, 132, 168, 153, 153, 145, 102, 37, 16, 16, 133, 38, 132, 150, 105, 2, 164, 65, 41, 6, 161, 38, 72, 97, 85, 165, 24, 36, 69, 88, 70, 153, 97, 134, 96, 150, 90, 161, 104, 96, 164, 146, 21, 138, 41, 149, 80, 101, 34, 137, 33, 130, 66, 89, 98, 166, 106, 149, 106, 169, 73, 100, 73, 85, 40, 101, 136, 105, 0, 168, 82, 24, 164, 97, 166, 65, 105, 169, 73, 104, 86, 72, 74, 90, 136, 149, 5, 69, 138, 161, 88, 17, 69, 164, 148, 170, 70, 98, 136, 17, 85, 154, 90, 101, 74, 85, 153, 102, 18, 138, 132, 41, 37, 150, 85, 86, 73, 102, 21, 66, 82, 166, 82, 129, 100, 106, 32, 106, 22, 40, 10, 89, 81, 170, 25, 102, 170, 144, 164, 22, 154, 18, 153, 24, 133, 160, 89, 106, 74, 150, 41, 161, 38, 21, 18, 145, 98, 153, 84, 104, 86, 98, 153, 32, 169, 130, 17, 41, 5, 168, 90, 101, 149, 106, 148, 89, 148, 36, 98, 138, 168, 153, 22, 37, 169, 74, 150, 146, 38, 38, 102, 4, 101, 90, 20, 37, 165, 26, 161, 34, 5, 161, 26, 102, 152, 134, 129, 166, 136, 68, 170, 153, 22, 164, 154, 106, 84, 136, 152, 5, 89, 137, 153, 104, 161, 150, 98, 21, 22},
    {169, 144, 22, 84, 1, 97, 169, 138, 25, 74, 145, 6, 80, 148, 145, 134, 162, 86, 98, 144, 26, 4, 164, 90, 88, 138, 81, 21, 134, 149, 170, 85, 5, 130, 104, 10, 104, 134, 138, 4, 70, 153, 169, 84, 96, 160, 42, 70, 150, 145, 85, 138, 149, 144, 22, 104, 132, 153, 152, 74, 170, 104, 8, 41, 86, 36, 149, 128, 170, 102, 81, 149, 100, 166, 105, 132, 134, 105, 134, 164, 146, 137, 104, 169, 97, 97, 168, 137, 74, 86, 149, 32, 89, 36, 146, 17, 84, 102, 149, 86, 102, 37, 33, 144, 68, 72, 150, 168, 153, 41, 136, 154, 0, 169, 82, 149, 9, 146, 132, 153, 168, 169, 42, 149, 89, 86, 134, 154, 18, 34, 153, 165, 128, 134, 86, 20, 102, 100, 40, 166, 34, 86, 146, 169, 170, 4, 26, 8, 149, 130, 18, 132, 10, 169, 169, 26, 4, 98, 97, 70, 81, 130, 80, 153, 170, 41, 33, 102, 105, 36, 138, 106, 86, 138, 106, 26, 101, 18, 26, 100, 9, 104, 26, 105, 104, 98, 65, 85, 150, 105, 25, 86, 22, 146, 21, 80, 86, 169, 106, 164, 85, 66, 22, 100, 169, 68, 74, 26, 101, 26, 144, 89, 106, 6, 25, 84, 88, 102, 101, 21, 144, 150, 129, 154, 42, 102, 40, 90, 165, 164, 85, 90, 129, 5, 169, 80, 98, 82, 146, 130, 168, 150, 85, 129, 34, 24, 74, 1, 72, 26, 24, 24, 33, 65, 42, 66, 25, 164, 161, 146, 102, 84, 169, 148, 84, 85, 89, 100, 104, 20, 149, 88, 36, 170, 130, 146, 149, 85, 153, 165, 25, 6, 22, 41, 66, 170, 88, 153, 148, 105, 152, 70, 98, 5, 152, 134, 137, 144, 88, 32, 150, 82, 82, 166, 9, 106, 73, 161, 166, 85, 170, 170, 132, 161, 138, 32, 162, 138, 70, 148, 25, 138, 97, 146, 132, 145, 154, 166, 152, 170, 148, 165, 145, 145, 165, 106, 22, 80, 161, 165, 104, 22, 149, 166, 89, 85, 26, 102, 73, 165, 69, 68, 36, 90, 149, 101, 137, 98, 100, 22, 106, 129, 6, 22, 165, 8, 166, 68, 149, 5, 102, 80, 66, 166, 6, 136, 25, 153, 161, 102, 86, 37, 169, 21},
    {148, 102, 145, 153, 9, 144, 105, 98, 104, 74, 152, 41, 17, 152, 101, 148, 169, 38, 137, 134, 169, 32, 40, 81, 21, 81, 146, 144, 69, 152, 168, 150, 72, 37, 105, 21, 165, 89, 20, 5, 64, 32, 100, 166, 20, 160, 166, 102, 84, 22, 6, 170, 101, 149, 26, 105, 138, 32, 165, 0, 42, 10, 165, 89, 18, 161, 25, 162, 89, 1, 41, 88, 25, 162, 68, 9, 70, 154, 97, 38, 166, 134, 134, 105, 17, 68, 6, 102, 162, 136, 98, 69, 133, 149, 152, 134, 96, 37, 6, 42, 165, 165, 145, 90, 86, 164, 81, 85, 18, 154, 9, 32, 168, 144, 74, 22, 132, 137, 22, 154, 104, 86, 148, 69, 144, 88, 154, 137, 150, 25, 138, 153, 102, 145, 104, 169, 162, 137, 154, 152, 104, 137, 169, 166, 106, 161, 102, 90, 16, 161, 38, 165, 89, 21, 149, 165, 68, 104, 65, 89, 105, 170, 102, 32, 164, 25, 22, 22, 149, 89, 128, 80, 42, 81, 96, 130, 74, 25, 70, 160, 101, 132, 18, 138, 17, 69, 136, 90, 148, 105, 165, 42, 130, 90, 25, 164, 100, 168, 38, 132, 134, 153, 149, 74, 42, 165, 70, 85, 17, 85, 145, 150, 166, 26, 85, 129, 101, 21, 169, 101, 90, 134, 170, 5, 88, 160, 38, 148, 136, 101, 145, 69, 6, 90, 161, 104, 104, 10, 97, 4, 170, 84, 89, 106, 170, 80, 98, 69, 89, 22, 168, 81, 138, 170, 154, 5, 170, 130, 24, 149, 9, 153, 136, 74, 98, 170, 149, 84, 137, 96, 88, 96, 24, 89, 33, 102, 154, 88, 169, 8, 106, 42, 40, 102, 86, 168, 33, 18, 74, 74, 32, 2, 85, 26, 38, 22, 34, 144, 154, 85, 138, 146, 149, 69, 88, 66, 148, 134, 34, 33, 88, 38, 100, 169, 133, 97, 66, 8, 41, 133, 86, 101, 165, 9, 26, 170, 148, 161, 100, 36, 169, 105, 85, 88, 80, 69, 70, 66, 74, 129, 98, 81, 165, 138, 134, 152, 101, 105, 136, 42, 89, 66, 106, 69, 73, 100, 153, 86, 70, 133, 81, 38, 85, 89, 149, 98, 104, 8, 146, 132, 6, 136, 165, 144, 42, 154, 149, 20, 154, 170, 86, 153, 84, 134},
    {6, 104, 72, 25, 149, 20, 37, 66, 68, 37, 89, 145, 97, 69, 68, 1, 68, 164, 73, 133, 144, 132, 161, 69, 150, 149, 90, 169, 161, 8, 80, 64, 22, 96, 97, 81, 74, 98, 81, 85, 166, 165, 148, 1, 86, 105, 133, 25, 160, 169, 72, 101, 37, 100, 165, 20, 146, 106, 98, 105, 133, 74, 85, 105, 89, 101, 150, 34, 104, 170, 33, 169, 89, 89, 36, 150, 5, 2, 90, 80, 84, 165, 101, 134, 165, 40, 98, 97, 41, 133, 161, 133, 72, 80, 82, 8, 137, 18, 81, 17, 133, 130, 84, 80, 80, 136, 89, 154, 104, 101, 68, 104, 68, 145, 8, 170, 80, 9, 33, 166, 22, 149, 25, 134, 105, 130, 41, 138, 96, 98, 6, 100, 25, 145, 138, 133, 42, 18, 80, 40, 9, 65, 70, 5, 70, 42, 65, 101, 18, 146, 33, 86, 72, 105, 132, 170, 9, 89, 100, 33, 4, 17, 37, 81, 170, 73, 153, 89, 138, 161, 42, 154, 74, 137, 149, 38, 42, 6, 89, 130, 9, 64, 73, 136, 21, 18, 130, 72, 101, 134, 170, 168, 37, 152, 150, 101, 89, 160, 130, 97, 164, 162, 24, 85, 9, 85, 145, 4, 65, 106, 66, 9, 20, 42, 134, 22, 96, 37, 66, 165, 105, 85, 98, 42, 5, 138, 100, 40, 162, 69, 41, 88, 154, 86, 160, 73, 10, 96, 88, 20, 84, 168, 73, 86, 66, 154, 133, 82, 106, 20, 138, 169, 96, 80, 9, 164, 153, 168, 153, 152, 89, 100, 86, 18, 161, 65, 162, 84, 74, 132, 169, 88, 168, 0, 81, 90, 18, 137, 17, 101, 36, 102, 66, 101, 66, 169, 144, 22, 17, 2, 105, 168, 21, 82, 32, 169, 10, 0, 150, 165, 134, 65, 65, 168, 169, 154, 72, 149, 164, 66, 133, 86, 154, 34, 82, 73, 105, 138, 148, 34, 5, 22, 165, 84, 137, 86, 138, 146, 102, 150, 41, 89, 21, 106, 150, 104, 106, 168, 136, 150, 165, 101, 6, 138, 34, 169, 150, 18, 42, 1, 97, 145, 100, 2, 97, 102, 164, 105, 36, 88, 89, 97, 168, 66, 97, 104, 161, 170, 148, 150, 25, 133, 36, 9, 70, 98, 24, 96, 38, 170, 22, 25, 102, 100},
    {136, 10, 34, 165, 148, 10, 89, 90, 136, 41, 18, 17, 96, 85, 25, 89, 70, 162, 38, 150, 65, 150, 2, 98, 98, 82, 21, 102, 170, 136, 8, 100, 164, 8, 134, 73, 26, 16, 24, 9, 88, 104, 88, 9, 106, 84, 170, 166, 86, 149, 98, 34, 106, 102, 164, 148, 73, 8, 38, 72, 21, 82, 22, 42, 100, 161, 65, 102, 41, 145, 89, 105, 149, 132, 98, 169, 150, 138, 162, 41, 90, 9, 162, 154, 85, 102, 104, 148, 132, 80, 37, 129, 128, 134, 164, 70, 149, 20, 146, 130, 88, 165, 170, 134, 146, 81, 38, 85, 86, 69, 145, 149, 85, 38, 100, 134, 24, 138, 84, 166, 82, 105, 101, 160, 152, 150, 144, 169, 34, 25, 98, 38, 101, 68, 132, 64, 168, 150, 104, 42, 105, 41, 161, 65, 101, 86, 73, 72, 166, 133, 164, 2, 169, 170, 166, 105, 84, 105, 160, 128, 138, 168, 72, 170, 130, 146, 84, 98, 161, 90, 97, 144, 41, 18, 85, 25, 148, 165, 25, 74, 89, 33, 169, 25, 169, 41, 9, 69, 33, 152, 96, 165, 136, 97, 33, 90, 72, 41, 96, 134, 170, 82, 22, 161, 149, 10, 6, 100, 168, 164, 32, 69, 150, 90, 74, 98, 137, 146, 24, 25, 9, 22, 18, 73, 25, 6, 170, 26, 84, 153, 5, 69, 42, 102, 69, 149, 165, 169, 153, 106, 150, 150, 104, 102, 89, 150, 85, 86, 96, 166, 42, 148, 146, 149, 89, 89, 20, 18, 16, 150, 162, 161, 84, 80, 106, 166, 73, 98, 41, 102, 68, 89, 82, 90, 148, 154, 100, 169, 21, 145, 170, 21, 105, 170, 90, 133, 136, 40, 84, 37, 169, 85, 68, 26, 154, 150, 25, 42, 72, 74, 105, 73, 170, 20, 17, 66, 40, 21, 166, 106, 153, 104, 5, 106, 101, 154, 38, 34, 165, 153, 81, 162, 169, 129, 65, 42, 104, 149, 170, 40, 164, 66, 160, 133, 0, 40, 169, 133, 16, 84, 90, 102, 102, 20, 84, 69, 65, 161, 152, 69, 72, 166, 144, 168, 89, 38, 169, 25, 148, 88, 132, 102, 133, 149, 70, 136, 160, 102, 106, 102, 105, 166, 89, 73, 34, 69, 148, 102, 154, 138, 132, 64, 20, 150},
    {98, 106, 165, 101, 132, 169, 106, 168, 1, 86, 152, 105, 85, 81, 168, 137, 145, 154, 70, 73, 128, 106, 149, 105, 26, 88, 88, 144, 153, 37, 101, 10, 22, 169, 148, 0, 148, 38, 149, 40, 40, 134, 138, 42, 130, 70, 86, 37, 105, 72, 132, 153, 65, 90, 101, 164, 98, 20, 25, 24, 72, 90, 170, 136, 130, 134, 82, 42, 138, 137, 161, 88, 90, 100, 152, 144, 0, 42, 169, 64, 69, 138, 146, 102, 42, 69, 8, 154, 105, 84, 166, 101, 153, 133, 9, 149, 26, 133, 102, 64, 72, 165, 137, 17, 137, 80, 88, 162, 70, 133, 145, 106, 1, 133, 37, 145, 106, 66, 82, 130, 149, 70, 36, 166, 165, 166, 80, 37, 34, 8, 88, 133, 133, 144, 38, 154, 169, 89, 146, 152, 162, 165, 5, 73, 81, 100, 90, 146, 9, 38, 34, 166, 74, 21, 82, 105, 160, 38, 32, 162, 73, 18, 33, 21, 136, 21, 37, 149, 149, 134, 90, 161, 18, 104, 38, 42, 6, 86, 21, 170, 21, 102, 73, 89, 9, 17, 66, 161, 144, 137, 166, 106, 164, 68, 101, 90, 69, 106, 24, 165, 69, 170, 148, 89, 148, 21, 65, 160, 6, 101, 146, 85, 97, 8, 150, 168, 73, 138, 169, 145, 38, 88, 105, 72, 165, 80, 160, 149, 9, 134, 89, 168, 2, 169, 106, 133, 25, 90, 84, 130, 164, 129, 65, 73, 136, 97, 105, 88, 21, 164, 129, 166, 161, 84, 152, 161, 169, 81, 150, 160, 169, 105, 101, 106, 166, 138, 169, 10, 102, 73, 104, 101, 165, 168, 40, 85, 138, 24, 70, 170, 154, 106, 21, 38, 90, 84, 84, 102, 40, 89, 104, 88, 84, 81, 98, 72, 96, 64, 164, 85, 105, 80, 144, 10, 100, 98, 148, 137, 97, 98, 4, 149, 68, 102, 168, 18, 129, 10, 90, 89, 69, 165, 104, 96, 149, 152, 164, 40, 136, 102, 105, 168, 154, 134, 72, 81, 64, 40, 137, 105, 69, 38, 97, 97, 165, 146, 169, 149, 169, 89, 74, 101, 64, 16, 37, 130, 170, 22, 36, 106, 133, 85, 66, 42, 21, 166, 166, 74, 97, 106, 138, 21, 8, 154, 4, 101, 22, 88, 100, 168, 41, 96, 86, 104},
    {36, 9, 81, 65, 84, 89, 5, 165, 168, 97, 165, 150, 152, 70, 102, 148, 154, 25, 102, 146, 69, 38, 73, 10, 169, 80, 101, 36, 138, 149, 170, 37, 69, 148, 170, 89, 37, 149, 89, 149, 88, 164, 105, 70, 22, 81, 5, 153, 64, 162, 97, 69, 17, 98, 2, 153, 161, 134, 85, 22, 82, 89, 149, 154, 160, 162, 10, 74, 17, 20, 16, 86, 104, 21, 150, 160, 169, 106, 69, 20, 165, 70, 106, 164, 24, 69, 69, 73, 133, 86, 26, 165, 66, 104, 22, 42, 26, 17, 84, 20, 6, 148, 21, 169, 9, 145, 38, 1, 150, 137, 144, 41, 100, 5, 105, 145, 37, 106, 90, 105, 37, 2, 154, 154, 97, 150, 162, 106, 74, 89, 98, 2, 8, 8, 0, 145, 26, 101, 104, 25, 154, 40, 104, 5, 22, 153, 154, 105, 170, 40, 164, 133, 166, 73, 138, 38, 153, 168, 154, 166, 105, 104, 129, 89, 21, 73, 36, 66, 69, 22, 101, 22, 102, 90, 96, 166, 133, 88, 81, 154, 22, 153, 84, 152, 85, 154, 25, 41, 20, 85, 102, 101, 69, 154, 106, 68, 144, 98, 40, 41, 33, 80, 9, 9, 90, 149, 134, 37, 24, 105, 86, 6, 165, 102, 105, 26, 5, 26, 82, 40, 33, 80, 104, 97, 36, 90, 154, 21, 153, 21, 106, 26, 33, 9, 97, 102, 102, 88, 102, 25, 38, 41, 72, 100, 70, 153, 16, 154, 86, 36, 85, 169, 18, 161, 0, 97, 16, 40, 101, 42, 101, 162, 149, 137, 106, 33, 101, 6, 25, 24, 98, 74, 129, 104, 73, 154, 26, 101, 169, 152, 89, 138, 144, 70, 134, 150, 168, 98, 85, 66, 90, 37, 36, 102, 21, 165, 168, 97, 65, 21, 150, 106, 96, 81, 37, 16, 134, 153, 137, 68, 8, 42, 21, 88, 145, 164, 64, 68, 149, 165, 34, 34, 129, 90, 66, 98, 154, 66, 164, 64, 10, 152, 37, 138, 89, 137, 106, 100, 68, 81, 106, 90, 166, 98, 149, 18, 66, 104, 104, 148, 89, 169, 6, 138, 81, 88, 25, 165, 72, 153, 170, 73, 90, 6, 81, 104, 85, 102, 98, 0, 162, 88, 89, 25, 38, 100, 101, 82, 149, 145, 65, 64, 146, 166},
    {17, 88, 86, 148, 152, 70, 72, 146, 153, 102, 90, 18, 145, 97, 136, 33, 86, 10, 146, 88, 101, 38, 85, 169, 154, 24, 88, 166, 130, 105, 42, 164, 89, 97, 137, 101, 86, 33, 64, 104, 41, 137, 104, 145, 152, 85, 105, 89, 70, 17, 136, 138, 148, 161, 134, 101, 98, 24, 102, 68, 20, 106, 170, 37, 6, 90, 100, 21, 69, 132, 129, 9, 69, 90, 154, 97, 84, 81, 34, 161, 100, 64, 133, 166, 166, 96, 144, 37, 74, 150, 38, 170, 81, 106, 21, 106, 166, 85, 17, 133, 9, 17, 42, 104, 9, 134, 33, 100, 134, 86, 72, 96, 168, 8, 164, 153, 154, 150, 26, 66, 129, 16, 100, 165, 105, 41, 154, 69, 105, 85, 134, 106, 162, 96, 138, 81, 21, 90, 105, 88, 165, 80, 170, 66, 1, 85, 144, 41, 97, 85, 152, 86, 148, 106, 137, 106, 149, 16, 154, 86, 6, 21, 8, 169, 36, 17, 73, 40, 90, 169, 24, 101, 86, 134, 154, 154, 152, 34, 22, 137, 86, 102, 2, 16, 105, 25, 168, 6, 5, 102, 148, 96, 68, 42, 22, 80, 20, 25, 73, 162, 153, 130, 132, 102, 106, 21, 134, 106, 25, 68, 133, 90, 96, 146, 1, 33, 169, 21, 85, 104, 82, 84, 84, 32, 41, 105, 169, 40, 169, 17, 38, 97, 33, 86, 152, 70, 101, 34, 152, 102, 168, 106, 138, 86, 81, 10, 104, 133, 86, 0, 38, 89, 97, 42, 9, 90, 128, 106, 169, 150, 90, 150, 128, 161, 134, 37, 36, 68, 89, 138, 169, 129, 81, 144, 101, 18, 152, 34, 73, 80, 70, 98, 137, 148, 152, 145, 101, 90, 82, 170, 129, 82, 85, 34, 168, 96, 134, 166, 22, 72, 24, 98, 73, 149, 168, 105, 165, 161, 81, 90, 90, 100, 106, 82, 161, 24, 89, 100, 105, 165, 85, 146, 96, 5, 89, 169, 21, 150, 34, 154, 152, 104, 24, 25, 164, 86, 18, 162, 69, 86, 6, 150, 40, 129, 25, 102, 73, 20, 69, 149, 9, 2, 34, 102, 6, 9, 96, 82, 149, 169, 17, 138, 166, 73, 38, 69, 150, 154, 24, 26, 146, 102, 153, 134, 106, 69, 102, 105, 22, 137, 102, 98, 26, 73},
    {80, 64, 18, 150, 72, 154, 74, 70, 169, 170, 33, 149, 36, 101, 150, 132, 17, 137, 132, 166, 64, 96, 42, 6, 136, 101, 165, 73, 105, 66, 161, 41, 146, 24, 153, 85, 82, 69, 21, 134, 37, 161, 37, 104, 102, 88, 42, 24, 134, 81, 146, 150, 101, 86, 100, 97, 164, 166, 66, 73, 81, 106, 25, 164, 148, 101, 65, 6, 66, 133, 37, 101, 69, 106, 84, 17, 81, 38, 138, 41, 106, 138, 146, 102, 161, 33, 153, 65, 86, 69, 73, 81, 160, 106, 106, 21, 105, 170, 164, 41, 88, 74, 149, 97, 153, 100, 170, 34, 130, 24, 5, 25, 17, 104, 165, 154, 166, 85, 41, 150, 101, 106, 153, 149, 150, 0, 36, 101, 65, 105, 136, 130, 101, 129, 26, 26, 106, 170, 134, 170, 16, 165, 101, 166, 104, 106, 133, 85, 150, 18, 26, 168, 90, 9, 146, 24, 9, 145, 102, 101, 84, 134, 153, 129, 98, 138, 74, 38, 145, 37, 0, 86, 152, 6, 85, 146, 164, 138, 162, 166, 86, 69, 102, 153, 150, 5, 165, 20, 165, 10, 98, 18, 162, 105, 149, 96, 144, 64, 145, 150, 33, 33, 149, 144, 101, 132, 84, 69, 1, 149, 1, 2, 154, 150, 148, 80, 160, 149, 154, 150, 138, 166, 102, 20, 97, 170, 105, 146, 21, 136, 132, 96, 74, 74, 145, 102, 148, 166, 149, 149, 74, 10, 18, 40, 74, 22, 104, 133, 165, 149, 138, 148, 105, 102, 97, 149, 101, 137, 166, 68, 36, 148, 168, 146, 86, 106, 148, 17, 69, 138, 2, 98, 138, 153, 169, 25, 160, 84, 80, 101, 146, 85, 4, 165, 170, 128, 34, 26, 170, 80, 153, 84, 133, 102, 26, 90, 86, 82, 17, 146, 81, 166, 101, 84, 134, 21, 166, 165, 169, 136, 136, 101, 101, 40, 8, 81, 8, 105, 8, 150, 133, 153, 129, 162, 128, 136, 42, 101, 65, 74, 24, 37, 128, 2, 134, 70, 18, 69, 160, 148, 146, 133, 148, 165, 152, 98, 21, 160, 160, 73, 70, 86, 81, 169, 68, 166, 134, 1, 36, 5, 144, 0, 85, 22, 34, 81, 73, 66, 128, 9, 102, 40, 169, 8, 165, 66, 100, 148, 64, 169, 146, 148, 150, 9},
    {97, 98, 106, 82, 20, 25, 100, 25, 4, 105, 74, 21, 86, 106, 162, 10, 69, 165, 161, 25, 96, 41, 133, 105, 162, 149, 38, 6, 153, 82, 153, 152, 4, 37, 98, 106, 168, 169, 152, 162, 42, 102, 168, 17, 18, 154, 166, 86, 80, 100, 80, 130, 81, 38, 66, 152, 161, 38, 100, 104, 164, 134, 169, 86, 161, 25, 40, 82, 90, 73, 41, 8, 86, 42, 37, 69, 41, 73, 0, 154, 101, 170, 104, 150, 42, 102, 138, 164, 70, 133, 68, 17, 146, 89, 4, 72, 133, 137, 84, 85, 102, 6, 25, 72, 137, 165, 41, 150, 146, 34, 10, 106, 81, 73, 137, 146, 153, 85, 74, 132, 81, 161, 136, 24, 90, 2, 169, 22, 72, 18, 104, 148, 86, 152, 101, 82, 170, 170, 161, 162, 36, 102, 169, 105, 144, 149, 73, 101, 82, 72, 106, 65, 41, 5, 162, 86, 152, 144, 25, 5, 152, 102, 68, 152, 82, 166, 166, 168, 69, 132, 168, 37, 130, 166, 134, 26, 129, 10, 96, 72, 4, 145, 9, 161, 138, 81, 22, 9, 105, 4, 68, 164, 152, 170, 169, 18, 82, 1, 169, 86, 153, 90, 133, 102, 6, 165, 169, 42, 130, 102, 85, 10, 90, 129, 6, 89, 129, 149, 9, 165, 34, 20, 86, 104, 64, 65, 98, 98, 37, 97, 0, 106, 70, 137, 161, 73, 166, 144, 170, 168, 136, 64, 145, 4, 168, 169, 70, 166, 70, 26, 132, 145, 106, 130, 21, 169, 148, 164, 88, 150, 154, 132, 105, 170, 69, 88, 106, 36, 100, 165, 146, 90, 84, 150, 166, 21, 70, 154, 86, 69, 144, 104, 70, 96, 161, 81, 69, 169, 165, 129, 165, 101, 128, 65, 34, 134, 86, 160, 104, 166, 106, 153, 89, 1, 106, 145, 25, 33, 154, 164, 2, 98, 21, 100, 98, 2, 145, 4, 161, 20, 85, 169, 73, 104, 101, 170, 65, 161, 40, 166, 166, 88, 152, 153, 153, 37, 134, 86, 22, 88, 37, 162, 6, 146, 4, 153, 164, 105, 166, 137, 82, 160, 70, 88, 26, 134, 24, 21, 98, 133, 85, 85, 166, 69, 137, 146, 16, 9, 169, 166, 96, 68, 20, 161, 82, 81, 165, 86, 104, 102, 20, 65, 86, 36},
    {66, 105, 26, 89, 154, 150, 41, 21, 149, 90, 145, 90, 65, 10, 89, 9, 10, 146, 69, 66, 100, 168, 69, 169, 169, 164, 106, 153, 165, 170, 164, 81, 138, 137, 81, 101, 40, 169, 130, 41, 129, 100, 82, 74, 10, 152, 90, 1, 84, 90, 148, 166, 169, 18, 33, 105, 136, 85, 144, 88, 162, 88, 165, 97, 26, 146, 169, 72, 161, 150, 22, 101, 85, 21, 4, 149, 105, 137, 1, 36, 98, 18, 42, 97, 73, 8, 168, 89, 0, 137, 160, 25, 102, 104, 137, 38, 166, 18, 18, 36, 105, 85, 18, 154, 144, 149, 169, 2, 32, 6, 168, 33, 165, 132, 38, 105, 90, 165, 154, 84, 165, 90, 153, 153, 42, 73, 82, 82, 101, 101, 18, 26, 101, 21, 20, 129, 70, 72, 161, 106, 25, 101, 36, 133, 165, 148, 24, 41, 154, 80, 10, 26, 89, 105, 74, 136, 101, 146, 150, 81, 169, 150, 138, 8, 84, 137, 22, 89, 134, 164, 70, 5, 88, 20, 86, 90, 37, 86, 82, 105, 17, 98, 169, 89, 153, 144, 97, 105, 165, 80, 9, 9, 85, 164, 165, 154, 68, 82, 88, 37, 168, 40, 85, 84, 66, 26, 161, 9, 105, 33, 162, 160, 130, 85, 70, 100, 37, 169, 102, 84, 18, 65, 169, 24, 86, 72, 170, 152, 160, 72, 152, 138, 80, 22, 73, 80, 40, 72, 97, 101, 101, 137, 38, 148, 9, 137, 154, 98, 84, 106, 97, 160, 89, 101, 90, 134, 164, 154, 68, 166, 97, 145, 86, 40, 84, 129, 136, 9, 69, 104, 101, 1, 153, 68, 130, 146, 26, 81, 25, 85, 144, 132, 150, 165, 154, 42, 166, 18, 38, 86, 86, 152, 89, 165, 101, 73, 146, 82, 86, 166, 9, 36, 85, 9, 168, 69, 150, 166, 37, 98, 25, 101, 136, 90, 162, 149, 170, 105, 169, 68, 101, 73, 129, 1, 138, 161, 153, 137, 34, 25, 6, 81, 170, 165, 150, 166, 88, 166, 66, 169, 104, 36, 100, 100, 133, 137, 145, 144, 4, 37, 37, 105, 70, 134, 82, 170, 26, 166, 153, 134, 4, 168, 96, 128, 101, 89, 73, 84, 86, 41, 42, 101, 102, 166, 169, 81, 106, 169, 65, 164, 154, 169, 166, 128},
    {80, 105, 86, 145, 101, 18, 69, 65, 85, 169, 86, 149, 168, 101, 161, 20, 0, 69, 150, 84, 153, 150, 68, 169, 69, 134, 89, 24, 150, 32, 170, 101, 104, 145, 98, 149, 168, 138, 138, 80, 41, 86, 36, 89, 37, 101, 153, 10, 166, 138, 86, 152, 148, 165, 17, 5, 170, 160, 153, 41, 149, 166, 164, 89, 134, 22, 9, 41, 105, 82, 22, 97, 64, 106, 101, 137, 8, 86, 21, 161, 145, 81, 149, 162, 66, 170, 106, 24, 162, 100, 38, 150, 97, 37, 134, 64, 102, 26, 97, 84, 22, 168, 150, 165, 150, 102, 104, 137, 149, 84, 132, 74, 148, 148, 150, 5, 164, 145, 42, 89, 10, 166, 18, 66, 149, 162, 106, 69, 88, 73, 154, 161, 74, 68, 149, 138, 90, 41, 100, 100, 166, 22, 90, 9, 42, 160, 81, 149, 149, 90, 166, 148, 89, 133, 105, 148, 85, 84, 81, 37, 153, 98, 41, 65, 165, 161, 81, 101, 152, 162, 42, 82, 137, 105, 66, 10, 66, 24, 34, 81, 102, 81, 153, 38, 150, 98, 146, 90, 70, 166, 137, 165, 9, 106, 86, 148, 82, 38, 105, 166, 106, 1, 153, 106, 33, 70, 66, 169, 105, 161, 97, 152, 66, 148, 5, 69, 9, 150, 25, 85, 165, 146, 105, 150, 170, 41, 168, 154, 65, 169, 40, 162, 85, 170, 152, 65, 145, 25, 106, 73, 89, 40, 90, 37, 90, 154, 90, 89, 38, 164, 81, 88, 90, 85, 105, 132, 169, 34, 96, 90, 16, 96, 82, 132, 42, 154, 101, 0, 41, 161, 20, 98, 89, 138, 8, 154, 17, 68, 154, 68, 40, 22, 96, 81, 88, 36, 154, 0, 101, 89, 100, 170, 144, 37, 170, 2, 106, 86, 98, 90, 164, 90, 37, 162, 26, 86, 105, 69, 133, 165, 130, 69, 21, 153, 17, 153, 134, 101, 170, 106, 72, 22, 134, 149, 102, 86, 146, 36, 153, 105, 72, 102, 100, 104, 101, 42, 38, 102, 9, 42, 149, 98, 145, 85, 132, 10, 89, 102, 65, 72, 89, 84, 20, 24, 33, 102, 169, 68, 150, 86, 25, 4, 97, 160, 149, 22, 169, 90, 136, 70, 148, 22, 160, 97, 65, 165, 86, 145, 40, 42, 132, 6, 89, 10},
    {21, 98, 42, 72, 154, 6, 161, 89, 170, 42, 152, 166, 85, 134, 33, 6, 144, 42, 149, 64, 150, 169, 153, 164, 165, 166, 2, 88, 68, 85, 104, 42, 166, 164, 86, 100, 21, 34, 42, 165, 80, 165, 137, 74, 105, 154, 145, 21, 88, 149, 90, 73, 145, 88, 88, 169, 169, 86, 128, 88, 33, 84, 162, 133, 170, 138, 105, 82, 68, 81, 168, 105, 146, 150, 106, 68, 42, 132, 152, 102, 70, 97, 145, 82, 169, 146, 101, 133, 170, 98, 85, 41, 154, 1, 101, 42, 74, 10, 42, 24, 22, 169, 66, 89, 166, 38, 168, 82, 105, 169, 168, 162, 80, 154, 90, 88, 36, 41, 85, 64, 130, 20, 130, 101, 101, 89, 132, 10, 70, 90, 106, 89, 73, 89, 133, 148, 145, 85, 169, 170, 81, 168, 170, 162, 22, 106, 149, 22, 169, 69, 166, 132, 36, 82, 24, 136, 169, 133, 138, 69, 102, 40, 4, 105, 136, 98, 169, 134, 150, 170, 164, 168, 170, 42, 170, 98, 166, 105, 150, 41, 130, 105, 26, 22, 42, 21, 153, 37, 96, 68, 81, 96, 106, 37, 150, 2, 154, 65, 138, 104, 148, 101, 170, 165, 90, 37, 162, 36, 148, 132, 170, 26, 69, 89, 154, 73, 138, 149, 96, 81, 96, 86, 104, 86, 86, 4, 150, 72, 149, 18, 149, 22, 69, 86, 165, 80, 90, 102, 150, 85, 37, 170, 148, 100, 101, 150, 85, 85, 82, 85, 137, 5, 82, 9, 169, 9, 90, 169, 145, 145, 106, 106, 153, 69, 132, 42, 84, 160, 164, 68, 64, 137, 20, 38, 134, 86, 96, 70, 149, 10, 6, 101, 80, 86, 16, 38, 81, 137, 1, 106, 86, 148, 170, 10, 18, 66, 20, 136, 105, 129, 69, 138, 86, 168, 105, 149, 170, 98, 144, 37, 26, 24, 138, 149, 105, 134, 73, 65, 150, 90, 101, 69, 24, 4, 21, 89, 37, 26, 82, 165, 137, 22, 148, 86, 40, 41, 82, 96, 22, 21, 98, 98, 161, 90, 106, 154, 4, 16, 64, 0, 88, 68, 68, 134, 25, 132, 106, 132, 145, 145, 17, 105, 168, 22, 149, 85, 81, 72, 102, 65, 130, 150, 166, 129, 152, 138, 6, 69, 170, 36, 137, 6, 85, 161},
    {89, 166, 96, 80, 169, 89, 22, 73, 2, 102, 154, 41, 160, 170, 153, 166, 137, 8, 146, 170, 70, 26, 17, 153, 129, 138, 85, 82, 90, 105, 73, 69, 101, 136, 26, 150, 90, 149, 149, 138, 160, 6, 153, 68, 68, 80, 5, 38, 162, 72, 86, 41, 170, 37, 84, 132, 69, 38, 168, 72, 18, 81, 16, 106, 18, 169, 170, 85, 153, 145, 149, 146, 101, 42, 148, 26, 26, 162, 9, 165, 168, 129, 106, 72, 21, 85, 105, 170, 150, 89, 64, 86, 89, 40, 86, 137, 165, 169, 82, 149, 105, 161, 105, 145, 154, 138, 88, 42, 106, 21, 166, 4, 169, 68, 98, 41, 81, 90, 40, 161, 154, 128, 66, 8, 73, 166, 161, 8, 22, 82, 152, 105, 98, 0, 86, 104, 133, 169, 69, 153, 138, 89, 70, 161, 170, 26, 9, 82, 69, 81, 42, 81, 84, 26, 85, 64, 10, 21, 137, 9, 162, 149, 9, 153, 153, 138, 72, 69, 1, 6, 69, 166, 154, 41, 105, 85, 38, 129, 144, 160, 164, 97, 98, 100, 101, 42, 68, 149, 150, 153, 90, 22, 25, 85, 22, 144, 146, 74, 161, 74, 166, 154, 85, 89, 96, 161, 41, 25, 38, 74, 166, 166, 145, 149, 69, 90, 101, 40, 149, 85, 20, 130, 98, 100, 81, 161, 25, 42, 153, 40, 153, 101, 70, 25, 104, 24, 22, 132, 90, 88, 0, 165, 102, 100, 88, 170, 169, 41, 69, 74, 169, 5, 152, 82, 145, 106, 22, 40, 133, 42, 70, 138, 89, 18, 154, 148, 130, 106, 170, 18, 168, 148, 89, 149, 84, 97, 165, 22, 100, 42, 146, 90, 89, 25, 21, 153, 22, 85, 170, 145, 70, 97, 21, 128, 128, 106, 169, 165, 25, 65, 104, 32, 134, 2, 153, 90, 37, 160, 161, 34, 161, 66, 66, 5, 37, 18, 5, 84, 105, 85, 162, 21, 144, 166, 40, 97, 105, 70, 138, 82, 128, 37, 161, 25, 104, 106, 17, 162, 38, 42, 84, 81, 162, 152, 166, 169, 86, 25, 1, 106, 69, 73, 146, 65, 96, 102, 16, 130, 101, 164, 41, 152, 166, 42, 33, 34, 137, 164, 137, 6, 21, 97, 149, 74, 101, 132, 22, 169, 137, 152, 5, 154, 73, 164},
    {164, 89, 164, 165, 20, 10, 40, 70, 134, 152, 97, 18, 98, 6, 64, 165, 17, 88, 88, 26, 148, 104, 137, 85, 154, 85, 33, 162, 145, 149, 128, 73, 80, 74, 34, 137, 86, 74, 21, 26, 106, 34, 160, 20, 34, 149, 73, 165, 88, 24, 90, 80, 149, 106, 26, 86, 129, 88, 150, 164, 42, 74, 36, 88, 100, 130, 160, 97, 154, 37, 70, 165, 154, 38, 85, 100, 130, 66, 152, 73, 152, 85, 146, 74, 4, 101, 33, 69, 72, 86, 81, 133, 73, 18, 160, 168, 137, 104, 33, 166, 153, 5, 100, 145, 34, 101, 97, 168, 70, 149, 82, 22, 104, 81, 162, 165, 9, 25, 138, 170, 26, 86, 102, 22, 72, 70, 36, 145, 90, 5, 166, 84, 148, 169, 26, 37, 65, 170, 10, 84, 100, 153, 21, 100, 104, 102, 89, 81, 10, 82, 164, 69, 42, 33, 34, 170, 149, 90, 153, 164, 98, 5, 20, 85, 149, 22, 161, 90, 149, 72, 38, 38, 21, 145, 137, 169, 24, 9, 169, 161, 22, 149, 164, 96, 69, 88, 133, 165, 166, 41, 40, 101, 133, 105, 82, 33, 148, 145, 137, 26, 169, 104, 153, 72, 149, 101, 96, 18, 64, 149, 129, 169, 153, 24, 152, 89, 170, 85, 20, 9, 154, 105, 154, 80, 66, 88, 6, 85, 102, 38, 25, 42, 161, 160, 42, 80, 10, 85, 42, 165, 74, 82, 72, 37, 42, 18, 169, 168, 25, 100, 37, 130, 150, 86, 84, 146, 101, 166, 98, 105, 5, 97, 80, 38, 164, 145, 160, 170, 154, 134, 169, 101, 148, 38, 164, 86, 17, 32, 89, 9, 161, 150, 129, 10, 170, 162, 133, 68, 129, 170, 89, 152, 150, 170, 101, 89, 70, 21, 166, 25, 154, 104, 85, 5, 80, 85, 138, 170, 144, 18, 148, 154, 85, 133, 134, 165, 146, 161, 164, 37, 1, 150, 153, 6, 168, 153, 168, 137, 146, 86, 169, 162, 160, 129, 88, 10, 133, 9, 170, 133, 25, 102, 69, 26, 149, 40, 106, 80, 168, 96, 137, 170, 85, 66, 149, 148, 85, 150, 21, 1, 146, 65, 145, 133, 34, 130, 144, 137, 152, 36, 100, 20, 133, 153, 21, 72, 150, 88, 68, 145, 145, 25, 153, 89},
    {25, 129, 84, 85, 26, 82, 148, 169, 70, 81, 69, 9, 136, 169, 161, 74, 65, 149, 80, 137, 137, 145, 102, 154, 69, 74, 102, 18, 21, 97, 74, 37, 82, 66, 138, 85, 150, 164, 40, 100, 164, 146, 169, 85, 162, 0, 144, 161, 148, 90, 154, 70, 165, 160, 21, 21, 170, 100, 82, 102, 133, 169, 81, 41, 165, 72, 86, 88, 17, 148, 98, 74, 25, 106, 34, 5, 73, 86, 1, 102, 144, 130, 66, 65, 82, 169, 102, 138, 24, 18, 90, 170, 130, 102, 38, 153, 72, 128, 86, 152, 170, 130, 80, 80, 89, 170, 101, 64, 100, 84, 170, 41, 37, 24, 84, 2, 81, 65, 66, 41, 153, 152, 102, 20, 105, 68, 70, 68, 72, 33, 84, 101, 66, 21, 152, 80, 0, 82, 162, 164, 42, 86, 18, 98, 65, 86, 106, 168, 136, 100, 2, 32, 70, 70, 89, 38, 33, 149, 170, 97, 105, 97, 16, 38, 144, 165, 74, 169, 90, 96, 18, 68, 82, 100, 34, 68, 74, 164, 21, 72, 106, 72, 136, 9, 36, 41, 18, 21, 101, 36, 137, 68, 144, 36, 65, 170, 40, 106, 134, 26, 66, 16, 86, 26, 128, 138, 80, 68, 65, 88, 152, 74, 68, 144, 72, 0, 161, 42, 26, 8, 20, 138, 162, 169, 101, 102, 162, 21, 153, 148, 17, 106, 9, 81, 153, 150, 136, 1, 162, 17, 105, 24, 34, 37, 138, 146, 132, 89, 1, 154, 138, 165, 169, 85, 37, 129, 6, 82, 134, 26, 134, 22, 84, 150, 66, 16, 24, 21, 1, 168, 90, 22, 84, 169, 162, 152, 25, 166, 160, 17, 86, 138, 133, 90, 90, 133, 8, 154, 37, 84, 161, 37, 170, 16, 66, 41, 40, 74, 169, 90, 86, 150, 130, 168, 106, 138, 22, 16, 136, 41, 102, 152, 9, 105, 168, 102, 138, 88, 161, 85, 22, 81, 80, 21, 170, 105, 88, 70, 20, 164, 81, 81, 148, 168, 104, 145, 145, 17, 106, 152, 161, 102, 85, 21, 90, 101, 152, 65, 138, 37, 97, 34, 33, 170, 97, 102, 37, 102, 152, 74, 70, 106, 81, 6, 21, 24, 22, 34, 138, 40, 98, 34, 21, 82, 21, 161, 25, 0, 17, 134, 38, 85, 146, 168},
    {90, 25, 85, 169, 69, 18, 166, 25, 32, 41, 170, 132, 16, 160, 90, 90, 170, 84, 96, 72, 105, 81, 74, 96, 4, 166, 89, 153, 165, 150, 72, 130, 137, 150, 17, 26, 64, 20, 73, 164, 80, 42, 138, 41, 166, 166, 22, 150, 149, 16, 70, 132, 97, 134, 20, 160, 5, 89, 97, 105, 1, 70, 72, 169, 146, 145, 68, 169, 170, 5, 73, 105, 149, 169, 4, 22, 80, 146, 133, 101, 132, 33, 153, 88, 150, 17, 132, 161, 37, 168, 105, 73, 41, 9, 154, 90, 106, 105, 90, 153, 25, 82, 22, 89, 150, 101, 133, 128, 162, 85, 161, 104, 20, 41, 149, 90, 82, 65, 102, 160, 42, 41, 18, 9, 40, 73, 89, 148, 153, 89, 96, 22, 164, 150, 9, 170, 148, 33, 130, 101, 26, 166, 36, 129, 24, 133, 150, 166, 82, 64, 84, 38, 1, 153, 100, 165, 150, 134, 38, 145, 170, 170, 166, 9, 68, 129, 70, 97, 36, 38, 133, 150, 24, 132, 105, 150, 101, 64, 129, 153, 72, 32, 146, 66, 40, 22, 80, 80, 137, 153, 33, 80, 6, 101, 148, 102, 101, 100, 41, 162, 37, 24, 97, 168, 152, 66, 166, 74, 69, 169, 41, 1, 134, 85, 88, 89, 69, 17, 82, 154, 168, 21, 74, 24, 98, 36, 64, 166, 66, 66, 106, 134, 145, 152, 169, 10, 136, 84, 81, 90, 70, 96, 17, 134, 162, 169, 146, 162, 73, 148, 161, 64, 149, 134, 105, 134, 136, 18, 98, 129, 4, 170, 145, 32, 100, 128, 98, 20, 24, 9, 170, 132, 164, 164, 82, 17, 104, 154, 80, 86, 148, 8, 32, 170, 82, 134, 162, 104, 2, 137, 18, 25, 8, 6, 9, 149, 88, 169, 82, 165, 162, 81, 162, 89, 153, 26, 84, 104, 65, 68, 22, 129, 37, 105, 160, 134, 97, 73, 146, 129, 82, 161, 162, 128, 2, 169, 105, 106, 105, 41, 17, 22, 26, 97, 38, 164, 73, 168, 81, 105, 150, 69, 10, 165, 97, 70, 22, 106, 144, 70, 130, 22, 66, 86, 150, 168, 102, 38, 17, 4, 129, 153, 137, 170, 22, 105, 41, 153, 106, 85, 69, 38, 149, 22, 169, 106, 148, 136, 138, 80, 22, 38, 9, 98},
    {65, 146, 40, 98, 10, 84, 169, 0, 164, 70, 70, 16, 146, 70, 86, 154, 70, 40, 96, 86, 90, 106, 160, 17, 36, 88, 38, 144, 169, 102, 154, 1, 133, 40, 153, 146, 104, 0, 154, 154, 128, 1, 149, 8, 105, 8, 74, 150, 144, 1, 128, 162, 36, 9, 20, 104, 22, 169, 160, 24, 101, 84, 8, 160, 102, 105, 24, 146, 24, 82, 33, 148, 85, 22, 166, 169, 84, 37, 20, 166, 37, 69, 34, 134, 80, 70, 168, 16, 150, 153, 24, 36, 166, 82, 169, 148, 89, 164, 149, 36, 145, 33, 150, 24, 148, 166, 41, 138, 136, 136, 21, 146, 81, 25, 136, 66, 149, 146, 25, 86, 70, 33, 37, 166, 90, 73, 161, 164, 2, 73, 17, 144, 169, 34, 168, 40, 82, 137, 101, 33, 18, 104, 72, 90, 25, 84, 20, 40, 137, 150, 145, 32, 161, 153, 84, 97, 34, 132, 42, 137, 145, 134, 25, 97, 137, 41, 89, 90, 16, 166, 4, 22, 81, 106, 69, 153, 149, 145, 1, 100, 146, 98, 102, 69, 161, 6, 72, 96, 162, 152, 98, 37, 89, 97, 150, 73, 89, 97, 72, 84, 148, 36, 168, 85, 106, 161, 128, 134, 104, 8, 17, 169, 65, 144, 138, 138, 38, 145, 153, 165, 160, 9, 136, 37, 153, 128, 170, 6, 88, 161, 137, 137, 160, 134, 100, 86, 98, 98, 21, 102, 164, 148, 24, 137, 84, 134, 98, 41, 170, 8, 85, 10, 129, 101, 165, 85, 37, 86, 1, 34, 90, 80, 65, 74, 96, 9, 150, 86, 138, 102, 168, 64, 133, 149, 138, 149, 24, 101, 129, 104, 9, 165, 170, 149, 146, 33, 153, 86, 162, 42, 166, 101, 150, 4, 65, 166, 17, 88, 70, 85, 154, 69, 70, 146, 85, 152, 138, 21, 146, 101, 129, 70, 144, 18, 146, 66, 80, 89, 137, 86, 166, 149, 129, 20, 150, 128, 86, 165, 74, 100, 96, 34, 165, 81, 16, 5, 6, 128, 25, 102, 146, 32, 10, 101, 70, 161, 166, 153, 70, 69, 37, 97, 10, 130, 86, 105, 74, 72, 4, 153, 168, 26, 72, 100, 165, 80, 33, 81, 134, 101, 153, 6, 136, 137, 164, 6, 146, 4, 100, 169, 97, 65, 169, 150},
    {80, 146, 161, 146, 152, 16, 161, 38, 161, 34, 34, 134, 146, 130, 86, 70, 169, 4, 26, 166, 145, 40, 72, 98, 152, 96, 134, 80, 96, 148, 10, 90, 17, 100, 150, 25, 166, 100, 25, 105, 66, 162, 97, 80, 170, 21, 130, 145, 170, 149, 9, 132, 42, 41, 36, 148, 149, 100, 82, 66, 166, 88, 86, 18, 89, 90, 37, 73, 128, 42, 160, 106, 137, 98, 101, 72, 129, 137, 24, 164, 105, 129, 68, 154, 98, 82, 68, 9, 170, 153, 32, 102, 5, 38, 40, 153, 36, 21, 104, 132, 96, 97, 169, 138, 86, 130, 160, 41, 133, 102, 69, 65, 97, 137, 102, 128, 152, 0, 38, 26, 168, 164, 34, 162, 6, 164, 134, 25, 102, 36, 37, 137, 133, 164, 162, 146, 168, 98, 22, 134, 64, 138, 165, 88, 133, 64, 136, 169, 144, 82, 85, 69, 106, 162, 33, 41, 85, 168, 1, 164, 100, 138, 88, 152, 161, 16, 129, 133, 104, 134, 68, 106, 168, 10, 165, 102, 6, 97, 106, 34, 32, 101, 66, 98, 166, 25, 37, 74, 146, 100, 96, 2, 70, 149, 70, 170, 40, 169, 18, 16, 42, 96, 65, 97, 89, 146, 144, 82, 134, 25, 80, 170, 136, 136, 170, 154, 72, 26, 170, 145, 166, 154, 148, 17, 105, 101, 166, 102, 89, 164, 80, 18, 26, 106, 105, 40, 101, 86, 69, 33, 160, 149, 164, 37, 130, 68, 22, 9, 24, 34, 133, 24, 144, 153, 166, 168, 96, 152, 41, 1, 164, 100, 96, 90, 69, 98, 101, 74, 160, 42, 129, 106, 40, 16, 81, 25, 42, 102, 26, 72, 165, 154, 18, 133, 18, 100, 89, 168, 165, 38, 26, 146, 133, 101, 42, 149, 32, 97, 26, 162, 22, 129, 36, 33, 22, 5, 148, 89, 153, 149, 24, 129, 128, 105, 149, 86, 90, 5, 36, 165, 161, 149, 134, 5, 25, 166, 128, 145, 16, 169, 85, 160, 146, 165, 1, 66, 170, 104, 90, 32, 38, 169, 148, 6, 38, 101, 149, 90, 102, 41, 161, 152, 152, 130, 101, 132, 165, 96, 165, 22, 146, 86, 17, 38, 97, 70, 4, 101, 133, 74, 42, 102, 133, 18, 85, 154, 170, 105, 34, 146, 152, 82, 100, 69},
    {100, 18, 17, 106, 72, 104, 106, 4, 25, 1, 88, 37, 82, 10, 6, 25, 65, 134, 166, 84, 41, 146, 82, 86, 146, 41, 136, 41, 150, 162, 80, 6, 154, 170, 148, 41, 165, 86, 21, 104, 89, 90, 5, 149, 86, 80, 82, 90, 132, 162, 149, 97, 132, 134, 89, 145, 153, 152, 128, 1, 42, 40, 64, 166, 170, 129, 97, 25, 96, 89, 137, 81, 25, 170, 86, 40, 102, 5, 42, 104, 105, 20, 166, 70, 102, 152, 133, 90, 90, 86, 106, 164, 81, 166, 128, 38, 89, 86, 20, 65, 105, 96, 37, 132, 161, 17, 80, 5, 21, 128, 165, 105, 65, 89, 170, 154, 65, 148, 85, 154, 9, 97, 137, 16, 89, 132, 162, 40, 20, 97, 73, 148, 66, 74, 164, 90, 128, 161, 2, 65, 169, 0, 105, 33, 69, 168, 105, 160, 130, 9, 40, 24, 106, 105, 38, 105, 105, 82, 74, 37, 72, 162, 20, 169, 105, 88, 106, 22, 73, 152, 33, 97, 149, 145, 40, 97, 37, 169, 38, 152, 148, 138, 40, 4, 32, 17, 138, 149, 41, 88, 22, 102, 96, 37, 81, 162, 86, 8, 152, 136, 169, 16, 97, 38, 134, 80, 149, 100, 165, 98, 36, 22, 130, 69, 166, 89, 8, 85, 85, 165, 154, 169, 86, 100, 86, 21, 82, 106, 152, 102, 73, 96, 97, 2, 41, 88, 96, 17, 166, 70, 86, 18, 36, 85, 82, 66, 169, 129, 154, 74, 70, 73, 104, 16, 162, 81, 102, 154, 40, 102, 81, 152, 69, 90, 42, 96, 134, 137, 105, 136, 162, 169, 166, 20, 24, 168, 42, 10, 169, 21, 68, 73, 162, 5, 148, 32, 16, 17, 9, 105, 162, 80, 105, 162, 97, 166, 66, 162, 165, 165, 81, 136, 169, 70, 164, 70, 105, 26, 64, 70, 68, 32, 37, 137, 161, 21, 85, 82, 161, 8, 34, 145, 105, 136, 129, 89, 89, 128, 84, 150, 34, 34, 101, 26, 68, 98, 84, 22, 97, 150, 153, 4, 165, 65, 169, 152, 170, 88, 2, 162, 90, 98, 168, 144, 36, 165, 148, 152, 101, 165, 33, 82, 85, 34, 98, 134, 136, 69, 106, 6, 97, 73, 9, 5, 80, 146, 133, 37, 134, 10, 166, 37, 64, 88},
    {129, 90, 169, 102, 70, 89, 149, 84, 82, 168, 85, 129, 146, 149, 88, 81, 34, 97, 74, 40, 42, 133, 69, 16, 136, 162, 37, 89, 170, 150, 41, 150, 69, 32, 9, 40, 160, 66, 169, 102, 37, 5, 26, 129, 18, 100, 68, 162, 90, 33, 104, 96, 153, 129, 72, 68, 90, 32, 134, 5, 104, 25, 134, 152, 136, 82, 102, 138, 4, 89, 101, 98, 81, 85, 102, 160, 20, 36, 132, 89, 162, 164, 74, 9, 1, 165, 66, 25, 136, 21, 74, 9, 37, 5, 73, 98, 88, 134, 42, 100, 89, 34, 137, 89, 149, 21, 5, 160, 165, 133, 85, 146, 34, 90, 153, 33, 164, 145, 25, 133, 138, 84, 21, 85, 133, 102, 2, 85, 145, 166, 70, 36, 105, 21, 96, 89, 97, 26, 89, 153, 89, 128, 40, 149, 164, 102, 153, 138, 25, 65, 170, 168, 70, 104, 169, 84, 86, 36, 4, 9, 68, 88, 81, 25, 42, 102, 89, 21, 86, 161, 73, 165, 166, 170, 74, 41, 2, 86, 134, 102, 36, 165, 90, 105, 38, 41, 89, 154, 9, 146, 138, 68, 101, 153, 132, 9, 88, 41, 6, 106, 130, 86, 168, 82, 169, 149, 36, 149, 33, 150, 96, 0, 102, 97, 149, 101, 152, 168, 38, 85, 89, 22, 129, 128, 16, 85, 133, 137, 6, 33, 153, 84, 152, 168, 22, 153, 168, 133, 2, 146, 106, 96, 154, 106, 97, 148, 0, 70, 169, 138, 5, 137, 21, 73, 165, 0, 162, 66, 26, 65, 42, 38, 80, 82, 84, 64, 162, 138, 41, 149, 69, 101, 134, 150, 138, 69, 20, 74, 153, 81, 69, 80, 164, 132, 138, 22, 166, 80, 86, 38, 154, 8, 150, 97, 34, 170, 65, 145, 17, 148, 137, 81, 10, 152, 165, 134, 33, 90, 149, 144, 70, 88, 21, 85, 18, 153, 170, 105, 102, 136, 40, 153, 73, 36, 168, 164, 137, 6, 170, 150, 32, 20, 166, 69, 152, 10, 32, 40, 9, 149, 161, 72, 168, 162, 9, 5, 153, 165, 65, 98, 96, 73, 32, 33, 153, 40, 74, 82, 88, 69, 32, 64, 88, 38, 40, 64, 146, 24, 9, 86, 149, 42, 25, 25, 170, 170, 74, 74, 162, 96, 74, 82, 168, 153},
    {21, 1, 149, 133, 146, 149, 101, 22, 98, 150, 74, 73, 170, 10, 168, 105, 36, 160, 97, 81, 42, 34, 82, 90, 6, 20, 161, 130, 145, 169, 149, 81, 166, 70, 32, 85, 20, 41, 2, 166, 162, 149, 98, 148, 90, 144, 73, 74, 6, 154, 102, 150, 154, 40, 164, 37, 153, 146, 33, 89, 97, 69, 70, 144, 152, 153, 21, 18, 84, 68, 165, 145, 150, 138, 134, 85, 18, 106, 24, 170, 22, 153, 168, 21, 21, 100, 34, 90, 24, 170, 64, 98, 154, 106, 104, 149, 90, 154, 69, 80, 4, 130, 86, 9, 97, 74, 6, 144, 149, 128, 36, 26, 148, 129, 32, 85, 24, 150, 137, 82, 37, 170, 98, 69, 25, 2, 168, 24, 170, 166, 98, 26, 21, 97, 166, 2, 146, 69, 66, 138, 85, 81, 20, 165, 149, 145, 10, 32, 68, 97, 25, 70, 22, 37, 18, 84, 25, 101, 81, 170, 149, 10, 85, 70, 134, 70, 70, 90, 89, 70, 105, 88, 17, 154, 166, 90, 82, 42, 149, 74, 153, 36, 98, 137, 101, 1, 37, 68, 169, 2, 128, 65, 102, 65, 134, 150, 73, 1, 170, 4, 74, 42, 97, 69, 104, 80, 18, 65, 17, 152, 32, 4, 85, 144, 138, 9, 36, 162, 153, 153, 42, 166, 161, 74, 136, 38, 88, 165, 90, 105, 149, 164, 69, 40, 86, 138, 101, 86, 149, 80, 26, 148, 146, 21, 102, 134, 72, 89, 21, 36, 33, 164, 148, 65, 162, 80, 161, 89, 5, 84, 4, 97, 166, 102, 146, 8, 68, 32, 89, 16, 33, 102, 20, 137, 36, 22, 146, 1, 86, 69, 25, 68, 88, 72, 80, 146, 70, 168, 32, 165, 97, 168, 101, 100, 34, 32, 161, 42, 2, 130, 146, 134, 1, 102, 21, 165, 153, 70, 88, 25, 101, 1, 133, 18, 162, 24, 22, 138, 138, 133, 8, 25, 1, 166, 105, 1, 153, 90, 161, 169, 166, 97, 144, 70, 128, 149, 101, 1, 86, 153, 6, 40, 137, 86, 89, 154, 21, 146, 34, 154, 133, 105, 24, 4, 153, 10, 136, 42, 85, 102, 102, 153, 130, 166, 161, 1, 134, 170, 97, 40, 32, 101, 129, 133, 132, 170, 166, 16, 153, 138, 97, 144, 168, 10},
    {64, 86, 105, 69, 106, 86, 81, 41, 136, 102, 8, 149, 97, 37, 150, 165, 133, 41, 149, 42, 144, 153, 42, 18, 138, 154, 102, 36, 144, 73, 98, 42, 18, 154, 4, 168, 68, 90, 148, 82, 34, 146, 40, 153, 154, 66, 164, 105, 33, 136, 85, 166, 37, 72, 168, 149, 22, 32, 84, 6, 21, 145, 68, 149, 10, 164, 17, 65, 89, 102, 170, 102, 166, 166, 148, 145, 37, 165, 42, 102, 138, 21, 105, 1, 132, 70, 90, 130, 100, 81, 153, 90, 8, 133, 105, 74, 81, 165, 102, 20, 24, 38, 104, 164, 104, 84, 38, 85, 6, 69, 25, 97, 86, 16, 161, 89, 102, 104, 65, 21, 138, 21, 36, 98, 66, 72, 102, 33, 88, 42, 74, 5, 153, 102, 80, 88, 104, 160, 136, 68, 146, 38, 150, 150, 104, 34, 38, 101, 160, 145, 100, 130, 8, 1, 41, 5, 84, 34, 17, 32, 105, 10, 153, 18, 101, 166, 90, 69, 84, 96, 88, 105, 166, 102, 18, 153, 64, 130, 42, 41, 42, 169, 149, 153, 36, 2, 36, 150, 86, 18, 153, 82, 37, 70, 26, 0, 86, 96, 148, 82, 82, 72, 36, 136, 132, 104, 102, 73, 165, 105, 73, 100, 90, 65, 166, 100, 40, 166, 38, 66, 166, 16, 84, 129, 105, 154, 68, 73, 36, 102, 40, 17, 18, 152, 165, 0, 21, 101, 169, 37, 170, 129, 162, 129, 88, 72, 146, 105, 81, 9, 146, 149, 101, 97, 104, 22, 20, 18, 64, 5, 36, 80, 65, 105, 152, 153, 41, 25, 161, 152, 162, 170, 97, 38, 9, 88, 34, 146, 98, 9, 81, 81, 137, 66, 98, 136, 70, 97, 169, 146, 5, 73, 66, 90, 68, 164, 68, 148, 42, 130, 1, 168, 169, 166, 165, 105, 69, 32, 164, 6, 100, 164, 36, 21, 102, 2, 24, 32, 42, 129, 40, 160, 38, 98, 101, 105, 18, 4, 18, 105, 160, 73, 106, 97, 34, 153, 137, 5, 20, 150, 84, 32, 164, 104, 90, 2, 9, 149, 148, 106, 86, 130, 128, 130, 154, 105, 42, 129, 102, 100, 101, 138, 10, 169, 97, 90, 34, 85, 106, 150, 106, 21, 6, 134, 9, 166, 161, 149, 154, 69, 10, 24, 165, 97},
    {32, 105, 102, 97, 105, 154, 25, 100, 89, 73, 102, 153, 149, 105, 102, 101, 84, 36, 102, 90, 165, 85, 10, 65, 164, 22, 86, 24, 21, 42, 25, 169, 153, 98, 8, 90, 66, 154, 165, 86, 36, 130, 161, 149, 84, 65, 100, 41, 21, 40, 153, 68, 149, 41, 6, 149, 101, 85, 161, 154, 20, 20, 4, 164, 41, 4, 86, 42, 146, 89, 150, 133, 165, 100, 144, 73, 89, 2, 105, 0, 32, 65, 38, 6, 70, 168, 68, 73, 1, 160, 20, 154, 146, 21, 65, 32, 5, 152, 73, 4, 129, 17, 24, 85, 101, 98, 97, 20, 134, 145, 148, 104, 146, 132, 72, 37, 160, 153, 26, 145, 90, 166, 74, 166, 86, 16, 17, 105, 9, 6, 25, 80, 4, 149, 80, 106, 102, 148, 166, 86, 69, 82, 148, 26, 22, 86, 4, 162, 170, 97, 26, 169, 138, 2, 145, 146, 129, 5, 129, 72, 105, 144, 32, 153, 26, 72, 86, 85, 153, 162, 134, 85, 90, 66, 153, 96, 98, 26, 16, 85, 161, 21, 65, 36, 148, 22, 69, 96, 101, 169, 38, 37, 18, 66, 144, 98, 148, 36, 128, 100, 145, 146, 64, 148, 137, 25, 68, 97, 2, 65, 88, 164, 166, 64, 132, 70, 37, 132, 21, 74, 130, 164, 40, 160, 33, 137, 136, 106, 65, 18, 9, 145, 98, 24, 100, 168, 81, 153, 102, 4, 148, 150, 20, 164, 96, 90, 166, 149, 144, 138, 70, 24, 137, 40, 82, 73, 0, 42, 41, 146, 74, 149, 69, 100, 130, 169, 66, 80, 150, 170, 133, 162, 146, 38, 0, 152, 5, 164, 37, 88, 24, 149, 165, 169, 98, 153, 153, 17, 148, 128, 33, 105, 4, 22, 65, 68, 168, 98, 42, 149, 16, 162, 130, 165, 133, 24, 22, 106, 149, 64, 6, 145, 42, 65, 138, 105, 21, 80, 37, 17, 154, 101, 1, 69, 102, 134, 6, 96, 165, 169, 24, 133, 8, 150, 170, 104, 150, 101, 21, 98, 37, 168, 148, 169, 66, 168, 168, 73, 10, 64, 146, 165, 21, 130, 90, 89, 150, 86, 40, 82, 81, 162, 149, 86, 164, 148, 73, 165, 102, 26, 18, 16, 104, 149, 81, 169, 80, 5, 1, 149, 88, 81, 70, 72},
    {132, 66, 33, 85, 85, 162, 148, 16, 64, 89, 33, 90, 85, 10, 34, 70, 85, 25, 80, 133, 90, 105, 169, 22, 101, 152, 69, 130, 129, 68, 41, 88, 26, 41, 166, 85, 170, 148, 102, 89, 160, 137, 104, 150, 24, 169, 134, 154, 5, 144, 98, 24, 97, 33, 37, 0, 42, 166, 166, 152, 160, 169, 104, 25, 162, 36, 88, 17, 86, 169, 26, 136, 10, 170, 152, 164, 84, 34, 101, 22, 97, 100, 42, 64, 33, 73, 70, 64, 149, 134, 106, 134, 90, 82, 34, 166, 100, 40, 89, 22, 138, 169, 105, 105, 166, 154, 74, 144, 144, 130, 160, 42, 6, 136, 148, 150, 69, 74, 24, 84, 97, 24, 37, 164, 1, 133, 42, 148, 72, 86, 161, 144, 2, 138, 81, 88, 160, 100, 90, 106, 72, 68, 25, 80, 74, 21, 165, 9, 18, 0, 32, 97, 137, 104, 145, 90, 38, 166, 34, 22, 134, 85, 36, 68, 22, 84, 0, 164, 106, 90, 132, 164, 133, 102, 33, 153, 73, 21, 26, 66, 37, 145, 152, 18, 9, 84, 169, 105, 102, 84, 169, 86, 66, 24, 89, 101, 69, 42, 26, 42, 34, 17, 33, 100, 17, 69, 106, 150, 149, 89, 129, 145, 148, 41, 149, 149, 4, 65, 85, 134, 89, 22, 154, 68, 145, 160, 137, 169, 106, 37, 69, 148, 104, 152, 154, 137, 25, 85, 170, 41, 32, 73, 137, 20, 101, 146, 32, 16, 10, 169, 74, 86, 18, 81, 149, 34, 16, 165, 73, 97, 161, 72, 21, 105, 40, 85, 37, 170, 148, 138, 0, 24, 73, 105, 66, 20, 129, 9, 66, 149, 148, 42, 72, 86, 33, 96, 82, 40, 25, 133, 90, 84, 38, 133, 70, 104, 17, 64, 9, 170, 154, 128, 90, 1, 36, 138, 106, 148, 34, 64, 145, 26, 89, 101, 164, 152, 73, 25, 164, 101, 134, 40, 106, 162, 34, 68, 161, 164, 72, 5, 73, 16, 85, 144, 65, 145, 164, 160, 146, 32, 154, 102, 24, 134, 154, 149, 152, 97, 74, 41, 106, 130, 4, 9, 6, 154, 144, 152, 32, 134, 42, 68, 134, 81, 132, 66, 104, 82, 164, 20, 89, 9, 134, 36, 72, 85, 37, 41, 133, 168, 98, 100, 68, 42},
    {89, 85, 166, 138, 154, 81, 17, 150, 86, 149, 9, 153, 84, 134, 164, 146, 6, 68, 132, 25, 21, 97, 161, 134, 101, 42, 161, 133, 65, 41, 100, 169, 170, 106, 136, 42, 162, 41, 36, 166, 6, 16, 84, 84, 150, 168, 24, 36, 132, 32, 18, 70, 149, 90, 133, 134, 97, 89, 145, 162, 17, 161, 1, 0, 152, 38, 166, 34, 80, 104, 1, 5, 149, 88, 168, 104, 160, 84, 168, 22, 38, 18, 136, 161, 82, 10, 42, 138, 70, 38, 152, 90, 90, 144, 106, 4, 84, 10, 26, 137, 86, 42, 40, 150, 41, 166, 102, 162, 82, 5, 105, 34, 161, 9, 101, 102, 20, 69, 164, 104, 25, 101, 105, 138, 138, 96, 20, 72, 146, 104, 69, 169, 9, 168, 86, 153, 161, 36, 65, 84, 86, 168, 168, 96, 148, 38, 138, 138, 101, 85, 81, 26, 70, 21, 154, 161, 89, 145, 137, 168, 148, 86, 104, 97, 105, 90, 20, 130, 169, 80, 137, 24, 100, 16, 153, 10, 89, 102, 102, 73, 150, 98, 106, 81, 133, 137, 136, 169, 133, 105, 138, 134, 25, 134, 164, 165, 104, 32, 153, 64, 69, 82, 20, 66, 154, 105, 36, 5, 36, 132, 88, 170, 105, 164, 136, 130, 86, 144, 146, 8, 165, 34, 24, 66, 150, 5, 161, 102, 105, 154, 149, 130, 96, 150, 4, 145, 162, 26, 101, 40, 69, 98, 0, 34, 88, 38, 100, 26, 17, 162, 137, 150, 105, 161, 20, 148, 90, 101, 149, 134, 90, 18, 100, 104, 101, 132, 16, 16, 20, 0, 18, 168, 165, 128, 9, 100, 130, 153, 21, 73, 80, 89, 102, 133, 137, 65, 144, 149, 70, 106, 85, 36, 132, 136, 40, 146, 9, 165, 100, 6, 148, 82, 165, 41, 86, 129, 18, 4, 34, 146, 17, 25, 105, 165, 150, 70, 98, 104, 101, 132, 153, 105, 21, 38, 104, 86, 164, 160, 166, 90, 81, 70, 145, 166, 160, 26, 90, 129, 24, 100, 160, 65, 2, 25, 86, 162, 98, 168, 104, 97, 165, 64, 153, 96, 9, 97, 164, 166, 137, 102, 149, 22, 24, 9, 73, 149, 161, 73, 133, 102, 86, 41, 0, 129, 132, 90, 65, 100, 66, 84, 165, 86, 10, 24},
    {164, 165, 26, 82, 66, 146, 69, 149, 32, 38, 20, 166, 169, 80, 70, 134, 26, 34, 169, 4, 134, 162, 73, 154, 146, 82, 85, 128, 166, 24, 96, 80, 18, 132, 134, 8, 98, 68, 150, 89, 22, 160, 26, 33, 26, 33, 89, 161, 132, 98, 170, 10, 21, 105, 150, 150, 150, 38, 40, 170, 82, 42, 37, 161, 90, 154, 154, 8, 165, 128, 38, 130, 134, 105, 88, 169, 38, 160, 81, 166, 26, 66, 34, 65, 101, 89, 9, 82, 9, 170, 132, 18, 105, 41, 128, 136, 134, 132, 68, 69, 149, 102, 25, 149, 104, 128, 65, 154, 164, 170, 8, 132, 144, 166, 42, 85, 149, 137, 102, 41, 33, 96, 96, 153, 36, 153, 101, 90, 34, 161, 138, 149, 170, 168, 105, 130, 2, 160, 137, 102, 10, 20, 86, 90, 149, 85, 10, 40, 41, 128, 17, 128, 86, 2, 97, 98, 148, 65, 90, 164, 98, 105, 84, 97, 146, 144, 82, 161, 73, 84, 18, 89, 73, 25, 160, 72, 137, 32, 105, 168, 89, 42, 90, 149, 106, 102, 165, 26, 166, 90, 73, 16, 161, 162, 18, 104, 169, 98, 6, 168, 168, 89, 100, 98, 161, 149, 134, 88, 98, 90, 86, 41, 41, 104, 68, 105, 36, 90, 86, 166, 80, 165, 165, 22, 2, 1, 69, 106, 144, 37, 149, 42, 40, 25, 169, 6, 34, 169, 101, 152, 102, 150, 106, 130, 104, 84, 84, 154, 165, 82, 132, 170, 25, 41, 1, 160, 82, 69, 21, 80, 37, 138, 153, 100, 66, 106, 133, 166, 105, 65, 32, 73, 89, 20, 21, 73, 101, 65, 81, 5, 68, 161, 2, 104, 81, 101, 168, 38, 138, 106, 150, 20, 24, 21, 74, 137, 149, 80, 152, 166, 146, 102, 166, 22, 136, 65, 81, 146, 134, 34, 88, 5, 25, 86, 85, 34, 21, 86, 144, 150, 36, 102, 162, 144, 5, 154, 85, 73, 64, 149, 89, 165, 149, 89, 69, 74, 84, 164, 145, 97, 138, 150, 161, 165, 129, 150, 90, 138, 153, 64, 144, 101, 65, 69, 169, 102, 154, 84, 168, 20, 96, 8, 166, 154, 68, 22, 89, 170, 146, 128, 34, 132, 132, 128, 137, 164, 145, 154, 105, 65, 85, 164, 128, 18},
    {68, 136, 41, 101, 33, 86, 105, 136, 154, 22, 16, 24, 134, 69, 101, 137, 145, 74, 18, 38, 105, 132, 160, 37, 136, 104, 150, 85, 128, 162, 132, 145, 102, 42, 145, 18, 98, 161, 168, 104, 138, 100, 165, 104, 81, 102, 97, 0, 64, 97, 96, 132, 70, 4, 162, 169, 65, 74, 68, 85, 32, 88, 138, 106, 150, 68, 96, 101, 154, 82, 152, 169, 81, 89, 20, 102, 65, 18, 65, 42, 168, 153, 137, 129, 97, 154, 42, 129, 168, 166, 137, 73, 166, 22, 166, 34, 81, 160, 154, 69, 100, 81, 153, 137, 164, 132, 17, 136, 21, 42, 161, 164, 6, 85, 86, 66, 133, 70, 134, 144, 26, 85, 129, 42, 85, 106, 146, 64, 36, 18, 37, 132, 0, 130, 82, 85, 134, 130, 148, 42, 24, 66, 154, 106, 149, 160, 20, 65, 168, 9, 0, 81, 72, 22, 33, 69, 32, 150, 165, 166, 161, 136, 169, 130, 22, 134, 84, 105, 149, 90, 69, 101, 137, 41, 146, 2, 149, 138, 162, 106, 168, 34, 89, 65, 150, 89, 80, 17, 133, 68, 82, 24, 2, 22, 168, 153, 0, 154, 89, 20, 88, 148, 36, 104, 25, 9, 136, 144, 161, 85, 97, 10, 106, 5, 166, 84, 146, 101, 9, 104, 38, 161, 150, 41, 145, 165, 69, 6, 36, 86, 132, 22, 137, 152, 85, 97, 160, 169, 96, 20, 21, 102, 134, 20, 82, 166, 37, 169, 134, 145, 132, 22, 74, 26, 100, 132, 68, 106, 128, 166, 42, 162, 162, 85, 98, 81, 133, 82, 102, 5, 20, 5, 8, 137, 82, 144, 37, 86, 86, 166, 16, 149, 72, 37, 165, 40, 64, 38, 82, 106, 9, 4, 74, 168, 69, 84, 21, 136, 145, 37, 70, 168, 36, 85, 106, 160, 146, 37, 105, 134, 80, 85, 149, 105, 170, 137, 165, 168, 86, 86, 18, 24, 69, 96, 144, 42, 18, 6, 72, 153, 88, 82, 40, 24, 17, 81, 20, 148, 25, 9, 165, 165, 138, 90, 38, 100, 42, 81, 70, 2, 149, 81, 89, 128, 137, 90, 36, 34, 70, 104, 150, 160, 97, 16, 100, 166, 102, 89, 17, 42, 134, 17, 102, 1, 154, 86, 25, 89, 105, 106, 105, 32, 38, 17},
    {70, 89, 148, 100, 168, 0, 144, 169, 169, 162, 6, 9, 166, 84, 82, 16, 16, 104, 166, 86, 138, 170, 69, 24, 42, 21, 38, 33, 150, 102, 128, 162, 5, 154, 98, 37, 169, 84, 73, 42, 84, 26, 144, 8, 9, 150, 160, 18, 85, 137, 137, 88, 72, 133, 136, 150, 165, 34, 168, 138, 34, 64, 129, 106, 37, 166, 136, 90, 89, 102, 69, 150, 86, 164, 90, 85, 22, 65, 22, 162, 37, 86, 70, 98, 69, 74, 166, 169, 17, 66, 6, 69, 72, 104, 169, 86, 153, 106, 150, 90, 85, 9, 132, 82, 148, 41, 82, 80, 148, 137, 88, 146, 148, 129, 152, 89, 160, 149, 4, 145, 74, 37, 41, 24, 84, 82, 145, 86, 73, 162, 146, 162, 133, 154, 66, 105, 2, 33, 169, 69, 100, 10, 153, 68, 102, 68, 150, 133, 32, 74, 85, 170, 149, 6, 165, 105, 102, 90, 90, 66, 154, 9, 86, 105, 169, 26, 85, 40, 20, 65, 37, 102, 81, 100, 148, 34, 162, 22, 18, 34, 73, 64, 72, 22, 70, 21, 150, 73, 101, 5, 41, 169, 169, 17, 86, 168, 40, 153, 164, 161, 162, 89, 169, 0, 138, 129, 100, 165, 84, 146, 66, 152, 82, 137, 40, 98, 38, 85, 42, 69, 33, 86, 148, 84, 129, 152, 40, 85, 165, 102, 88, 70, 38, 26, 168, 138, 101, 42, 26, 134, 72, 90, 134, 153, 84, 33, 42, 38, 17, 161, 137, 100, 129, 72, 18, 2, 5, 2, 144, 153, 134, 68, 42, 169, 169, 22, 106, 86, 98, 72, 68, 88, 0, 170, 5, 42, 169, 166, 144, 88, 150, 89, 65, 81, 137, 42, 162, 24, 16, 165, 165, 26, 81, 168, 41, 81, 21, 17, 38, 101, 1, 64, 150, 41, 25, 84, 105, 170, 89, 106, 5, 130, 9, 166, 128, 65, 153, 105, 97, 21, 130, 153, 89, 4, 130, 169, 154, 88, 0, 102, 166, 105, 22, 153, 26, 130, 86, 42, 21, 101, 37, 138, 133, 170, 89, 6, 129, 9, 1, 137, 74, 10, 69, 154, 36, 64, 134, 150, 132, 84, 70, 84, 85, 80, 97, 89, 165, 105, 164, 5, 88, 36, 20, 98, 72, 80, 96, 132, 97, 41, 164, 104, 160, 0},
    {42, 21, 0, 101, 25, 97, 25, 84, 4, 166, 166, 10, 33, 152, 104, 150, 18, 165, 148, 9, 134, 101, 169, 154, 73, 38, 20, 24, 98, 106, 18, 130, 137, 164, 81, 33, 96, 18, 70, 4, 70, 170, 10, 65, 89, 8, 33, 33, 37, 6, 20, 150, 136, 90, 153, 18, 72, 136, 65, 70, 25, 38, 101, 85, 9, 8, 72, 130, 73, 2, 105, 86, 168, 153, 26, 102, 150, 41, 102, 166, 41, 6, 152, 101, 88, 149, 64, 106, 21, 66, 150, 1, 9, 25, 69, 32, 38, 41, 72, 0, 145, 165, 170, 165, 66, 138, 165, 106, 152, 168, 80, 150, 170, 168, 160, 86, 169, 66, 26, 89, 160, 130, 0, 137, 16, 80, 1, 166, 132, 89, 166, 17, 42, 42, 86, 101, 169, 148, 132, 132, 145, 98, 86, 166, 41, 154, 144, 152, 137, 101, 164, 148, 33, 37, 18, 149, 154, 104, 26, 168, 101, 37, 106, 26, 25, 38, 153, 154, 162, 42, 150, 40, 90, 149, 24, 149, 88, 148, 132, 88, 144, 81, 86, 162, 37, 136, 22, 18, 98, 69, 104, 34, 85, 74, 40, 17, 153, 149, 1, 137, 17, 85, 86, 149, 89, 149, 165, 73, 20, 41, 33, 101, 170, 150, 68, 40, 130, 153, 145, 5, 148, 101, 20, 152, 168, 154, 144, 21, 153, 40, 74, 100, 16, 134, 136, 152, 153, 100, 100, 85, 170, 106, 150, 137, 16, 84, 170, 165, 134, 5, 85, 106, 17, 169, 17, 1, 90, 36, 89, 129, 98, 89, 64, 89, 164, 128, 162, 81, 168, 145, 88, 152, 22, 80, 8, 169, 149, 149, 146, 150, 68, 5, 154, 98, 80, 132, 164, 100, 90, 85, 5, 98, 154, 0, 166, 41, 17, 1, 66, 66, 26, 161, 138, 25, 24, 70, 73, 134, 64, 166, 10, 145, 81, 128, 74, 98, 153, 68, 37, 34, 138, 102, 81, 36, 38, 134, 170, 37, 66, 41, 68, 89, 74, 26, 133, 101, 37, 101, 153, 136, 136, 148, 69, 105, 161, 70, 102, 130, 17, 21, 129, 168, 136, 18, 100, 85, 170, 100, 136, 168, 160, 152, 152, 65, 38, 72, 102, 89, 100, 22, 152, 105, 162, 100, 101, 88, 85, 80, 100, 101, 24, 106, 106, 98},
    {9, 154, 66, 65, 82, 154, 106, 149, 20, 90, 66, 137, 102, 24, 134, 164, 81, 82, 82, 169, 100, 21, 169, 165, 32, 21, 18, 82, 89, 133, 70, 74, 85, 164, 85, 73, 89, 150, 102, 68, 89, 133, 69, 144, 81, 104, 169, 161, 16, 128, 84, 82, 148, 66, 106, 26, 106, 72, 68, 104, 98, 41, 26, 9, 66, 86, 0, 144, 153, 106, 149, 152, 82, 166, 65, 132, 154, 169, 96, 134, 72, 66, 42, 70, 6, 132, 41, 165, 133, 90, 153, 0, 34, 148, 81, 88, 166, 101, 104, 10, 96, 74, 65, 86, 74, 73, 154, 88, 17, 32, 145, 89, 153, 102, 41, 38, 170, 74, 6, 166, 153, 148, 162, 6, 70, 21, 34, 153, 16, 88, 41, 149, 5, 101, 66, 101, 148, 145, 33, 84, 148, 21, 146, 4, 37, 5, 160, 26, 26, 169, 102, 105, 41, 9, 132, 160, 33, 166, 166, 81, 128, 36, 2, 98, 8, 146, 80, 69, 162, 88, 40, 166, 22, 64, 82, 152, 106, 169, 102, 106, 104, 129, 161, 98, 37, 128, 89, 74, 98, 164, 101, 70, 74, 161, 4, 9, 130, 101, 97, 150, 165, 21, 41, 154, 145, 106, 90, 70, 130, 154, 72, 160, 73, 4, 65, 37, 72, 96, 152, 137, 21, 4, 137, 42, 81, 137, 102, 80, 169, 1, 164, 145, 164, 101, 130, 84, 164, 152, 90, 132, 170, 145, 2, 10, 85, 64, 164, 9, 69, 22, 73, 25, 146, 128, 104, 169, 145, 73, 9, 72, 82, 81, 18, 73, 86, 160, 74, 90, 90, 137, 73, 128, 16, 98, 16, 146, 70, 82, 150, 72, 25, 161, 162, 148, 68, 146, 69, 82, 89, 4, 138, 86, 164, 154, 170, 70, 149, 104, 80, 132, 42, 81, 154, 136, 106, 5, 85, 165, 2, 102, 149, 166, 150, 133, 88, 72, 9, 149, 170, 90, 85, 20, 170, 74, 68, 5, 73, 85, 38, 37, 96, 6, 164, 154, 68, 25, 20, 22, 149, 161, 2, 98, 80, 146, 102, 146, 101, 9, 149, 149, 134, 165, 25, 165, 129, 165, 146, 25, 152, 97, 128, 106, 74, 8, 164, 134, 73, 17, 136, 100, 154, 2, 169, 138, 105, 137, 34, 26, 166, 38, 160, 166, 145, 40},
    {153, 9, 168, 138, 85, 153, 38, 82, 34, 90, 17, 102, 154, 160, 85, 138, 10, 154, 16, 152, 133, 86, 70, 85, 104, 90, 97, 69, 100, 104, 144, 81, 97, 90, 41, 69, 133, 84, 168, 150, 168, 38, 86, 84, 106, 153, 96, 148, 144, 74, 80, 22, 82, 102, 170, 153, 105, 145, 166, 89, 26, 148, 84, 34, 170, 145, 84, 5, 6, 165, 69, 2, 38, 88, 165, 82, 72, 149, 101, 85, 42, 9, 97, 81, 89, 129, 22, 152, 100, 18, 106, 86, 69, 84, 105, 98, 18, 133, 137, 42, 104, 144, 168, 38, 154, 145, 70, 69, 42, 41, 149, 130, 85, 136, 153, 40, 36, 89, 153, 74, 145, 22, 145, 2, 10, 166, 69, 81, 149, 33, 132, 98, 106, 20, 130, 38, 34, 136, 74, 144, 82, 145, 40, 1, 164, 137, 102, 150, 168, 153, 165, 98, 136, 100, 42, 16, 81, 128, 5, 166, 106, 84, 160, 106, 149, 89, 68, 69, 165, 162, 22, 90, 36, 74, 41, 144, 0, 149, 105, 97, 86, 88, 82, 154, 150, 168, 160, 170, 97, 137, 64, 146, 69, 170, 26, 82, 20, 40, 101, 145, 102, 133, 80, 153, 101, 89, 2, 82, 105, 148, 104, 34, 88, 82, 145, 160, 22, 166, 136, 165, 81, 133, 24, 164, 66, 165, 166, 146, 25, 162, 150, 64, 73, 162, 152, 106, 170, 17, 90, 138, 154, 106, 152, 153, 106, 16, 164, 69, 89, 70, 102, 0, 70, 105, 82, 86, 9, 145, 8, 9, 66, 146, 133, 130, 169, 134, 134, 106, 85, 134, 98, 166, 160, 86, 152, 102, 153, 72, 74, 154, 170, 21, 8, 150, 134, 153, 101, 168, 153, 41, 41, 170, 129, 169, 4, 134, 8, 9, 81, 166, 168, 25, 33, 138, 42, 36, 134, 153, 4, 166, 72, 69, 138, 100, 18, 100, 4, 105, 21, 2, 86, 170, 22, 42, 160, 42, 154, 85, 165, 97, 38, 10, 85, 90, 20, 161, 40, 164, 161, 145, 70, 36, 128, 85, 136, 97, 2, 146, 149, 40, 150, 136, 16, 69, 90, 96, 162, 154, 64, 86, 64, 150, 21, 133, 25, 153, 81, 90, 8, 105, 90, 90, 130, 82, 169, 25, 96, 169, 169, 73, 86, 24, 68, 68},
    {41, 81, 22, 6, 101, 33, 148, 33, 84, 90, 90, 74, 72, 149, 1, 6, 21, 101, 149, 34, 18, 145, 166, 88, 1, 22, 73, 104, 84, 105, 9, 160, 152, 70, 101, 130, 24, 41, 72, 166, 146, 88, 85, 82, 149, 106, 170, 24, 150, 153, 100, 170, 96, 41, 84, 17, 6, 128, 144, 22, 69, 64, 150, 153, 8, 81, 22, 138, 104, 6, 84, 2, 90, 37, 21, 100, 26, 162, 84, 68, 138, 166, 102, 106, 101, 40, 101, 160, 145, 90, 146, 41, 41, 161, 20, 72, 82, 152, 150, 145, 10, 90, 21, 32, 88, 96, 2, 132, 74, 34, 161, 136, 102, 150, 166, 82, 66, 86, 70, 34, 5, 41, 21, 25, 106, 86, 165, 148, 18, 42, 146, 146, 68, 26, 153, 32, 170, 148, 165, 90, 154, 66, 146, 22, 166, 98, 154, 129, 21, 6, 22, 16, 150, 70, 160, 152, 104, 69, 72, 20, 105, 16, 106, 4, 68, 70, 148, 104, 153, 6, 160, 170, 89, 169, 21, 162, 20, 130, 88, 100, 89, 82, 149, 168, 88, 164, 17, 166, 101, 138, 74, 106, 154, 4, 106, 40, 80, 9, 149, 162, 6, 165, 134, 146, 137, 84, 90, 100, 150, 41, 4, 89, 106, 25, 5, 96, 137, 90, 149, 2, 169, 136, 152, 146, 146, 149, 162, 20, 74, 86, 97, 24, 37, 137, 89, 10, 169, 89, 137, 26, 64, 82, 150, 86, 85, 166, 164, 164, 153, 128, 153, 101, 148, 70, 73, 154, 25, 160, 5, 21, 146, 26, 98, 136, 90, 37, 25, 70, 168, 17, 21, 130, 166, 5, 4, 132, 41, 160, 164, 161, 38, 5, 16, 72, 42, 18, 160, 153, 86, 20, 21, 1, 74, 138, 25, 169, 105, 132, 169, 152, 138, 148, 144, 0, 80, 144, 154, 138, 74, 69, 166, 149, 72, 168, 169, 70, 16, 98, 33, 162, 70, 100, 136, 2, 149, 105, 26, 9, 8, 165, 136, 152, 37, 144, 89, 85, 32, 169, 85, 105, 84, 0, 90, 65, 106, 148, 101, 65, 168, 146, 9, 149, 41, 26, 25, 22, 88, 146, 133, 168, 102, 33, 89, 37, 2, 40, 8, 138, 105, 86, 22, 86, 132, 101, 66, 9, 41, 130, 85, 148, 165, 80, 137, 1},
    {84, 65, 85, 22, 104, 6, 145, 22, 37, 165, 90, 102, 36, 160, 149, 170, 10, 132, 170, 90, 145, 34, 10, 88, 164, 90, 89, 42, 104, 133, 9, 42, 74, 145, 81, 74, 73, 21, 69, 42, 90, 85, 168, 69, 85, 25, 8, 98, 106, 36, 137, 88, 145, 170, 82, 169, 85, 97, 38, 106, 33, 82, 82, 86, 86, 146, 105, 169, 169, 138, 144, 153, 130, 148, 66, 86, 150, 25, 6, 25, 34, 72, 133, 70, 152, 106, 80, 152, 164, 34, 145, 82, 165, 21, 169, 9, 90, 101, 146, 162, 21, 34, 145, 150, 100, 144, 66, 85, 1, 104, 32, 144, 162, 5, 170, 106, 168, 86, 40, 70, 84, 22, 166, 98, 146, 105, 68, 145, 161, 106, 90, 102, 17, 42, 149, 88, 90, 8, 168, 64, 85, 133, 97, 65, 17, 82, 168, 153, 134, 5, 42, 160, 105, 37, 16, 25, 96, 90, 161, 82, 102, 36, 66, 4, 88, 106, 89, 106, 69, 150, 133, 153, 66, 84, 97, 153, 38, 100, 84, 41, 161, 89, 85, 101, 4, 170, 10, 165, 148, 68, 134, 9, 88, 98, 154, 22, 148, 166, 168, 9, 37, 166, 105, 82, 144, 166, 150, 10, 104, 137, 169, 137, 164, 64, 20, 145, 10, 129, 18, 65, 162, 32, 153, 165, 170, 37, 4, 81, 74, 102, 164, 106, 152, 18, 17, 6, 84, 82, 102, 10, 150, 149, 26, 73, 8, 150, 145, 85, 70, 164, 22, 68, 136, 153, 89, 36, 81, 104, 68, 148, 42, 22, 160, 138, 5, 145, 134, 80, 154, 36, 72, 22, 68, 169, 130, 34, 168, 136, 152, 34, 90, 24, 17, 24, 165, 133, 101, 169, 85, 69, 162, 164, 24, 148, 133, 96, 138, 81, 17, 65, 73, 70, 22, 26, 36, 80, 80, 170, 138, 26, 154, 137, 90, 85, 86, 102, 81, 153, 166, 101, 86, 166, 137, 81, 160, 168, 98, 73, 73, 149, 74, 33, 138, 73, 69, 1, 36, 32, 1, 85, 5, 66, 26, 42, 149, 0, 98, 38, 16, 34, 96, 105, 170, 148, 90, 72, 21, 134, 80, 89, 85, 133, 170, 134, 150, 137, 166, 104, 134, 164, 84, 149, 36, 17, 70, 18, 150, 85, 85, 137, 133, 97, 82, 74},
    {106, 1, 168, 148, 130, 137, 100, 73, 66, 1, 42, 70, 22, 160, 82, 88, 166, 86, 6, 162, 137, 165, 100, 73, 38, 90, 132, 41, 42, 74, 137, 153, 152, 18, 32, 97, 100, 170, 146, 20, 18, 40, 98, 98, 70, 22, 70, 2, 150, 153, 100, 133, 144, 38, 8, 34, 169, 74, 68, 136, 38, 72, 32, 5, 74, 20, 89, 40, 4, 8, 104, 34, 90, 105, 149, 69, 26, 149, 137, 102, 82, 34, 10, 169, 90, 4, 6, 26, 165, 162, 74, 106, 20, 69, 81, 106, 89, 104, 80, 153, 18, 22, 104, 154, 68, 88, 70, 102, 38, 128, 40, 153, 100, 97, 21, 153, 154, 16, 69, 9, 25, 101, 132, 84, 132, 86, 101, 80, 22, 102, 153, 34, 153, 137, 37, 40, 166, 162, 133, 69, 98, 85, 166, 21, 88, 85, 104, 102, 21, 22, 105, 162, 22, 133, 82, 149, 161, 150, 102, 148, 170, 85, 106, 24, 129, 22, 66, 72, 81, 69, 42, 145, 160, 22, 84, 40, 98, 153, 41, 72, 148, 130, 102, 154, 21, 132, 104, 25, 84, 34, 8, 18, 145, 165, 86, 34, 88, 101, 73, 1, 133, 17, 20, 137, 102, 145, 100, 89, 149, 152, 82, 102, 70, 137, 64, 72, 166, 170, 72, 149, 81, 101, 6, 4, 90, 165, 33, 166, 74, 22, 129, 102, 144, 134, 38, 105, 102, 130, 105, 42, 82, 65, 170, 18, 90, 84, 89, 102, 81, 146, 129, 102, 74, 161, 6, 32, 98, 90, 20, 160, 38, 86, 21, 89, 97, 160, 26, 105, 145, 5, 84, 106, 5, 170, 104, 66, 42, 148, 89, 90, 150, 136, 81, 85, 90, 129, 137, 41, 161, 101, 70, 37, 32, 22, 37, 84, 154, 24, 25, 74, 20, 165, 101, 144, 42, 105, 84, 90, 168, 106, 25, 68, 166, 88, 32, 86, 0, 69, 129, 132, 148, 104, 38, 150, 41, 169, 24, 98, 136, 161, 132, 5, 25, 98, 26, 82, 86, 96, 102, 90, 102, 137, 20, 168, 169, 150, 154, 72, 24, 101, 32, 17, 102, 90, 136, 101, 137, 4, 137, 73, 84, 149, 162, 17, 166, 136, 101, 130, 1, 26, 146, 166, 137, 154, 70, 144, 138, 20, 38, 42, 20, 82, 165, 128},
    {153, 17, 104, 10, 144, 22, 18, 22, 101, 166, 168, 89, 38, 21, 89, 24, 16, 9, 4, 104, 4, 89, 134, 85, 82, 164, 161, 145, 138, 105, 145, 150, 149, 80, 85, 10, 161, 10, 162, 153, 100, 97, 84, 149, 149, 161, 41, 26, 132, 70, 105, 89, 101, 106, 98, 72, 134, 145, 37, 37, 65, 160, 168, 70, 100, 162, 41, 0, 2, 132, 16, 26, 145, 149, 169, 133, 81, 105, 136, 150, 154, 37, 42, 72, 132, 33, 105, 26, 18, 38, 5, 149, 8, 32, 106, 21, 26, 136, 68, 85, 166, 6, 25, 80, 101, 38, 138, 130, 134, 40, 97, 82, 166, 148, 169, 9, 66, 37, 161, 18, 138, 138, 72, 6, 149, 153, 97, 137, 66, 89, 105, 80, 68, 36, 25, 33, 2, 105, 69, 169, 144, 168, 73, 170, 150, 152, 24, 88, 129, 105, 160, 26, 10, 37, 150, 130, 9, 164, 148, 18, 22, 82, 132, 133, 137, 168, 90, 82, 82, 165, 80, 154, 154, 6, 145, 41, 82, 97, 90, 104, 106, 8, 170, 26, 160, 164, 160, 106, 102, 170, 148, 66, 90, 10, 38, 138, 16, 10, 161, 129, 153, 18, 100, 98, 81, 0, 101, 150, 137, 146, 148, 166, 166, 25, 85, 40, 65, 86, 82, 24, 65, 0, 168, 101, 17, 70, 101, 41, 21, 68, 138, 32, 33, 138, 84, 166, 81, 148, 88, 74, 26, 4, 137, 166, 65, 72, 66, 145, 74, 4, 88, 169, 6, 105, 2, 74, 169, 20, 86, 106, 154, 26, 105, 137, 165, 8, 86, 8, 24, 89, 146, 106, 100, 22, 36, 65, 84, 36, 42, 69, 88, 81, 100, 85, 168, 65, 154, 8, 38, 164, 22, 105, 133, 168, 1, 145, 81, 10, 66, 9, 168, 137, 26, 68, 150, 17, 137, 134, 21, 89, 162, 130, 166, 90, 2, 162, 9, 153, 4, 138, 170, 69, 18, 150, 149, 170, 160, 68, 102, 81, 170, 128, 101, 36, 150, 170, 148, 2, 149, 169, 2, 89, 160, 37, 22, 132, 73, 166, 81, 25, 4, 166, 148, 153, 17, 168, 90, 134, 153, 145, 169, 146, 133, 89, 106, 129, 134, 37, 18, 85, 132, 162, 161, 18, 38, 104, 88, 36, 22, 22, 72, 74, 137, 84},
    {100, 130, 73, 0, 86, 149, 98, 152, 18, 150, 86, 165, 170, 36, 34, 69, 10, 18, 21, 145, 132, 105, 105, 25, 66, 21, 41, 145, 138, 42, 130, 9, 68, 20, 37, 8, 37, 36, 162, 85, 82, 137, 22, 33, 89, 104, 41, 80, 96, 136, 100, 169, 146, 166, 168, 166, 170, 32, 168, 81, 164, 148, 24, 150, 150, 162, 89, 20, 162, 106, 96, 73, 153, 150, 165, 101, 133, 170, 72, 42, 90, 96, 70, 24, 169, 150, 38, 33, 24, 104, 150, 84, 162, 169, 74, 130, 72, 138, 161, 100, 9, 153, 149, 168, 101, 130, 81, 168, 98, 20, 166, 20, 161, 164, 8, 89, 20, 41, 32, 137, 65, 149, 170, 102, 33, 148, 73, 9, 66, 153, 128, 169, 170, 9, 101, 153, 144, 73, 17, 129, 73, 73, 162, 86, 104, 16, 96, 38, 149, 161, 130, 133, 149, 169, 168, 106, 165, 102, 100, 6, 86, 96, 144, 170, 166, 137, 101, 82, 85, 90, 134, 32, 168, 89, 42, 9, 153, 64, 129, 68, 146, 89, 85, 101, 104, 150, 9, 88, 80, 105, 1, 101, 25, 66, 86, 89, 101, 165, 138, 5, 97, 98, 165, 26, 166, 26, 73, 70, 129, 88, 101, 104, 22, 128, 101, 72, 100, 18, 32, 24, 6, 81, 104, 170, 82, 168, 25, 42, 165, 101, 146, 10, 137, 84, 153, 137, 100, 4, 100, 90, 97, 153, 152, 170, 98, 138, 72, 8, 150, 101, 74, 102, 154, 9, 138, 97, 97, 130, 26, 149, 21, 70, 137, 149, 148, 5, 22, 65, 102, 149, 70, 81, 89, 146, 80, 82, 154, 165, 130, 104, 72, 69, 68, 0, 138, 8, 70, 164, 104, 5, 102, 130, 36, 32, 138, 160, 146, 148, 90, 10, 149, 161, 169, 170, 22, 138, 152, 154, 84, 20, 166, 170, 26, 106, 138, 2, 137, 150, 32, 97, 0, 170, 74, 97, 166, 134, 8, 150, 154, 102, 153, 101, 82, 89, 154, 74, 104, 6, 2, 146, 80, 36, 69, 169, 90, 98, 82, 150, 89, 80, 150, 165, 166, 150, 138, 37, 168, 137, 170, 64, 34, 144, 153, 1, 138, 160, 150, 41, 164, 96, 168, 73, 80, 100, 146, 22, 90, 1, 102, 165, 33, 146, 33, 18},
    {100, 41, 2, 152, 73, 169, 38, 81, 96, 98, 165, 34, 145, 100, 18, 72, 149, 164, 166, 9, 161, 152, 18, 84, 26, 85, 169, 37, 170, 42, 9, 66, 133, 130, 154, 88, 9, 161, 22, 134, 37, 168, 16, 70, 72, 73, 100, 148, 84, 22, 89, 90, 73, 105, 164, 136, 81, 25, 166, 133, 9, 32, 70, 85, 17, 42, 153, 90, 25, 101, 165, 2, 22, 96, 136, 82, 146, 42, 72, 85, 148, 136, 165, 149, 65, 161, 81, 82, 82, 105, 144, 160, 138, 148, 101, 32, 17, 17, 21, 134, 146, 20, 146, 152, 90, 4, 32, 170, 137, 168, 26, 73, 86, 69, 148, 85, 65, 40, 72, 89, 148, 97, 146, 0, 152, 101, 33, 104, 0, 86, 73, 24, 132, 161, 105, 37, 98, 26, 66, 90, 73, 20, 24, 80, 20, 41, 88, 146, 160, 104, 105, 85, 82, 170, 41, 164, 145, 105, 170, 105, 70, 89, 86, 68, 20, 10, 21, 73, 148, 85, 86, 82, 65, 84, 137, 160, 85, 36, 89, 73, 88, 168, 146, 10, 104, 170, 165, 21, 106, 22, 86, 102, 72, 148, 25, 65, 169, 72, 24, 96, 149, 100, 82, 89, 154, 84, 146, 166, 10, 18, 137, 149, 20, 38, 80, 161, 100, 81, 152, 73, 130, 74, 106, 16, 166, 42, 25, 26, 86, 37, 89, 166, 138, 149, 36, 82, 144, 161, 84, 144, 166, 152, 38, 88, 69, 136, 2, 149, 150, 10, 106, 162, 134, 86, 97, 150, 21, 136, 98, 132, 80, 97, 73, 98, 69, 20, 144, 169, 138, 106, 129, 40, 129, 100, 18, 100, 85, 106, 96, 152, 149, 130, 97, 86, 81, 105, 20, 73, 101, 82, 68, 24, 73, 170, 89, 105, 165, 64, 162, 90, 80, 65, 64, 86, 69, 165, 106, 160, 169, 70, 161, 153, 160, 154, 69, 106, 89, 20, 41, 0, 4, 106, 65, 82, 70, 8, 146, 134, 26, 169, 169, 169, 40, 165, 66, 164, 81, 42, 68, 133, 36, 161, 80, 101, 22, 169, 168, 10, 101, 40, 74, 8, 152, 166, 42, 36, 154, 133, 38, 130, 150, 164, 162, 105, 8, 40, 65, 102, 24, 37, 38, 164, 138, 4, 82, 134, 164, 137, 105, 133, 169, 88, 66, 82},
    {102, 97, 73, 154, 90, 97, 68, 21, 161, 130, 134, 37, 149, 34, 162, 102, 97, 168, 97, 101, 96, 137, 162, 10, 105, 32, 145, 81, 86, 170, 162, 81, 89, 80, 73, 66, 168, 9, 18, 21, 165, 170, 68, 98, 136, 65, 146, 0, 169, 105, 8, 8, 1, 26, 70, 169, 0, 82, 88, 73, 81, 9, 70, 170, 144, 101, 170, 40, 162, 42, 160, 161, 138, 134, 86, 165, 154, 160, 74, 136, 137, 98, 146, 82, 138, 150, 144, 66, 65, 89, 162, 21, 88, 32, 80, 168, 137, 80, 136, 96, 73, 25, 90, 89, 102, 161, 162, 40, 100, 40, 97, 70, 169, 101, 6, 154, 82, 154, 33, 20, 162, 101, 80, 64, 145, 70, 25, 10, 37, 10, 161, 88, 166, 17, 105, 90, 164, 34, 90, 98, 169, 169, 73, 17, 26, 150, 160, 36, 34, 84, 84, 69, 144, 37, 168, 22, 84, 65, 69, 73, 133, 17, 97, 17, 160, 146, 153, 106, 168, 161, 129, 130, 136, 101, 165, 148, 36, 101, 42, 2, 80, 166, 41, 164, 17, 162, 150, 69, 42, 137, 154, 105, 134, 100, 134, 154, 161, 168, 33, 6, 106, 169, 37, 148, 18, 84, 97, 85, 6, 86, 24, 25, 22, 169, 40, 165, 132, 84, 88, 166, 34, 161, 153, 100, 148, 65, 66, 26, 100, 149, 69, 154, 32, 153, 168, 134, 165, 128, 129, 1, 104, 88, 80, 148, 85, 85, 104, 101, 81, 73, 101, 154, 104, 170, 166, 129, 101, 89, 164, 88, 165, 9, 169, 104, 25, 90, 89, 66, 38, 164, 16, 161, 80, 84, 102, 169, 154, 101, 149, 66, 150, 38, 166, 153, 69, 86, 84, 137, 100, 65, 38, 146, 145, 148, 72, 144, 84, 88, 37, 137, 88, 10, 169, 165, 86, 129, 105, 80, 165, 69, 40, 154, 42, 138, 85, 168, 37, 4, 25, 82, 80, 169, 100, 74, 69, 86, 82, 165, 154, 89, 26, 32, 6, 89, 89, 144, 145, 100, 33, 164, 170, 64, 164, 34, 40, 150, 90, 100, 80, 38, 144, 96, 89, 22, 38, 2, 145, 137, 18, 166, 168, 102, 90, 25, 6, 88, 161, 1, 88, 24, 170, 25, 73, 26, 65, 138, 20, 80, 25, 40, 84, 169, 85, 37},
    {153, 37, 68, 32, 129, 100, 25, 18, 21, 130, 90, 129, 154, 37, 9, 32, 41, 36, 105, 42, 104, 21, 148, 133, 4, 106, 101, 166, 104, 165, 0, 161, 18, 168, 38, 98, 98, 25, 134, 133, 90, 133, 136, 164, 150, 98, 97, 133, 138, 2, 149, 22, 66, 26, 100, 69, 10, 6, 82, 161, 168, 72, 80, 72, 138, 104, 128, 82, 150, 166, 41, 90, 97, 81, 21, 17, 162, 164, 129, 0, 25, 85, 1, 86, 136, 65, 138, 153, 130, 73, 168, 100, 80, 33, 104, 145, 160, 2, 154, 24, 154, 128, 86, 106, 82, 10, 150, 80, 2, 36, 6, 168, 149, 0, 73, 154, 33, 42, 21, 85, 150, 169, 130, 97, 166, 132, 0, 153, 32, 101, 72, 34, 137, 146, 86, 164, 9, 21, 80, 5, 98, 145, 88, 10, 81, 16, 17, 89, 138, 18, 145, 98, 26, 80, 34, 166, 130, 106, 34, 137, 82, 170, 101, 5, 160, 18, 132, 9, 152, 97, 84, 169, 20, 160, 1, 132, 164, 64, 40, 149, 17, 42, 98, 144, 89, 164, 149, 102, 150, 80, 88, 164, 84, 150, 133, 66, 90, 98, 26, 129, 96, 97, 160, 0, 97, 137, 96, 154, 8, 72, 165, 144, 8, 137, 18, 102, 168, 84, 8, 134, 34, 17, 150, 133, 145, 70, 144, 80, 89, 24, 152, 33, 70, 100, 104, 40, 150, 152, 169, 37, 146, 38, 85, 0, 161, 82, 132, 69, 88, 5, 22, 88, 2, 168, 5, 42, 2, 6, 137, 168, 166, 18, 98, 81, 5, 64, 89, 82, 86, 101, 41, 164, 25, 149, 137, 153, 81, 149, 1, 150, 0, 69, 88, 66, 130, 24, 66, 161, 129, 32, 132, 80, 81, 18, 162, 153, 106, 166, 166, 169, 153, 132, 98, 73, 150, 102, 90, 36, 165, 86, 89, 85, 6, 0, 21, 148, 134, 36, 2, 41, 165, 164, 150, 81, 89, 98, 88, 102, 85, 69, 154, 6, 166, 17, 164, 18, 165, 145, 21, 144, 97, 105, 36, 130, 89, 149, 166, 1, 138, 10, 134, 73, 145, 38, 2, 36, 152, 85, 144, 85, 154, 150, 145, 128, 4, 166, 4, 164, 96, 80, 26, 146, 73, 38, 33, 161, 68, 26, 37, 64, 96, 132, 5, 168},
    {134, 166, 169, 148, 9, 128, 170, 106, 21, 148, 102, 42, 85, 68, 26, 38, 88, 2, 9, 165, 17, 32, 34, 138, 64, 33, 70, 150, 10, 37, 20, 24, 136, 89, 138, 164, 34, 6, 25, 21, 89, 5, 33, 10, 100, 166, 97, 148, 33, 74, 34, 1, 129, 89, 1, 106, 96, 22, 128, 97, 166, 154, 5, 88, 169, 154, 82, 145, 102, 73, 148, 34, 21, 161, 20, 89, 161, 81, 170, 106, 9, 145, 4, 4, 149, 9, 150, 36, 145, 106, 86, 164, 90, 38, 98, 73, 144, 145, 10, 128, 152, 5, 102, 85, 26, 161, 150, 132, 105, 37, 154, 22, 98, 102, 164, 41, 133, 144, 5, 26, 96, 161, 98, 100, 69, 169, 90, 165, 82, 9, 133, 26, 148, 69, 10, 20, 86, 22, 154, 130, 160, 89, 164, 38, 70, 72, 80, 4, 165, 149, 170, 165, 106, 90, 1, 154, 64, 100, 164, 74, 132, 153, 66, 132, 161, 153, 165, 105, 38, 36, 97, 134, 81, 105, 137, 134, 9, 150, 84, 20, 24, 26, 130, 150, 64, 136, 68, 25, 129, 101, 40, 100, 100, 37, 88, 102, 72, 144, 21, 36, 146, 66, 168, 96, 90, 164, 169, 166, 170, 88, 134, 73, 41, 84, 8, 168, 33, 102, 20, 138, 146, 132, 164, 88, 73, 70, 164, 170, 1, 90, 8, 160, 38, 82, 89, 150, 8, 137, 150, 129, 73, 168, 22, 25, 137, 136, 86, 26, 18, 81, 72, 106, 129, 161, 42, 10, 146, 40, 70, 134, 165, 153, 148, 152, 64, 153, 86, 72, 42, 80, 149, 88, 69, 105, 22, 74, 25, 85, 17, 73, 33, 164, 0, 137, 74, 105, 168, 170, 97, 5, 5, 145, 25, 90, 66, 22, 73, 86, 152, 24, 169, 98, 144, 20, 34, 88, 154, 105, 22, 164, 80, 82, 73, 104, 161, 10, 80, 65, 32, 106, 21, 164, 65, 162, 82, 26, 26, 41, 136, 86, 144, 105, 90, 165, 146, 65, 85, 1, 136, 17, 10, 168, 32, 5, 153, 21, 74, 37, 164, 130, 89, 82, 153, 84, 148, 96, 100, 129, 70, 105, 134, 148, 21, 34, 41, 38, 8, 89, 154, 74, 161, 153, 102, 100, 130, 68, 105, 70, 132, 20, 152, 162, 85, 65},
    {73, 26, 73, 74, 25, 153, 130, 149, 104, 73, 22, 165, 152, 154, 165, 73, 164, 104, 137, 96, 2, 149, 82, 133, 74, 166, 153, 153, 41, 69, 74, 17, 133, 145, 145, 145, 153, 100, 154, 89, 104, 146, 65, 41, 41, 85, 66, 16, 9, 85, 145, 68, 98, 34, 18, 86, 42, 18, 152, 165, 73, 96, 6, 102, 106, 101, 85, 133, 70, 132, 90, 168, 168, 84, 146, 133, 81, 105, 4, 153, 33, 82, 85, 17, 170, 90, 160, 2, 149, 73, 105, 85, 73, 41, 85, 137, 18, 146, 164, 133, 22, 2, 70, 164, 34, 9, 101, 1, 22, 152, 154, 5, 90, 37, 68, 72, 65, 169, 134, 153, 70, 102, 146, 38, 154, 24, 154, 97, 154, 73, 169, 149, 0, 10, 136, 9, 129, 4, 128, 97, 162, 150, 102, 128, 64, 168, 154, 17, 9, 96, 166, 104, 149, 36, 134, 105, 148, 166, 10, 32, 82, 144, 21, 16, 134, 152, 0, 154, 37, 148, 82, 161, 162, 4, 98, 85, 130, 165, 26, 1, 133, 162, 149, 152, 84, 170, 26, 150, 82, 101, 69, 80, 154, 169, 134, 73, 166, 149, 164, 26, 97, 33, 81, 0, 38, 97, 98, 36, 4, 137, 145, 5, 102, 105, 26, 6, 129, 153, 5, 8, 86, 34, 90, 25, 1, 164, 85, 133, 4, 166, 89, 152, 137, 88, 165, 0, 21, 10, 41, 84, 22, 70, 100, 33, 161, 66, 89, 166, 168, 150, 74, 73, 100, 105, 148, 137, 9, 80, 106, 136, 153, 32, 96, 150, 73, 26, 20, 5, 168, 100, 33, 149, 105, 162, 132, 26, 98, 80, 16, 89, 9, 69, 38, 169, 81, 85, 18, 150, 74, 165, 65, 80, 82, 25, 152, 64, 72, 66, 105, 96, 136, 152, 88, 25, 5, 89, 168, 1, 106, 130, 130, 148, 170, 69, 21, 73, 154, 80, 74, 6, 24, 69, 150, 128, 80, 154, 2, 90, 1, 153, 104, 154, 34, 20, 80, 18, 86, 166, 20, 21, 137, 40, 130, 6, 81, 152, 1, 0, 105, 132, 82, 5, 5, 74, 160, 149, 90, 72, 4, 86, 73, 68, 90, 5, 137, 42, 138, 137, 146, 70, 169, 5, 4, 90, 36, 138, 80, 74, 144, 101, 36, 149, 152, 6},
    {96, 169, 33, 104, 102, 66, 37, 150, 102, 38, 70, 145, 145, 36, 136, 106, 148, 100, 90, 106, 88, 130, 85, 164, 105, 105, 138, 170, 40, 5, 25, 70, 18, 66, 169, 149, 82, 148, 70, 146, 138, 166, 137, 84, 160, 138, 168, 34, 26, 25, 17, 21, 85, 90, 24, 154, 90, 136, 8, 81, 20, 105, 22, 153, 162, 88, 169, 148, 73, 38, 84, 96, 89, 164, 98, 164, 17, 84, 104, 34, 104, 73, 32, 148, 97, 8, 1, 20, 0, 106, 5, 36, 17, 100, 100, 170, 6, 37, 137, 161, 134, 25, 145, 152, 160, 38, 153, 104, 8, 74, 5, 104, 150, 169, 152, 32, 41, 84, 104, 166, 170, 100, 169, 169, 105, 130, 38, 137, 74, 96, 0, 66, 138, 70, 80, 89, 17, 144, 73, 137, 97, 100, 16, 82, 84, 153, 166, 37, 66, 165, 42, 42, 70, 170, 4, 130, 152, 164, 134, 72, 130, 161, 134, 161, 36, 102, 82, 70, 9, 170, 162, 102, 20, 154, 134, 97, 89, 146, 5, 42, 66, 22, 88, 81, 90, 148, 169, 144, 165, 4, 137, 129, 161, 41, 9, 26, 22, 129, 106, 16, 85, 24, 104, 154, 169, 85, 86, 33, 145, 132, 21, 33, 136, 86, 22, 70, 150, 84, 145, 102, 69, 152, 169, 69, 152, 25, 164, 154, 137, 86, 73, 104, 41, 106, 149, 149, 102, 68, 40, 161, 17, 9, 133, 161, 132, 22, 41, 145, 152, 22, 166, 138, 161, 69, 25, 88, 144, 73, 170, 97, 97, 5, 153, 166, 102, 153, 6, 138, 21, 146, 2, 26, 162, 98, 82, 137, 68, 26, 66, 24, 64, 84, 10, 105, 69, 98, 89, 106, 149, 21, 138, 65, 26, 81, 5, 133, 153, 138, 101, 150, 100, 152, 161, 4, 148, 98, 154, 101, 25, 161, 145, 133, 73, 165, 24, 21, 168, 97, 152, 97, 22, 138, 10, 136, 82, 130, 72, 97, 70, 137, 70, 102, 81, 41, 101, 0, 170, 168, 133, 160, 169, 9, 98, 21, 161, 136, 70, 100, 9, 41, 162, 22, 41, 106, 4, 149, 5, 149, 41, 170, 152, 64, 16, 105, 152, 133, 38, 86, 32, 17, 136, 38, 152, 2, 64, 2, 154, 96, 164, 134, 74, 69, 100, 1},
    {24, 164, 170, 10, 169, 9, 106, 102, 17, 149, 169, 69, 105, 133, 34, 5, 166, 17, 33, 90, 18, 25, 41, 16, 168, 104, 101, 0, 18, 70, 153, 162, 34, 85, 148, 80, 101, 9, 166, 100, 97, 149, 5, 81, 165, 133, 100, 88, 42, 154, 166, 10, 86, 128, 160, 68, 74, 73, 152, 18, 136, 149, 5, 138, 34, 9, 6, 169, 17, 149, 38, 81, 85, 150, 86, 89, 42, 0, 138, 70, 90, 133, 90, 144, 132, 26, 152, 24, 72, 10, 166, 84, 145, 105, 96, 165, 66, 90, 42, 84, 164, 133, 72, 40, 162, 65, 152, 169, 5, 42, 146, 20, 164, 106, 41, 130, 72, 2, 134, 169, 81, 16, 66, 9, 154, 82, 70, 100, 153, 152, 148, 22, 81, 138, 97, 134, 86, 102, 97, 10, 82, 25, 84, 89, 102, 148, 9, 166, 138, 88, 80, 73, 106, 34, 24, 168, 150, 102, 5, 20, 170, 42, 105, 164, 5, 21, 101, 106, 166, 34, 17, 104, 134, 41, 65, 34, 164, 24, 152, 162, 25, 42, 5, 132, 88, 98, 5, 154, 70, 80, 26, 170, 100, 41, 81, 144, 65, 105, 101, 73, 138, 160, 22, 42, 160, 153, 128, 138, 164, 97, 102, 0, 90, 144, 144, 6, 102, 73, 166, 144, 81, 25, 146, 146, 145, 2, 154, 100, 145, 6, 90, 165, 24, 36, 41, 84, 149, 102, 17, 152, 132, 9, 100, 5, 98, 85, 40, 152, 89, 86, 2, 88, 1, 38, 136, 150, 164, 146, 162, 89, 5, 168, 136, 38, 85, 17, 132, 66, 1, 16, 65, 134, 100, 144, 134, 136, 166, 42, 1, 85, 153, 162, 33, 164, 134, 37, 150, 166, 5, 162, 137, 164, 5, 65, 105, 18, 90, 129, 2, 6, 98, 132, 153, 88, 136, 21, 65, 165, 5, 42, 9, 150, 128, 165, 89, 81, 104, 65, 66, 18, 18, 153, 17, 165, 101, 165, 9, 136, 134, 154, 25, 37, 168, 1, 64, 168, 164, 38, 84, 22, 68, 162, 81, 160, 164, 104, 34, 82, 66, 41, 8, 165, 160, 154, 73, 166, 129, 162, 86, 74, 18, 17, 6, 90, 101, 84, 66, 96, 86, 26, 98, 144, 106, 20, 38, 165, 90, 90, 97, 82, 100, 153, 21, 86},
    {69, 98, 170, 32, 5, 170, 36, 129, 106, 24, 88, 88, 84, 148, 98, 1, 40, 161, 40, 101, 128, 42, 154, 165, 72, 81, 154, 97, 88, 89, 4, 9, 106, 148, 38, 148, 154, 32, 90, 66, 68, 96, 145, 160, 104, 17, 22, 40, 74, 64, 66, 72, 89, 165, 105, 98, 85, 22, 68, 132, 150, 106, 89, 86, 81, 64, 88, 160, 85, 90, 22, 25, 132, 154, 132, 74, 24, 85, 65, 18, 152, 4, 25, 5, 164, 132, 153, 86, 40, 145, 42, 88, 100, 154, 34, 86, 69, 6, 88, 160, 2, 133, 32, 169, 153, 138, 38, 4, 138, 150, 6, 105, 162, 146, 150, 4, 164, 105, 25, 102, 74, 150, 10, 168, 150, 37, 70, 148, 105, 64, 161, 165, 82, 24, 164, 84, 25, 42, 136, 0, 153, 168, 88, 36, 138, 84, 104, 2, 36, 36, 130, 69, 100, 165, 86, 4, 148, 101, 104, 25, 18, 168, 40, 132, 101, 168, 84, 64, 9, 42, 17, 33, 65, 20, 130, 85, 105, 69, 22, 84, 166, 130, 85, 24, 148, 36, 166, 146, 149, 165, 100, 5, 152, 88, 105, 86, 26, 102, 154, 68, 24, 72, 170, 1, 86, 84, 4, 42, 137, 132, 134, 10, 169, 137, 164, 96, 22, 132, 40, 165, 168, 89, 6, 132, 152, 64, 152, 98, 21, 68, 132, 22, 74, 164, 153, 80, 101, 106, 132, 133, 152, 32, 24, 72, 10, 70, 66, 164, 134, 153, 1, 106, 153, 144, 4, 9, 166, 106, 0, 165, 89, 132, 106, 40, 165, 36, 33, 26, 4, 169, 128, 2, 128, 128, 69, 25, 70, 6, 34, 168, 20, 148, 153, 72, 70, 146, 101, 102, 34, 148, 144, 85, 20, 9, 16, 82, 148, 69, 0, 20, 164, 70, 72, 88, 81, 20, 68, 129, 96, 136, 34, 36, 149, 16, 22, 98, 130, 169, 88, 66, 16, 130, 64, 36, 104, 96, 25, 148, 104, 102, 5, 168, 16, 128, 85, 162, 0, 104, 22, 36, 132, 165, 37, 165, 136, 40, 101, 146, 36, 1, 160, 153, 65, 164, 86, 4, 97, 130, 136, 134, 33, 164, 149, 68, 86, 42, 98, 25, 136, 162, 20, 84, 168, 146, 100, 97, 80, 137, 16, 68, 41, 36, 170, 97},
    {146, 152, 2, 22, 106, 153, 41, 22, 149, 96, 42, 65, 101, 42, 9, 169, 149, 169, 166, 154, 137, 166, 85, 81, 162, 69, 1, 70, 89, 84, 42, 17, 160, 36, 166, 86, 4, 104, 137, 38, 130, 166, 97, 66, 166, 101, 34, 161, 68, 89, 161, 149, 98, 41, 10, 104, 148, 148, 164, 169, 82, 160, 136, 24, 81, 38, 145, 165, 164, 22, 42, 160, 4, 161, 101, 5, 6, 74, 20, 153, 162, 72, 160, 169, 148, 65, 37, 24, 144, 70, 144, 89, 69, 6, 24, 16, 105, 65, 101, 24, 130, 161, 146, 20, 102, 42, 137, 148, 9, 160, 137, 74, 105, 90, 21, 146, 82, 21, 165, 68, 34, 70, 150, 150, 40, 130, 24, 25, 170, 133, 145, 97, 152, 149, 97, 165, 86, 2, 134, 72, 81, 73, 168, 6, 69, 25, 25, 132, 129, 145, 25, 36, 146, 24, 17, 170, 81, 37, 152, 105, 149, 70, 6, 72, 170, 66, 88, 105, 146, 26, 136, 37, 89, 16, 37, 21, 34, 69, 105, 10, 136, 166, 32, 73, 96, 137, 38, 85, 100, 105, 86, 153, 68, 81, 69, 161, 82, 22, 169, 84, 18, 65, 153, 149, 0, 154, 37, 73, 2, 148, 137, 101, 38, 69, 100, 106, 90, 166, 68, 26, 65, 150, 36, 33, 133, 36, 96, 0, 4, 149, 170, 138, 70, 102, 21, 25, 132, 138, 17, 102, 38, 38, 89, 152, 17, 153, 105, 162, 138, 149, 106, 42, 165, 154, 102, 69, 130, 0, 68, 1, 136, 25, 89, 36, 36, 38, 161, 70, 166, 34, 150, 149, 34, 96, 160, 25, 81, 97, 132, 41, 146, 149, 81, 138, 136, 146, 150, 161, 9, 169, 21, 81, 2, 42, 81, 66, 134, 66, 73, 168, 84, 41, 136, 22, 98, 2, 16, 8, 133, 101, 164, 42, 82, 153, 68, 70, 38, 1, 161, 72, 4, 165, 168, 24, 170, 42, 42, 25, 134, 25, 150, 90, 85, 106, 137, 40, 26, 129, 5, 36, 168, 134, 169, 161, 166, 150, 145, 82, 132, 138, 152, 146, 104, 82, 101, 129, 101, 170, 25, 73, 42, 64, 104, 149, 154, 102, 72, 169, 105, 129, 102, 89, 1, 6, 26, 89, 32, 37, 80, 80, 102, 88, 137, 8},
    {162, 69, 16, 65, 148, 86, 16, 166, 42, 69, 96, 89, 97, 106, 66, 64, 20, 33, 10, 133, 160, 102, 82, 2, 72, 146, 90, 9, 6, 41, 17, 4, 90, 152, 32, 106, 40, 9, 66, 4, 146, 160, 170, 22, 0, 89, 132, 34, 145, 144, 82, 6, 165, 133, 70, 25, 132, 1, 160, 41, 90, 73, 33, 105, 16, 130, 2, 133, 165, 73, 37, 164, 18, 74, 36, 165, 152, 33, 165, 106, 0, 82, 5, 100, 149, 96, 89, 8, 0, 26, 17, 33, 24, 70, 98, 0, 134, 5, 40, 66, 69, 89, 33, 101, 38, 154, 36, 129, 74, 96, 96, 150, 98, 132, 25, 18, 22, 129, 166, 97, 90, 40, 101, 8, 130, 22, 72, 24, 33, 72, 8, 90, 1, 26, 84, 89, 149, 89, 130, 82, 17, 33, 106, 168, 85, 65, 34, 0, 149, 17, 42, 22, 9, 165, 149, 18, 73, 146, 2, 169, 16, 89, 88, 81, 42, 105, 160, 149, 134, 22, 88, 133, 41, 2, 168, 34, 161, 70, 149, 104, 68, 17, 148, 164, 148, 22, 104, 105, 145, 169, 5, 21, 26, 146, 164, 153, 2, 145, 149, 152, 137, 4, 33, 17, 18, 25, 37, 130, 72, 20, 68, 152, 5, 106, 88, 2, 82, 133, 9, 17, 10, 162, 96, 81, 96, 18, 6, 86, 18, 149, 153, 89, 64, 74, 22, 160, 10, 20, 129, 145, 166, 10, 21, 66, 104, 105, 105, 66, 70, 25, 134, 84, 37, 161, 100, 100, 25, 169, 166, 8, 130, 64, 105, 64, 104, 145, 41, 102, 166, 160, 22, 2, 89, 17, 32, 37, 9, 16, 98, 34, 129, 17, 36, 170, 80, 17, 6, 132, 89, 80, 82, 165, 26, 1, 69, 81, 148, 38, 134, 160, 73, 102, 96, 34, 34, 149, 66, 149, 88, 0, 85, 162, 8, 17, 36, 169, 148, 85, 149, 73, 25, 104, 88, 1, 26, 97, 38, 40, 150, 73, 38, 26, 24, 102, 166, 160, 97, 24, 69, 89, 9, 168, 40, 136, 132, 5, 154, 149, 149, 102, 6, 170, 37, 166, 42, 73, 168, 133, 73, 81, 38, 36, 105, 20, 150, 105, 90, 37, 10, 105, 16, 170, 86, 170, 32, 166, 149, 40, 149, 150, 160, 22, 130, 1},
    {166, 162, 17, 150, 102, 133, 21, 166, 22, 40, 32, 96, 105, 164, 42, 82, 146, 102, 90, 68, 136, 69, 162, 160, 36, 82, 149, 146, 41, 138, 170, 106, 25, 34, 137, 150, 68, 81, 130, 132, 32, 153, 36, 144, 70, 88, 89, 152, 42, 104, 86, 138, 1, 133, 2, 134, 165, 34, 32, 97, 100, 162, 138, 70, 128, 68, 74, 88, 89, 24, 134, 98, 70, 154, 166, 128, 144, 152, 84, 26, 137, 84, 154, 145, 138, 100, 6, 41, 5, 133, 64, 68, 88, 97, 9, 85, 168, 80, 65, 144, 153, 145, 133, 20, 21, 134, 6, 152, 90, 100, 70, 2, 84, 145, 96, 69, 24, 132, 82, 2, 42, 154, 38, 17, 65, 82, 129, 102, 88, 100, 26, 100, 18, 36, 148, 86, 72, 84, 18, 164, 97, 148, 128, 66, 152, 129, 6, 18, 66, 149, 18, 36, 90, 89, 132, 149, 150, 5, 18, 25, 24, 36, 101, 101, 166, 149, 132, 134, 165, 144, 149, 70, 137, 82, 154, 16, 136, 100, 41, 145, 169, 84, 18, 105, 128, 41, 80, 26, 69, 137, 21, 41, 101, 134, 85, 25, 32, 98, 164, 41, 160, 0, 154, 70, 106, 165, 72, 25, 160, 145, 98, 89, 68, 104, 86, 164, 169, 86, 152, 65, 89, 37, 149, 17, 102, 168, 152, 26, 22, 166, 165, 97, 138, 106, 106, 170, 90, 162, 160, 144, 22, 146, 65, 169, 102, 5, 153, 20, 133, 148, 10, 10, 149, 101, 148, 136, 145, 161, 82, 134, 136, 9, 90, 149, 170, 98, 145, 136, 170, 22, 106, 33, 130, 85, 38, 5, 150, 70, 105, 85, 6, 148, 104, 96, 165, 74, 73, 6, 130, 105, 85, 148, 132, 41, 38, 168, 74, 102, 153, 145, 5, 24, 41, 160, 89, 105, 26, 73, 9, 134, 72, 20, 17, 165, 88, 136, 41, 42, 129, 96, 128, 21, 89, 37, 98, 97, 73, 154, 25, 85, 90, 38, 90, 33, 89, 105, 89, 64, 164, 144, 9, 101, 0, 1, 24, 8, 170, 0, 1, 40, 145, 100, 6, 148, 84, 81, 20, 104, 17, 144, 153, 149, 128, 97, 33, 96, 9, 148, 145, 100, 85, 104, 37, 22, 166, 69, 66, 152, 169, 22, 69, 37, 169, 130},
    {152, 144, 90, 106, 40, 97, 82, 101, 130, 129, 37, 5, 32, 153, 132, 16, 105, 38, 154, 130, 4, 153, 73, 6, 64, 42, 84, 81, 169, 165, 106, 148, 34, 73, 170, 85, 64, 5, 32, 81, 34, 65, 104, 34, 89, 73, 129, 149, 170, 38, 26, 128, 138, 148, 85, 86, 84, 86, 34, 68, 138, 98, 129, 146, 137, 166, 137, 105, 85, 89, 85, 160, 98, 132, 161, 74, 5, 133, 34, 40, 89, 42, 149, 105, 138, 73, 66, 106, 1, 72, 149, 26, 106, 129, 86, 169, 134, 1, 32, 64, 37, 68, 70, 153, 34, 169, 82, 153, 32, 4, 132, 161, 8, 134, 84, 97, 80, 144, 105, 17, 37, 105, 148, 150, 101, 1, 165, 37, 149, 22, 86, 36, 170, 168, 86, 96, 128, 144, 65, 166, 160, 24, 97, 17, 102, 132, 18, 21, 18, 149, 161, 170, 86, 102, 88, 88, 68, 170, 169, 138, 166, 105, 73, 24, 101, 72, 17, 42, 160, 152, 144, 168, 100, 36, 138, 149, 102, 86, 26, 138, 162, 133, 149, 168, 134, 137, 149, 17, 145, 9, 82, 16, 101, 97, 21, 166, 89, 150, 41, 2, 160, 73, 146, 32, 148, 18, 96, 34, 137, 149, 97, 74, 150, 41, 81, 84, 154, 138, 5, 5, 2, 146, 106, 169, 149, 98, 10, 9, 21, 153, 134, 25, 138, 89, 1, 40, 104, 64, 37, 90, 10, 4, 88, 166, 72, 153, 25, 84, 166, 25, 138, 106, 22, 2, 36, 98, 130, 26, 169, 166, 5, 33, 82, 153, 89, 0, 104, 104, 65, 18, 64, 168, 138, 74, 162, 105, 153, 81, 169, 106, 154, 6, 22, 9, 138, 8, 138, 6, 153, 42, 1, 41, 145, 34, 18, 40, 32, 153, 26, 166, 89, 37, 96, 170, 32, 130, 134, 96, 16, 162, 72, 82, 10, 169, 20, 154, 106, 138, 16, 10, 70, 4, 104, 105, 100, 90, 22, 102, 2, 17, 82, 0, 170, 100, 65, 82, 20, 98, 41, 21, 170, 22, 22, 22, 153, 152, 166, 154, 38, 162, 81, 153, 129, 146, 38, 64, 84, 137, 36, 69, 106, 6, 162, 22, 90, 84, 41, 85, 37, 85, 137, 9, 164, 64, 129, 137, 64, 145, 148, 74, 4, 164, 133, 68},
    {100, 149, 101, 162, 154, 20, 101, 24, 74, 85, 129, 69, 10, 34, 101, 66, 41, 165, 106, 96, 36, 146, 65, 132, 16, 0, 170, 137, 74, 88, 148, 2, 18, 136, 137, 160, 85, 89, 42, 149, 20, 21, 105, 20, 96, 81, 36, 165, 20, 41, 41, 70, 38, 149, 32, 137, 84, 102, 38, 166, 138, 150, 74, 165, 81, 22, 97, 96, 84, 42, 89, 24, 26, 145, 166, 149, 16, 86, 64, 170, 9, 97, 89, 130, 16, 38, 84, 5, 149, 18, 33, 6, 102, 1, 152, 42, 137, 97, 144, 2, 64, 65, 106, 102, 70, 26, 6, 164, 130, 9, 149, 90, 130, 102, 17, 105, 41, 36, 170, 72, 24, 128, 66, 144, 36, 160, 104, 85, 25, 165, 169, 72, 16, 82, 162, 161, 42, 138, 88, 154, 166, 137, 169, 153, 104, 86, 101, 132, 32, 98, 8, 146, 98, 106, 137, 66, 154, 146, 96, 33, 146, 74, 88, 165, 70, 38, 166, 69, 105, 162, 18, 86, 16, 97, 152, 86, 136, 104, 144, 40, 138, 70, 134, 2, 41, 66, 133, 104, 70, 73, 25, 161, 98, 24, 160, 37, 90, 130, 6, 32, 89, 10, 146, 5, 144, 162, 81, 5, 128, 133, 65, 133, 64, 17, 168, 146, 66, 144, 26, 133, 160, 41, 25, 68, 149, 138, 68, 102, 81, 17, 37, 150, 133, 134, 81, 74, 37, 0, 150, 21, 69, 65, 88, 90, 85, 102, 161, 18, 97, 22, 134, 85, 166, 164, 100, 40, 66, 6, 24, 4, 90, 88, 40, 25, 86, 4, 82, 32, 73, 162, 5, 82, 88, 22, 101, 97, 65, 96, 38, 81, 73, 86, 98, 134, 134, 2, 98, 106, 150, 100, 162, 16, 100, 162, 149, 102, 152, 165, 96, 21, 97, 10, 170, 161, 138, 170, 69, 153, 101, 64, 153, 169, 134, 168, 165, 165, 24, 149, 153, 81, 74, 104, 18, 73, 73, 146, 150, 66, 149, 154, 164, 8, 136, 154, 128, 162, 1, 66, 161, 21, 96, 17, 134, 34, 106, 105, 96, 134, 65, 82, 129, 130, 70, 164, 104, 106, 160, 105, 66, 25, 74, 65, 32, 145, 145, 5, 154, 81, 6, 96, 4, 16, 101, 4, 89, 170, 22, 22, 90, 146, 90, 41, 84, 149},
    {166, 33, 154, 154, 106, 146, 74, 102, 133, 90, 81, 138, 74, 84, 6, 98, 0, 6, 149, 22, 69, 26, 34, 89, 17, 153, 162, 105, 104, 90, 148, 148, 34, 68, 145, 21, 74, 102, 166, 98, 89, 40, 154, 162, 137, 148, 132, 149, 22, 18, 9, 152, 133, 150, 153, 33, 64, 100, 152, 164, 6, 20, 106, 148, 97, 170, 104, 34, 84, 69, 100, 73, 149, 74, 64, 36, 1, 65, 10, 100, 160, 9, 170, 133, 154, 164, 70, 37, 149, 81, 153, 134, 18, 70, 82, 149, 70, 89, 69, 146, 9, 38, 25, 81, 86, 129, 21, 69, 152, 85, 88, 64, 106, 105, 165, 132, 4, 6, 164, 164, 74, 81, 33, 33, 97, 89, 18, 130, 1, 33, 133, 169, 97, 105, 106, 4, 138, 26, 153, 42, 129, 89, 66, 81, 10, 42, 74, 36, 70, 136, 90, 105, 137, 18, 24, 169, 37, 74, 152, 152, 38, 106, 162, 98, 144, 36, 104, 153, 34, 149, 40, 169, 72, 150, 24, 69, 145, 98, 26, 74, 134, 168, 81, 132, 81, 101, 86, 0, 160, 21, 2, 73, 98, 69, 148, 10, 89, 72, 152, 104, 5, 164, 133, 169, 102, 21, 98, 154, 145, 164, 74, 69, 148, 10, 4, 89, 37, 2, 66, 25, 149, 65, 148, 149, 81, 37, 16, 80, 86, 38, 85, 42, 84, 98, 150, 18, 154, 97, 136, 105, 36, 165, 150, 137, 104, 74, 152, 40, 104, 17, 68, 106, 164, 149, 101, 150, 130, 9, 73, 169, 82, 164, 41, 10, 18, 136, 26, 162, 148, 97, 41, 164, 66, 100, 154, 88, 104, 102, 18, 42, 168, 161, 100, 165, 66, 10, 153, 166, 69, 128, 73, 154, 97, 22, 145, 166, 149, 96, 166, 89, 68, 152, 37, 168, 89, 80, 26, 26, 17, 162, 42, 80, 129, 150, 64, 89, 153, 168, 169, 86, 0, 100, 154, 24, 17, 20, 81, 154, 86, 165, 5, 40, 102, 65, 80, 161, 70, 84, 70, 102, 162, 128, 81, 85, 72, 105, 161, 164, 9, 148, 170, 4, 164, 37, 150, 137, 84, 164, 18, 153, 98, 138, 134, 37, 2, 4, 25, 25, 98, 21, 17, 36, 98, 132, 8, 38, 106, 70, 66, 145, 26, 101, 162, 153},
    {10, 17, 170, 38, 161, 9, 134, 105, 70, 42, 133, 100, 80, 86, 5, 37, 22, 154, 25, 90, 80, 22, 132, 26, 68, 81, 21, 16, 5, 38, 97, 134, 16, 130, 0, 88, 36, 102, 154, 32, 17, 34, 146, 73, 106, 106, 10, 148, 20, 84, 90, 132, 18, 166, 0, 80, 130, 85, 41, 98, 132, 137, 168, 64, 66, 84, 104, 106, 106, 101, 168, 148, 72, 150, 41, 38, 10, 89, 102, 128, 100, 25, 33, 162, 37, 137, 154, 17, 149, 5, 86, 64, 65, 10, 168, 5, 150, 42, 144, 161, 164, 136, 129, 89, 160, 102, 89, 74, 102, 100, 66, 98, 128, 69, 64, 32, 38, 98, 22, 129, 144, 85, 153, 89, 101, 100, 17, 16, 37, 9, 150, 102, 101, 40, 20, 81, 82, 170, 8, 146, 153, 1, 164, 85, 105, 146, 132, 152, 8, 164, 106, 40, 162, 104, 65, 41, 68, 146, 22, 72, 164, 69, 97, 170, 80, 145, 105, 84, 153, 97, 154, 8, 66, 21, 66, 26, 25, 88, 164, 90, 1, 2, 9, 146, 88, 138, 166, 106, 88, 98, 130, 69, 165, 22, 20, 104, 9, 85, 170, 132, 38, 104, 170, 4, 22, 17, 86, 2, 20, 98, 32, 137, 89, 17, 146, 68, 90, 21, 80, 104, 146, 132, 64, 144, 106, 22, 169, 25, 165, 82, 169, 133, 165, 133, 4, 145, 84, 88, 161, 16, 26, 1, 38, 152, 16, 146, 101, 85, 132, 166, 148, 168, 85, 86, 86, 138, 105, 145, 169, 130, 10, 105, 97, 105, 145, 144, 66, 137, 148, 81, 80, 72, 37, 72, 36, 165, 144, 69, 2, 100, 144, 80, 144, 25, 32, 137, 26, 164, 20, 89, 0, 80, 1, 88, 150, 150, 100, 164, 145, 16, 41, 37, 154, 82, 74, 104, 130, 42, 160, 38, 154, 101, 154, 37, 130, 66, 101, 86, 148, 152, 81, 36, 144, 74, 32, 81, 90, 4, 161, 89, 68, 145, 82, 64, 33, 132, 85, 70, 41, 168, 145, 169, 5, 150, 70, 64, 104, 68, 133, 68, 161, 152, 40, 38, 32, 168, 68, 137, 150, 160, 2, 34, 84, 132, 170, 170, 17, 165, 25, 81, 66, 150, 32, 90, 162, 81, 134, 85, 100, 149, 26, 149, 9, 98},
    {26, 25, 22, 2, 34, 66, 104, 34, 24, 36, 68, 37, 105, 9, 5, 137, 4, 153, 64, 6, 2, 18, 17, 20, 138, 101, 4, 2, 106, 166, 104, 137, 22, 85, 24, 85, 105, 169, 85, 21, 106, 104, 42, 148, 24, 25, 5, 132, 70, 40, 6, 22, 145, 165, 169, 5, 166, 104, 104, 133, 106, 74, 169, 5, 24, 134, 25, 42, 25, 33, 130, 9, 17, 84, 74, 22, 42, 160, 144, 80, 98, 149, 145, 18, 165, 10, 168, 68, 105, 86, 137, 96, 37, 105, 37, 9, 96, 80, 2, 101, 100, 161, 165, 37, 148, 73, 20, 73, 84, 42, 73, 129, 20, 32, 41, 104, 6, 145, 25, 105, 100, 136, 70, 134, 40, 73, 100, 170, 166, 41, 152, 152, 101, 6, 170, 129, 169, 106, 164, 8, 138, 32, 74, 164, 100, 2, 41, 1, 104, 165, 88, 25, 25, 22, 64, 134, 9, 34, 161, 170, 70, 5, 40, 40, 162, 86, 73, 9, 69, 9, 161, 72, 0, 1, 0, 18, 41, 136, 72, 89, 26, 84, 161, 70, 5, 146, 136, 40, 132, 153, 102, 37, 26, 33, 21, 84, 80, 102, 18, 38, 69, 26, 85, 161, 154, 161, 154, 16, 129, 5, 40, 100, 37, 153, 169, 162, 36, 102, 0, 166, 101, 0, 82, 17, 165, 2, 38, 105, 34, 38, 101, 26, 36, 10, 37, 24, 166, 42, 169, 40, 130, 40, 4, 42, 152, 38, 90, 136, 104, 4, 129, 8, 136, 16, 40, 129, 36, 38, 41, 136, 102, 82, 153, 101, 149, 5, 148, 22, 84, 138, 32, 105, 34, 145, 153, 41, 97, 73, 26, 24, 136, 2, 26, 85, 84, 154, 70, 101, 98, 22, 128, 26, 89, 10, 16, 96, 33, 170, 26, 160, 72, 85, 21, 146, 82, 5, 136, 161, 161, 6, 84, 165, 17, 89, 98, 41, 80, 36, 8, 2, 96, 40, 100, 42, 81, 4, 26, 100, 1, 22, 169, 90, 149, 137, 154, 90, 18, 25, 98, 96, 170, 70, 166, 65, 38, 36, 17, 102, 6, 16, 170, 98, 1, 21, 165, 70, 8, 8, 10, 32, 2, 41, 170, 70, 22, 69, 86, 146, 8, 2, 24, 89, 36, 165, 100, 2, 40, 160, 33, 6, 164, 37, 86, 38},
    {145, 20, 148, 169, 82, 148, 82, 73, 146, 9, 18, 154, 9, 136, 10, 101, 86, 81, 26, 98, 162, 10, 32, 70, 1, 81, 37, 8, 152, 18, 164, 154, 40, 22, 80, 86, 2, 129, 90, 89, 86, 88, 88, 6, 41, 1, 73, 85, 168, 0, 170, 42, 65, 161, 40, 150, 101, 100, 132, 10, 136, 96, 85, 152, 162, 150, 144, 66, 4, 164, 21, 105, 65, 89, 37, 20, 90, 150, 90, 1, 34, 6, 18, 168, 4, 161, 89, 153, 150, 86, 106, 66, 128, 150, 34, 26, 36, 6, 105, 146, 20, 4, 64, 154, 74, 20, 38, 97, 148, 6, 169, 97, 26, 81, 10, 34, 10, 148, 9, 21, 21, 162, 5, 70, 42, 6, 162, 152, 2, 134, 144, 129, 133, 25, 149, 89, 162, 164, 70, 162, 24, 161, 97, 105, 169, 40, 104, 41, 162, 162, 145, 96, 84, 166, 149, 149, 134, 89, 6, 84, 20, 70, 160, 105, 16, 26, 138, 129, 41, 20, 2, 21, 33, 1, 2, 40, 80, 36, 96, 66, 138, 145, 41, 36, 36, 17, 170, 166, 69, 101, 169, 86, 4, 9, 85, 104, 170, 26, 148, 18, 85, 132, 41, 170, 149, 145, 2, 165, 20, 168, 144, 41, 138, 148, 152, 88, 146, 21, 38, 26, 5, 17, 36, 164, 102, 68, 70, 145, 25, 0, 8, 10, 136, 36, 10, 128, 88, 170, 97, 64, 36, 5, 24, 41, 106, 9, 169, 1, 161, 88, 74, 166, 22, 150, 41, 72, 166, 152, 2, 84, 138, 26, 166, 132, 32, 132, 84, 104, 64, 89, 20, 16, 4, 41, 37, 96, 161, 5, 164, 101, 102, 136, 134, 88, 153, 85, 150, 84, 160, 96, 82, 82, 68, 16, 104, 84, 148, 21, 1, 72, 26, 166, 22, 20, 22, 5, 105, 90, 148, 134, 168, 33, 102, 24, 161, 9, 148, 4, 150, 32, 162, 148, 105, 90, 128, 40, 5, 88, 10, 162, 98, 24, 146, 86, 26, 74, 42, 129, 162, 32, 36, 81, 105, 73, 102, 22, 17, 64, 2, 0, 169, 137, 84, 25, 164, 166, 88, 41, 138, 170, 86, 166, 137, 24, 72, 164, 152, 73, 5, 33, 98, 160, 154, 96, 162, 26, 86, 24, 85, 152, 130, 146, 84, 66},
    {9, 21, 24, 26, 4, 134, 148, 33, 169, 88, 26, 36, 86, 166, 101, 33, 4, 20, 82, 22, 145, 5, 4, 169, 132, 6, 130, 2, 98, 18, 80, 1, 84, 84, 6, 166, 80, 164, 134, 98, 25, 41, 21, 82, 18, 5, 96, 160, 82, 164, 96, 20, 24, 149, 86, 18, 164, 41, 153, 1, 66, 10, 144, 97, 137, 88, 164, 6, 137, 42, 152, 96, 69, 25, 162, 128, 129, 101, 20, 21, 10, 25, 26, 66, 129, 90, 25, 24, 10, 88, 130, 166, 102, 106, 101, 90, 0, 164, 69, 136, 17, 72, 6, 150, 149, 37, 130, 64, 133, 136, 81, 84, 144, 86, 88, 6, 134, 70, 17, 86, 73, 96, 81, 6, 42, 88, 17, 86, 154, 36, 168, 70, 18, 137, 166, 18, 6, 136, 106, 88, 97, 4, 80, 152, 86, 9, 154, 129, 153, 37, 166, 154, 100, 132, 160, 102, 6, 38, 132, 149, 8, 10, 101, 153, 84, 132, 42, 128, 102, 40, 86, 82, 169, 170, 38, 136, 137, 41, 69, 165, 104, 9, 90, 25, 162, 25, 162, 36, 90, 146, 102, 89, 130, 82, 38, 96, 16, 149, 88, 21, 40, 162, 165, 38, 68, 88, 136, 89, 65, 81, 164, 4, 88, 32, 128, 102, 88, 70, 42, 145, 134, 82, 144, 149, 132, 73, 20, 153, 146, 132, 82, 168, 166, 102, 85, 98, 162, 150, 90, 165, 5, 5, 88, 104, 164, 144, 153, 160, 64, 136, 160, 5, 130, 25, 164, 85, 26, 38, 69, 168, 133, 16, 102, 104, 170, 98, 86, 145, 101, 34, 161, 102, 136, 32, 26, 86, 1, 153, 36, 96, 154, 152, 64, 81, 5, 64, 101, 98, 106, 88, 86, 132, 133, 154, 82, 169, 82, 89, 136, 137, 88, 4, 74, 133, 96, 68, 18, 166, 26, 9, 88, 106, 164, 100, 34, 153, 145, 41, 106, 102, 2, 153, 154, 148, 68, 21, 32, 134, 42, 38, 138, 64, 149, 38, 165, 37, 84, 145, 132, 133, 68, 26, 8, 86, 1, 102, 69, 96, 90, 150, 152, 80, 26, 18, 104, 136, 170, 64, 90, 145, 5, 161, 169, 22, 1, 100, 130, 81, 130, 25, 137, 24, 97, 101, 70, 162, 36, 149, 154, 133, 146, 137, 137, 98},
    {5, 21, 89, 40, 85, 10, 41, 105, 36, 100, 162, 21, 42, 129, 22, 153, 164, 101, 148, 105, 149, 166, 82, 25, 80, 16, 16, 104, 105, 160, 88, 36, 20, 89, 89, 104, 74, 96, 102, 105, 96, 10, 170, 24, 154, 134, 89, 148, 4, 88, 97, 69, 166, 32, 90, 86, 134, 164, 133, 5, 64, 164, 74, 20, 153, 24, 130, 42, 17, 72, 101, 153, 64, 66, 18, 74, 26, 10, 136, 42, 105, 5, 17, 82, 2, 137, 146, 149, 32, 81, 80, 162, 137, 154, 90, 164, 154, 68, 154, 88, 86, 166, 82, 73, 41, 152, 37, 161, 42, 80, 80, 21, 106, 138, 65, 168, 6, 66, 38, 70, 170, 0, 145, 104, 9, 89, 161, 136, 1, 100, 6, 84, 145, 85, 153, 170, 166, 74, 24, 24, 149, 82, 166, 74, 138, 1, 68, 9, 148, 81, 98, 97, 133, 69, 40, 165, 42, 166, 42, 150, 41, 166, 150, 6, 80, 169, 18, 161, 149, 106, 80, 98, 73, 34, 98, 16, 138, 102, 170, 97, 90, 170, 102, 2, 130, 22, 89, 149, 149, 160, 2, 102, 104, 105, 130, 133, 145, 89, 70, 5, 152, 104, 160, 69, 89, 166, 134, 16, 4, 4, 1, 42, 0, 33, 168, 21, 102, 166, 81, 85, 24, 90, 136, 146, 170, 22, 86, 2, 4, 165, 90, 41, 160, 86, 90, 137, 34, 20, 138, 85, 70, 8, 65, 86, 68, 34, 90, 74, 161, 130, 105, 65, 152, 20, 17, 132, 21, 144, 69, 16, 9, 33, 146, 4, 21, 86, 10, 9, 102, 69, 106, 32, 64, 38, 146, 148, 160, 73, 164, 138, 130, 154, 166, 38, 82, 164, 4, 133, 22, 36, 133, 33, 129, 10, 64, 132, 133, 65, 73, 150, 90, 165, 66, 42, 25, 90, 82, 104, 154, 129, 106, 6, 153, 26, 97, 22, 90, 8, 10, 145, 165, 1, 89, 34, 70, 166, 26, 160, 88, 25, 162, 160, 153, 70, 100, 73, 64, 106, 154, 169, 90, 152, 133, 66, 104, 74, 134, 74, 100, 17, 17, 89, 22, 98, 82, 145, 165, 166, 68, 104, 88, 165, 170, 161, 73, 65, 85, 69, 169, 165, 86, 101, 136, 162, 72, 33, 40, 148, 128, 146, 24, 40, 148, 26},
    {72, 102, 33, 25, 16, 88, 42, 16, 166, 32, 4, 16, 106, 152, 165, 5, 34, 145, 66, 22, 6, 42, 32, 38, 132, 70, 17, 18, 16, 17, 5, 168, 17, 96, 36, 88, 160, 164, 9, 37, 96, 97, 38, 41, 40, 152, 20, 137, 33, 21, 21, 38, 10, 40, 148, 101, 6, 37, 84, 146, 26, 90, 170, 164, 41, 36, 36, 4, 82, 160, 2, 97, 20, 33, 96, 25, 24, 128, 33, 24, 85, 37, 42, 33, 152, 24, 1, 69, 80, 100, 40, 40, 25, 42, 152, 9, 2, 68, 86, 42, 102, 165, 169, 161, 41, 88, 164, 105, 41, 37, 37, 25, 152, 101, 21, 41, 41, 18, 0, 96, 98, 8, 41, 17, 41, 36, 21, 130, 10, 132, 17, 5, 0, 5, 40, 132, 146, 6, 152, 21, 4, 33, 74, 20, 66, 152, 34, 66, 5, 168, 96, 148, 0, 148, 97, 80, 9, 89, 162, 101, 22, 33, 0, 26, 21, 100, 40, 36, 68, 101, 5, 86, 5, 153, 152, 86, 70, 24, 26, 42, 4, 101, 69, 88, 88, 20, 149, 1, 41, 6, 1, 165, 0, 133, 21, 37, 70, 89, 6, 86, 74, 154, 24, 154, 150, 150, 21, 5, 36, 97, 128, 106, 17, 166, 26, 33, 24, 69, 34, 166, 40, 105, 37, 42, 138, 36, 5, 68, 42, 22, 70, 42, 42, 5, 2, 20, 0, 162, 21, 165, 146, 32, 8, 130, 146, 129, 17, 146, 38, 73, 161, 137, 25, 66, 6, 154, 5, 33, 89, 80, 98, 38, 170, 65, 6, 74, 5, 22, 10, 154, 106, 101, 0, 144, 18, 5, 97, 20, 1, 69, 20, 164, 16, 36, 86, 153, 26, 97, 6, 25, 21, 66, 82, 34, 34, 32, 37, 134, 8, 10, 101, 81, 37, 148, 1, 1, 138, 98, 166, 16, 34, 33, 25, 37, 8, 105, 32, 25, 34, 40, 70, 138, 160, 80, 105, 168, 138, 20, 17, 149, 152, 80, 5, 8, 17, 73, 166, 34, 34, 5, 168, 105, 25, 98, 96, 153, 21, 69, 20, 145, 154, 25, 40, 148, 5, 150, 88, 0, 152, 2, 37, 20, 149, 17, 32, 81, 21, 38, 101, 65, 37, 6, 42, 22, 6, 134, 24, 37, 17, 137, 17, 104, 104, 42},
    {89, 26, 152, 40, 89, 104, 160, 82, 105, 89, 85, 100, 98, 20, 17, 34, 137, 165, 137, 37, 137, 169, 165, 33, 132, 70, 98, 166, 89, 0, 33, 148, 106, 26, 145, 70, 2, 20, 133, 138, 128, 161, 68, 82, 129, 138, 101, 20, 104, 168, 101, 150, 148, 89, 69, 102, 102, 68, 74, 165, 73, 105, 84, 81, 70, 73, 38, 82, 70, 64, 96, 6, 25, 38, 166, 169, 138, 169, 128, 166, 97, 1, 70, 136, 170, 150, 70, 38, 18, 138, 164, 33, 165, 148, 64, 152, 130, 26, 73, 134, 170, 4, 21, 82, 4, 74, 37, 150, 6, 133, 86, 89, 17, 138, 166, 168, 86, 97, 132, 25, 16, 33, 22, 8, 149, 85, 81, 89, 138, 153, 36, 66, 86, 86, 70, 41, 18, 168, 5, 82, 22, 41, 132, 136, 136, 73, 88, 8, 64, 153, 20, 168, 168, 16, 25, 145, 40, 104, 65, 37, 38, 9, 164, 146, 88, 137, 17, 42, 153, 138, 20, 84, 42, 165, 149, 69, 132, 88, 144, 164, 74, 72, 69, 65, 33, 89, 164, 168, 149, 97, 17, 80, 80, 138, 81, 144, 74, 0, 148, 104, 132, 129, 89, 102, 36, 5, 97, 34, 152, 82, 72, 73, 101, 144, 165, 153, 134, 68, 18, 65, 145, 74, 130, 70, 17, 25, 144, 106, 96, 101, 65, 165, 64, 84, 84, 36, 133, 2, 24, 41, 145, 1, 85, 149, 86, 68, 38, 25, 165, 96, 105, 161, 104, 130, 25, 6, 168, 132, 22, 82, 6, 137, 150, 84, 133, 96, 68, 170, 5, 86, 34, 86, 106, 34, 89, 26, 133, 128, 144, 32, 85, 40, 82, 97, 98, 97, 70, 89, 148, 137, 82, 150, 86, 161, 153, 42, 162, 89, 152, 101, 38, 165, 161, 40, 37, 101, 169, 105, 169, 90, 40, 105, 160, 145, 146, 170, 128, 16, 42, 81, 150, 129, 32, 164, 165, 101, 69, 145, 97, 169, 2, 34, 86, 164, 165, 162, 21, 42, 73, 24, 132, 168, 145, 82, 128, 38, 64, 65, 41, 42, 89, 165, 22, 70, 65, 164, 166, 144, 104, 68, 20, 85, 165, 149, 130, 104, 70, 152, 136, 148, 100, 82, 106, 104, 18, 81, 162, 80, 81, 32, 73, 154, 153, 33},
    {101, 86, 18, 102, 136, 74, 89, 144, 88, 84, 24, 74, 24, 5, 37, 132, 81, 85, 66, 80, 100, 150, 134, 101, 138, 82, 170, 102, 138, 97, 96, 104, 164, 33, 134, 169, 102, 137, 24, 164, 81, 10, 106, 168, 105, 41, 148, 80, 82, 38, 72, 24, 80, 170, 80, 16, 128, 149, 101, 132, 85, 154, 86, 105, 41, 85, 9, 20, 90, 138, 66, 16, 154, 17, 168, 6, 101, 74, 22, 1, 154, 170, 65, 97, 25, 70, 150, 70, 20, 153, 102, 144, 41, 25, 164, 104, 102, 130, 40, 152, 18, 165, 24, 74, 134, 106, 17, 160, 166, 68, 145, 22, 69, 21, 4, 134, 166, 82, 164, 137, 150, 154, 90, 70, 128, 74, 2, 90, 96, 144, 41, 148, 20, 24, 90, 85, 145, 24, 20, 41, 105, 17, 8, 8, 89, 168, 18, 81, 36, 73, 161, 64, 84, 165, 105, 146, 86, 150, 66, 154, 89, 164, 150, 129, 80, 68, 146, 40, 105, 88, 128, 146, 150, 101, 134, 68, 133, 90, 21, 166, 9, 105, 90, 100, 102, 25, 68, 64, 16, 106, 162, 148, 166, 85, 21, 34, 81, 65, 18, 129, 41, 37, 37, 40, 132, 169, 89, 8, 169, 165, 145, 36, 74, 4, 81, 5, 89, 137, 169, 17, 84, 26, 164, 25, 18, 166, 80, 68, 149, 25, 149, 26, 148, 102, 74, 88, 85, 161, 38, 9, 1, 8, 4, 145, 97, 74, 2, 5, 169, 165, 72, 41, 34, 5, 133, 166, 133, 165, 85, 133, 10, 148, 73, 97, 41, 42, 26, 1, 169, 101, 90, 168, 168, 21, 34, 149, 24, 10, 1, 168, 25, 41, 102, 38, 166, 153, 26, 22, 89, 170, 129, 166, 8, 84, 90, 73, 89, 146, 170, 18, 42, 70, 137, 17, 68, 153, 40, 82, 5, 36, 129, 102, 72, 128, 85, 90, 153, 69, 86, 37, 98, 85, 41, 96, 4, 86, 73, 1, 69, 34, 20, 82, 65, 34, 36, 169, 86, 137, 1, 4, 133, 133, 17, 150, 33, 102, 170, 36, 26, 153, 36, 25, 168, 81, 154, 169, 33, 72, 106, 70, 97, 21, 165, 164, 164, 105, 97, 26, 36, 88, 134, 106, 102, 105, 85, 100, 18, 84, 32, 153, 33, 98, 132, 128},
    {138, 166, 69, 146, 34, 82, 36, 169, 73, 102, 153, 42, 5, 6, 32, 162, 161, 98, 88, 97, 22, 90, 73, 22, 65, 152, 149, 149, 133, 164, 146, 134, 65, 85, 64, 22, 153, 25, 6, 4, 70, 104, 160, 21, 42, 145, 90, 80, 130, 137, 25, 40, 84, 133, 149, 90, 145, 146, 168, 26, 132, 2, 145, 90, 74, 10, 68, 32, 98, 132, 149, 98, 154, 82, 5, 154, 5, 10, 66, 145, 170, 137, 21, 130, 96, 81, 85, 165, 68, 133, 160, 144, 104, 6, 25, 20, 82, 5, 137, 137, 41, 88, 74, 81, 150, 150, 100, 17, 0, 104, 84, 40, 130, 149, 168, 106, 24, 88, 68, 105, 25, 128, 162, 105, 6, 169, 21, 21, 25, 9, 41, 102, 102, 129, 101, 165, 152, 129, 74, 68, 24, 136, 154, 106, 18, 86, 130, 145, 154, 134, 81, 73, 33, 74, 21, 38, 149, 136, 38, 134, 42, 90, 102, 24, 168, 149, 128, 5, 152, 32, 6, 5, 136, 21, 130, 136, 66, 101, 101, 2, 129, 134, 85, 42, 150, 88, 106, 73, 154, 25, 90, 25, 96, 138, 33, 166, 145, 6, 165, 9, 152, 105, 130, 26, 0, 20, 132, 104, 40, 148, 37, 24, 106, 96, 161, 168, 130, 84, 89, 1, 133, 96, 128, 40, 68, 153, 85, 81, 105, 105, 34, 80, 90, 89, 90, 18, 24, 133, 145, 97, 98, 4, 101, 22, 18, 105, 66, 134, 37, 10, 102, 150, 149, 98, 162, 89, 106, 152, 38, 145, 165, 84, 128, 34, 73, 41, 144, 24, 17, 25, 104, 100, 42, 85, 101, 0, 170, 154, 132, 73, 105, 98, 160, 40, 16, 20, 5, 36, 153, 16, 21, 9, 136, 80, 22, 81, 98, 42, 104, 89, 41, 133, 69, 68, 34, 90, 106, 65, 153, 1, 146, 129, 34, 26, 21, 170, 25, 88, 32, 165, 64, 18, 21, 88, 97, 170, 16, 82, 36, 80, 166, 133, 102, 25, 81, 90, 4, 168, 136, 144, 168, 22, 82, 4, 100, 102, 5, 98, 40, 34, 25, 42, 73, 66, 145, 96, 96, 90, 168, 24, 22, 21, 149, 4, 153, 165, 8, 101, 165, 168, 170, 130, 153, 154, 137, 165, 73, 22, 134, 69, 74, 145, 26, 150},
    {6, 74, 153, 33, 84, 132, 150, 40, 88, 89, 22, 26, 104, 90, 105, 88, 104, 80, 169, 153, 89, 105, 98, 69, 34, 154, 84, 2, 26, 154, 133, 89, 6, 82, 148, 84, 10, 10, 137, 66, 134, 90, 153, 150, 41, 102, 25, 137, 10, 5, 69, 22, 66, 102, 81, 101, 168, 100, 8, 40, 134, 149, 64, 96, 153, 84, 152, 36, 69, 102, 36, 85, 86, 168, 133, 161, 170, 149, 149, 41, 70, 72, 152, 37, 165, 148, 152, 138, 18, 86, 81, 89, 153, 102, 66, 128, 144, 105, 152, 2, 22, 80, 106, 136, 146, 2, 17, 86, 74, 66, 38, 34, 73, 162, 25, 169, 36, 4, 37, 81, 166, 33, 5, 74, 24, 136, 168, 104, 69, 69, 162, 128, 41, 72, 128, 36, 37, 73, 5, 101, 26, 38, 102, 66, 149, 128, 1, 21, 64, 21, 169, 81, 84, 84, 40, 10, 17, 146, 162, 152, 154, 17, 129, 148, 146, 2, 82, 154, 69, 37, 38, 86, 102, 26, 73, 36, 154, 64, 10, 69, 130, 72, 149, 150, 89, 17, 85, 32, 90, 4, 65, 10, 148, 20, 34, 5, 70, 168, 169, 85, 6, 106, 160, 154, 161, 81, 169, 24, 169, 22, 0, 73, 137, 86, 34, 130, 22, 80, 86, 64, 154, 22, 72, 104, 165, 97, 166, 101, 100, 10, 81, 148, 17, 134, 96, 24, 136, 145, 137, 150, 146, 36, 101, 105, 74, 138, 24, 169, 100, 129, 26, 5, 5, 106, 150, 10, 81, 144, 72, 164, 130, 96, 161, 17, 105, 154, 22, 150, 132, 42, 88, 132, 4, 169, 70, 132, 132, 165, 100, 154, 85, 164, 17, 20, 137, 66, 161, 161, 150, 136, 24, 70, 102, 38, 42, 81, 149, 82, 1, 18, 149, 81, 152, 41, 100, 16, 6, 104, 9, 69, 105, 8, 24, 164, 138, 104, 149, 98, 165, 146, 80, 170, 88, 160, 152, 150, 85, 73, 101, 129, 162, 128, 74, 70, 22, 86, 8, 168, 37, 64, 138, 104, 16, 70, 145, 144, 130, 41, 69, 149, 2, 168, 20, 105, 81, 160, 86, 133, 89, 106, 129, 80, 97, 153, 34, 96, 80, 68, 17, 104, 38, 153, 165, 166, 102, 88, 138, 137, 152, 0, 89, 65, 154, 166},
    {128, 17, 34, 70, 9, 73, 164, 73, 153, 101, 66, 148, 8, 65, 169, 152, 144, 64, 136, 101, 168, 34, 72, 106, 160, 98, 134, 97, 165, 169, 145, 73, 0, 169, 21, 169, 148, 134, 20, 34, 72, 97, 72, 106, 161, 80, 100, 72, 149, 106, 134, 129, 85, 96, 160, 36, 166, 165, 136, 149, 73, 24, 72, 86, 9, 25, 70, 69, 41, 152, 70, 169, 18, 85, 18, 164, 150, 166, 5, 132, 74, 81, 73, 129, 6, 21, 68, 138, 161, 102, 153, 133, 21, 89, 152, 138, 80, 154, 168, 70, 85, 40, 168, 9, 166, 89, 102, 134, 73, 153, 90, 21, 169, 162, 18, 170, 22, 137, 81, 138, 104, 25, 65, 37, 34, 40, 86, 16, 17, 169, 8, 153, 22, 149, 128, 70, 36, 146, 90, 1, 80, 161, 165, 84, 86, 88, 72, 33, 101, 136, 72, 102, 154, 37, 86, 17, 96, 102, 170, 162, 90, 88, 149, 5, 130, 26, 138, 41, 84, 5, 97, 161, 154, 74, 40, 8, 84, 166, 8, 137, 133, 129, 18, 8, 84, 101, 2, 70, 38, 2, 68, 170, 10, 36, 9, 18, 88, 38, 21, 26, 149, 36, 18, 18, 84, 164, 134, 22, 148, 89, 42, 104, 89, 162, 22, 90, 105, 100, 20, 33, 106, 134, 20, 150, 74, 17, 37, 102, 166, 90, 86, 89, 36, 16, 65, 160, 152, 165, 26, 146, 85, 22, 153, 148, 152, 85, 18, 22, 34, 24, 101, 5, 25, 1, 82, 70, 153, 81, 70, 102, 161, 86, 73, 102, 153, 152, 153, 4, 33, 101, 168, 66, 169, 73, 66, 164, 152, 152, 161, 137, 69, 153, 41, 70, 33, 96, 4, 138, 100, 86, 146, 10, 105, 154, 138, 84, 105, 97, 17, 166, 148, 68, 104, 154, 166, 106, 74, 74, 88, 66, 6, 38, 41, 128, 100, 154, 8, 8, 165, 84, 89, 98, 137, 146, 18, 106, 86, 88, 164, 40, 96, 160, 64, 36, 145, 162, 105, 89, 37, 72, 88, 5, 104, 132, 130, 106, 5, 24, 150, 134, 82, 4, 101, 66, 160, 73, 70, 85, 152, 166, 98, 82, 24, 80, 101, 164, 24, 152, 138, 145, 164, 168, 170, 134, 134, 104, 70, 66, 1, 100, 166, 129, 132, 69},
    {64, 36, 100, 128, 82, 65, 153, 98, 81, 10, 18, 34, 89, 37, 96, 41, 165, 88, 64, 66, 38, 133, 149, 148, 164, 84, 81, 22, 25, 153, 162, 106, 162, 72, 97, 10, 22, 42, 88, 105, 37, 36, 96, 74, 34, 101, 82, 86, 66, 86, 168, 149, 25, 85, 8, 22, 85, 154, 10, 88, 74, 41, 41, 100, 170, 9, 97, 169, 134, 81, 4, 18, 144, 85, 2, 106, 154, 38, 149, 85, 134, 136, 100, 86, 150, 100, 70, 10, 64, 134, 149, 137, 10, 4, 85, 166, 164, 170, 25, 90, 130, 160, 133, 150, 26, 100, 162, 36, 165, 37, 32, 72, 16, 64, 37, 1, 138, 37, 8, 4, 0, 16, 148, 105, 1, 152, 72, 37, 82, 134, 101, 153, 24, 105, 64, 90, 134, 25, 16, 102, 21, 74, 73, 0, 138, 137, 137, 64, 84, 145, 65, 36, 136, 137, 6, 2, 5, 42, 38, 10, 162, 86, 86, 132, 38, 36, 42, 1, 150, 90, 9, 86, 134, 84, 18, 132, 24, 162, 133, 166, 41, 98, 33, 96, 25, 85, 97, 38, 166, 164, 9, 84, 82, 170, 168, 106, 65, 138, 18, 148, 97, 5, 73, 41, 161, 130, 165, 2, 154, 105, 170, 73, 41, 88, 42, 153, 70, 97, 102, 148, 138, 85, 37, 86, 34, 5, 154, 149, 133, 166, 130, 166, 25, 86, 73, 136, 100, 9, 152, 68, 100, 97, 150, 168, 169, 65, 64, 73, 37, 82, 70, 74, 90, 134, 169, 100, 154, 73, 146, 170, 86, 74, 66, 73, 168, 36, 34, 152, 168, 65, 80, 34, 148, 80, 74, 145, 86, 4, 169, 105, 21, 170, 165, 18, 20, 25, 166, 74, 98, 144, 165, 161, 20, 168, 148, 133, 148, 0, 9, 105, 80, 162, 37, 80, 0, 42, 10, 101, 102, 164, 32, 34, 129, 5, 160, 104, 73, 68, 82, 85, 85, 166, 5, 68, 82, 82, 73, 154, 41, 169, 129, 97, 84, 150, 37, 90, 137, 38, 2, 97, 9, 16, 146, 146, 82, 6, 22, 84, 165, 65, 42, 136, 42, 128, 26, 98, 34, 165, 5, 81, 88, 9, 106, 90, 33, 136, 86, 130, 136, 149, 37, 168, 90, 0, 170, 161, 36, 85, 106, 104, 22, 85, 170, 138}
};
# 28 "./data_include.h" 2
# 1 "./data_4th/ln_weight_in.h" 1

const attn_fixed_t ln_weight_in[384] = {
    0.47119140625, 0.45751953125, 0.5048828125, 0.44189453125, 0.44970703125, 0.50732421875, 0.461669921875, 0.5107421875, 0.4970703125, 0.44140625, 0.469970703125, 0.52880859375, 0.46826171875, 0.47119140625, 0.51416015625, 0.51904296875, 0.51953125, 0.50341796875, 0.533203125, 0.45849609375, 0.51904296875, 0.50341796875, 0.478271484375, 0.468017578125, 0.5166015625, 0.4716796875, 0.50732421875, 0.470703125, 0.47216796875, 0.50830078125, 0.427490234375, 0.47509765625, 0.45849609375, 0.47705078125, 0.4443359375, 0.501953125, 0.489501953125, 0.5009765625, 0.505859375, 0.398681640625, 0.513671875, 0.50048828125, 0.48193359375, 0.50048828125, 0.513671875, 0.50341796875, 0.453857421875, 0.495849609375, 0.4580078125, 0.50634765625, 0.47119140625, 0.51513671875, 0.492919921875, 0.51904296875, 0.51123046875, 0.47900390625, 0.5048828125, 0.505859375, 0.4609375, 0.505859375, 0.401123046875, 0.55615234375, 0.492919921875, 0.3740234375, 0.494140625, 0.462646484375, 0.5078125, 0.45263671875, 0.4775390625, 0.5234375, 0.47314453125, 0.47265625, 0.424072265625, 0.5146484375, 0.473876953125, 0.50439453125, 0.43408203125, 0.46630859375, 0.474365234375, 0.430419921875, 0.47265625, 0.53564453125, 0.5263671875, 0.51318359375, 0.51025390625, 0.50439453125, 0.460693359375, 0.43798828125, 0.46240234375, 0.50048828125, 0.463134765625, 0.4677734375, 0.5205078125, 0.51171875, 0.484130859375, 0.4091796875, 0.45654296875, 0.51025390625, 0.54638671875, 0.5009765625, 0.425537109375, 0.479248046875, 0.4658203125, 0.5087890625, 0.417724609375, 0.56689453125, 0.5107421875, 0.457275390625, 0.47216796875, 0.481201171875, 0.51513671875, 0.5126953125, 0.51904296875, 0.469482421875, 0.51708984375, 0.5361328125, 0.50439453125, 0.456787109375, 0.501953125, 0.47705078125, 0.46337890625, 0.5048828125, 0.47216796875, 0.487548828125, 0.5087890625, 0.471435546875, 0.46337890625, 0.50927734375, 0.63525390625, 0.484375, 0.50634765625, 0.496337890625, 0.45703125, 0.5029296875, 0.5205078125, 0.4453125, 0.428466796875, 0.517578125, 0.448974609375, 0.484375, 0.51123046875, 0.450927734375, 0.5048828125, 0.50048828125, 0.51904296875, 0.5009765625, 0.48486328125, 0.46630859375, 0.484130859375, 0.50732421875, 0.491943359375, 0.50439453125, 0.451904296875, 0.48486328125, 0.51318359375, 0.5048828125, 0.4853515625, 0.474853515625, 0.459716796875, 0.51318359375, 0.50439453125, 0.50146484375, 0.471923828125, 0.50927734375, 0.495361328125, 0.4912109375, 0.46142578125, 0.5244140625, 0.36767578125, 0.48193359375, 0.50244140625, 0.5009765625, 0.445068359375, 0.471923828125, 0.49267578125, 0.446044921875, 0.47705078125, 0.50830078125, 0.480224609375, 0.541015625, 0.5048828125, 0.48583984375, 0.46435546875, 0.45703125, 0.4833984375, 0.445556640625, 0.5234375, 0.474365234375, 0.440673828125, 0.429443359375, 0.45849609375, 0.50830078125, 0.439697265625, 0.50732421875, 0.50830078125, 0.46533203125, 0.471435546875, 0.50439453125, 0.477783203125, 0.478759765625, 0.48828125, 0.465087890625, 0.48681640625, 0.466552734375, 0.5205078125, 0.45458984375, 0.51171875, 0.485107421875, 0.43115234375, 0.5029296875, 0.439453125, 0.50146484375, 0.52587890625, 0.5107421875, 0.465576171875, 0.44189453125, 0.47705078125, 0.4794921875, 0.465087890625, 0.50146484375, 0.478271484375, 0.47900390625, 0.5263671875, 0.50732421875, 0.4892578125, 0.49365234375, 0.53564453125, 0.513671875, 0.46435546875, 0.50537109375, 0.51123046875, 0.509765625, 0.47802734375, 0.52783203125, 0.4853515625, 0.470458984375, 0.5283203125, 0.51806640625, 0.51416015625, 0.455810546875, 0.46044921875, 0.457763671875, 0.416748046875, 0.50537109375, 0.47216796875, 0.50537109375, 0.480712890625, 0.477783203125, 0.53125, 0.50634765625, 0.4560546875, 0.5078125, 0.493408203125, 0.483642578125, 0.5146484375, 0.474609375, 0.513671875, 0.50732421875, 0.50830078125, 0.52685546875, 0.51220703125, 0.51220703125, 0.4619140625, 0.47998046875, 0.4736328125, 0.50244140625, 0.474365234375, 0.4716796875, 0.392333984375, 0.50341796875, 0.460205078125, 0.451904296875, 0.4658203125, 0.47021484375, 0.5029296875, 0.5029296875, 0.49169921875, 0.50244140625, 0.48876953125, 0.501953125, 0.46044921875, 0.416015625, 0.454833984375, 0.486328125, 0.52099609375, 0.546875, 0.505859375, 0.46923828125, 0.472900390625, 0.484375, 0.50830078125, 0.4873046875, 0.50634765625, 0.48779296875, 0.45166015625, 0.42333984375, 0.5029296875, 0.468994140625, 0.4853515625, 0.465576171875, 0.462646484375, 0.48681640625, 0.47314453125, 0.485595703125, 0.51513671875, 0.457275390625, 0.40380859375, 0.5009765625, 0.491455078125, 0.458740234375, 0.4521484375, 0.47998046875, 0.5078125, 0.472900390625, 0.5283203125, 0.442138671875, 0.509765625, 0.47802734375, 0.50830078125, 0.5029296875, 0.450439453125, 0.4677734375, 0.462646484375, 0.490966796875, 0.509765625, 0.5068359375, 0.50048828125, 0.478759765625, 0.47900390625, 0.45703125, 0.482177734375, 0.50927734375, 0.46142578125, 0.50390625, 0.497802734375, 0.49462890625, 0.501953125, 0.427978515625, 0.50341796875, 0.483154296875, 0.456298828125, 0.427978515625, 0.51220703125, 0.482421875, 0.50537109375, 0.47021484375, 0.454345703125, 0.477783203125, 0.47412109375, 0.468505859375, 0.439453125, 0.521484375, 0.4619140625, 0.452880859375, 0.5166015625, 0.51416015625, 0.515625, 0.468994140625, 0.48779296875, 0.533203125, 0.454833984375, 0.50341796875, 0.416015625, 0.4560546875, 0.5234375, 0.4599609375, 0.476318359375, 0.44091796875, 0.47607421875, 0.50732421875, 0.458984375, 0.420654296875, 0.468505859375, 0.463134765625, 0.533203125, 0.5537109375, 0.47509765625, 0.490234375, 0.51953125, 0.47900390625, 0.489501953125, 0.464111328125, 0.47265625, 0.501953125
};
# 29 "./data_include.h" 2
# 1 "./data_4th/ln_weight.h" 1

const attn_fixed_t ln_weight[384] = {
    0.089050292969, 0.071960449219, 0.091247558594, 0.090576171875, 0.088439941406, 0.09130859375, 0.089050292969, 0.090942382812, 0.091857910156, 0.088806152344, 0.088073730469, 0.08984375, 0.0888671875, 0.086547851562, 0.092651367188, 0.091613769531, 0.088500976562, 0.087280273438, 0.085815429688, 0.091491699219, 0.090942382812, 0.0888671875, 0.0888671875, 0.093078613281, 0.086120605469, 0.083312988281, 0.086547851562, 0.087219238281, 0.093017578125, 0.067993164062, 0.093139648438, 0.083984375, 0.08935546875, 0.085083007812, 0.085510253906, 0.089050292969, 0.090393066406, 0.092346191406, 0.08837890625, 0.096496582031, 0.089782714844, 0.093872070312, 0.089904785156, 0.085021972656, 0.089294433594, 0.085998535156, 0.086242675781, 0.086364746094, 0.085998535156, 0.087951660156, 0.091430664062, 0.087158203125, 0.0869140625, 0.0791015625, 0.090087890625, 0.088928222656, 0.08935546875, 0.094177246094, 0.090148925781, 0.089233398438, 0.086853027344, 0.090698242188, 0.085083007812, 0.085998535156, 0.093078613281, 0.090454101562, 0.082824707031, 0.086975097656, 0.088806152344, 0.085571289062, 0.090026855469, 0.087097167969, 0.093933105469, 0.0869140625, 0.086120605469, 0.093078613281, 0.086547851562, 0.084777832031, 0.090087890625, 0.087585449219, 0.086853027344, 0.0869140625, 0.085754394531, 0.091613769531, 0.083679199219, 0.089782714844, 0.081848144531, 0.086486816406, 0.090637207031, 0.091857910156, 0.089782714844, 0.058471679688, 0.090087890625, 0.093994140625, 0.09228515625, 0.091186523438, 0.072326660156, 0.071594238281, 0.070739746094, 0.072998046875, 0.07470703125, 0.07470703125, 0.074157714844, 0.072265625, 0.071411132812, 0.074035644531, 0.073608398438, 0.070922851562, 0.072937011719, 0.075500488281, 0.07373046875, 0.075073242188, 0.0712890625, 0.071838378906, 0.073669433594, 0.0712890625, 0.0703125, 0.069274902344, 0.072692871094, 0.075134277344, 0.071533203125, 0.050842285156, 0.073059082031, 0.074096679688, 0.076049804688, 0.075134277344, 0.076049804688, 0.072143554688, 0.073547363281, 0.073181152344, 0.071655273438, 0.073181152344, 0.070007324219, 0.06787109375, 0.074645996094, 0.071105957031, 0.071655273438, 0.071655273438, 0.072875976562, 0.074401855469, 0.072570800781, 0.073669433594, 0.073059082031, 0.074645996094, 0.064819335938, 0.071044921875, 0.074157714844, 0.073059082031, 0.076049804688, 0.074462890625, 0.06982421875, 0.071350097656, 0.075744628906, 0.07275390625, 0.071411132812, 0.071105957031, 0.073913574219, 0.073364257812, 0.075134277344, 0.074096679688, 0.074584960938, 0.069763183594, 0.0751953125, 0.073547363281, 0.073913574219, 0.073303222656, 0.073364257812, 0.070678710938, 0.0712890625, 0.075439453125, 0.07275390625, 0.074157714844, 0.06982421875, 0.072692871094, 0.073364257812, 0.073120117188, 0.073364257812, 0.07275390625, 0.073364257812, 0.073181152344, 0.071166992188, 0.075927734375, 0.074462890625, 0.075134277344, 0.070556640625, 0.073120117188, 0.072631835938, 0.070617675781, 0.072387695312, 0.076354980469, 0.071838378906, 0.071899414062, 0.061309814453, 0.050018310547, 0.064575195312, 0.060516357422, 0.062469482422, 0.061889648438, 0.062561035156, 0.06591796875, 0.066467285156, 0.0634765625, 0.041046142578, 0.064270019531, 0.063598632812, 0.059692382812, 0.063659667969, 0.0654296875, 0.057067871094, 0.063598632812, 0.065673828125, 0.060424804688, 0.061920166016, 0.064819335938, 0.062866210938, 0.058166503906, 0.064392089844, 0.065185546875, 0.055053710938, 0.066345214844, 0.065124511719, 0.062072753906, 0.060150146484, 0.058807373047, 0.065002441406, 0.064208984375, 0.058258056641, 0.065124511719, 0.063171386719, 0.064453125, 0.063903808594, 0.065246582031, 0.064453125, 0.063537597656, 0.065124511719, 0.062133789062, 0.057250976562, 0.063781738281, 0.061737060547, 0.061492919922, 0.051483154297, 0.058990478516, 0.061676025391, 0.063842773438, 0.063842773438, 0.064453125, 0.065063476562, 0.059295654297, 0.065673828125, 0.06591796875, 0.064147949219, 0.064636230469, 0.063293457031, 0.062286376953, 0.062927246094, 0.064086914062, 0.06640625, 0.06396484375, 0.062927246094, 0.06396484375, 0.048400878906, 0.064147949219, 0.060760498047, 0.058074951172, 0.062042236328, 0.061737060547, 0.067626953125, 0.063781738281, 0.060546875, 0.052551269531, 0.065979003906, 0.062408447266, 0.061309814453, 0.066467285156, 0.051574707031, 0.065307617188, 0.059600830078, 0.063049316406, 0.057647705078, 0.064392089844, 0.064270019531, 0.064819335938, 0.0634765625, 0.064514160156, 0.064331054688, 0.064086914062, 0.065734863281, 0.065490722656, 0.099792480469, 0.072265625, 0.102478027344, 0.104675292969, 0.102478027344, 0.101440429688, 0.099975585938, 0.1005859375, 0.101501464844, 0.103271484375, 0.067687988281, 0.100341796875, 0.097839355469, 0.103454589844, 0.10009765625, 0.077758789062, 0.101257324219, 0.099487304688, 0.096008300781, 0.1025390625, 0.069030761719, 0.102783203125, 0.100280761719, 0.102600097656, 0.100769042969, 0.098815917969, 0.093444824219, 0.097412109375, 0.104064941406, 0.091796875, 0.101196289062, 0.066162109375, 0.101501464844, 0.101684570312, 0.105041503906, 0.103820800781, 0.083557128906, 0.099609375, 0.095703125, 0.100158691406, 0.101501464844, 0.09912109375, 0.103149414062, 0.097045898438, 0.097351074219, 0.10009765625, 0.098510742188, 0.104064941406, 0.099609375, 0.101623535156, 0.107421875, 0.097534179688, 0.095886230469, 0.099243164062, 0.099182128906, 0.069885253906, 0.102600097656, 0.10205078125, 0.099975585938, 0.075439453125, 0.101135253906, 0.104370117188, 0.101501464844, 0.096496582031, 0.096374511719, 0.101440429688, 0.097473144531, 0.098205566406, 0.097045898438, 0.102722167969, 0.105651855469, 0.025985717773, 0.0888671875, 0.104064941406, 0.106872558594, 0.102294921875, 0.100708007812, 0.100646972656, 0.100036621094, 0.103515625, 0.104797363281, 0.100036621094, 0.098571777344, 0.099060058594, 0.094360351562, 0.101196289062, 0.093994140625, 0.097961425781, 0.10400390625, 0.097534179688, 0.10009765625, 0.103271484375, 0.1044921875, 0.103393554688, 0.094848632812, 0.10009765625
};
# 30 "./data_include.h" 2
# 1 "./data_4th/k_cache.h" 1

const attn_fixed_t k_cache[8][5][48] = {
    {
        {0.00492654508, 0.080056354403, -0.151491254568, 0.068971626461, -0.00246327254, 0.064045086503, -0.333773434162, -0.120700351894, -0.091141082346, 0.01108472608, -0.033254180104, -0.020937815309, -0.029559269547, -0.254948705435, -0.301750868559, 0.028327632695, 0.087446175516, -0.077593080699, -0.410134881735, -0.197061792016, -0.58256393671, -0.775930821896, -0.553004682064, 0.481569766998, -0.028327632695, -0.890473008156, 0.791942119598, -0.953286468983, -0.123163625598, -0.083751261234, -0.01108472608, -0.735286831856, -0.018474543467, 2.409080505371, 2.039589643478, 0.028327632695, -1.657782435417, 2.480515480042, -0.852292299271, 2.131962299347, 0.342394888401, -0.838744282722, 2.564266681671, -0.642914116383, 0.519750475883, -0.025864360854, 0.904021024704, -1.644234418869},
        {2.571626663208, -2.718920230865, 2.514569282532, -4.272591590881, -3.293135166168, -2.787956953049, -3.65213394165, -0.361724406481, -3.518580913544, -2.180285930634, 1.029585838318, -1.556370973587, -1.357816457748, -0.365491569042, -1.111213684082, 0.062982454896, -0.222450688481, -1.927051067352, -2.342674016953, -2.834894657135, -2.482428073883, -2.083120346069, -1.45510828495, 2.306491136551, 3.078716516495, -0.726966440678, 0.46792730689, -0.924917221069, 0.471465528011, -1.003922820091, -0.288550853729, -1.390872597694, 2.603087186813, 0.693864405155, 1.985159516335, 1.899570465088, 2.722888708115, 1.907366156578, -1.81204354763, 3.190175056458, 3.672522783279, 0.712942898273, 2.00345158577, -0.860117137432, 0.523496389389, 0.723586142063, -1.851405620575, 1.887594938278},
        {3.794151067734, -1.544806599617, -0.85710054636, -2.877583742142, -1.907024860382, -1.797299265862, -1.819860339165, -1.182093143463, 0.290025621653, -0.410651445389, 0.920053839684, -1.505759716034, -1.631602168083, -0.649601221085, -1.062213778496, 1.061968326569, 1.823609471321, 0.114424794912, -1.751623034477, -1.65546298027, -1.059678673744, 0.630418479443, -1.633036017418, 1.064099669456, 2.724758625031, -2.909583091736, -0.750756204128, -3.793886899948, 1.009985804558, -1.290856957436, -0.577658653259, -0.11691442132, 0.293412864208, 2.499632120132, 1.13133585453, 2.356757879257, 2.715021848679, 3.535396099091, -1.748269081116, 3.042409658432, 2.187077283859, -0.533788323402, 1.700837373734, -1.838774204254, 1.537974596024, 0.875832021236, -1.99142742157, 0.741775214672},
        {1.501613616943, 0.579032838345, 1.18618273735, -0.391360282898, -1.008691310883, -0.587904393673, -0.195014357567, -0.53968256712, -2.890017271042, 1.015327095985, 1.19538795948, -1.47784113884, -0.979253649712, -0.424831628799, -0.720589160919, 0.84782910347, -0.574778556824, -2.34506893158, -1.873614430428, -1.15674674511, -0.172069191933, -2.60071182251, -0.975354254246, 2.366975069046, -0.211630478501, -2.04861664772, -1.694981336594, -1.620200634003, 0.058717746288, -3.685715198517, -0.042021609843, -3.120784044266, 1.597625255585, 1.076956033707, 1.940886378288, 1.924509525299, 2.825551986694, 3.039618968964, -2.393847703934, 1.840501308441, 2.413316249847, -1.801265716553, 1.927670121193, -0.899095833302, 1.137611627579, 0.490656137466, -2.749083042145, 1.892522335052},
        {-1.252646207809, 1.628173828125, -0.804421782494, -1.082649469376, 0.168530002236, 0.548455715179, -1.483300328255, 1.663278579712, 0.806732594967, 0.360960662365, 1.717539310455, -0.975705325603, -2.554034471512, -0.894484519958, -0.127157509327, 1.758206129074, 0.177295476198, -1.597007393837, -0.826360344887, 0.712783813477, -1.349407672882, -1.425215482712, -0.603102147579, -0.280710548162, 0.800270617008, -0.628375709057, 1.166675567627, -1.05967605114, 0.028525624424, 0.25173920393, 0.506806135178, -0.464520365, 1.691925883293, 2.005087375641, 1.592973232269, 1.784104943275, 2.004021167755, 3.776349067688, 0.486098855734, 2.910359144211, 2.227890491486, -1.550957679749, 4.141250610352, -2.155183553696, 1.158748626709, 1.617725014687, -2.120289802551, 2.302783966064}
    },
    {
        {0.126858532429, 0.020937815309, 0.014779634774, -0.137943252921, -0.328846871853, 0.057886902243, -0.030790906399, 0.017242906615, -0.10592071712, -0.124395258725, 0.230315983295, -0.086214534938, 0.044338904321, -0.035717450082, 0.06527671963, -0.014779634774, -0.044338904321, 0.071434900165, 0.104689083993, -0.373185783625, -0.082519628108, -0.374417424202, -1.065365314484, 0.325151979923, -0.018474543467, 0.399050146341, -0.098530896008, -0.044338904321, -0.290666162968, -1.117094039917, -1.030879497528, -0.844902455807, -0.369490861893, 0.753761351109, -1.694731473923, -2.384447813034, 1.24395263195, 0.897862792015, -3.169000148773, 0.131785079837, -0.210609793663, -0.50497084856, -1.389285683632, -1.083839893341, -2.533475637436, -2.280990362167, 0.302982509136, -0.135479986668},
        {-2.580265283585, -0.458861470222, 1.969399690628, 1.287046909332, -0.713607311249, -1.106692433357, 3.384342432022, -0.81702786684, 1.034380078316, -0.75227022171, -2.228767871857, -0.836211562157, 0.703949868679, 2.655859231949, -1.551801919937, -2.090904951096, 1.291175723076, 1.917707562447, -2.358294248581, 0.327279478312, 1.951548814774, -2.475511312485, 0.36149340868, 1.59619641304, -0.396094620228, 0.601383507252, -1.422127008438, 2.379381656647, -0.845329523087, -1.694973111153, -1.489171147346, -2.785502195358, -0.246524706483, -3.506594419479, -1.27278637886, 2.38742184639, 1.272193312645, 1.379076719284, -0.482037961483, -1.333245038986, -0.585505485535, 1.140018701553, -0.026984695345, 2.263324022293, 2.246428251266, 3.558738231659, -3.040753364563, -1.110209703445},
        {-2.370379209518, -1.888026237488, 4.394861221313, 2.30876159668, 0.637249231339, -3.491300106049, 2.583955526352, -1.96773314476, 1.239283561707, -0.55787563324, -3.205099582672, -2.554696798325, 1.05920279026, 1.729278326035, -1.083615422249, -1.170987606049, 0.19871070981, 1.822614431381, -1.431640625, -1.127995014191, 0.905844092369, -3.210968494415, -1.481316685677, 1.591198325157, 1.029247999191, 0.143623232841, -1.838986754417, 0.053817689419, -1.923038840294, -0.521512150764, -1.579794049263, -1.665832519531, -1.359163761139, -1.132289290428, -3.256351947784, 4.068067550659, 1.875825762749, 1.522693872452, -1.669668316841, -2.086458683014, -1.95415699482, 1.097580313683, -0.732783257961, 2.219063520432, 3.12483215332, 2.079769134521, -3.120131731033, -2.895593166351},
        {0.483321726322, -2.571916103363, 2.842200279236, -0.309297561646, -0.749705553055, -1.386549472809, 0.770189523697, -1.254751801491, -0.291381001472, -1.146055936813, -2.180433988571, -1.409249067307, 2.10292339325, 2.096725463867, -1.181732535362, -2.133818149567, -0.697087585926, -0.327434182167, -2.605107545853, -1.396693706512, 1.14634680748, -1.928915739059, -0.418456405401, 0.290971338749, -0.004485243931, 0.382722973824, -2.37380361557, 0.591240406036, -1.897401332855, -2.010707139969, 0.333294689655, 1.049951672554, -0.35665845871, -1.267253398895, -0.967072367668, 2.69860291481, 1.483612775803, 0.911088585854, -1.603051781654, -2.040271282196, -2.101934671402, 2.633526086807, -1.145066738129, 2.097632169724, 2.02631354332, 0.265423595905, -2.123209953308, -1.128111124039},
        {1.320875525475, -1.404227852821, 0.218112379313, -1.046974539757, -0.885841727257, 1.406050205231, 0.374586075544, 0.963602423668, -0.93913769722, -1.42379450798, 0.027482956648, -1.157535433769, 0.922671914101, 0.837380051613, 0.2365860641, -1.04995405674, 0.747042119503, -0.110846154392, -1.184229373932, 0.066829249263, 0.460682123899, -1.16916000843, -0.865310013294, 2.074033498764, 0.077351719141, 0.552729904652, -1.61428129673, 2.139934062958, -0.11761598289, -0.982523798943, -0.091250985861, -0.794460475445, -2.060675144196, -0.038183074445, -1.425160884857, 0.956657707691, 2.633229494095, 3.196599960327, -2.628936290741, -1.758123517036, -2.316532611847, 0.638426780701, -2.647216796875, 3.208466768265, 3.185414791107, 0.981092751026, -0.567778646946, -3.49348950386}
    },
    {
        {0.174892351031, -0.041875630617, 0.071434900165, -0.043107267469, -0.155186161399, -0.00985309016, -0.016011271626, 0.019706180319, -0.13055343926, -0.363332688808, 0.173660710454, 0.076361447573, -0.182282164693, -0.088677808642, -0.139174893498, 0.157649442554, -0.028327632695, -0.22415779531, -0.415061414242, 0.147796347737, -0.030790906399, -0.188440337777, -0.008621453308, 0.163807615638, -0.317762136459, 0.043107267469, 0.70449590683, 0.264801800251, 0.261106878519, -0.064045086503, 0.150259628892, -0.427377790213, -0.833817720413, 0.155186161399, -0.102225810289, -0.032022543252, -1.357263088226, 0.653998851776, 0.871998488903, -1.989092588425, -0.636755943298, 0.107152350247, -2.50022149086, -3.66658115387, 3.712151527405, -2.915282964706, 2.288380146027, 4.385856628418},
        {-1.980555057526, 1.03268289566, 1.47948718071, 2.032140016556, 1.365554571152, -1.636924505234, 1.276732206345, 1.923259735107, -3.194729089737, 1.537402868271, 0.931987464428, -1.415564417839, 1.799999833107, -2.546540498734, 0.181662425399, -2.147344589233, 0.876773059368, -0.287896752357, -0.190630108118, -0.38683706522, 0.657691538334, 0.221182584763, 1.358795166016, 0.507885575294, -2.194569826126, -0.955183744431, 0.103188537061, 0.596084654331, 2.700299024582, -1.454384446144, -1.735240697861, 0.073526889086, -0.998195588589, -0.048074416816, -1.273361802101, 1.947023510933, 2.421450376511, 1.740894198418, 0.672187387943, -0.613579034805, -2.451874256134, 0.171463623643, 1.482202410698, 0.383510619402, -1.879257202148, 1.261440634727, -1.460973262787, -1.522958755493},
        {1.785491108894, 2.24983048439, -1.682447910309, 3.70396900177, 1.560451030731, -2.049648523331, 1.935366988182, 1.404443383217, -3.981891155243, 3.046209096909, 0.15870141983, -0.71701836586, 0.550152599812, -1.807067275047, -2.113592863083, -1.115758061409, 1.328551292419, 1.81362593174, -1.744752049446, -1.131194829941, -0.113056868315, -1.605815529823, 0.094582498074, 2.829019069672, -0.450033336878, 0.891009747982, 2.693294763565, 0.655459046364, 2.131683349609, -2.285964727402, -0.678660154343, -0.132281497121, -2.046424388885, 3.033471345901, -2.378827095032, 2.292696237564, 1.985902428627, 1.692312955856, -0.824030220509, -0.659832537174, -1.457796096802, 0.890842437744, -0.788065314293, 0.70861440897, -2.291834831238, 0.959434986115, -0.310561269522, -2.43696808815},
        {1.604874134064, -1.80686545372, -3.311026334763, 2.733938217163, 2.649896860123, 2.242327451706, -0.214308619499, -0.11353841424, -3.095749378204, 1.760845184326, -0.62891459465, -2.963932514191, -0.172347322106, -2.596717357635, 2.052020072937, -1.924745559692, 0.654692411423, 3.324101924896, -1.411107420921, -0.563957989216, 1.356607675552, -3.265284061432, 1.969758033752, 0.313794970512, -2.14883351326, -0.890920519829, 0.741218626499, -0.665053427219, 2.977468729019, -1.155890583992, -0.745497524738, 0.146538928151, -2.969368696213, 0.935054540634, -1.780187129974, 2.96360373497, 2.219021081924, 3.146926879883, -0.389661371708, 0.242302298546, -3.109164237976, 0.584729075432, 0.59731400013, 2.259888887405, -2.263448476791, 1.179176807404, 0.178815573454, -2.377564430237},
        {0.889707148075, -0.312022477388, 0.838506698608, -0.674971342087, -0.760240137577, -0.085818491876, 0.771333396435, 0.163267105818, 0.364429652691, -0.378656089306, 0.509415030479, 1.75347495079, 0.543093681335, 0.120522916317, -0.353961765766, 0.880500435829, 0.206552222371, 0.263761401176, -0.764345526695, -1.247511267662, 1.27862071991, -0.951520740986, 1.115444660187, 1.01648235321, -0.445160031319, 0.595197379589, 1.415482521057, 2.312695026398, 1.119107604027, -0.516528248787, -0.296815931797, -1.531174898148, -1.787878513336, 2.166619539261, -4.982639789581, 3.174689769745, 1.690506100655, 1.425918102264, -2.578141450882, -2.979636669159, -0.550538301468, 0.917631566525, 1.136430501938, 0.533330857754, -0.795923769474, 1.243785023689, -0.202316656709, -0.78323662281}
    },
    {
        {0.012316362001, -0.016011271626, 0.027095997706, -0.188440337777, -0.054191995412, 0.108383990824, -0.003694908693, 0.144101440907, 0.10592071712, -0.094835989177, 0.086214534938, -0.109615623951, 0.086214534938, -0.068971626461, 0.206914886832, 0.078824721277, 0.13424834609, -0.427377790213, -0.325151979923, 0.322688698769, 0.300519257784, -0.553004682064, -0.653998851776, 0.424914509058, -0.157649442554, -0.543151557446, -0.115773804486, -0.28943452239, -0.604733407497, 0.525908648968, 1.214393377304, 1.048122406006, -0.498812675476, 1.957069993019, -0.821501374245, 2.585204362869, -0.975455880165, -0.730360269547, -2.098708152771, 0.152722895145, 1.17128610611, -0.724202096462, -2.136888980865, 0.936043560505, -0.804258465767, 2.066685676575, -0.217999622226, -0.923727154732},
        {-0.871389627457, -0.791204571724, 1.878248095512, 0.507939457893, 1.289377570152, -0.228752374649, -2.309050321579, 0.504691362381, 0.068969547749, 1.458263397217, -2.716699123383, 1.239196658134, -1.251086354256, -0.900030374527, -1.199584245682, -1.218487620354, -1.036838650703, -1.589081287384, -0.249860882759, 2.149045228958, 1.240036845207, -1.166331410408, -1.170730352402, 3.405476331711, 0.286056995392, -0.635685145855, -0.079046875238, -1.540325045586, -0.594117820263, -1.821562051773, 0.426665067673, 3.808003664017, 1.65608227253, 1.476778864861, 4.027370929718, 3.103399753571, -2.805996179581, -1.52557694912, -3.493351221085, -0.273544698954, 2.287670850754, 0.075049079955, 1.121810793877, -2.061286687851, -2.000236272812, -2.035623073578, -3.075474023819, -1.316747784615},
        {-2.008714914322, -0.563862264156, 1.618005394936, -0.615935921669, 1.118275523186, 1.464184165001, -2.607236146927, -0.402101576328, 0.436115443707, 1.96990442276, 0.81319218874, 1.240039467812, -0.775671899319, 0.71355843544, -2.982469797134, -0.54571378231, -0.274213194847, -1.577741384506, -1.86261677742, 2.636192321777, 1.292400240898, -0.526829481125, -0.980704128742, 1.935627818108, -1.75471496582, 0.319554805756, 0.537246346474, 0.258098870516, -2.317061901093, 0.431489497423, 0.722608685493, 0.100151002407, -0.163652971387, 0.806357622147, 2.572791576385, 3.090796470642, -1.023082375526, -3.087613344193, -2.350625991821, -0.922259986401, 1.074671387672, -1.490486502647, 1.834923148155, -2.59734416008, -2.47435426712, -2.656289100647, -3.088215827942, 1.018426060677},
        {-1.537096619606, 0.513608217239, 1.827956199646, -3.238281965256, 0.492128223181, 2.001004934311, -0.247512876987, -1.411835670471, -0.110581725836, 0.098344102502, -0.57234364748, 3.017187595367, -1.985558986664, 0.626396894455, -1.621379613876, -0.23941513896, -0.813455283642, -1.75769174099, -1.156589150429, -0.06402553618, 2.391073703766, -1.138075470924, -3.288192272186, 1.043320655823, -1.944803595543, -1.543040633202, 0.395934075117, -1.099178195, -1.735791563988, 0.37586286664, 0.249888628721, 2.125284433365, 0.467160195112, 1.435731649399, 4.176731586456, 2.098326921463, -1.876059174538, -1.717698454857, -0.353994995356, -1.394505739212, 0.622512996197, -1.480210661888, 1.603680968285, -2.093740940094, -1.652087450027, -2.721643924713, -2.009517669678, 0.873250544071},
        {0.156246334314, 0.553685545921, 0.630709946156, -1.31894159317, 0.295467585325, -0.096721425653, 0.446826606989, -1.041627049446, -0.559164524078, 0.421465426683, 0.338962137699, 0.192501962185, -0.286061227322, -0.353091388941, -1.526486515999, 1.184620261192, 0.279236912727, -0.705720663071, -1.506650209427, 0.405124753714, 0.001984730363, 0.342470288277, 0.292975664139, 1.488486647606, -1.024017572403, -0.354298859835, -0.894328832626, -1.292242646217, -1.661313056946, -0.309211969376, 0.430125653744, 0.809003829956, 1.012641787529, 2.737533330917, 1.667281031609, 2.561122179031, -1.645978569984, -2.548424243927, -1.713458180428, 0.0065314807, 1.704364538193, -1.601836323738, 2.88184094429, -2.441910982132, -2.368622303009, -2.197778940201, -1.873061060905, 2.330272197723}
    },
    {
        {0.027095997706, 0.20814652741, 0.096067629755, 0.242632344365, 0.397818505764, -0.007389817387, 0.520982146263, 0.124395258725, -0.275886505842, -0.220462888479, 0.198293432593, -0.368259251118, -0.14656470716, 0.266033440828, 0.219231247902, 0.209378167987, 0.39166033268, 0.024632724002, -0.056655265391, -0.016011271626, 0.04064399749, -0.234010890126, 0.307909071445, -0.379343956709, 0.213073074818, 0.121931985021, -0.157649442554, 0.455705404282, 0.045570541173, -0.103457443416, 0.690947949886, -0.811648309231, -0.230315983295, 0.912642478943, 1.533387064934, -0.729128658772, 0.879388272762, -2.324097633362, 0.798100292683, 0.995162069798, 2.213250398636, 0.849829018116, -3.489225387573, 1.502596259117, 4.097653865814, -5.252928733826, 1.884403467178, -0.210609793663},
        {-0.694727420807, -0.414700269699, 1.154759883881, -0.356089770794, -1.61850810051, 1.82035779953, -0.624167382717, -1.398355484009, 2.860728025436, 1.024528026581, 1.46819126606, -1.002707362175, 0.421653211117, 1.214358210564, 0.207724511623, -2.192462682724, 0.503166615963, -1.259315371513, 2.0968978405, 0.709352910519, 0.629618823528, -0.812013089657, -1.389431715012, -1.118428587914, -2.07395529747, -1.464915275574, -0.087304405868, 0.957454383373, -0.710428595543, -0.547571659088, 0.951961219311, -1.195542931557, -0.921744525433, 1.070099949837, 1.795662403107, -2.730574607849, -1.5774102211, -1.945279955864, 0.164854958653, 1.744096398354, 1.482905387878, -1.370519638062, 1.850760936737, -1.231969833374, -1.729846000671, 1.250458836555, -0.133073538542, -2.866987228394},
        {-3.231158494949, 0.222992181778, 4.092800140381, -0.595078587532, -3.548410892487, 1.886306405067, -3.562761068344, -3.604046344757, 2.115979909897, 2.114090442657, -0.976986706257, -2.287201166153, 1.148902654648, 0.758516132832, -0.696473956108, -1.372506141663, 2.266627311707, -0.121134608984, 1.561396360397, 1.377867698669, 0.480370700359, -2.43877696991, -0.497594982386, -0.474470347166, -1.589705467224, -1.047686457634, -1.001199007034, 3.319849729538, 0.892913162708, -0.95593392849, 1.621722102165, 0.028746433556, -0.372833490372, 1.282920837402, 3.458177089691, -3.453505754471, -0.87258040905, -3.996830463409, -0.050200730562, 0.981964051723, 2.673808336258, -1.760544657707, 0.420144677162, -0.320879340172, -0.992913126945, 1.555002450943, -2.516989946365, -1.129433512688},
        {-1.263749837875, 2.511631250381, 2.048134803772, 0.502020180225, -2.881134271622, 0.081775650382, -0.77267575264, -2.290154457092, 1.577118635178, 0.479366481304, 0.118227392435, 0.551279187202, -1.410230398178, -0.099170207977, -0.171051040292, 0.287449508905, 0.545064985752, -2.355230808258, 0.769692182541, -1.299589753151, 2.789248943329, -2.164326190948, -0.734149754047, -2.856354475021, -1.556724429131, 0.166020125151, 0.248469620943, 1.872056126595, 1.853625178337, 0.196876138449, 3.203699827194, 0.034804482013, 0.03701576218, 1.92261838913, 2.554482936859, -2.31914973259, -2.192750930786, -2.889147520065, 0.010759857483, 0.66733366251, 1.061297535896, -0.317211657763, 2.260447740555, -1.458641648293, -1.427105545998, 1.713468432426, -1.276206493378, -2.068615674973},
        {0.902873516083, -0.740966558456, 0.720216035843, -1.803851008415, 0.962751924992, -1.899275660515, -2.16623878479, -0.588746190071, 0.668123185635, 1.45060634613, -1.320541143417, -2.735905170441, 0.00571000576, 1.853018403053, 1.99381518364, -1.589490175247, 3.063308477402, 1.6147108078, 1.156341314316, 1.104747772217, 1.89207136631, -2.557163715363, -0.948981046677, -2.131145954132, -0.677138149738, 1.241217970848, 1.239376425743, 2.315348863602, 1.178343653679, -0.950711607933, 2.404443502426, -1.438307762146, -0.8335968256, 3.466802597046, 4.876387119293, -2.516812324524, -1.477246046066, -2.799863100052, -0.821488499641, -0.103671491146, 1.323778629303, -1.511187076569, -0.345275729895, 0.426178216934, -1.632157564163, 0.028283897787, -0.827024579048, -1.534767508507}
    },
    {
        {-4.145687580109, -3.224423646927, 2.781034708023, -0.331310153008, 2.740390539169, 1.87331867218, -0.538225054741, 1.103546023369, -1.827748179436, 1.460720539093, -1.375737667084, 1.230404615402, -1.645465970039, -0.617049753666, -1.340020179749, 0.357174515724, -1.40529692173, 2.369668245316, -1.953375101089, 0.016011271626, 0.750066459179, 1.220551490784, 1.01733148098, -1.349873304367, -1.413918375969, -1.046890854836, -1.354799866676, 1.01733148098, -2.460809230804, 1.207003474236, 0.991467177868, -1.947216868401, 1.94968020916, 0.012316362001, 1.099851131439, -1.154043197632, 1.333862066269, 1.576494336128, -2.083928585052, -2.083928585052, 1.628223061562, -0.459400326014, -0.697106122971, -0.235242515802, 0.807953357697, 2.104866266251, 1.659013986588, 1.427466392517},
        {0.378406882286, 0.667272090912, -0.007931351662, -1.21359038353, 2.16468167305, 1.385754704475, 0.78658759594, 1.357138872147, -1.221182703972, -0.374797940254, -0.011115416884, 1.235058665276, -1.551848292351, -0.940618515015, -2.241744041443, -0.2669480443, -0.760722339153, 1.815806031227, -1.648155927658, -0.575455069542, 0.920742511749, 0.849138915539, 1.345962047577, -1.072458744049, -0.106630593538, -1.318558573723, -0.86763805151, 2.204419136047, -1.738781452179, -0.293323546648, 0.104156337678, -0.337996572256, 1.296457767487, -0.527682006359, 1.136925816536, -1.57445538044, 1.936963915825, 1.276738286018, -2.014392137527, -1.09544813633, -0.243051841855, -0.389588326216, -0.191071033478, -1.206714272499, 1.185346126556, 0.913922190666, 2.188284635544, 1.265861392021},
        {0.764221727848, 1.142742156982, -0.086326420307, -1.113041520119, 0.595516443253, 1.508620381355, 0.403033107519, 0.983746826649, -2.649068832397, 0.444723963737, -0.658719182014, 1.79835665226, -2.182723999023, -1.172665596008, -0.985709071159, 0.931358158588, -1.338243365288, 1.507347464561, -2.473654270172, 0.476404160261, 2.364735603333, 1.353582024574, 0.427845597267, 0.404084205627, -0.771470427513, -1.440491676331, -1.367554545403, 1.605306386948, -1.806470990181, 0.022610737011, 0.427097082138, -2.278151750565, 2.873178482056, -0.272816300392, 1.897413492203, -2.515742540359, 2.184132099152, 2.650357246399, -3.424824237823, 0.146670639515, 1.195771813393, -1.427050709724, -1.464929938316, -0.561262130737, 1.221786022186, -0.99205327034, 2.07143330574, 0.380178391933},
        {0.827974498272, 1.051969766617, -1.816478848457, 0.745230674744, -0.367563664913, 0.969974398613, 0.034675419331, 0.002434074879, -0.834582448006, 0.565593838692, 0.76977866888, 1.65047109127, -2.203716516495, -0.354229450226, -1.511257410049, -0.114714242518, -1.787734389305, 1.612287640572, -0.844385802746, 0.834802865982, 1.022536873817, 0.662363708019, 2.322434425354, -1.510362863541, -0.937567532063, -1.093074083328, -0.012432053685, 1.447488903999, -2.303682327271, 1.087531447411, 0.799455404282, -2.720283031464, 2.030649185181, 2.386514425278, 2.211791038513, -3.144371032715, 1.444489002228, -0.78724783659, -1.222887516022, -1.171534895897, 2.176327228546, -2.517510652542, 0.826928734779, -0.509914457798, -0.873375356197, -1.121173620224, 2.386805295944, 0.282116234303},
        {-4.902639865875, 3.611127138138, -2.093529701233, 3.525567531586, -2.185452461243, 1.450515508652, 1.704923987389, 0.014738678932, -3.146137237549, -0.03753913939, -1.011835455894, 1.272895932198, -1.355172038078, 0.239899814129, -2.813969612122, -1.103579044342, -1.265725970268, 0.071555405855, -0.598768174648, 2.037108898163, -0.417850613594, -0.047118842602, 0.854521751404, -1.002032995224, -1.046388626099, -2.029960155487, -0.556280493736, 0.569363057613, -2.114755392075, -0.52898055315, -0.275836199522, -1.410344004631, 1.702307224274, -0.681931376457, 5.011713981628, -2.55340218544, 0.866356790066, 2.199095249176, -0.921512126923, -1.235256075859, 4.477615356445, -1.598163723946, 0.587992489338, 0.397583961487, -0.050650205463, -0.296775519848, 2.462673664093, 1.052132248878}
    },
    {
        {-0.020937815309, -0.043107267469, 0.38673377037, -0.102225810289, 0.13055343926, 0.50497084856, 0.178587257862, -0.317762136459, 0.151491254568, 0.08990944922, -0.27342325449, -0.214304700494, 0.064045086503, -0.182282164693, 0.259875237942, -0.00985309016, -0.171197444201, -0.171197444201, 0.384270519018, 0.306677430868, 0.220462888479, -1.351104974747, -0.588722109795, 1.049354076385, 0.754993021488, -0.33007851243, 0.50866574049, 2.240346431732, 1.926279067993, 0.326383590698, 0.0, 1.986629247665, 7.24694776535, 2.295769929886, -1.468110442162, 0.904021024704, 1.312924265862, 1.296912908554, 1.3215457201, -0.288202881813, -0.895399570465, 0.337468326092, -0.038180723786, 1.32400894165, -3.396852731705, -0.915105700493, 1.694731473923, 0.768541038036},
        {1.545858621597, 1.3793861866, -1.41629242897, 2.774029970169, 2.594894647598, 1.192935943604, -4.319848060608, 0.810646533966, -0.638507962227, 1.255998849869, -0.193607136607, -1.166770815849, 0.836028754711, -2.065177679062, 0.815030097961, -2.355635404587, -1.741876482964, -0.424646437168, -0.153457760811, -1.055664777756, -0.246414586902, -2.694005727768, 0.004310488701, 2.021662950516, -0.790619075298, 0.113922476768, 0.917159438133, -1.899885892868, -0.30016168952, 0.45771536231, 1.127375841141, 0.666584253311, 0.569518208504, 1.772925376892, -1.293820619583, 2.37234544754, 1.237496614456, -1.239063978195, 2.139708995819, -1.480691552162, 1.065275549889, 0.50554394722, -0.420953601599, 2.073001146317, 0.175901979208, -1.570554494858, 0.552583813667, -0.976685583591},
        {-0.377032160759, 2.766911745071, -2.766186475754, 3.143487930298, 2.711814641953, 0.690994203091, -2.086221694946, -1.20319890976, -2.241291284561, 2.080522298813, 0.601077377796, -1.988566040993, 1.428493976593, -2.441428661346, 1.98062312603, -2.655544042587, -1.530100703239, -1.346340060234, 0.450071513653, -1.727033257484, -0.658161520958, -1.861970663071, 3.122147083282, 0.830538630486, -2.028281927109, 0.879787325859, -0.284509807825, -0.611757397652, 0.036516387016, 0.282025873661, -1.17506480217, 0.49161234498, 1.629674911499, 2.253675937653, -2.919184684753, 1.879170417786, 2.139610528946, -1.746330022812, 0.706445515156, -0.056855849922, 1.370518922806, 0.803093075752, 1.826974391937, 0.118003152311, -0.469161570072, -2.13623046875, 1.621874213219, -0.994335711002},
        {-1.535771608353, 1.343819022179, -2.289598464966, 1.220936655998, 1.230246186256, 1.781082391739, -3.031123876572, -0.363353967667, 1.127927660942, 0.061646267772, -0.489618837833, -0.181852847338, 1.337521195412, -1.000507950783, -0.865249574184, 0.209326356649, 0.089608803391, -1.904425144196, 1.563620448112, -0.792239487171, 2.414043188095, -2.403614759445, -1.082223773003, 0.518628180027, -0.311976581812, 2.092700958252, 0.006699152291, 0.110589116812, -0.720036387444, 0.677126765251, 0.325792014599, 0.84974616766, 2.246372699738, 0.796930372715, -1.336710214615, 0.391519516706, 0.988685905933, -0.738058745861, 3.645299911499, -2.451866865158, -1.445295453072, 0.460570245981, 1.072574615479, 2.484401226044, -0.662751436234, -2.120012044907, 3.39598441124, 0.277784794569},
        {0.402312606573, -1.176870107651, -0.15901902318, 0.652767241001, -0.678753018379, 0.141136884689, -0.476961433887, -0.188016489148, 0.068672418594, -0.287281364202, -0.205600529909, -1.690119743347, -1.092843174934, 0.042712897062, -0.396285831928, -0.712314009666, 1.140353560448, -0.273836821318, 0.9905590415, 0.302591264248, 1.752976417542, -0.186039119959, 1.133056163788, 0.409047067165, 0.218337535858, 0.709325969219, -0.229148358107, 2.259052038193, 0.255625098944, -0.133839815855, -0.557442545891, 2.354430675507, 3.243674516678, 2.066791296005, -2.035224676132, 0.960754275322, 3.070589065552, 0.42595666647, 2.616843700409, -1.523487210274, -1.861566901207, -1.119672656059, -0.705381035805, 2.830477237701, -2.752970695496, -0.925736427307, 4.126816749573, 2.124837398529}
    },
    {
        {-0.203219980001, -0.182282164693, -0.025864360854, -0.017242906615, 0.088677808642, 0.149027988315, -0.288202881813, -0.13055343926, 0.023401089013, -0.114542171359, 0.13055343926, 0.068971626461, -0.215536341071, -0.225389435887, 0.266033440828, -0.28943452239, 0.341163247824, 0.131785079837, -0.013547998853, 0.029559269547, -0.076361447573, -0.110847264528, 0.080056354403, -0.096067629755, 0.216767981648, 0.511129021645, -0.424914509058, -0.229084342718, -0.320225417614, -0.602270126343, -0.585027217865, 0.461863577366, 0.020937815309, 0.185977071524, 0.368259251118, 0.929885387421, 0.847365736961, 1.455794095993, 1.306766033173, -0.854755580425, 1.537082076073, 0.588722109795, 1.491511464119, 3.448581457138, -1.165127873421, -2.176301240921, -1.609748601913, 1.360958099365},
        {0.16718763113, 2.027014017105, -3.860109567642, -0.595016896725, -1.433885812759, 4.087497711182, -0.501940786839, 3.265015363693, 0.239732503891, -1.230782032013, -1.431448101997, -0.244900435209, -1.905682682991, 1.749966263771, 0.337742269039, -0.267035096884, 0.295576393604, 0.981199085712, -0.921804010868, 0.93117827177, 2.074242591858, 0.314351052046, -1.304988622665, -1.490351080894, 2.301172733307, 0.358578681946, -1.101214170456, 0.017382256687, -2.040836334229, 1.2736774683, -0.573716878891, -0.046224515885, -0.901343882084, -2.637654304504, 0.605723679066, -0.667276620865, -0.408810973167, 1.077564716339, 1.577931165695, -1.276515364647, 1.400843262672, 1.342013478279, -0.156176298857, -0.802181065083, -0.705802559853, 1.022399783134, -0.290903061628, -1.300457239151},
        {0.441618084908, -2.922945737839, -1.6751101017, 2.569779872894, -4.570877075195, 2.854386091232, -4.898670196533, 2.138647079468, -0.980924427509, -2.251044511795, 0.73877710104, -1.390894889832, -2.790814638138, 0.372509002686, 0.392105281353, -2.303619384766, 1.486199021339, -2.275543451309, -0.676565945148, 1.94202041626, 2.381979227066, -0.777788519859, -2.919278144836, -0.819561898708, -0.209564507008, 1.646245718002, -2.097787857056, -1.350372076035, -0.050785597414, -0.106977112591, -1.970543026924, -0.564311861992, 1.27299618721, -2.032377004623, -0.827463984489, 1.033581256866, 1.876297593117, 1.882499694824, 1.337598085403, -1.497225880623, 0.081616260111, 2.798565387726, -0.161285042763, -2.378383398056, 1.177578449249, 2.041625261307, -1.478733778, -2.762966394424},
        {-2.100263595581, -0.95439094305, -1.455916881561, -0.360998123884, -2.764142274857, 3.650885343552, -0.787334799767, 0.786557197571, -0.501563370228, 0.124840855598, -2.659590482712, 0.02427983284, -1.383743166924, 0.215088456869, -0.346426844597, 0.578395664692, -0.623054504395, -1.316970348358, -0.015842169523, 0.867083251476, -0.347123026848, 0.596466124058, -2.152955770493, 0.218496769667, 0.176609158516, 0.603083729744, -0.219383075833, -0.675673782825, -1.684696555138, -0.110609792173, -0.083072863519, -0.242050051689, 0.190064683557, -2.251405000687, -0.41708740592, 0.172450751066, 1.819493889809, 0.840604841709, 0.57093590498, 0.253980219364, 1.692990422249, 0.504691541195, -0.551472127438, -1.783199548721, 0.124324575067, 2.057764053345, -0.533041954041, -1.224152445793},
        {0.656268358231, 0.198267921805, -1.003014087677, -2.169507026672, 0.16139793396, -0.925007522106, -0.415336608887, -2.789307594299, 0.43715980649, 0.571690440178, -2.572147130966, -0.726149439812, 0.397845119238, -2.40004324913, 3.012012004852, 0.060566797853, -1.077871918678, -2.285375118256, -0.404548466206, -0.927077651024, -2.149213790894, 0.157472550869, -0.111761912704, 0.33781337738, -0.47937592864, 1.309767484665, -1.487149834633, -1.494967937469, -1.729926943779, 3.877508878708, -3.176164865494, 0.302108615637, 1.47240960598, -3.849915981293, -1.057719111443, -2.059578895569, 1.281324982643, 1.562407970428, -0.532482862473, 1.304059624672, 0.849846720695, 1.495980024338, 0.031538598239, -1.369100809097, 2.06258893013, -0.194324269891, -0.720041811466, -1.699211716652}
    }
};
# 31 "./data_include.h" 2
# 1 "./data_4th/v_cache.h" 1

const attn_fixed_t v_cache[8][5][48] = {
    {
        {-0.626301705837, -0.15710619092, 0.237782344222, -0.231413185596, 0.532887220383, 0.33331990242, 0.662393689156, -0.061568643898, -0.267505139112, 0.749439001083, -0.968113839626, 0.598702013493, 0.057322531939, -0.615686416626, -0.297227948904, -0.184705927968, 0.469195514917, 0.116768114269, -0.137998685241, -0.403380781412, 0.299351006746, 0.309966266155, -0.33331990242, 0.781284868717, -0.099783666432, 0.38215020299, -0.067937813699, 0.065814755857, -0.048830304295, 2.51157617569, 0.10827589035, -1.588046431541, 0.244151517749, 0.110398948193, -0.029722793028, 0.070060871542, 0.193198159337, -0.133752569556, 0.719716191292, 0.840730428696, 0.543502509594, 0.22504401207, 0.358796566725, -0.193198159337, -0.537133336067, -0.571102261543, 0.335442960262, -0.191075101495},
        {3.235761880875, -1.090863823891, -1.06631064415, 1.471438527107, 1.124186038971, 0.284115672112, -2.956907510757, 2.14840555191, -0.899699628353, -1.192584276199, 1.041757464409, 1.587189435959, 1.424085974693, -2.058961629868, -2.411475658417, -2.697345018387, 1.716970562935, 1.999332427979, 1.80466067791, 2.41673707962, 2.790296554565, -2.160682201385, -0.968097805977, -0.319191664457, 3.69350361824, 1.802906870842, -1.481961369514, -1.801153063774, 0.057875413448, -2.720144510269, 2.785035133362, -0.424419701099, -0.989143431187, -0.073659621179, -0.448972910643, -2.023885726929, 2.665776729584, -5.014115333557, 0.054367814213, 1.727493405342, 0.266577661037, -1.943210840225, -1.96425652504, 1.283781886101, -1.902873396873, 3.711041688919, -2.00634765625, 0.496325522661},
        {0.212022021413, -0.240463986993, -0.18875131011, 0.72139197588, -1.228176355362, 0.191336944699, -0.725270450115, -0.942463696003, -0.827403008938, 1.054938793182, -0.298640757799, 1.310916662216, -0.054298322648, 0.733027338982, 0.416287124157, -0.769226193428, 1.157071352005, -1.085966467857, -2.939866304398, 0.60633122921, -3.630230665207, -0.833867073059, -1.636706590652, -1.712982773781, -1.869413614273, -1.389778494835, -1.141557574272, 1.116994023323, -0.540397584438, 2.630882978439, -0.982541024685, 0.906264841557, 1.060110092163, 0.920485854149, -0.703292548656, 0.897215127945, 1.018739938736, -0.652872681618, -0.148673981428, 0.439557850361, -0.832574248314, -1.469933152199, 0.567546725273, -0.067226491868, 1.157071352005, -1.432441473007, -0.133160173893, -1.292817115784},
        {-0.050832580775, -0.812081456184, -0.344669699669, 0.588914036751, 1.677475094795, 3.281800985336, 0.40914028883, 2.743719577789, 0.021076923236, -0.851755678654, 0.592633485794, 2.748678684235, 1.940316796303, -2.0754570961, -1.246018052101, 1.387357473373, -0.469891399145, -0.587674200535, 2.21431684494, -0.321113139391, -0.238045245409, 0.937303185463, -0.78976470232, 0.081828057766, 0.773647069931, -0.555438935757, 0.546760201454, -0.376904994249, 2.561465978622, -1.89072394371, 0.87035292387, 0.77860635519, 0.283918559551, -0.433936655521, -0.270280539989, -0.431457012892, 0.866633474827, 0.266561090946, -0.66330319643, 0.328552037477, -3.740534067154, -0.486009061337, 0.580235302448, -2.385411739349, -0.15001809597, -0.772407233715, -0.888950228691, -0.9744977355},
        {-0.152686297894, -2.986165523529, -0.501297473907, 1.05394077301, 0.791806817055, -0.094584427774, -0.045941010118, -0.501297473907, -0.94854670763, 0.23646107316, -1.207978248596, 0.760729074478, -0.155388712883, -1.010702133179, -0.599935531616, -1.46605861187, -0.32969430089, 0.418873906136, -0.959356367588, 0.305372595787, -0.968814790249, -1.317425966263, 0.336450338364, -0.255377948284, -0.227002635598, -0.972868442535, -0.787753164768, -0.598584294319, 1.863313317299, -0.917468965054, -0.017565680668, -1.729543805122, 0.402659416199, 0.233758658171, 0.939088284969, 1.632256984711, 0.05404824391, 0.039184976369, 0.85801589489, 0.035131361336, -0.743163347244, -0.325640678406, 0.062155481428, -0.047292213887, -2.257865428925, -1.603881716728, -0.160793527961, -0.298616558313}
    },
    {
        {0.501041352749, 0.231413185596, 0.458580255508, 0.309966266155, -0.371534913778, -0.152860075235, -0.067937813699, 0.174090653658, -0.528641104698, 0.210182607174, -0.92989885807, -0.537133336067, -0.968113839626, -0.063691698015, 1.513739466667, 0.870453238487, 0.38215020299, 0.369411855936, 0.411872982979, -0.031845849007, -0.275997370481, -0.388519376516, -1.352387070656, 0.259012907743, -1.768506169319, 2.972279310226, -1.484016656876, -0.031845849007, 1.598661661148, 0.271751254797, 1.241988182068, 1.653861165047, 1.095497250557, -0.303597092628, -0.721839249134, 0.084922268987, -0.768546521664, 0.68574732542, 0.305720150471, -0.386396318674, 0.522271931171, -0.764300405979, -1.021190285683, -0.433103561401, -0.861961007118, 1.258972644806, -1.696322321892, 0.135875627398},
        {0.094705224037, -1.88884305954, -0.226240247488, -0.538416743279, -0.028060806915, -1.78010737896, -1.236429333687, 1.487222790718, -1.210122346878, 0.627860546112, 1.816937208176, -0.440203905106, 2.569317579269, 1.915150046349, 0.042091209441, 0.26482385397, 4.044263839722, -1.606481194496, 1.688909769058, 0.603307366371, -1.381994724274, -0.161349639297, -1.122432231903, 1.599465966225, 0.843577980995, 0.349006295204, 2.001086235046, 1.83798289299, 0.783948779106, 2.507934570312, -0.387589901686, -2.841156721115, 0.370051890612, -0.810255765915, -0.347252488136, -1.210122346878, 3.137548923492, -2.011609077454, -3.50058555603, -2.037916183472, 1.438116312027, 1.45214676857, -3.160348415375, -3.851345777512, -2.837649106979, 0.277100473642, 3.649658679962, -0.908468604088},
        {0.564961075783, -2.680010080338, -0.509369969368, 0.288298219442, -0.267613142729, 2.586927175522, 2.34387755394, -4.805401325226, 0.542983233929, 0.418872773647, 1.948275446892, -0.120231993496, -0.031027611345, 1.440198302269, 0.509369969368, -0.828695833683, 1.579822540283, 2.330949306488, 1.70522582531, -1.727203726768, 0.674850583076, -0.39172360301, -2.579170227051, 0.429215312004, -0.84033113718, -5.87585401535, -1.59404361248, -1.842264413834, -1.213955283165, 0.345182180405, 1.303159713745, -3.124739170074, -1.728496551514, -3.685821771622, 2.908838748932, -1.552673459053, -0.055591139942, 1.718154072762, 2.683888435364, 1.375557422638, -2.408518314362, -1.631535291672, -1.229469180107, 0.623137891293, 1.104065895081, 1.481568455696, -0.902386367321, 0.412408679724},
        {3.755411863327, 2.816868782043, 2.314742088318, -0.282678723335, 0.318633496761, 0.054552037269, 2.493276119232, 0.090506784618, 0.012398189865, -1.508859753609, -2.825547456741, -0.019837103784, -2.105212688446, -0.916226267815, -0.908787310123, 3.304117679596, 0.159936651587, 1.377438902855, 1.471665143967, 0.188452497125, 3.475212812424, 0.596352934837, -3.685981988907, -1.822533965111, 1.185266971588, -0.122742079198, -1.785339355469, -0.808362007141, -0.09918551892, -0.266561090946, -1.506380081177, -1.032769203186, -0.3049954772, 1.786579251289, 0.623628973961, -1.17534840107, 0.471131235361, 1.870886921883, -0.223167419434, 0.468651592731, 0.48972851038, 1.286932110786, -1.373719453812, 2.138687849045, -3.271882295609, -3.363629102707, -1.826253414154, 0.324832588434},
        {-0.287806898355, -0.064857892692, 0.398605823517, 0.93638586998, -1.561994314194, 0.039184976369, -0.245919510722, -1.640364289284, -0.399957001209, 0.337801545858, 0.127013370395, 1.248514413834, -0.214841768146, 1.956546425819, -1.539023756981, 0.337801545858, 0.833694159985, -0.390498578548, -0.866123139858, -0.164847150445, -1.666037201881, -1.422820091248, -1.534970164299, -0.099989250302, 0.87017673254, 5.267001628876, 0.243217110634, -0.543184876442, -0.820182144642, -0.743163347244, 1.428224921227, -1.824128270149, -2.013297080994, -0.105394080281, 0.11079890281, -0.193222478032, 0.320235848427, 1.583613634109, 0.189168855548, -0.068911515176, -1.484975576401, 0.743163347244, -0.744514584541, 0.272943645716, -1.235002398491, -0.610745191574, -2.572696447372, -1.3336404562}
    },
    {
        {-2.47336101532, -4.785369873047, -0.26538208127, -0.636916995049, 0.269628196955, 0.68574732542, -1.853428483009, -0.426734387875, -0.951129376888, 0.091291435063, -4.135714530945, 1.878905177116, -0.68574732542, 0.607194185257, -1.099743366241, 1.297187685966, -3.165477514267, 0.299351006746, -0.997836649418, -1.040297746658, -0.335442960262, -0.641163110733, 1.231372833252, 2.624098062515, -0.632670879364, -0.063691698015, -1.462786078453, 0.343935191631, -0.227167069912, -1.048789978027, 1.876782059669, -0.14649091661, -0.675132036209, 0.753685116768, 0.413996040821, 0.027599737048, -0.626301705837, -1.297187685966, 0.082799211144, 0.161352306604, 0.857714891434, -1.481893539429, 1.199527025223, 0.125260338187, -0.377904087305, 0.161352306604, -0.324827671051, 0.44159579277},
        {1.192584276199, -2.998998641968, -0.352513879538, -2.074745893478, -0.659428954124, -0.27885428071, 1.003173828125, 1.741523861885, -1.890596866608, 2.914816379547, -0.266577661037, 0.708535373211, -0.168364837766, 0.420912086964, 3.376065731049, 0.964590251446, -2.606147527695, -1.546851992607, 0.676966965199, 0.776933610439, -0.324453085661, -0.333222091198, -1.025973200798, -3.667196750641, -0.885669231415, -0.78044116497, 1.317104101181, 0.717304348946, -0.812009572983, -1.56965136528, 1.520545005798, -0.947052240372, -0.394605100155, 0.282361865044, -0.854100823402, 1.822198629379, 1.941457033157, 1.471438527107, -5.79981803894, -1.676633238792, -1.478453755379, -1.736262440681, -0.040337409824, -0.97335922718, 5.326292037964, 1.345164895058, 3.879406452179, -2.388676166534},
        {4.054274559021, 1.322551965714, 0.599867165089, 1.600507616997, -0.917900204659, -2.851954698563, 0.465414196253, -2.372319459915, -2.849369049072, -0.542983233929, -0.37750262022, 2.63346862793, 0.169359043241, -1.12862944603, -2.767921447754, 0.183580040932, 2.05170083046, 3.106639623642, -2.041358232498, -7.334151744843, 1.455712080002, -2.142198085785, 0.457657277584, -1.403999447823, 2.244330644608, 0.399480491877, 0.325789928436, -1.463469028473, 3.010971307755, 1.414341926575, -1.914662241936, -1.232054710388, 0.320618659258, -1.519060134888, -3.211357831955, 3.758219480515, 0.434386581182, 1.879756212234, -1.278596162796, -0.602452814579, -1.268253684044, 2.906253099442, -0.868773162365, 2.403347015381, -1.219126582146, 1.038132190704, -3.516462802887, -1.100187420845},
        {-4.326968193054, 3.228488683701, 2.314742088318, 2.580063343048, -0.328552037477, -0.953420817852, -0.223167419434, -1.735746622086, -0.391782820225, 2.673049688339, -0.247963801026, 2.030823469162, 1.446868777275, 1.822533965111, -0.871592760086, -2.413927555084, 3.17021727562, -3.37850689888, -1.922959327698, -2.244072437286, 3.467773675919, -1.036488652229, -0.678180992603, -3.229728460312, -0.960859715939, -5.150207996368, 2.821828126907, 2.704045295715, -1.77542078495, 1.891963839531, -3.393384695053, -4.133556365967, 3.548362016678, -0.768687784672, 3.421900510788, 2.82430768013, -1.36132133007, 1.462986469269, -2.466000080109, -2.030823469162, 2.624696969986, -4.4732670784, -0.384343892336, -0.662063360214, -0.614950239658, 0.071909502149, 2.586262464523, 0.670742094517},
        {0.233758658171, -0.498595058918, -1.349854946136, -0.314831018448, 0.027024121955, -1.699817299843, -0.501297473907, 0.089179605246, 2.495677709579, 0.785050749779, -2.305157661438, 0.268890023232, 1.260675311089, -2.686197757721, 0.290509313345, -0.709383249283, -0.685061514378, 0.14322784543, -0.066209100187, 0.18376404047, 1.290401816368, -0.96070754528, 0.929629802704, -1.766026377678, -0.363474458456, -1.266080141068, -0.375635296106, -0.989082872868, -1.071506500244, 1.306616306305, -0.116203725338, 1.191763758659, 1.805211424828, -0.541833639145, -0.533726394176, -1.066101670265, 0.848557472229, 1.139066815376, 0.763431489468, -0.331045508385, -1.220139145851, 1.753865599632, 0.404010623693, -0.799914002419, -0.518863141537, -0.997190117836, 1.816021084785, -0.922873795033}
    },
    {
        {-0.027599737048, 0.679378151894, -0.104029774666, 0.057322531939, 0.205936491489, -0.528641104698, 0.290858775377, 0.174090653658, 0.22504401207, 0.150737032294, 1.993550181389, -0.048830304295, 0.326950728893, 0.006369170267, 0.123137287796, 0.66663980484, -0.38215020299, 0.002123056678, 0.165598422289, -0.169844537973, 0.900176048279, -0.199567332864, -0.348181307316, -0.273874312639, 0.063691698015, -0.040338076651, 0.473441630602, -0.496795266867, 0.318458497524, -0.704854846001, -0.324827671051, -0.887437701225, 0.562610030174, -0.233536228538, -0.227167069912, -0.129506453872, 0.64753228426, 0.297227948904, 0.182582870126, -0.203813448548, 0.201690390706, 0.016984453425, 0.380027145147, -0.080676153302, -0.537133336067, -0.106152832508, 0.127383396029, 0.104029774666},
        {-2.002840042114, 1.22590649128, 3.97060418129, -0.496325522661, 0.690997362137, -0.078921020031, -0.715550541878, 1.811675786972, -1.306581258774, 0.33146828413, 0.466510921717, -1.146985530853, -0.647152364254, 0.634875774384, -4.193336963654, 2.336062192917, 1.129447460175, -0.619091570377, 0.840070426464, 0.166611045599, 0.392851293087, 0.026307005435, 0.924252808094, -1.759061813354, -1.104894280434, -1.05754160881, 1.625772953033, 0.636629581451, 0.27885428071, -1.075079679489, 1.459161996841, 0.199933245778, -0.177133843303, 1.51879119873, -2.541256904602, -1.978286862373, 1.553867220879, -1.946718454361, -0.829547584057, -2.257141113281, -0.370051890612, 1.81342959404, 2.67805314064, 0.776933610439, 0.340237289667, -0.985635817051, 0.229747861624, 1.557374715805},
        {-2.742065191269, 2.407225608826, -0.506784319878, -0.92436426878, 2.085314035416, 0.444729119539, 1.860363960266, -1.577236890793, 1.010982990265, 2.144783735275, 0.938585281372, -1.353579521179, -1.223005056381, 0.879115700722, 0.8118891716, 1.753060102463, 1.635413765907, -0.433093756437, 0.654165506363, -0.350353449583, 0.652872681618, 2.178396940231, -1.172585129738, 2.479623317719, 2.015501976013, 0.586938977242, -1.460883378983, 0.085325933993, -1.082087993622, -0.858430624008, 0.801546633244, -0.381381064653, -1.018739938736, -0.479635179043, -0.554618537426, 2.740772485733, 0.240463986993, -0.349060624838, 0.854552149773, -2.686474084854, -0.064640857279, -0.036198880523, -0.047834236175, 0.996762037277, -3.04199886322, -0.09308283776, 0.497734606266, 0.321911484003},
        {1.402235269547, -3.374787330627, -0.888950228691, -1.905601859093, 0.273999989033, 0.004959275946, -2.437484264374, 0.862914025784, 0.684380114079, 0.240524888039, 2.377972841263, -0.834398210049, -1.179067850113, 0.495927602053, 1.598126769066, 2.232913970947, -0.891429901123, -0.428977370262, -0.391782820225, 0.061990950257, -0.009918551892, -1.524977445602, -0.207049772143, 1.157990932465, 1.051366567612, -2.107692241669, 1.03772854805, 0.850515842438, 1.751864314079, -1.573330283165, 0.3049954772, 2.852823495865, -0.208289593458, 2.746199131012, -0.931104063988, 0.510805428028, -2.091574668884, -2.334579229355, -2.552787303925, 0.06695022434, -1.31420814991, 0.614950239658, -1.2113032341, -0.746371030807, 0.004959275946, 1.10715842247, -0.122742079198, 0.109104074538},
        {-0.14593026042, 1.237704873085, 0.095935635269, 0.264836400747, 0.758026659489, -1.363366961479, 1.967356085777, -0.631013274193, 1.189061403275, 0.214841768146, 2.238948583603, -0.299967765808, -0.702627182007, 0.503999888897, -0.043238595128, 2.763216495514, 0.467517316341, 1.212031960487, 1.129608273506, 0.237812280655, -0.476975768805, 0.567506551743, -0.118906140327, -0.195924893022, -0.385093748569, -1.010702133179, -0.259431570768, -1.121501088142, -0.297265350819, -1.298509120941, -1.714680552483, 2.02951169014, 0.38239133358, -1.113393902779, 2.674036979675, -0.470219731331, -0.478326976299, 0.859367072582, -0.893147230148, -1.003946185112, -1.086369752884, 1.113393902779, 0.670198261738, 0.122959755361, -1.021511793137, -0.055399451405, 0.494541436434, -0.305372595787}
    },
    {
        {0.898052990437, -0.486179977655, 2.817296266556, -1.4500477314, 1.197404026985, -2.222840309143, 0.692116498947, 1.191034793854, -0.872576296329, -0.09766060859, -1.866166830063, -0.908668279648, 1.513739466667, 0.670885920525, 0.29298183322, -2.887356996536, 0.753685116768, 0.397011607885, -0.503164410591, -0.779161810875, -0.919283568859, 0.167721480131, 0.98085218668, -0.645409226418, 0.8258690238, -0.522271931171, -3.437228679657, -0.883191585541, 2.921325922012, 0.494672209024, -0.607194185257, 0.040338076651, 1.658107280731, 0.33331990242, -0.77491569519, 0.796146273613, -0.851345717907, 1.329033493996, -0.658147573471, 0.806761562824, 0.048830304295, -0.562610030174, 0.524394989014, 0.834361255169, 2.49671459198, 1.067897558212, 0.074306987226, 0.787654042244},
        {0.031568408012, 0.803240597248, -1.823952436447, 0.14556543529, 4.342409610748, 5.280693054199, 0.326206862926, 0.168364837766, 1.45214676857, -2.109821796417, 0.066644415259, -4.552865982056, -0.931268036366, -1.15049302578, 2.928846597672, -0.454234302044, -0.398112684488, -2.022131919861, 1.311842679977, 2.649992465973, 0.349006295204, -0.594538331032, -0.55770856142, -3.209454774857, -1.643311023712, -0.099966622889, -0.396358907223, 1.432854890823, -0.122766032815, 1.929180502892, -0.85585463047, 1.06631064415, 2.785035133362, -3.647904872894, 2.907801151276, -2.116837024689, 1.083848714828, 1.904627203941, -1.189076662064, 0.901453435421, 0.261316269636, 0.589276969433, -2.122098445892, -1.76256942749, -2.530734062195, 0.634875774384, 0.282361865044, -1.708201646805},
        {2.157711744308, -2.327070951462, 0.024563526735, -3.238507032394, -0.244342446327, -2.855833053589, 1.096308946609, -0.451193183661, 1.164828300476, 1.265668034554, -4.078838348389, 0.02327070944, 0.57530361414, 1.36133646965, 1.497082233429, -2.730429887772, -1.763402581215, -0.060762405396, -1.491911053658, -4.283103466034, 0.003878451418, -1.168706774712, 1.239811658859, 2.405932664871, 1.362629294395, -0.508077144623, -1.82157933712, -0.576596438885, -3.596617460251, -1.282474637032, -2.351634502411, 1.915955066681, 1.008397340775, -0.094375655055, 3.199722528458, -1.157071352005, 1.379435896873, 5.238495349884, -0.389137983322, 1.013568639755, 0.835159897804, 2.045236825943, -1.313502192497, 1.981888771057, -0.204265117645, -0.711049437523, 0.464121371508, 3.098882675171},
        {-0.169855207205, 1.305529475212, -3.814923048019, -2.784633398056, 2.670570135117, 3.296678781509, 0.091746605933, 2.872660636902, 0.705457031727, 0.050832580775, -0.112823531032, -3.380986452103, -0.70917648077, -2.3978099823, 3.681022644043, 1.931638002396, 0.204570144415, 1.449348449707, -1.134434342384, 2.273828029633, -1.904361963272, 0.544280529022, -2.738760232925, -2.153565645218, -3.895511388779, 2.758597373962, -0.569076955318, 0.616190075874, 1.374959230423, 1.496461510658, 3.123104095459, -4.769583702087, -1.099719524384, -2.457321405411, -2.198199033737, 2.629656076431, 4.038090705872, -4.578651428223, -0.738932132721, 7.85053396225, 0.60503166914, 0.560398221016, -2.637094974518, 3.235927581787, -0.890190064907, -1.728307723999, -0.01611764729, 0.823239803314},
        {2.853747367859, 3.390176296234, 0.772889912128, 6.293918132782, -2.218680381775, 2.560535669327, 1.895742177963, 0.321587055922, -0.095935635269, 0.672900676727, -1.133661985397, 2.449736833572, 1.445790529251, 0.64452534914, 3.128042221069, 1.903849482536, 1.917361497879, -0.287806898355, 0.240514695644, -0.798562824726, -0.127013370395, -0.663442194462, 1.375527858734, 3.803645372391, -3.959033966064, 1.121501088142, -2.018702030182, 0.295914143324, 0.589125871658, -5.308888912201, -2.095720767975, 2.342991352081, 1.086369752884, -2.461897611618, -0.706680834293, 3.702304840088, -0.474273353815, 4.029296875, 1.92681992054, 3.223977804184, -1.543077349663, 0.753973007202, 0.967463612556, -2.832128047943, -1.194466233253, -0.489136606455, -0.429683536291, -1.655227541924}
    },
    {
        {1.324787378311, -1.424571037292, -2.543421983719, 3.301353216171, -1.857674598694, 4.980690956116, 2.995632886887, 2.142164230347, 3.902178287506, 1.762137055397, -3.923408746719, -3.042340278625, -0.220797896385, 3.089047431946, 1.917120218277, 2.917079925537, -2.207978963852, -2.749358415604, -2.292901277542, -2.282285928726, -2.97652554512, -3.046586275101, -1.335402607918, -0.687870383263, 2.014780759811, -4.64312505722, 2.551914215088, 2.069980382919, 2.69840502739, -0.259012907743, -3.089047431946, 2.443638324738, -2.433022975922, -2.267424583435, -1.861920714378, -2.592252254486, -1.853428483009, 0.781284868717, 2.72175860405, 4.536972045898, 2.630467176437, -1.781244516373, -0.936267971992, -3.103908777237, 2.203732728958, -2.159148693085, 3.857594013214, -3.297106981277},
        {0.149073034525, 2.546518325806, -2.095791578293, -2.714883089066, 0.589276969433, -0.459495723248, -0.243778258562, -1.025973200798, 0.85585463047, -0.098212823272, 2.495657920837, -1.32587313652, -2.528980255127, -0.719058156013, -2.008101463318, -1.732754826546, 0.843577980995, 1.669618010521, -0.36479049921, 1.162769675255, -2.514949798584, -0.612076342106, 0.492817908525, -2.292217254639, -0.603307366371, -0.420912086964, -0.180641442537, -0.794471561909, 1.836229085922, -1.745031356812, -0.01052280236, 1.450392961502, 1.415316939354, -0.419158309698, -0.654167532921, -1.539836764336, 0.066644415259, -1.83798289299, 0.580507934093, -2.095791578293, 0.594538331032, 1.420578360558, -1.103140473366, -0.548939526081, -2.046684980392, 1.513529777527, 1.159262061119, 0.887423038483},
        {0.080154664814, -0.099546924233, -0.409823030233, 2.279236555099, 1.085966467857, 1.56430876255, 1.736253499985, 2.071093082428, 0.34647500515, -0.885579764843, 0.57530361414, -1.884927392006, -0.532640695572, -1.921126365662, 0.018099440262, -1.658684372902, 0.954099059105, -0.482220798731, 1.718154072762, 2.934695005417, -4.334815979004, 0.235292717814, 1.070452570915, -1.383314371109, 0.318033009768, 1.054938793182, 2.486087322235, 0.365867257118, 0.361988812685, 0.37491697073, 0.482220798731, 0.738198578358, 1.146728873253, -2.178396940231, -0.471878260374, 1.171292304993, -1.73754632473, 1.606971740723, 0.068519309163, 0.8118891716, 0.02327070944, -1.428562998772, -0.558497011662, 1.966374874115, -0.212022021413, 1.661270022392, -1.873292088509, 0.319325834513},
        {-0.192171946168, -0.725294113159, -1.254696846008, -2.014705896378, 0.271520376205, -3.543402671814, 0.77860635519, -0.852995455265, 0.767447948456, 0.226886883378, 3.337592840195, -2.412687778473, -1.237339377403, 1.229900479317, 1.073683261871, 0.132660627365, 2.43252491951, 0.37194570899, -1.863448023796, -1.772941231728, -2.783393621445, 0.309954762459, -0.424018114805, 0.37194570899, -0.16613574326, -0.960859715939, 1.036488652229, -0.13638009131, -1.526217222214, -1.682434439659, 0.03347511217, 0.906307697296, 2.975565671921, 0.602552056313, 1.30180990696, -0.45253393054, -0.240524888039, 0.076868779957, -1.000533938408, -0.934823513031, 0.62858825922, 0.116542987525, -0.188452497125, -0.260361999273, -0.724054276943, 2.384171962738, 0.691819012165, -0.079348415136},
        {7.555944919586, 0.681007921696, 1.144471645355, 2.580803632736, 0.093233220279, 1.54442858696, -1.191763758659, -0.325640678406, 2.194358825684, 5.84396648407, -1.648471474648, 2.848342418671, -5.870990753174, -0.778294742107, 3.786079645157, -1.817372202873, 3.732031345367, -1.748460769653, -0.154037505388, -0.182412832975, 0.524267971516, 0.366176873446, 2.463248729706, 0.641822934151, 1.447141766548, -0.298616558313, -0.298616558313, -1.918712735176, 1.924117565155, -1.471463441849, -0.790455579758, 0.8553134799, 1.043131113052, -3.410444259644, 0.726948916912, 1.426873683929, 0.190520063043, -1.866015672684, 1.097179412842, 1.672793149948, -0.481029391289, 3.641500473022, 2.265972614288, 2.461897611618, 0.563452959061, -14.016060829163, -4.053618431091, 0.73775857687}
    },
    {
        {-0.174090653658, -0.070060871542, -2.579513788223, 0.084922268987, 0.456457197666, -0.806761562824, 0.008492226712, -1.127343058586, -0.42248827219, 0.430980503559, 1.118850827217, -0.271751254797, 0.630547821522, 0.072183929384, -2.965910196304, 2.295024394989, 0.443718850613, -0.150737032294, 1.095497250557, 3.800271511078, 0.237782344222, 0.61993253231, 0.269628196955, -0.365165740252, 1.131589174271, 18.298625946045, 0.936267971992, 2.33323931694, -1.458539962769, 1.469155192375, -1.936227679253, 0.091291435063, 0.751562058926, 1.205896258354, -0.62842476368, -1.050913095474, 1.135835289955, 1.545585274696, 0.494672209024, -0.413996040821, 0.420365214348, 0.942637145519, -0.38215020299, 0.501041352749, -2.348100662231, -0.772792637348, -0.874699354172, -0.303597092628},
        {-2.925338983536, 3.974111795425, 0.333222091198, 1.399532675743, -1.839736580849, 1.69592499733, 1.201353311539, -0.813763380051, 0.427927315235, -1.125939846039, 1.101386666298, 0.0859362185, 2.293971061707, -0.455988109112, 0.541924357414, -2.309755086899, -2.716636896133, -2.258894920349, -1.722231984138, -1.392517566681, 3.597044706345, 0.112243227661, 0.343744874001, 2.136128902435, 0.819024801254, 0.585769355297, 1.459161996841, -0.49106413126, -0.008769001812, 1.622265338898, 1.306581258774, -0.040337409824, -1.77133846283, 2.760481834412, -1.718724370003, -0.106981828809, 0.913730025291, -0.701520144939, -0.071905814111, -3.45849442482, 0.861115992069, -2.746451377869, 0.74711894989, 1.45214676857, 1.287289500237, 2.66051530838, 2.592117071152, 0.606814920902},
        {-0.54944729805, -0.099546924233, 1.596629261971, 0.413701504469, 0.501613080502, 1.341944217682, -1.398828148842, 0.0, -4.178385257721, -0.574010848999, 0.722684800625, 1.167413949966, 0.067226491868, 4.659313201904, 3.357446193695, -1.592750787735, -3.053634166718, -1.798308730125, 1.563015937805, 0.602452814579, -2.191325187683, 1.18551337719, 0.178408771753, -2.243037700653, -2.265015602112, -4.105987548828, -0.403358966112, -2.08919262886, 1.184220552444, 1.578529715538, -2.195203542709, 3.105346918106, -0.641237318516, 2.253380298615, -0.747248351574, -0.290883868933, -3.061391115189, -2.614076375961, -1.004518985748, 3.12086057663, -0.808010756969, 0.720099151134, 1.79443025589, 2.266308546066, 0.744662702084, -0.479635179043, 1.078209519386, 3.341932296753},
        {-0.670742094517, -3.084669828415, 0.140099555254, 1.56837105751, -0.595113098621, 4.63568353653, 0.48724886775, 0.468651592731, 2.066778182983, -1.355122208595, 0.319873303175, -1.420832633972, -0.477330327034, 2.065538406372, 0.792244374752, 0.711656093597, -2.05314040184, -1.484063386917, -0.127701357007, -1.56837105751, -0.326072394848, 1.1183167696, 0.901348412037, 1.226181030273, -1.41835296154, -0.815800905228, 0.975737571716, -0.447574675083, -0.157457008958, 5.483719348907, 0.75504976511, 0.277719467878, 0.959619939327, 1.382398247719, 1.774181008339, -0.233085975051, 0.649665176868, 1.784099578857, -0.472371041775, -1.334045290947, 1.547294139862, -0.043393664062, 1.17658829689, -4.043049812317, -0.973257899284, 0.876552045345, -3.201212644577, 4.00089597702},
        {1.278241038322, -0.459410071373, -1.01475584507, 0.909361720085, 0.722895264626, -0.885040044785, -0.222949013114, 0.485083013773, -0.360772043467, -0.112150110304, 1.072857618332, -2.30380654335, 0.063506685197, 0.11079890281, 1.45119535923, -1.56875038147, -1.43633210659, 0.785050749779, -1.582262396812, 1.841693997383, -1.609286546707, -2.725382804871, 1.157983660698, 0.032428946346, 1.25527048111, 2.88752746582, -2.74565076828, -0.295914143324, 0.631013274193, -2.517297029495, -0.237812280655, -0.670198261738, 2.194358825684, -2.178144216537, -1.62279856205, 1.674144387245, -0.972868442535, 0.493190228939, -3.322615861893, -1.449844241142, -0.649930179119, 0.986380457878, 1.621447324753, 0.576965034008, 0.116203725338, -1.278241038322, -4.022540569305, 0.812074899673}
    },
    {
        {0.004246113356, -4.651617050171, 0.390642434359, 2.768465995789, -1.662353396416, 2.326870203018, 2.290778160095, 0.367288798094, 0.295104891062, 0.583840608597, 0.055199474096, 1.936227679253, 2.112441301346, -0.309966266155, -1.089128136635, 0.112522006035, 3.447844028473, -0.195321217179, 2.343854665756, -3.023232698441, 0.016984453425, -0.231413185596, -1.290818452835, 1.562569737434, 0.630547821522, 0.751562058926, 1.543462157249, 1.027559399605, 1.373617649078, -0.290858775377, 2.316254854202, -0.394888550043, 1.655984163284, 1.346017956734, -0.838607370853, -2.577390909195, 1.515862464905, -0.424611330032, 1.114604711533, -1.199527025223, 0.609317243099, -1.227126717567, 1.082758903503, 0.47131857276, 0.324827671051, -0.639040052891, 1.838567137718, 0.541379451752},
        {-0.406881690025, -3.197178125381, -1.806414484978, 0.031568408012, -3.104226827621, -2.299232244492, -2.232587814331, 0.05261401087, 1.213629841805, -1.138216495514, -3.358527898788, -2.67805314064, -3.910974979401, 2.379907131195, -2.046684980392, 0.249039664865, 0.605061173439, 0.043845009059, -4.475698471069, -2.669284343719, 1.820444822311, 2.272925376892, -3.402372837067, -2.949892282486, -0.359529078007, -1.743277668953, -1.104894280434, 1.383748531342, 1.967764019966, -0.015784204006, 2.346585035324, -2.272925376892, -3.235761880875, 3.535661697388, 1.639803409576, -0.90671479702, -0.506848335266, 3.58476805687, 0.156088232994, -0.296392261982, -0.412143111229, -0.592784523964, 2.676299333572, -2.521965026855, -1.908134818077, 3.956573724747, -0.33146828413, 0.748872756958},
        {-1.683247923851, 0.945049345493, 3.145424127579, 2.007745027542, 3.105346918106, -3.806053638458, 1.687126398087, -4.705854415894, 0.75241959095, 1.449248075485, -1.684540748596, 3.348396539688, 1.658684372902, 2.446010112762, 0.879115700722, 2.276651144028, 1.795723080635, -0.540397584438, -0.770519018173, 1.428562998772, 1.742717504501, 3.760805130005, 2.155126333237, 2.382662057877, 0.174530312419, -3.411744594574, 3.963777542114, 1.974131822586, 4.510639190674, -1.061402916908, -5.228152751923, 0.506784319878, 3.290219783783, 2.57399892807, -2.580463171005, 0.832574248314, -0.327082753181, -0.859723389149, 4.219755172729, -0.845502436161, -3.257899284363, 3.765976428986, -0.215900465846, 3.912064790726, -1.118286848068, -0.652872681618, -2.285700798035, 0.271491616964},
        {0.984416306019, 0.205809950829, 0.642226278782, -2.867701292038, -2.385411739349, -5.489918708801, -0.714135766029, -0.057031676173, -3.299158334732, -0.477330327034, -4.023212909698, -2.482117652893, 0.390542984009, -0.645945727825, 3.641348361969, -5.682090759277, -2.492036104202, -1.095999956131, -1.207583665848, 2.550307750702, 0.096705883741, 0.621149301529, 2.076696872711, 1.922959327698, 0.231846153736, 1.666316747665, -3.364868879318, 0.855475127697, 0.45253393054, -1.640280604362, -1.946515798569, 0.314914017916, 2.689167499542, 0.362027138472, 3.142941236496, -1.300570130348, -2.118850708008, -3.198733091354, -0.090506784618, 2.648253440857, 2.436244249344, -2.769755601883, 1.707230806351, -0.608751118183, -2.1783618927, 0.996814489365, 2.679248809814, 1.723348379135},
        {-2.141661643982, -4.421146392822, -3.045618534088, 1.987624168396, -5.219709396362, -0.966112375259, -3.615827560425, 0.482380598783, -0.431034743786, -1.672793149948, -1.456600189209, -2.27948474884, 1.763324022293, -2.021404266357, 1.774133682251, -0.075667545199, 4.492760181427, -0.106745287776, 1.476868271828, 1.741704702377, -1.349854946136, -0.73505616188, -0.027024121955, 2.199763536453, -3.173983097076, 1.545779824257, -2.056535720825, -0.939088284969, 0.059453070164, -2.982111930847, -3.415849208832, -0.302670180798, 2.5929646492, 1.60793530941, -4.134690761566, 4.17117357254, -3.190197706223, -0.780997157097, -0.337801545858, 3.782026052475, 2.728085279465, 0.027024121955, -6.239870071411, -2.378122806549, -0.16349594295, 0.675603091717, 0.917468965054, 1.571452736855}
    }
};
# 32 "./data_include.h" 2
# 1 "./data_4th/ground_truth.h" 1

const attn_fixed_t ground_truth[1][384] = {
    {0.0192061, 0.223801, -0.0058629, -0.0723765, 0.0594377, -0.178111, 0.0994672, 0.227642, 0.0479141, 0.172046, -0.0614594, -0.221375, 0.17427, 0.17892, -0.139901, 0.053777, -0.0408382, 0.0390186, -0.100478, 0.21248, 0.221577, 0.0135453, -0.025069, -0.0426577, 0.132421, -0.17245, -0.041849, -0.0123323, 0.0624702, 0.125951, -0.0707592, -0.117865, -0.0135453, -0.0127367, -0.144551, 0.201765, -0.0566073, 0.0990629, -0.0638854, 0.106947, -0.0228451, -0.198328, 0.00363904, -0.0737917, -0.152638, 0.0198126, -0.214906, -0.0531705, -0.128782, 0.0448815, 0.014354, 0.104521, -0.0293145, 0.141923, 0.00283037, -0.109576, 0.175281, 0.0679288, 0.0428598, 0.0258776, 0.0578204, -0.142731, -0.0163757, -0.0774308, -0.00970412, -0.190241, 0.081272, 0.0135453, 0.139295, 0.0839002, 0.0772286, -0.015567, -0.0163757, -0.181346, 0.121099, -0.11746, 0.104724, 0.084911, -0.0555965, -0.0782394, 0.107352, 0.149403, 0.216725, 0.0141518, -0.0499358, 0.0115236, 0.126154, 0.138284, -0.233505, 0.0628746, -0.137475, -0.0533726, -0.0374013, -0.0212278, -0.132016, -0.10533, 0.145764, 0.0333579, 0.106341, -0.102904, -0.0204191, 0.0570117, 0.110991, 0.00444772, 0.0938065, 0.00667158, 0.0175887, -0.0731852, -0.19853, 0.15749, 0.203786, 0.0386143, -0.204393, -0.0109171, -0.0101085, -0.0572139, -0.203989, -0.0339644, -0.0291124, -0.031134, -0.115641, -0.0515531, 0.249072, -0.134442, 0.053777, -0.0234516, -0.0915826, 0.0778351, 0.0396251, -0.00606507, 0.0998715, 0.0735895, -0.0545857, 0.218545, 0.0234516, -0.13889, -0.246646, 0.0834958, -0.150616, 0.162746, 0.0663115, -0.044275, -0.0818785, 0.0990629, -0.0123323, 0.0212278, -0.137273, 0.0952216, 0.176494, 0.0883479, 0.0345709, 0.0832937, -0.146573, 0.138284, 0.18175, -0.044275, -0.100882, -0.0934021, -0.15102, 0.0359861, -0.0889544, -0.00101085, 0.0206212, 0.0159714, -0.0786438, -0.00222386, -0.0640876, 0.167194, -0.0671201, -0.0495314, -0.0149605, 0.0321449, 0.10068, -0.19853, -0.0867305, 0.131814, -0.14071, 0.0630768, 0.0966368, 0.157288, 0.137273, -0.00202169, 0.023856, -0.150818, -0.0171844, 0.227238, -0.0834958, 0.240986, 0.194082, 0.124132, -0.0711635, 0.0523618, -0.00303254, -0.0365926, -0.345305, 0.0101085, 0.0960303, -0.0214299, -0.0169822, -0.0776329, 0.120897, -0.0444772, -0.143136, -0.00950195, -0.0105128, 0.0976477, 0.0851132, 0.0661093, 0.0673223, 0.0648963, 0.29921, -0.333579, -0.276365, 0.0507444, -0.0964347, -0.0386143, 0.202371, 0.212278, -0.0877414, 0.15102, -0.0952216, -0.0434664, -0.00363904, 0.0648963, -0.18357, -0.095626, -0.0493293, -0.170429, 0.145157, 0.331153, 0.0371991, -0.259989, 0.0855175, -0.336207, -0.0412425, -0.269087, -0.270704, 0.110586, -0.195902, 0.0618637, 0.0398273, -0.121504, -0.0315384, -0.102298, 0.222993, -0.127367, -0.156681, -0.141316, 0.272928, -0.103915, -0.0630768, 0.104724, 0.0778351, 0.0426577, 0.0927956, 0.00909761, -0.0628746, -0.124536, 0.0101085, -0.202978, 0.226429, -0.057416, -0.0780373, -0.0471054, -0.0281015, -0.118875, -0.029921, 0.150009, -0.107352, -0.0996694, -0.0942108, -0.0994672, 0.0564052, 0.0210256, 0.0998715, -0.0232494, 0.0653006, -0.194689, 0.0731852, -0.199743, -0.0778351, 0.128984, -0.0137475, -0.214704, 0.058629, -0.0183974, 0.215108, -0.322055, -0.161331, 0.159511, -0.153446, 0.127164, -0.0402316, -0.0604486, 0.112406, -0.11281, 0.124738, 0.0301232, -0.126962, -0.0111193, 0.0875392, -0.0903696, 0.0464989, 0.0309319, 0.0663115, -0.101893, 0.114226, 0.117662, -0.331355, 0.0932, 0.0794525, 0.0507444, 0.118471, -0.304669, -0.226227, -0.139295, 0.0721744, -0.0331557, 0.0135453, 0.187411, 0.0527661, -0.247657, 0.137273, 0.159107, 0.135049, -0.14637, -0.135453, -0.0921891, -0.199339, 0.111597, -0.0163757, -0.0105128, 0.151425, -0.118471, 0.0464989, -0.00141518, -0.100074, -0.113013, 0.102298, -0.0646941, -0.191454, -0.0194082, -0.153649, -0.0624702, -0.0776329, 0.161735, -0.0588312, 0.144753, -0.213693, 0.0964347, -0.0600442, -0.023856, -0.21713, -0.115236, -0.053777, 0.219758, -0.0355818, -0.0345709, 0.231484, -0.0590334, 0.201765, -0.136868, 0.104521, -0.117662, -0.043062, 0.0675245, 0.0847088, -0.100478, 0.128377, 0.13141, 0.084911, -0.310936, 0.0438707, -0.0204191, -0.00404338, -0.135858, 0.150212, -0.0481162, 0.0715679, -0.0422533, -0.100882, 0.0976477, -0.272726, -0.240379}
};
# 33 "./data_include.h" 2
# 1 "./data_4th/hidden_states.h" 1

const attn_fixed_t hidden_states[1][384] = {
    {-0.031341552734, 0.005634307861, 0.008308410645, -0.003650665283, -0.040069580078, -0.008613586426, 0.012229919434, 0.002740859985, -0.010581970215, -0.016098022461, -0.023696899414, 0.003917694092, 0.007488250732, 0.037506103516, -0.078735351562, 0.035186767578, -0.029190063477, -0.069213867188, -0.06396484375, 0.000401973724, 0.011253356934, 0.021194458008, 0.040161132812, -0.038421630859, 0.00936126709, 0.007743835449, -0.001036643982, -0.034729003906, 0.048522949219, -0.053527832031, 0.066833496094, -0.030776977539, -0.050018310547, -0.051696777344, -0.061004638672, 0.007919311523, 0.003929138184, -0.056060791016, -0.010765075684, -0.043334960938, 0.0654296875, -0.045928955078, 0.012977600098, 0.003580093384, -0.057495117188, -0.018661499023, -0.028396606445, -0.043914794922, 0.010612487793, 0.006855010986, -0.068298339844, -0.039855957031, 0.0078125, 0.039489746094, -0.040100097656, -0.048828125, -0.036590576172, -0.002765655518, -0.029235839844, -0.032562255859, -0.050109863281, 0.076965332031, 0.027481079102, -0.119934082031, -0.065490722656, -0.060089111328, -0.016998291016, 0.010734558105, 0.030944824219, -0.01114654541, -0.023696899414, -0.070739746094, 0.024856567383, -0.124816894531, -0.046539306641, 0.053344726562, 0.074035644531, -0.052978515625, -0.076293945312, -0.057434082031, 0.054718017578, -0.010093688965, 0.007339477539, -0.039184570312, 0.056518554688, 0.053924560547, -0.02473449707, 0.035705566406, 0.038238525391, 0.009857177734, 0.084228515625, 0.022415161133, 0.044281005859, 0.054931640625, 0.008453369141, -0.005035400391, 0.018508911133, 0.021743774414, 0.018341064453, 0.042694091797, 0.060516357422, -0.0927734375, -0.018890380859, -0.022125244141, 0.110412597656, 0.0615234375, 0.007663726807, 0.021896362305, -0.035125732422, 0.004493713379, 0.015762329102, 0.058532714844, -0.049133300781, -0.040161132812, -0.034637451172, -0.034149169922, -0.048492431641, 0.018798828125, -0.009941101074, 0.030059814453, -0.000682353973, -0.010353088379, -0.058532714844, 0.045684814453, -0.020874023438, -0.0107421875, -0.06640625, 0.001051902771, 0.125610351562, 0.046325683594, 0.059326171875, -0.016265869141, -0.004627227783, 0.0126953125, 0.025466918945, -0.068420410156, -0.0625, 0.013137817383, -0.0546875, -0.020919799805, 0.035797119141, 0.023742675781, 0.009063720703, 0.001799583435, -0.029769897461, 0.035522460938, 0.047271728516, -0.007247924805, -0.002601623535, -0.09716796875, 0.040222167969, -0.005168914795, 0.069519042969, -0.017517089844, 0.028656005859, 0.019683837891, -0.026184082031, -0.023284912109, -0.057159423828, -0.024887084961, 0.038482666016, 0.086486816406, 0.035308837891, -0.07177734375, 0.020843505859, 0.068054199219, 0.025100708008, -0.006721496582, -0.121826171875, -0.039001464844, -0.065734863281, -0.000410079956, 0.037963867188, -0.070922851562, -0.0703125, 0.024078369141, 0.023468017578, 0.047119140625, 0.056213378906, 0.049255371094, -0.017868041992, 0.034271240234, -0.052642822266, -0.061950683594, 0.050720214844, -0.042419433594, 0.031585693359, 0.022003173828, -0.054046630859, 0.030990600586, -0.039306640625, -0.031341552734, 0.089111328125, 0.001764297485, 0.003400802612, -0.0634765625, 0.050964355469, 0.003257751465, 0.063354492188, 0.053558349609, 0.054016113281, 0.052429199219, -0.018844604492, 0.062744140625, -0.009841918945, -0.014221191406, -0.055969238281, -0.030487060547, 0.017669677734, 0.067443847656, -0.059631347656, -0.004661560059, 0.003597259521, -0.047302246094, 0.018997192383, -0.011070251465, 0.033203125, -0.056976318359, -0.028457641602, -0.090515136719, 0.019134521484, -0.006351470947, 0.068420410156, -0.017517089844, 0.062683105469, -0.03466796875, 0.014198303223, 0.014106750488, 0.020233154297, 0.000160455704, -0.06396484375, -0.010513305664, 0.026931762695, 0.0654296875, -0.025787353516, 0.079406738281, -0.059600830078, 0.049163818359, 0.045318603516, 0.034545898438, 0.0419921875, 0.052886962891, 0.08544921875, -0.046813964844, 0.052307128906, 0.046661376953, -0.030151367188, -0.000973701477, 0.028182983398, -0.000800132751, 0.083923339844, -0.038940429688, -0.001174926758, 0.028381347656, -0.046691894531, 0.082458496094, -0.029663085938, -9.9480152e-05, -0.000829696655, -0.041870117188, -0.043609619141, 0.00475692749, 0.010848999023, -0.030288696289, -0.012680053711, 0.034484863281, -0.061004638672, 0.052185058594, 0.036224365234, -0.045776367188, 0.015731811523, 0.051147460938, 0.017959594727, -0.057952880859, -0.013832092285, -0.005844116211, 0.033203125, 0.011726379395, 0.038299560547, -0.022933959961, 0.021499633789, -0.073547363281, 0.036407470703, -0.036224365234, 0.040771484375, -0.062561035156, 0.012886047363, -0.052581787109, 0.002103805542, -0.032592773438, 0.056549072266, -0.016540527344, 0.02082824707, 0.000524997711, 0.003135681152, -0.010360717773, -0.005355834961, 0.007881164551, 0.048645019531, -0.025527954102, -0.039215087891, -0.075134277344, 0.005950927734, -0.010055541992, -0.010223388672, -0.00594329834, -0.046203613281, -0.019744873047, -0.032745361328, 0.000463485718, 0.05078125, 0.000628471375, 0.045806884766, -0.037200927734, 0.029556274414, 0.069213867188, -0.036285400391, 0.013092041016, -0.03515625, -0.043029785156, -0.027938842773, -0.042846679688, -0.003959655762, -0.042724609375, 0.045593261719, -0.01171875, -0.015617370605, -0.02912902832, 0.049591064453, 0.058502197266, 0.00463104248, -0.008247375488, -0.008796691895, 0.009628295898, 0.00687789917, -0.019485473633, -0.060272216797, 0.012268066406, -0.020050048828, -0.063171386719, 0.02099609375, -0.037841796875, -0.004806518555, 0.003852844238, -0.053833007812, 0.02278137207, -0.032440185547, -0.057830810547, 0.067077636719, -0.029586791992, -0.033966064453, -0.007076263428, -0.026397705078, 0.051635742188, -0.022033691406, 0.052093505859, -0.003566741943, -0.002893447876, -0.013069152832, 0.031646728516, 0.017807006836, 0.045257568359, -0.04638671875, 0.037475585938, -0.016265869141, 0.003257751465, 0.024230957031, 0.019287109375, -0.031646728516, -0.019577026367, -0.026901245117, -0.055145263672, -0.046325683594, 0.003410339355, 0.067016601562, -0.062194824219, -0.044006347656, 0.020385742188, 0.041046142578, -0.002979278564, 0.019927978516, -0.005237579346, 0.036712646484, 0.003847122192}
};
# 34 "./data_include.h" 2
# 15 "./layer.h" 2




template <int C, typename T>
void init_1d_mem (
  T mem[C],
  T val
) {
  INIT_1D_MEM_LOOP_1: for (int i = 0; i < C; i++)
    mem[i] = val;
}




template <int R, int C, typename T>
void init_2d_mem (
  T mem[R][C],
  T val
) {
  INIT_2D_MEM_LOOP_1: for (int i = 0; i < R; i++)
    INIT_2D_MEM_LOOP_2: for (int j = 0; j < C; j++)
      mem[i][j] = val;
}




template <int P, int R, int C, typename T>
void init_3d_mem (
  T mem[P][R][C],
  T val
) {
  INIT_3D_MEM_LOOP_1: for (int i = 0; i < P; i++)
    INIT_3D_MEM_LOOP_2: for (int j = 0; j < R; j++)
      INIT_3D_MEM_LOOP_3: for (int k = 0; k < C; k++)
        mem[i][j][k] = val;
}




attn_fixed_t attention_abs(attn_fixed_t a) {
  return (a < (attn_fixed_t)0.0) ? (attn_fixed_t)(-a) : a;
}
# 80 "./layer.h"
template <int C>
void rms_norm(
  attn_fixed_t input[C],
  const attn_fixed_t weight[C],
  attn_fixed_t epsilon
) {
  attn_fixed_t variance = 0.0;
  RMS_NORM_LOOP_1: for (int i = 0; i < C; i++){
    variance += input[i] * input[i];
  }

  variance = (attn_fixed_t)1.0 / hls::sqrt(variance / C + epsilon);
  RMS_NORM_LOOP_2: for (int i = 0; i < C; i++)
    input[i] *= variance * (attn_fixed_t)weight[i];
}




template <typename T>
T attention_max(T a, T b) {
  return (a > b) ? a : b;
}




attn_fixed_t attention_round(attn_fixed_t a) {
  return (a > (attn_fixed_t)0.0) ? (attn_fixed_t)(a + (attn_fixed_t)0.5) : (attn_fixed_t)(a - (attn_fixed_t)0.5);
}




template <int R, int C>
void quantize_activation(
  attn_fixed_t input[R][C],
  sbit8_t output_states[R][C/4][4],
  attn_fixed_t output_scales[R],
  sbit8_t num_bits
) {
  sbit32_t Qn = -(1 << (num_bits - 1));
  sbit32_t Qp = (1 << (num_bits - 1)) - 1;

  QUANTIZE_ACTIVATION_LOOP_1: for (int i = 0; i < R; i++) {


      attn_fixed_t max_val = attention_abs(input[i][0]);
      QUANTIZE_ACTIVATION_LOOP_2: for (int j = 1; j < C; j++)
        if (attention_abs(input[i][j]) > max_val) max_val = attention_abs(input[i][j]);
      attn_fixed_t max_v = attention_max<attn_fixed_t>(max_val, (attn_fixed_t)(1e-5));
      attn_fixed_t scale = (attn_fixed_t)Qp / max_v;
      output_scales[i] = scale;


      QUANTIZE_ACTIVATION_LOOP_3: for (int jo = 0; jo < (C/4)/(C/24); jo++) {
        QUANTIZE_ACTIVATION_LOOP_4: for (int ji = 0; ji < (C/24); ji++) {
          int j = jo * (C/24) + ji;
          QUANTIZE_ACTIVATION_LOOP_5: for (int k = 0; k < 4; k++){
#pragma HLS UNROLL
# 138 "./layer.h"

            sbit32_t quantized_value = attention_round(input[i][(j << 2) + k] * scale);
            sbit8_t quantized_value_clamped = (quantized_value < Qn) ? Qn : ((quantized_value > Qp) ? Qp : quantized_value);
            output_states[i][j][k] = (sbit8_t)quantized_value_clamped;
          }
        }
      }
  }
}




template <int R, int IN_C, int OUT_C>
void linear_forward_no_mul (
  sbit8_t input[R][IN_C/4][4],
  attn_fixed_t output[R][OUT_C],
  const attn_fixed_t scales[R],
  const uint8_t packed_weights[IN_C/4][OUT_C],
  const attn_fixed_t w_scale
) {

  LINEAR_FORWARD_NO_MUL_LOOP_1: for (int i = 0; i < R; i++) {
    LINEAR_FORWARD_NO_MUL_LOOP_2: for (int j = 0; j < OUT_C; j++) {
      LINEAR_FORWARD_NO_MUL_LOOP_3: for (int ko = 0; ko < (IN_C/4)/(IN_C/24); ko++) {
#pragma HLS PIPELINE
# 162 "./layer.h"

        LINEAR_FORWARD_NO_MUL_LOOP_4: for (int ki = 0; ki < (IN_C/24); ki++) {
          int k = ko * (IN_C/24) + ki;
          uint8_t packed_val = packed_weights[k][j];
          LINEAR_FORWARD_NO_MUL_LOOP_5: for (int l = 0; l < 4; l++) {
            int8_t weight_val = (packed_val >> (2 * l)) & 0b11;
            sbit8_t new_val = 0;
            if (weight_val == 0b01) new_val += input[i][k][l];
            else if (weight_val == 0b10) new_val -= input[i][k][l];
            output[i][j] += new_val;
          }
        }
      }
      output[i][j] /= (scales[i] * w_scale);
    }
  }
}




template <int P, int R, int C>
void reshape_2D_to_3D (
  attn_fixed_t input[P][R*C],
  attn_fixed_t output[R][P][C]
) {
  RESHAPE_2D_TO_3D_LOOP_1: for (int j = 0; j < P; j++)
    RESHAPE_2D_TO_3D_LOOP_2: for (int i = 0; i < R; i++)
      RESHAPE_2D_TO_3D_LOOP_3: for (int k = 0; k < C; k++)
        output[i][j][k] = input[j][i * C + k];
}




template <int P, int R, int C>
void apply_rotary_pos_emb (
  attn_fixed_t input_q[R][P][C],
  attn_fixed_t input_k[R][P][C],
  attn_fixed_t output_q[R][P][C],
  attn_fixed_t output_k[R][P][C],
  attn_fixed_t p_id
) {


  attn_fixed_t rotated_q[R][P][C];
  attn_fixed_t rotated_k[R][P][C];
  APPLY_ROTARY_POS_EMB_LOOP_1: for (int i = 0; i < R; i++) {
    APPLY_ROTARY_POS_EMB_LOOP_2: for (int j = 0; j < P; j++) {
      APPLY_ROTARY_POS_EMB_LOOP_3: for (int k = 0; k < C / 2; k++) {
        rotated_q[i][j][k] = - input_q[i][j][k + C / 2];
        rotated_k[i][j][k] = - input_k[i][j][k + C / 2];
        rotated_q[i][j][k + C / 2] = input_q[i][j][k];
        rotated_k[i][j][k + C / 2] = input_k[i][j][k];
      }
    }
  }


  APPLY_ROTARY_POS_EMB_LOOP_4: for (int i = 0; i < R; i++) {
    APPLY_ROTARY_POS_EMB_LOOP_5: for (int j = 0; j < P; j++) {
      APPLY_ROTARY_POS_EMB_LOOP_6: for (int k = 0; k < C; k++) {
        output_q[i][j][k] =
          input_q[i][j][k] * (attn_fixed_t)cos_tab[p_id][k] + rotated_q[i][j][k] * (attn_fixed_t)sin_tab[p_id][k];
        output_k[i][j][k] =
          input_k[i][j][k] * (attn_fixed_t)cos_tab[p_id][k] + rotated_k[i][j][k] * (attn_fixed_t)sin_tab[p_id][k];
      }
    }
  }
}




template <int P, int R, int C>
void cache_update (
  const attn_fixed_t cache_in[P][R][C],
  attn_fixed_t cache_out[P][R+1][C],
  attn_fixed_t update[P][1][C]
) {
  CACHE_UPDATE_LOOP_1: for (int i = 0; i < P; i++)
    CACHE_UPDATE_LOOP_2: for (int j = 0; j < R+1; j++)
      CACHE_UPDATE_LOOP_3: for (int k = 0; k < C; k++)
        cache_out[i][j][k] = (j != R) ? cache_in[i][j][k] : update[i][0][k];
}




template <int P, int R, int C>
void transpose_last_two_dims (
  attn_fixed_t input[R][P][C],
  attn_fixed_t output[R][C][P]
) {
  TRANSPOSE_LAST_TWO_DIMS_LOOP_1: for (int i = 0; i < R; i++)
    TRANSPOSE_LAST_TWO_DIMS_LOOP_2: for (int j = 0; j < P; j++)
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3: for (int k = 0; k < C; k++)
        output[i][k][j] = input[i][j][k];
}




template <
  int P1,
  int R1,
  int C1,
  int P2,
  int R2,
  int C2
> void GEMM_3D_float (
  attn_fixed_t input_1[P1][R1][C1],
  attn_fixed_t input_2[P2][R2][C2],
  attn_fixed_t output[P1][R1][C2]
) {
  GEMM_3D_FLOAT_LOOP_1: for (int i = 0; i < P1; i++) {
    GEMM_3D_FLOAT_LOOP_2: for (int j = 0; j < R1; j++) {
      GEMM_3D_FLOAT_LOOP_3: for (int k = 0; k < C2; k++) {
        output[i][j][k] = 0;
        GEMM_3D_FLOAT_LOOP_4: for (int l = 0; l < C1; l++)
          output[i][j][k] += input_1[i][j][l] * input_2[i][l][k];
      }
    }
  }
}




template <int P>
void create_causal_mask (
  attn_fixed_t mask[P][P]
) {
  CREATE_CAUSAL_MASK_LOOP_1: for (int i = 0; i < P; i++)
    CREATE_CAUSAL_MASK_LOOP_2: for (int j = 0; j < P; j++)
      mask[i][j] = (j <= i) ? (attn_fixed_t)0.0 : FIXED32_MIN;
}




template <int P, int R, int C>
void softmax (
  attn_fixed_t input[R][P][C]
) {
  attn_fixed_t max_val, sum;
  SOFTMAX_LOOP_1: for (int i = 0; i < R; i++) {
    SOFTMAX_LOOP_2: for (int j = 0; j < P; j++) {
      max_val = input[i][j][0];
      SOFTMAX_LOOP_3: for (int k = 1; k < C; k++)
        if (input[i][j][k] > max_val) max_val = input[i][j][k];
      sum = 0.0;
      SOFTMAX_LOOP_4: for (int k = 0; k < C; k++) {
        attn_fixed_t x = input[i][j][k] - max_val;

        input[i][j][k] = hls::exp(x);
        sum += input[i][j][k];
      }
      SOFTMAX_LOOP_5: for (int k = 0; k < C; k++)
        input[i][j][k] /= sum;
    }
  }
}
# 8 "attention.cpp" 2





void dut(hls::stream<st_fixed32_t> &strm_in, hls::stream<st_fixed32_t> &strm_out) {
  attn_fixed_t input[SEQ_LEN_DECODE][HS_COLS_BASIC];
  attn_fixed_t output[SEQ_LEN_DECODE][PROJ_COLS_BASIC];


  for (int i = 0; i < SEQ_LEN_DECODE; i++)
    for (int j = 0; j < HS_COLS_BASIC; j++){
      input[i][j] = (attn_fixed_t)strm_in.read();
    }


  attention<
    CACHE_SIZE_INIT,
    SEQ_LEN_DECODE,
    HS_COLS_BASIC,
    PROJ_COLS_BASIC,
    NUM_HEADS_BASIC,
    HEAD_DIM_BASIC
  > (
    input,
    output,
    q_weights,
    q_scale,
    k_weights,
    k_scale,
    v_weights,
    v_scale,
    o_weights,
    o_scale,
    k_cache,
    v_cache,
    ln_weight_in,
    ln_weight,
    P_ID
  );


  for (int i = 0; i < SEQ_LEN_DECODE; i++)
    for (int j = 0; j < PROJ_COLS_BASIC; j++)
      strm_out.write((st_fixed32_t)output[i][j]);
}




template <
  int CACHE_SIZE_INIT,
  int SEQ_LEN,
  int HS_COLS,
  int PROJ_COLS,
  int NUM_HEADS,
  int HEAD_DIM
> void attention (
  attn_fixed_t hidden_states[SEQ_LEN][HS_COLS],
  attn_fixed_t final_output[SEQ_LEN][PROJ_COLS],
  const uint8_t q_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t q_scale,
  const uint8_t k_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t k_scale,
  const uint8_t v_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t v_scale,
  const uint8_t o_weights[HS_COLS/4][PROJ_COLS],
  const attn_fixed_t o_scale,
  const attn_fixed_t k_cache[NUM_HEADS][CACHE_SIZE_INIT][HEAD_DIM],
  const attn_fixed_t v_cache[NUM_HEADS][CACHE_SIZE_INIT][HEAD_DIM],
  const attn_fixed_t ln_weight_in[HS_COLS],
  const attn_fixed_t ln_weight[PROJ_COLS],
  const attn_fixed_t p_id
) {
#pragma HLS ARRAY_PARTITION variable=&k_weights cyclic factor=16 dim=1
# 81 "attention.cpp"

#pragma HLS ARRAY_PARTITION variable=&o_weights cyclic factor=16 dim=1
# 81 "attention.cpp"

#pragma HLS ARRAY_PARTITION variable=&q_weights cyclic factor=16 dim=1
# 81 "attention.cpp"

#pragma HLS ARRAY_PARTITION variable=&v_weights cyclic factor=16 dim=1
# 81 "attention.cpp"



  RMS_NORM_LOOP_1: for (int s = 0; s < SEQ_LEN; s++) {
    rms_norm<HS_COLS>(
      hidden_states[s],
      ln_weight_in,
      NORM_EPSILON
    );
  }


  sbit8_t quantized_hidden_states[SEQ_LEN][HS_COLS/4][4];
#pragma HLS ARRAY_PARTITION variable=&quantized_hidden_states complete dim=3
# 93 "attention.cpp"

#pragma HLS ARRAY_PARTITION variable=&quantized_hidden_states cyclic factor=16 dim=2
# 93 "attention.cpp"

  attn_fixed_t scales[SEQ_LEN];

  init_1d_mem<SEQ_LEN, attn_fixed_t>(scales, 1);

  quantize_activation<SEQ_LEN, HS_COLS>(
    hidden_states,
    quantized_hidden_states,
    scales,
    8
  );


  attn_fixed_t q_proj_re[SEQ_LEN][PROJ_COLS];
  attn_fixed_t k_proj_re[SEQ_LEN][PROJ_COLS];
  attn_fixed_t v_proj_re[SEQ_LEN][PROJ_COLS];

  init_2d_mem<SEQ_LEN, PROJ_COLS, attn_fixed_t>(q_proj_re, 0);
  init_2d_mem<SEQ_LEN, PROJ_COLS, attn_fixed_t>(k_proj_re, 0);
  init_2d_mem<SEQ_LEN, PROJ_COLS, attn_fixed_t>(v_proj_re, 0);

  linear_forward_no_mul<SEQ_LEN, HS_COLS, PROJ_COLS>(
    quantized_hidden_states,
    q_proj_re,
    scales,
    q_weights,
    q_scale
  );
  linear_forward_no_mul<SEQ_LEN, HS_COLS, PROJ_COLS>(
    quantized_hidden_states,
    k_proj_re,
    scales,
    k_weights,
    k_scale
  );
  linear_forward_no_mul<SEQ_LEN, HS_COLS, PROJ_COLS>(
    quantized_hidden_states,
    v_proj_re,
    scales,
    v_weights,
    v_scale
  );

  attn_fixed_t q_proj[NUM_HEADS][SEQ_LEN][HEAD_DIM];
  attn_fixed_t k_proj[NUM_HEADS][SEQ_LEN][HEAD_DIM];
  attn_fixed_t v_proj[NUM_HEADS][SEQ_LEN][HEAD_DIM];

  reshape_2D_to_3D<SEQ_LEN, NUM_HEADS, HEAD_DIM>(q_proj_re, q_proj);
  reshape_2D_to_3D<SEQ_LEN, NUM_HEADS, HEAD_DIM>(k_proj_re, k_proj);
  reshape_2D_to_3D<SEQ_LEN, NUM_HEADS, HEAD_DIM>(v_proj_re, v_proj);


  attn_fixed_t q_embed[NUM_HEADS][SEQ_LEN][HEAD_DIM];
  attn_fixed_t k_embed[NUM_HEADS][SEQ_LEN][HEAD_DIM];
  apply_rotary_pos_emb<SEQ_LEN, NUM_HEADS, HEAD_DIM>(
    q_proj, k_proj, q_embed, k_embed, p_id
  );
  attn_fixed_t k_cache_upd[NUM_HEADS][CACHE_SIZE_INIT+1][HEAD_DIM];
  attn_fixed_t v_cache_upd[NUM_HEADS][CACHE_SIZE_INIT+1][HEAD_DIM];
  cache_update<NUM_HEADS, CACHE_SIZE_INIT, HEAD_DIM>(
    k_cache, k_cache_upd, k_embed
  );
  cache_update<NUM_HEADS, CACHE_SIZE_INIT, HEAD_DIM>(
    v_cache, v_cache_upd, v_proj
  );

  attn_fixed_t k_proj_transposed[NUM_HEADS][HEAD_DIM][CACHE_SIZE_INIT+1];
  transpose_last_two_dims<CACHE_SIZE_INIT+1, NUM_HEADS, HEAD_DIM>(k_cache_upd, k_proj_transposed);


  attn_fixed_t attn_weights[NUM_HEADS][SEQ_LEN][CACHE_SIZE_INIT+1];
  GEMM_3D_float<
    NUM_HEADS,
    SEQ_LEN,
    HEAD_DIM,
    NUM_HEADS,
    HEAD_DIM,
    CACHE_SIZE_INIT+1
  > (
    q_embed,
    k_proj_transposed,
    attn_weights
  );

  SF_LOOP_1: for (int h = 0; h < NUM_HEADS; ++h)
    SF_LOOP_2: for (int s = 0; s < SEQ_LEN; ++s)
      SF_LOOP_3: for (int d = 0; d < CACHE_SIZE_INIT+1; ++d)
        attn_weights[h][s][d] /= HEAD_DIM_BASIC_SQRT;

  attn_fixed_t causal_mask[SEQ_LEN][SEQ_LEN];
  create_causal_mask<SEQ_LEN>(causal_mask);
  CM_LOOP_1: for (int h = 0; h < NUM_HEADS; ++h)
    CM_LOOP_2: for (int s = 0; s < SEQ_LEN; ++s)
      CM_LOOP_3: for (int d = 0; d < SEQ_LEN; ++d)
        attn_weights[h][s][d] += causal_mask[s][d];


  softmax<SEQ_LEN, NUM_HEADS, CACHE_SIZE_INIT+1>(attn_weights);


  attn_fixed_t attn_output[NUM_HEADS][SEQ_LEN][HEAD_DIM];
  GEMM_3D_float<
    NUM_HEADS,
    SEQ_LEN,
    CACHE_SIZE_INIT+1,
    NUM_HEADS,
    CACHE_SIZE_INIT+1,
    HEAD_DIM
  > (
    attn_weights,
    v_cache_upd,
    attn_output
  );

  attn_fixed_t attn_output_2D[SEQ_LEN][PROJ_COLS];
  init_2d_mem<SEQ_LEN, PROJ_COLS, attn_fixed_t>(attn_output_2D, 0);
  ATTN_2D_LOOP_1: for (int s = 0; s < SEQ_LEN; ++s)
    ATTN_2D_LOOP_2: for (int h = 0; h < NUM_HEADS; ++h)
      ATTN_2D_LOOP_3: for (int d = 0; d < HEAD_DIM; ++d)
        attn_output_2D[s][h * HEAD_DIM + d] = attn_output[h][s][d];


  RMS_NORM_LOOP_2: for (int s = 0; s < SEQ_LEN; ++s)
    rms_norm<PROJ_COLS>(
      attn_output_2D[s],
      ln_weight,
      NORM_EPSILON
    );



  sbit8_t quantized_final_output[SEQ_LEN][PROJ_COLS/4][4];
#pragma HLS ARRAY_PARTITION variable=&quantized_final_output complete dim=3
# 224 "attention.cpp"

#pragma HLS ARRAY_PARTITION variable=&quantized_final_output cyclic factor=16 dim=2
# 224 "attention.cpp"

  attn_fixed_t final_scales[SEQ_LEN];
  init_1d_mem<SEQ_LEN, attn_fixed_t>(final_scales, 1);
  quantize_activation<SEQ_LEN, PROJ_COLS>(
    attn_output_2D,
    quantized_final_output,
    final_scales,
    8
  );

  init_2d_mem<SEQ_LEN, PROJ_COLS, attn_fixed_t>(final_output, 0);
  linear_forward_no_mul<SEQ_LEN, PROJ_COLS, PROJ_COLS>(
    quantized_final_output,
    final_output,
    final_scales,
    o_weights,
    o_scale
  );
}
