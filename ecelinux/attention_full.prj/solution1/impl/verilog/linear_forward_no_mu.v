// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0,
        scales_0_V_read,
        packed_weights_address0,
        packed_weights_ce0,
        packed_weights_q0,
        w_scale_V
);

parameter    ap_ST_fsm_state1 = 91'd1;
parameter    ap_ST_fsm_state2 = 91'd2;
parameter    ap_ST_fsm_state3 = 91'd4;
parameter    ap_ST_fsm_state4 = 91'd8;
parameter    ap_ST_fsm_state5 = 91'd16;
parameter    ap_ST_fsm_state6 = 91'd32;
parameter    ap_ST_fsm_state7 = 91'd64;
parameter    ap_ST_fsm_state8 = 91'd128;
parameter    ap_ST_fsm_state9 = 91'd256;
parameter    ap_ST_fsm_state10 = 91'd512;
parameter    ap_ST_fsm_state11 = 91'd1024;
parameter    ap_ST_fsm_state12 = 91'd2048;
parameter    ap_ST_fsm_state13 = 91'd4096;
parameter    ap_ST_fsm_state14 = 91'd8192;
parameter    ap_ST_fsm_state15 = 91'd16384;
parameter    ap_ST_fsm_state16 = 91'd32768;
parameter    ap_ST_fsm_state17 = 91'd65536;
parameter    ap_ST_fsm_state18 = 91'd131072;
parameter    ap_ST_fsm_state19 = 91'd262144;
parameter    ap_ST_fsm_state20 = 91'd524288;
parameter    ap_ST_fsm_state21 = 91'd1048576;
parameter    ap_ST_fsm_state22 = 91'd2097152;
parameter    ap_ST_fsm_state23 = 91'd4194304;
parameter    ap_ST_fsm_state24 = 91'd8388608;
parameter    ap_ST_fsm_state25 = 91'd16777216;
parameter    ap_ST_fsm_state26 = 91'd33554432;
parameter    ap_ST_fsm_state27 = 91'd67108864;
parameter    ap_ST_fsm_state28 = 91'd134217728;
parameter    ap_ST_fsm_state29 = 91'd268435456;
parameter    ap_ST_fsm_state30 = 91'd536870912;
parameter    ap_ST_fsm_state31 = 91'd1073741824;
parameter    ap_ST_fsm_state32 = 91'd2147483648;
parameter    ap_ST_fsm_state33 = 91'd4294967296;
parameter    ap_ST_fsm_state34 = 91'd8589934592;
parameter    ap_ST_fsm_state35 = 91'd17179869184;
parameter    ap_ST_fsm_state36 = 91'd34359738368;
parameter    ap_ST_fsm_state37 = 91'd68719476736;
parameter    ap_ST_fsm_state38 = 91'd137438953472;
parameter    ap_ST_fsm_state39 = 91'd274877906944;
parameter    ap_ST_fsm_state40 = 91'd549755813888;
parameter    ap_ST_fsm_state41 = 91'd1099511627776;
parameter    ap_ST_fsm_state42 = 91'd2199023255552;
parameter    ap_ST_fsm_state43 = 91'd4398046511104;
parameter    ap_ST_fsm_state44 = 91'd8796093022208;
parameter    ap_ST_fsm_state45 = 91'd17592186044416;
parameter    ap_ST_fsm_state46 = 91'd35184372088832;
parameter    ap_ST_fsm_state47 = 91'd70368744177664;
parameter    ap_ST_fsm_state48 = 91'd140737488355328;
parameter    ap_ST_fsm_state49 = 91'd281474976710656;
parameter    ap_ST_fsm_state50 = 91'd562949953421312;
parameter    ap_ST_fsm_state51 = 91'd1125899906842624;
parameter    ap_ST_fsm_state52 = 91'd2251799813685248;
parameter    ap_ST_fsm_state53 = 91'd4503599627370496;
parameter    ap_ST_fsm_state54 = 91'd9007199254740992;
parameter    ap_ST_fsm_state55 = 91'd18014398509481984;
parameter    ap_ST_fsm_state56 = 91'd36028797018963968;
parameter    ap_ST_fsm_state57 = 91'd72057594037927936;
parameter    ap_ST_fsm_state58 = 91'd144115188075855872;
parameter    ap_ST_fsm_state59 = 91'd288230376151711744;
parameter    ap_ST_fsm_state60 = 91'd576460752303423488;
parameter    ap_ST_fsm_state61 = 91'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 91'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 91'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 91'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 91'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 91'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 91'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 91'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 91'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 91'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 91'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 91'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 91'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 91'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 91'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 91'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 91'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 91'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 91'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 91'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 91'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 91'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 91'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 91'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 91'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 91'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 91'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 91'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 91'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 91'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 91'd1237940039285380274899124224;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_V_address0;
output   input_0_V_ce0;
input  [7:0] input_0_V_q0;
output  [10:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [37:0] output_0_V_d0;
input  [37:0] output_0_V_q0;
input  [37:0] scales_0_V_read;
output  [19:0] packed_weights_address0;
output   packed_weights_ce0;
input  [7:0] packed_weights_q0;
input  [25:0] w_scale_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_V_ce0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg[37:0] output_0_V_d0;
reg packed_weights_ce0;

(* fsm_encoding = "none" *) reg   [90:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [77:0] sext_ln1148_fu_200_p1;
reg  signed [77:0] sext_ln1148_reg_440;
wire   [10:0] add_ln120_fu_210_p2;
reg   [10:0] add_ln120_reg_448;
wire    ap_CS_fsm_state2;
wire   [20:0] zext_ln1265_fu_221_p1;
reg   [20:0] zext_ln1265_reg_453;
wire   [0:0] icmp_ln120_fu_204_p2;
reg   [10:0] output_0_V_addr_reg_458;
wire   [2:0] add_ln121_fu_231_p2;
reg   [2:0] add_ln121_reg_466;
wire    ap_CS_fsm_state3;
wire   [8:0] shl_ln2_fu_237_p3;
reg   [8:0] shl_ln2_reg_471;
wire   [0:0] icmp_ln121_fu_225_p2;
wire   [6:0] add_ln122_fu_255_p2;
reg   [6:0] add_ln122_reg_479;
wire    ap_CS_fsm_state4;
wire   [8:0] add_ln123_fu_261_p2;
reg   [8:0] add_ln123_reg_484;
wire   [0:0] icmp_ln122_fu_249_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] zext_ln124_1_fu_311_p1;
reg   [11:0] zext_ln124_1_reg_496;
wire    ap_CS_fsm_state6;
reg   [7:0] packed_weights_load_reg_501;
wire   [2:0] add_ln125_fu_321_p2;
reg   [2:0] add_ln125_reg_509;
wire    ap_CS_fsm_state7;
wire   [1:0] trunc_ln126_fu_342_p1;
reg   [1:0] trunc_ln126_reg_514;
wire   [0:0] icmp_ln125_fu_315_p2;
wire   [37:0] add_ln703_fu_416_p2;
reg   [37:0] add_ln703_reg_525;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
reg   [10:0] j_0_0_reg_142;
wire    ap_CS_fsm_state91;
reg   [2:0] ko_0_0_reg_153;
reg   [6:0] ki_0_0_reg_164;
reg   [2:0] l_0_0_reg_175;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln124_fu_216_p1;
wire  signed [63:0] sext_ln124_fu_299_p1;
wire   [63:0] zext_ln700_1_fu_355_p1;
wire   [37:0] trunc_ln703_fu_435_p1;
wire   [25:0] mul_ln1118_fu_194_p0;
wire  signed [37:0] mul_ln1118_fu_194_p1;
wire   [62:0] mul_ln1118_fu_194_p2;
wire   [8:0] zext_ln122_fu_245_p1;
wire   [19:0] tmp_52_fu_266_p3;
wire   [17:0] tmp_53_fu_277_p3;
wire   [20:0] zext_ln124_2_fu_273_p1;
wire   [20:0] zext_ln124_3_fu_284_p1;
wire   [20:0] sub_ln124_fu_288_p2;
wire   [20:0] add_ln124_fu_294_p2;
wire   [10:0] tmp_51_fu_304_p3;
wire   [2:0] shl_ln126_fu_327_p2;
wire   [7:0] zext_ln126_fu_333_p1;
wire   [7:0] lshr_ln126_fu_337_p2;
wire   [11:0] zext_ln700_fu_346_p1;
wire   [11:0] add_ln700_fu_350_p2;
wire   [0:0] icmp_ln128_fu_360_p2;
wire   [0:0] icmp_ln129_fu_365_p2;
wire   [0:0] xor_ln128_fu_376_p2;
wire   [0:0] and_ln129_fu_382_p2;
wire   [7:0] sub_ln701_fu_370_p2;
wire   [7:0] select_ln128_fu_388_p3;
wire   [7:0] select_ln129_fu_396_p3;
wire   [27:0] shl_ln4_fu_404_p3;
wire  signed [37:0] sext_ln703_fu_412_p1;
wire   [77:0] grp_fu_430_p0;
wire  signed [62:0] grp_fu_430_p1;
wire   [37:0] grp_fu_430_p2;
reg    grp_fu_430_ap_start;
wire    grp_fu_430_ap_done;
reg   [90:0] ap_NS_fsm;
wire   [62:0] mul_ln1118_fu_194_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 91'd1;
end

dut_sdiv_78ns_63seOg #(
    .ID( 1 ),
    .NUM_STAGE( 82 ),
    .din0_WIDTH( 78 ),
    .din1_WIDTH( 63 ),
    .dout_WIDTH( 38 ))
dut_sdiv_78ns_63seOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_430_ap_start),
    .done(grp_fu_430_ap_done),
    .din0(grp_fu_430_p0),
    .din1(grp_fu_430_p1),
    .ce(1'b1),
    .dout(grp_fu_430_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        j_0_0_reg_142 <= add_ln120_reg_448;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_142 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ki_0_0_reg_164 <= add_ln122_reg_479;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln121_fu_225_p2 == 1'd0))) begin
        ki_0_0_reg_164 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln122_fu_249_p2 == 1'd1))) begin
        ko_0_0_reg_153 <= add_ln121_reg_466;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_204_p2 == 1'd0))) begin
        ko_0_0_reg_153 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        l_0_0_reg_175 <= add_ln125_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        l_0_0_reg_175 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln120_reg_448 <= add_ln120_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln121_reg_466 <= add_ln121_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln122_reg_479 <= add_ln122_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln122_fu_249_p2 == 1'd0))) begin
        add_ln123_reg_484 <= add_ln123_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln125_reg_509 <= add_ln125_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln703_reg_525 <= add_ln703_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_204_p2 == 1'd0))) begin
        output_0_V_addr_reg_458 <= zext_ln124_fu_216_p1;
        zext_ln1265_reg_453[10 : 0] <= zext_ln1265_fu_221_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        packed_weights_load_reg_501 <= packed_weights_q0;
        zext_ln124_1_reg_496[10 : 2] <= zext_ln124_1_fu_311_p1[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln1148_reg_440 <= sext_ln1148_fu_200_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln121_fu_225_p2 == 1'd0))) begin
        shl_ln2_reg_471[8 : 6] <= shl_ln2_fu_237_p3[8 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln125_fu_315_p2 == 1'd0))) begin
        trunc_ln126_reg_514 <= trunc_ln126_fu_342_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_204_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_204_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_430_ap_start = 1'b1;
    end else begin
        grp_fu_430_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        output_0_V_d0 = trunc_ln703_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_0_V_d0 = add_ln703_reg_525;
    end else begin
        output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state91))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        packed_weights_ce0 = 1'b1;
    end else begin
        packed_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln120_fu_204_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln121_fu_225_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln122_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln125_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_210_p2 = (j_0_0_reg_142 + 11'd1);

assign add_ln121_fu_231_p2 = (ko_0_0_reg_153 + 3'd1);

assign add_ln122_fu_255_p2 = (ki_0_0_reg_164 + 7'd1);

assign add_ln123_fu_261_p2 = (zext_ln122_fu_245_p1 + shl_ln2_reg_471);

assign add_ln124_fu_294_p2 = (sub_ln124_fu_288_p2 + zext_ln1265_reg_453);

assign add_ln125_fu_321_p2 = (l_0_0_reg_175 + 3'd1);

assign add_ln700_fu_350_p2 = (zext_ln124_1_reg_496 + zext_ln700_fu_346_p1);

assign add_ln703_fu_416_p2 = ($signed(sext_ln703_fu_412_p1) + $signed(output_0_V_q0));

assign and_ln129_fu_382_p2 = (xor_ln128_fu_376_p2 & icmp_ln129_fu_365_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign grp_fu_430_p0 = {{output_0_V_q0}, {40'd0}};

assign grp_fu_430_p1 = sext_ln1148_reg_440;

assign icmp_ln120_fu_204_p2 = ((j_0_0_reg_142 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_225_p2 = ((ko_0_0_reg_153 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_249_p2 = ((ki_0_0_reg_164 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_315_p2 = ((l_0_0_reg_175 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_360_p2 = ((trunc_ln126_reg_514 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_365_p2 = ((trunc_ln126_reg_514 == 2'd2) ? 1'b1 : 1'b0);

assign input_0_V_address0 = zext_ln700_1_fu_355_p1;

assign lshr_ln126_fu_337_p2 = packed_weights_load_reg_501 >> zext_ln126_fu_333_p1;

assign mul_ln1118_fu_194_p0 = mul_ln1118_fu_194_p00;

assign mul_ln1118_fu_194_p00 = w_scale_V;

assign mul_ln1118_fu_194_p1 = scales_0_V_read;

assign mul_ln1118_fu_194_p2 = ($signed({{1'b0}, {mul_ln1118_fu_194_p0}}) * $signed(mul_ln1118_fu_194_p1));

assign output_0_V_address0 = output_0_V_addr_reg_458;

assign packed_weights_address0 = sext_ln124_fu_299_p1;

assign select_ln128_fu_388_p3 = ((icmp_ln128_fu_360_p2[0:0] === 1'b1) ? input_0_V_q0 : 8'd0);

assign select_ln129_fu_396_p3 = ((and_ln129_fu_382_p2[0:0] === 1'b1) ? sub_ln701_fu_370_p2 : select_ln128_fu_388_p3);

assign sext_ln1148_fu_200_p1 = $signed(mul_ln1118_fu_194_p2);

assign sext_ln124_fu_299_p1 = $signed(add_ln124_fu_294_p2);

assign sext_ln703_fu_412_p1 = $signed(shl_ln4_fu_404_p3);

assign shl_ln126_fu_327_p2 = l_0_0_reg_175 << 3'd1;

assign shl_ln2_fu_237_p3 = {{ko_0_0_reg_153}, {6'd0}};

assign shl_ln4_fu_404_p3 = {{select_ln129_fu_396_p3}, {20'd0}};

assign sub_ln124_fu_288_p2 = (zext_ln124_2_fu_273_p1 - zext_ln124_3_fu_284_p1);

assign sub_ln701_fu_370_p2 = (8'd0 - input_0_V_q0);

assign tmp_51_fu_304_p3 = {{add_ln123_reg_484}, {2'd0}};

assign tmp_52_fu_266_p3 = {{add_ln123_reg_484}, {11'd0}};

assign tmp_53_fu_277_p3 = {{add_ln123_reg_484}, {9'd0}};

assign trunc_ln126_fu_342_p1 = lshr_ln126_fu_337_p2[1:0];

assign trunc_ln703_fu_435_p1 = grp_fu_430_p2[37:0];

assign xor_ln128_fu_376_p2 = (icmp_ln128_fu_360_p2 ^ 1'd1);

assign zext_ln122_fu_245_p1 = ki_0_0_reg_164;

assign zext_ln124_1_fu_311_p1 = tmp_51_fu_304_p3;

assign zext_ln124_2_fu_273_p1 = tmp_52_fu_266_p3;

assign zext_ln124_3_fu_284_p1 = tmp_53_fu_277_p3;

assign zext_ln124_fu_216_p1 = j_0_0_reg_142;

assign zext_ln1265_fu_221_p1 = j_0_0_reg_142;

assign zext_ln126_fu_333_p1 = shl_ln126_fu_327_p2;

assign zext_ln700_1_fu_355_p1 = add_ln700_fu_350_p2;

assign zext_ln700_fu_346_p1 = l_0_0_reg_175;

always @ (posedge ap_clk) begin
    zext_ln1265_reg_453[20:11] <= 10'b0000000000;
    shl_ln2_reg_471[5:0] <= 6'b000000;
    zext_ln124_1_reg_496[1:0] <= 2'b00;
    zext_ln124_1_reg_496[11] <= 1'b0;
end

endmodule //linear_forward_no_mu
