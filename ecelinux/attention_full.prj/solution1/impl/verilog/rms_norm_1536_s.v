// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rms_norm_1536_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_we0,
        input_0_V_d0,
        input_0_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_state2 = 72'd2;
parameter    ap_ST_fsm_state3 = 72'd4;
parameter    ap_ST_fsm_state4 = 72'd8;
parameter    ap_ST_fsm_state5 = 72'd16;
parameter    ap_ST_fsm_state6 = 72'd32;
parameter    ap_ST_fsm_state7 = 72'd64;
parameter    ap_ST_fsm_state8 = 72'd128;
parameter    ap_ST_fsm_state9 = 72'd256;
parameter    ap_ST_fsm_state10 = 72'd512;
parameter    ap_ST_fsm_state11 = 72'd1024;
parameter    ap_ST_fsm_state12 = 72'd2048;
parameter    ap_ST_fsm_state13 = 72'd4096;
parameter    ap_ST_fsm_state14 = 72'd8192;
parameter    ap_ST_fsm_state15 = 72'd16384;
parameter    ap_ST_fsm_state16 = 72'd32768;
parameter    ap_ST_fsm_state17 = 72'd65536;
parameter    ap_ST_fsm_state18 = 72'd131072;
parameter    ap_ST_fsm_state19 = 72'd262144;
parameter    ap_ST_fsm_state20 = 72'd524288;
parameter    ap_ST_fsm_state21 = 72'd1048576;
parameter    ap_ST_fsm_state22 = 72'd2097152;
parameter    ap_ST_fsm_state23 = 72'd4194304;
parameter    ap_ST_fsm_state24 = 72'd8388608;
parameter    ap_ST_fsm_state25 = 72'd16777216;
parameter    ap_ST_fsm_state26 = 72'd33554432;
parameter    ap_ST_fsm_state27 = 72'd67108864;
parameter    ap_ST_fsm_state28 = 72'd134217728;
parameter    ap_ST_fsm_state29 = 72'd268435456;
parameter    ap_ST_fsm_state30 = 72'd536870912;
parameter    ap_ST_fsm_state31 = 72'd1073741824;
parameter    ap_ST_fsm_state32 = 72'd2147483648;
parameter    ap_ST_fsm_state33 = 72'd4294967296;
parameter    ap_ST_fsm_state34 = 72'd8589934592;
parameter    ap_ST_fsm_state35 = 72'd17179869184;
parameter    ap_ST_fsm_state36 = 72'd34359738368;
parameter    ap_ST_fsm_state37 = 72'd68719476736;
parameter    ap_ST_fsm_state38 = 72'd137438953472;
parameter    ap_ST_fsm_state39 = 72'd274877906944;
parameter    ap_ST_fsm_state40 = 72'd549755813888;
parameter    ap_ST_fsm_state41 = 72'd1099511627776;
parameter    ap_ST_fsm_state42 = 72'd2199023255552;
parameter    ap_ST_fsm_state43 = 72'd4398046511104;
parameter    ap_ST_fsm_state44 = 72'd8796093022208;
parameter    ap_ST_fsm_state45 = 72'd17592186044416;
parameter    ap_ST_fsm_state46 = 72'd35184372088832;
parameter    ap_ST_fsm_state47 = 72'd70368744177664;
parameter    ap_ST_fsm_state48 = 72'd140737488355328;
parameter    ap_ST_fsm_state49 = 72'd281474976710656;
parameter    ap_ST_fsm_state50 = 72'd562949953421312;
parameter    ap_ST_fsm_state51 = 72'd1125899906842624;
parameter    ap_ST_fsm_state52 = 72'd2251799813685248;
parameter    ap_ST_fsm_state53 = 72'd4503599627370496;
parameter    ap_ST_fsm_state54 = 72'd9007199254740992;
parameter    ap_ST_fsm_state55 = 72'd18014398509481984;
parameter    ap_ST_fsm_state56 = 72'd36028797018963968;
parameter    ap_ST_fsm_state57 = 72'd72057594037927936;
parameter    ap_ST_fsm_state58 = 72'd144115188075855872;
parameter    ap_ST_fsm_state59 = 72'd288230376151711744;
parameter    ap_ST_fsm_state60 = 72'd576460752303423488;
parameter    ap_ST_fsm_state61 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 72'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 72'd2361183241434822606848;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_V_address0;
output   input_0_V_ce0;
output   input_0_V_we0;
output  [39:0] input_0_V_d0;
input  [39:0] input_0_V_q0;
output  [10:0] weight_V_address0;
output   weight_V_ce0;
input  [39:0] weight_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_0_V_address0;
reg input_0_V_ce0;
reg input_0_V_we0;
reg weight_V_ce0;

(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [39:0] reg_132;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state66;
wire   [10:0] i_fu_142_p2;
reg   [10:0] i_reg_310;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln87_fu_136_p2;
wire   [55:0] mul_ln1192_fu_167_p2;
reg   [55:0] mul_ln1192_reg_325;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [80:0] grp_fu_157_p2;
reg   [80:0] mul_ln1148_reg_335;
wire    ap_CS_fsm_state6;
reg   [29:0] tmp_72_reg_340;
wire   [29:0] select_ln1148_1_fu_242_p3;
reg   [29:0] select_ln1148_1_reg_346;
wire    ap_CS_fsm_state7;
wire   [28:0] grp_sqrt_fixed_42_26_s_fu_127_ap_return;
reg   [28:0] agg_result_V_i_reg_351;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire   [71:0] zext_ln1118_fu_258_p1;
reg   [71:0] zext_ln1118_reg_361;
wire    ap_CS_fsm_state63;
wire   [10:0] i_1_fu_268_p2;
reg   [10:0] i_1_reg_369;
wire    ap_CS_fsm_state64;
wire   [0:0] icmp_ln92_fu_262_p2;
reg   [10:0] input_0_V_addr_4_reg_379;
reg   [39:0] weight_V_load_reg_384;
wire    ap_CS_fsm_state65;
wire  signed [71:0] mul_ln1118_fu_283_p2;
reg  signed [71:0] mul_ln1118_reg_389;
wire    ap_CS_fsm_state67;
reg   [39:0] trunc_ln_reg_399;
wire    ap_CS_fsm_state71;
reg  signed [39:0] p_Val2_s_reg_93;
reg   [10:0] i_0_reg_105;
reg   [10:0] i1_0_reg_116;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln88_fu_148_p1;
wire   [63:0] zext_ln93_fu_274_p1;
wire   [41:0] grp_fu_157_p1;
wire  signed [39:0] mul_ln1192_fu_167_p0;
wire  signed [55:0] sext_ln1118_1_fu_163_p1;
wire  signed [39:0] mul_ln1192_fu_167_p1;
wire   [55:0] lhs_V_fu_173_p3;
wire   [55:0] ret_V_fu_181_p2;
wire   [80:0] sub_ln1148_fu_206_p2;
wire   [0:0] tmp_fu_211_p3;
wire   [29:0] tmp_71_fu_219_p4;
wire   [29:0] select_ln1148_fu_229_p3;
wire   [29:0] sub_ln1227_fu_236_p2;
wire   [28:0] grp_fu_252_p1;
wire   [32:0] grp_fu_252_p2;
wire  signed [39:0] mul_ln1118_fu_283_p0;
wire   [32:0] mul_ln1118_fu_283_p1;
wire   [71:0] grp_fu_292_p2;
reg    grp_fu_252_ap_start;
wire    grp_fu_252_ap_done;
reg   [71:0] ap_NS_fsm;
wire   [32:0] grp_fu_252_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 72'd1;
end

sqrt_fixed_42_26_s grp_sqrt_fixed_42_26_s_fu_127(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(select_ln1148_1_reg_346),
    .ap_return(grp_sqrt_fixed_42_26_s_fu_127_ap_return)
);

dut_mul_40s_42ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 81 ))
dut_mul_40s_42ns_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_s_reg_93),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

dut_udiv_33s_29nscud #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 33 ))
dut_udiv_33s_29nscud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_252_ap_start),
    .done(grp_fu_252_ap_done),
    .din0(33'd4294967296),
    .din1(grp_fu_252_p1),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

dut_mul_72s_40s_7dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 72 ))
dut_mul_72s_40s_7dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln1118_reg_389),
    .din1(reg_132),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        i1_0_reg_116 <= i_1_reg_369;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        i1_0_reg_116 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_105 <= i_reg_310;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_105 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_s_reg_93 <= {{ret_V_fu_181_p2[55:16]}};
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_93 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        agg_result_V_i_reg_351 <= grp_sqrt_fixed_42_26_s_fu_127_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_1_reg_369 <= i_1_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_310 <= i_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln92_fu_262_p2 == 1'd0))) begin
        input_0_V_addr_4_reg_379 <= zext_ln93_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        mul_ln1118_reg_389 <= mul_ln1118_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln1148_reg_335 <= grp_fu_157_p2;
        tmp_72_reg_340 <= {{grp_fu_157_p2[80:51]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln1192_reg_325 <= mul_ln1192_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_132 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln1148_1_reg_346 <= select_ln1148_1_fu_242_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        trunc_ln_reg_399 <= {{grp_fu_292_p2[71:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        weight_V_load_reg_384 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        zext_ln1118_reg_361[32 : 0] <= zext_ln1118_fu_258_p1[32 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state64) & (icmp_ln92_fu_262_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln92_fu_262_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_252_ap_start = 1'b1;
    end else begin
        grp_fu_252_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state65))) begin
        input_0_V_address0 = input_0_V_addr_4_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_0_V_address0 = zext_ln88_fu_148_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state2))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        input_0_V_we0 = 1'b1;
    end else begin
        input_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_136_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln92_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_fu_157_p1 = 81'd1466015503702;

assign grp_fu_252_p1 = grp_fu_252_p10;

assign grp_fu_252_p10 = agg_result_V_i_reg_351;

assign i_1_fu_268_p2 = (i1_0_reg_116 + 11'd1);

assign i_fu_142_p2 = (i_0_reg_105 + 11'd1);

assign icmp_ln87_fu_136_p2 = ((i_0_reg_105 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_262_p2 = ((i1_0_reg_116 == 11'd1536) ? 1'b1 : 1'b0);

assign input_0_V_d0 = trunc_ln_reg_399;

assign lhs_V_fu_173_p3 = {{p_Val2_s_reg_93}, {16'd0}};

assign mul_ln1118_fu_283_p0 = weight_V_load_reg_384;

assign mul_ln1118_fu_283_p1 = zext_ln1118_reg_361;

assign mul_ln1118_fu_283_p2 = ($signed(mul_ln1118_fu_283_p0) * $signed({{1'b0}, {mul_ln1118_fu_283_p1}}));

assign mul_ln1192_fu_167_p0 = sext_ln1118_1_fu_163_p1;

assign mul_ln1192_fu_167_p1 = sext_ln1118_1_fu_163_p1;

assign mul_ln1192_fu_167_p2 = ($signed(mul_ln1192_fu_167_p0) * $signed(mul_ln1192_fu_167_p1));

assign ret_V_fu_181_p2 = (mul_ln1192_reg_325 + lhs_V_fu_173_p3);

assign select_ln1148_1_fu_242_p3 = ((tmp_fu_211_p3[0:0] === 1'b1) ? sub_ln1227_fu_236_p2 : tmp_72_reg_340);

assign select_ln1148_fu_229_p3 = ((tmp_fu_211_p3[0:0] === 1'b1) ? tmp_71_fu_219_p4 : tmp_72_reg_340);

assign sext_ln1118_1_fu_163_p1 = reg_132;

assign sub_ln1148_fu_206_p2 = (81'd0 - mul_ln1148_reg_335);

assign sub_ln1227_fu_236_p2 = (30'd0 - select_ln1148_fu_229_p3);

assign tmp_71_fu_219_p4 = {{sub_ln1148_fu_206_p2[80:51]}};

assign tmp_fu_211_p3 = p_Val2_s_reg_93[32'd39];

assign weight_V_address0 = zext_ln93_fu_274_p1;

assign zext_ln1118_fu_258_p1 = grp_fu_252_p2;

assign zext_ln88_fu_148_p1 = i_0_reg_105;

assign zext_ln93_fu_274_p1 = i1_0_reg_116;

always @ (posedge ap_clk) begin
    zext_ln1118_reg_361[71:33] <= 39'b000000000000000000000000000000000000000;
end

endmodule //rms_norm_1536_s
