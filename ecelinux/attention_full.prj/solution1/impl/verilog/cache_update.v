// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_in_V_address0,
        cache_in_V_ce0,
        cache_in_V_q0,
        cache_out_V_address0,
        cache_out_V_ce0,
        cache_out_V_we0,
        cache_out_V_d0,
        update_0_V_address0,
        update_0_V_ce0,
        update_0_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] cache_in_V_address0;
output   cache_in_V_ce0;
input  [39:0] cache_in_V_q0;
output  [13:0] cache_out_V_address0;
output   cache_out_V_ce0;
output   cache_out_V_we0;
output  [39:0] cache_out_V_d0;
output  [10:0] update_0_V_address0;
output   update_0_V_ce0;
input  [39:0] update_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_in_V_ce0;
reg cache_out_V_ce0;
reg cache_out_V_we0;
reg update_0_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_148_p2;
reg   [4:0] i_reg_392;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln204_fu_170_p2;
reg   [7:0] add_ln204_reg_397;
wire   [0:0] icmp_ln201_fu_142_p2;
wire  signed [9:0] sext_ln203_fu_206_p1;
reg  signed [9:0] sext_ln203_reg_402;
wire   [11:0] sub_ln204_fu_230_p2;
reg   [11:0] sub_ln204_reg_407;
wire   [2:0] j_fu_242_p2;
reg   [2:0] j_reg_415;
wire    ap_CS_fsm_state3;
wire   [13:0] sub_ln204_1_fu_285_p2;
reg   [13:0] sub_ln204_1_reg_420;
wire   [0:0] icmp_ln202_fu_236_p2;
wire   [14:0] sub_ln203_4_fu_316_p2;
reg   [14:0] sub_ln203_4_reg_425;
wire   [0:0] icmp_ln204_fu_322_p2;
reg   [0:0] icmp_ln204_reg_430;
wire   [6:0] k_fu_334_p2;
reg   [6:0] k_reg_438;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln203_fu_328_p2;
wire   [14:0] add_ln203_4_fu_362_p2;
reg   [14:0] add_ln203_4_reg_448;
reg   [4:0] i_0_reg_109;
reg   [2:0] j_0_reg_120;
reg   [6:0] k_0_reg_131;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln204_9_fu_357_p1;
wire  signed [63:0] sext_ln204_fu_372_p1;
wire   [63:0] zext_ln203_11_fu_377_p1;
wire   [6:0] tmp_60_fu_158_p3;
wire   [7:0] zext_ln204_fu_154_p1;
wire   [7:0] zext_ln204_1_fu_166_p1;
wire   [7:0] tmp_61_fu_176_p3;
wire   [5:0] tmp_62_fu_188_p3;
wire   [8:0] zext_ln203_fu_184_p1;
wire   [8:0] zext_ln203_10_fu_196_p1;
wire   [8:0] sub_ln203_fu_200_p2;
wire   [9:0] tmp_64_fu_218_p3;
wire   [11:0] tmp_63_fu_210_p3;
wire   [11:0] zext_ln204_2_fu_226_p1;
wire   [7:0] zext_ln204_4_fu_252_p1;
wire   [7:0] add_ln204_1_fu_256_p2;
wire   [6:0] trunc_ln204_fu_261_p1;
wire   [12:0] tmp_77_fu_273_p3;
wire   [13:0] p_shl7_cast_fu_265_p3;
wire   [13:0] zext_ln204_5_fu_281_p1;
wire   [9:0] zext_ln204_3_fu_248_p1;
wire   [9:0] add_ln203_fu_291_p2;
wire   [7:0] trunc_ln203_fu_296_p1;
wire   [14:0] p_shl5_cast_fu_300_p3;
wire   [14:0] p_shl6_cast_fu_308_p3;
wire   [13:0] zext_ln204_8_fu_348_p1;
wire   [13:0] add_ln204_2_fu_352_p2;
wire   [14:0] zext_ln204_7_fu_344_p1;
wire   [11:0] zext_ln204_6_fu_340_p1;
wire   [11:0] add_ln204_3_fu_367_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_109 <= i_reg_392;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_109 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_120 <= j_reg_415;
    end else if (((icmp_ln201_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_120 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_131 <= k_reg_438;
    end else if (((icmp_ln202_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_131 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln203_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_4_reg_448 <= add_ln203_4_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln201_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln204_reg_397 <= add_ln204_fu_170_p2;
        sext_ln203_reg_402[9 : 1] <= sext_ln203_fu_206_p1[9 : 1];
        sub_ln204_reg_407[11 : 5] <= sub_ln204_fu_230_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_392 <= i_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln204_reg_430 <= icmp_ln204_fu_322_p2;
        sub_ln203_4_reg_425[14 : 5] <= sub_ln203_4_fu_316_p2[14 : 5];
        sub_ln204_1_reg_420[13 : 5] <= sub_ln204_1_fu_285_p2[13 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_415 <= j_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_438 <= k_fu_334_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln201_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln201_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_in_V_ce0 = 1'b1;
    end else begin
        cache_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_ce0 = 1'b1;
    end else begin
        cache_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_V_we0 = 1'b1;
    end else begin
        cache_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        update_0_V_ce0 = 1'b1;
    end else begin
        update_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln201_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln202_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln203_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_4_fu_362_p2 = (sub_ln203_4_reg_425 + zext_ln204_7_fu_344_p1);

assign add_ln203_fu_291_p2 = ($signed(sext_ln203_reg_402) + $signed(zext_ln204_3_fu_248_p1));

assign add_ln204_1_fu_256_p2 = (add_ln204_reg_397 + zext_ln204_4_fu_252_p1);

assign add_ln204_2_fu_352_p2 = (sub_ln204_1_reg_420 + zext_ln204_8_fu_348_p1);

assign add_ln204_3_fu_367_p2 = (sub_ln204_reg_407 + zext_ln204_6_fu_340_p1);

assign add_ln204_fu_170_p2 = (zext_ln204_fu_154_p1 + zext_ln204_1_fu_166_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign cache_in_V_address0 = zext_ln204_9_fu_357_p1;

assign cache_out_V_address0 = zext_ln203_11_fu_377_p1;

assign cache_out_V_d0 = ((icmp_ln204_reg_430[0:0] === 1'b1) ? update_0_V_q0 : cache_in_V_q0);

assign i_fu_148_p2 = (i_0_reg_109 + 5'd1);

assign icmp_ln201_fu_142_p2 = ((i_0_reg_109 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_236_p2 = ((j_0_reg_120 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_328_p2 = ((k_0_reg_131 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_322_p2 = ((j_0_reg_120 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_242_p2 = (j_0_reg_120 + 3'd1);

assign k_fu_334_p2 = (k_0_reg_131 + 7'd1);

assign p_shl5_cast_fu_300_p3 = {{trunc_ln203_fu_296_p1}, {7'd0}};

assign p_shl6_cast_fu_308_p3 = {{add_ln203_fu_291_p2}, {5'd0}};

assign p_shl7_cast_fu_265_p3 = {{trunc_ln204_fu_261_p1}, {7'd0}};

assign sext_ln203_fu_206_p1 = $signed(sub_ln203_fu_200_p2);

assign sext_ln204_fu_372_p1 = $signed(add_ln204_3_fu_367_p2);

assign sub_ln203_4_fu_316_p2 = (p_shl5_cast_fu_300_p3 - p_shl6_cast_fu_308_p3);

assign sub_ln203_fu_200_p2 = (zext_ln203_fu_184_p1 - zext_ln203_10_fu_196_p1);

assign sub_ln204_1_fu_285_p2 = (p_shl7_cast_fu_265_p3 - zext_ln204_5_fu_281_p1);

assign sub_ln204_fu_230_p2 = (tmp_63_fu_210_p3 - zext_ln204_2_fu_226_p1);

assign tmp_60_fu_158_p3 = {{i_0_reg_109}, {2'd0}};

assign tmp_61_fu_176_p3 = {{i_0_reg_109}, {3'd0}};

assign tmp_62_fu_188_p3 = {{i_0_reg_109}, {1'd0}};

assign tmp_63_fu_210_p3 = {{i_0_reg_109}, {7'd0}};

assign tmp_64_fu_218_p3 = {{i_0_reg_109}, {5'd0}};

assign tmp_77_fu_273_p3 = {{add_ln204_1_fu_256_p2}, {5'd0}};

assign trunc_ln203_fu_296_p1 = add_ln203_fu_291_p2[7:0];

assign trunc_ln204_fu_261_p1 = add_ln204_1_fu_256_p2[6:0];

assign update_0_V_address0 = sext_ln204_fu_372_p1;

assign zext_ln203_10_fu_196_p1 = tmp_62_fu_188_p3;

assign zext_ln203_11_fu_377_p1 = add_ln203_4_reg_448;

assign zext_ln203_fu_184_p1 = tmp_61_fu_176_p3;

assign zext_ln204_1_fu_166_p1 = tmp_60_fu_158_p3;

assign zext_ln204_2_fu_226_p1 = tmp_64_fu_218_p3;

assign zext_ln204_3_fu_248_p1 = j_0_reg_120;

assign zext_ln204_4_fu_252_p1 = j_0_reg_120;

assign zext_ln204_5_fu_281_p1 = tmp_77_fu_273_p3;

assign zext_ln204_6_fu_340_p1 = k_0_reg_131;

assign zext_ln204_7_fu_344_p1 = k_0_reg_131;

assign zext_ln204_8_fu_348_p1 = k_0_reg_131;

assign zext_ln204_9_fu_357_p1 = add_ln204_2_fu_352_p2;

assign zext_ln204_fu_154_p1 = i_0_reg_109;

always @ (posedge ap_clk) begin
    sext_ln203_reg_402[0] <= 1'b0;
    sub_ln204_reg_407[4:0] <= 5'b00000;
    sub_ln204_1_reg_420[4:0] <= 5'b00000;
    sub_ln203_4_reg_425[4:0] <= 5'b00000;
end

endmodule //cache_update
