// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantize_activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        output_states_0_V_address0,
        output_states_0_V_ce0,
        output_states_0_V_we0,
        output_states_0_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_state2 = 56'd2;
parameter    ap_ST_fsm_state3 = 56'd4;
parameter    ap_ST_fsm_state4 = 56'd8;
parameter    ap_ST_fsm_state5 = 56'd16;
parameter    ap_ST_fsm_state6 = 56'd32;
parameter    ap_ST_fsm_state7 = 56'd64;
parameter    ap_ST_fsm_state8 = 56'd128;
parameter    ap_ST_fsm_state9 = 56'd256;
parameter    ap_ST_fsm_state10 = 56'd512;
parameter    ap_ST_fsm_state11 = 56'd1024;
parameter    ap_ST_fsm_state12 = 56'd2048;
parameter    ap_ST_fsm_state13 = 56'd4096;
parameter    ap_ST_fsm_state14 = 56'd8192;
parameter    ap_ST_fsm_state15 = 56'd16384;
parameter    ap_ST_fsm_state16 = 56'd32768;
parameter    ap_ST_fsm_state17 = 56'd65536;
parameter    ap_ST_fsm_state18 = 56'd131072;
parameter    ap_ST_fsm_state19 = 56'd262144;
parameter    ap_ST_fsm_state20 = 56'd524288;
parameter    ap_ST_fsm_state21 = 56'd1048576;
parameter    ap_ST_fsm_state22 = 56'd2097152;
parameter    ap_ST_fsm_state23 = 56'd4194304;
parameter    ap_ST_fsm_state24 = 56'd8388608;
parameter    ap_ST_fsm_state25 = 56'd16777216;
parameter    ap_ST_fsm_state26 = 56'd33554432;
parameter    ap_ST_fsm_state27 = 56'd67108864;
parameter    ap_ST_fsm_state28 = 56'd134217728;
parameter    ap_ST_fsm_state29 = 56'd268435456;
parameter    ap_ST_fsm_state30 = 56'd536870912;
parameter    ap_ST_fsm_state31 = 56'd1073741824;
parameter    ap_ST_fsm_state32 = 56'd2147483648;
parameter    ap_ST_fsm_state33 = 56'd4294967296;
parameter    ap_ST_fsm_state34 = 56'd8589934592;
parameter    ap_ST_fsm_state35 = 56'd17179869184;
parameter    ap_ST_fsm_state36 = 56'd34359738368;
parameter    ap_ST_fsm_state37 = 56'd68719476736;
parameter    ap_ST_fsm_state38 = 56'd137438953472;
parameter    ap_ST_fsm_state39 = 56'd274877906944;
parameter    ap_ST_fsm_state40 = 56'd549755813888;
parameter    ap_ST_fsm_state41 = 56'd1099511627776;
parameter    ap_ST_fsm_state42 = 56'd2199023255552;
parameter    ap_ST_fsm_state43 = 56'd4398046511104;
parameter    ap_ST_fsm_state44 = 56'd8796093022208;
parameter    ap_ST_fsm_state45 = 56'd17592186044416;
parameter    ap_ST_fsm_state46 = 56'd35184372088832;
parameter    ap_ST_fsm_state47 = 56'd70368744177664;
parameter    ap_ST_fsm_state48 = 56'd140737488355328;
parameter    ap_ST_fsm_state49 = 56'd281474976710656;
parameter    ap_ST_fsm_state50 = 56'd562949953421312;
parameter    ap_ST_fsm_state51 = 56'd1125899906842624;
parameter    ap_ST_fsm_state52 = 56'd2251799813685248;
parameter    ap_ST_fsm_state53 = 56'd4503599627370496;
parameter    ap_ST_fsm_state54 = 56'd9007199254740992;
parameter    ap_ST_fsm_state55 = 56'd18014398509481984;
parameter    ap_ST_fsm_state56 = 56'd36028797018963968;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_V_address0;
output   input_0_V_ce0;
input  [39:0] input_0_V_q0;
output  [10:0] output_states_0_V_address0;
output   output_states_0_V_ce0;
output   output_states_0_V_we0;
output  [7:0] output_states_0_V_d0;
output  [39:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_0_V_address0;
reg input_0_V_ce0;
reg output_states_0_V_ce0;
reg output_states_0_V_we0;

(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [39:0] grp_fu_207_p3;
reg   [39:0] p_Val2_10_reg_483;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln87_fu_215_p2;
wire   [10:0] add_ln87_fu_226_p2;
reg   [10:0] add_ln87_reg_496;
reg   [39:0] p_Val2_12_reg_501;
wire    ap_CS_fsm_state5;
wire   [39:0] p_Val2_13_fu_243_p3;
wire    ap_CS_fsm_state6;
wire   [39:0] grp_fu_232_p2;
reg   [39:0] udiv_ln1148_reg_512;
wire    ap_CS_fsm_state49;
wire   [55:0] zext_ln94_fu_250_p1;
reg   [55:0] zext_ln94_reg_516;
wire   [2:0] add_ln94_fu_260_p2;
reg   [2:0] add_ln94_reg_524;
wire    ap_CS_fsm_state50;
wire   [8:0] shl_ln_fu_266_p3;
reg   [8:0] shl_ln_reg_529;
wire   [0:0] icmp_ln94_fu_254_p2;
wire   [6:0] add_ln95_fu_284_p2;
reg   [6:0] add_ln95_reg_537;
wire    ap_CS_fsm_state51;
wire   [10:0] shl_ln1_fu_295_p3;
reg   [10:0] shl_ln1_reg_542;
wire   [0:0] icmp_ln95_fu_278_p2;
wire   [11:0] zext_ln97_1_fu_303_p1;
reg   [11:0] zext_ln97_1_reg_547;
wire   [2:0] add_ln97_fu_317_p2;
reg   [2:0] add_ln97_reg_555;
wire    ap_CS_fsm_state52;
wire   [0:0] icmp_ln97_fu_311_p2;
wire   [11:0] add_ln180_fu_337_p2;
reg   [11:0] add_ln180_reg_565;
reg   [39:0] input_0_V_load_reg_570;
wire    ap_CS_fsm_state53;
reg   [39:0] p_Val2_9_reg_575;
wire    ap_CS_fsm_state54;
wire   [23:0] select_ln850_fu_420_p3;
reg   [23:0] select_ln850_reg_581;
wire    ap_CS_fsm_state55;
reg   [16:0] tmp_76_reg_587;
reg   [39:0] max_val_V_0_0_reg_139;
wire    ap_CS_fsm_state3;
reg   [10:0] j_0_0_reg_149;
reg   [2:0] jo_0_0_reg_160;
reg   [6:0] ji_0_0_reg_171;
reg   [2:0] k_0_0_reg_182;
wire    ap_CS_fsm_state56;
wire   [63:0] zext_ln88_fu_221_p1;
wire   [63:0] zext_ln98_fu_328_p1;
wire   [63:0] zext_ln180_1_fu_474_p1;
wire   [0:0] grp_fu_193_p3;
wire   [39:0] grp_fu_201_p2;
wire   [0:0] icmp_ln1494_fu_238_p2;
wire   [8:0] zext_ln95_fu_274_p1;
wire   [8:0] add_ln96_fu_290_p2;
wire   [10:0] zext_ln97_fu_307_p1;
wire   [10:0] add_ln98_fu_323_p2;
wire   [11:0] zext_ln180_fu_333_p1;
wire   [39:0] mul_ln1118_fu_345_p0;
wire  signed [39:0] mul_ln1118_fu_345_p1;
wire   [55:0] mul_ln1118_fu_345_p2;
wire   [0:0] icmp_ln1494_26_fu_360_p2;
wire   [39:0] select_ln67_fu_365_p3;
wire   [39:0] add_ln67_fu_373_p2;
wire   [15:0] trunc_ln851_fu_396_p1;
wire   [23:0] p_Result_s_fu_378_p4;
wire   [0:0] icmp_ln851_fu_400_p2;
wire   [23:0] add_ln700_fu_406_p2;
wire   [0:0] tmp_75_fu_388_p3;
wire   [23:0] select_ln851_fu_412_p3;
wire   [0:0] icmp_ln887_fu_438_p2;
wire   [0:0] icmp_ln895_fu_443_p2;
wire   [0:0] or_ln887_fu_459_p2;
wire   [7:0] select_ln887_fu_451_p3;
wire   [7:0] trunc_ln99_fu_448_p1;
reg    grp_fu_232_ap_start;
wire    grp_fu_232_ap_done;
reg   [55:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 56'd1;
end

dut_udiv_40ns_40neOg #(
    .ID( 1 ),
    .NUM_STAGE( 44 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 40 ))
dut_udiv_40ns_40neOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_232_ap_start),
    .done(grp_fu_232_ap_done),
    .din0(40'd545460846592),
    .din1(max_val_V_0_0_reg_139),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_0_reg_149 <= add_ln87_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_0_reg_149 <= 11'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln97_fu_311_p2 == 1'd1))) begin
        ji_0_0_reg_171 <= add_ln95_reg_537;
    end else if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln94_fu_254_p2 == 1'd0))) begin
        ji_0_0_reg_171 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln95_fu_278_p2 == 1'd1))) begin
        jo_0_0_reg_160 <= add_ln94_reg_524;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        jo_0_0_reg_160 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        k_0_0_reg_182 <= add_ln97_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln95_fu_278_p2 == 1'd0))) begin
        k_0_0_reg_182 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_val_V_0_0_reg_139 <= p_Val2_13_fu_243_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_val_V_0_0_reg_139 <= p_Val2_10_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln97_fu_311_p2 == 1'd0))) begin
        add_ln180_reg_565 <= add_ln180_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln87_fu_215_p2 == 1'd0))) begin
        add_ln87_reg_496 <= add_ln87_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        add_ln94_reg_524 <= add_ln94_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        add_ln95_reg_537 <= add_ln95_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        add_ln97_reg_555 <= add_ln97_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        input_0_V_load_reg_570 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_10_reg_483 <= grp_fu_207_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_12_reg_501 <= grp_fu_207_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        p_Val2_9_reg_575 <= {{mul_ln1118_fu_345_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        select_ln850_reg_581 <= select_ln850_fu_420_p3;
        tmp_76_reg_587 <= {{select_ln850_fu_420_p3[23:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln95_fu_278_p2 == 1'd0))) begin
        shl_ln1_reg_542[10 : 2] <= shl_ln1_fu_295_p3[10 : 2];
        zext_ln97_1_reg_547[10 : 2] <= zext_ln97_1_fu_303_p1[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln94_fu_254_p2 == 1'd0))) begin
        shl_ln_reg_529[8 : 6] <= shl_ln_fu_266_p3[8 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        udiv_ln1148_reg_512 <= grp_fu_232_p2;
        zext_ln94_reg_516[39 : 0] <= zext_ln94_fu_250_p1[39 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state50) & (icmp_ln94_fu_254_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln94_fu_254_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln87_fu_215_p2 == 1'd1))) begin
        grp_fu_232_ap_start = 1'b1;
    end else begin
        grp_fu_232_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        input_0_V_address0 = zext_ln98_fu_328_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_V_address0 = zext_ln88_fu_221_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_0_V_address0 = 64'd0;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        output_states_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        output_states_0_V_we0 = 1'b1;
    end else begin
        output_states_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln87_fu_215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln94_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln95_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln97_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_fu_337_p2 = (zext_ln180_fu_333_p1 + zext_ln97_1_reg_547);

assign add_ln67_fu_373_p2 = (p_Val2_9_reg_575 + select_ln67_fu_365_p3);

assign add_ln700_fu_406_p2 = (24'd1 + p_Result_s_fu_378_p4);

assign add_ln87_fu_226_p2 = (j_0_0_reg_149 + 11'd1);

assign add_ln94_fu_260_p2 = (jo_0_0_reg_160 + 3'd1);

assign add_ln95_fu_284_p2 = (ji_0_0_reg_171 + 7'd1);

assign add_ln96_fu_290_p2 = (shl_ln_reg_529 + zext_ln95_fu_274_p1);

assign add_ln97_fu_317_p2 = (k_0_0_reg_182 + 3'd1);

assign add_ln98_fu_323_p2 = (shl_ln1_reg_542 + zext_ln97_fu_307_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = udiv_ln1148_reg_512;

assign grp_fu_193_p3 = input_0_V_q0[32'd39];

assign grp_fu_201_p2 = (40'd0 - input_0_V_q0);

assign grp_fu_207_p3 = ((grp_fu_193_p3[0:0] === 1'b1) ? grp_fu_201_p2 : input_0_V_q0);

assign icmp_ln1494_26_fu_360_p2 = (($signed(p_Val2_9_reg_575) > $signed(40'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_238_p2 = (($signed(p_Val2_12_reg_501) > $signed(max_val_V_0_0_reg_139)) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_400_p2 = ((trunc_ln851_fu_396_p1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_215_p2 = ((j_0_0_reg_149 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_438_p2 = (($signed(select_ln850_reg_581) < $signed(24'd16777088)) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_443_p2 = (($signed(tmp_76_reg_587) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_254_p2 = ((jo_0_0_reg_160 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_278_p2 = ((ji_0_0_reg_171 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_311_p2 = ((k_0_0_reg_182 == 3'd4) ? 1'b1 : 1'b0);

assign mul_ln1118_fu_345_p0 = zext_ln94_reg_516;

assign mul_ln1118_fu_345_p1 = input_0_V_load_reg_570;

assign mul_ln1118_fu_345_p2 = ($signed({{1'b0}, {mul_ln1118_fu_345_p0}}) * $signed(mul_ln1118_fu_345_p1));

assign or_ln887_fu_459_p2 = (icmp_ln895_fu_443_p2 | icmp_ln887_fu_438_p2);

assign output_states_0_V_address0 = zext_ln180_1_fu_474_p1;

assign output_states_0_V_d0 = ((or_ln887_fu_459_p2[0:0] === 1'b1) ? select_ln887_fu_451_p3 : trunc_ln99_fu_448_p1);

assign p_Result_s_fu_378_p4 = {{add_ln67_fu_373_p2[39:16]}};

assign p_Val2_13_fu_243_p3 = ((icmp_ln1494_fu_238_p2[0:0] === 1'b1) ? p_Val2_12_reg_501 : max_val_V_0_0_reg_139);

assign select_ln67_fu_365_p3 = ((icmp_ln1494_26_fu_360_p2[0:0] === 1'b1) ? 40'd32768 : 40'd1099511595008);

assign select_ln850_fu_420_p3 = ((tmp_75_fu_388_p3[0:0] === 1'b1) ? select_ln851_fu_412_p3 : p_Result_s_fu_378_p4);

assign select_ln851_fu_412_p3 = ((icmp_ln851_fu_400_p2[0:0] === 1'b1) ? p_Result_s_fu_378_p4 : add_ln700_fu_406_p2);

assign select_ln887_fu_451_p3 = ((icmp_ln887_fu_438_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign shl_ln1_fu_295_p3 = {{add_ln96_fu_290_p2}, {2'd0}};

assign shl_ln_fu_266_p3 = {{jo_0_0_reg_160}, {6'd0}};

assign tmp_75_fu_388_p3 = add_ln67_fu_373_p2[32'd39];

assign trunc_ln851_fu_396_p1 = add_ln67_fu_373_p2[15:0];

assign trunc_ln99_fu_448_p1 = select_ln850_reg_581[7:0];

assign zext_ln180_1_fu_474_p1 = add_ln180_reg_565;

assign zext_ln180_fu_333_p1 = k_0_0_reg_182;

assign zext_ln88_fu_221_p1 = j_0_0_reg_149;

assign zext_ln94_fu_250_p1 = grp_fu_232_p2;

assign zext_ln95_fu_274_p1 = ji_0_0_reg_171;

assign zext_ln97_1_fu_303_p1 = shl_ln1_fu_295_p3;

assign zext_ln97_fu_307_p1 = k_0_0_reg_182;

assign zext_ln98_fu_328_p1 = add_ln98_fu_323_p2;

always @ (posedge ap_clk) begin
    zext_ln94_reg_516[55:40] <= 16'b0000000000000000;
    shl_ln_reg_529[5:0] <= 6'b000000;
    shl_ln1_reg_542[1:0] <= 2'b00;
    zext_ln97_1_reg_547[1:0] <= 2'b00;
    zext_ln97_1_reg_547[11] <= 1'b0;
end

endmodule //quantize_activation
