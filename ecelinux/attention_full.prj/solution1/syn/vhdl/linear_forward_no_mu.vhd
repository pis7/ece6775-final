-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_forward_no_mu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    scales_0_V_read : IN STD_LOGIC_VECTOR (39 downto 0);
    packed_weights_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    packed_weights_ce0 : OUT STD_LOGIC;
    packed_weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_scale_V : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of linear_forward_no_mu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (84 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (84 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (84 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (84 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (84 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (84 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (84 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (84 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (84 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (84 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln120_fu_200_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal sext_ln120_reg_440 : STD_LOGIC_VECTOR (71 downto 0);
    signal add_ln120_fu_210_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln120_reg_448 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1265_fu_221_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln1265_reg_453 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln120_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_V_addr_reg_458 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln121_fu_231_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln121_reg_466 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln2_fu_237_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln2_reg_471 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln121_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_fu_255_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln122_reg_479 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln123_fu_261_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln123_reg_484 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln122_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln124_1_fu_311_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln124_1_reg_496 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal packed_weights_load_reg_501 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_fu_321_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln125_reg_509 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln126_fu_342_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln126_reg_514 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln125_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_fu_416_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_reg_525 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_0_0_reg_142 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ko_0_0_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal ki_0_0_reg_164 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_0_0_reg_175 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln124_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln124_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_1_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln703_fu_435_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1148_fu_194_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1148_fu_194_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1148_fu_194_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln122_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_fu_266_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_58_fu_277_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln124_2_fu_273_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln124_3_fu_284_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln124_fu_288_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln124_fu_294_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_56_fu_304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln126_fu_327_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln126_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln126_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln700_fu_346_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln700_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln128_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln129_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln701_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_fu_388_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln129_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln4_fu_404_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_fu_412_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_430_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_430_ap_start : STD_LOGIC;
    signal grp_fu_430_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (84 downto 0);
    signal mul_ln1148_fu_194_p00 : STD_LOGIC_VECTOR (60 downto 0);

    component dut_sdiv_72ns_61sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (60 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    dut_sdiv_72ns_61sfYi_U15 : component dut_sdiv_72ns_61sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 76,
        din0_WIDTH => 72,
        din1_WIDTH => 61,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_430_ap_start,
        done => grp_fu_430_ap_done,
        din0 => grp_fu_430_p0,
        din1 => grp_fu_430_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_0_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                j_0_0_reg_142 <= add_ln120_reg_448;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_142 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    ki_0_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln125_fu_315_p2 = ap_const_lv1_1))) then 
                ki_0_0_reg_164 <= add_ln122_reg_479;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln121_fu_225_p2 = ap_const_lv1_0))) then 
                ki_0_0_reg_164 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    ko_0_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln122_fu_249_p2 = ap_const_lv1_1))) then 
                ko_0_0_reg_153 <= add_ln121_reg_466;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_204_p2 = ap_const_lv1_0))) then 
                ko_0_0_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l_0_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                l_0_0_reg_175 <= add_ln125_reg_509;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                l_0_0_reg_175 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln120_reg_448 <= add_ln120_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln121_reg_466 <= add_ln121_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln122_reg_479 <= add_ln122_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln122_fu_249_p2 = ap_const_lv1_0))) then
                add_ln123_reg_484 <= add_ln123_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln125_reg_509 <= add_ln125_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln703_reg_525 <= add_ln703_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_204_p2 = ap_const_lv1_0))) then
                output_0_V_addr_reg_458 <= zext_ln124_fu_216_p1(11 - 1 downto 0);
                    zext_ln1265_reg_453(10 downto 0) <= zext_ln1265_fu_221_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                packed_weights_load_reg_501 <= packed_weights_q0;
                    zext_ln124_1_reg_496(10 downto 2) <= zext_ln124_1_fu_311_p1(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sext_ln120_reg_440 <= sext_ln120_fu_200_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln121_fu_225_p2 = ap_const_lv1_0))) then
                    shl_ln2_reg_471(8 downto 6) <= shl_ln2_fu_237_p3(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln125_fu_315_p2 = ap_const_lv1_0))) then
                trunc_ln126_reg_514 <= trunc_ln126_fu_342_p1;
            end if;
        end if;
    end process;
    zext_ln1265_reg_453(20 downto 11) <= "0000000000";
    shl_ln2_reg_471(5 downto 0) <= "000000";
    zext_ln124_1_reg_496(1 downto 0) <= "00";
    zext_ln124_1_reg_496(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln120_fu_204_p2, ap_CS_fsm_state3, icmp_ln121_fu_225_p2, ap_CS_fsm_state4, icmp_ln122_fu_249_p2, ap_CS_fsm_state7, icmp_ln125_fu_315_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_204_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln121_fu_225_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln122_fu_249_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln125_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln120_fu_210_p2 <= std_logic_vector(unsigned(j_0_0_reg_142) + unsigned(ap_const_lv11_1));
    add_ln121_fu_231_p2 <= std_logic_vector(unsigned(ko_0_0_reg_153) + unsigned(ap_const_lv3_1));
    add_ln122_fu_255_p2 <= std_logic_vector(unsigned(ki_0_0_reg_164) + unsigned(ap_const_lv7_1));
    add_ln123_fu_261_p2 <= std_logic_vector(unsigned(zext_ln122_fu_245_p1) + unsigned(shl_ln2_reg_471));
    add_ln124_fu_294_p2 <= std_logic_vector(unsigned(sub_ln124_fu_288_p2) + unsigned(zext_ln1265_reg_453));
    add_ln125_fu_321_p2 <= std_logic_vector(unsigned(l_0_0_reg_175) + unsigned(ap_const_lv3_1));
    add_ln700_fu_350_p2 <= std_logic_vector(unsigned(zext_ln124_1_reg_496) + unsigned(zext_ln700_fu_346_p1));
    add_ln703_fu_416_p2 <= std_logic_vector(signed(sext_ln703_fu_412_p1) + signed(output_0_V_q0));
    and_ln129_fu_382_p2 <= (xor_ln128_fu_376_p2 and icmp_ln129_fu_365_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln120_fu_204_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_204_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln120_fu_204_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln120_fu_204_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_430_ap_start_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_430_ap_start <= ap_const_logic_1;
        else 
            grp_fu_430_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_430_p0 <= (output_0_V_q0 & ap_const_lv32_0);
    grp_fu_430_p1 <= sext_ln120_reg_440(61 - 1 downto 0);
    icmp_ln120_fu_204_p2 <= "1" when (j_0_0_reg_142 = ap_const_lv11_600) else "0";
    icmp_ln121_fu_225_p2 <= "1" when (ko_0_0_reg_153 = ap_const_lv3_6) else "0";
    icmp_ln122_fu_249_p2 <= "1" when (ki_0_0_reg_164 = ap_const_lv7_40) else "0";
    icmp_ln125_fu_315_p2 <= "1" when (l_0_0_reg_175 = ap_const_lv3_4) else "0";
    icmp_ln128_fu_360_p2 <= "1" when (trunc_ln126_reg_514 = ap_const_lv2_1) else "0";
    icmp_ln129_fu_365_p2 <= "1" when (trunc_ln126_reg_514 = ap_const_lv2_2) else "0";
    input_0_V_address0 <= zext_ln700_1_fu_355_p1(11 - 1 downto 0);

    input_0_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln126_fu_337_p2 <= std_logic_vector(shift_right(unsigned(packed_weights_load_reg_501),to_integer(unsigned('0' & zext_ln126_fu_333_p1(8-1 downto 0)))));
    mul_ln1148_fu_194_p0 <= mul_ln1148_fu_194_p00(22 - 1 downto 0);
    mul_ln1148_fu_194_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_scale_V),61));
    mul_ln1148_fu_194_p1 <= scales_0_V_read;
    mul_ln1148_fu_194_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1148_fu_194_p0) * signed(mul_ln1148_fu_194_p1))), 61));
    output_0_V_address0 <= output_0_V_addr_reg_458;

    output_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state85, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_V_d0_assign_proc : process(add_ln703_reg_525, ap_CS_fsm_state85, ap_CS_fsm_state9, trunc_ln703_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            output_0_V_d0 <= trunc_ln703_fu_435_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_0_V_d0 <= add_ln703_reg_525;
        else 
            output_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_V_we0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_address0 <= sext_ln124_fu_299_p1(20 - 1 downto 0);

    packed_weights_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            packed_weights_ce0 <= ap_const_logic_1;
        else 
            packed_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln128_fu_388_p3 <= 
        input_0_V_q0 when (icmp_ln128_fu_360_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln129_fu_396_p3 <= 
        sub_ln701_fu_370_p2 when (and_ln129_fu_382_p2(0) = '1') else 
        select_ln128_fu_388_p3;
        sext_ln120_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1148_fu_194_p2),72));

        sext_ln124_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln124_fu_294_p2),64));

        sext_ln703_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln4_fu_404_p3),40));

    shl_ln126_fu_327_p2 <= std_logic_vector(shift_left(unsigned(l_0_0_reg_175),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln2_fu_237_p3 <= (ko_0_0_reg_153 & ap_const_lv6_0);
    shl_ln4_fu_404_p3 <= (select_ln129_fu_396_p3 & ap_const_lv16_0);
    sub_ln124_fu_288_p2 <= std_logic_vector(unsigned(zext_ln124_2_fu_273_p1) - unsigned(zext_ln124_3_fu_284_p1));
    sub_ln701_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(input_0_V_q0));
    tmp_56_fu_304_p3 <= (add_ln123_reg_484 & ap_const_lv2_0);
    tmp_57_fu_266_p3 <= (add_ln123_reg_484 & ap_const_lv11_0);
    tmp_58_fu_277_p3 <= (add_ln123_reg_484 & ap_const_lv9_0);
    trunc_ln126_fu_342_p1 <= lshr_ln126_fu_337_p2(2 - 1 downto 0);
    trunc_ln703_fu_435_p1 <= grp_fu_430_p2(40 - 1 downto 0);
    xor_ln128_fu_376_p2 <= (icmp_ln128_fu_360_p2 xor ap_const_lv1_1);
    zext_ln122_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ki_0_0_reg_164),9));
    zext_ln124_1_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_304_p3),12));
    zext_ln124_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_266_p3),21));
    zext_ln124_3_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_277_p3),21));
    zext_ln124_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_142),64));
    zext_ln1265_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_142),21));
    zext_ln126_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln126_fu_327_p2),8));
    zext_ln700_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_fu_350_p2),64));
    zext_ln700_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_0_reg_175),12));
end behav;
