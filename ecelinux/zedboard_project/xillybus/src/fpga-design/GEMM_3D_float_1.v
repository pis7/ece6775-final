// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_1_0_0_V_address0,
        input_1_0_0_V_ce0,
        input_1_0_0_V_q0,
        input_1_1_0_V_address0,
        input_1_1_0_V_ce0,
        input_1_1_0_V_q0,
        input_1_2_0_V_address0,
        input_1_2_0_V_ce0,
        input_1_2_0_V_q0,
        input_1_3_0_V_address0,
        input_1_3_0_V_ce0,
        input_1_3_0_V_q0,
        input_1_4_0_V_address0,
        input_1_4_0_V_ce0,
        input_1_4_0_V_q0,
        input_1_5_0_V_address0,
        input_1_5_0_V_ce0,
        input_1_5_0_V_q0,
        input_1_6_0_V_address0,
        input_1_6_0_V_ce0,
        input_1_6_0_V_q0,
        input_1_7_0_V_address0,
        input_1_7_0_V_ce0,
        input_1_7_0_V_q0,
        input_1_8_0_V_address0,
        input_1_8_0_V_ce0,
        input_1_8_0_V_q0,
        input_1_9_0_V_address0,
        input_1_9_0_V_ce0,
        input_1_9_0_V_q0,
        input_1_10_0_V_address0,
        input_1_10_0_V_ce0,
        input_1_10_0_V_q0,
        input_1_11_0_V_address0,
        input_1_11_0_V_ce0,
        input_1_11_0_V_q0,
        input_1_12_0_V_address0,
        input_1_12_0_V_ce0,
        input_1_12_0_V_q0,
        input_1_13_0_V_address0,
        input_1_13_0_V_ce0,
        input_1_13_0_V_q0,
        input_1_14_0_V_address0,
        input_1_14_0_V_ce0,
        input_1_14_0_V_q0,
        input_1_15_0_V_address0,
        input_1_15_0_V_ce0,
        input_1_15_0_V_q0,
        input_2_0_V_address0,
        input_2_0_V_ce0,
        input_2_0_V_q0,
        input_2_1_V_address0,
        input_2_1_V_ce0,
        input_2_1_V_q0,
        input_2_2_V_address0,
        input_2_2_V_ce0,
        input_2_2_V_q0,
        input_2_3_V_address0,
        input_2_3_V_ce0,
        input_2_3_V_q0,
        input_2_4_V_address0,
        input_2_4_V_ce0,
        input_2_4_V_q0,
        input_2_5_V_address0,
        input_2_5_V_ce0,
        input_2_5_V_q0,
        input_2_6_V_address0,
        input_2_6_V_ce0,
        input_2_6_V_q0,
        input_2_7_V_address0,
        input_2_7_V_ce0,
        input_2_7_V_q0,
        input_2_8_V_address0,
        input_2_8_V_ce0,
        input_2_8_V_q0,
        input_2_9_V_address0,
        input_2_9_V_ce0,
        input_2_9_V_q0,
        input_2_10_V_address0,
        input_2_10_V_ce0,
        input_2_10_V_q0,
        input_2_11_V_address0,
        input_2_11_V_ce0,
        input_2_11_V_q0,
        input_2_12_V_address0,
        input_2_12_V_ce0,
        input_2_12_V_q0,
        input_2_13_V_address0,
        input_2_13_V_ce0,
        input_2_13_V_q0,
        input_2_14_V_address0,
        input_2_14_V_ce0,
        input_2_14_V_q0,
        input_2_15_V_address0,
        input_2_15_V_ce0,
        input_2_15_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_1_0_0_V_address0;
output   input_1_0_0_V_ce0;
input  [39:0] input_1_0_0_V_q0;
output  [4:0] input_1_1_0_V_address0;
output   input_1_1_0_V_ce0;
input  [39:0] input_1_1_0_V_q0;
output  [4:0] input_1_2_0_V_address0;
output   input_1_2_0_V_ce0;
input  [39:0] input_1_2_0_V_q0;
output  [4:0] input_1_3_0_V_address0;
output   input_1_3_0_V_ce0;
input  [39:0] input_1_3_0_V_q0;
output  [4:0] input_1_4_0_V_address0;
output   input_1_4_0_V_ce0;
input  [39:0] input_1_4_0_V_q0;
output  [4:0] input_1_5_0_V_address0;
output   input_1_5_0_V_ce0;
input  [39:0] input_1_5_0_V_q0;
output  [4:0] input_1_6_0_V_address0;
output   input_1_6_0_V_ce0;
input  [39:0] input_1_6_0_V_q0;
output  [4:0] input_1_7_0_V_address0;
output   input_1_7_0_V_ce0;
input  [39:0] input_1_7_0_V_q0;
output  [4:0] input_1_8_0_V_address0;
output   input_1_8_0_V_ce0;
input  [39:0] input_1_8_0_V_q0;
output  [4:0] input_1_9_0_V_address0;
output   input_1_9_0_V_ce0;
input  [39:0] input_1_9_0_V_q0;
output  [4:0] input_1_10_0_V_address0;
output   input_1_10_0_V_ce0;
input  [39:0] input_1_10_0_V_q0;
output  [4:0] input_1_11_0_V_address0;
output   input_1_11_0_V_ce0;
input  [39:0] input_1_11_0_V_q0;
output  [4:0] input_1_12_0_V_address0;
output   input_1_12_0_V_ce0;
input  [39:0] input_1_12_0_V_q0;
output  [4:0] input_1_13_0_V_address0;
output   input_1_13_0_V_ce0;
input  [39:0] input_1_13_0_V_q0;
output  [4:0] input_1_14_0_V_address0;
output   input_1_14_0_V_ce0;
input  [39:0] input_1_14_0_V_q0;
output  [4:0] input_1_15_0_V_address0;
output   input_1_15_0_V_ce0;
input  [39:0] input_1_15_0_V_q0;
output  [7:0] input_2_0_V_address0;
output   input_2_0_V_ce0;
input  [39:0] input_2_0_V_q0;
output  [7:0] input_2_1_V_address0;
output   input_2_1_V_ce0;
input  [39:0] input_2_1_V_q0;
output  [7:0] input_2_2_V_address0;
output   input_2_2_V_ce0;
input  [39:0] input_2_2_V_q0;
output  [7:0] input_2_3_V_address0;
output   input_2_3_V_ce0;
input  [39:0] input_2_3_V_q0;
output  [7:0] input_2_4_V_address0;
output   input_2_4_V_ce0;
input  [39:0] input_2_4_V_q0;
output  [7:0] input_2_5_V_address0;
output   input_2_5_V_ce0;
input  [39:0] input_2_5_V_q0;
output  [7:0] input_2_6_V_address0;
output   input_2_6_V_ce0;
input  [39:0] input_2_6_V_q0;
output  [7:0] input_2_7_V_address0;
output   input_2_7_V_ce0;
input  [39:0] input_2_7_V_q0;
output  [7:0] input_2_8_V_address0;
output   input_2_8_V_ce0;
input  [39:0] input_2_8_V_q0;
output  [7:0] input_2_9_V_address0;
output   input_2_9_V_ce0;
input  [39:0] input_2_9_V_q0;
output  [7:0] input_2_10_V_address0;
output   input_2_10_V_ce0;
input  [39:0] input_2_10_V_q0;
output  [7:0] input_2_11_V_address0;
output   input_2_11_V_ce0;
input  [39:0] input_2_11_V_q0;
output  [7:0] input_2_12_V_address0;
output   input_2_12_V_ce0;
input  [39:0] input_2_12_V_q0;
output  [7:0] input_2_13_V_address0;
output   input_2_13_V_ce0;
input  [39:0] input_2_13_V_q0;
output  [7:0] input_2_14_V_address0;
output   input_2_14_V_ce0;
input  [39:0] input_2_14_V_q0;
output  [7:0] input_2_15_V_address0;
output   input_2_15_V_ce0;
input  [39:0] input_2_15_V_q0;
output  [5:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;
input  [39:0] output_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_1_0_0_V_ce0;
reg input_1_1_0_V_ce0;
reg input_1_2_0_V_ce0;
reg input_1_3_0_V_ce0;
reg input_1_4_0_V_ce0;
reg input_1_5_0_V_ce0;
reg input_1_6_0_V_ce0;
reg input_1_7_0_V_ce0;
reg input_1_8_0_V_ce0;
reg input_1_9_0_V_ce0;
reg input_1_10_0_V_ce0;
reg input_1_11_0_V_ce0;
reg input_1_12_0_V_ce0;
reg input_1_13_0_V_ce0;
reg input_1_14_0_V_ce0;
reg input_1_15_0_V_ce0;
reg input_2_0_V_ce0;
reg input_2_1_V_ce0;
reg input_2_2_V_ce0;
reg input_2_3_V_ce0;
reg input_2_4_V_ce0;
reg input_2_5_V_ce0;
reg input_2_6_V_ce0;
reg input_2_7_V_ce0;
reg input_2_8_V_ce0;
reg input_2_9_V_ce0;
reg input_2_10_V_ce0;
reg input_2_11_V_ce0;
reg input_2_12_V_ce0;
reg input_2_13_V_ce0;
reg input_2_14_V_ce0;
reg input_2_15_V_ce0;
reg[5:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg[39:0] output_0_V_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_609_p2;
reg   [3:0] i_reg_1324;
wire    ap_CS_fsm_state2;
wire  signed [7:0] sext_ln1116_fu_637_p1;
reg  signed [7:0] sext_ln1116_reg_1329;
wire   [0:0] icmp_ln236_fu_603_p2;
wire   [6:0] sub_ln203_fu_661_p2;
reg   [6:0] sub_ln203_reg_1334;
wire   [2:0] add_ln238_fu_673_p2;
reg   [2:0] add_ln238_reg_1342;
wire    ap_CS_fsm_state3;
wire   [8:0] zext_ln203_12_fu_679_p1;
reg   [8:0] zext_ln203_12_reg_1347;
wire   [0:0] icmp_ln238_fu_667_p2;
reg   [5:0] output_0_V_addr_reg_1352;
wire  signed [7:0] add_ln1116_fu_717_p2;
reg  signed [7:0] add_ln1116_reg_1360;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln240_fu_697_p2;
wire   [8:0] add_ln1117_fu_748_p2;
reg   [8:0] add_ln1117_reg_1365;
wire   [5:0] add_ln240_fu_753_p2;
reg   [5:0] add_ln240_reg_1370;
wire  signed [63:0] sext_ln1116_1_fu_759_p1;
reg  signed [63:0] sext_ln1116_1_reg_1375;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln1117_fu_764_p1;
reg   [63:0] zext_ln1117_reg_1403;
wire    ap_CS_fsm_state6;
reg   [39:0] input_1_0_0_V_load_reg_1451;
reg   [39:0] input_2_0_V_load_reg_1456;
reg   [39:0] input_1_1_0_V_load_reg_1461;
reg   [39:0] input_2_1_V_load_reg_1466;
wire    ap_CS_fsm_state7;
wire   [55:0] mul_ln1192_fu_775_p2;
reg   [55:0] mul_ln1192_reg_1491;
reg   [39:0] output_0_V_load_reg_1496;
wire   [55:0] mul_ln1192_1_fu_787_p2;
reg   [55:0] mul_ln1192_1_reg_1501;
reg   [39:0] input_1_2_0_V_load_reg_1506;
reg   [39:0] input_2_2_V_load_reg_1511;
reg   [39:0] input_1_3_0_V_load_reg_1516;
reg   [39:0] input_2_3_V_load_reg_1521;
wire    ap_CS_fsm_state8;
wire   [55:0] mul_ln1192_2_fu_834_p2;
reg   [55:0] mul_ln1192_2_reg_1546;
reg   [39:0] tmp_77_reg_1551;
wire   [55:0] mul_ln1192_3_fu_856_p2;
reg   [55:0] mul_ln1192_3_reg_1556;
reg   [39:0] input_1_4_0_V_load_reg_1561;
reg   [39:0] input_2_4_V_load_reg_1566;
reg   [39:0] input_1_5_0_V_load_reg_1571;
reg   [39:0] input_2_5_V_load_reg_1576;
wire    ap_CS_fsm_state9;
wire   [55:0] mul_ln1192_4_fu_903_p2;
reg   [55:0] mul_ln1192_4_reg_1601;
reg   [39:0] tmp_79_reg_1606;
wire   [55:0] mul_ln1192_5_fu_925_p2;
reg   [55:0] mul_ln1192_5_reg_1611;
reg   [39:0] input_1_6_0_V_load_reg_1616;
reg   [39:0] input_2_6_V_load_reg_1621;
reg   [39:0] input_1_7_0_V_load_reg_1626;
reg   [39:0] input_2_7_V_load_reg_1631;
wire    ap_CS_fsm_state10;
wire   [55:0] mul_ln1192_6_fu_972_p2;
reg   [55:0] mul_ln1192_6_reg_1656;
reg   [39:0] tmp_81_reg_1661;
wire   [55:0] mul_ln1192_7_fu_994_p2;
reg   [55:0] mul_ln1192_7_reg_1666;
reg   [39:0] input_1_8_0_V_load_reg_1671;
reg   [39:0] input_2_8_V_load_reg_1676;
reg   [39:0] input_1_9_0_V_load_reg_1681;
reg   [39:0] input_2_9_V_load_reg_1686;
wire    ap_CS_fsm_state11;
wire   [55:0] mul_ln1192_8_fu_1041_p2;
reg   [55:0] mul_ln1192_8_reg_1731;
reg   [39:0] tmp_83_reg_1736;
wire   [55:0] mul_ln1192_9_fu_1063_p2;
reg   [55:0] mul_ln1192_9_reg_1741;
reg   [39:0] input_1_10_0_V_loa_reg_1746;
reg   [39:0] input_2_10_V_load_reg_1751;
reg   [39:0] input_1_11_0_V_loa_reg_1756;
reg   [39:0] input_2_11_V_load_reg_1761;
wire   [55:0] mul_ln1192_10_fu_1110_p2;
reg   [55:0] mul_ln1192_10_reg_1766;
wire    ap_CS_fsm_state12;
reg   [39:0] tmp_85_reg_1771;
wire   [55:0] mul_ln1192_11_fu_1132_p2;
reg   [55:0] mul_ln1192_11_reg_1776;
reg   [39:0] input_1_12_0_V_loa_reg_1781;
reg   [39:0] input_2_12_V_load_reg_1786;
reg   [39:0] input_1_13_0_V_loa_reg_1791;
reg   [39:0] input_2_13_V_load_reg_1796;
reg   [39:0] input_1_14_0_V_loa_reg_1801;
reg   [39:0] input_2_14_V_load_reg_1806;
reg   [39:0] input_1_15_0_V_loa_reg_1811;
reg   [39:0] input_2_15_V_load_reg_1816;
wire   [55:0] mul_ln1192_12_fu_1179_p2;
reg   [55:0] mul_ln1192_12_reg_1821;
wire    ap_CS_fsm_state13;
reg   [39:0] tmp_87_reg_1826;
wire   [55:0] mul_ln1192_13_fu_1201_p2;
reg   [55:0] mul_ln1192_13_reg_1831;
wire   [55:0] mul_ln1192_14_fu_1213_p2;
reg   [55:0] mul_ln1192_14_reg_1836;
wire   [55:0] mul_ln1192_15_fu_1225_p2;
reg   [55:0] mul_ln1192_15_reg_1841;
reg   [39:0] tmp_90_reg_1846;
wire    ap_CS_fsm_state14;
reg   [39:0] trunc_ln708_s_reg_1851;
wire    ap_CS_fsm_state15;
reg   [3:0] i_0_reg_570;
reg   [2:0] k_0_0_reg_581;
reg   [5:0] l_0_0_0_reg_592;
wire    ap_CS_fsm_state16;
wire  signed [63:0] sext_ln203_fu_692_p1;
wire   [5:0] tmp_73_fu_619_p3;
wire   [6:0] zext_ln1116_4_fu_627_p1;
wire   [6:0] zext_ln1116_fu_615_p1;
wire   [6:0] sub_ln1116_fu_631_p2;
wire   [4:0] tmp_75_fu_649_p3;
wire   [6:0] tmp_74_fu_641_p3;
wire   [6:0] zext_ln203_fu_657_p1;
wire   [6:0] zext_ln203_13_fu_683_p1;
wire   [6:0] add_ln203_fu_687_p2;
wire   [1:0] tmp_89_fu_703_p4;
wire   [7:0] zext_ln1116_5_fu_713_p1;
wire   [5:0] trunc_ln1117_fu_722_p1;
wire   [8:0] p_shl3_cast_fu_726_p3;
wire   [8:0] p_shl4_cast_fu_734_p3;
wire   [8:0] sub_ln1117_fu_742_p2;
wire  signed [39:0] mul_ln1192_fu_775_p0;
wire  signed [39:0] mul_ln1192_fu_775_p1;
wire  signed [39:0] mul_ln1192_1_fu_787_p0;
wire  signed [39:0] mul_ln1192_1_fu_787_p1;
wire   [55:0] shl_ln_fu_793_p3;
wire   [55:0] add_ln1192_fu_800_p2;
wire   [39:0] tmp_76_fu_805_p4;
wire   [55:0] shl_ln728_5_fu_815_p3;
wire  signed [39:0] mul_ln1192_2_fu_834_p0;
wire  signed [39:0] mul_ln1192_2_fu_834_p1;
wire   [55:0] add_ln1192_2_fu_823_p2;
wire  signed [39:0] mul_ln1192_3_fu_856_p0;
wire  signed [39:0] mul_ln1192_3_fu_856_p1;
wire   [55:0] shl_ln728_6_fu_862_p3;
wire   [55:0] add_ln1192_3_fu_869_p2;
wire   [39:0] tmp_78_fu_874_p4;
wire   [55:0] shl_ln728_7_fu_884_p3;
wire  signed [39:0] mul_ln1192_4_fu_903_p0;
wire  signed [39:0] mul_ln1192_4_fu_903_p1;
wire   [55:0] add_ln1192_4_fu_892_p2;
wire  signed [39:0] mul_ln1192_5_fu_925_p0;
wire  signed [39:0] mul_ln1192_5_fu_925_p1;
wire   [55:0] shl_ln728_8_fu_931_p3;
wire   [55:0] add_ln1192_5_fu_938_p2;
wire   [39:0] tmp_80_fu_943_p4;
wire   [55:0] shl_ln728_9_fu_953_p3;
wire  signed [39:0] mul_ln1192_6_fu_972_p0;
wire  signed [39:0] mul_ln1192_6_fu_972_p1;
wire   [55:0] add_ln1192_6_fu_961_p2;
wire  signed [39:0] mul_ln1192_7_fu_994_p0;
wire  signed [39:0] mul_ln1192_7_fu_994_p1;
wire   [55:0] shl_ln728_s_fu_1000_p3;
wire   [55:0] add_ln1192_7_fu_1007_p2;
wire   [39:0] tmp_82_fu_1012_p4;
wire   [55:0] shl_ln728_1_fu_1022_p3;
wire  signed [39:0] mul_ln1192_8_fu_1041_p0;
wire  signed [39:0] mul_ln1192_8_fu_1041_p1;
wire   [55:0] add_ln1192_8_fu_1030_p2;
wire  signed [39:0] mul_ln1192_9_fu_1063_p0;
wire  signed [39:0] mul_ln1192_9_fu_1063_p1;
wire   [55:0] shl_ln728_2_fu_1069_p3;
wire   [55:0] add_ln1192_9_fu_1076_p2;
wire   [39:0] tmp_84_fu_1081_p4;
wire   [55:0] shl_ln728_3_fu_1091_p3;
wire  signed [39:0] mul_ln1192_10_fu_1110_p0;
wire  signed [39:0] mul_ln1192_10_fu_1110_p1;
wire   [55:0] add_ln1192_10_fu_1099_p2;
wire  signed [39:0] mul_ln1192_11_fu_1132_p0;
wire  signed [39:0] mul_ln1192_11_fu_1132_p1;
wire   [55:0] shl_ln728_4_fu_1138_p3;
wire   [55:0] add_ln1192_11_fu_1145_p2;
wire   [39:0] tmp_86_fu_1150_p4;
wire   [55:0] shl_ln728_10_fu_1160_p3;
wire  signed [39:0] mul_ln1192_12_fu_1179_p0;
wire  signed [39:0] mul_ln1192_12_fu_1179_p1;
wire   [55:0] add_ln1192_12_fu_1168_p2;
wire  signed [39:0] mul_ln1192_13_fu_1201_p0;
wire  signed [39:0] mul_ln1192_13_fu_1201_p1;
wire  signed [39:0] mul_ln1192_14_fu_1213_p0;
wire  signed [39:0] mul_ln1192_14_fu_1213_p1;
wire  signed [39:0] mul_ln1192_15_fu_1225_p0;
wire  signed [39:0] mul_ln1192_15_fu_1225_p1;
wire   [55:0] shl_ln728_11_fu_1231_p3;
wire   [55:0] add_ln1192_13_fu_1238_p2;
wire   [39:0] tmp_88_fu_1243_p4;
wire   [55:0] shl_ln728_12_fu_1253_p3;
wire   [55:0] add_ln1192_14_fu_1261_p2;
wire   [55:0] shl_ln728_13_fu_1276_p3;
wire   [55:0] add_ln1192_15_fu_1283_p2;
wire   [39:0] tmp_91_fu_1288_p4;
wire   [55:0] shl_ln728_14_fu_1298_p3;
wire   [55:0] add_ln1192_16_fu_1306_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_fu_667_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_570 <= i_reg_1324;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_570 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_0_reg_581 <= add_ln238_reg_1342;
    end else if (((icmp_ln236_fu_603_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_581 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        l_0_0_0_reg_592 <= add_ln240_reg_1370;
    end else if (((icmp_ln238_fu_667_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        l_0_0_0_reg_592 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln1116_reg_1360 <= add_ln1116_fu_717_p2;
        add_ln1117_reg_1365 <= add_ln1117_fu_748_p2;
        add_ln240_reg_1370 <= add_ln240_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln238_reg_1342 <= add_ln238_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1324 <= i_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_0_0_V_load_reg_1451 <= input_1_0_0_V_q0;
        input_1_1_0_V_load_reg_1461 <= input_1_1_0_V_q0;
        input_2_0_V_load_reg_1456 <= input_2_0_V_q0;
        input_2_1_V_load_reg_1466 <= input_2_1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_1_10_0_V_loa_reg_1746 <= input_1_10_0_V_q0;
        input_1_11_0_V_loa_reg_1756 <= input_1_11_0_V_q0;
        input_2_10_V_load_reg_1751 <= input_2_10_V_q0;
        input_2_11_V_load_reg_1761 <= input_2_11_V_q0;
        mul_ln1192_8_reg_1731 <= mul_ln1192_8_fu_1041_p2;
        mul_ln1192_9_reg_1741 <= mul_ln1192_9_fu_1063_p2;
        tmp_83_reg_1736 <= {{add_ln1192_8_fu_1030_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_1_12_0_V_loa_reg_1781 <= input_1_12_0_V_q0;
        input_1_13_0_V_loa_reg_1791 <= input_1_13_0_V_q0;
        input_1_14_0_V_loa_reg_1801 <= input_1_14_0_V_q0;
        input_1_15_0_V_loa_reg_1811 <= input_1_15_0_V_q0;
        input_2_12_V_load_reg_1786 <= input_2_12_V_q0;
        input_2_13_V_load_reg_1796 <= input_2_13_V_q0;
        input_2_14_V_load_reg_1806 <= input_2_14_V_q0;
        input_2_15_V_load_reg_1816 <= input_2_15_V_q0;
        mul_ln1192_10_reg_1766 <= mul_ln1192_10_fu_1110_p2;
        mul_ln1192_11_reg_1776 <= mul_ln1192_11_fu_1132_p2;
        tmp_85_reg_1771 <= {{add_ln1192_10_fu_1099_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_1_2_0_V_load_reg_1506 <= input_1_2_0_V_q0;
        input_1_3_0_V_load_reg_1516 <= input_1_3_0_V_q0;
        input_2_2_V_load_reg_1511 <= input_2_2_V_q0;
        input_2_3_V_load_reg_1521 <= input_2_3_V_q0;
        mul_ln1192_1_reg_1501 <= mul_ln1192_1_fu_787_p2;
        mul_ln1192_reg_1491 <= mul_ln1192_fu_775_p2;
        output_0_V_load_reg_1496 <= output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_1_4_0_V_load_reg_1561 <= input_1_4_0_V_q0;
        input_1_5_0_V_load_reg_1571 <= input_1_5_0_V_q0;
        input_2_4_V_load_reg_1566 <= input_2_4_V_q0;
        input_2_5_V_load_reg_1576 <= input_2_5_V_q0;
        mul_ln1192_2_reg_1546 <= mul_ln1192_2_fu_834_p2;
        mul_ln1192_3_reg_1556 <= mul_ln1192_3_fu_856_p2;
        tmp_77_reg_1551 <= {{add_ln1192_2_fu_823_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_1_6_0_V_load_reg_1616 <= input_1_6_0_V_q0;
        input_1_7_0_V_load_reg_1626 <= input_1_7_0_V_q0;
        input_2_6_V_load_reg_1621 <= input_2_6_V_q0;
        input_2_7_V_load_reg_1631 <= input_2_7_V_q0;
        mul_ln1192_4_reg_1601 <= mul_ln1192_4_fu_903_p2;
        mul_ln1192_5_reg_1611 <= mul_ln1192_5_fu_925_p2;
        tmp_79_reg_1606 <= {{add_ln1192_4_fu_892_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_1_8_0_V_load_reg_1671 <= input_1_8_0_V_q0;
        input_1_9_0_V_load_reg_1681 <= input_1_9_0_V_q0;
        input_2_8_V_load_reg_1676 <= input_2_8_V_q0;
        input_2_9_V_load_reg_1686 <= input_2_9_V_q0;
        mul_ln1192_6_reg_1656 <= mul_ln1192_6_fu_972_p2;
        mul_ln1192_7_reg_1666 <= mul_ln1192_7_fu_994_p2;
        tmp_81_reg_1661 <= {{add_ln1192_6_fu_961_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln1192_12_reg_1821 <= mul_ln1192_12_fu_1179_p2;
        mul_ln1192_13_reg_1831 <= mul_ln1192_13_fu_1201_p2;
        mul_ln1192_14_reg_1836 <= mul_ln1192_14_fu_1213_p2;
        mul_ln1192_15_reg_1841 <= mul_ln1192_15_fu_1225_p2;
        tmp_87_reg_1826 <= {{add_ln1192_12_fu_1168_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln238_fu_667_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_addr_reg_1352 <= sext_ln203_fu_692_p1;
        zext_ln203_12_reg_1347[2 : 0] <= zext_ln203_12_fu_679_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln1116_1_reg_1375 <= sext_ln1116_1_fu_759_p1;
        zext_ln1117_reg_1403[8 : 0] <= zext_ln1117_fu_764_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln236_fu_603_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln1116_reg_1329 <= sext_ln1116_fu_637_p1;
        sub_ln203_reg_1334[6 : 1] <= sub_ln203_fu_661_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_90_reg_1846 <= {{add_ln1192_14_fu_1261_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        trunc_ln708_s_reg_1851 <= {{add_ln1192_16_fu_1306_p2[55:16]}};
    end
end

always @ (*) begin
    if ((((icmp_ln236_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln236_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_0_0_V_ce0 = 1'b1;
    end else begin
        input_1_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_1_10_0_V_ce0 = 1'b1;
    end else begin
        input_1_10_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_1_11_0_V_ce0 = 1'b1;
    end else begin
        input_1_11_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_1_12_0_V_ce0 = 1'b1;
    end else begin
        input_1_12_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_1_13_0_V_ce0 = 1'b1;
    end else begin
        input_1_13_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_1_14_0_V_ce0 = 1'b1;
    end else begin
        input_1_14_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_1_15_0_V_ce0 = 1'b1;
    end else begin
        input_1_15_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_1_1_0_V_ce0 = 1'b1;
    end else begin
        input_1_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_2_0_V_ce0 = 1'b1;
    end else begin
        input_1_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_1_3_0_V_ce0 = 1'b1;
    end else begin
        input_1_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_1_4_0_V_ce0 = 1'b1;
    end else begin
        input_1_4_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_1_5_0_V_ce0 = 1'b1;
    end else begin
        input_1_5_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_1_6_0_V_ce0 = 1'b1;
    end else begin
        input_1_6_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_1_7_0_V_ce0 = 1'b1;
    end else begin
        input_1_7_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_1_8_0_V_ce0 = 1'b1;
    end else begin
        input_1_8_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_1_9_0_V_ce0 = 1'b1;
    end else begin
        input_1_9_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_0_V_ce0 = 1'b1;
    end else begin
        input_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_2_10_V_ce0 = 1'b1;
    end else begin
        input_2_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_2_11_V_ce0 = 1'b1;
    end else begin
        input_2_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_2_12_V_ce0 = 1'b1;
    end else begin
        input_2_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_2_13_V_ce0 = 1'b1;
    end else begin
        input_2_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_2_14_V_ce0 = 1'b1;
    end else begin
        input_2_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_2_15_V_ce0 = 1'b1;
    end else begin
        input_2_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_2_1_V_ce0 = 1'b1;
    end else begin
        input_2_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_2_2_V_ce0 = 1'b1;
    end else begin
        input_2_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_2_3_V_ce0 = 1'b1;
    end else begin
        input_2_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_2_4_V_ce0 = 1'b1;
    end else begin
        input_2_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_2_5_V_ce0 = 1'b1;
    end else begin
        input_2_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_2_6_V_ce0 = 1'b1;
    end else begin
        input_2_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_2_7_V_ce0 = 1'b1;
    end else begin
        input_2_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_2_8_V_ce0 = 1'b1;
    end else begin
        input_2_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_2_9_V_ce0 = 1'b1;
    end else begin
        input_2_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_V_address0 = output_0_V_addr_reg_1352;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_V_address0 = sext_ln203_fu_692_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_0_V_d0 = trunc_ln708_s_reg_1851;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_V_d0 = 40'd0;
    end else begin
        output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((icmp_ln238_fu_667_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln236_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln238_fu_667_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln240_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_717_p2 = ($signed(zext_ln1116_5_fu_713_p1) + $signed(sext_ln1116_reg_1329));

assign add_ln1117_fu_748_p2 = (zext_ln203_12_reg_1347 + sub_ln1117_fu_742_p2);

assign add_ln1192_10_fu_1099_p2 = (shl_ln728_3_fu_1091_p3 + mul_ln1192_9_reg_1741);

assign add_ln1192_11_fu_1145_p2 = (shl_ln728_4_fu_1138_p3 + mul_ln1192_10_reg_1766);

assign add_ln1192_12_fu_1168_p2 = (shl_ln728_10_fu_1160_p3 + mul_ln1192_11_reg_1776);

assign add_ln1192_13_fu_1238_p2 = (shl_ln728_11_fu_1231_p3 + mul_ln1192_12_reg_1821);

assign add_ln1192_14_fu_1261_p2 = (shl_ln728_12_fu_1253_p3 + mul_ln1192_13_reg_1831);

assign add_ln1192_15_fu_1283_p2 = (shl_ln728_13_fu_1276_p3 + mul_ln1192_14_reg_1836);

assign add_ln1192_16_fu_1306_p2 = (shl_ln728_14_fu_1298_p3 + mul_ln1192_15_reg_1841);

assign add_ln1192_2_fu_823_p2 = (shl_ln728_5_fu_815_p3 + mul_ln1192_1_reg_1501);

assign add_ln1192_3_fu_869_p2 = (shl_ln728_6_fu_862_p3 + mul_ln1192_2_reg_1546);

assign add_ln1192_4_fu_892_p2 = (shl_ln728_7_fu_884_p3 + mul_ln1192_3_reg_1556);

assign add_ln1192_5_fu_938_p2 = (shl_ln728_8_fu_931_p3 + mul_ln1192_4_reg_1601);

assign add_ln1192_6_fu_961_p2 = (shl_ln728_9_fu_953_p3 + mul_ln1192_5_reg_1611);

assign add_ln1192_7_fu_1007_p2 = (shl_ln728_s_fu_1000_p3 + mul_ln1192_6_reg_1656);

assign add_ln1192_8_fu_1030_p2 = (shl_ln728_1_fu_1022_p3 + mul_ln1192_7_reg_1666);

assign add_ln1192_9_fu_1076_p2 = (shl_ln728_2_fu_1069_p3 + mul_ln1192_8_reg_1731);

assign add_ln1192_fu_800_p2 = (shl_ln_fu_793_p3 + mul_ln1192_reg_1491);

assign add_ln203_fu_687_p2 = (sub_ln203_reg_1334 + zext_ln203_13_fu_683_p1);

assign add_ln238_fu_673_p2 = (k_0_0_reg_581 + 3'd1);

assign add_ln240_fu_753_p2 = (6'd16 + l_0_0_0_reg_592);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_609_p2 = (i_0_reg_570 + 4'd1);

assign icmp_ln236_fu_603_p2 = ((i_0_reg_570 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_667_p2 = ((k_0_0_reg_581 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_697_p2 = ((l_0_0_0_reg_592 == 6'd48) ? 1'b1 : 1'b0);

assign input_1_0_0_V_address0 = sext_ln1116_1_fu_759_p1;

assign input_1_10_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_11_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_12_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_13_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_14_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_15_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_1_0_V_address0 = sext_ln1116_1_fu_759_p1;

assign input_1_2_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_3_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_4_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_5_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_6_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_7_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_8_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_1_9_0_V_address0 = sext_ln1116_1_reg_1375;

assign input_2_0_V_address0 = zext_ln1117_fu_764_p1;

assign input_2_10_V_address0 = zext_ln1117_reg_1403;

assign input_2_11_V_address0 = zext_ln1117_reg_1403;

assign input_2_12_V_address0 = zext_ln1117_reg_1403;

assign input_2_13_V_address0 = zext_ln1117_reg_1403;

assign input_2_14_V_address0 = zext_ln1117_reg_1403;

assign input_2_15_V_address0 = zext_ln1117_reg_1403;

assign input_2_1_V_address0 = zext_ln1117_fu_764_p1;

assign input_2_2_V_address0 = zext_ln1117_reg_1403;

assign input_2_3_V_address0 = zext_ln1117_reg_1403;

assign input_2_4_V_address0 = zext_ln1117_reg_1403;

assign input_2_5_V_address0 = zext_ln1117_reg_1403;

assign input_2_6_V_address0 = zext_ln1117_reg_1403;

assign input_2_7_V_address0 = zext_ln1117_reg_1403;

assign input_2_8_V_address0 = zext_ln1117_reg_1403;

assign input_2_9_V_address0 = zext_ln1117_reg_1403;

assign mul_ln1192_10_fu_1110_p0 = input_1_10_0_V_loa_reg_1746;

assign mul_ln1192_10_fu_1110_p1 = input_2_10_V_load_reg_1751;

assign mul_ln1192_10_fu_1110_p2 = ($signed(mul_ln1192_10_fu_1110_p0) * $signed(mul_ln1192_10_fu_1110_p1));

assign mul_ln1192_11_fu_1132_p0 = input_1_11_0_V_loa_reg_1756;

assign mul_ln1192_11_fu_1132_p1 = input_2_11_V_load_reg_1761;

assign mul_ln1192_11_fu_1132_p2 = ($signed(mul_ln1192_11_fu_1132_p0) * $signed(mul_ln1192_11_fu_1132_p1));

assign mul_ln1192_12_fu_1179_p0 = input_1_12_0_V_loa_reg_1781;

assign mul_ln1192_12_fu_1179_p1 = input_2_12_V_load_reg_1786;

assign mul_ln1192_12_fu_1179_p2 = ($signed(mul_ln1192_12_fu_1179_p0) * $signed(mul_ln1192_12_fu_1179_p1));

assign mul_ln1192_13_fu_1201_p0 = input_1_13_0_V_loa_reg_1791;

assign mul_ln1192_13_fu_1201_p1 = input_2_13_V_load_reg_1796;

assign mul_ln1192_13_fu_1201_p2 = ($signed(mul_ln1192_13_fu_1201_p0) * $signed(mul_ln1192_13_fu_1201_p1));

assign mul_ln1192_14_fu_1213_p0 = input_1_14_0_V_loa_reg_1801;

assign mul_ln1192_14_fu_1213_p1 = input_2_14_V_load_reg_1806;

assign mul_ln1192_14_fu_1213_p2 = ($signed(mul_ln1192_14_fu_1213_p0) * $signed(mul_ln1192_14_fu_1213_p1));

assign mul_ln1192_15_fu_1225_p0 = input_1_15_0_V_loa_reg_1811;

assign mul_ln1192_15_fu_1225_p1 = input_2_15_V_load_reg_1816;

assign mul_ln1192_15_fu_1225_p2 = ($signed(mul_ln1192_15_fu_1225_p0) * $signed(mul_ln1192_15_fu_1225_p1));

assign mul_ln1192_1_fu_787_p0 = input_1_1_0_V_load_reg_1461;

assign mul_ln1192_1_fu_787_p1 = input_2_1_V_load_reg_1466;

assign mul_ln1192_1_fu_787_p2 = ($signed(mul_ln1192_1_fu_787_p0) * $signed(mul_ln1192_1_fu_787_p1));

assign mul_ln1192_2_fu_834_p0 = input_1_2_0_V_load_reg_1506;

assign mul_ln1192_2_fu_834_p1 = input_2_2_V_load_reg_1511;

assign mul_ln1192_2_fu_834_p2 = ($signed(mul_ln1192_2_fu_834_p0) * $signed(mul_ln1192_2_fu_834_p1));

assign mul_ln1192_3_fu_856_p0 = input_1_3_0_V_load_reg_1516;

assign mul_ln1192_3_fu_856_p1 = input_2_3_V_load_reg_1521;

assign mul_ln1192_3_fu_856_p2 = ($signed(mul_ln1192_3_fu_856_p0) * $signed(mul_ln1192_3_fu_856_p1));

assign mul_ln1192_4_fu_903_p0 = input_1_4_0_V_load_reg_1561;

assign mul_ln1192_4_fu_903_p1 = input_2_4_V_load_reg_1566;

assign mul_ln1192_4_fu_903_p2 = ($signed(mul_ln1192_4_fu_903_p0) * $signed(mul_ln1192_4_fu_903_p1));

assign mul_ln1192_5_fu_925_p0 = input_1_5_0_V_load_reg_1571;

assign mul_ln1192_5_fu_925_p1 = input_2_5_V_load_reg_1576;

assign mul_ln1192_5_fu_925_p2 = ($signed(mul_ln1192_5_fu_925_p0) * $signed(mul_ln1192_5_fu_925_p1));

assign mul_ln1192_6_fu_972_p0 = input_1_6_0_V_load_reg_1616;

assign mul_ln1192_6_fu_972_p1 = input_2_6_V_load_reg_1621;

assign mul_ln1192_6_fu_972_p2 = ($signed(mul_ln1192_6_fu_972_p0) * $signed(mul_ln1192_6_fu_972_p1));

assign mul_ln1192_7_fu_994_p0 = input_1_7_0_V_load_reg_1626;

assign mul_ln1192_7_fu_994_p1 = input_2_7_V_load_reg_1631;

assign mul_ln1192_7_fu_994_p2 = ($signed(mul_ln1192_7_fu_994_p0) * $signed(mul_ln1192_7_fu_994_p1));

assign mul_ln1192_8_fu_1041_p0 = input_1_8_0_V_load_reg_1671;

assign mul_ln1192_8_fu_1041_p1 = input_2_8_V_load_reg_1676;

assign mul_ln1192_8_fu_1041_p2 = ($signed(mul_ln1192_8_fu_1041_p0) * $signed(mul_ln1192_8_fu_1041_p1));

assign mul_ln1192_9_fu_1063_p0 = input_1_9_0_V_load_reg_1681;

assign mul_ln1192_9_fu_1063_p1 = input_2_9_V_load_reg_1686;

assign mul_ln1192_9_fu_1063_p2 = ($signed(mul_ln1192_9_fu_1063_p0) * $signed(mul_ln1192_9_fu_1063_p1));

assign mul_ln1192_fu_775_p0 = input_1_0_0_V_load_reg_1451;

assign mul_ln1192_fu_775_p1 = input_2_0_V_load_reg_1456;

assign mul_ln1192_fu_775_p2 = ($signed(mul_ln1192_fu_775_p0) * $signed(mul_ln1192_fu_775_p1));

assign p_shl3_cast_fu_726_p3 = {{trunc_ln1117_fu_722_p1}, {3'd0}};

assign p_shl4_cast_fu_734_p3 = {{add_ln1116_fu_717_p2}, {1'd0}};

assign sext_ln1116_1_fu_759_p1 = add_ln1116_reg_1360;

assign sext_ln1116_fu_637_p1 = $signed(sub_ln1116_fu_631_p2);

assign sext_ln203_fu_692_p1 = $signed(add_ln203_fu_687_p2);

assign shl_ln728_10_fu_1160_p3 = {{tmp_86_fu_1150_p4}, {16'd0}};

assign shl_ln728_11_fu_1231_p3 = {{tmp_87_reg_1826}, {16'd0}};

assign shl_ln728_12_fu_1253_p3 = {{tmp_88_fu_1243_p4}, {16'd0}};

assign shl_ln728_13_fu_1276_p3 = {{tmp_90_reg_1846}, {16'd0}};

assign shl_ln728_14_fu_1298_p3 = {{tmp_91_fu_1288_p4}, {16'd0}};

assign shl_ln728_1_fu_1022_p3 = {{tmp_82_fu_1012_p4}, {16'd0}};

assign shl_ln728_2_fu_1069_p3 = {{tmp_83_reg_1736}, {16'd0}};

assign shl_ln728_3_fu_1091_p3 = {{tmp_84_fu_1081_p4}, {16'd0}};

assign shl_ln728_4_fu_1138_p3 = {{tmp_85_reg_1771}, {16'd0}};

assign shl_ln728_5_fu_815_p3 = {{tmp_76_fu_805_p4}, {16'd0}};

assign shl_ln728_6_fu_862_p3 = {{tmp_77_reg_1551}, {16'd0}};

assign shl_ln728_7_fu_884_p3 = {{tmp_78_fu_874_p4}, {16'd0}};

assign shl_ln728_8_fu_931_p3 = {{tmp_79_reg_1606}, {16'd0}};

assign shl_ln728_9_fu_953_p3 = {{tmp_80_fu_943_p4}, {16'd0}};

assign shl_ln728_s_fu_1000_p3 = {{tmp_81_reg_1661}, {16'd0}};

assign shl_ln_fu_793_p3 = {{output_0_V_load_reg_1496}, {16'd0}};

assign sub_ln1116_fu_631_p2 = (zext_ln1116_4_fu_627_p1 - zext_ln1116_fu_615_p1);

assign sub_ln1117_fu_742_p2 = (p_shl3_cast_fu_726_p3 - p_shl4_cast_fu_734_p3);

assign sub_ln203_fu_661_p2 = (tmp_74_fu_641_p3 - zext_ln203_fu_657_p1);

assign tmp_73_fu_619_p3 = {{i_0_reg_570}, {2'd0}};

assign tmp_74_fu_641_p3 = {{i_0_reg_570}, {3'd0}};

assign tmp_75_fu_649_p3 = {{i_0_reg_570}, {1'd0}};

assign tmp_76_fu_805_p4 = {{add_ln1192_fu_800_p2[55:16]}};

assign tmp_78_fu_874_p4 = {{add_ln1192_3_fu_869_p2[55:16]}};

assign tmp_80_fu_943_p4 = {{add_ln1192_5_fu_938_p2[55:16]}};

assign tmp_82_fu_1012_p4 = {{add_ln1192_7_fu_1007_p2[55:16]}};

assign tmp_84_fu_1081_p4 = {{add_ln1192_9_fu_1076_p2[55:16]}};

assign tmp_86_fu_1150_p4 = {{add_ln1192_11_fu_1145_p2[55:16]}};

assign tmp_88_fu_1243_p4 = {{add_ln1192_13_fu_1238_p2[55:16]}};

assign tmp_89_fu_703_p4 = {{l_0_0_0_reg_592[5:4]}};

assign tmp_91_fu_1288_p4 = {{add_ln1192_15_fu_1283_p2[55:16]}};

assign trunc_ln1117_fu_722_p1 = add_ln1116_fu_717_p2[5:0];

assign zext_ln1116_4_fu_627_p1 = tmp_73_fu_619_p3;

assign zext_ln1116_5_fu_713_p1 = tmp_89_fu_703_p4;

assign zext_ln1116_fu_615_p1 = i_0_reg_570;

assign zext_ln1117_fu_764_p1 = add_ln1117_reg_1365;

assign zext_ln203_12_fu_679_p1 = k_0_0_reg_581;

assign zext_ln203_13_fu_683_p1 = k_0_0_reg_581;

assign zext_ln203_fu_657_p1 = tmp_75_fu_649_p3;

always @ (posedge ap_clk) begin
    sub_ln203_reg_1334[0] <= 1'b0;
    zext_ln203_12_reg_1347[8:3] <= 6'b000000;
    zext_ln1117_reg_1403[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //GEMM_3D_float_1
