// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [39:0] p_read;
input  [39:0] p_read1;
input  [39:0] p_read2;
input  [39:0] p_read3;
input  [39:0] p_read4;
input  [39:0] p_read5;
input  [39:0] p_read6;
input  [39:0] p_read7;
input  [39:0] p_read8;
input  [39:0] p_read9;
input  [39:0] p_read10;
input  [39:0] p_read11;
input  [39:0] p_read12;
input  [39:0] p_read13;
input  [39:0] p_read14;
input  [39:0] p_read15;
input  [39:0] p_read16;
input  [39:0] p_read17;
input  [39:0] p_read18;
input  [39:0] p_read19;
input  [39:0] p_read20;
input  [39:0] p_read21;
input  [39:0] p_read22;
input  [39:0] p_read23;
input  [39:0] p_read24;
input  [39:0] p_read25;
input  [39:0] p_read26;
input  [39:0] p_read27;
input  [39:0] p_read28;
input  [39:0] p_read29;
input  [39:0] p_read30;
input  [39:0] p_read31;
output  [39:0] ap_return_0;
output  [39:0] ap_return_1;
output  [39:0] ap_return_2;
output  [39:0] ap_return_3;
output  [39:0] ap_return_4;
output  [39:0] ap_return_5;
output  [39:0] ap_return_6;
output  [39:0] ap_return_7;
output  [39:0] ap_return_8;
output  [39:0] ap_return_9;
output  [39:0] ap_return_10;
output  [39:0] ap_return_11;
output  [39:0] ap_return_12;
output  [39:0] ap_return_13;
output  [39:0] ap_return_14;
output  [39:0] ap_return_15;
output  [39:0] ap_return_16;
output  [39:0] ap_return_17;
output  [39:0] ap_return_18;
output  [39:0] ap_return_19;
output  [39:0] ap_return_20;
output  [39:0] ap_return_21;
output  [39:0] ap_return_22;
output  [39:0] ap_return_23;
output  [39:0] ap_return_24;
output  [39:0] ap_return_25;
output  [39:0] ap_return_26;
output  [39:0] ap_return_27;
output  [39:0] ap_return_28;
output  [39:0] ap_return_29;
output  [39:0] ap_return_30;
output  [39:0] ap_return_31;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_tab_V_2_address0;
reg    cos_tab_V_2_ce0;
wire   [17:0] cos_tab_V_2_q0;
wire   [6:0] sin_tab_V_2_address0;
reg    sin_tab_V_2_ce0;
wire   [15:0] sin_tab_V_2_q0;
wire   [2:0] i_fu_748_p2;
reg   [2:0] i_reg_2851;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln1265_fu_754_p1;
reg   [1:0] trunc_ln1265_reg_2856;
wire   [0:0] icmp_ln203_fu_742_p2;
wire   [0:0] icmp_ln203_1_fu_758_p2;
reg   [0:0] icmp_ln203_1_reg_2868;
wire   [0:0] icmp_ln203_2_fu_764_p2;
reg   [0:0] icmp_ln203_2_reg_2884;
wire   [0:0] icmp_ln203_3_fu_770_p2;
reg   [0:0] icmp_ln203_3_reg_2910;
wire   [0:0] or_ln1265_1_fu_776_p2;
reg   [0:0] or_ln1265_1_reg_2941;
wire   [1:0] add_ln205_fu_788_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] i_2_fu_1788_p2;
reg   [2:0] i_2_reg_3149;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln1116_fu_1794_p1;
reg   [1:0] trunc_ln1116_reg_3154;
wire   [0:0] icmp_ln215_fu_1782_p2;
wire   [2:0] add_ln217_fu_2092_p2;
reg   [2:0] add_ln217_reg_3162;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln217_fu_2086_p2;
wire   [1:0] trunc_ln1116_1_fu_2104_p1;
reg   [1:0] trunc_ln1116_1_reg_3172;
wire   [4:0] zext_ln1116_fu_2115_p1;
reg   [4:0] zext_ln1116_reg_3176;
wire   [39:0] tmp_23_fu_2119_p18;
reg   [39:0] tmp_23_reg_3183;
reg   [17:0] cos_tab_V_2_load_reg_3193;
wire    ap_CS_fsm_state6;
reg   [15:0] sin_tab_V_2_load_reg_3198;
wire   [39:0] tmp_24_fu_2141_p18;
reg   [39:0] tmp_24_reg_3203;
wire  signed [55:0] sext_ln1118_2_fu_2181_p1;
reg  signed [55:0] sext_ln1118_2_reg_3208;
wire    ap_CS_fsm_state7;
wire   [55:0] mul_ln1118_fu_2184_p2;
reg   [55:0] mul_ln1118_reg_3213;
wire   [55:0] zext_ln1118_fu_2193_p1;
reg   [55:0] zext_ln1118_reg_3218;
wire   [55:0] mul_ln1118_1_fu_2196_p2;
reg   [55:0] mul_ln1118_1_reg_3223;
wire   [39:0] tmp_25_fu_2296_p18;
reg   [39:0] tmp_25_reg_3228;
wire    ap_CS_fsm_state8;
wire   [39:0] tmp_26_fu_2317_p18;
reg   [39:0] tmp_26_reg_3233;
wire   [55:0] mul_ln1118_2_fu_2357_p2;
reg   [55:0] mul_ln1118_2_reg_3238;
wire    ap_CS_fsm_state9;
wire   [55:0] mul_ln1118_3_fu_2365_p2;
reg   [55:0] mul_ln1118_3_reg_3243;
reg   [2:0] i_0_reg_602;
wire   [0:0] icmp_ln205_fu_782_p2;
reg   [1:0] k_0_0_reg_613;
reg   [2:0] i14_0_reg_624;
reg   [2:0] k16_0_0_reg_635;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln218_fu_2098_p1;
reg   [39:0] rotated_q_V_0_0_0_032_fu_128;
wire   [39:0] select_ln1265_11_fu_994_p3;
reg   [39:0] rotated_q_V_0_1_0_033_fu_132;
wire   [39:0] select_ln1265_10_fu_986_p3;
reg   [39:0] rotated_q_V_0_2_0_034_fu_136;
wire   [39:0] select_ln1265_9_fu_978_p3;
reg   [39:0] rotated_q_V_0_3_0_035_fu_140;
wire   [39:0] select_ln1265_8_fu_970_p3;
reg   [39:0] rotated_q_V_1_0_0_036_fu_144;
wire   [39:0] select_ln1265_7_fu_962_p3;
reg   [39:0] rotated_q_V_1_1_0_037_fu_148;
wire   [39:0] select_ln1265_6_fu_954_p3;
reg   [39:0] rotated_q_V_1_2_0_038_fu_152;
wire   [39:0] select_ln1265_4_fu_939_p3;
reg   [39:0] rotated_q_V_1_3_0_039_fu_156;
wire   [39:0] select_ln1265_1_fu_916_p3;
reg   [39:0] rotated_q_V_2_0_0_040_fu_160;
wire   [39:0] select_ln1265_32_fu_1398_p3;
reg   [39:0] rotated_q_V_2_1_0_041_fu_164;
wire   [39:0] select_ln1265_31_fu_1390_p3;
reg   [39:0] rotated_q_V_2_2_0_042_fu_168;
wire   [39:0] select_ln1265_30_fu_1382_p3;
reg   [39:0] rotated_q_V_2_3_0_043_fu_172;
wire   [39:0] select_ln1265_29_fu_1374_p3;
reg   [39:0] rotated_q_V_3_0_0_044_fu_176;
wire   [39:0] select_ln1265_28_fu_1366_p3;
reg   [39:0] rotated_q_V_3_1_0_045_fu_180;
wire   [39:0] select_ln1265_27_fu_1358_p3;
reg   [39:0] rotated_q_V_3_2_0_046_fu_184;
wire   [39:0] select_ln1265_26_fu_1350_p3;
reg   [39:0] rotated_q_V_3_3_0_047_fu_188;
wire   [39:0] select_ln1265_25_fu_1342_p3;
reg   [39:0] rotated_k_V_0_0_0_048_fu_192;
wire   [39:0] select_ln1265_23_fu_1182_p3;
reg   [39:0] rotated_k_V_0_1_0_049_fu_196;
wire   [39:0] select_ln1265_22_fu_1174_p3;
reg   [39:0] rotated_k_V_0_2_0_050_fu_200;
wire   [39:0] select_ln1265_21_fu_1166_p3;
reg   [39:0] rotated_k_V_0_3_0_051_fu_204;
wire   [39:0] select_ln1265_20_fu_1158_p3;
reg   [39:0] rotated_k_V_1_0_0_052_fu_208;
wire   [39:0] select_ln1265_19_fu_1150_p3;
reg   [39:0] rotated_k_V_1_1_0_053_fu_212;
wire   [39:0] select_ln1265_18_fu_1142_p3;
reg   [39:0] rotated_k_V_1_2_0_054_fu_216;
wire   [39:0] select_ln1265_16_fu_1127_p3;
reg   [39:0] rotated_k_V_1_3_0_055_fu_220;
wire   [39:0] select_ln1265_13_fu_1104_p3;
reg   [39:0] rotated_k_V_2_0_0_056_fu_224;
wire   [39:0] select_ln1265_41_fu_1614_p3;
reg   [39:0] rotated_k_V_2_1_0_057_fu_228;
wire   [39:0] select_ln1265_40_fu_1606_p3;
reg   [39:0] rotated_k_V_2_2_0_058_fu_232;
wire   [39:0] select_ln1265_39_fu_1598_p3;
reg   [39:0] rotated_k_V_2_3_0_059_fu_236;
wire   [39:0] select_ln1265_38_fu_1590_p3;
reg   [39:0] rotated_k_V_3_0_0_060_fu_240;
wire   [39:0] select_ln1265_37_fu_1582_p3;
reg   [39:0] rotated_k_V_3_1_0_061_fu_244;
wire   [39:0] select_ln1265_36_fu_1574_p3;
reg   [39:0] rotated_k_V_3_2_0_062_fu_248;
wire   [39:0] select_ln1265_35_fu_1566_p3;
reg   [39:0] rotated_k_V_3_3_0_063_fu_252;
wire   [39:0] select_ln1265_34_fu_1558_p3;
reg   [39:0] output_k_V1251_01_fu_256;
reg   [39:0] output_k_V1250_02_fu_260;
reg   [39:0] output_q_V_03_fu_264;
reg   [39:0] output_k_V1249_04_fu_268;
reg   [39:0] output_k_V12_05_fu_272;
reg   [39:0] output_q_V28_06_fu_276;
reg   [39:0] output_k_V1148_07_fu_280;
reg   [39:0] output_k_V1147_08_fu_284;
reg   [39:0] output_q_V29_09_fu_288;
reg   [39:0] output_k_V1146_010_fu_292;
reg   [39:0] output_k_V11_011_fu_296;
reg   [39:0] output_q_V30_012_fu_300;
reg   [39:0] output_k_V1045_013_fu_304;
reg   [39:0] output_k_V1044_014_fu_308;
reg   [39:0] output_q_V7_015_fu_312;
reg   [39:0] output_k_V1043_016_fu_316;
reg   [39:0] output_k_V10_017_fu_320;
reg   [39:0] output_q_V731_018_fu_324;
reg   [39:0] output_k_V42_019_fu_328;
reg   [39:0] output_k_V41_020_fu_332;
reg   [39:0] output_q_V732_021_fu_336;
reg   [39:0] output_k_V40_022_fu_340;
reg   [39:0] output_k_V_023_fu_344;
reg   [39:0] output_q_V733_024_fu_348;
reg   [39:0] output_q_V939_025_fu_352;
reg   [39:0] output_q_V938_026_fu_356;
reg   [39:0] output_q_V8_027_fu_360;
reg   [39:0] output_q_V93742_028_fu_364;
reg   [39:0] output_q_V9_029_fu_368;
reg   [39:0] output_q_V834_030_fu_372;
reg   [39:0] output_q_V836_031_fu_376;
reg   [39:0] output_q_V835_032_fu_380;
wire   [0:0] trunc_ln1265_2_fu_794_p1;
wire   [39:0] tmp_16_fu_813_p6;
wire   [39:0] tmp_15_fu_804_p6;
wire   [39:0] select_ln1265_fu_822_p3;
wire   [39:0] sub_ln703_fu_830_p2;
wire   [39:0] select_ln203_fu_836_p3;
wire   [39:0] select_ln203_1_fu_843_p3;
wire   [39:0] select_ln203_3_fu_857_p3;
wire   [39:0] select_ln203_4_fu_864_p3;
wire   [39:0] select_ln203_6_fu_878_p3;
wire   [0:0] xor_ln1265_fu_798_p2;
wire   [0:0] or_ln1265_fu_906_p2;
wire   [0:0] or_ln1265_2_fu_911_p2;
wire   [39:0] select_ln1265_2_fu_924_p3;
wire   [39:0] select_ln1265_3_fu_931_p3;
wire   [39:0] select_ln1265_5_fu_947_p3;
wire   [39:0] select_ln203_9_fu_899_p3;
wire   [39:0] select_ln203_2_fu_850_p3;
wire   [39:0] select_ln203_5_fu_871_p3;
wire   [39:0] select_ln203_7_fu_885_p3;
wire   [39:0] select_ln203_8_fu_892_p3;
wire   [39:0] tmp_18_fu_1011_p6;
wire   [39:0] tmp_17_fu_1002_p6;
wire   [39:0] select_ln1265_12_fu_1020_p3;
wire   [39:0] sub_ln703_49_fu_1028_p2;
wire   [39:0] select_ln203_10_fu_1034_p3;
wire   [39:0] select_ln203_11_fu_1041_p3;
wire   [39:0] select_ln203_13_fu_1055_p3;
wire   [39:0] select_ln203_14_fu_1062_p3;
wire   [39:0] select_ln203_16_fu_1076_p3;
wire   [39:0] select_ln1265_14_fu_1112_p3;
wire   [39:0] select_ln1265_15_fu_1119_p3;
wire   [39:0] select_ln1265_17_fu_1135_p3;
wire   [39:0] select_ln203_19_fu_1097_p3;
wire   [39:0] select_ln203_12_fu_1048_p3;
wire   [39:0] select_ln203_15_fu_1069_p3;
wire   [39:0] select_ln203_17_fu_1083_p3;
wire   [39:0] select_ln203_18_fu_1090_p3;
wire   [39:0] tmp_20_fu_1199_p6;
wire   [39:0] tmp_19_fu_1190_p6;
wire   [39:0] select_ln1265_24_fu_1208_p3;
wire   [39:0] select_ln203_20_fu_1216_p3;
wire   [39:0] select_ln203_21_fu_1223_p3;
wire   [39:0] select_ln203_23_fu_1237_p3;
wire   [39:0] select_ln203_24_fu_1244_p3;
wire   [39:0] select_ln203_26_fu_1258_p3;
wire   [39:0] select_ln203_29_fu_1279_p3;
wire   [39:0] select_ln203_30_fu_1286_p3;
wire   [39:0] select_ln203_32_fu_1300_p3;
wire   [39:0] select_ln203_33_fu_1307_p3;
wire   [39:0] select_ln203_35_fu_1321_p3;
wire   [39:0] select_ln203_31_fu_1293_p3;
wire   [39:0] select_ln203_34_fu_1314_p3;
wire   [39:0] select_ln203_36_fu_1328_p3;
wire   [39:0] select_ln203_37_fu_1335_p3;
wire   [39:0] select_ln203_22_fu_1230_p3;
wire   [39:0] select_ln203_25_fu_1251_p3;
wire   [39:0] select_ln203_27_fu_1265_p3;
wire   [39:0] select_ln203_28_fu_1272_p3;
wire   [39:0] tmp_22_fu_1415_p6;
wire   [39:0] tmp_21_fu_1406_p6;
wire   [39:0] select_ln1265_33_fu_1424_p3;
wire   [39:0] select_ln203_38_fu_1432_p3;
wire   [39:0] select_ln203_39_fu_1439_p3;
wire   [39:0] select_ln203_41_fu_1453_p3;
wire   [39:0] select_ln203_42_fu_1460_p3;
wire   [39:0] select_ln203_44_fu_1474_p3;
wire   [39:0] select_ln203_47_fu_1495_p3;
wire   [39:0] select_ln203_48_fu_1502_p3;
wire   [39:0] select_ln203_50_fu_1516_p3;
wire   [39:0] select_ln203_51_fu_1523_p3;
wire   [39:0] select_ln203_53_fu_1537_p3;
wire   [39:0] select_ln203_49_fu_1509_p3;
wire   [39:0] select_ln203_52_fu_1530_p3;
wire   [39:0] select_ln203_54_fu_1544_p3;
wire   [39:0] select_ln203_55_fu_1551_p3;
wire   [39:0] select_ln203_40_fu_1446_p3;
wire   [39:0] select_ln203_43_fu_1467_p3;
wire   [39:0] select_ln203_45_fu_1481_p3;
wire   [39:0] select_ln203_46_fu_1488_p3;
wire   [3:0] tmp_2_fu_2108_p3;
wire   [4:0] tmp_23_fu_2119_p17;
wire  signed [17:0] mul_ln1118_fu_2184_p0;
wire  signed [39:0] mul_ln1118_fu_2184_p1;
wire   [15:0] mul_ln1118_1_fu_2196_p0;
wire  signed [39:0] mul_ln1118_1_fu_2196_p1;
wire   [55:0] add_ln1192_fu_2202_p2;
wire  signed [39:0] mul_ln1118_2_fu_2357_p0;
wire  signed [17:0] mul_ln1118_2_fu_2357_p1;
wire  signed [39:0] mul_ln1118_3_fu_2365_p0;
wire   [15:0] mul_ln1118_3_fu_2365_p1;
wire   [55:0] add_ln1192_1_fu_2370_p2;
reg   [9:0] ap_NS_fsm;
wire   [55:0] mul_ln1118_1_fu_2196_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

apply_rotary_pos_fYi #(
    .DataWidth( 18 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
cos_tab_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_tab_V_2_address0),
    .ce0(cos_tab_V_2_ce0),
    .q0(cos_tab_V_2_q0)
);

apply_rotary_pos_g8j #(
    .DataWidth( 16 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
sin_tab_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_tab_V_2_address0),
    .ce0(sin_tab_V_2_ce0),
    .q0(sin_tab_V_2_q0)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U87(
    .din0(p_read8),
    .din1(p_read9),
    .din2(p_read10),
    .din3(p_read11),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_15_fu_804_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U88(
    .din0(p_read12),
    .din1(p_read13),
    .din2(p_read14),
    .din3(p_read15),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_16_fu_813_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U89(
    .din0(p_read24),
    .din1(p_read25),
    .din2(p_read26),
    .din3(p_read27),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_17_fu_1002_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U90(
    .din0(p_read28),
    .din1(p_read29),
    .din2(p_read30),
    .din3(p_read31),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_18_fu_1011_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U91(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_19_fu_1190_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U92(
    .din0(p_read4),
    .din1(p_read5),
    .din2(p_read6),
    .din3(p_read7),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_20_fu_1199_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U93(
    .din0(p_read16),
    .din1(p_read17),
    .din2(p_read18),
    .din3(p_read19),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_21_fu_1406_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U94(
    .din0(p_read20),
    .din1(p_read21),
    .din2(p_read22),
    .din3(p_read23),
    .din4(trunc_ln1265_reg_2856),
    .dout(tmp_22_fu_1415_p6)
);

dut_mux_165_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 40 ),
    .din5_WIDTH( 40 ),
    .din6_WIDTH( 40 ),
    .din7_WIDTH( 40 ),
    .din8_WIDTH( 40 ),
    .din9_WIDTH( 40 ),
    .din10_WIDTH( 40 ),
    .din11_WIDTH( 40 ),
    .din12_WIDTH( 40 ),
    .din13_WIDTH( 40 ),
    .din14_WIDTH( 40 ),
    .din15_WIDTH( 40 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 40 ))
dut_mux_165_40_1_1_U95(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(p_read4),
    .din5(p_read5),
    .din6(p_read6),
    .din7(p_read7),
    .din8(p_read8),
    .din9(p_read9),
    .din10(p_read10),
    .din11(p_read11),
    .din12(p_read12),
    .din13(p_read13),
    .din14(p_read14),
    .din15(p_read15),
    .din16(tmp_23_fu_2119_p17),
    .dout(tmp_23_fu_2119_p18)
);

dut_mux_165_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 40 ),
    .din5_WIDTH( 40 ),
    .din6_WIDTH( 40 ),
    .din7_WIDTH( 40 ),
    .din8_WIDTH( 40 ),
    .din9_WIDTH( 40 ),
    .din10_WIDTH( 40 ),
    .din11_WIDTH( 40 ),
    .din12_WIDTH( 40 ),
    .din13_WIDTH( 40 ),
    .din14_WIDTH( 40 ),
    .din15_WIDTH( 40 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 40 ))
dut_mux_165_40_1_1_U96(
    .din0(rotated_q_V_0_0_0_032_fu_128),
    .din1(rotated_q_V_0_1_0_033_fu_132),
    .din2(rotated_q_V_0_2_0_034_fu_136),
    .din3(rotated_q_V_0_3_0_035_fu_140),
    .din4(rotated_q_V_1_0_0_036_fu_144),
    .din5(rotated_q_V_1_1_0_037_fu_148),
    .din6(rotated_q_V_1_2_0_038_fu_152),
    .din7(rotated_q_V_1_3_0_039_fu_156),
    .din8(rotated_q_V_2_0_0_040_fu_160),
    .din9(rotated_q_V_2_1_0_041_fu_164),
    .din10(rotated_q_V_2_2_0_042_fu_168),
    .din11(rotated_q_V_2_3_0_043_fu_172),
    .din12(rotated_q_V_3_0_0_044_fu_176),
    .din13(rotated_q_V_3_1_0_045_fu_180),
    .din14(rotated_q_V_3_2_0_046_fu_184),
    .din15(rotated_q_V_3_3_0_047_fu_188),
    .din16(zext_ln1116_reg_3176),
    .dout(tmp_24_fu_2141_p18)
);

dut_mux_165_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 40 ),
    .din5_WIDTH( 40 ),
    .din6_WIDTH( 40 ),
    .din7_WIDTH( 40 ),
    .din8_WIDTH( 40 ),
    .din9_WIDTH( 40 ),
    .din10_WIDTH( 40 ),
    .din11_WIDTH( 40 ),
    .din12_WIDTH( 40 ),
    .din13_WIDTH( 40 ),
    .din14_WIDTH( 40 ),
    .din15_WIDTH( 40 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 40 ))
dut_mux_165_40_1_1_U97(
    .din0(p_read16),
    .din1(p_read17),
    .din2(p_read18),
    .din3(p_read19),
    .din4(p_read20),
    .din5(p_read21),
    .din6(p_read22),
    .din7(p_read23),
    .din8(p_read24),
    .din9(p_read25),
    .din10(p_read26),
    .din11(p_read27),
    .din12(p_read28),
    .din13(p_read29),
    .din14(p_read30),
    .din15(p_read31),
    .din16(zext_ln1116_reg_3176),
    .dout(tmp_25_fu_2296_p18)
);

dut_mux_165_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 40 ),
    .din5_WIDTH( 40 ),
    .din6_WIDTH( 40 ),
    .din7_WIDTH( 40 ),
    .din8_WIDTH( 40 ),
    .din9_WIDTH( 40 ),
    .din10_WIDTH( 40 ),
    .din11_WIDTH( 40 ),
    .din12_WIDTH( 40 ),
    .din13_WIDTH( 40 ),
    .din14_WIDTH( 40 ),
    .din15_WIDTH( 40 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 40 ))
dut_mux_165_40_1_1_U98(
    .din0(rotated_k_V_0_0_0_048_fu_192),
    .din1(rotated_k_V_0_1_0_049_fu_196),
    .din2(rotated_k_V_0_2_0_050_fu_200),
    .din3(rotated_k_V_0_3_0_051_fu_204),
    .din4(rotated_k_V_1_0_0_052_fu_208),
    .din5(rotated_k_V_1_1_0_053_fu_212),
    .din6(rotated_k_V_1_2_0_054_fu_216),
    .din7(rotated_k_V_1_3_0_055_fu_220),
    .din8(rotated_k_V_2_0_0_056_fu_224),
    .din9(rotated_k_V_2_1_0_057_fu_228),
    .din10(rotated_k_V_2_2_0_058_fu_232),
    .din11(rotated_k_V_2_3_0_059_fu_236),
    .din12(rotated_k_V_3_0_0_060_fu_240),
    .din13(rotated_k_V_3_1_0_061_fu_244),
    .din14(rotated_k_V_3_2_0_062_fu_248),
    .din15(rotated_k_V_3_3_0_063_fu_252),
    .din16(zext_ln1116_reg_3176),
    .dout(tmp_26_fu_2317_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln203_fu_742_p2 == 1'd1))) begin
        i14_0_reg_624 <= 3'd0;
    end else if (((icmp_ln217_fu_2086_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i14_0_reg_624 <= i_2_reg_3149;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln205_fu_782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_602 <= i_reg_2851;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_602 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k16_0_0_reg_635 <= add_ln217_reg_3162;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln215_fu_1782_p2 == 1'd0))) begin
        k16_0_0_reg_635 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln205_fu_782_p2 == 1'd0))) begin
        k_0_0_reg_613 <= add_ln205_fu_788_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln203_fu_742_p2 == 1'd0))) begin
        k_0_0_reg_613 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln217_reg_3162 <= add_ln217_fu_2092_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cos_tab_V_2_load_reg_3193 <= cos_tab_V_2_q0;
        sin_tab_V_2_load_reg_3198 <= sin_tab_V_2_q0;
        tmp_24_reg_3203 <= tmp_24_fu_2141_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_reg_3149 <= i_2_fu_1788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_2851 <= i_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln203_fu_742_p2 == 1'd0))) begin
        icmp_ln203_1_reg_2868 <= icmp_ln203_1_fu_758_p2;
        icmp_ln203_2_reg_2884 <= icmp_ln203_2_fu_764_p2;
        icmp_ln203_3_reg_2910 <= icmp_ln203_3_fu_770_p2;
        or_ln1265_1_reg_2941 <= or_ln1265_1_fu_776_p2;
        trunc_ln1265_reg_2856 <= trunc_ln1265_fu_754_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1118_1_reg_3223 <= mul_ln1118_1_fu_2196_p2;
        mul_ln1118_reg_3213 <= mul_ln1118_fu_2184_p2;
        sext_ln1118_2_reg_3208 <= sext_ln1118_2_fu_2181_p1;
        zext_ln1118_reg_3218[15 : 0] <= zext_ln1118_fu_2193_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln1118_2_reg_3238 <= mul_ln1118_2_fu_2357_p2;
        mul_ln1118_3_reg_3243 <= mul_ln1118_3_fu_2365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1043_016_fu_316 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1044_014_fu_308 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1045_013_fu_304 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V10_017_fu_320 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1146_010_fu_292 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1147_08_fu_284 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1148_07_fu_280 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V11_011_fu_296 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1249_04_fu_268 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1250_02_fu_260 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V1251_01_fu_256 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V12_05_fu_272 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V40_022_fu_340 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V41_020_fu_332 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V42_019_fu_328 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_k_V_023_fu_344 <= {{add_ln1192_1_fu_2370_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V28_06_fu_276 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V29_09_fu_288 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V30_012_fu_300 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V731_018_fu_324 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V732_021_fu_336 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V733_024_fu_348 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd1) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V7_015_fu_312 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V834_030_fu_372 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V835_032_fu_380 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V836_031_fu_376 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd2) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V8_027_fu_360 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V93742_028_fu_364 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd2) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V938_026_fu_356 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd3) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V939_025_fu_352 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd3) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V9_029_fu_368 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln1116_1_reg_3172 == 2'd0) & (trunc_ln1116_reg_3154 == 2'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        output_q_V_03_fu_264 <= {{add_ln1192_fu_2202_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln205_fu_782_p2 == 1'd0))) begin
        rotated_k_V_0_0_0_048_fu_192 <= select_ln1265_23_fu_1182_p3;
        rotated_k_V_0_1_0_049_fu_196 <= select_ln1265_22_fu_1174_p3;
        rotated_k_V_0_2_0_050_fu_200 <= select_ln1265_21_fu_1166_p3;
        rotated_k_V_0_3_0_051_fu_204 <= select_ln1265_20_fu_1158_p3;
        rotated_k_V_1_0_0_052_fu_208 <= select_ln1265_19_fu_1150_p3;
        rotated_k_V_1_1_0_053_fu_212 <= select_ln1265_18_fu_1142_p3;
        rotated_k_V_1_2_0_054_fu_216 <= select_ln1265_16_fu_1127_p3;
        rotated_k_V_1_3_0_055_fu_220 <= select_ln1265_13_fu_1104_p3;
        rotated_k_V_2_0_0_056_fu_224 <= select_ln1265_41_fu_1614_p3;
        rotated_k_V_2_1_0_057_fu_228 <= select_ln1265_40_fu_1606_p3;
        rotated_k_V_2_2_0_058_fu_232 <= select_ln1265_39_fu_1598_p3;
        rotated_k_V_2_3_0_059_fu_236 <= select_ln1265_38_fu_1590_p3;
        rotated_k_V_3_0_0_060_fu_240 <= select_ln1265_37_fu_1582_p3;
        rotated_k_V_3_1_0_061_fu_244 <= select_ln1265_36_fu_1574_p3;
        rotated_k_V_3_2_0_062_fu_248 <= select_ln1265_35_fu_1566_p3;
        rotated_k_V_3_3_0_063_fu_252 <= select_ln1265_34_fu_1558_p3;
        rotated_q_V_0_0_0_032_fu_128 <= select_ln1265_11_fu_994_p3;
        rotated_q_V_0_1_0_033_fu_132 <= select_ln1265_10_fu_986_p3;
        rotated_q_V_0_2_0_034_fu_136 <= select_ln1265_9_fu_978_p3;
        rotated_q_V_0_3_0_035_fu_140 <= select_ln1265_8_fu_970_p3;
        rotated_q_V_1_0_0_036_fu_144 <= select_ln1265_7_fu_962_p3;
        rotated_q_V_1_1_0_037_fu_148 <= select_ln1265_6_fu_954_p3;
        rotated_q_V_1_2_0_038_fu_152 <= select_ln1265_4_fu_939_p3;
        rotated_q_V_1_3_0_039_fu_156 <= select_ln1265_1_fu_916_p3;
        rotated_q_V_2_0_0_040_fu_160 <= select_ln1265_32_fu_1398_p3;
        rotated_q_V_2_1_0_041_fu_164 <= select_ln1265_31_fu_1390_p3;
        rotated_q_V_2_2_0_042_fu_168 <= select_ln1265_30_fu_1382_p3;
        rotated_q_V_2_3_0_043_fu_172 <= select_ln1265_29_fu_1374_p3;
        rotated_q_V_3_0_0_044_fu_176 <= select_ln1265_28_fu_1366_p3;
        rotated_q_V_3_1_0_045_fu_180 <= select_ln1265_27_fu_1358_p3;
        rotated_q_V_3_2_0_046_fu_184 <= select_ln1265_26_fu_1350_p3;
        rotated_q_V_3_3_0_047_fu_188 <= select_ln1265_25_fu_1342_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln217_fu_2086_p2 == 1'd0))) begin
        tmp_23_reg_3183 <= tmp_23_fu_2119_p18;
        trunc_ln1116_1_reg_3172 <= trunc_ln1116_1_fu_2104_p1;
        zext_ln1116_reg_3176[3 : 0] <= zext_ln1116_fu_2115_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_25_reg_3228 <= tmp_25_fu_2296_p18;
        tmp_26_reg_3233 <= tmp_26_fu_2317_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln215_fu_1782_p2 == 1'd0))) begin
        trunc_ln1116_reg_3154 <= trunc_ln1116_fu_1794_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln215_fu_1782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln215_fu_1782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cos_tab_V_2_ce0 = 1'b1;
    end else begin
        cos_tab_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sin_tab_V_2_ce0 = 1'b1;
    end else begin
        sin_tab_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln203_fu_742_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln205_fu_782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln215_fu_1782_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln217_fu_2086_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_1_fu_2370_p2 = (mul_ln1118_3_reg_3243 + mul_ln1118_2_reg_3238);

assign add_ln1192_fu_2202_p2 = (mul_ln1118_reg_3213 + mul_ln1118_1_reg_3223);

assign add_ln205_fu_788_p2 = (k_0_0_reg_613 + 2'd1);

assign add_ln217_fu_2092_p2 = (k16_0_0_reg_635 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = output_q_V_03_fu_264;

assign ap_return_1 = output_q_V28_06_fu_276;

assign ap_return_10 = output_q_V835_032_fu_380;

assign ap_return_11 = output_q_V836_031_fu_376;

assign ap_return_12 = output_q_V9_029_fu_368;

assign ap_return_13 = output_q_V93742_028_fu_364;

assign ap_return_14 = output_q_V938_026_fu_356;

assign ap_return_15 = output_q_V939_025_fu_352;

assign ap_return_16 = output_k_V_023_fu_344;

assign ap_return_17 = output_k_V40_022_fu_340;

assign ap_return_18 = output_k_V41_020_fu_332;

assign ap_return_19 = output_k_V42_019_fu_328;

assign ap_return_2 = output_q_V29_09_fu_288;

assign ap_return_20 = output_k_V10_017_fu_320;

assign ap_return_21 = output_k_V1043_016_fu_316;

assign ap_return_22 = output_k_V1044_014_fu_308;

assign ap_return_23 = output_k_V1045_013_fu_304;

assign ap_return_24 = output_k_V11_011_fu_296;

assign ap_return_25 = output_k_V1146_010_fu_292;

assign ap_return_26 = output_k_V1147_08_fu_284;

assign ap_return_27 = output_k_V1148_07_fu_280;

assign ap_return_28 = output_k_V12_05_fu_272;

assign ap_return_29 = output_k_V1249_04_fu_268;

assign ap_return_3 = output_q_V30_012_fu_300;

assign ap_return_30 = output_k_V1250_02_fu_260;

assign ap_return_31 = output_k_V1251_01_fu_256;

assign ap_return_4 = output_q_V7_015_fu_312;

assign ap_return_5 = output_q_V731_018_fu_324;

assign ap_return_6 = output_q_V732_021_fu_336;

assign ap_return_7 = output_q_V733_024_fu_348;

assign ap_return_8 = output_q_V8_027_fu_360;

assign ap_return_9 = output_q_V834_030_fu_372;

assign cos_tab_V_2_address0 = zext_ln218_fu_2098_p1;

assign i_2_fu_1788_p2 = (i14_0_reg_624 + 3'd1);

assign i_fu_748_p2 = (i_0_reg_602 + 3'd1);

assign icmp_ln203_1_fu_758_p2 = ((trunc_ln1265_fu_754_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln203_2_fu_764_p2 = ((trunc_ln1265_fu_754_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln203_3_fu_770_p2 = ((trunc_ln1265_fu_754_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_742_p2 = ((i_0_reg_602 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln205_fu_782_p2 = ((k_0_0_reg_613 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_1782_p2 = ((i14_0_reg_624 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_2086_p2 = ((k16_0_0_reg_635 == 3'd4) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_2196_p0 = mul_ln1118_1_fu_2196_p00;

assign mul_ln1118_1_fu_2196_p00 = sin_tab_V_2_load_reg_3198;

assign mul_ln1118_1_fu_2196_p1 = tmp_24_reg_3203;

assign mul_ln1118_1_fu_2196_p2 = ($signed({{1'b0}, {mul_ln1118_1_fu_2196_p0}}) * $signed(mul_ln1118_1_fu_2196_p1));

assign mul_ln1118_2_fu_2357_p0 = tmp_25_reg_3228;

assign mul_ln1118_2_fu_2357_p1 = sext_ln1118_2_reg_3208;

assign mul_ln1118_2_fu_2357_p2 = ($signed(mul_ln1118_2_fu_2357_p0) * $signed(mul_ln1118_2_fu_2357_p1));

assign mul_ln1118_3_fu_2365_p0 = tmp_26_reg_3233;

assign mul_ln1118_3_fu_2365_p1 = zext_ln1118_reg_3218;

assign mul_ln1118_3_fu_2365_p2 = ($signed(mul_ln1118_3_fu_2365_p0) * $signed({{1'b0}, {mul_ln1118_3_fu_2365_p1}}));

assign mul_ln1118_fu_2184_p0 = cos_tab_V_2_load_reg_3193;

assign mul_ln1118_fu_2184_p1 = tmp_23_reg_3183;

assign mul_ln1118_fu_2184_p2 = ($signed(mul_ln1118_fu_2184_p0) * $signed(mul_ln1118_fu_2184_p1));

assign or_ln1265_1_fu_776_p2 = (icmp_ln203_2_fu_764_p2 | icmp_ln203_1_fu_758_p2);

assign or_ln1265_2_fu_911_p2 = (or_ln1265_fu_906_p2 | or_ln1265_1_reg_2941);

assign or_ln1265_fu_906_p2 = (xor_ln1265_fu_798_p2 | icmp_ln203_3_reg_2910);

assign select_ln1265_10_fu_986_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_0_1_0_033_fu_132 : select_ln203_7_fu_885_p3);

assign select_ln1265_11_fu_994_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_0_0_0_032_fu_128 : select_ln203_8_fu_892_p3);

assign select_ln1265_12_fu_1020_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? tmp_18_fu_1011_p6 : tmp_17_fu_1002_p6);

assign select_ln1265_13_fu_1104_p3 = ((or_ln1265_2_fu_911_p2[0:0] === 1'b1) ? rotated_k_V_1_3_0_055_fu_220 : sub_ln703_49_fu_1028_p2);

assign select_ln1265_14_fu_1112_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_1_2_0_054_fu_216 : sub_ln703_49_fu_1028_p2);

assign select_ln1265_15_fu_1119_p3 = ((or_ln1265_fu_906_p2[0:0] === 1'b1) ? rotated_k_V_1_2_0_054_fu_216 : select_ln1265_14_fu_1112_p3);

assign select_ln1265_16_fu_1127_p3 = ((or_ln1265_2_fu_911_p2[0:0] === 1'b1) ? select_ln1265_15_fu_1119_p3 : rotated_k_V_1_2_0_054_fu_216);

assign select_ln1265_17_fu_1135_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? sub_ln703_49_fu_1028_p2 : rotated_k_V_1_1_0_053_fu_212);

assign select_ln1265_18_fu_1142_p3 = ((or_ln1265_fu_906_p2[0:0] === 1'b1) ? rotated_k_V_1_1_0_053_fu_212 : select_ln1265_17_fu_1135_p3);

assign select_ln1265_19_fu_1150_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_19_fu_1097_p3 : rotated_k_V_1_0_0_052_fu_208);

assign select_ln1265_1_fu_916_p3 = ((or_ln1265_2_fu_911_p2[0:0] === 1'b1) ? rotated_q_V_1_3_0_039_fu_156 : sub_ln703_fu_830_p2);

assign select_ln1265_20_fu_1158_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_0_3_0_051_fu_204 : select_ln203_12_fu_1048_p3);

assign select_ln1265_21_fu_1166_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_0_2_0_050_fu_200 : select_ln203_15_fu_1069_p3);

assign select_ln1265_22_fu_1174_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_0_1_0_049_fu_196 : select_ln203_17_fu_1083_p3);

assign select_ln1265_23_fu_1182_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_0_0_0_048_fu_192 : select_ln203_18_fu_1090_p3);

assign select_ln1265_24_fu_1208_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? tmp_20_fu_1199_p6 : tmp_19_fu_1190_p6);

assign select_ln1265_25_fu_1342_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_31_fu_1293_p3 : rotated_q_V_3_3_0_047_fu_188);

assign select_ln1265_26_fu_1350_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_34_fu_1314_p3 : rotated_q_V_3_2_0_046_fu_184);

assign select_ln1265_27_fu_1358_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_36_fu_1328_p3 : rotated_q_V_3_1_0_045_fu_180);

assign select_ln1265_28_fu_1366_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_37_fu_1335_p3 : rotated_q_V_3_0_0_044_fu_176);

assign select_ln1265_29_fu_1374_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_2_3_0_043_fu_172 : select_ln203_22_fu_1230_p3);

assign select_ln1265_2_fu_924_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_1_2_0_038_fu_152 : sub_ln703_fu_830_p2);

assign select_ln1265_30_fu_1382_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_2_2_0_042_fu_168 : select_ln203_25_fu_1251_p3);

assign select_ln1265_31_fu_1390_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_2_1_0_041_fu_164 : select_ln203_27_fu_1265_p3);

assign select_ln1265_32_fu_1398_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_2_0_0_040_fu_160 : select_ln203_28_fu_1272_p3);

assign select_ln1265_33_fu_1424_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? tmp_22_fu_1415_p6 : tmp_21_fu_1406_p6);

assign select_ln1265_34_fu_1558_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_49_fu_1509_p3 : rotated_k_V_3_3_0_063_fu_252);

assign select_ln1265_35_fu_1566_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_52_fu_1530_p3 : rotated_k_V_3_2_0_062_fu_248);

assign select_ln1265_36_fu_1574_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_54_fu_1544_p3 : rotated_k_V_3_1_0_061_fu_244);

assign select_ln1265_37_fu_1582_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_55_fu_1551_p3 : rotated_k_V_3_0_0_060_fu_240);

assign select_ln1265_38_fu_1590_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_2_3_0_059_fu_236 : select_ln203_40_fu_1446_p3);

assign select_ln1265_39_fu_1598_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_2_2_0_058_fu_232 : select_ln203_43_fu_1467_p3);

assign select_ln1265_3_fu_931_p3 = ((or_ln1265_fu_906_p2[0:0] === 1'b1) ? rotated_q_V_1_2_0_038_fu_152 : select_ln1265_2_fu_924_p3);

assign select_ln1265_40_fu_1606_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_2_1_0_057_fu_228 : select_ln203_45_fu_1481_p3);

assign select_ln1265_41_fu_1614_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_k_V_2_0_0_056_fu_224 : select_ln203_46_fu_1488_p3);

assign select_ln1265_4_fu_939_p3 = ((or_ln1265_2_fu_911_p2[0:0] === 1'b1) ? select_ln1265_3_fu_931_p3 : rotated_q_V_1_2_0_038_fu_152);

assign select_ln1265_5_fu_947_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? sub_ln703_fu_830_p2 : rotated_q_V_1_1_0_037_fu_148);

assign select_ln1265_6_fu_954_p3 = ((or_ln1265_fu_906_p2[0:0] === 1'b1) ? rotated_q_V_1_1_0_037_fu_148 : select_ln1265_5_fu_947_p3);

assign select_ln1265_7_fu_962_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? select_ln203_9_fu_899_p3 : rotated_q_V_1_0_0_036_fu_144);

assign select_ln1265_8_fu_970_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_0_3_0_035_fu_140 : select_ln203_2_fu_850_p3);

assign select_ln1265_9_fu_978_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? rotated_q_V_0_2_0_034_fu_136 : select_ln203_5_fu_871_p3);

assign select_ln1265_fu_822_p3 = ((trunc_ln1265_2_fu_794_p1[0:0] === 1'b1) ? tmp_16_fu_813_p6 : tmp_15_fu_804_p6);

assign select_ln203_10_fu_1034_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? rotated_k_V_0_3_0_051_fu_204 : sub_ln703_49_fu_1028_p2);

assign select_ln203_11_fu_1041_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_0_3_0_051_fu_204 : select_ln203_10_fu_1034_p3);

assign select_ln203_12_fu_1048_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_0_3_0_051_fu_204 : select_ln203_11_fu_1041_p3);

assign select_ln203_13_fu_1055_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? sub_ln703_49_fu_1028_p2 : rotated_k_V_0_2_0_050_fu_200);

assign select_ln203_14_fu_1062_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_0_2_0_050_fu_200 : select_ln203_13_fu_1055_p3);

assign select_ln203_15_fu_1069_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_0_2_0_050_fu_200 : select_ln203_14_fu_1062_p3);

assign select_ln203_16_fu_1076_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? sub_ln703_49_fu_1028_p2 : rotated_k_V_0_1_0_049_fu_196);

assign select_ln203_17_fu_1083_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_0_1_0_049_fu_196 : select_ln203_16_fu_1076_p3);

assign select_ln203_18_fu_1090_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? sub_ln703_49_fu_1028_p2 : rotated_k_V_0_0_0_048_fu_192);

assign select_ln203_19_fu_1097_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? sub_ln703_49_fu_1028_p2 : rotated_k_V_1_0_0_052_fu_208);

assign select_ln203_1_fu_843_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_0_3_0_035_fu_140 : select_ln203_fu_836_p3);

assign select_ln203_20_fu_1216_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? rotated_q_V_2_3_0_043_fu_172 : select_ln1265_24_fu_1208_p3);

assign select_ln203_21_fu_1223_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_2_3_0_043_fu_172 : select_ln203_20_fu_1216_p3);

assign select_ln203_22_fu_1230_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_2_3_0_043_fu_172 : select_ln203_21_fu_1223_p3);

assign select_ln203_23_fu_1237_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? select_ln1265_24_fu_1208_p3 : rotated_q_V_2_2_0_042_fu_168);

assign select_ln203_24_fu_1244_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_2_2_0_042_fu_168 : select_ln203_23_fu_1237_p3);

assign select_ln203_25_fu_1251_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_2_2_0_042_fu_168 : select_ln203_24_fu_1244_p3);

assign select_ln203_26_fu_1258_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? select_ln1265_24_fu_1208_p3 : rotated_q_V_2_1_0_041_fu_164);

assign select_ln203_27_fu_1265_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_2_1_0_041_fu_164 : select_ln203_26_fu_1258_p3);

assign select_ln203_28_fu_1272_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? select_ln1265_24_fu_1208_p3 : rotated_q_V_2_0_0_040_fu_160);

assign select_ln203_29_fu_1279_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? rotated_q_V_3_3_0_047_fu_188 : select_ln1265_24_fu_1208_p3);

assign select_ln203_2_fu_850_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_0_3_0_035_fu_140 : select_ln203_1_fu_843_p3);

assign select_ln203_30_fu_1286_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_3_3_0_047_fu_188 : select_ln203_29_fu_1279_p3);

assign select_ln203_31_fu_1293_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_3_3_0_047_fu_188 : select_ln203_30_fu_1286_p3);

assign select_ln203_32_fu_1300_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? select_ln1265_24_fu_1208_p3 : rotated_q_V_3_2_0_046_fu_184);

assign select_ln203_33_fu_1307_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_3_2_0_046_fu_184 : select_ln203_32_fu_1300_p3);

assign select_ln203_34_fu_1314_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_3_2_0_046_fu_184 : select_ln203_33_fu_1307_p3);

assign select_ln203_35_fu_1321_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? select_ln1265_24_fu_1208_p3 : rotated_q_V_3_1_0_045_fu_180);

assign select_ln203_36_fu_1328_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_3_1_0_045_fu_180 : select_ln203_35_fu_1321_p3);

assign select_ln203_37_fu_1335_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? select_ln1265_24_fu_1208_p3 : rotated_q_V_3_0_0_044_fu_176);

assign select_ln203_38_fu_1432_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? rotated_k_V_2_3_0_059_fu_236 : select_ln1265_33_fu_1424_p3);

assign select_ln203_39_fu_1439_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_2_3_0_059_fu_236 : select_ln203_38_fu_1432_p3);

assign select_ln203_3_fu_857_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? sub_ln703_fu_830_p2 : rotated_q_V_0_2_0_034_fu_136);

assign select_ln203_40_fu_1446_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_2_3_0_059_fu_236 : select_ln203_39_fu_1439_p3);

assign select_ln203_41_fu_1453_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? select_ln1265_33_fu_1424_p3 : rotated_k_V_2_2_0_058_fu_232);

assign select_ln203_42_fu_1460_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_2_2_0_058_fu_232 : select_ln203_41_fu_1453_p3);

assign select_ln203_43_fu_1467_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_2_2_0_058_fu_232 : select_ln203_42_fu_1460_p3);

assign select_ln203_44_fu_1474_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? select_ln1265_33_fu_1424_p3 : rotated_k_V_2_1_0_057_fu_228);

assign select_ln203_45_fu_1481_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_2_1_0_057_fu_228 : select_ln203_44_fu_1474_p3);

assign select_ln203_46_fu_1488_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? select_ln1265_33_fu_1424_p3 : rotated_k_V_2_0_0_056_fu_224);

assign select_ln203_47_fu_1495_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? rotated_k_V_3_3_0_063_fu_252 : select_ln1265_33_fu_1424_p3);

assign select_ln203_48_fu_1502_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_3_3_0_063_fu_252 : select_ln203_47_fu_1495_p3);

assign select_ln203_49_fu_1509_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_3_3_0_063_fu_252 : select_ln203_48_fu_1502_p3);

assign select_ln203_4_fu_864_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_q_V_0_2_0_034_fu_136 : select_ln203_3_fu_857_p3);

assign select_ln203_50_fu_1516_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? select_ln1265_33_fu_1424_p3 : rotated_k_V_3_2_0_062_fu_248);

assign select_ln203_51_fu_1523_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? rotated_k_V_3_2_0_062_fu_248 : select_ln203_50_fu_1516_p3);

assign select_ln203_52_fu_1530_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_3_2_0_062_fu_248 : select_ln203_51_fu_1523_p3);

assign select_ln203_53_fu_1537_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? select_ln1265_33_fu_1424_p3 : rotated_k_V_3_1_0_061_fu_244);

assign select_ln203_54_fu_1544_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_k_V_3_1_0_061_fu_244 : select_ln203_53_fu_1537_p3);

assign select_ln203_55_fu_1551_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? select_ln1265_33_fu_1424_p3 : rotated_k_V_3_0_0_060_fu_240);

assign select_ln203_5_fu_871_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_0_2_0_034_fu_136 : select_ln203_4_fu_864_p3);

assign select_ln203_6_fu_878_p3 = ((icmp_ln203_2_reg_2884[0:0] === 1'b1) ? sub_ln703_fu_830_p2 : rotated_q_V_0_1_0_033_fu_132);

assign select_ln203_7_fu_885_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? rotated_q_V_0_1_0_033_fu_132 : select_ln203_6_fu_878_p3);

assign select_ln203_8_fu_892_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? sub_ln703_fu_830_p2 : rotated_q_V_0_0_0_032_fu_128);

assign select_ln203_9_fu_899_p3 = ((icmp_ln203_3_reg_2910[0:0] === 1'b1) ? sub_ln703_fu_830_p2 : rotated_q_V_1_0_0_036_fu_144);

assign select_ln203_fu_836_p3 = ((icmp_ln203_1_reg_2868[0:0] === 1'b1) ? rotated_q_V_0_3_0_035_fu_140 : sub_ln703_fu_830_p2);

assign sext_ln1118_2_fu_2181_p1 = $signed(cos_tab_V_2_load_reg_3193);

assign sin_tab_V_2_address0 = zext_ln218_fu_2098_p1;

assign sub_ln703_49_fu_1028_p2 = (40'd0 - select_ln1265_12_fu_1020_p3);

assign sub_ln703_fu_830_p2 = (40'd0 - select_ln1265_fu_822_p3);

assign tmp_23_fu_2119_p17 = tmp_2_fu_2108_p3;

assign tmp_2_fu_2108_p3 = {{trunc_ln1116_1_fu_2104_p1}, {trunc_ln1116_reg_3154}};

assign trunc_ln1116_1_fu_2104_p1 = k16_0_0_reg_635[1:0];

assign trunc_ln1116_fu_1794_p1 = i14_0_reg_624[1:0];

assign trunc_ln1265_2_fu_794_p1 = k_0_0_reg_613[0:0];

assign trunc_ln1265_fu_754_p1 = i_0_reg_602[1:0];

assign xor_ln1265_fu_798_p2 = (trunc_ln1265_2_fu_794_p1 ^ 1'd1);

assign zext_ln1116_fu_2115_p1 = tmp_2_fu_2108_p3;

assign zext_ln1118_fu_2193_p1 = sin_tab_V_2_load_reg_3198;

assign zext_ln218_fu_2098_p1 = k16_0_0_reg_635;

always @ (posedge ap_clk) begin
    zext_ln1116_reg_3176[4] <= 1'b0;
    zext_ln1118_reg_3218[55:16] <= 40'b0000000000000000000000000000000000000000;
end

endmodule //apply_rotary_pos_emb
