// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_q_0_V_address0,
        input_q_0_V_ce0,
        input_q_0_V_q0,
        input_q_0_V_address1,
        input_q_0_V_ce1,
        input_q_0_V_q1,
        input_k_0_V_address0,
        input_k_0_V_ce0,
        input_k_0_V_q0,
        input_k_0_V_address1,
        input_k_0_V_ce1,
        input_k_0_V_q1,
        output_q_0_V_address0,
        output_q_0_V_ce0,
        output_q_0_V_we0,
        output_q_0_V_d0,
        output_k_0_V_address0,
        output_k_0_V_ce0,
        output_k_0_V_we0,
        output_k_0_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_q_0_V_address0;
output   input_q_0_V_ce0;
input  [39:0] input_q_0_V_q0;
output  [4:0] input_q_0_V_address1;
output   input_q_0_V_ce1;
input  [39:0] input_q_0_V_q1;
output  [4:0] input_k_0_V_address0;
output   input_k_0_V_ce0;
input  [39:0] input_k_0_V_q0;
output  [4:0] input_k_0_V_address1;
output   input_k_0_V_ce1;
input  [39:0] input_k_0_V_q1;
output  [4:0] output_q_0_V_address0;
output   output_q_0_V_ce0;
output   output_q_0_V_we0;
output  [39:0] output_q_0_V_d0;
output  [4:0] output_k_0_V_address0;
output   output_k_0_V_ce0;
output   output_k_0_V_we0;
output  [39:0] output_k_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_q_0_V_address0;
reg input_q_0_V_ce0;
reg input_q_0_V_ce1;
reg[4:0] input_k_0_V_address0;
reg input_k_0_V_ce0;
reg input_k_0_V_ce1;
reg output_q_0_V_ce0;
reg output_q_0_V_we0;
reg output_k_0_V_ce0;
reg output_k_0_V_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cos_tab_V_5_address0;
reg    cos_tab_V_5_ce0;
wire   [16:0] cos_tab_V_5_q0;
wire   [6:0] sin_tab_V_5_address0;
reg    sin_tab_V_5_ce0;
wire   [16:0] sin_tab_V_5_q0;
wire   [1:0] i_fu_312_p2;
reg   [1:0] i_reg_558;
wire    ap_CS_fsm_state2;
wire   [5:0] sub_ln1265_fu_338_p2;
reg   [5:0] sub_ln1265_reg_563;
wire   [0:0] icmp_ln168_fu_306_p2;
wire   [2:0] add_ln170_fu_354_p2;
reg   [2:0] add_ln170_reg_572;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln203_fu_369_p1;
reg  signed [63:0] sext_ln203_reg_577;
wire   [0:0] icmp_ln170_fu_348_p2;
wire  signed [63:0] sext_ln1265_fu_390_p1;
reg  signed [63:0] sext_ln1265_reg_593;
wire   [1:0] i_2_fu_416_p2;
reg   [1:0] i_2_reg_612;
wire    ap_CS_fsm_state5;
wire   [5:0] sub_ln1116_fu_442_p2;
reg   [5:0] sub_ln1116_reg_617;
wire   [0:0] icmp_ln180_fu_410_p2;
wire   [3:0] add_ln182_fu_454_p2;
reg   [3:0] add_ln182_reg_625;
wire    ap_CS_fsm_state6;
wire  signed [63:0] sext_ln1116_fu_475_p1;
reg  signed [63:0] sext_ln1116_reg_630;
wire   [0:0] icmp_ln182_fu_448_p2;
reg   [16:0] cos_tab_V_5_load_reg_666;
wire    ap_CS_fsm_state7;
reg   [39:0] input_q_0_V_load_2_reg_671;
reg   [16:0] sin_tab_V_5_load_reg_676;
wire   [39:0] rotated_q_0_V_q0;
reg   [39:0] rotated_q_0_V_load_reg_681;
reg   [39:0] input_k_0_V_load_2_reg_686;
wire   [39:0] rotated_k_0_V_q0;
reg   [39:0] rotated_k_0_V_load_reg_691;
wire   [55:0] mul_ln1118_fu_489_p2;
reg   [55:0] mul_ln1118_reg_696;
wire    ap_CS_fsm_state8;
wire   [55:0] mul_ln1118_4_fu_501_p2;
reg   [55:0] mul_ln1118_4_reg_701;
wire   [55:0] mul_ln1118_5_fu_510_p2;
reg   [55:0] mul_ln1118_5_reg_706;
wire   [55:0] mul_ln1118_6_fu_519_p2;
reg   [55:0] mul_ln1118_6_reg_711;
reg   [4:0] rotated_q_0_V_address0;
reg    rotated_q_0_V_ce0;
reg    rotated_q_0_V_we0;
wire   [39:0] rotated_q_0_V_d0;
wire   [4:0] rotated_q_0_V_address1;
reg    rotated_q_0_V_ce1;
reg    rotated_q_0_V_we1;
reg   [4:0] rotated_k_0_V_address0;
reg    rotated_k_0_V_ce0;
reg    rotated_k_0_V_we0;
wire   [39:0] rotated_k_0_V_d0;
wire   [4:0] rotated_k_0_V_address1;
reg    rotated_k_0_V_ce1;
reg    rotated_k_0_V_we1;
reg   [1:0] i_0_reg_262;
reg   [2:0] k_0_0_reg_273;
wire    ap_CS_fsm_state4;
reg   [1:0] i14_0_reg_284;
reg   [3:0] k16_0_0_reg_295;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln183_fu_460_p1;
wire   [3:0] tmp_72_fu_326_p3;
wire   [5:0] tmp_71_fu_318_p3;
wire   [5:0] zext_ln1265_fu_334_p1;
wire   [5:0] zext_ln203_fu_360_p1;
wire   [5:0] add_ln203_fu_364_p2;
wire   [3:0] zext_ln170_fu_344_p1;
wire   [3:0] add_ln171_fu_375_p2;
wire   [5:0] zext_ln1265_3_fu_381_p1;
wire   [5:0] add_ln1265_fu_385_p2;
wire   [3:0] tmp_74_fu_430_p3;
wire   [5:0] tmp_73_fu_422_p3;
wire   [5:0] zext_ln1116_fu_438_p1;
wire   [5:0] zext_ln1116_2_fu_466_p1;
wire   [5:0] add_ln1116_fu_470_p2;
wire  signed [39:0] mul_ln1118_fu_489_p0;
wire  signed [16:0] mul_ln1118_fu_489_p1;
wire  signed [55:0] sext_ln1118_5_fu_486_p1;
wire  signed [39:0] mul_ln1118_4_fu_501_p0;
wire  signed [16:0] mul_ln1118_4_fu_501_p1;
wire  signed [55:0] sext_ln1118_7_fu_498_p1;
wire  signed [39:0] mul_ln1118_5_fu_510_p0;
wire  signed [16:0] mul_ln1118_5_fu_510_p1;
wire  signed [39:0] mul_ln1118_6_fu_519_p0;
wire  signed [16:0] mul_ln1118_6_fu_519_p1;
wire   [55:0] add_ln1192_fu_525_p2;
wire   [55:0] add_ln1192_1_fu_540_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

apply_rotary_pos_g8j #(
    .DataWidth( 17 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
cos_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_tab_V_5_address0),
    .ce0(cos_tab_V_5_ce0),
    .q0(cos_tab_V_5_q0)
);

apply_rotary_pos_hbi #(
    .DataWidth( 17 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
sin_tab_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_tab_V_5_address0),
    .ce0(sin_tab_V_5_ce0),
    .q0(sin_tab_V_5_q0)
);

apply_rotary_pos_ibs #(
    .DataWidth( 40 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
rotated_q_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_V_address0),
    .ce0(rotated_q_0_V_ce0),
    .we0(rotated_q_0_V_we0),
    .d0(rotated_q_0_V_d0),
    .q0(rotated_q_0_V_q0),
    .address1(rotated_q_0_V_address1),
    .ce1(rotated_q_0_V_ce1),
    .we1(rotated_q_0_V_we1),
    .d1(input_q_0_V_q1)
);

apply_rotary_pos_ibs #(
    .DataWidth( 40 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
rotated_k_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_V_address0),
    .ce0(rotated_k_0_V_ce0),
    .we0(rotated_k_0_V_we0),
    .d0(rotated_k_0_V_d0),
    .q0(rotated_k_0_V_q0),
    .address1(rotated_k_0_V_address1),
    .ce1(rotated_k_0_V_ce1),
    .we1(rotated_k_0_V_we1),
    .d1(input_k_0_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i14_0_reg_284 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln182_fu_448_p2 == 1'd1))) begin
        i14_0_reg_284 <= i_2_reg_612;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_262 <= 2'd0;
    end else if (((icmp_ln170_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_262 <= i_reg_558;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k16_0_0_reg_295 <= add_ln182_reg_625;
    end else if (((icmp_ln180_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k16_0_0_reg_295 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_0_0_reg_273 <= add_ln170_reg_572;
    end else if (((icmp_ln168_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_0_reg_273 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln170_reg_572 <= add_ln170_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln182_reg_625 <= add_ln182_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cos_tab_V_5_load_reg_666 <= cos_tab_V_5_q0;
        input_k_0_V_load_2_reg_686 <= input_k_0_V_q0;
        input_q_0_V_load_2_reg_671 <= input_q_0_V_q0;
        rotated_k_0_V_load_reg_691 <= rotated_k_0_V_q0;
        rotated_q_0_V_load_reg_681 <= rotated_q_0_V_q0;
        sin_tab_V_5_load_reg_676 <= sin_tab_V_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_612 <= i_2_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_558 <= i_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln1118_4_reg_701 <= mul_ln1118_4_fu_501_p2;
        mul_ln1118_5_reg_706 <= mul_ln1118_5_fu_510_p2;
        mul_ln1118_6_reg_711 <= mul_ln1118_6_fu_519_p2;
        mul_ln1118_reg_696 <= mul_ln1118_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sext_ln1116_reg_630 <= sext_ln1116_fu_475_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln170_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln1265_reg_593 <= sext_ln1265_fu_390_p1;
        sext_ln203_reg_577 <= sext_ln203_fu_369_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln1116_reg_617[5 : 2] <= sub_ln1116_fu_442_p2[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln168_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln1265_reg_563[5 : 2] <= sub_ln1265_fu_338_p2[5 : 2];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln180_fu_410_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln180_fu_410_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cos_tab_V_5_ce0 = 1'b1;
    end else begin
        cos_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_k_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_address0 = sext_ln1265_fu_390_p1;
    end else begin
        input_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        input_k_0_V_ce0 = 1'b1;
    end else begin
        input_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_ce1 = 1'b1;
    end else begin
        input_k_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_q_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_address0 = sext_ln1265_fu_390_p1;
    end else begin
        input_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        input_q_0_V_ce0 = 1'b1;
    end else begin
        input_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_ce1 = 1'b1;
    end else begin
        input_q_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_k_0_V_ce0 = 1'b1;
    end else begin
        output_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_k_0_V_we0 = 1'b1;
    end else begin
        output_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_q_0_V_ce0 = 1'b1;
    end else begin
        output_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_q_0_V_we0 = 1'b1;
    end else begin
        output_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_address0 = sext_ln203_reg_577;
    end else begin
        rotated_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        rotated_k_0_V_ce0 = 1'b1;
    end else begin
        rotated_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_ce1 = 1'b1;
    end else begin
        rotated_k_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_we0 = 1'b1;
    end else begin
        rotated_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_we1 = 1'b1;
    end else begin
        rotated_k_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_V_address0 = sext_ln1116_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_address0 = sext_ln203_reg_577;
    end else begin
        rotated_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        rotated_q_0_V_ce0 = 1'b1;
    end else begin
        rotated_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_ce1 = 1'b1;
    end else begin
        rotated_q_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_we0 = 1'b1;
    end else begin
        rotated_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_we1 = 1'b1;
    end else begin
        rotated_q_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sin_tab_V_5_ce0 = 1'b1;
    end else begin
        sin_tab_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln168_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln170_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln180_fu_410_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln182_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_470_p2 = (sub_ln1116_reg_617 + zext_ln1116_2_fu_466_p1);

assign add_ln1192_1_fu_540_p2 = (mul_ln1118_6_reg_711 + mul_ln1118_5_reg_706);

assign add_ln1192_fu_525_p2 = (mul_ln1118_4_reg_701 + mul_ln1118_reg_696);

assign add_ln1265_fu_385_p2 = (sub_ln1265_reg_563 + zext_ln1265_3_fu_381_p1);

assign add_ln170_fu_354_p2 = (k_0_0_reg_273 + 3'd1);

assign add_ln171_fu_375_p2 = (zext_ln170_fu_344_p1 + 4'd6);

assign add_ln182_fu_454_p2 = (k16_0_0_reg_295 + 4'd1);

assign add_ln203_fu_364_p2 = (sub_ln1265_reg_563 + zext_ln203_fu_360_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cos_tab_V_5_address0 = zext_ln183_fu_460_p1;

assign i_2_fu_416_p2 = (i14_0_reg_284 + 2'd1);

assign i_fu_312_p2 = (i_0_reg_262 + 2'd1);

assign icmp_ln168_fu_306_p2 = ((i_0_reg_262 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_348_p2 = ((k_0_0_reg_273 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_410_p2 = ((i14_0_reg_284 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_448_p2 = ((k16_0_0_reg_295 == 4'd12) ? 1'b1 : 1'b0);

assign input_k_0_V_address1 = sext_ln203_fu_369_p1;

assign input_q_0_V_address1 = sext_ln203_fu_369_p1;

assign mul_ln1118_4_fu_501_p0 = rotated_q_0_V_load_reg_681;

assign mul_ln1118_4_fu_501_p1 = sext_ln1118_7_fu_498_p1;

assign mul_ln1118_4_fu_501_p2 = ($signed(mul_ln1118_4_fu_501_p0) * $signed(mul_ln1118_4_fu_501_p1));

assign mul_ln1118_5_fu_510_p0 = input_k_0_V_load_2_reg_686;

assign mul_ln1118_5_fu_510_p1 = sext_ln1118_5_fu_486_p1;

assign mul_ln1118_5_fu_510_p2 = ($signed(mul_ln1118_5_fu_510_p0) * $signed(mul_ln1118_5_fu_510_p1));

assign mul_ln1118_6_fu_519_p0 = rotated_k_0_V_load_reg_691;

assign mul_ln1118_6_fu_519_p1 = sext_ln1118_7_fu_498_p1;

assign mul_ln1118_6_fu_519_p2 = ($signed(mul_ln1118_6_fu_519_p0) * $signed(mul_ln1118_6_fu_519_p1));

assign mul_ln1118_fu_489_p0 = input_q_0_V_load_2_reg_671;

assign mul_ln1118_fu_489_p1 = sext_ln1118_5_fu_486_p1;

assign mul_ln1118_fu_489_p2 = ($signed(mul_ln1118_fu_489_p0) * $signed(mul_ln1118_fu_489_p1));

assign output_k_0_V_address0 = sext_ln1116_reg_630;

assign output_k_0_V_d0 = {{add_ln1192_1_fu_540_p2[55:16]}};

assign output_q_0_V_address0 = sext_ln1116_reg_630;

assign output_q_0_V_d0 = {{add_ln1192_fu_525_p2[55:16]}};

assign rotated_k_0_V_address1 = sext_ln1265_reg_593;

assign rotated_k_0_V_d0 = (40'd0 - input_k_0_V_q0);

assign rotated_q_0_V_address1 = sext_ln1265_reg_593;

assign rotated_q_0_V_d0 = (40'd0 - input_q_0_V_q0);

assign sext_ln1116_fu_475_p1 = $signed(add_ln1116_fu_470_p2);

assign sext_ln1118_5_fu_486_p1 = $signed(cos_tab_V_5_load_reg_666);

assign sext_ln1118_7_fu_498_p1 = $signed(sin_tab_V_5_load_reg_676);

assign sext_ln1265_fu_390_p1 = $signed(add_ln1265_fu_385_p2);

assign sext_ln203_fu_369_p1 = $signed(add_ln203_fu_364_p2);

assign sin_tab_V_5_address0 = zext_ln183_fu_460_p1;

assign sub_ln1116_fu_442_p2 = (tmp_73_fu_422_p3 - zext_ln1116_fu_438_p1);

assign sub_ln1265_fu_338_p2 = (tmp_71_fu_318_p3 - zext_ln1265_fu_334_p1);

assign tmp_71_fu_318_p3 = {{i_0_reg_262}, {4'd0}};

assign tmp_72_fu_326_p3 = {{i_0_reg_262}, {2'd0}};

assign tmp_73_fu_422_p3 = {{i14_0_reg_284}, {4'd0}};

assign tmp_74_fu_430_p3 = {{i14_0_reg_284}, {2'd0}};

assign zext_ln1116_2_fu_466_p1 = k16_0_0_reg_295;

assign zext_ln1116_fu_438_p1 = tmp_74_fu_430_p3;

assign zext_ln1265_3_fu_381_p1 = add_ln171_fu_375_p2;

assign zext_ln1265_fu_334_p1 = tmp_72_fu_326_p3;

assign zext_ln170_fu_344_p1 = k_0_0_reg_273;

assign zext_ln183_fu_460_p1 = k16_0_0_reg_295;

assign zext_ln203_fu_360_p1 = k_0_0_reg_273;

always @ (posedge ap_clk) begin
    sub_ln1265_reg_563[1:0] <= 2'b00;
    sub_ln1116_reg_617[1:0] <= 2'b00;
end

endmodule //apply_rotary_pos_emb
