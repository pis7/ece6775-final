// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reshape_2D_to_3D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_V_address0;
output   input_0_V_ce0;
input  [31:0] input_0_V_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;
output  [31:0] ap_return_12;
output  [31:0] ap_return_13;
output  [31:0] ap_return_14;
output  [31:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_129;
reg   [2:0] i_0_0_reg_140;
reg   [2:0] k_0_0_reg_151;
wire   [0:0] icmp_ln178_fu_162_p2;
reg   [0:0] icmp_ln178_reg_559;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln178_1_fu_168_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln178_1_fu_194_p3;
reg   [2:0] select_ln178_1_reg_568;
wire   [1:0] trunc_ln178_fu_202_p1;
reg   [1:0] trunc_ln178_reg_573;
wire   [1:0] trunc_ln203_fu_229_p1;
reg   [1:0] trunc_ln203_reg_582;
wire   [2:0] add_ln179_fu_233_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [2:0] ap_phi_mux_i_0_0_phi_fu_144_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln180_fu_224_p1;
reg   [31:0] output_V315_1_fu_52;
wire    ap_CS_fsm_state4;
reg   [31:0] output_V314_1_fu_56;
reg   [31:0] output_V_1_fu_60;
reg   [31:0] output_V313_1_fu_64;
reg   [31:0] output_V31247_1_fu_68;
reg   [31:0] output_V16_1_fu_72;
reg   [31:0] output_V211_1_fu_76;
reg   [31:0] output_V210_1_fu_80;
reg   [31:0] output_V2_1_fu_84;
reg   [31:0] output_V2936_1_fu_88;
reg   [31:0] output_V28_1_fu_92;
reg   [31:0] output_V3_1_fu_96;
reg   [31:0] output_V17_1_fu_100;
reg   [31:0] output_V1625_1_fu_104;
reg   [31:0] output_V14_1_fu_108;
reg   [31:0] output_V1520_1_fu_112;
wire   [0:0] icmp_ln179_fu_180_p2;
wire   [2:0] add_ln178_fu_174_p2;
wire   [2:0] select_ln178_fu_186_p3;
wire   [3:0] zext_ln179_fu_214_p1;
wire   [3:0] shl_ln180_mid2_fu_206_p3;
wire   [3:0] add_ln180_fu_218_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln178_reg_559 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_0_reg_140 <= select_ln178_1_reg_568;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_140 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln178_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_129 <= add_ln178_1_fu_168_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_129 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln178_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_0_0_reg_151 <= add_ln179_fu_233_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_0_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln178_reg_559 <= icmp_ln178_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd1) & (trunc_ln178_reg_573 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V14_1_fu_108 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd1) & (trunc_ln178_reg_573 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V1520_1_fu_112 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd1) & (trunc_ln178_reg_573 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V1625_1_fu_104 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd0) & (trunc_ln178_reg_573 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V16_1_fu_72 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd1) & (trunc_ln178_reg_573 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V17_1_fu_100 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd2) & (trunc_ln178_reg_573 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V210_1_fu_80 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd2) & (trunc_ln178_reg_573 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V211_1_fu_76 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd2) & (trunc_ln178_reg_573 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V28_1_fu_92 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd2) & (trunc_ln178_reg_573 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V2936_1_fu_88 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd0) & (trunc_ln178_reg_573 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V2_1_fu_84 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd3) & (trunc_ln178_reg_573 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V31247_1_fu_68 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd3) & (trunc_ln178_reg_573 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V313_1_fu_64 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd3) & (trunc_ln178_reg_573 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V314_1_fu_56 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd3) & (trunc_ln178_reg_573 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V315_1_fu_52 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd0) & (trunc_ln178_reg_573 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V3_1_fu_96 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln203_reg_582 == 2'd0) & (trunc_ln178_reg_573 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V_1_fu_60 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln178_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln178_1_reg_568 <= select_ln178_1_fu_194_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln178_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln178_reg_573 <= trunc_ln178_fu_202_p1;
        trunc_ln203_reg_582 <= trunc_ln203_fu_229_p1;
    end
end

always @ (*) begin
    if ((icmp_ln178_fu_162_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_reg_559 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_0_phi_fu_144_p4 = select_ln178_1_reg_568;
    end else begin
        ap_phi_mux_i_0_0_phi_fu_144_p4 = i_0_0_reg_140;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln178_fu_162_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln178_fu_162_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln178_1_fu_168_p2 = (indvar_flatten_reg_129 + 5'd1);

assign add_ln178_fu_174_p2 = (3'd1 + ap_phi_mux_i_0_0_phi_fu_144_p4);

assign add_ln179_fu_233_p2 = (select_ln178_fu_186_p3 + 3'd1);

assign add_ln180_fu_218_p2 = (zext_ln179_fu_214_p1 + shl_ln180_mid2_fu_206_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = output_V_1_fu_60;

assign ap_return_1 = output_V16_1_fu_72;

assign ap_return_10 = output_V210_1_fu_80;

assign ap_return_11 = output_V211_1_fu_76;

assign ap_return_12 = output_V31247_1_fu_68;

assign ap_return_13 = output_V313_1_fu_64;

assign ap_return_14 = output_V314_1_fu_56;

assign ap_return_15 = output_V315_1_fu_52;

assign ap_return_2 = output_V2_1_fu_84;

assign ap_return_3 = output_V3_1_fu_96;

assign ap_return_4 = output_V14_1_fu_108;

assign ap_return_5 = output_V1520_1_fu_112;

assign ap_return_6 = output_V1625_1_fu_104;

assign ap_return_7 = output_V17_1_fu_100;

assign ap_return_8 = output_V28_1_fu_92;

assign ap_return_9 = output_V2936_1_fu_88;

assign icmp_ln178_fu_162_p2 = ((indvar_flatten_reg_129 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_180_p2 = ((k_0_0_reg_151 == 3'd4) ? 1'b1 : 1'b0);

assign input_0_V_address0 = zext_ln180_fu_224_p1;

assign select_ln178_1_fu_194_p3 = ((icmp_ln179_fu_180_p2[0:0] === 1'b1) ? add_ln178_fu_174_p2 : ap_phi_mux_i_0_0_phi_fu_144_p4);

assign select_ln178_fu_186_p3 = ((icmp_ln179_fu_180_p2[0:0] === 1'b1) ? 3'd0 : k_0_0_reg_151);

assign shl_ln180_mid2_fu_206_p3 = {{trunc_ln178_fu_202_p1}, {2'd0}};

assign trunc_ln178_fu_202_p1 = select_ln178_1_fu_194_p3[1:0];

assign trunc_ln203_fu_229_p1 = select_ln178_fu_186_p3[1:0];

assign zext_ln179_fu_214_p1 = select_ln178_fu_186_p3;

assign zext_ln180_fu_224_p1 = add_ln180_fu_218_p2;

endmodule //reshape_2D_to_3D
