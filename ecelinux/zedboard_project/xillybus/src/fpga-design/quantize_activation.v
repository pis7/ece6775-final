// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantize_activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_0_V_address1,
        input_0_V_ce1,
        input_0_V_q1,
        output_states_0_0_V_address0,
        output_states_0_0_V_ce0,
        output_states_0_0_V_we0,
        output_states_0_0_V_d0,
        output_states_1_0_V_address0,
        output_states_1_0_V_ce0,
        output_states_1_0_V_we0,
        output_states_1_0_V_d0,
        output_states_2_0_V_address0,
        output_states_2_0_V_ce0,
        output_states_2_0_V_we0,
        output_states_2_0_V_d0,
        output_states_3_0_V_address0,
        output_states_3_0_V_ce0,
        output_states_3_0_V_we0,
        output_states_3_0_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_state7 = 61'd64;
parameter    ap_ST_fsm_state8 = 61'd128;
parameter    ap_ST_fsm_state9 = 61'd256;
parameter    ap_ST_fsm_state10 = 61'd512;
parameter    ap_ST_fsm_state11 = 61'd1024;
parameter    ap_ST_fsm_state12 = 61'd2048;
parameter    ap_ST_fsm_state13 = 61'd4096;
parameter    ap_ST_fsm_state14 = 61'd8192;
parameter    ap_ST_fsm_state15 = 61'd16384;
parameter    ap_ST_fsm_state16 = 61'd32768;
parameter    ap_ST_fsm_state17 = 61'd65536;
parameter    ap_ST_fsm_state18 = 61'd131072;
parameter    ap_ST_fsm_state19 = 61'd262144;
parameter    ap_ST_fsm_state20 = 61'd524288;
parameter    ap_ST_fsm_state21 = 61'd1048576;
parameter    ap_ST_fsm_state22 = 61'd2097152;
parameter    ap_ST_fsm_state23 = 61'd4194304;
parameter    ap_ST_fsm_state24 = 61'd8388608;
parameter    ap_ST_fsm_state25 = 61'd16777216;
parameter    ap_ST_fsm_state26 = 61'd33554432;
parameter    ap_ST_fsm_state27 = 61'd67108864;
parameter    ap_ST_fsm_state28 = 61'd134217728;
parameter    ap_ST_fsm_state29 = 61'd268435456;
parameter    ap_ST_fsm_state30 = 61'd536870912;
parameter    ap_ST_fsm_state31 = 61'd1073741824;
parameter    ap_ST_fsm_state32 = 61'd2147483648;
parameter    ap_ST_fsm_state33 = 61'd4294967296;
parameter    ap_ST_fsm_state34 = 61'd8589934592;
parameter    ap_ST_fsm_state35 = 61'd17179869184;
parameter    ap_ST_fsm_state36 = 61'd34359738368;
parameter    ap_ST_fsm_state37 = 61'd68719476736;
parameter    ap_ST_fsm_state38 = 61'd137438953472;
parameter    ap_ST_fsm_state39 = 61'd274877906944;
parameter    ap_ST_fsm_state40 = 61'd549755813888;
parameter    ap_ST_fsm_state41 = 61'd1099511627776;
parameter    ap_ST_fsm_state42 = 61'd2199023255552;
parameter    ap_ST_fsm_state43 = 61'd4398046511104;
parameter    ap_ST_fsm_state44 = 61'd8796093022208;
parameter    ap_ST_fsm_state45 = 61'd17592186044416;
parameter    ap_ST_fsm_state46 = 61'd35184372088832;
parameter    ap_ST_fsm_state47 = 61'd70368744177664;
parameter    ap_ST_fsm_state48 = 61'd140737488355328;
parameter    ap_ST_fsm_state49 = 61'd281474976710656;
parameter    ap_ST_fsm_state50 = 61'd562949953421312;
parameter    ap_ST_fsm_state51 = 61'd1125899906842624;
parameter    ap_ST_fsm_state52 = 61'd2251799813685248;
parameter    ap_ST_fsm_state53 = 61'd4503599627370496;
parameter    ap_ST_fsm_state54 = 61'd9007199254740992;
parameter    ap_ST_fsm_state55 = 61'd18014398509481984;
parameter    ap_ST_fsm_state56 = 61'd36028797018963968;
parameter    ap_ST_fsm_state57 = 61'd72057594037927936;
parameter    ap_ST_fsm_state58 = 61'd144115188075855872;
parameter    ap_ST_fsm_state59 = 61'd288230376151711744;
parameter    ap_ST_fsm_state60 = 61'd576460752303423488;
parameter    ap_ST_fsm_state61 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_0_V_address0;
output   input_0_V_ce0;
input  [37:0] input_0_V_q0;
output  [4:0] input_0_V_address1;
output   input_0_V_ce1;
input  [37:0] input_0_V_q1;
output  [2:0] output_states_0_0_V_address0;
output   output_states_0_0_V_ce0;
output   output_states_0_0_V_we0;
output  [7:0] output_states_0_0_V_d0;
output  [2:0] output_states_1_0_V_address0;
output   output_states_1_0_V_ce0;
output   output_states_1_0_V_we0;
output  [7:0] output_states_1_0_V_d0;
output  [2:0] output_states_2_0_V_address0;
output   output_states_2_0_V_ce0;
output   output_states_2_0_V_we0;
output  [7:0] output_states_2_0_V_d0;
output  [2:0] output_states_3_0_V_address0;
output   output_states_3_0_V_ce0;
output   output_states_3_0_V_we0;
output  [7:0] output_states_3_0_V_d0;
output  [37:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_0_V_address0;
reg input_0_V_ce0;
reg[4:0] input_0_V_address1;
reg input_0_V_ce1;
reg output_states_0_0_V_ce0;
reg output_states_0_0_V_we0;
reg output_states_1_0_V_ce0;
reg output_states_1_0_V_we0;
reg output_states_2_0_V_ce0;
reg output_states_2_0_V_we0;
reg output_states_3_0_V_ce0;
reg output_states_3_0_V_we0;

(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [37:0] reg_255;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
reg   [37:0] reg_260;
wire   [37:0] grp_fu_247_p3;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln87_fu_265_p2;
wire   [4:0] add_ln87_fu_276_p2;
reg   [4:0] add_ln87_reg_942;
reg   [37:0] p_Val2_15_reg_952;
wire    ap_CS_fsm_state4;
wire   [37:0] p_Val2_16_fu_315_p3;
wire    ap_CS_fsm_state5;
wire  signed [37:0] trunc_ln703_fu_322_p1;
reg  signed [37:0] trunc_ln703_reg_963;
wire    ap_CS_fsm_state55;
wire  signed [57:0] sext_ln94_fu_326_p1;
reg  signed [57:0] sext_ln94_reg_967;
wire   [2:0] add_ln94_fu_336_p2;
reg   [2:0] add_ln94_reg_978;
wire    ap_CS_fsm_state56;
wire   [4:0] shl_ln_fu_342_p3;
reg   [4:0] shl_ln_reg_983;
wire   [0:0] icmp_ln94_fu_330_p2;
reg   [37:0] p_Val2_9_reg_1009;
reg   [37:0] p_Val2_17_reg_1015;
wire   [17:0] select_ln850_fu_484_p3;
reg   [17:0] select_ln850_reg_1021;
wire    ap_CS_fsm_state59;
reg   [10:0] tmp_75_reg_1027;
wire   [17:0] select_ln850_1_fu_562_p3;
reg   [17:0] select_ln850_1_reg_1032;
reg   [10:0] tmp_77_reg_1038;
reg   [37:0] p_Val2_18_reg_1043;
reg   [37:0] p_Val2_19_reg_1049;
wire   [7:0] select_ln887_1_fu_645_p3;
reg   [7:0] select_ln887_1_reg_1055;
wire    ap_CS_fsm_state60;
wire   [7:0] select_ln887_3_fu_680_p3;
reg   [7:0] select_ln887_3_reg_1060;
wire   [17:0] select_ln850_2_fu_748_p3;
reg   [17:0] select_ln850_2_reg_1065;
reg   [10:0] tmp_79_reg_1071;
wire   [17:0] select_ln850_3_fu_826_p3;
reg   [17:0] select_ln850_3_reg_1076;
reg   [10:0] tmp_81_reg_1082;
reg   [37:0] max_val_V_0_0_reg_200;
reg   [4:0] j_0_0_reg_210;
reg   [2:0] jo_0_0_reg_221;
wire    ap_CS_fsm_state61;
wire   [63:0] zext_ln88_fu_271_p1;
wire   [63:0] zext_ln98_fu_350_p1;
wire   [63:0] zext_ln98_1_fu_361_p1;
wire   [63:0] zext_ln98_2_fu_371_p1;
wire   [63:0] zext_ln98_3_fu_381_p1;
wire   [63:0] zext_ln100_fu_844_p1;
wire   [0:0] grp_fu_233_p3;
wire   [37:0] grp_fu_241_p2;
wire   [0:0] icmp_ln1494_32_fu_286_p2;
wire   [36:0] trunc_ln87_fu_282_p1;
wire   [36:0] select_ln60_fu_292_p3;
wire   [36:0] grp_fu_304_p1;
wire   [0:0] icmp_ln1494_fu_310_p2;
wire   [37:0] grp_fu_304_p2;
wire   [4:0] or_ln98_fu_355_p2;
wire   [4:0] or_ln98_1_fu_366_p2;
wire   [4:0] or_ln98_2_fu_376_p2;
wire  signed [37:0] mul_ln1118_fu_390_p0;
wire  signed [37:0] mul_ln1118_fu_390_p1;
wire   [57:0] mul_ln1118_fu_390_p2;
wire  signed [37:0] mul_ln1118_1_fu_409_p0;
wire  signed [37:0] mul_ln1118_1_fu_409_p1;
wire   [57:0] mul_ln1118_1_fu_409_p2;
wire   [0:0] icmp_ln1494_33_fu_424_p2;
wire   [37:0] select_ln67_fu_429_p3;
wire   [37:0] add_ln67_fu_437_p2;
wire   [19:0] trunc_ln851_fu_460_p1;
wire   [17:0] p_Result_s_fu_442_p4;
wire   [0:0] icmp_ln851_fu_464_p2;
wire   [17:0] add_ln700_fu_470_p2;
wire   [0:0] tmp_74_fu_452_p3;
wire   [17:0] select_ln851_fu_476_p3;
wire   [0:0] icmp_ln1494_34_fu_502_p2;
wire   [37:0] select_ln67_1_fu_507_p3;
wire   [37:0] add_ln67_1_fu_515_p2;
wire   [19:0] trunc_ln851_1_fu_538_p1;
wire   [17:0] p_Result_0_0_1_fu_520_p4;
wire   [0:0] icmp_ln851_1_fu_542_p2;
wire   [17:0] add_ln700_1_fu_548_p2;
wire   [0:0] tmp_76_fu_530_p3;
wire   [17:0] select_ln851_1_fu_554_p3;
wire  signed [37:0] mul_ln1118_2_fu_584_p0;
wire  signed [37:0] mul_ln1118_2_fu_584_p1;
wire   [57:0] mul_ln1118_2_fu_584_p2;
wire  signed [37:0] mul_ln1118_3_fu_603_p0;
wire  signed [37:0] mul_ln1118_3_fu_603_p1;
wire   [57:0] mul_ln1118_3_fu_603_p2;
wire   [0:0] icmp_ln887_fu_618_p2;
wire   [0:0] icmp_ln895_fu_623_p2;
wire   [0:0] or_ln887_fu_639_p2;
wire   [7:0] select_ln887_fu_631_p3;
wire   [7:0] trunc_ln99_fu_628_p1;
wire   [0:0] icmp_ln887_1_fu_653_p2;
wire   [0:0] icmp_ln895_1_fu_658_p2;
wire   [0:0] or_ln887_1_fu_674_p2;
wire   [7:0] select_ln887_2_fu_666_p3;
wire   [7:0] trunc_ln99_1_fu_663_p1;
wire   [0:0] icmp_ln1494_35_fu_688_p2;
wire   [37:0] select_ln67_2_fu_693_p3;
wire   [37:0] add_ln67_2_fu_701_p2;
wire   [19:0] trunc_ln851_2_fu_724_p1;
wire   [17:0] p_Result_0_0_2_fu_706_p4;
wire   [0:0] icmp_ln851_2_fu_728_p2;
wire   [17:0] add_ln700_2_fu_734_p2;
wire   [0:0] tmp_78_fu_716_p3;
wire   [17:0] select_ln851_2_fu_740_p3;
wire   [0:0] icmp_ln1494_36_fu_766_p2;
wire   [37:0] select_ln67_3_fu_771_p3;
wire   [37:0] add_ln67_3_fu_779_p2;
wire   [19:0] trunc_ln851_3_fu_802_p1;
wire   [17:0] p_Result_0_0_3_fu_784_p4;
wire   [0:0] icmp_ln851_3_fu_806_p2;
wire   [17:0] add_ln700_3_fu_812_p2;
wire   [0:0] tmp_80_fu_794_p3;
wire   [17:0] select_ln851_3_fu_818_p3;
wire   [0:0] icmp_ln887_2_fu_852_p2;
wire   [0:0] icmp_ln895_2_fu_857_p2;
wire   [0:0] or_ln887_2_fu_873_p2;
wire   [7:0] select_ln887_4_fu_865_p3;
wire   [7:0] trunc_ln99_2_fu_862_p1;
wire   [0:0] icmp_ln887_3_fu_888_p2;
wire   [0:0] icmp_ln895_3_fu_893_p2;
wire   [0:0] or_ln887_3_fu_909_p2;
wire   [7:0] select_ln887_6_fu_901_p3;
wire   [7:0] trunc_ln99_3_fu_898_p1;
reg    grp_fu_304_ap_start;
wire    grp_fu_304_ap_done;
reg   [60:0] ap_NS_fsm;
wire   [46:0] grp_fu_304_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
end

dut_udiv_47s_37nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 51 ),
    .din0_WIDTH( 47 ),
    .din1_WIDTH( 37 ),
    .dout_WIDTH( 38 ))
dut_udiv_47s_37nsdEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_304_ap_start),
    .done(grp_fu_304_ap_done),
    .din0(47'd139637976727552),
    .din1(grp_fu_304_p1),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_0_reg_210 <= add_ln87_reg_942;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_0_0_reg_210 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        jo_0_0_reg_221 <= add_ln94_reg_978;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        jo_0_0_reg_221 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_val_V_0_0_reg_200 <= p_Val2_16_fu_315_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val_V_0_0_reg_200 <= grp_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        reg_255 <= input_0_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        reg_255 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        reg_260 <= input_0_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        reg_260 <= input_0_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln87_fu_265_p2 == 1'd0))) begin
        add_ln87_reg_942 <= add_ln87_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        add_ln94_reg_978 <= add_ln94_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_15_reg_952 <= grp_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        p_Val2_17_reg_1015 <= {{mul_ln1118_1_fu_409_p2[57:20]}};
        p_Val2_9_reg_1009 <= {{mul_ln1118_fu_390_p2[57:20]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        p_Val2_18_reg_1043 <= {{mul_ln1118_2_fu_584_p2[57:20]}};
        p_Val2_19_reg_1049 <= {{mul_ln1118_3_fu_603_p2[57:20]}};
        select_ln850_1_reg_1032 <= select_ln850_1_fu_562_p3;
        select_ln850_reg_1021 <= select_ln850_fu_484_p3;
        tmp_75_reg_1027 <= {{select_ln850_fu_484_p3[17:7]}};
        tmp_77_reg_1038 <= {{select_ln850_1_fu_562_p3[17:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        select_ln850_2_reg_1065 <= select_ln850_2_fu_748_p3;
        select_ln850_3_reg_1076 <= select_ln850_3_fu_826_p3;
        select_ln887_1_reg_1055 <= select_ln887_1_fu_645_p3;
        select_ln887_3_reg_1060 <= select_ln887_3_fu_680_p3;
        tmp_79_reg_1071 <= {{select_ln850_2_fu_748_p3[17:7]}};
        tmp_81_reg_1082 <= {{select_ln850_3_fu_826_p3[17:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        sext_ln94_reg_967 <= sext_ln94_fu_326_p1;
        trunc_ln703_reg_963 <= trunc_ln703_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln94_fu_330_p2 == 1'd0))) begin
        shl_ln_reg_983[4 : 2] <= shl_ln_fu_342_p3[4 : 2];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state56) & (icmp_ln94_fu_330_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln94_fu_330_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln87_fu_265_p2 == 1'd1))) begin
        grp_fu_304_ap_start = 1'b1;
    end else begin
        grp_fu_304_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        input_0_V_address0 = zext_ln98_3_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        input_0_V_address0 = zext_ln98_fu_350_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_V_address0 = zext_ln88_fu_271_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_0_V_address0 = 64'd0;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        input_0_V_address1 = zext_ln98_2_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        input_0_V_address1 = zext_ln98_1_fu_361_p1;
    end else begin
        input_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state57) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state57))) begin
        input_0_V_ce1 = 1'b1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_0_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_0_0_V_we0 = 1'b1;
    end else begin
        output_states_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_1_0_V_ce0 = 1'b1;
    end else begin
        output_states_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_1_0_V_we0 = 1'b1;
    end else begin
        output_states_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_2_0_V_ce0 = 1'b1;
    end else begin
        output_states_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_2_0_V_we0 = 1'b1;
    end else begin
        output_states_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_3_0_V_ce0 = 1'b1;
    end else begin
        output_states_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        output_states_3_0_V_we0 = 1'b1;
    end else begin
        output_states_3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln87_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln94_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_1_fu_515_p2 = (select_ln67_1_fu_507_p3 + p_Val2_17_reg_1015);

assign add_ln67_2_fu_701_p2 = (select_ln67_2_fu_693_p3 + p_Val2_18_reg_1043);

assign add_ln67_3_fu_779_p2 = (select_ln67_3_fu_771_p3 + p_Val2_19_reg_1049);

assign add_ln67_fu_437_p2 = (select_ln67_fu_429_p3 + p_Val2_9_reg_1009);

assign add_ln700_1_fu_548_p2 = (18'd1 + p_Result_0_0_1_fu_520_p4);

assign add_ln700_2_fu_734_p2 = (18'd1 + p_Result_0_0_2_fu_706_p4);

assign add_ln700_3_fu_812_p2 = (18'd1 + p_Result_0_0_3_fu_784_p4);

assign add_ln700_fu_470_p2 = (18'd1 + p_Result_s_fu_442_p4);

assign add_ln87_fu_276_p2 = (j_0_0_reg_210 + 5'd1);

assign add_ln94_fu_336_p2 = (jo_0_0_reg_221 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_return = trunc_ln703_reg_963;

assign grp_fu_233_p3 = input_0_V_q0[32'd37];

assign grp_fu_241_p2 = (38'd0 - input_0_V_q0);

assign grp_fu_247_p3 = ((grp_fu_233_p3[0:0] === 1'b1) ? grp_fu_241_p2 : input_0_V_q0);

assign grp_fu_304_p1 = grp_fu_304_p10;

assign grp_fu_304_p10 = select_ln60_fu_292_p3;

assign icmp_ln1494_32_fu_286_p2 = (($signed(max_val_V_0_0_reg_200) > $signed(38'd10)) ? 1'b1 : 1'b0);

assign icmp_ln1494_33_fu_424_p2 = (($signed(p_Val2_9_reg_1009) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_34_fu_502_p2 = (($signed(p_Val2_17_reg_1015) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_35_fu_688_p2 = (($signed(p_Val2_18_reg_1043) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_36_fu_766_p2 = (($signed(p_Val2_19_reg_1049) > $signed(38'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_310_p2 = (($signed(p_Val2_15_reg_952) > $signed(max_val_V_0_0_reg_200)) ? 1'b1 : 1'b0);

assign icmp_ln851_1_fu_542_p2 = ((trunc_ln851_1_fu_538_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_2_fu_728_p2 = ((trunc_ln851_2_fu_724_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_3_fu_806_p2 = ((trunc_ln851_3_fu_802_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_464_p2 = ((trunc_ln851_fu_460_p1 == 20'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_265_p2 = ((j_0_0_reg_210 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_653_p2 = (($signed(select_ln850_1_reg_1032) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_852_p2 = (($signed(select_ln850_2_reg_1065) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln887_3_fu_888_p2 = (($signed(select_ln850_3_reg_1076) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_618_p2 = (($signed(select_ln850_reg_1021) < $signed(18'd262016)) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_658_p2 = (($signed(tmp_77_reg_1038) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_857_p2 = (($signed(tmp_79_reg_1071) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_893_p2 = (($signed(tmp_81_reg_1082) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_623_p2 = (($signed(tmp_75_reg_1027) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_330_p2 = ((jo_0_0_reg_221 == 3'd6) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_409_p0 = reg_260;

assign mul_ln1118_1_fu_409_p1 = sext_ln94_reg_967;

assign mul_ln1118_1_fu_409_p2 = ($signed(mul_ln1118_1_fu_409_p0) * $signed(mul_ln1118_1_fu_409_p1));

assign mul_ln1118_2_fu_584_p0 = reg_255;

assign mul_ln1118_2_fu_584_p1 = sext_ln94_reg_967;

assign mul_ln1118_2_fu_584_p2 = ($signed(mul_ln1118_2_fu_584_p0) * $signed(mul_ln1118_2_fu_584_p1));

assign mul_ln1118_3_fu_603_p0 = reg_260;

assign mul_ln1118_3_fu_603_p1 = sext_ln94_reg_967;

assign mul_ln1118_3_fu_603_p2 = ($signed(mul_ln1118_3_fu_603_p0) * $signed(mul_ln1118_3_fu_603_p1));

assign mul_ln1118_fu_390_p0 = reg_255;

assign mul_ln1118_fu_390_p1 = sext_ln94_reg_967;

assign mul_ln1118_fu_390_p2 = ($signed(mul_ln1118_fu_390_p0) * $signed(mul_ln1118_fu_390_p1));

assign or_ln887_1_fu_674_p2 = (icmp_ln895_1_fu_658_p2 | icmp_ln887_1_fu_653_p2);

assign or_ln887_2_fu_873_p2 = (icmp_ln895_2_fu_857_p2 | icmp_ln887_2_fu_852_p2);

assign or_ln887_3_fu_909_p2 = (icmp_ln895_3_fu_893_p2 | icmp_ln887_3_fu_888_p2);

assign or_ln887_fu_639_p2 = (icmp_ln895_fu_623_p2 | icmp_ln887_fu_618_p2);

assign or_ln98_1_fu_366_p2 = (shl_ln_reg_983 | 5'd2);

assign or_ln98_2_fu_376_p2 = (shl_ln_reg_983 | 5'd3);

assign or_ln98_fu_355_p2 = (shl_ln_fu_342_p3 | 5'd1);

assign output_states_0_0_V_address0 = zext_ln100_fu_844_p1;

assign output_states_0_0_V_d0 = select_ln887_1_reg_1055;

assign output_states_1_0_V_address0 = zext_ln100_fu_844_p1;

assign output_states_1_0_V_d0 = select_ln887_3_reg_1060;

assign output_states_2_0_V_address0 = zext_ln100_fu_844_p1;

assign output_states_2_0_V_d0 = ((or_ln887_2_fu_873_p2[0:0] === 1'b1) ? select_ln887_4_fu_865_p3 : trunc_ln99_2_fu_862_p1);

assign output_states_3_0_V_address0 = zext_ln100_fu_844_p1;

assign output_states_3_0_V_d0 = ((or_ln887_3_fu_909_p2[0:0] === 1'b1) ? select_ln887_6_fu_901_p3 : trunc_ln99_3_fu_898_p1);

assign p_Result_0_0_1_fu_520_p4 = {{add_ln67_1_fu_515_p2[37:20]}};

assign p_Result_0_0_2_fu_706_p4 = {{add_ln67_2_fu_701_p2[37:20]}};

assign p_Result_0_0_3_fu_784_p4 = {{add_ln67_3_fu_779_p2[37:20]}};

assign p_Result_s_fu_442_p4 = {{add_ln67_fu_437_p2[37:20]}};

assign p_Val2_16_fu_315_p3 = ((icmp_ln1494_fu_310_p2[0:0] === 1'b1) ? p_Val2_15_reg_952 : max_val_V_0_0_reg_200);

assign select_ln60_fu_292_p3 = ((icmp_ln1494_32_fu_286_p2[0:0] === 1'b1) ? trunc_ln87_fu_282_p1 : 37'd10);

assign select_ln67_1_fu_507_p3 = ((icmp_ln1494_34_fu_502_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln67_2_fu_693_p3 = ((icmp_ln1494_35_fu_688_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln67_3_fu_771_p3 = ((icmp_ln1494_36_fu_766_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln67_fu_429_p3 = ((icmp_ln1494_33_fu_424_p2[0:0] === 1'b1) ? 38'd524288 : 38'd274877382656);

assign select_ln850_1_fu_562_p3 = ((tmp_76_fu_530_p3[0:0] === 1'b1) ? select_ln851_1_fu_554_p3 : p_Result_0_0_1_fu_520_p4);

assign select_ln850_2_fu_748_p3 = ((tmp_78_fu_716_p3[0:0] === 1'b1) ? select_ln851_2_fu_740_p3 : p_Result_0_0_2_fu_706_p4);

assign select_ln850_3_fu_826_p3 = ((tmp_80_fu_794_p3[0:0] === 1'b1) ? select_ln851_3_fu_818_p3 : p_Result_0_0_3_fu_784_p4);

assign select_ln850_fu_484_p3 = ((tmp_74_fu_452_p3[0:0] === 1'b1) ? select_ln851_fu_476_p3 : p_Result_s_fu_442_p4);

assign select_ln851_1_fu_554_p3 = ((icmp_ln851_1_fu_542_p2[0:0] === 1'b1) ? p_Result_0_0_1_fu_520_p4 : add_ln700_1_fu_548_p2);

assign select_ln851_2_fu_740_p3 = ((icmp_ln851_2_fu_728_p2[0:0] === 1'b1) ? p_Result_0_0_2_fu_706_p4 : add_ln700_2_fu_734_p2);

assign select_ln851_3_fu_818_p3 = ((icmp_ln851_3_fu_806_p2[0:0] === 1'b1) ? p_Result_0_0_3_fu_784_p4 : add_ln700_3_fu_812_p2);

assign select_ln851_fu_476_p3 = ((icmp_ln851_fu_464_p2[0:0] === 1'b1) ? p_Result_s_fu_442_p4 : add_ln700_fu_470_p2);

assign select_ln887_1_fu_645_p3 = ((or_ln887_fu_639_p2[0:0] === 1'b1) ? select_ln887_fu_631_p3 : trunc_ln99_fu_628_p1);

assign select_ln887_2_fu_666_p3 = ((icmp_ln887_1_fu_653_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln887_3_fu_680_p3 = ((or_ln887_1_fu_674_p2[0:0] === 1'b1) ? select_ln887_2_fu_666_p3 : trunc_ln99_1_fu_663_p1);

assign select_ln887_4_fu_865_p3 = ((icmp_ln887_2_fu_852_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln887_6_fu_901_p3 = ((icmp_ln887_3_fu_888_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln887_fu_631_p3 = ((icmp_ln887_fu_618_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign sext_ln94_fu_326_p1 = trunc_ln703_fu_322_p1;

assign shl_ln_fu_342_p3 = {{jo_0_0_reg_221}, {2'd0}};

assign tmp_74_fu_452_p3 = add_ln67_fu_437_p2[32'd37];

assign tmp_76_fu_530_p3 = add_ln67_1_fu_515_p2[32'd37];

assign tmp_78_fu_716_p3 = add_ln67_2_fu_701_p2[32'd37];

assign tmp_80_fu_794_p3 = add_ln67_3_fu_779_p2[32'd37];

assign trunc_ln703_fu_322_p1 = grp_fu_304_p2[37:0];

assign trunc_ln851_1_fu_538_p1 = add_ln67_1_fu_515_p2[19:0];

assign trunc_ln851_2_fu_724_p1 = add_ln67_2_fu_701_p2[19:0];

assign trunc_ln851_3_fu_802_p1 = add_ln67_3_fu_779_p2[19:0];

assign trunc_ln851_fu_460_p1 = add_ln67_fu_437_p2[19:0];

assign trunc_ln87_fu_282_p1 = max_val_V_0_0_reg_200[36:0];

assign trunc_ln99_1_fu_663_p1 = select_ln850_1_reg_1032[7:0];

assign trunc_ln99_2_fu_862_p1 = select_ln850_2_reg_1065[7:0];

assign trunc_ln99_3_fu_898_p1 = select_ln850_3_reg_1076[7:0];

assign trunc_ln99_fu_628_p1 = select_ln850_reg_1021[7:0];

assign zext_ln100_fu_844_p1 = jo_0_0_reg_221;

assign zext_ln88_fu_271_p1 = j_0_0_reg_210;

assign zext_ln98_1_fu_361_p1 = or_ln98_fu_355_p2;

assign zext_ln98_2_fu_371_p1 = or_ln98_1_fu_366_p2;

assign zext_ln98_3_fu_381_p1 = or_ln98_2_fu_376_p2;

assign zext_ln98_fu_350_p1 = shl_ln_fu_342_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_983[1:0] <= 2'b00;
end

endmodule //quantize_activation
