// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rms_norm_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_0_V_address1,
        input_0_V_ce1,
        input_0_V_we1,
        input_0_V_d1,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_pp0_stage0 = 61'd2;
parameter    ap_ST_fsm_state6 = 61'd4;
parameter    ap_ST_fsm_state7 = 61'd8;
parameter    ap_ST_fsm_state8 = 61'd16;
parameter    ap_ST_fsm_state9 = 61'd32;
parameter    ap_ST_fsm_state10 = 61'd64;
parameter    ap_ST_fsm_state11 = 61'd128;
parameter    ap_ST_fsm_state12 = 61'd256;
parameter    ap_ST_fsm_state13 = 61'd512;
parameter    ap_ST_fsm_state14 = 61'd1024;
parameter    ap_ST_fsm_state15 = 61'd2048;
parameter    ap_ST_fsm_state16 = 61'd4096;
parameter    ap_ST_fsm_state17 = 61'd8192;
parameter    ap_ST_fsm_state18 = 61'd16384;
parameter    ap_ST_fsm_state19 = 61'd32768;
parameter    ap_ST_fsm_state20 = 61'd65536;
parameter    ap_ST_fsm_state21 = 61'd131072;
parameter    ap_ST_fsm_state22 = 61'd262144;
parameter    ap_ST_fsm_state23 = 61'd524288;
parameter    ap_ST_fsm_state24 = 61'd1048576;
parameter    ap_ST_fsm_state25 = 61'd2097152;
parameter    ap_ST_fsm_state26 = 61'd4194304;
parameter    ap_ST_fsm_state27 = 61'd8388608;
parameter    ap_ST_fsm_state28 = 61'd16777216;
parameter    ap_ST_fsm_state29 = 61'd33554432;
parameter    ap_ST_fsm_state30 = 61'd67108864;
parameter    ap_ST_fsm_state31 = 61'd134217728;
parameter    ap_ST_fsm_state32 = 61'd268435456;
parameter    ap_ST_fsm_state33 = 61'd536870912;
parameter    ap_ST_fsm_state34 = 61'd1073741824;
parameter    ap_ST_fsm_state35 = 61'd2147483648;
parameter    ap_ST_fsm_state36 = 61'd4294967296;
parameter    ap_ST_fsm_state37 = 61'd8589934592;
parameter    ap_ST_fsm_state38 = 61'd17179869184;
parameter    ap_ST_fsm_state39 = 61'd34359738368;
parameter    ap_ST_fsm_state40 = 61'd68719476736;
parameter    ap_ST_fsm_state41 = 61'd137438953472;
parameter    ap_ST_fsm_state42 = 61'd274877906944;
parameter    ap_ST_fsm_state43 = 61'd549755813888;
parameter    ap_ST_fsm_state44 = 61'd1099511627776;
parameter    ap_ST_fsm_state45 = 61'd2199023255552;
parameter    ap_ST_fsm_state46 = 61'd4398046511104;
parameter    ap_ST_fsm_state47 = 61'd8796093022208;
parameter    ap_ST_fsm_state48 = 61'd17592186044416;
parameter    ap_ST_fsm_state49 = 61'd35184372088832;
parameter    ap_ST_fsm_state50 = 61'd70368744177664;
parameter    ap_ST_fsm_state51 = 61'd140737488355328;
parameter    ap_ST_fsm_state52 = 61'd281474976710656;
parameter    ap_ST_fsm_state53 = 61'd562949953421312;
parameter    ap_ST_fsm_state54 = 61'd1125899906842624;
parameter    ap_ST_fsm_state55 = 61'd2251799813685248;
parameter    ap_ST_fsm_state56 = 61'd4503599627370496;
parameter    ap_ST_fsm_state57 = 61'd9007199254740992;
parameter    ap_ST_fsm_state58 = 61'd18014398509481984;
parameter    ap_ST_fsm_state59 = 61'd36028797018963968;
parameter    ap_ST_fsm_state60 = 61'd72057594037927936;
parameter    ap_ST_fsm_state61 = 61'd144115188075855872;
parameter    ap_ST_fsm_state62 = 61'd288230376151711744;
parameter    ap_ST_fsm_pp1_stage0 = 61'd576460752303423488;
parameter    ap_ST_fsm_state72 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_V_address0;
output   input_0_V_ce0;
input  [39:0] input_0_V_q0;
output  [3:0] input_0_V_address1;
output   input_0_V_ce1;
output   input_0_V_we1;
output  [39:0] input_0_V_d1;
output  [3:0] weight_V_address0;
output   weight_V_ce0;
input  [39:0] weight_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_0_V_address0;
reg input_0_V_ce0;
reg input_0_V_ce1;
reg input_0_V_we1;
reg weight_V_ce0;

(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [39:0] p_Val2_s_reg_105;
reg   [4:0] i_0_reg_117;
reg   [4:0] i1_0_reg_128;
reg  signed [39:0] reg_144;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln88_reg_312;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state63_pp1_stage0_iter0;
wire    ap_block_state64_pp1_stage0_iter1;
wire    ap_block_state65_pp1_stage0_iter2;
wire    ap_block_state66_pp1_stage0_iter3;
wire    ap_block_state67_pp1_stage0_iter4;
wire    ap_block_state68_pp1_stage0_iter5;
wire    ap_block_state69_pp1_stage0_iter6;
wire    ap_block_state70_pp1_stage0_iter7;
wire    ap_block_state71_pp1_stage0_iter8;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln93_reg_356;
reg   [0:0] icmp_ln93_reg_356_pp1_iter1_reg;
wire   [0:0] icmp_ln88_fu_148_p2;
reg   [0:0] icmp_ln88_reg_312_pp0_iter1_reg;
reg   [0:0] icmp_ln88_reg_312_pp0_iter2_reg;
wire   [4:0] i_fu_154_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [55:0] mul_ln1192_fu_169_p2;
reg   [55:0] mul_ln1192_reg_326;
reg    ap_enable_reg_pp0_iter3;
wire   [36:0] select_ln1148_fu_246_p3;
reg   [36:0] select_ln1148_reg_336;
wire    ap_CS_fsm_state6;
wire   [28:0] grp_sqrt_fixed_42_26_s_fu_139_ap_return;
reg   [28:0] agg_result_V_i_reg_341;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire   [71:0] zext_ln1118_fu_263_p1;
reg   [71:0] zext_ln1118_reg_351;
wire    ap_CS_fsm_state62;
wire   [0:0] icmp_ln93_fu_267_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln93_reg_356_pp1_iter2_reg;
reg   [0:0] icmp_ln93_reg_356_pp1_iter3_reg;
reg   [0:0] icmp_ln93_reg_356_pp1_iter4_reg;
reg   [0:0] icmp_ln93_reg_356_pp1_iter5_reg;
reg   [0:0] icmp_ln93_reg_356_pp1_iter6_reg;
reg   [0:0] icmp_ln93_reg_356_pp1_iter7_reg;
wire   [4:0] i_1_fu_273_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [3:0] input_0_V_addr_1_reg_370;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter1_reg;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter2_reg;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter3_reg;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter4_reg;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter5_reg;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter6_reg;
reg   [3:0] input_0_V_addr_1_reg_370_pp1_iter7_reg;
reg   [39:0] weight_V_load_reg_376;
wire  signed [71:0] mul_ln1118_fu_288_p2;
reg  signed [71:0] mul_ln1118_reg_381;
reg   [39:0] trunc_ln3_reg_391;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state63;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln89_fu_160_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln94_fu_279_p1;
wire    ap_block_pp1_stage0;
wire  signed [39:0] mul_ln1192_fu_169_p0;
wire  signed [55:0] sext_ln1118_1_fu_165_p1;
wire  signed [39:0] mul_ln1192_fu_169_p1;
wire   [55:0] lhs_V_fu_175_p3;
wire   [55:0] ret_V_fu_183_p2;
wire   [39:0] sub_ln1148_fu_206_p2;
wire   [35:0] tmp_53_fu_212_p4;
wire   [36:0] zext_ln1148_fu_222_p1;
wire   [35:0] tmp_54_fu_232_p4;
wire   [0:0] tmp_71_fu_198_p3;
wire   [36:0] sub_ln1148_1_fu_226_p2;
wire   [36:0] zext_ln1148_1_fu_242_p1;
wire   [28:0] grp_fu_257_p1;
wire   [32:0] grp_fu_257_p2;
wire  signed [39:0] mul_ln1118_fu_288_p0;
wire   [32:0] mul_ln1118_fu_288_p1;
wire   [71:0] grp_fu_297_p2;
reg    grp_fu_257_ap_start;
wire    grp_fu_257_ap_done;
wire    ap_CS_fsm_state72;
reg   [60:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [32:0] grp_fu_257_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
end

sqrt_fixed_42_26_s grp_sqrt_fixed_42_26_s_fu_139(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(select_ln1148_reg_336),
    .ap_return(grp_sqrt_fixed_42_26_s_fu_139_ap_return)
);

dut_udiv_33s_29nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 33 ))
dut_udiv_33s_29nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_257_ap_start),
    .done(grp_fu_257_ap_done),
    .din0(33'd4294967296),
    .din1(grp_fu_257_p1),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

dut_mul_72s_40s_7cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 72 ))
dut_mul_72s_40s_7cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln1118_reg_381),
    .din1(reg_144),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state63) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state63)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state63);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end else if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_enable_reg_pp1_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_fu_267_p2 == 1'd0))) begin
        i1_0_reg_128 <= i_1_fu_273_p2;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        i1_0_reg_128 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_117 <= i_fu_154_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_117 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln88_reg_312_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_105 <= {{ret_V_fu_183_p2[55:16]}};
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_105 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        agg_result_V_i_reg_341 <= grp_sqrt_fixed_42_26_s_fu_139_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln88_reg_312 <= icmp_ln88_fu_148_p2;
        icmp_ln88_reg_312_pp0_iter1_reg <= icmp_ln88_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln88_reg_312_pp0_iter2_reg <= icmp_ln88_reg_312_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln93_reg_356 <= icmp_ln93_fu_267_p2;
        icmp_ln93_reg_356_pp1_iter1_reg <= icmp_ln93_reg_356;
        input_0_V_addr_1_reg_370_pp1_iter1_reg <= input_0_V_addr_1_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln93_reg_356_pp1_iter2_reg <= icmp_ln93_reg_356_pp1_iter1_reg;
        icmp_ln93_reg_356_pp1_iter3_reg <= icmp_ln93_reg_356_pp1_iter2_reg;
        icmp_ln93_reg_356_pp1_iter4_reg <= icmp_ln93_reg_356_pp1_iter3_reg;
        icmp_ln93_reg_356_pp1_iter5_reg <= icmp_ln93_reg_356_pp1_iter4_reg;
        icmp_ln93_reg_356_pp1_iter6_reg <= icmp_ln93_reg_356_pp1_iter5_reg;
        icmp_ln93_reg_356_pp1_iter7_reg <= icmp_ln93_reg_356_pp1_iter6_reg;
        input_0_V_addr_1_reg_370_pp1_iter2_reg <= input_0_V_addr_1_reg_370_pp1_iter1_reg;
        input_0_V_addr_1_reg_370_pp1_iter3_reg <= input_0_V_addr_1_reg_370_pp1_iter2_reg;
        input_0_V_addr_1_reg_370_pp1_iter4_reg <= input_0_V_addr_1_reg_370_pp1_iter3_reg;
        input_0_V_addr_1_reg_370_pp1_iter5_reg <= input_0_V_addr_1_reg_370_pp1_iter4_reg;
        input_0_V_addr_1_reg_370_pp1_iter6_reg <= input_0_V_addr_1_reg_370_pp1_iter5_reg;
        input_0_V_addr_1_reg_370_pp1_iter7_reg <= input_0_V_addr_1_reg_370_pp1_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_fu_267_p2 == 1'd0))) begin
        input_0_V_addr_1_reg_370 <= zext_ln94_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_reg_356_pp1_iter1_reg == 1'd0))) begin
        mul_ln1118_reg_381 <= mul_ln1118_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_reg_312_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1192_reg_326 <= mul_ln1192_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_reg_356_pp1_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_312 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_144 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln1148_reg_336 <= select_ln1148_fu_246_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_reg_356_pp1_iter6_reg == 1'd0))) begin
        trunc_ln3_reg_391 <= {{grp_fu_297_p2[71:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_reg_356 == 1'd0))) begin
        weight_V_load_reg_376 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        zext_ln1118_reg_351[32 : 0] <= zext_ln1118_fu_263_p1[32 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln88_fu_148_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_267_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state63 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state63 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_257_ap_start = 1'b1;
    end else begin
        grp_fu_257_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_0_V_address0 = input_0_V_addr_1_reg_370;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_V_address0 = zext_ln89_fu_160_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_0_V_ce1 = 1'b1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln93_reg_356_pp1_iter7_reg == 1'd0))) begin
        input_0_V_we1 = 1'b1;
    end else begin
        input_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln88_fu_148_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln88_fu_148_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln93_fu_267_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter7 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter7 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter8 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln93_fu_267_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd60];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_fu_257_p1 = grp_fu_257_p10;

assign grp_fu_257_p10 = agg_result_V_i_reg_341;

assign i_1_fu_273_p2 = (i1_0_reg_128 + 5'd1);

assign i_fu_154_p2 = (i_0_reg_117 + 5'd1);

assign icmp_ln88_fu_148_p2 = ((i_0_reg_117 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_267_p2 = ((i1_0_reg_128 == 5'd16) ? 1'b1 : 1'b0);

assign input_0_V_address1 = input_0_V_addr_1_reg_370_pp1_iter7_reg;

assign input_0_V_d1 = trunc_ln3_reg_391;

assign lhs_V_fu_175_p3 = {{p_Val2_s_reg_105}, {16'd0}};

assign mul_ln1118_fu_288_p0 = weight_V_load_reg_376;

assign mul_ln1118_fu_288_p1 = zext_ln1118_reg_351;

assign mul_ln1118_fu_288_p2 = ($signed(mul_ln1118_fu_288_p0) * $signed({{1'b0}, {mul_ln1118_fu_288_p1}}));

assign mul_ln1192_fu_169_p0 = sext_ln1118_1_fu_165_p1;

assign mul_ln1192_fu_169_p1 = sext_ln1118_1_fu_165_p1;

assign mul_ln1192_fu_169_p2 = ($signed(mul_ln1192_fu_169_p0) * $signed(mul_ln1192_fu_169_p1));

assign ret_V_fu_183_p2 = (mul_ln1192_reg_326 + lhs_V_fu_175_p3);

assign select_ln1148_fu_246_p3 = ((tmp_71_fu_198_p3[0:0] === 1'b1) ? sub_ln1148_1_fu_226_p2 : zext_ln1148_1_fu_242_p1);

assign sext_ln1118_1_fu_165_p1 = reg_144;

assign sub_ln1148_1_fu_226_p2 = (37'd0 - zext_ln1148_fu_222_p1);

assign sub_ln1148_fu_206_p2 = (40'd0 - p_Val2_s_reg_105);

assign tmp_53_fu_212_p4 = {{sub_ln1148_fu_206_p2[39:4]}};

assign tmp_54_fu_232_p4 = {{p_Val2_s_reg_105[39:4]}};

assign tmp_71_fu_198_p3 = p_Val2_s_reg_105[32'd39];

assign weight_V_address0 = zext_ln94_fu_279_p1;

assign zext_ln1118_fu_263_p1 = grp_fu_257_p2;

assign zext_ln1148_1_fu_242_p1 = tmp_54_fu_232_p4;

assign zext_ln1148_fu_222_p1 = tmp_53_fu_212_p4;

assign zext_ln89_fu_160_p1 = i_0_reg_117;

assign zext_ln94_fu_279_p1 = i1_0_reg_128;

always @ (posedge ap_clk) begin
    zext_ln1118_reg_351[71:33] <= 39'b000000000000000000000000000000000000000;
end

endmodule //rms_norm_16_s
