// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=1637,HLS_SYN_TPT=none,HLS_SYN_MEM=47,HLS_SYN_DSP=90,HLS_SYN_FF=43695,HLS_SYN_LUT=42235,HLS_VERSION=2019_2}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [31:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_223_p2;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [4:0] add_ln26_fu_229_p2;
reg    ap_block_state2;
wire   [4:0] add_ln58_fu_261_p2;
reg   [4:0] add_ln58_reg_296;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln58_fu_255_p2;
reg   [3:0] input_0_V_address0;
reg    input_0_V_ce0;
reg    input_0_V_we0;
wire   [39:0] input_0_V_d0;
wire   [39:0] input_0_V_q0;
reg    input_0_V_ce1;
reg    input_0_V_we1;
wire   [39:0] input_0_V_q1;
reg   [3:0] output_0_address0;
reg    output_0_ce0;
reg    output_0_we0;
wire   [39:0] output_0_q0;
reg    output_0_ce1;
reg    output_0_we1;
wire    grp_attention_fu_167_ap_start;
wire    grp_attention_fu_167_ap_done;
wire    grp_attention_fu_167_ap_idle;
wire    grp_attention_fu_167_ap_ready;
wire   [3:0] grp_attention_fu_167_hidden_states_0_V_address0;
wire    grp_attention_fu_167_hidden_states_0_V_ce0;
wire   [3:0] grp_attention_fu_167_hidden_states_0_V_address1;
wire    grp_attention_fu_167_hidden_states_0_V_ce1;
wire    grp_attention_fu_167_hidden_states_0_V_we1;
wire   [39:0] grp_attention_fu_167_hidden_states_0_V_d1;
wire   [3:0] grp_attention_fu_167_final_output_0_V_address0;
wire    grp_attention_fu_167_final_output_0_V_ce0;
wire    grp_attention_fu_167_final_output_0_V_we0;
wire   [39:0] grp_attention_fu_167_final_output_0_V_d0;
wire   [3:0] grp_attention_fu_167_final_output_0_V_address1;
wire    grp_attention_fu_167_final_output_0_V_ce1;
wire    grp_attention_fu_167_final_output_0_V_we1;
wire   [39:0] grp_attention_fu_167_final_output_0_V_d1;
reg   [4:0] j_0_0_reg_145;
reg   [4:0] j9_0_0_reg_156;
wire    ap_CS_fsm_state3;
reg    grp_attention_fu_167_ap_start_reg;
reg    ap_block_state2_ignore_call0;
wire   [63:0] zext_ln27_fu_235_p1;
wire   [63:0] zext_ln59_fu_267_p1;
wire   [29:0] trunc_ln_fu_240_p4;
wire   [29:0] trunc_ln731_fu_272_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_attention_fu_167_ap_start_reg = 1'b0;
end

dut_input_0_V #(
    .DataWidth( 40 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
input_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_0_V_address0),
    .ce0(input_0_V_ce0),
    .we0(input_0_V_we0),
    .d0(input_0_V_d0),
    .q0(input_0_V_q0),
    .address1(grp_attention_fu_167_hidden_states_0_V_address1),
    .ce1(input_0_V_ce1),
    .we1(input_0_V_we1),
    .d1(grp_attention_fu_167_hidden_states_0_V_d1),
    .q1(input_0_V_q1)
);

dut_output_0 #(
    .DataWidth( 40 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
output_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_0_address0),
    .ce0(output_0_ce0),
    .we0(output_0_we0),
    .d0(grp_attention_fu_167_final_output_0_V_d0),
    .q0(output_0_q0),
    .address1(grp_attention_fu_167_final_output_0_V_address1),
    .ce1(output_0_ce1),
    .we1(output_0_we1),
    .d1(grp_attention_fu_167_final_output_0_V_d1)
);

attention grp_attention_fu_167(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_attention_fu_167_ap_start),
    .ap_done(grp_attention_fu_167_ap_done),
    .ap_idle(grp_attention_fu_167_ap_idle),
    .ap_ready(grp_attention_fu_167_ap_ready),
    .hidden_states_0_V_address0(grp_attention_fu_167_hidden_states_0_V_address0),
    .hidden_states_0_V_ce0(grp_attention_fu_167_hidden_states_0_V_ce0),
    .hidden_states_0_V_q0(input_0_V_q0),
    .hidden_states_0_V_address1(grp_attention_fu_167_hidden_states_0_V_address1),
    .hidden_states_0_V_ce1(grp_attention_fu_167_hidden_states_0_V_ce1),
    .hidden_states_0_V_we1(grp_attention_fu_167_hidden_states_0_V_we1),
    .hidden_states_0_V_d1(grp_attention_fu_167_hidden_states_0_V_d1),
    .hidden_states_0_V_q1(input_0_V_q1),
    .final_output_0_V_address0(grp_attention_fu_167_final_output_0_V_address0),
    .final_output_0_V_ce0(grp_attention_fu_167_final_output_0_V_ce0),
    .final_output_0_V_we0(grp_attention_fu_167_final_output_0_V_we0),
    .final_output_0_V_d0(grp_attention_fu_167_final_output_0_V_d0),
    .final_output_0_V_q0(output_0_q0),
    .final_output_0_V_address1(grp_attention_fu_167_final_output_0_V_address1),
    .final_output_0_V_ce1(grp_attention_fu_167_final_output_0_V_ce1),
    .final_output_0_V_we1(grp_attention_fu_167_final_output_0_V_we1),
    .final_output_0_V_d1(grp_attention_fu_167_final_output_0_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_attention_fu_167_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_attention_fu_167_ap_start_reg <= 1'b1;
        end else if ((grp_attention_fu_167_ap_ready == 1'b1)) begin
            grp_attention_fu_167_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_attention_fu_167_ap_done == 1'b1))) begin
        j9_0_0_reg_156 <= 5'd0;
    end else if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        j9_0_0_reg_156 <= add_ln58_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_0_reg_145 <= 5'd0;
    end else if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_0_reg_145 <= add_ln26_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln58_reg_296 <= add_ln58_fu_261_p2;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_0_V_address0 = zext_ln27_fu_235_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_V_address0 = grp_attention_fu_167_hidden_states_0_V_address0;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_0_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_V_ce0 = grp_attention_fu_167_hidden_states_0_V_ce0;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_V_ce1 = grp_attention_fu_167_hidden_states_0_V_ce1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_0_V_we0 = 1'b1;
    end else begin
        input_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_V_we1 = grp_attention_fu_167_hidden_states_0_V_we1;
    end else begin
        input_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_address0 = zext_ln59_fu_267_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_address0 = grp_attention_fu_167_final_output_0_V_address0;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_ce0 = grp_attention_fu_167_final_output_0_V_ce0;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_ce1 = grp_attention_fu_167_final_output_0_V_ce1;
    end else begin
        output_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_we0 = grp_attention_fu_167_final_output_0_V_we0;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_0_we1 = grp_attention_fu_167_final_output_0_V_we1;
    end else begin
        output_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln26_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_attention_fu_167_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln58_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_229_p2 = (j_0_0_reg_145 + 5'd1);

assign add_ln58_fu_261_p2 = (j9_0_0_reg_156 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2 = ((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((icmp_ln26_fu_223_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

assign grp_attention_fu_167_ap_start = grp_attention_fu_167_ap_start_reg;

assign icmp_ln26_fu_223_p2 = ((j_0_0_reg_145 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_255_p2 = ((j9_0_0_reg_156 == 5'd16) ? 1'b1 : 1'b0);

assign input_0_V_d0 = $signed(trunc_ln_fu_240_p4);

assign strm_out_V_V_din = {{trunc_ln731_fu_272_p1}, {2'd0}};

assign trunc_ln731_fu_272_p1 = output_0_q0[29:0];

assign trunc_ln_fu_240_p4 = {{strm_in_V_V_dout[31:2]}};

assign zext_ln27_fu_235_p1 = j_0_0_reg_145;

assign zext_ln59_fu_267_p1 = j9_0_0_reg_156;

endmodule //dut
