// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantize_activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        output_states_0_V_address0,
        output_states_0_V_ce0,
        output_states_0_V_we0,
        output_states_0_V_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_state27 = 52'd67108864;
parameter    ap_ST_fsm_state28 = 52'd134217728;
parameter    ap_ST_fsm_state29 = 52'd268435456;
parameter    ap_ST_fsm_state30 = 52'd536870912;
parameter    ap_ST_fsm_state31 = 52'd1073741824;
parameter    ap_ST_fsm_state32 = 52'd2147483648;
parameter    ap_ST_fsm_state33 = 52'd4294967296;
parameter    ap_ST_fsm_state34 = 52'd8589934592;
parameter    ap_ST_fsm_state35 = 52'd17179869184;
parameter    ap_ST_fsm_state36 = 52'd34359738368;
parameter    ap_ST_fsm_state37 = 52'd68719476736;
parameter    ap_ST_fsm_state38 = 52'd137438953472;
parameter    ap_ST_fsm_state39 = 52'd274877906944;
parameter    ap_ST_fsm_state40 = 52'd549755813888;
parameter    ap_ST_fsm_state41 = 52'd1099511627776;
parameter    ap_ST_fsm_state42 = 52'd2199023255552;
parameter    ap_ST_fsm_state43 = 52'd4398046511104;
parameter    ap_ST_fsm_state44 = 52'd8796093022208;
parameter    ap_ST_fsm_state45 = 52'd17592186044416;
parameter    ap_ST_fsm_state46 = 52'd35184372088832;
parameter    ap_ST_fsm_state47 = 52'd70368744177664;
parameter    ap_ST_fsm_state48 = 52'd140737488355328;
parameter    ap_ST_fsm_state49 = 52'd281474976710656;
parameter    ap_ST_fsm_state50 = 52'd562949953421312;
parameter    ap_ST_fsm_state51 = 52'd1125899906842624;
parameter    ap_ST_fsm_state52 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_V_address0;
output   input_0_V_ce0;
input  [39:0] input_0_V_q0;
output  [10:0] output_states_0_V_address0;
output   output_states_0_V_ce0;
output   output_states_0_V_we0;
output  [7:0] output_states_0_V_d0;
output  [39:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_0_V_address0;
reg input_0_V_ce0;
reg output_states_0_V_ce0;
reg output_states_0_V_we0;

(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] add_ln129_fu_140_p2;
reg   [10:0] add_ln129_reg_347;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln129_fu_134_p2;
wire   [39:0] p_Val2_8_fu_171_p3;
reg   [39:0] p_Val2_8_reg_357;
wire    ap_CS_fsm_state3;
wire   [39:0] select_ln102_fu_184_p3;
wire    ap_CS_fsm_state4;
wire   [39:0] grp_fu_151_p2;
reg   [39:0] udiv_ln1148_reg_368;
wire    ap_CS_fsm_state47;
wire   [55:0] zext_ln136_fu_191_p1;
reg   [55:0] zext_ln136_reg_372;
wire   [10:0] add_ln136_fu_201_p2;
reg   [10:0] add_ln136_reg_380;
wire    ap_CS_fsm_state48;
wire   [63:0] zext_ln137_fu_207_p1;
reg   [63:0] zext_ln137_reg_385;
wire   [0:0] icmp_ln136_fu_195_p2;
reg   [39:0] input_0_V_load_reg_395;
wire    ap_CS_fsm_state49;
reg   [39:0] p_Val2_7_reg_400;
wire    ap_CS_fsm_state50;
wire   [23:0] select_ln850_fu_290_p3;
reg   [23:0] select_ln850_reg_406;
wire    ap_CS_fsm_state51;
reg   [16:0] tmp_78_reg_412;
reg   [39:0] p_0_0_reg_100;
reg   [10:0] j_0_0_reg_112;
reg   [10:0] j1_0_0_reg_123;
wire    ap_CS_fsm_state52;
wire   [63:0] zext_ln130_fu_146_p1;
wire   [0:0] tmp_76_fu_157_p3;
wire   [39:0] sub_ln703_fu_165_p2;
wire   [0:0] icmp_ln1494_fu_179_p2;
wire   [39:0] mul_ln1118_fu_215_p0;
wire  signed [39:0] mul_ln1118_fu_215_p1;
wire   [55:0] mul_ln1118_fu_215_p2;
wire   [0:0] icmp_ln1494_26_fu_230_p2;
wire   [39:0] select_ln109_fu_235_p3;
wire   [39:0] add_ln109_fu_243_p2;
wire   [15:0] trunc_ln851_fu_266_p1;
wire   [23:0] p_Result_s_fu_248_p4;
wire   [0:0] icmp_ln851_fu_270_p2;
wire   [23:0] add_ln700_fu_276_p2;
wire   [0:0] tmp_77_fu_258_p3;
wire   [23:0] select_ln851_fu_282_p3;
wire   [0:0] icmp_ln887_fu_308_p2;
wire   [0:0] icmp_ln895_fu_313_p2;
wire   [0:0] or_ln887_fu_329_p2;
wire   [7:0] select_ln887_fu_321_p3;
wire   [7:0] trunc_ln138_fu_318_p1;
reg    grp_fu_151_ap_start;
wire    grp_fu_151_ap_done;
reg   [51:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
end

dut_udiv_40ns_40nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 44 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 40 ))
dut_udiv_40ns_40nfYi_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_151_ap_start),
    .done(grp_fu_151_ap_done),
    .din0(40'd545460846592),
    .din1(p_0_0_reg_100),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j1_0_0_reg_123 <= add_ln136_reg_380;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        j1_0_0_reg_123 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_0_reg_112 <= add_ln129_reg_347;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_112 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0_0_reg_100 <= select_ln102_fu_184_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_0_reg_100 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln129_reg_347 <= add_ln129_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        add_ln136_reg_380 <= add_ln136_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        input_0_V_load_reg_395 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        p_Val2_7_reg_400 <= {{mul_ln1118_fu_215_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_8_reg_357 <= p_Val2_8_fu_171_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        select_ln850_reg_406 <= select_ln850_fu_290_p3;
        tmp_78_reg_412 <= {{select_ln850_fu_290_p3[23:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        udiv_ln1148_reg_368 <= grp_fu_151_p2;
        zext_ln136_reg_372[39 : 0] <= zext_ln136_fu_191_p1[39 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln136_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
        zext_ln137_reg_385[10 : 0] <= zext_ln137_fu_207_p1[10 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state48) & (icmp_ln136_fu_195_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln136_fu_195_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_151_ap_start = 1'b1;
    end else begin
        grp_fu_151_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        input_0_V_address0 = zext_ln137_fu_207_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_0_V_address0 = zext_ln130_fu_146_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state48))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        output_states_0_V_ce0 = 1'b1;
    end else begin
        output_states_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        output_states_0_V_we0 = 1'b1;
    end else begin
        output_states_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln129_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (icmp_ln136_fu_195_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_243_p2 = (p_Val2_7_reg_400 + select_ln109_fu_235_p3);

assign add_ln129_fu_140_p2 = (j_0_0_reg_112 + 11'd1);

assign add_ln136_fu_201_p2 = (j1_0_0_reg_123 + 11'd1);

assign add_ln700_fu_276_p2 = (24'd1 + p_Result_s_fu_248_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_return = udiv_ln1148_reg_368;

assign icmp_ln129_fu_134_p2 = ((j_0_0_reg_112 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_195_p2 = ((j1_0_0_reg_123 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln1494_26_fu_230_p2 = (($signed(p_Val2_7_reg_400) > $signed(40'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_179_p2 = (($signed(p_0_0_reg_100) > $signed(p_Val2_8_reg_357)) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_270_p2 = ((trunc_ln851_fu_266_p1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_308_p2 = (($signed(select_ln850_reg_406) < $signed(24'd16777088)) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_313_p2 = (($signed(tmp_78_reg_412) > $signed(17'd0)) ? 1'b1 : 1'b0);

assign mul_ln1118_fu_215_p0 = zext_ln136_reg_372;

assign mul_ln1118_fu_215_p1 = input_0_V_load_reg_395;

assign mul_ln1118_fu_215_p2 = ($signed({{1'b0}, {mul_ln1118_fu_215_p0}}) * $signed(mul_ln1118_fu_215_p1));

assign or_ln887_fu_329_p2 = (icmp_ln895_fu_313_p2 | icmp_ln887_fu_308_p2);

assign output_states_0_V_address0 = zext_ln137_reg_385;

assign output_states_0_V_d0 = ((or_ln887_fu_329_p2[0:0] === 1'b1) ? select_ln887_fu_321_p3 : trunc_ln138_fu_318_p1);

assign p_Result_s_fu_248_p4 = {{add_ln109_fu_243_p2[39:16]}};

assign p_Val2_8_fu_171_p3 = ((tmp_76_fu_157_p3[0:0] === 1'b1) ? sub_ln703_fu_165_p2 : input_0_V_q0);

assign select_ln102_fu_184_p3 = ((icmp_ln1494_fu_179_p2[0:0] === 1'b1) ? p_0_0_reg_100 : p_Val2_8_reg_357);

assign select_ln109_fu_235_p3 = ((icmp_ln1494_26_fu_230_p2[0:0] === 1'b1) ? 40'd32768 : 40'd1099511595008);

assign select_ln850_fu_290_p3 = ((tmp_77_fu_258_p3[0:0] === 1'b1) ? select_ln851_fu_282_p3 : p_Result_s_fu_248_p4);

assign select_ln851_fu_282_p3 = ((icmp_ln851_fu_270_p2[0:0] === 1'b1) ? p_Result_s_fu_248_p4 : add_ln700_fu_276_p2);

assign select_ln887_fu_321_p3 = ((icmp_ln887_fu_308_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign sub_ln703_fu_165_p2 = (40'd0 - input_0_V_q0);

assign tmp_76_fu_157_p3 = input_0_V_q0[32'd39];

assign tmp_77_fu_258_p3 = add_ln109_fu_243_p2[32'd39];

assign trunc_ln138_fu_318_p1 = select_ln850_reg_406[7:0];

assign trunc_ln851_fu_266_p1 = add_ln109_fu_243_p2[15:0];

assign zext_ln130_fu_146_p1 = j_0_0_reg_112;

assign zext_ln136_fu_191_p1 = grp_fu_151_p2;

assign zext_ln137_fu_207_p1 = j1_0_0_reg_123;

always @ (posedge ap_clk) begin
    zext_ln136_reg_372[55:40] <= 16'b0000000000000000;
    zext_ln137_reg_385[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //quantize_activation
