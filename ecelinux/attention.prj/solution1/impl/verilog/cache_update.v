// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_in_0_V_address0,
        cache_in_0_V_ce0,
        cache_in_0_V_q0,
        cache_in_1_V_address0,
        cache_in_1_V_ce0,
        cache_in_1_V_q0,
        cache_in_2_V_address0,
        cache_in_2_V_ce0,
        cache_in_2_V_q0,
        cache_in_3_V_address0,
        cache_in_3_V_ce0,
        cache_in_3_V_q0,
        cache_out_0_V_address0,
        cache_out_0_V_ce0,
        cache_out_0_V_we0,
        cache_out_0_V_d0,
        cache_out_1_V_address0,
        cache_out_1_V_ce0,
        cache_out_1_V_we0,
        cache_out_1_V_d0,
        cache_out_2_V_address0,
        cache_out_2_V_ce0,
        cache_out_2_V_we0,
        cache_out_2_V_d0,
        cache_out_3_V_address0,
        cache_out_3_V_ce0,
        cache_out_3_V_we0,
        cache_out_3_V_d0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] cache_in_0_V_address0;
output   cache_in_0_V_ce0;
input  [39:0] cache_in_0_V_q0;
output  [2:0] cache_in_1_V_address0;
output   cache_in_1_V_ce0;
input  [39:0] cache_in_1_V_q0;
output  [2:0] cache_in_2_V_address0;
output   cache_in_2_V_ce0;
input  [39:0] cache_in_2_V_q0;
output  [2:0] cache_in_3_V_address0;
output   cache_in_3_V_ce0;
input  [39:0] cache_in_3_V_q0;
output  [3:0] cache_out_0_V_address0;
output   cache_out_0_V_ce0;
output   cache_out_0_V_we0;
output  [39:0] cache_out_0_V_d0;
output  [3:0] cache_out_1_V_address0;
output   cache_out_1_V_ce0;
output   cache_out_1_V_we0;
output  [39:0] cache_out_1_V_d0;
output  [3:0] cache_out_2_V_address0;
output   cache_out_2_V_ce0;
output   cache_out_2_V_we0;
output  [39:0] cache_out_2_V_d0;
output  [3:0] cache_out_3_V_address0;
output   cache_out_3_V_ce0;
output   cache_out_3_V_we0;
output  [39:0] cache_out_3_V_d0;
input  [39:0] p_read;
input  [39:0] p_read1;
input  [39:0] p_read2;
input  [39:0] p_read3;
input  [39:0] p_read4;
input  [39:0] p_read5;
input  [39:0] p_read6;
input  [39:0] p_read7;
input  [39:0] p_read8;
input  [39:0] p_read9;
input  [39:0] p_read10;
input  [39:0] p_read11;
input  [39:0] p_read12;
input  [39:0] p_read13;
input  [39:0] p_read14;
input  [39:0] p_read15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_in_0_V_ce0;
reg cache_in_1_V_ce0;
reg cache_in_2_V_ce0;
reg cache_in_3_V_ce0;
reg cache_out_0_V_ce0;
reg cache_out_0_V_we0;
reg cache_out_1_V_ce0;
reg cache_out_1_V_we0;
reg cache_out_2_V_ce0;
reg cache_out_2_V_we0;
reg cache_out_3_V_ce0;
reg cache_out_3_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_302;
reg   [2:0] i_0_reg_313;
reg   [1:0] j_0_reg_324;
wire   [0:0] icmp_ln236_fu_335_p2;
reg   [0:0] icmp_ln236_reg_601;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln236_fu_341_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln239_4_fu_359_p3;
reg   [1:0] select_ln239_4_reg_610;
wire   [2:0] select_ln239_5_fu_367_p3;
reg   [2:0] select_ln239_5_reg_615;
wire   [4:0] zext_ln239_1_fu_391_p1;
reg   [4:0] zext_ln239_1_reg_622;
wire   [39:0] tmp_6_fu_409_p6;
reg   [39:0] tmp_6_reg_647;
wire   [39:0] tmp_7_fu_419_p6;
reg   [39:0] tmp_7_reg_652;
wire   [39:0] tmp_8_fu_429_p6;
reg   [39:0] tmp_8_reg_657;
wire   [39:0] tmp_9_fu_439_p6;
reg   [39:0] tmp_9_reg_662;
wire   [1:0] j_fu_449_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [2:0] ap_phi_mux_i_0_phi_fu_317_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln239_2_fu_401_p1;
wire  signed [63:0] sext_ln203_fu_476_p1;
wire   [0:0] icmp_ln237_fu_353_p2;
wire   [2:0] i_fu_347_p2;
wire   [3:0] tmp_fu_375_p3;
wire   [4:0] zext_ln203_fu_383_p1;
wire   [4:0] add_ln239_fu_395_p2;
wire   [1:0] trunc_ln239_fu_387_p1;
wire   [4:0] tmp_55_fu_458_p3;
wire   [4:0] zext_ln239_fu_455_p1;
wire   [4:0] sub_ln203_fu_465_p2;
wire   [4:0] add_ln203_fu_471_p2;
wire   [0:0] icmp_ln239_fu_484_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U86(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(trunc_ln239_fu_387_p1),
    .dout(tmp_6_fu_409_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U87(
    .din0(p_read4),
    .din1(p_read5),
    .din2(p_read6),
    .din3(p_read7),
    .din4(trunc_ln239_fu_387_p1),
    .dout(tmp_7_fu_419_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U88(
    .din0(p_read8),
    .din1(p_read9),
    .din2(p_read10),
    .din3(p_read11),
    .din4(trunc_ln239_fu_387_p1),
    .dout(tmp_8_fu_429_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U89(
    .din0(p_read12),
    .din1(p_read13),
    .din2(p_read14),
    .din3(p_read15),
    .din4(trunc_ln239_fu_387_p1),
    .dout(tmp_9_fu_439_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_reg_601 == 1'd0))) begin
        i_0_reg_313 <= select_ln239_5_reg_615;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_313 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_fu_335_p2 == 1'd0))) begin
        indvar_flatten_reg_302 <= add_ln236_fu_341_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_302 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_fu_335_p2 == 1'd0))) begin
        j_0_reg_324 <= j_fu_449_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_324 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln236_reg_601 <= icmp_ln236_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_fu_335_p2 == 1'd0))) begin
        select_ln239_4_reg_610 <= select_ln239_4_fu_359_p3;
        tmp_6_reg_647 <= tmp_6_fu_409_p6;
        tmp_7_reg_652 <= tmp_7_fu_419_p6;
        tmp_8_reg_657 <= tmp_8_fu_429_p6;
        tmp_9_reg_662 <= tmp_9_fu_439_p6;
        zext_ln239_1_reg_622[1 : 0] <= zext_ln239_1_fu_391_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_fu_335_p2 == 1'd0))) begin
        select_ln239_5_reg_615 <= select_ln239_5_fu_367_p3;
    end
end

always @ (*) begin
    if ((icmp_ln236_fu_335_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln236_reg_601 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_317_p4 = select_ln239_5_reg_615;
    end else begin
        ap_phi_mux_i_0_phi_fu_317_p4 = i_0_reg_313;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_in_0_V_ce0 = 1'b1;
    end else begin
        cache_in_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_in_1_V_ce0 = 1'b1;
    end else begin
        cache_in_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_in_2_V_ce0 = 1'b1;
    end else begin
        cache_in_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_in_3_V_ce0 = 1'b1;
    end else begin
        cache_in_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_out_0_V_ce0 = 1'b1;
    end else begin
        cache_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_reg_601 == 1'd0))) begin
        cache_out_0_V_we0 = 1'b1;
    end else begin
        cache_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_out_1_V_ce0 = 1'b1;
    end else begin
        cache_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_reg_601 == 1'd0))) begin
        cache_out_1_V_we0 = 1'b1;
    end else begin
        cache_out_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_out_2_V_ce0 = 1'b1;
    end else begin
        cache_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_reg_601 == 1'd0))) begin
        cache_out_2_V_we0 = 1'b1;
    end else begin
        cache_out_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_out_3_V_ce0 = 1'b1;
    end else begin
        cache_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln236_reg_601 == 1'd0))) begin
        cache_out_3_V_we0 = 1'b1;
    end else begin
        cache_out_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln236_fu_335_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln236_fu_335_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_471_p2 = (zext_ln239_1_reg_622 + sub_ln203_fu_465_p2);

assign add_ln236_fu_341_p2 = (indvar_flatten_reg_302 + 4'd1);

assign add_ln239_fu_395_p2 = (zext_ln239_1_fu_391_p1 + zext_ln203_fu_383_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cache_in_0_V_address0 = zext_ln239_2_fu_401_p1;

assign cache_in_1_V_address0 = zext_ln239_2_fu_401_p1;

assign cache_in_2_V_address0 = zext_ln239_2_fu_401_p1;

assign cache_in_3_V_address0 = zext_ln239_2_fu_401_p1;

assign cache_out_0_V_address0 = sext_ln203_fu_476_p1;

assign cache_out_0_V_d0 = ((icmp_ln239_fu_484_p2[0:0] === 1'b1) ? tmp_6_reg_647 : cache_in_0_V_q0);

assign cache_out_1_V_address0 = sext_ln203_fu_476_p1;

assign cache_out_1_V_d0 = ((icmp_ln239_fu_484_p2[0:0] === 1'b1) ? tmp_7_reg_652 : cache_in_1_V_q0);

assign cache_out_2_V_address0 = sext_ln203_fu_476_p1;

assign cache_out_2_V_d0 = ((icmp_ln239_fu_484_p2[0:0] === 1'b1) ? tmp_8_reg_657 : cache_in_2_V_q0);

assign cache_out_3_V_address0 = sext_ln203_fu_476_p1;

assign cache_out_3_V_d0 = ((icmp_ln239_fu_484_p2[0:0] === 1'b1) ? tmp_9_reg_662 : cache_in_3_V_q0);

assign i_fu_347_p2 = (3'd1 + ap_phi_mux_i_0_phi_fu_317_p4);

assign icmp_ln236_fu_335_p2 = ((indvar_flatten_reg_302 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_353_p2 = ((j_0_reg_324 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_484_p2 = ((select_ln239_4_reg_610 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_449_p2 = (2'd1 + select_ln239_4_fu_359_p3);

assign select_ln239_4_fu_359_p3 = ((icmp_ln237_fu_353_p2[0:0] === 1'b1) ? 2'd0 : j_0_reg_324);

assign select_ln239_5_fu_367_p3 = ((icmp_ln237_fu_353_p2[0:0] === 1'b1) ? i_fu_347_p2 : ap_phi_mux_i_0_phi_fu_317_p4);

assign sext_ln203_fu_476_p1 = $signed(add_ln203_fu_471_p2);

assign sub_ln203_fu_465_p2 = (tmp_55_fu_458_p3 - zext_ln239_fu_455_p1);

assign tmp_55_fu_458_p3 = {{select_ln239_5_reg_615}, {2'd0}};

assign tmp_fu_375_p3 = {{select_ln239_5_fu_367_p3}, {1'd0}};

assign trunc_ln239_fu_387_p1 = select_ln239_5_fu_367_p3[1:0];

assign zext_ln203_fu_383_p1 = tmp_fu_375_p3;

assign zext_ln239_1_fu_391_p1 = select_ln239_4_fu_359_p3;

assign zext_ln239_2_fu_401_p1 = add_ln239_fu_395_p2;

assign zext_ln239_fu_455_p1 = select_ln239_5_reg_615;

always @ (posedge ap_clk) begin
    zext_ln239_1_reg_622[4:2] <= 3'b000;
end

endmodule //cache_update
