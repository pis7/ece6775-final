// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_in_V_address0,
        cache_in_V_ce0,
        cache_in_V_q0,
        cache_out_0_V_address0,
        cache_out_0_V_ce0,
        cache_out_0_V_we0,
        cache_out_0_V_d0,
        cache_out_1_V_address0,
        cache_out_1_V_ce0,
        cache_out_1_V_we0,
        cache_out_1_V_d0,
        cache_out_2_V_address0,
        cache_out_2_V_ce0,
        cache_out_2_V_we0,
        cache_out_2_V_d0,
        cache_out_3_V_address0,
        cache_out_3_V_ce0,
        cache_out_3_V_we0,
        cache_out_3_V_d0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] cache_in_V_address0;
output   cache_in_V_ce0;
input  [31:0] cache_in_V_q0;
output  [3:0] cache_out_0_V_address0;
output   cache_out_0_V_ce0;
output   cache_out_0_V_we0;
output  [31:0] cache_out_0_V_d0;
output  [3:0] cache_out_1_V_address0;
output   cache_out_1_V_ce0;
output   cache_out_1_V_we0;
output  [31:0] cache_out_1_V_d0;
output  [3:0] cache_out_2_V_address0;
output   cache_out_2_V_ce0;
output   cache_out_2_V_we0;
output  [31:0] cache_out_2_V_d0;
output  [3:0] cache_out_3_V_address0;
output   cache_out_3_V_ce0;
output   cache_out_3_V_we0;
output  [31:0] cache_out_3_V_d0;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_in_V_ce0;
reg cache_out_0_V_ce0;
reg cache_out_0_V_we0;
reg[31:0] cache_out_0_V_d0;
reg cache_out_1_V_ce0;
reg cache_out_1_V_we0;
reg[31:0] cache_out_1_V_d0;
reg cache_out_2_V_ce0;
reg cache_out_2_V_we0;
reg[31:0] cache_out_2_V_d0;
reg cache_out_3_V_ce0;
reg cache_out_3_V_we0;
reg[31:0] cache_out_3_V_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_290_p2;
reg   [2:0] i_reg_532;
wire    ap_CS_fsm_state2;
wire   [4:0] zext_ln203_4_fu_308_p1;
reg   [4:0] zext_ln203_4_reg_537;
wire   [0:0] icmp_ln231_fu_284_p2;
wire   [4:0] sub_ln203_fu_320_p2;
reg   [4:0] sub_ln203_reg_542;
wire   [1:0] trunc_ln203_fu_326_p1;
reg   [1:0] trunc_ln203_reg_547;
wire   [1:0] j_fu_336_p2;
reg   [1:0] j_reg_555;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln234_fu_342_p2;
reg   [0:0] icmp_ln234_reg_560;
wire   [0:0] icmp_ln232_fu_330_p2;
wire   [6:0] tmp_15_cast_fu_357_p3;
reg   [6:0] tmp_15_cast_reg_564;
reg   [3:0] cache_out_0_V_addr_reg_569;
reg   [3:0] cache_out_1_V_addr_reg_574;
reg   [3:0] cache_out_2_V_addr_reg_579;
reg   [3:0] cache_out_3_V_addr_reg_584;
wire   [2:0] k_fu_384_p2;
reg   [2:0] k_reg_592;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln233_fu_378_p2;
wire   [1:0] trunc_ln203_2_fu_404_p1;
reg   [1:0] trunc_ln203_2_reg_602;
reg   [2:0] i_0_reg_251;
reg   [1:0] j_0_reg_262;
reg   [2:0] k_0_reg_273;
wire    ap_CS_fsm_state5;
wire  signed [63:0] sext_ln203_fu_370_p1;
wire   [63:0] zext_ln203_7_fu_399_p1;
wire   [1:0] trunc_ln203_1_fu_408_p1;
wire   [31:0] tmp_9_fu_423_p18;
wire   [3:0] tmp_2_fu_300_p3;
wire   [4:0] tmp_3_fu_312_p3;
wire   [4:0] zext_ln203_3_fu_296_p1;
wire   [4:0] zext_ln203_5_fu_348_p1;
wire   [4:0] add_ln203_fu_352_p2;
wire   [4:0] add_ln203_1_fu_365_p2;
wire   [6:0] zext_ln203_6_fu_390_p1;
wire   [6:0] add_ln203_2_fu_394_p2;
wire   [3:0] tmp_1_fu_412_p3;
wire   [4:0] tmp_9_fu_423_p17;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

dut_mux_165_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
dut_mux_165_32_1_1_U73(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(p_read4),
    .din5(p_read5),
    .din6(p_read6),
    .din7(p_read7),
    .din8(p_read8),
    .din9(p_read9),
    .din10(p_read10),
    .din11(p_read11),
    .din12(p_read12),
    .din13(p_read13),
    .din14(p_read14),
    .din15(p_read15),
    .din16(tmp_9_fu_423_p17),
    .dout(tmp_9_fu_423_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln232_fu_330_p2 == 1'd1))) begin
        i_0_reg_251 <= i_reg_532;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_251 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln233_fu_378_p2 == 1'd1))) begin
        j_0_reg_262 <= j_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln231_fu_284_p2 == 1'd0))) begin
        j_0_reg_262 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_273 <= k_reg_592;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln232_fu_330_p2 == 1'd0))) begin
        k_0_reg_273 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln232_fu_330_p2 == 1'd0))) begin
        cache_out_0_V_addr_reg_569 <= sext_ln203_fu_370_p1;
        cache_out_1_V_addr_reg_574 <= sext_ln203_fu_370_p1;
        cache_out_2_V_addr_reg_579 <= sext_ln203_fu_370_p1;
        cache_out_3_V_addr_reg_584 <= sext_ln203_fu_370_p1;
        icmp_ln234_reg_560 <= icmp_ln234_fu_342_p2;
        tmp_15_cast_reg_564[6 : 2] <= tmp_15_cast_fu_357_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_532 <= i_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_555 <= j_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_592 <= k_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln231_fu_284_p2 == 1'd0))) begin
        sub_ln203_reg_542 <= sub_ln203_fu_320_p2;
        trunc_ln203_reg_547 <= trunc_ln203_fu_326_p1;
        zext_ln203_4_reg_537[3 : 1] <= zext_ln203_4_fu_308_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln233_fu_378_p2 == 1'd0) & (icmp_ln234_reg_560 == 1'd0))) begin
        trunc_ln203_2_reg_602 <= trunc_ln203_2_fu_404_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln231_fu_284_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln231_fu_284_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_in_V_ce0 = 1'b1;
    end else begin
        cache_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        cache_out_0_V_ce0 = 1'b1;
    end else begin
        cache_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_0_V_d0 = cache_in_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_out_0_V_d0 = tmp_9_fu_423_p18;
    end else begin
        cache_out_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_2_reg_602 == 2'd0) & (icmp_ln234_reg_560 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (trunc_ln203_1_fu_408_p1 == 2'd0) & (icmp_ln234_reg_560 == 1'd1) & (icmp_ln233_fu_378_p2 == 1'd0)))) begin
        cache_out_0_V_we0 = 1'b1;
    end else begin
        cache_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        cache_out_1_V_ce0 = 1'b1;
    end else begin
        cache_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_1_V_d0 = cache_in_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_out_1_V_d0 = tmp_9_fu_423_p18;
    end else begin
        cache_out_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_2_reg_602 == 2'd1) & (icmp_ln234_reg_560 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (trunc_ln203_1_fu_408_p1 == 2'd1) & (icmp_ln234_reg_560 == 1'd1) & (icmp_ln233_fu_378_p2 == 1'd0)))) begin
        cache_out_1_V_we0 = 1'b1;
    end else begin
        cache_out_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        cache_out_2_V_ce0 = 1'b1;
    end else begin
        cache_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_2_V_d0 = cache_in_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_out_2_V_d0 = tmp_9_fu_423_p18;
    end else begin
        cache_out_2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_2_reg_602 == 2'd2) & (icmp_ln234_reg_560 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (trunc_ln203_1_fu_408_p1 == 2'd2) & (icmp_ln234_reg_560 == 1'd1) & (icmp_ln233_fu_378_p2 == 1'd0)))) begin
        cache_out_2_V_we0 = 1'b1;
    end else begin
        cache_out_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        cache_out_3_V_ce0 = 1'b1;
    end else begin
        cache_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_out_3_V_d0 = cache_in_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_out_3_V_d0 = tmp_9_fu_423_p18;
    end else begin
        cache_out_3_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_2_reg_602 == 2'd3) & (icmp_ln234_reg_560 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (trunc_ln203_1_fu_408_p1 == 2'd3) & (icmp_ln234_reg_560 == 1'd1) & (icmp_ln233_fu_378_p2 == 1'd0)))) begin
        cache_out_3_V_we0 = 1'b1;
    end else begin
        cache_out_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln231_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln232_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln233_fu_378_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_365_p2 = (zext_ln203_5_fu_348_p1 + sub_ln203_reg_542);

assign add_ln203_2_fu_394_p2 = (tmp_15_cast_reg_564 + zext_ln203_6_fu_390_p1);

assign add_ln203_fu_352_p2 = (zext_ln203_5_fu_348_p1 + zext_ln203_4_reg_537);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign cache_in_V_address0 = zext_ln203_7_fu_399_p1;

assign cache_out_0_V_address0 = cache_out_0_V_addr_reg_569;

assign cache_out_1_V_address0 = cache_out_1_V_addr_reg_574;

assign cache_out_2_V_address0 = cache_out_2_V_addr_reg_579;

assign cache_out_3_V_address0 = cache_out_3_V_addr_reg_584;

assign i_fu_290_p2 = (i_0_reg_251 + 3'd1);

assign icmp_ln231_fu_284_p2 = ((i_0_reg_251 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_330_p2 = ((j_0_reg_262 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_378_p2 = ((k_0_reg_273 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_342_p2 = ((j_0_reg_262 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_336_p2 = (j_0_reg_262 + 2'd1);

assign k_fu_384_p2 = (k_0_reg_273 + 3'd1);

assign sext_ln203_fu_370_p1 = $signed(add_ln203_1_fu_365_p2);

assign sub_ln203_fu_320_p2 = (tmp_3_fu_312_p3 - zext_ln203_3_fu_296_p1);

assign tmp_15_cast_fu_357_p3 = {{add_ln203_fu_352_p2}, {2'd0}};

assign tmp_1_fu_412_p3 = {{trunc_ln203_1_fu_408_p1}, {trunc_ln203_reg_547}};

assign tmp_2_fu_300_p3 = {{i_0_reg_251}, {1'd0}};

assign tmp_3_fu_312_p3 = {{i_0_reg_251}, {2'd0}};

assign tmp_9_fu_423_p17 = tmp_1_fu_412_p3;

assign trunc_ln203_1_fu_408_p1 = k_0_reg_273[1:0];

assign trunc_ln203_2_fu_404_p1 = k_0_reg_273[1:0];

assign trunc_ln203_fu_326_p1 = i_0_reg_251[1:0];

assign zext_ln203_3_fu_296_p1 = i_0_reg_251;

assign zext_ln203_4_fu_308_p1 = tmp_2_fu_300_p3;

assign zext_ln203_5_fu_348_p1 = j_0_reg_262;

assign zext_ln203_6_fu_390_p1 = k_0_reg_273;

assign zext_ln203_7_fu_399_p1 = add_ln203_2_fu_394_p2;

always @ (posedge ap_clk) begin
    zext_ln203_4_reg_537[0] <= 1'b0;
    zext_ln203_4_reg_537[4] <= 1'b0;
    tmp_15_cast_reg_564[1:0] <= 2'b00;
end

endmodule //cache_update
