// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cache_in_address0,
        cache_in_ce0,
        cache_in_q0,
        cache_out_V_address0,
        cache_out_V_ce0,
        cache_out_V_we0,
        cache_out_V_d0,
        update_0_V_address0,
        update_0_V_ce0,
        update_0_V_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] cache_in_address0;
output   cache_in_ce0;
input  [31:0] cache_in_q0;
output  [13:0] cache_out_V_address0;
output   cache_out_V_ce0;
output   cache_out_V_we0;
output  [39:0] cache_out_V_d0;
output  [10:0] update_0_V_address0;
output   update_0_V_ce0;
input  [39:0] update_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cache_in_ce0;
reg cache_out_V_ce0;
reg cache_out_V_we0;
reg update_0_V_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_197_p2;
reg   [4:0] i_reg_702;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln237_fu_219_p2;
reg   [7:0] add_ln237_reg_707;
wire   [0:0] icmp_ln234_fu_191_p2;
wire  signed [9:0] sext_ln203_fu_255_p1;
reg  signed [9:0] sext_ln203_reg_712;
wire   [11:0] sub_ln203_4_fu_279_p2;
reg   [11:0] sub_ln203_4_reg_717;
wire   [2:0] j_fu_291_p2;
reg   [2:0] j_reg_725;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln237_fu_297_p2;
reg   [0:0] icmp_ln237_reg_730;
wire   [0:0] icmp_ln235_fu_285_p2;
wire   [13:0] sub_ln237_fu_340_p2;
reg   [13:0] sub_ln237_reg_734;
wire   [14:0] sub_ln203_5_fu_371_p2;
reg   [14:0] sub_ln203_5_reg_739;
wire   [6:0] k_fu_383_p2;
reg   [6:0] k_reg_747;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln236_fu_377_p2;
reg   [13:0] cache_out_V_addr_reg_757;
reg   [31:0] cache_in_load_reg_767;
wire    ap_CS_fsm_state5;
wire   [53:0] man_V_4_fu_483_p3;
reg   [53:0] man_V_4_reg_773;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln571_fu_491_p2;
reg   [0:0] icmp_ln571_reg_778;
wire   [0:0] icmp_ln581_fu_503_p2;
reg   [0:0] icmp_ln581_reg_784;
wire  signed [11:0] sh_amt_fu_521_p3;
reg  signed [11:0] sh_amt_reg_790;
wire   [0:0] icmp_ln582_fu_529_p2;
reg   [0:0] icmp_ln582_reg_797;
wire   [39:0] trunc_ln583_fu_535_p1;
reg   [39:0] trunc_ln583_reg_803;
wire   [39:0] select_ln603_fu_653_p3;
reg   [39:0] select_ln603_reg_809;
wire    ap_CS_fsm_state7;
wire   [0:0] or_ln603_fu_661_p2;
reg   [0:0] or_ln603_reg_814;
wire   [39:0] select_ln603_4_fu_667_p3;
reg   [39:0] select_ln603_4_reg_819;
wire   [0:0] or_ln603_4_fu_680_p2;
reg   [0:0] or_ln603_4_reg_824;
wire    ap_CS_fsm_state9;
reg   [4:0] i_0_reg_144;
reg   [2:0] j_0_reg_155;
reg   [6:0] k_0_reg_166;
wire    ap_CS_fsm_state8;
wire   [39:0] select_ln603_6_fu_691_p3;
reg   [39:0] ap_phi_mux_storemerge_phi_fu_180_p4;
reg   [39:0] storemerge_reg_177;
wire   [63:0] zext_ln237_8_fu_406_p1;
wire   [63:0] zext_ln203_12_fu_416_p1;
wire  signed [63:0] sext_ln203_2_fu_426_p1;
wire   [6:0] tmp_60_fu_207_p3;
wire   [7:0] zext_ln237_fu_203_p1;
wire   [7:0] zext_ln237_1_fu_215_p1;
wire   [7:0] tmp_61_fu_225_p3;
wire   [5:0] tmp_62_fu_237_p3;
wire   [8:0] zext_ln203_fu_233_p1;
wire   [8:0] zext_ln203_10_fu_245_p1;
wire   [8:0] sub_ln203_fu_249_p2;
wire   [9:0] tmp_64_fu_267_p3;
wire   [11:0] tmp_63_fu_259_p3;
wire   [11:0] zext_ln203_11_fu_275_p1;
wire   [7:0] zext_ln237_3_fu_307_p1;
wire   [7:0] add_ln237_1_fu_311_p2;
wire   [6:0] trunc_ln237_fu_316_p1;
wire   [12:0] tmp_82_fu_328_p3;
wire   [13:0] p_shl7_cast_fu_320_p3;
wire   [13:0] zext_ln237_4_fu_336_p1;
wire   [9:0] zext_ln237_2_fu_303_p1;
wire   [9:0] add_ln203_fu_346_p2;
wire   [7:0] trunc_ln203_fu_351_p1;
wire   [14:0] p_shl5_cast_fu_355_p3;
wire   [14:0] p_shl6_cast_fu_363_p3;
wire   [13:0] zext_ln237_7_fu_397_p1;
wire   [13:0] add_ln237_2_fu_401_p2;
wire   [14:0] zext_ln237_6_fu_393_p1;
wire   [14:0] add_ln203_4_fu_411_p2;
wire   [11:0] zext_ln237_5_fu_389_p1;
wire   [11:0] add_ln203_5_fu_421_p2;
wire   [63:0] grp_fu_187_p1;
wire   [63:0] ireg_V_fu_431_p1;
wire   [10:0] exp_tmp_V_fu_447_p4;
wire   [51:0] trunc_ln565_fu_461_p1;
wire   [52:0] tmp_20_fu_465_p3;
wire   [53:0] p_Result_11_fu_473_p1;
wire   [0:0] p_Result_s_fu_439_p3;
wire   [53:0] man_V_3_fu_477_p2;
wire   [62:0] trunc_ln556_fu_435_p1;
wire   [11:0] zext_ln461_fu_457_p1;
wire   [11:0] F2_fu_497_p2;
wire   [11:0] add_ln581_fu_509_p2;
wire   [11:0] sub_ln581_fu_515_p2;
wire  signed [31:0] sext_ln581_fu_539_p1;
wire   [53:0] zext_ln586_fu_552_p1;
wire   [53:0] ashr_ln586_fu_556_p2;
wire   [31:0] bitcast_ln696_fu_565_p1;
wire   [0:0] tmp_84_fu_568_p3;
wire   [39:0] zext_ln604_fu_584_p1;
wire   [0:0] xor_ln571_fu_593_p2;
wire   [0:0] or_ln582_fu_603_p2;
wire   [0:0] xor_ln582_fu_607_p2;
wire   [0:0] icmp_ln585_fu_542_p2;
wire   [0:0] and_ln581_fu_613_p2;
wire   [0:0] xor_ln585_fu_618_p2;
wire   [0:0] or_ln581_fu_636_p2;
wire   [0:0] icmp_ln603_fu_547_p2;
wire   [0:0] xor_ln581_fu_641_p2;
wire   [0:0] and_ln603_fu_647_p2;
wire   [39:0] shl_ln604_fu_588_p2;
wire   [39:0] trunc_ln586_fu_561_p1;
wire   [0:0] and_ln585_2_fu_630_p2;
wire   [0:0] and_ln585_fu_624_p2;
wire   [39:0] select_ln588_fu_576_p3;
wire   [0:0] and_ln582_fu_598_p2;
wire   [0:0] or_ln603_3_fu_674_p2;
wire   [39:0] select_ln603_5_fu_686_p3;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

dut_fpext_32ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_fpext_32ns_64bkb_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cache_in_q0),
    .ce(1'b1),
    .dout(grp_fu_187_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln235_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_144 <= i_reg_702;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_144 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln236_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_155 <= j_reg_725;
    end else if (((icmp_ln234_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_155 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_0_reg_166 <= k_reg_747;
    end else if (((icmp_ln235_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_166 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        storemerge_reg_177 <= update_0_V_q0;
    end else if (((icmp_ln237_reg_730 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        storemerge_reg_177 <= select_ln603_6_fu_691_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln234_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln237_reg_707 <= add_ln237_fu_219_p2;
        sext_ln203_reg_712[9 : 1] <= sext_ln203_fu_255_p1[9 : 1];
        sub_ln203_4_reg_717[11 : 5] <= sub_ln203_4_fu_279_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cache_in_load_reg_767 <= cache_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln236_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        cache_out_V_addr_reg_757 <= zext_ln203_12_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_702 <= i_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln235_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln237_reg_730 <= icmp_ln237_fu_297_p2;
        sub_ln203_5_reg_739[14 : 5] <= sub_ln203_5_fu_371_p2[14 : 5];
        sub_ln237_reg_734[13 : 5] <= sub_ln237_fu_340_p2[13 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln571_reg_778 <= icmp_ln571_fu_491_p2;
        icmp_ln581_reg_784 <= icmp_ln581_fu_503_p2;
        icmp_ln582_reg_797 <= icmp_ln582_fu_529_p2;
        man_V_4_reg_773 <= man_V_4_fu_483_p3;
        sh_amt_reg_790 <= sh_amt_fu_521_p3;
        trunc_ln583_reg_803 <= trunc_ln583_fu_535_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_725 <= j_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_747 <= k_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln603_4_reg_824 <= or_ln603_4_fu_680_p2;
        or_ln603_reg_814 <= or_ln603_fu_661_p2;
        select_ln603_4_reg_819 <= select_ln603_4_fu_667_p3;
        select_ln603_reg_809 <= select_ln603_fu_653_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln234_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln237_reg_730 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_phi_mux_storemerge_phi_fu_180_p4 = select_ln603_6_fu_691_p3;
    end else begin
        ap_phi_mux_storemerge_phi_fu_180_p4 = storemerge_reg_177;
    end
end

always @ (*) begin
    if (((icmp_ln234_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cache_in_ce0 = 1'b1;
    end else begin
        cache_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cache_out_V_ce0 = 1'b1;
    end else begin
        cache_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cache_out_V_we0 = 1'b1;
    end else begin
        cache_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        update_0_V_ce0 = 1'b1;
    end else begin
        update_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln234_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln235_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln236_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((icmp_ln237_reg_730 == 1'd1) & (icmp_ln236_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_497_p2 = (12'd1075 - zext_ln461_fu_457_p1);

assign add_ln203_4_fu_411_p2 = (sub_ln203_5_reg_739 + zext_ln237_6_fu_393_p1);

assign add_ln203_5_fu_421_p2 = (sub_ln203_4_reg_717 + zext_ln237_5_fu_389_p1);

assign add_ln203_fu_346_p2 = ($signed(sext_ln203_reg_712) + $signed(zext_ln237_2_fu_303_p1));

assign add_ln237_1_fu_311_p2 = (add_ln237_reg_707 + zext_ln237_3_fu_307_p1);

assign add_ln237_2_fu_401_p2 = (sub_ln237_reg_734 + zext_ln237_7_fu_397_p1);

assign add_ln237_fu_219_p2 = (zext_ln237_fu_203_p1 + zext_ln237_1_fu_215_p1);

assign add_ln581_fu_509_p2 = ($signed(12'd4080) + $signed(F2_fu_497_p2));

assign and_ln581_fu_613_p2 = (xor_ln582_fu_607_p2 & icmp_ln581_reg_784);

assign and_ln582_fu_598_p2 = (xor_ln571_fu_593_p2 & icmp_ln582_reg_797);

assign and_ln585_2_fu_630_p2 = (icmp_ln585_fu_542_p2 & and_ln581_fu_613_p2);

assign and_ln585_fu_624_p2 = (xor_ln585_fu_618_p2 & and_ln581_fu_613_p2);

assign and_ln603_fu_647_p2 = (xor_ln581_fu_641_p2 & icmp_ln603_fu_547_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ashr_ln586_fu_556_p2 = $signed(man_V_4_reg_773) >>> zext_ln586_fu_552_p1;

assign bitcast_ln696_fu_565_p1 = cache_in_load_reg_767;

assign cache_in_address0 = zext_ln237_8_fu_406_p1;

assign cache_out_V_address0 = cache_out_V_addr_reg_757;

assign cache_out_V_d0 = ap_phi_mux_storemerge_phi_fu_180_p4;

assign exp_tmp_V_fu_447_p4 = {{ireg_V_fu_431_p1[62:52]}};

assign i_fu_197_p2 = (i_0_reg_144 + 5'd1);

assign icmp_ln234_fu_191_p2 = ((i_0_reg_144 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_285_p2 = ((j_0_reg_155 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_377_p2 = ((k_0_reg_166 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_297_p2 = ((j_0_reg_155 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_491_p2 = ((trunc_ln556_fu_435_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_503_p2 = (($signed(F2_fu_497_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_529_p2 = ((F2_fu_497_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_542_p2 = ((sh_amt_reg_790 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_547_p2 = ((sh_amt_reg_790 < 12'd40) ? 1'b1 : 1'b0);

assign ireg_V_fu_431_p1 = grp_fu_187_p1;

assign j_fu_291_p2 = (j_0_reg_155 + 3'd1);

assign k_fu_383_p2 = (k_0_reg_166 + 7'd1);

assign man_V_3_fu_477_p2 = (54'd0 - p_Result_11_fu_473_p1);

assign man_V_4_fu_483_p3 = ((p_Result_s_fu_439_p3[0:0] === 1'b1) ? man_V_3_fu_477_p2 : p_Result_11_fu_473_p1);

assign or_ln581_fu_636_p2 = (or_ln582_fu_603_p2 | icmp_ln581_reg_784);

assign or_ln582_fu_603_p2 = (icmp_ln582_reg_797 | icmp_ln571_reg_778);

assign or_ln603_3_fu_674_p2 = (and_ln585_fu_624_p2 | and_ln582_fu_598_p2);

assign or_ln603_4_fu_680_p2 = (or_ln603_fu_661_p2 | or_ln603_3_fu_674_p2);

assign or_ln603_fu_661_p2 = (and_ln603_fu_647_p2 | and_ln585_2_fu_630_p2);

assign p_Result_11_fu_473_p1 = tmp_20_fu_465_p3;

assign p_Result_s_fu_439_p3 = ireg_V_fu_431_p1[32'd63];

assign p_shl5_cast_fu_355_p3 = {{trunc_ln203_fu_351_p1}, {7'd0}};

assign p_shl6_cast_fu_363_p3 = {{add_ln203_fu_346_p2}, {5'd0}};

assign p_shl7_cast_fu_320_p3 = {{trunc_ln237_fu_316_p1}, {7'd0}};

assign select_ln588_fu_576_p3 = ((tmp_84_fu_568_p3[0:0] === 1'b1) ? 40'd1099511627775 : 40'd0);

assign select_ln603_4_fu_667_p3 = ((and_ln585_fu_624_p2[0:0] === 1'b1) ? select_ln588_fu_576_p3 : trunc_ln583_reg_803);

assign select_ln603_5_fu_686_p3 = ((or_ln603_reg_814[0:0] === 1'b1) ? select_ln603_reg_809 : select_ln603_4_reg_819);

assign select_ln603_6_fu_691_p3 = ((or_ln603_4_reg_824[0:0] === 1'b1) ? select_ln603_5_fu_686_p3 : 40'd0);

assign select_ln603_fu_653_p3 = ((and_ln603_fu_647_p2[0:0] === 1'b1) ? shl_ln604_fu_588_p2 : trunc_ln586_fu_561_p1);

assign sext_ln203_2_fu_426_p1 = $signed(add_ln203_5_fu_421_p2);

assign sext_ln203_fu_255_p1 = $signed(sub_ln203_fu_249_p2);

assign sext_ln581_fu_539_p1 = sh_amt_reg_790;

assign sh_amt_fu_521_p3 = ((icmp_ln581_fu_503_p2[0:0] === 1'b1) ? add_ln581_fu_509_p2 : sub_ln581_fu_515_p2);

assign shl_ln604_fu_588_p2 = trunc_ln583_reg_803 << zext_ln604_fu_584_p1;

assign sub_ln203_4_fu_279_p2 = (tmp_63_fu_259_p3 - zext_ln203_11_fu_275_p1);

assign sub_ln203_5_fu_371_p2 = (p_shl5_cast_fu_355_p3 - p_shl6_cast_fu_363_p3);

assign sub_ln203_fu_249_p2 = (zext_ln203_fu_233_p1 - zext_ln203_10_fu_245_p1);

assign sub_ln237_fu_340_p2 = (p_shl7_cast_fu_320_p3 - zext_ln237_4_fu_336_p1);

assign sub_ln581_fu_515_p2 = (12'd16 - F2_fu_497_p2);

assign tmp_20_fu_465_p3 = {{1'd1}, {trunc_ln565_fu_461_p1}};

assign tmp_60_fu_207_p3 = {{i_0_reg_144}, {2'd0}};

assign tmp_61_fu_225_p3 = {{i_0_reg_144}, {3'd0}};

assign tmp_62_fu_237_p3 = {{i_0_reg_144}, {1'd0}};

assign tmp_63_fu_259_p3 = {{i_0_reg_144}, {7'd0}};

assign tmp_64_fu_267_p3 = {{i_0_reg_144}, {5'd0}};

assign tmp_82_fu_328_p3 = {{add_ln237_1_fu_311_p2}, {5'd0}};

assign tmp_84_fu_568_p3 = bitcast_ln696_fu_565_p1[32'd31];

assign trunc_ln203_fu_351_p1 = add_ln203_fu_346_p2[7:0];

assign trunc_ln237_fu_316_p1 = add_ln237_1_fu_311_p2[6:0];

assign trunc_ln556_fu_435_p1 = ireg_V_fu_431_p1[62:0];

assign trunc_ln565_fu_461_p1 = ireg_V_fu_431_p1[51:0];

assign trunc_ln583_fu_535_p1 = man_V_4_fu_483_p3[39:0];

assign trunc_ln586_fu_561_p1 = ashr_ln586_fu_556_p2[39:0];

assign update_0_V_address0 = sext_ln203_2_fu_426_p1;

assign xor_ln571_fu_593_p2 = (icmp_ln571_reg_778 ^ 1'd1);

assign xor_ln581_fu_641_p2 = (or_ln581_fu_636_p2 ^ 1'd1);

assign xor_ln582_fu_607_p2 = (or_ln582_fu_603_p2 ^ 1'd1);

assign xor_ln585_fu_618_p2 = (icmp_ln585_fu_542_p2 ^ 1'd1);

assign zext_ln203_10_fu_245_p1 = tmp_62_fu_237_p3;

assign zext_ln203_11_fu_275_p1 = tmp_64_fu_267_p3;

assign zext_ln203_12_fu_416_p1 = add_ln203_4_fu_411_p2;

assign zext_ln203_fu_233_p1 = tmp_61_fu_225_p3;

assign zext_ln237_1_fu_215_p1 = tmp_60_fu_207_p3;

assign zext_ln237_2_fu_303_p1 = j_0_reg_155;

assign zext_ln237_3_fu_307_p1 = j_0_reg_155;

assign zext_ln237_4_fu_336_p1 = tmp_82_fu_328_p3;

assign zext_ln237_5_fu_389_p1 = k_0_reg_166;

assign zext_ln237_6_fu_393_p1 = k_0_reg_166;

assign zext_ln237_7_fu_397_p1 = k_0_reg_166;

assign zext_ln237_8_fu_406_p1 = add_ln237_2_fu_401_p2;

assign zext_ln237_fu_203_p1 = i_0_reg_144;

assign zext_ln461_fu_457_p1 = exp_tmp_V_fu_447_p4;

assign zext_ln586_fu_552_p1 = $unsigned(sext_ln581_fu_539_p1);

assign zext_ln604_fu_584_p1 = $unsigned(sext_ln581_fu_539_p1);

always @ (posedge ap_clk) begin
    sext_ln203_reg_712[0] <= 1'b0;
    sub_ln203_4_reg_717[4:0] <= 5'b00000;
    sub_ln237_reg_734[4:0] <= 5'b00000;
    sub_ln203_5_reg_739[4:0] <= 5'b00000;
end

endmodule //cache_update
