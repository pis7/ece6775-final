// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_1_4_3_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11
);

parameter    ap_ST_fsm_state1 = 66'd1;
parameter    ap_ST_fsm_state2 = 66'd2;
parameter    ap_ST_fsm_state3 = 66'd4;
parameter    ap_ST_fsm_state4 = 66'd8;
parameter    ap_ST_fsm_state5 = 66'd16;
parameter    ap_ST_fsm_state6 = 66'd32;
parameter    ap_ST_fsm_state7 = 66'd64;
parameter    ap_ST_fsm_state8 = 66'd128;
parameter    ap_ST_fsm_state9 = 66'd256;
parameter    ap_ST_fsm_state10 = 66'd512;
parameter    ap_ST_fsm_state11 = 66'd1024;
parameter    ap_ST_fsm_state12 = 66'd2048;
parameter    ap_ST_fsm_state13 = 66'd4096;
parameter    ap_ST_fsm_state14 = 66'd8192;
parameter    ap_ST_fsm_state15 = 66'd16384;
parameter    ap_ST_fsm_state16 = 66'd32768;
parameter    ap_ST_fsm_state17 = 66'd65536;
parameter    ap_ST_fsm_state18 = 66'd131072;
parameter    ap_ST_fsm_state19 = 66'd262144;
parameter    ap_ST_fsm_state20 = 66'd524288;
parameter    ap_ST_fsm_state21 = 66'd1048576;
parameter    ap_ST_fsm_state22 = 66'd2097152;
parameter    ap_ST_fsm_state23 = 66'd4194304;
parameter    ap_ST_fsm_state24 = 66'd8388608;
parameter    ap_ST_fsm_state25 = 66'd16777216;
parameter    ap_ST_fsm_state26 = 66'd33554432;
parameter    ap_ST_fsm_state27 = 66'd67108864;
parameter    ap_ST_fsm_state28 = 66'd134217728;
parameter    ap_ST_fsm_state29 = 66'd268435456;
parameter    ap_ST_fsm_state30 = 66'd536870912;
parameter    ap_ST_fsm_state31 = 66'd1073741824;
parameter    ap_ST_fsm_state32 = 66'd2147483648;
parameter    ap_ST_fsm_state33 = 66'd4294967296;
parameter    ap_ST_fsm_state34 = 66'd8589934592;
parameter    ap_ST_fsm_state35 = 66'd17179869184;
parameter    ap_ST_fsm_state36 = 66'd34359738368;
parameter    ap_ST_fsm_state37 = 66'd68719476736;
parameter    ap_ST_fsm_state38 = 66'd137438953472;
parameter    ap_ST_fsm_state39 = 66'd274877906944;
parameter    ap_ST_fsm_state40 = 66'd549755813888;
parameter    ap_ST_fsm_state41 = 66'd1099511627776;
parameter    ap_ST_fsm_state42 = 66'd2199023255552;
parameter    ap_ST_fsm_state43 = 66'd4398046511104;
parameter    ap_ST_fsm_state44 = 66'd8796093022208;
parameter    ap_ST_fsm_state45 = 66'd17592186044416;
parameter    ap_ST_fsm_state46 = 66'd35184372088832;
parameter    ap_ST_fsm_state47 = 66'd70368744177664;
parameter    ap_ST_fsm_state48 = 66'd140737488355328;
parameter    ap_ST_fsm_state49 = 66'd281474976710656;
parameter    ap_ST_fsm_state50 = 66'd562949953421312;
parameter    ap_ST_fsm_state51 = 66'd1125899906842624;
parameter    ap_ST_fsm_state52 = 66'd2251799813685248;
parameter    ap_ST_fsm_state53 = 66'd4503599627370496;
parameter    ap_ST_fsm_state54 = 66'd9007199254740992;
parameter    ap_ST_fsm_state55 = 66'd18014398509481984;
parameter    ap_ST_fsm_state56 = 66'd36028797018963968;
parameter    ap_ST_fsm_state57 = 66'd72057594037927936;
parameter    ap_ST_fsm_state58 = 66'd144115188075855872;
parameter    ap_ST_fsm_state59 = 66'd288230376151711744;
parameter    ap_ST_fsm_state60 = 66'd576460752303423488;
parameter    ap_ST_fsm_state61 = 66'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 66'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 66'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 66'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 66'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 66'd36893488147419103232;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [39:0] p_read;
input  [39:0] p_read1;
input  [39:0] p_read2;
input  [39:0] p_read3;
input  [39:0] p_read4;
input  [39:0] p_read5;
input  [39:0] p_read6;
input  [39:0] p_read7;
input  [39:0] p_read8;
input  [39:0] p_read9;
input  [39:0] p_read10;
input  [39:0] p_read11;
output  [39:0] ap_return_0;
output  [39:0] ap_return_1;
output  [39:0] ap_return_2;
output  [39:0] ap_return_3;
output  [39:0] ap_return_4;
output  [39:0] ap_return_5;
output  [39:0] ap_return_6;
output  [39:0] ap_return_7;
output  [39:0] ap_return_8;
output  [39:0] ap_return_9;
output  [39:0] ap_return_10;
output  [39:0] ap_return_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[39:0] ap_return_0;
reg[39:0] ap_return_1;
reg[39:0] ap_return_2;
reg[39:0] ap_return_3;
reg[39:0] ap_return_4;
reg[39:0] ap_return_5;
reg[39:0] ap_return_6;
reg[39:0] ap_return_7;
reg[39:0] ap_return_8;
reg[39:0] ap_return_9;
reg[39:0] ap_return_10;
reg[39:0] ap_return_11;

(* fsm_encoding = "none" *) reg   [65:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln302_fu_334_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_340_p2;
reg   [2:0] i_reg_917;
wire   [1:0] trunc_ln203_fu_346_p1;
reg   [1:0] trunc_ln203_reg_922;
wire   [39:0] tmp_1_fu_350_p6;
reg   [39:0] tmp_1_reg_940;
wire   [39:0] select_ln306_fu_462_p3;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln305_fu_436_p2;
wire   [1:0] add_ln305_fu_470_p2;
wire  signed [39:0] sub_ln703_fu_476_p2;
reg  signed [39:0] sub_ln703_reg_959;
wire    ap_CS_fsm_state4;
wire  signed [39:0] sub_ln703_34_fu_481_p2;
reg  signed [39:0] sub_ln703_34_reg_965;
wire  signed [39:0] sub_ln703_35_fu_487_p2;
reg  signed [39:0] sub_ln703_35_reg_971;
wire   [39:0] add_ln728_fu_502_p2;
reg   [39:0] add_ln728_reg_977;
wire    ap_CS_fsm_state5;
reg   [55:0] trunc_ln2_reg_982;
wire   [39:0] add_ln728_1_fu_526_p2;
reg   [39:0] add_ln728_1_reg_987;
reg   [55:0] trunc_ln1192_1_reg_992;
wire   [39:0] add_ln728_2_fu_550_p2;
reg   [39:0] add_ln728_2_reg_997;
reg   [55:0] trunc_ln1192_2_reg_1002;
wire   [39:0] trunc_ln3_fu_577_p4;
reg   [39:0] trunc_ln3_reg_1007;
wire    ap_CS_fsm_state6;
wire   [39:0] trunc_ln708_s_fu_599_p4;
reg   [39:0] trunc_ln708_s_reg_1012;
wire   [39:0] trunc_ln708_29_fu_621_p4;
reg   [39:0] trunc_ln708_29_reg_1017;
wire   [39:0] add_ln703_27_fu_637_p2;
reg   [39:0] add_ln703_27_reg_1022;
wire  signed [55:0] sext_ln1148_fu_643_p1;
wire    ap_CS_fsm_state7;
wire   [39:0] input_V211_1_fu_697_p6;
wire    ap_CS_fsm_state66;
wire   [39:0] input_V210_1_fu_710_p6;
wire   [39:0] input_V29_1_fu_723_p6;
wire   [39:0] input_V28_1_fu_736_p6;
wire   [39:0] input_V17_1_fu_749_p6;
wire   [39:0] input_V16_1_fu_762_p6;
wire   [39:0] input_V15_1_fu_775_p6;
wire   [39:0] input_V14_1_fu_788_p6;
wire   [39:0] input_V3_1_fu_801_p6;
wire   [39:0] input_V2_1_fu_814_p6;
wire   [39:0] input_V12_1_fu_827_p6;
wire   [39:0] input_V_1_fu_840_p6;
reg   [39:0] input_V_0_reg_156;
reg   [39:0] input_V12_0_reg_166;
reg   [39:0] input_V2_0_reg_176;
reg   [39:0] input_V3_0_reg_186;
reg   [39:0] input_V14_0_reg_196;
reg   [39:0] input_V15_0_reg_206;
reg   [39:0] input_V16_0_reg_216;
reg   [39:0] input_V17_0_reg_226;
reg   [39:0] input_V28_0_reg_236;
reg   [39:0] input_V29_0_reg_246;
reg   [39:0] input_V210_0_reg_256;
reg   [39:0] input_V211_0_reg_266;
reg   [2:0] i_0_reg_276;
reg   [39:0] p_Val2_33_0_reg_287;
reg   [1:0] k_0_0_reg_297;
wire   [1:0] tmp_1_fu_350_p5;
wire   [0:0] icmp_ln1494_fu_442_p2;
wire   [39:0] grp_fu_308_p6;
wire   [39:0] grp_fu_321_p6;
wire   [39:0] select_ln1494_fu_448_p3;
wire   [0:0] icmp_ln1494_26_fu_456_p2;
wire  signed [39:0] mul_ln1118_fu_496_p0;
wire  signed [79:0] sext_ln1116_fu_493_p1;
wire  signed [39:0] mul_ln1118_fu_496_p1;
wire   [79:0] mul_ln1118_fu_496_p2;
wire  signed [39:0] mul_ln1118_1_fu_520_p0;
wire  signed [79:0] sext_ln1116_1_fu_517_p1;
wire  signed [39:0] mul_ln1118_1_fu_520_p1;
wire   [79:0] mul_ln1118_1_fu_520_p2;
wire  signed [39:0] mul_ln1118_2_fu_544_p0;
wire  signed [79:0] sext_ln1116_2_fu_541_p1;
wire  signed [39:0] mul_ln1118_2_fu_544_p1;
wire   [79:0] mul_ln1118_2_fu_544_p2;
wire   [55:0] shl_ln_fu_565_p3;
wire   [55:0] add_ln1192_fu_572_p2;
wire   [55:0] shl_ln728_1_fu_587_p3;
wire   [55:0] add_ln1192_1_fu_594_p2;
wire   [55:0] shl_ln728_2_fu_609_p3;
wire   [55:0] add_ln1192_2_fu_616_p2;
wire   [39:0] add_ln703_fu_631_p2;
wire   [55:0] grp_fu_653_p0;
wire  signed [39:0] grp_fu_653_p1;
wire   [55:0] grp_fu_666_p0;
wire  signed [39:0] grp_fu_666_p1;
wire   [55:0] grp_fu_679_p0;
wire  signed [39:0] grp_fu_679_p1;
wire   [39:0] grp_fu_653_p2;
wire   [39:0] grp_fu_666_p2;
wire   [39:0] grp_fu_679_p2;
wire   [39:0] trunc_ln703_2_fu_693_p1;
wire   [39:0] trunc_ln703_1_fu_689_p1;
wire   [39:0] trunc_ln703_fu_685_p1;
reg    grp_fu_653_ap_start;
wire    grp_fu_653_ap_done;
reg    grp_fu_666_ap_start;
wire    grp_fu_666_ap_done;
reg    grp_fu_679_ap_start;
wire    grp_fu_679_ap_done;
reg   [39:0] ap_return_0_preg;
reg   [39:0] ap_return_1_preg;
reg   [39:0] ap_return_2_preg;
reg   [39:0] ap_return_3_preg;
reg   [39:0] ap_return_4_preg;
reg   [39:0] ap_return_5_preg;
reg   [39:0] ap_return_6_preg;
reg   [39:0] ap_return_7_preg;
reg   [39:0] ap_return_8_preg;
reg   [39:0] ap_return_9_preg;
reg   [39:0] ap_return_10_preg;
reg   [39:0] ap_return_11_preg;
reg   [65:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 66'd1;
#0 ap_return_0_preg = 40'd0;
#0 ap_return_1_preg = 40'd0;
#0 ap_return_2_preg = 40'd0;
#0 ap_return_3_preg = 40'd0;
#0 ap_return_4_preg = 40'd0;
#0 ap_return_5_preg = 40'd0;
#0 ap_return_6_preg = 40'd0;
#0 ap_return_7_preg = 40'd0;
#0 ap_return_8_preg = 40'd0;
#0 ap_return_9_preg = 40'd0;
#0 ap_return_10_preg = 40'd0;
#0 ap_return_11_preg = 40'd0;
end

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U147(
    .din0(input_V14_0_reg_196),
    .din1(input_V15_0_reg_206),
    .din2(input_V16_0_reg_216),
    .din3(input_V17_0_reg_226),
    .din4(trunc_ln203_reg_922),
    .dout(grp_fu_308_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U148(
    .din0(input_V28_0_reg_236),
    .din1(input_V29_0_reg_246),
    .din2(input_V210_0_reg_256),
    .din3(input_V211_0_reg_266),
    .din4(trunc_ln203_reg_922),
    .dout(grp_fu_321_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U149(
    .din0(input_V_0_reg_156),
    .din1(input_V12_0_reg_166),
    .din2(input_V2_0_reg_176),
    .din3(input_V3_0_reg_186),
    .din4(tmp_1_fu_350_p5),
    .dout(tmp_1_fu_350_p6)
);

dut_sdiv_56ns_40shbi #(
    .ID( 1 ),
    .NUM_STAGE( 60 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 40 ))
dut_sdiv_56ns_40shbi_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_653_ap_start),
    .done(grp_fu_653_ap_done),
    .din0(grp_fu_653_p0),
    .din1(grp_fu_653_p1),
    .ce(1'b1),
    .dout(grp_fu_653_p2)
);

dut_sdiv_56ns_40shbi #(
    .ID( 1 ),
    .NUM_STAGE( 60 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 40 ))
dut_sdiv_56ns_40shbi_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_666_ap_start),
    .done(grp_fu_666_ap_done),
    .din0(grp_fu_666_p0),
    .din1(grp_fu_666_p1),
    .ce(1'b1),
    .dout(grp_fu_666_p2)
);

dut_sdiv_56ns_40shbi #(
    .ID( 1 ),
    .NUM_STAGE( 60 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 40 ))
dut_sdiv_56ns_40shbi_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_679_ap_start),
    .done(grp_fu_679_ap_done),
    .din0(grp_fu_679_p0),
    .din1(grp_fu_679_p1),
    .ce(1'b1),
    .dout(grp_fu_679_p2)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U153(
    .din0(input_V211_0_reg_266),
    .din1(input_V211_0_reg_266),
    .din2(input_V211_0_reg_266),
    .din3(trunc_ln703_2_fu_693_p1),
    .din4(trunc_ln203_reg_922),
    .dout(input_V211_1_fu_697_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U154(
    .din0(input_V210_0_reg_256),
    .din1(input_V210_0_reg_256),
    .din2(trunc_ln703_2_fu_693_p1),
    .din3(input_V210_0_reg_256),
    .din4(trunc_ln203_reg_922),
    .dout(input_V210_1_fu_710_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U155(
    .din0(input_V29_0_reg_246),
    .din1(trunc_ln703_2_fu_693_p1),
    .din2(input_V29_0_reg_246),
    .din3(input_V29_0_reg_246),
    .din4(trunc_ln203_reg_922),
    .dout(input_V29_1_fu_723_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U156(
    .din0(trunc_ln703_2_fu_693_p1),
    .din1(input_V28_0_reg_236),
    .din2(input_V28_0_reg_236),
    .din3(input_V28_0_reg_236),
    .din4(trunc_ln203_reg_922),
    .dout(input_V28_1_fu_736_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U157(
    .din0(input_V17_0_reg_226),
    .din1(input_V17_0_reg_226),
    .din2(input_V17_0_reg_226),
    .din3(trunc_ln703_1_fu_689_p1),
    .din4(trunc_ln203_reg_922),
    .dout(input_V17_1_fu_749_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U158(
    .din0(input_V16_0_reg_216),
    .din1(input_V16_0_reg_216),
    .din2(trunc_ln703_1_fu_689_p1),
    .din3(input_V16_0_reg_216),
    .din4(trunc_ln203_reg_922),
    .dout(input_V16_1_fu_762_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U159(
    .din0(input_V15_0_reg_206),
    .din1(trunc_ln703_1_fu_689_p1),
    .din2(input_V15_0_reg_206),
    .din3(input_V15_0_reg_206),
    .din4(trunc_ln203_reg_922),
    .dout(input_V15_1_fu_775_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U160(
    .din0(trunc_ln703_1_fu_689_p1),
    .din1(input_V14_0_reg_196),
    .din2(input_V14_0_reg_196),
    .din3(input_V14_0_reg_196),
    .din4(trunc_ln203_reg_922),
    .dout(input_V14_1_fu_788_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U161(
    .din0(input_V3_0_reg_186),
    .din1(input_V3_0_reg_186),
    .din2(input_V3_0_reg_186),
    .din3(trunc_ln703_fu_685_p1),
    .din4(trunc_ln203_reg_922),
    .dout(input_V3_1_fu_801_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U162(
    .din0(input_V2_0_reg_176),
    .din1(input_V2_0_reg_176),
    .din2(trunc_ln703_fu_685_p1),
    .din3(input_V2_0_reg_176),
    .din4(trunc_ln203_reg_922),
    .dout(input_V2_1_fu_814_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U163(
    .din0(input_V12_0_reg_166),
    .din1(trunc_ln703_fu_685_p1),
    .din2(input_V12_0_reg_166),
    .din3(input_V12_0_reg_166),
    .din4(trunc_ln203_reg_922),
    .dout(input_V12_1_fu_827_p6)
);

dut_mux_42_40_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 40 ),
    .din2_WIDTH( 40 ),
    .din3_WIDTH( 40 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 40 ))
dut_mux_42_40_1_1_U164(
    .din0(trunc_ln703_fu_685_p1),
    .din1(input_V_0_reg_156),
    .din2(input_V_0_reg_156),
    .din3(input_V_0_reg_156),
    .din4(trunc_ln203_reg_922),
    .dout(input_V_1_fu_840_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_0_preg <= input_V_0_reg_156;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_10_preg <= input_V210_0_reg_256;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_11_preg <= input_V211_0_reg_266;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_1_preg <= input_V12_0_reg_166;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_2_preg <= input_V2_0_reg_176;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_3_preg <= input_V3_0_reg_186;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_4_preg <= input_V14_0_reg_196;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_5_preg <= input_V15_0_reg_206;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_6_preg <= input_V16_0_reg_216;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_7_preg <= input_V17_0_reg_226;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_8_preg <= input_V28_0_reg_236;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 40'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
            ap_return_9_preg <= input_V29_0_reg_246;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        i_0_reg_276 <= i_reg_917;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_276 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V12_0_reg_166 <= input_V12_1_fu_827_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V12_0_reg_166 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V14_0_reg_196 <= input_V14_1_fu_788_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V14_0_reg_196 <= p_read4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V15_0_reg_206 <= input_V15_1_fu_775_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V15_0_reg_206 <= p_read5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V16_0_reg_216 <= input_V16_1_fu_762_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V16_0_reg_216 <= p_read6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V17_0_reg_226 <= input_V17_1_fu_749_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V17_0_reg_226 <= p_read7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V210_0_reg_256 <= input_V210_1_fu_710_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V210_0_reg_256 <= p_read10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V211_0_reg_266 <= input_V211_1_fu_697_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V211_0_reg_266 <= p_read11;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V28_0_reg_236 <= input_V28_1_fu_736_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V28_0_reg_236 <= p_read8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V29_0_reg_246 <= input_V29_1_fu_723_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V29_0_reg_246 <= p_read9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V2_0_reg_176 <= input_V2_1_fu_814_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V2_0_reg_176 <= p_read2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V3_0_reg_186 <= input_V3_1_fu_801_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V3_0_reg_186 <= p_read3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        input_V_0_reg_156 <= input_V_1_fu_840_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_V_0_reg_156 <= p_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln305_fu_436_p2 == 1'd0))) begin
        k_0_0_reg_297 <= add_ln305_fu_470_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd0))) begin
        k_0_0_reg_297 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln305_fu_436_p2 == 1'd0))) begin
        p_Val2_33_0_reg_287 <= select_ln306_fu_462_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd0))) begin
        p_Val2_33_0_reg_287 <= tmp_1_fu_350_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln703_27_reg_1022 <= add_ln703_27_fu_637_p2;
        trunc_ln3_reg_1007 <= {{add_ln1192_fu_572_p2[55:16]}};
        trunc_ln708_29_reg_1017 <= {{add_ln1192_2_fu_616_p2[55:16]}};
        trunc_ln708_s_reg_1012 <= {{add_ln1192_1_fu_594_p2[55:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln728_1_reg_987 <= add_ln728_1_fu_526_p2;
        add_ln728_2_reg_997 <= add_ln728_2_fu_550_p2;
        add_ln728_reg_977 <= add_ln728_fu_502_p2;
        trunc_ln1192_1_reg_992 <= {{mul_ln1118_1_fu_520_p2[56:1]}};
        trunc_ln1192_2_reg_1002 <= {{mul_ln1118_2_fu_544_p2[56:1]}};
        trunc_ln2_reg_982 <= {{mul_ln1118_fu_496_p2[56:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_917 <= i_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_ln703_34_reg_965 <= sub_ln703_34_fu_481_p2;
        sub_ln703_35_reg_971 <= sub_ln703_35_fu_487_p2;
        sub_ln703_reg_959 <= sub_ln703_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd0))) begin
        tmp_1_reg_940 <= tmp_1_fu_350_p6;
        trunc_ln203_reg_922 <= trunc_ln203_fu_346_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_0 = input_V_0_reg_156;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_1 = input_V12_0_reg_166;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_10 = input_V210_0_reg_256;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_11 = input_V211_0_reg_266;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_2 = input_V2_0_reg_176;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_3 = input_V3_0_reg_186;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_4 = input_V14_0_reg_196;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_5 = input_V15_0_reg_206;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_6 = input_V16_0_reg_216;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_7 = input_V17_0_reg_226;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_8 = input_V28_0_reg_236;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
        ap_return_9 = input_V29_0_reg_246;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_653_ap_start = 1'b1;
    end else begin
        grp_fu_653_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_666_ap_start = 1'b1;
    end else begin
        grp_fu_666_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_679_ap_start = 1'b1;
    end else begin
        grp_fu_679_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln302_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln305_fu_436_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_1_fu_594_p2 = (shl_ln728_1_fu_587_p3 + trunc_ln1192_1_reg_992);

assign add_ln1192_2_fu_616_p2 = (shl_ln728_2_fu_609_p3 + trunc_ln1192_2_reg_1002);

assign add_ln1192_fu_572_p2 = (shl_ln_fu_565_p3 + trunc_ln2_reg_982);

assign add_ln305_fu_470_p2 = (k_0_0_reg_297 + 2'd1);

assign add_ln703_27_fu_637_p2 = (add_ln703_fu_631_p2 + trunc_ln3_fu_577_p4);

assign add_ln703_fu_631_p2 = (trunc_ln708_s_fu_599_p4 + trunc_ln708_29_fu_621_p4);

assign add_ln728_1_fu_526_p2 = ($signed(40'd65536) + $signed(sub_ln703_34_reg_965));

assign add_ln728_2_fu_550_p2 = ($signed(40'd65536) + $signed(sub_ln703_35_reg_971));

assign add_ln728_fu_502_p2 = ($signed(40'd65536) + $signed(sub_ln703_reg_959));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_653_p0 = {{trunc_ln3_reg_1007}, {16'd0}};

assign grp_fu_653_p1 = sext_ln1148_fu_643_p1;

assign grp_fu_666_p0 = {{trunc_ln708_s_reg_1012}, {16'd0}};

assign grp_fu_666_p1 = sext_ln1148_fu_643_p1;

assign grp_fu_679_p0 = {{trunc_ln708_29_reg_1017}, {16'd0}};

assign grp_fu_679_p1 = sext_ln1148_fu_643_p1;

assign i_fu_340_p2 = (i_0_reg_276 + 3'd1);

assign icmp_ln1494_26_fu_456_p2 = (($signed(select_ln1494_fu_448_p3) > $signed(p_Val2_33_0_reg_287)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_442_p2 = ((k_0_0_reg_297 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln302_fu_334_p2 = ((i_0_reg_276 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_436_p2 = ((k_0_0_reg_297 == 2'd3) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_520_p0 = sext_ln1116_1_fu_517_p1;

assign mul_ln1118_1_fu_520_p1 = sext_ln1116_1_fu_517_p1;

assign mul_ln1118_1_fu_520_p2 = ($signed(mul_ln1118_1_fu_520_p0) * $signed(mul_ln1118_1_fu_520_p1));

assign mul_ln1118_2_fu_544_p0 = sext_ln1116_2_fu_541_p1;

assign mul_ln1118_2_fu_544_p1 = sext_ln1116_2_fu_541_p1;

assign mul_ln1118_2_fu_544_p2 = ($signed(mul_ln1118_2_fu_544_p0) * $signed(mul_ln1118_2_fu_544_p1));

assign mul_ln1118_fu_496_p0 = sext_ln1116_fu_493_p1;

assign mul_ln1118_fu_496_p1 = sext_ln1116_fu_493_p1;

assign mul_ln1118_fu_496_p2 = ($signed(mul_ln1118_fu_496_p0) * $signed(mul_ln1118_fu_496_p1));

assign select_ln1494_fu_448_p3 = ((icmp_ln1494_fu_442_p2[0:0] === 1'b1) ? grp_fu_308_p6 : grp_fu_321_p6);

assign select_ln306_fu_462_p3 = ((icmp_ln1494_26_fu_456_p2[0:0] === 1'b1) ? select_ln1494_fu_448_p3 : p_Val2_33_0_reg_287);

assign sext_ln1116_1_fu_517_p1 = sub_ln703_34_reg_965;

assign sext_ln1116_2_fu_541_p1 = sub_ln703_35_reg_971;

assign sext_ln1116_fu_493_p1 = sub_ln703_reg_959;

assign sext_ln1148_fu_643_p1 = $signed(add_ln703_27_reg_1022);

assign shl_ln728_1_fu_587_p3 = {{add_ln728_1_reg_987}, {16'd0}};

assign shl_ln728_2_fu_609_p3 = {{add_ln728_2_reg_997}, {16'd0}};

assign shl_ln_fu_565_p3 = {{add_ln728_reg_977}, {16'd0}};

assign sub_ln703_34_fu_481_p2 = (grp_fu_308_p6 - p_Val2_33_0_reg_287);

assign sub_ln703_35_fu_487_p2 = (grp_fu_321_p6 - p_Val2_33_0_reg_287);

assign sub_ln703_fu_476_p2 = (tmp_1_reg_940 - p_Val2_33_0_reg_287);

assign tmp_1_fu_350_p5 = i_0_reg_276[1:0];

assign trunc_ln203_fu_346_p1 = i_0_reg_276[1:0];

assign trunc_ln3_fu_577_p4 = {{add_ln1192_fu_572_p2[55:16]}};

assign trunc_ln703_1_fu_689_p1 = grp_fu_666_p2[39:0];

assign trunc_ln703_2_fu_693_p1 = grp_fu_679_p2[39:0];

assign trunc_ln703_fu_685_p1 = grp_fu_653_p2[39:0];

assign trunc_ln708_29_fu_621_p4 = {{add_ln1192_2_fu_616_p2[55:16]}};

assign trunc_ln708_s_fu_599_p4 = {{add_ln1192_1_fu_594_p2[55:16]}};

endmodule //softmax_1_4_3_s
