// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rms_norm_1536_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_we0,
        input_0_V_d0,
        input_0_V_q0,
        weight_address0,
        weight_ce0,
        weight_q0
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_state38 = 75'd137438953472;
parameter    ap_ST_fsm_state39 = 75'd274877906944;
parameter    ap_ST_fsm_state40 = 75'd549755813888;
parameter    ap_ST_fsm_state41 = 75'd1099511627776;
parameter    ap_ST_fsm_state42 = 75'd2199023255552;
parameter    ap_ST_fsm_state43 = 75'd4398046511104;
parameter    ap_ST_fsm_state44 = 75'd8796093022208;
parameter    ap_ST_fsm_state45 = 75'd17592186044416;
parameter    ap_ST_fsm_state46 = 75'd35184372088832;
parameter    ap_ST_fsm_state47 = 75'd70368744177664;
parameter    ap_ST_fsm_state48 = 75'd140737488355328;
parameter    ap_ST_fsm_state49 = 75'd281474976710656;
parameter    ap_ST_fsm_state50 = 75'd562949953421312;
parameter    ap_ST_fsm_state51 = 75'd1125899906842624;
parameter    ap_ST_fsm_state52 = 75'd2251799813685248;
parameter    ap_ST_fsm_state53 = 75'd4503599627370496;
parameter    ap_ST_fsm_state54 = 75'd9007199254740992;
parameter    ap_ST_fsm_state55 = 75'd18014398509481984;
parameter    ap_ST_fsm_state56 = 75'd36028797018963968;
parameter    ap_ST_fsm_state57 = 75'd72057594037927936;
parameter    ap_ST_fsm_state58 = 75'd144115188075855872;
parameter    ap_ST_fsm_state59 = 75'd288230376151711744;
parameter    ap_ST_fsm_state60 = 75'd576460752303423488;
parameter    ap_ST_fsm_state61 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_V_address0;
output   input_0_V_ce0;
output   input_0_V_we0;
output  [39:0] input_0_V_d0;
input  [39:0] input_0_V_q0;
output  [10:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_0_V_address0;
reg input_0_V_ce0;
reg input_0_V_we0;
reg weight_ce0;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [39:0] reg_170;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state69;
wire   [10:0] i_fu_180_p2;
reg   [10:0] i_reg_615;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln88_fu_174_p2;
wire   [55:0] mul_ln1192_fu_205_p2;
reg   [55:0] mul_ln1192_reg_630;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [80:0] grp_fu_195_p2;
reg   [80:0] mul_ln1148_reg_640;
wire    ap_CS_fsm_state6;
reg   [29:0] tmp_73_reg_645;
wire   [29:0] select_ln1148_1_fu_280_p3;
reg   [29:0] select_ln1148_1_reg_651;
wire    ap_CS_fsm_state7;
wire   [28:0] grp_sqrt_fixed_42_26_s_fu_161_ap_return;
reg   [28:0] agg_result_V_i_reg_656;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire   [71:0] zext_ln1118_fu_296_p1;
reg   [71:0] zext_ln1118_reg_666;
wire    ap_CS_fsm_state63;
wire   [10:0] i_1_fu_306_p2;
reg   [10:0] i_1_reg_674;
wire    ap_CS_fsm_state64;
wire   [0:0] icmp_ln93_fu_300_p2;
reg   [10:0] input_0_V_addr_4_reg_684;
reg   [31:0] weight_load_reg_689;
wire    ap_CS_fsm_state65;
wire   [53:0] man_V_2_fu_370_p3;
reg   [53:0] man_V_2_reg_695;
wire    ap_CS_fsm_state66;
wire   [0:0] icmp_ln571_fu_378_p2;
reg   [0:0] icmp_ln571_reg_700;
wire   [0:0] icmp_ln581_fu_390_p2;
reg   [0:0] icmp_ln581_reg_706;
wire  signed [11:0] sh_amt_fu_408_p3;
reg  signed [11:0] sh_amt_reg_712;
wire   [0:0] icmp_ln582_fu_416_p2;
reg   [0:0] icmp_ln582_reg_719;
wire   [39:0] trunc_ln583_fu_422_p1;
reg   [39:0] trunc_ln583_reg_725;
wire   [39:0] select_ln603_fu_540_p3;
reg   [39:0] select_ln603_reg_731;
wire    ap_CS_fsm_state67;
wire   [0:0] or_ln603_fu_548_p2;
reg   [0:0] or_ln603_reg_736;
wire   [39:0] select_ln603_1_fu_554_p3;
reg   [39:0] select_ln603_1_reg_741;
wire   [0:0] or_ln603_2_fu_567_p2;
reg   [0:0] or_ln603_2_reg_746;
wire   [39:0] select_ln603_3_fu_578_p3;
reg   [39:0] select_ln603_3_reg_751;
wire    ap_CS_fsm_state68;
wire  signed [71:0] mul_ln1118_fu_588_p2;
reg  signed [71:0] mul_ln1118_reg_756;
wire    ap_CS_fsm_state70;
reg   [39:0] trunc_ln5_reg_766;
wire    ap_CS_fsm_state74;
reg  signed [39:0] p_Val2_s_reg_127;
reg   [10:0] i_0_reg_139;
reg   [10:0] i1_0_reg_150;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln89_fu_186_p1;
wire   [63:0] zext_ln94_fu_312_p1;
wire   [41:0] grp_fu_195_p1;
wire  signed [39:0] mul_ln1192_fu_205_p0;
wire  signed [55:0] sext_ln1118_1_fu_201_p1;
wire  signed [39:0] mul_ln1192_fu_205_p1;
wire   [55:0] lhs_V_fu_211_p3;
wire   [55:0] ret_V_fu_219_p2;
wire   [80:0] sub_ln1148_fu_244_p2;
wire   [0:0] tmp_71_fu_249_p3;
wire   [29:0] tmp_72_fu_257_p4;
wire   [29:0] select_ln1148_fu_267_p3;
wire   [29:0] sub_ln1227_fu_274_p2;
wire   [28:0] grp_fu_290_p1;
wire   [32:0] grp_fu_290_p2;
wire   [63:0] grp_fu_166_p1;
wire   [63:0] ireg_V_fu_318_p1;
wire   [10:0] exp_tmp_V_fu_334_p4;
wire   [51:0] trunc_ln565_fu_348_p1;
wire   [52:0] tmp_fu_352_p3;
wire   [53:0] p_Result_4_fu_360_p1;
wire   [0:0] p_Result_s_fu_326_p3;
wire   [53:0] man_V_1_fu_364_p2;
wire   [62:0] trunc_ln556_fu_322_p1;
wire   [11:0] zext_ln461_fu_344_p1;
wire   [11:0] F2_fu_384_p2;
wire   [11:0] add_ln581_fu_396_p2;
wire   [11:0] sub_ln581_fu_402_p2;
wire  signed [31:0] sext_ln581_fu_426_p1;
wire   [53:0] zext_ln586_fu_439_p1;
wire   [53:0] ashr_ln586_fu_443_p2;
wire   [31:0] bitcast_ln696_fu_452_p1;
wire   [0:0] tmp_75_fu_455_p3;
wire   [39:0] zext_ln604_fu_471_p1;
wire   [0:0] xor_ln571_fu_480_p2;
wire   [0:0] or_ln582_fu_490_p2;
wire   [0:0] xor_ln582_fu_494_p2;
wire   [0:0] icmp_ln585_fu_429_p2;
wire   [0:0] and_ln581_fu_500_p2;
wire   [0:0] xor_ln585_fu_505_p2;
wire   [0:0] or_ln581_fu_523_p2;
wire   [0:0] icmp_ln603_fu_434_p2;
wire   [0:0] xor_ln581_fu_528_p2;
wire   [0:0] and_ln603_fu_534_p2;
wire   [39:0] shl_ln604_fu_475_p2;
wire   [39:0] trunc_ln586_fu_448_p1;
wire   [0:0] and_ln585_1_fu_517_p2;
wire   [0:0] and_ln585_fu_511_p2;
wire   [39:0] select_ln588_fu_463_p3;
wire   [0:0] and_ln582_fu_485_p2;
wire   [0:0] or_ln603_1_fu_561_p2;
wire   [39:0] select_ln603_2_fu_573_p3;
wire   [32:0] mul_ln1118_fu_588_p0;
wire  signed [39:0] mul_ln1118_fu_588_p1;
wire   [71:0] grp_fu_597_p2;
reg    grp_fu_290_ap_start;
wire    grp_fu_290_ap_done;
reg   [74:0] ap_NS_fsm;
wire   [32:0] grp_fu_290_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
end

sqrt_fixed_42_26_s grp_sqrt_fixed_42_26_s_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(select_ln1148_1_reg_651),
    .ap_return(grp_sqrt_fixed_42_26_s_fu_161_ap_return)
);

dut_fpext_32ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_fpext_32ns_64bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_q0),
    .ce(1'b1),
    .dout(grp_fu_166_p1)
);

dut_mul_40s_42ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 40 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 81 ))
dut_mul_40s_42ns_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_s_reg_127),
    .din1(grp_fu_195_p1),
    .ce(1'b1),
    .dout(grp_fu_195_p2)
);

dut_udiv_33s_29nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 37 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 33 ))
dut_udiv_33s_29nsdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_290_ap_start),
    .done(grp_fu_290_ap_done),
    .din0(33'd4294967296),
    .din1(grp_fu_290_p1),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

dut_mul_72s_40s_7eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 72 ))
dut_mul_72s_40s_7eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln1118_reg_756),
    .din1(reg_170),
    .ce(1'b1),
    .dout(grp_fu_597_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        i1_0_reg_150 <= i_1_reg_674;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        i1_0_reg_150 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_139 <= i_reg_615;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_139 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Val2_s_reg_127 <= {{ret_V_fu_219_p2[55:16]}};
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_127 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        agg_result_V_i_reg_656 <= grp_sqrt_fixed_42_26_s_fu_161_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_1_reg_674 <= i_1_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_615 <= i_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        icmp_ln571_reg_700 <= icmp_ln571_fu_378_p2;
        icmp_ln581_reg_706 <= icmp_ln581_fu_390_p2;
        icmp_ln582_reg_719 <= icmp_ln582_fu_416_p2;
        man_V_2_reg_695 <= man_V_2_fu_370_p3;
        sh_amt_reg_712 <= sh_amt_fu_408_p3;
        trunc_ln583_reg_725 <= trunc_ln583_fu_422_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln93_fu_300_p2 == 1'd0))) begin
        input_0_V_addr_4_reg_684 <= zext_ln94_fu_312_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        mul_ln1118_reg_756 <= mul_ln1118_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln1148_reg_640 <= grp_fu_195_p2;
        tmp_73_reg_645 <= {{grp_fu_195_p2[80:51]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln1192_reg_630 <= mul_ln1192_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        or_ln603_2_reg_746 <= or_ln603_2_fu_567_p2;
        or_ln603_reg_736 <= or_ln603_fu_548_p2;
        select_ln603_1_reg_741 <= select_ln603_1_fu_554_p3;
        select_ln603_reg_731 <= select_ln603_fu_540_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_170 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln1148_1_reg_651 <= select_ln1148_1_fu_280_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        select_ln603_3_reg_751 <= select_ln603_3_fu_578_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        trunc_ln5_reg_766 <= {{grp_fu_597_p2[71:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        weight_load_reg_689 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        zext_ln1118_reg_666[32 : 0] <= zext_ln1118_fu_296_p1[32 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state64) & (icmp_ln93_fu_300_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln93_fu_300_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_290_ap_start = 1'b1;
    end else begin
        grp_fu_290_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state68))) begin
        input_0_V_address0 = input_0_V_addr_4_reg_684;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_0_V_address0 = zext_ln89_fu_186_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state2))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        input_0_V_we0 = 1'b1;
    end else begin
        input_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln88_fu_174_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln93_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_384_p2 = (12'd1075 - zext_ln461_fu_344_p1);

assign add_ln581_fu_396_p2 = ($signed(12'd4080) + $signed(F2_fu_384_p2));

assign and_ln581_fu_500_p2 = (xor_ln582_fu_494_p2 & icmp_ln581_reg_706);

assign and_ln582_fu_485_p2 = (xor_ln571_fu_480_p2 & icmp_ln582_reg_719);

assign and_ln585_1_fu_517_p2 = (icmp_ln585_fu_429_p2 & and_ln581_fu_500_p2);

assign and_ln585_fu_511_p2 = (xor_ln585_fu_505_p2 & and_ln581_fu_500_p2);

assign and_ln603_fu_534_p2 = (xor_ln581_fu_528_p2 & icmp_ln603_fu_434_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ashr_ln586_fu_443_p2 = $signed(man_V_2_reg_695) >>> zext_ln586_fu_439_p1;

assign bitcast_ln696_fu_452_p1 = weight_load_reg_689;

assign exp_tmp_V_fu_334_p4 = {{ireg_V_fu_318_p1[62:52]}};

assign grp_fu_195_p1 = 81'd1466015503702;

assign grp_fu_290_p1 = grp_fu_290_p10;

assign grp_fu_290_p10 = agg_result_V_i_reg_656;

assign i_1_fu_306_p2 = (i1_0_reg_150 + 11'd1);

assign i_fu_180_p2 = (i_0_reg_139 + 11'd1);

assign icmp_ln571_fu_378_p2 = ((trunc_ln556_fu_322_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_390_p2 = (($signed(F2_fu_384_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_416_p2 = ((F2_fu_384_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_429_p2 = ((sh_amt_reg_712 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_434_p2 = ((sh_amt_reg_712 < 12'd40) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_174_p2 = ((i_0_reg_139 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_300_p2 = ((i1_0_reg_150 == 11'd1536) ? 1'b1 : 1'b0);

assign input_0_V_d0 = trunc_ln5_reg_766;

assign ireg_V_fu_318_p1 = grp_fu_166_p1;

assign lhs_V_fu_211_p3 = {{p_Val2_s_reg_127}, {16'd0}};

assign man_V_1_fu_364_p2 = (54'd0 - p_Result_4_fu_360_p1);

assign man_V_2_fu_370_p3 = ((p_Result_s_fu_326_p3[0:0] === 1'b1) ? man_V_1_fu_364_p2 : p_Result_4_fu_360_p1);

assign mul_ln1118_fu_588_p0 = zext_ln1118_reg_666;

assign mul_ln1118_fu_588_p1 = select_ln603_3_reg_751;

assign mul_ln1118_fu_588_p2 = ($signed({{1'b0}, {mul_ln1118_fu_588_p0}}) * $signed(mul_ln1118_fu_588_p1));

assign mul_ln1192_fu_205_p0 = sext_ln1118_1_fu_201_p1;

assign mul_ln1192_fu_205_p1 = sext_ln1118_1_fu_201_p1;

assign mul_ln1192_fu_205_p2 = ($signed(mul_ln1192_fu_205_p0) * $signed(mul_ln1192_fu_205_p1));

assign or_ln581_fu_523_p2 = (or_ln582_fu_490_p2 | icmp_ln581_reg_706);

assign or_ln582_fu_490_p2 = (icmp_ln582_reg_719 | icmp_ln571_reg_700);

assign or_ln603_1_fu_561_p2 = (and_ln585_fu_511_p2 | and_ln582_fu_485_p2);

assign or_ln603_2_fu_567_p2 = (or_ln603_fu_548_p2 | or_ln603_1_fu_561_p2);

assign or_ln603_fu_548_p2 = (and_ln603_fu_534_p2 | and_ln585_1_fu_517_p2);

assign p_Result_4_fu_360_p1 = tmp_fu_352_p3;

assign p_Result_s_fu_326_p3 = ireg_V_fu_318_p1[32'd63];

assign ret_V_fu_219_p2 = (mul_ln1192_reg_630 + lhs_V_fu_211_p3);

assign select_ln1148_1_fu_280_p3 = ((tmp_71_fu_249_p3[0:0] === 1'b1) ? sub_ln1227_fu_274_p2 : tmp_73_reg_645);

assign select_ln1148_fu_267_p3 = ((tmp_71_fu_249_p3[0:0] === 1'b1) ? tmp_72_fu_257_p4 : tmp_73_reg_645);

assign select_ln588_fu_463_p3 = ((tmp_75_fu_455_p3[0:0] === 1'b1) ? 40'd1099511627775 : 40'd0);

assign select_ln603_1_fu_554_p3 = ((and_ln585_fu_511_p2[0:0] === 1'b1) ? select_ln588_fu_463_p3 : trunc_ln583_reg_725);

assign select_ln603_2_fu_573_p3 = ((or_ln603_reg_736[0:0] === 1'b1) ? select_ln603_reg_731 : select_ln603_1_reg_741);

assign select_ln603_3_fu_578_p3 = ((or_ln603_2_reg_746[0:0] === 1'b1) ? select_ln603_2_fu_573_p3 : 40'd0);

assign select_ln603_fu_540_p3 = ((and_ln603_fu_534_p2[0:0] === 1'b1) ? shl_ln604_fu_475_p2 : trunc_ln586_fu_448_p1);

assign sext_ln1118_1_fu_201_p1 = reg_170;

assign sext_ln581_fu_426_p1 = sh_amt_reg_712;

assign sh_amt_fu_408_p3 = ((icmp_ln581_fu_390_p2[0:0] === 1'b1) ? add_ln581_fu_396_p2 : sub_ln581_fu_402_p2);

assign shl_ln604_fu_475_p2 = trunc_ln583_reg_725 << zext_ln604_fu_471_p1;

assign sub_ln1148_fu_244_p2 = (81'd0 - mul_ln1148_reg_640);

assign sub_ln1227_fu_274_p2 = (30'd0 - select_ln1148_fu_267_p3);

assign sub_ln581_fu_402_p2 = (12'd16 - F2_fu_384_p2);

assign tmp_71_fu_249_p3 = p_Val2_s_reg_127[32'd39];

assign tmp_72_fu_257_p4 = {{sub_ln1148_fu_244_p2[80:51]}};

assign tmp_75_fu_455_p3 = bitcast_ln696_fu_452_p1[32'd31];

assign tmp_fu_352_p3 = {{1'd1}, {trunc_ln565_fu_348_p1}};

assign trunc_ln556_fu_322_p1 = ireg_V_fu_318_p1[62:0];

assign trunc_ln565_fu_348_p1 = ireg_V_fu_318_p1[51:0];

assign trunc_ln583_fu_422_p1 = man_V_2_fu_370_p3[39:0];

assign trunc_ln586_fu_448_p1 = ashr_ln586_fu_443_p2[39:0];

assign weight_address0 = zext_ln94_fu_312_p1;

assign xor_ln571_fu_480_p2 = (icmp_ln571_reg_700 ^ 1'd1);

assign xor_ln581_fu_528_p2 = (or_ln581_fu_523_p2 ^ 1'd1);

assign xor_ln582_fu_494_p2 = (or_ln582_fu_490_p2 ^ 1'd1);

assign xor_ln585_fu_505_p2 = (icmp_ln585_fu_429_p2 ^ 1'd1);

assign zext_ln1118_fu_296_p1 = grp_fu_290_p2;

assign zext_ln461_fu_344_p1 = exp_tmp_V_fu_334_p4;

assign zext_ln586_fu_439_p1 = $unsigned(sext_ln581_fu_426_p1);

assign zext_ln604_fu_471_p1 = $unsigned(sext_ln581_fu_426_p1);

assign zext_ln89_fu_186_p1 = i_0_reg_139;

assign zext_ln94_fu_312_p1 = i1_0_reg_150;

always @ (posedge ap_clk) begin
    zext_ln1118_reg_666[71:33] <= 39'b000000000000000000000000000000000000000;
end

endmodule //rms_norm_1536_s
