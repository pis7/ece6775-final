// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_q0,
        scales_0_V_read,
        packed_weights_0_address0,
        packed_weights_0_ce0,
        packed_weights_0_q0,
        packed_weights_1_address0,
        packed_weights_1_ce0,
        packed_weights_1_q0,
        packed_weights_2_address0,
        packed_weights_2_ce0,
        packed_weights_2_q0,
        packed_weights_3_address0,
        packed_weights_3_ce0,
        packed_weights_3_q0,
        w_scale_V
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state82 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
output  [3:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;
input  [39:0] output_0_V_q0;
input  [39:0] scales_0_V_read;
output  [3:0] packed_weights_0_address0;
output   packed_weights_0_ce0;
input  [7:0] packed_weights_0_q0;
output  [3:0] packed_weights_1_address0;
output   packed_weights_1_ce0;
input  [7:0] packed_weights_1_q0;
output  [3:0] packed_weights_2_address0;
output   packed_weights_2_ce0;
input  [7:0] packed_weights_2_q0;
output  [3:0] packed_weights_3_address0;
output   packed_weights_3_ce0;
input  [7:0] packed_weights_3_q0;
input  [21:0] w_scale_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg packed_weights_0_ce0;
reg packed_weights_1_ce0;
reg packed_weights_2_ce0;
reg packed_weights_3_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] j_0_0_reg_283;
wire  signed [71:0] sext_ln701_fu_308_p1;
reg  signed [71:0] sext_ln701_reg_1381;
wire   [7:0] xor_ln701_15_fu_312_p2;
reg   [7:0] xor_ln701_15_reg_1386;
wire   [7:0] xor_ln701_14_fu_318_p2;
reg   [7:0] xor_ln701_14_reg_1391;
wire   [7:0] xor_ln701_13_fu_324_p2;
reg   [7:0] xor_ln701_13_reg_1396;
wire   [7:0] xor_ln701_12_fu_330_p2;
reg   [7:0] xor_ln701_12_reg_1401;
wire   [7:0] xor_ln701_11_fu_336_p2;
reg   [7:0] xor_ln701_11_reg_1406;
wire   [7:0] xor_ln701_10_fu_342_p2;
reg   [7:0] xor_ln701_10_reg_1411;
wire   [7:0] xor_ln701_9_fu_348_p2;
reg   [7:0] xor_ln701_9_reg_1416;
wire   [7:0] xor_ln701_8_fu_354_p2;
reg   [7:0] xor_ln701_8_reg_1421;
wire   [7:0] xor_ln701_7_fu_360_p2;
reg   [7:0] xor_ln701_7_reg_1426;
wire   [7:0] xor_ln701_6_fu_366_p2;
reg   [7:0] xor_ln701_6_reg_1431;
wire   [7:0] xor_ln701_5_fu_372_p2;
reg   [7:0] xor_ln701_5_reg_1436;
wire   [7:0] xor_ln701_4_fu_378_p2;
reg   [7:0] xor_ln701_4_reg_1441;
wire   [7:0] xor_ln701_3_fu_384_p2;
reg   [7:0] xor_ln701_3_reg_1446;
wire   [7:0] xor_ln701_2_fu_390_p2;
reg   [7:0] xor_ln701_2_reg_1451;
wire   [7:0] xor_ln701_1_fu_396_p2;
reg   [7:0] xor_ln701_1_reg_1456;
wire   [7:0] xor_ln701_fu_402_p2;
reg   [7:0] xor_ln701_reg_1461;
wire   [0:0] icmp_ln157_fu_408_p2;
reg   [0:0] icmp_ln157_reg_1466;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state18_pp0_stage0_iter8;
wire    ap_block_state20_pp0_stage0_iter9;
wire    ap_block_state22_pp0_stage0_iter10;
wire    ap_block_state24_pp0_stage0_iter11;
wire    ap_block_state26_pp0_stage0_iter12;
wire    ap_block_state28_pp0_stage0_iter13;
wire    ap_block_state30_pp0_stage0_iter14;
wire    ap_block_state32_pp0_stage0_iter15;
wire    ap_block_state34_pp0_stage0_iter16;
wire    ap_block_state36_pp0_stage0_iter17;
wire    ap_block_state38_pp0_stage0_iter18;
wire    ap_block_state40_pp0_stage0_iter19;
wire    ap_block_state42_pp0_stage0_iter20;
wire    ap_block_state44_pp0_stage0_iter21;
wire    ap_block_state46_pp0_stage0_iter22;
wire    ap_block_state48_pp0_stage0_iter23;
wire    ap_block_state50_pp0_stage0_iter24;
wire    ap_block_state52_pp0_stage0_iter25;
wire    ap_block_state54_pp0_stage0_iter26;
wire    ap_block_state56_pp0_stage0_iter27;
wire    ap_block_state58_pp0_stage0_iter28;
wire    ap_block_state60_pp0_stage0_iter29;
wire    ap_block_state62_pp0_stage0_iter30;
wire    ap_block_state64_pp0_stage0_iter31;
wire    ap_block_state66_pp0_stage0_iter32;
wire    ap_block_state68_pp0_stage0_iter33;
wire    ap_block_state70_pp0_stage0_iter34;
wire    ap_block_state72_pp0_stage0_iter35;
wire    ap_block_state74_pp0_stage0_iter36;
wire    ap_block_state76_pp0_stage0_iter37;
wire    ap_block_state78_pp0_stage0_iter38;
wire    ap_block_state80_pp0_stage0_iter39;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter1_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter2_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter3_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter4_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter5_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter6_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter7_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter8_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter9_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter10_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter11_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter12_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter13_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter14_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter15_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter16_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter17_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter18_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter19_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter20_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter21_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter22_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter23_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter24_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter25_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter26_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter27_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter28_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter29_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter30_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter31_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter32_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter33_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter34_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter35_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter36_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter37_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter38_reg;
reg   [0:0] icmp_ln157_reg_1466_pp0_iter39_reg;
wire   [4:0] add_ln157_fu_414_p2;
reg   [4:0] add_ln157_reg_1470;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] output_0_V_addr_reg_1475;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter1_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter2_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter3_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter4_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter5_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter6_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter7_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter8_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter9_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter10_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter11_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter12_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter13_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter14_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter15_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter16_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter17_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter18_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter19_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter20_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter21_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter22_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter23_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter24_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter25_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter26_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter27_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter28_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter29_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter30_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter31_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter32_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter33_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter34_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter35_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter36_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter37_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter38_reg;
reg   [3:0] output_0_V_addr_reg_1475_pp0_iter39_reg;
wire   [1:0] trunc_ln162_fu_429_p1;
reg   [1:0] trunc_ln162_reg_1500;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
wire    ap_block_state13_pp0_stage1_iter5;
wire    ap_block_state15_pp0_stage1_iter6;
wire    ap_block_state17_pp0_stage1_iter7;
wire    ap_block_state19_pp0_stage1_iter8;
wire    ap_block_state21_pp0_stage1_iter9;
wire    ap_block_state23_pp0_stage1_iter10;
wire    ap_block_state25_pp0_stage1_iter11;
wire    ap_block_state27_pp0_stage1_iter12;
wire    ap_block_state29_pp0_stage1_iter13;
wire    ap_block_state31_pp0_stage1_iter14;
wire    ap_block_state33_pp0_stage1_iter15;
wire    ap_block_state35_pp0_stage1_iter16;
wire    ap_block_state37_pp0_stage1_iter17;
wire    ap_block_state39_pp0_stage1_iter18;
wire    ap_block_state41_pp0_stage1_iter19;
wire    ap_block_state43_pp0_stage1_iter20;
wire    ap_block_state45_pp0_stage1_iter21;
wire    ap_block_state47_pp0_stage1_iter22;
wire    ap_block_state49_pp0_stage1_iter23;
wire    ap_block_state51_pp0_stage1_iter24;
wire    ap_block_state53_pp0_stage1_iter25;
wire    ap_block_state55_pp0_stage1_iter26;
wire    ap_block_state57_pp0_stage1_iter27;
wire    ap_block_state59_pp0_stage1_iter28;
wire    ap_block_state61_pp0_stage1_iter29;
wire    ap_block_state63_pp0_stage1_iter30;
wire    ap_block_state65_pp0_stage1_iter31;
wire    ap_block_state67_pp0_stage1_iter32;
wire    ap_block_state69_pp0_stage1_iter33;
wire    ap_block_state71_pp0_stage1_iter34;
wire    ap_block_state73_pp0_stage1_iter35;
wire    ap_block_state75_pp0_stage1_iter36;
wire    ap_block_state77_pp0_stage1_iter37;
wire    ap_block_state79_pp0_stage1_iter38;
wire    ap_block_state81_pp0_stage1_iter39;
wire    ap_block_pp0_stage1_11001;
reg   [39:0] output_0_V_load_reg_1506;
reg   [1:0] trunc_ln162_3_reg_1511;
wire   [0:0] icmp_ln164_2_fu_453_p2;
reg   [0:0] icmp_ln164_2_reg_1517;
wire   [0:0] icmp_ln165_2_fu_459_p2;
reg   [0:0] icmp_ln165_2_reg_1522;
reg   [1:0] trunc_ln_reg_1527;
wire   [1:0] trunc_ln162_2_fu_475_p1;
reg   [1:0] trunc_ln162_2_reg_1533;
reg   [1:0] trunc_ln162_8_reg_1539;
reg   [1:0] trunc_ln162_9_reg_1545;
reg   [1:0] trunc_ln164_1_reg_1551;
wire   [0:0] icmp_ln164_8_fu_513_p2;
reg   [0:0] icmp_ln164_8_reg_1557;
wire   [0:0] icmp_ln165_8_fu_519_p2;
reg   [0:0] icmp_ln165_8_reg_1562;
reg   [1:0] trunc_ln162_1_reg_1567;
wire   [0:0] icmp_ln164_10_fu_545_p2;
reg   [0:0] icmp_ln164_10_reg_1573;
wire   [0:0] icmp_ln165_10_fu_551_p2;
reg   [0:0] icmp_ln165_10_reg_1578;
reg   [1:0] trunc_ln164_2_reg_1583;
wire   [0:0] icmp_ln164_12_fu_571_p2;
reg   [0:0] icmp_ln164_12_reg_1589;
wire   [0:0] icmp_ln165_12_fu_577_p2;
reg   [0:0] icmp_ln165_12_reg_1594;
reg   [1:0] trunc_ln162_s_reg_1599;
wire   [24:0] add_ln703_38_fu_689_p2;
reg   [24:0] add_ln703_38_reg_1605;
wire   [39:0] add_ln703_29_fu_1166_p2;
reg   [39:0] add_ln703_29_reg_1610;
wire   [25:0] add_ln703_32_fu_1192_p2;
reg   [25:0] add_ln703_32_reg_1615;
wire   [27:0] add_ln703_41_fu_1261_p2;
reg   [27:0] add_ln703_41_reg_1620;
wire   [39:0] add_ln703_42_fu_1278_p2;
reg   [39:0] add_ln703_42_reg_1625;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg   [4:0] ap_phi_mux_j_0_0_phi_fu_287_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln159_fu_420_p1;
wire    ap_block_pp0_stage1;
wire   [21:0] mul_ln1148_fu_302_p0;
wire  signed [39:0] mul_ln1148_fu_302_p1;
wire   [60:0] mul_ln1148_fu_302_p2;
wire   [1:0] trunc_ln162_4_fu_443_p4;
wire   [1:0] trunc_ln162_6_fu_509_p1;
wire   [1:0] trunc_ln162_5_fu_535_p4;
wire   [1:0] trunc_ln162_7_fu_567_p1;
wire   [1:0] trunc_ln162_10_fu_593_p4;
wire   [0:0] icmp_ln165_14_fu_609_p2;
wire   [0:0] icmp_ln164_14_fu_603_p2;
wire   [7:0] select_ln165_14_fu_615_p3;
wire   [7:0] select_ln164_14_fu_622_p3;
wire   [23:0] shl_ln703_13_fu_629_p3;
wire   [1:0] trunc_ln164_3_fu_641_p4;
wire   [0:0] icmp_ln165_15_fu_657_p2;
wire   [0:0] icmp_ln164_15_fu_651_p2;
wire   [7:0] select_ln165_15_fu_663_p3;
wire   [7:0] select_ln164_15_fu_670_p3;
wire   [23:0] shl_ln703_14_fu_677_p3;
wire  signed [24:0] sext_ln703_14_fu_637_p1;
wire  signed [24:0] sext_ln703_15_fu_685_p1;
wire   [0:0] icmp_ln165_fu_700_p2;
wire   [0:0] icmp_ln164_fu_695_p2;
wire   [7:0] select_ln165_fu_705_p3;
wire   [7:0] select_ln164_fu_712_p3;
wire   [23:0] shl_ln_fu_719_p3;
wire   [0:0] icmp_ln165_1_fu_736_p2;
wire   [0:0] icmp_ln164_1_fu_731_p2;
wire   [7:0] select_ln165_1_fu_741_p3;
wire   [7:0] select_ln164_1_fu_748_p3;
wire   [23:0] shl_ln703_1_fu_755_p3;
wire   [7:0] select_ln165_2_fu_767_p3;
wire   [7:0] select_ln164_2_fu_773_p3;
wire   [23:0] shl_ln703_2_fu_779_p3;
wire   [0:0] icmp_ln165_3_fu_796_p2;
wire   [0:0] icmp_ln164_3_fu_791_p2;
wire   [7:0] select_ln165_3_fu_801_p3;
wire   [7:0] select_ln164_3_fu_808_p3;
wire   [23:0] shl_ln703_3_fu_815_p3;
wire   [0:0] icmp_ln165_4_fu_832_p2;
wire   [0:0] icmp_ln164_4_fu_827_p2;
wire   [7:0] select_ln165_4_fu_837_p3;
wire   [7:0] select_ln164_4_fu_844_p3;
wire   [23:0] shl_ln703_4_fu_851_p3;
wire   [0:0] icmp_ln165_5_fu_868_p2;
wire   [0:0] icmp_ln164_5_fu_863_p2;
wire   [7:0] select_ln165_5_fu_873_p3;
wire   [7:0] select_ln164_5_fu_880_p3;
wire   [23:0] shl_ln703_5_fu_887_p3;
wire   [0:0] icmp_ln165_6_fu_904_p2;
wire   [0:0] icmp_ln164_6_fu_899_p2;
wire   [7:0] select_ln165_6_fu_909_p3;
wire   [7:0] select_ln164_6_fu_916_p3;
wire   [23:0] shl_ln703_6_fu_923_p3;
wire   [0:0] icmp_ln165_7_fu_940_p2;
wire   [0:0] icmp_ln164_7_fu_935_p2;
wire   [7:0] select_ln165_7_fu_945_p3;
wire   [7:0] select_ln164_7_fu_952_p3;
wire   [23:0] shl_ln703_7_fu_959_p3;
wire   [7:0] select_ln165_8_fu_971_p3;
wire   [7:0] select_ln164_8_fu_977_p3;
wire   [23:0] shl_ln703_8_fu_983_p3;
wire   [0:0] icmp_ln165_9_fu_1000_p2;
wire   [0:0] icmp_ln164_9_fu_995_p2;
wire   [7:0] select_ln165_9_fu_1005_p3;
wire   [7:0] select_ln164_9_fu_1012_p3;
wire   [23:0] shl_ln703_9_fu_1019_p3;
wire   [7:0] select_ln165_10_fu_1031_p3;
wire   [7:0] select_ln164_10_fu_1037_p3;
wire   [23:0] shl_ln703_s_fu_1043_p3;
wire   [0:0] icmp_ln165_11_fu_1060_p2;
wire   [0:0] icmp_ln164_11_fu_1055_p2;
wire   [7:0] select_ln165_11_fu_1065_p3;
wire   [7:0] select_ln164_11_fu_1072_p3;
wire   [23:0] shl_ln703_10_fu_1079_p3;
wire   [7:0] select_ln165_12_fu_1091_p3;
wire   [7:0] select_ln164_12_fu_1097_p3;
wire   [23:0] shl_ln703_11_fu_1103_p3;
wire   [0:0] icmp_ln165_13_fu_1120_p2;
wire   [0:0] icmp_ln164_13_fu_1115_p2;
wire   [7:0] select_ln165_13_fu_1125_p3;
wire   [7:0] select_ln164_13_fu_1132_p3;
wire   [23:0] shl_ln703_12_fu_1139_p3;
wire  signed [39:0] sext_ln703_fu_727_p1;
wire  signed [24:0] sext_ln703_1_fu_763_p1;
wire  signed [24:0] sext_ln703_2_fu_787_p1;
wire   [24:0] add_ln703_28_fu_1156_p2;
wire  signed [39:0] sext_ln703_16_fu_1162_p1;
wire   [39:0] add_ln703_fu_1151_p2;
wire  signed [24:0] sext_ln703_3_fu_823_p1;
wire  signed [24:0] sext_ln703_4_fu_859_p1;
wire   [24:0] add_ln703_30_fu_1172_p2;
wire  signed [24:0] sext_ln703_5_fu_895_p1;
wire  signed [24:0] sext_ln703_6_fu_931_p1;
wire   [24:0] add_ln703_31_fu_1182_p2;
wire  signed [25:0] sext_ln703_18_fu_1188_p1;
wire  signed [25:0] sext_ln703_17_fu_1178_p1;
wire  signed [24:0] sext_ln703_7_fu_967_p1;
wire  signed [24:0] sext_ln703_8_fu_991_p1;
wire   [24:0] add_ln703_34_fu_1198_p2;
wire  signed [24:0] sext_ln703_9_fu_1027_p1;
wire  signed [24:0] sext_ln703_10_fu_1051_p1;
wire   [24:0] add_ln703_35_fu_1208_p2;
wire  signed [25:0] sext_ln703_21_fu_1214_p1;
wire  signed [25:0] sext_ln703_20_fu_1204_p1;
wire   [25:0] add_ln703_36_fu_1218_p2;
wire  signed [24:0] sext_ln703_11_fu_1087_p1;
wire  signed [24:0] sext_ln703_12_fu_1111_p1;
wire   [24:0] add_ln703_37_fu_1228_p2;
wire  signed [25:0] sext_ln703_24_fu_1238_p1;
wire  signed [25:0] sext_ln703_13_fu_1147_p1;
wire   [25:0] add_ln703_39_fu_1241_p2;
wire  signed [26:0] sext_ln703_25_fu_1247_p1;
wire  signed [26:0] sext_ln703_23_fu_1234_p1;
wire   [26:0] add_ln703_40_fu_1251_p2;
wire  signed [27:0] sext_ln703_26_fu_1257_p1;
wire  signed [27:0] sext_ln703_22_fu_1224_p1;
wire  signed [39:0] sext_ln703_19_fu_1267_p1;
wire  signed [39:0] sext_ln703_27_fu_1275_p1;
wire   [39:0] add_ln703_33_fu_1270_p2;
wire   [71:0] grp_fu_1291_p0;
wire  signed [60:0] grp_fu_1291_p1;
wire   [39:0] grp_fu_1291_p2;
wire    ap_CS_fsm_state82;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [60:0] mul_ln1148_fu_302_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
end

dut_sdiv_72ns_61seOg #(
    .ID( 1 ),
    .NUM_STAGE( 76 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 61 ),
    .dout_WIDTH( 40 ))
dut_sdiv_72ns_61seOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1291_p0),
    .din1(grp_fu_1291_p1),
    .ce(1'b1),
    .dout(grp_fu_1291_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter39 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln157_reg_1466 == 1'd0))) begin
        j_0_0_reg_283 <= add_ln157_reg_1470;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_283 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln157_reg_1470 <= add_ln157_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln157_reg_1466 == 1'd0))) begin
        add_ln703_29_reg_1610 <= add_ln703_29_fu_1166_p2;
        add_ln703_32_reg_1615[25 : 16] <= add_ln703_32_fu_1192_p2[25 : 16];
        add_ln703_41_reg_1620[27 : 16] <= add_ln703_41_fu_1261_p2[27 : 16];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln157_reg_1466 == 1'd0))) begin
        add_ln703_38_reg_1605[24 : 16] <= add_ln703_38_fu_689_p2[24 : 16];
        icmp_ln164_10_reg_1573 <= icmp_ln164_10_fu_545_p2;
        icmp_ln164_12_reg_1589 <= icmp_ln164_12_fu_571_p2;
        icmp_ln164_2_reg_1517 <= icmp_ln164_2_fu_453_p2;
        icmp_ln164_8_reg_1557 <= icmp_ln164_8_fu_513_p2;
        icmp_ln165_10_reg_1578 <= icmp_ln165_10_fu_551_p2;
        icmp_ln165_12_reg_1594 <= icmp_ln165_12_fu_577_p2;
        icmp_ln165_2_reg_1522 <= icmp_ln165_2_fu_459_p2;
        icmp_ln165_8_reg_1562 <= icmp_ln165_8_fu_519_p2;
        trunc_ln162_1_reg_1567 <= {{packed_weights_2_q0[3:2]}};
        trunc_ln162_2_reg_1533 <= trunc_ln162_2_fu_475_p1;
        trunc_ln162_3_reg_1511 <= {{packed_weights_0_q0[3:2]}};
        trunc_ln162_8_reg_1539 <= {{packed_weights_1_q0[3:2]}};
        trunc_ln162_9_reg_1545 <= {{packed_weights_1_q0[5:4]}};
        trunc_ln162_reg_1500 <= trunc_ln162_fu_429_p1;
        trunc_ln162_s_reg_1599 <= {{packed_weights_3_q0[3:2]}};
        trunc_ln164_1_reg_1551 <= {{packed_weights_1_q0[7:6]}};
        trunc_ln164_2_reg_1583 <= {{packed_weights_2_q0[7:6]}};
        trunc_ln_reg_1527 <= {{packed_weights_0_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln157_reg_1466_pp0_iter1_reg == 1'd0))) begin
        add_ln703_42_reg_1625 <= add_ln703_42_fu_1278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln157_reg_1466 <= icmp_ln157_fu_408_p2;
        icmp_ln157_reg_1466_pp0_iter10_reg <= icmp_ln157_reg_1466_pp0_iter9_reg;
        icmp_ln157_reg_1466_pp0_iter11_reg <= icmp_ln157_reg_1466_pp0_iter10_reg;
        icmp_ln157_reg_1466_pp0_iter12_reg <= icmp_ln157_reg_1466_pp0_iter11_reg;
        icmp_ln157_reg_1466_pp0_iter13_reg <= icmp_ln157_reg_1466_pp0_iter12_reg;
        icmp_ln157_reg_1466_pp0_iter14_reg <= icmp_ln157_reg_1466_pp0_iter13_reg;
        icmp_ln157_reg_1466_pp0_iter15_reg <= icmp_ln157_reg_1466_pp0_iter14_reg;
        icmp_ln157_reg_1466_pp0_iter16_reg <= icmp_ln157_reg_1466_pp0_iter15_reg;
        icmp_ln157_reg_1466_pp0_iter17_reg <= icmp_ln157_reg_1466_pp0_iter16_reg;
        icmp_ln157_reg_1466_pp0_iter18_reg <= icmp_ln157_reg_1466_pp0_iter17_reg;
        icmp_ln157_reg_1466_pp0_iter19_reg <= icmp_ln157_reg_1466_pp0_iter18_reg;
        icmp_ln157_reg_1466_pp0_iter1_reg <= icmp_ln157_reg_1466;
        icmp_ln157_reg_1466_pp0_iter20_reg <= icmp_ln157_reg_1466_pp0_iter19_reg;
        icmp_ln157_reg_1466_pp0_iter21_reg <= icmp_ln157_reg_1466_pp0_iter20_reg;
        icmp_ln157_reg_1466_pp0_iter22_reg <= icmp_ln157_reg_1466_pp0_iter21_reg;
        icmp_ln157_reg_1466_pp0_iter23_reg <= icmp_ln157_reg_1466_pp0_iter22_reg;
        icmp_ln157_reg_1466_pp0_iter24_reg <= icmp_ln157_reg_1466_pp0_iter23_reg;
        icmp_ln157_reg_1466_pp0_iter25_reg <= icmp_ln157_reg_1466_pp0_iter24_reg;
        icmp_ln157_reg_1466_pp0_iter26_reg <= icmp_ln157_reg_1466_pp0_iter25_reg;
        icmp_ln157_reg_1466_pp0_iter27_reg <= icmp_ln157_reg_1466_pp0_iter26_reg;
        icmp_ln157_reg_1466_pp0_iter28_reg <= icmp_ln157_reg_1466_pp0_iter27_reg;
        icmp_ln157_reg_1466_pp0_iter29_reg <= icmp_ln157_reg_1466_pp0_iter28_reg;
        icmp_ln157_reg_1466_pp0_iter2_reg <= icmp_ln157_reg_1466_pp0_iter1_reg;
        icmp_ln157_reg_1466_pp0_iter30_reg <= icmp_ln157_reg_1466_pp0_iter29_reg;
        icmp_ln157_reg_1466_pp0_iter31_reg <= icmp_ln157_reg_1466_pp0_iter30_reg;
        icmp_ln157_reg_1466_pp0_iter32_reg <= icmp_ln157_reg_1466_pp0_iter31_reg;
        icmp_ln157_reg_1466_pp0_iter33_reg <= icmp_ln157_reg_1466_pp0_iter32_reg;
        icmp_ln157_reg_1466_pp0_iter34_reg <= icmp_ln157_reg_1466_pp0_iter33_reg;
        icmp_ln157_reg_1466_pp0_iter35_reg <= icmp_ln157_reg_1466_pp0_iter34_reg;
        icmp_ln157_reg_1466_pp0_iter36_reg <= icmp_ln157_reg_1466_pp0_iter35_reg;
        icmp_ln157_reg_1466_pp0_iter37_reg <= icmp_ln157_reg_1466_pp0_iter36_reg;
        icmp_ln157_reg_1466_pp0_iter38_reg <= icmp_ln157_reg_1466_pp0_iter37_reg;
        icmp_ln157_reg_1466_pp0_iter39_reg <= icmp_ln157_reg_1466_pp0_iter38_reg;
        icmp_ln157_reg_1466_pp0_iter3_reg <= icmp_ln157_reg_1466_pp0_iter2_reg;
        icmp_ln157_reg_1466_pp0_iter4_reg <= icmp_ln157_reg_1466_pp0_iter3_reg;
        icmp_ln157_reg_1466_pp0_iter5_reg <= icmp_ln157_reg_1466_pp0_iter4_reg;
        icmp_ln157_reg_1466_pp0_iter6_reg <= icmp_ln157_reg_1466_pp0_iter5_reg;
        icmp_ln157_reg_1466_pp0_iter7_reg <= icmp_ln157_reg_1466_pp0_iter6_reg;
        icmp_ln157_reg_1466_pp0_iter8_reg <= icmp_ln157_reg_1466_pp0_iter7_reg;
        icmp_ln157_reg_1466_pp0_iter9_reg <= icmp_ln157_reg_1466_pp0_iter8_reg;
        output_0_V_addr_reg_1475_pp0_iter10_reg <= output_0_V_addr_reg_1475_pp0_iter9_reg;
        output_0_V_addr_reg_1475_pp0_iter11_reg <= output_0_V_addr_reg_1475_pp0_iter10_reg;
        output_0_V_addr_reg_1475_pp0_iter12_reg <= output_0_V_addr_reg_1475_pp0_iter11_reg;
        output_0_V_addr_reg_1475_pp0_iter13_reg <= output_0_V_addr_reg_1475_pp0_iter12_reg;
        output_0_V_addr_reg_1475_pp0_iter14_reg <= output_0_V_addr_reg_1475_pp0_iter13_reg;
        output_0_V_addr_reg_1475_pp0_iter15_reg <= output_0_V_addr_reg_1475_pp0_iter14_reg;
        output_0_V_addr_reg_1475_pp0_iter16_reg <= output_0_V_addr_reg_1475_pp0_iter15_reg;
        output_0_V_addr_reg_1475_pp0_iter17_reg <= output_0_V_addr_reg_1475_pp0_iter16_reg;
        output_0_V_addr_reg_1475_pp0_iter18_reg <= output_0_V_addr_reg_1475_pp0_iter17_reg;
        output_0_V_addr_reg_1475_pp0_iter19_reg <= output_0_V_addr_reg_1475_pp0_iter18_reg;
        output_0_V_addr_reg_1475_pp0_iter1_reg <= output_0_V_addr_reg_1475;
        output_0_V_addr_reg_1475_pp0_iter20_reg <= output_0_V_addr_reg_1475_pp0_iter19_reg;
        output_0_V_addr_reg_1475_pp0_iter21_reg <= output_0_V_addr_reg_1475_pp0_iter20_reg;
        output_0_V_addr_reg_1475_pp0_iter22_reg <= output_0_V_addr_reg_1475_pp0_iter21_reg;
        output_0_V_addr_reg_1475_pp0_iter23_reg <= output_0_V_addr_reg_1475_pp0_iter22_reg;
        output_0_V_addr_reg_1475_pp0_iter24_reg <= output_0_V_addr_reg_1475_pp0_iter23_reg;
        output_0_V_addr_reg_1475_pp0_iter25_reg <= output_0_V_addr_reg_1475_pp0_iter24_reg;
        output_0_V_addr_reg_1475_pp0_iter26_reg <= output_0_V_addr_reg_1475_pp0_iter25_reg;
        output_0_V_addr_reg_1475_pp0_iter27_reg <= output_0_V_addr_reg_1475_pp0_iter26_reg;
        output_0_V_addr_reg_1475_pp0_iter28_reg <= output_0_V_addr_reg_1475_pp0_iter27_reg;
        output_0_V_addr_reg_1475_pp0_iter29_reg <= output_0_V_addr_reg_1475_pp0_iter28_reg;
        output_0_V_addr_reg_1475_pp0_iter2_reg <= output_0_V_addr_reg_1475_pp0_iter1_reg;
        output_0_V_addr_reg_1475_pp0_iter30_reg <= output_0_V_addr_reg_1475_pp0_iter29_reg;
        output_0_V_addr_reg_1475_pp0_iter31_reg <= output_0_V_addr_reg_1475_pp0_iter30_reg;
        output_0_V_addr_reg_1475_pp0_iter32_reg <= output_0_V_addr_reg_1475_pp0_iter31_reg;
        output_0_V_addr_reg_1475_pp0_iter33_reg <= output_0_V_addr_reg_1475_pp0_iter32_reg;
        output_0_V_addr_reg_1475_pp0_iter34_reg <= output_0_V_addr_reg_1475_pp0_iter33_reg;
        output_0_V_addr_reg_1475_pp0_iter35_reg <= output_0_V_addr_reg_1475_pp0_iter34_reg;
        output_0_V_addr_reg_1475_pp0_iter36_reg <= output_0_V_addr_reg_1475_pp0_iter35_reg;
        output_0_V_addr_reg_1475_pp0_iter37_reg <= output_0_V_addr_reg_1475_pp0_iter36_reg;
        output_0_V_addr_reg_1475_pp0_iter38_reg <= output_0_V_addr_reg_1475_pp0_iter37_reg;
        output_0_V_addr_reg_1475_pp0_iter39_reg <= output_0_V_addr_reg_1475_pp0_iter38_reg;
        output_0_V_addr_reg_1475_pp0_iter3_reg <= output_0_V_addr_reg_1475_pp0_iter2_reg;
        output_0_V_addr_reg_1475_pp0_iter4_reg <= output_0_V_addr_reg_1475_pp0_iter3_reg;
        output_0_V_addr_reg_1475_pp0_iter5_reg <= output_0_V_addr_reg_1475_pp0_iter4_reg;
        output_0_V_addr_reg_1475_pp0_iter6_reg <= output_0_V_addr_reg_1475_pp0_iter5_reg;
        output_0_V_addr_reg_1475_pp0_iter7_reg <= output_0_V_addr_reg_1475_pp0_iter6_reg;
        output_0_V_addr_reg_1475_pp0_iter8_reg <= output_0_V_addr_reg_1475_pp0_iter7_reg;
        output_0_V_addr_reg_1475_pp0_iter9_reg <= output_0_V_addr_reg_1475_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln157_fu_408_p2 == 1'd0))) begin
        output_0_V_addr_reg_1475 <= zext_ln159_fu_420_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln157_reg_1466 == 1'd0))) begin
        output_0_V_load_reg_1506 <= output_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln701_reg_1381 <= sext_ln701_fu_308_p1;
        xor_ln701_10_reg_1411 <= xor_ln701_10_fu_342_p2;
        xor_ln701_11_reg_1406 <= xor_ln701_11_fu_336_p2;
        xor_ln701_12_reg_1401 <= xor_ln701_12_fu_330_p2;
        xor_ln701_13_reg_1396 <= xor_ln701_13_fu_324_p2;
        xor_ln701_14_reg_1391 <= xor_ln701_14_fu_318_p2;
        xor_ln701_15_reg_1386 <= xor_ln701_15_fu_312_p2;
        xor_ln701_1_reg_1456 <= xor_ln701_1_fu_396_p2;
        xor_ln701_2_reg_1451 <= xor_ln701_2_fu_390_p2;
        xor_ln701_3_reg_1446 <= xor_ln701_3_fu_384_p2;
        xor_ln701_4_reg_1441 <= xor_ln701_4_fu_378_p2;
        xor_ln701_5_reg_1436 <= xor_ln701_5_fu_372_p2;
        xor_ln701_6_reg_1431 <= xor_ln701_6_fu_366_p2;
        xor_ln701_7_reg_1426 <= xor_ln701_7_fu_360_p2;
        xor_ln701_8_reg_1421 <= xor_ln701_8_fu_354_p2;
        xor_ln701_9_reg_1416 <= xor_ln701_9_fu_348_p2;
        xor_ln701_reg_1461 <= xor_ln701_fu_402_p2;
    end
end

always @ (*) begin
    if ((icmp_ln157_fu_408_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln157_reg_1466 == 1'd0))) begin
        ap_phi_mux_j_0_0_phi_fu_287_p4 = add_ln157_reg_1470;
    end else begin
        ap_phi_mux_j_0_0_phi_fu_287_p4 = j_0_0_reg_283;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter39 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_V_address0 = output_0_V_addr_reg_1475_pp0_iter39_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_0_V_address0 = zext_ln159_fu_420_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln157_reg_1466_pp0_iter39_reg == 1'd0) & (ap_enable_reg_pp0_iter39 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        packed_weights_0_ce0 = 1'b1;
    end else begin
        packed_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        packed_weights_1_ce0 = 1'b1;
    end else begin
        packed_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        packed_weights_2_ce0 = 1'b1;
    end else begin
        packed_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        packed_weights_3_ce0 = 1'b1;
    end else begin
        packed_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln157_fu_408_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln157_fu_408_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter38 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter39 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter38 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter39 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln157_fu_414_p2 = (ap_phi_mux_j_0_0_phi_fu_287_p4 + 5'd1);

assign add_ln703_28_fu_1156_p2 = ($signed(sext_ln703_1_fu_763_p1) + $signed(sext_ln703_2_fu_787_p1));

assign add_ln703_29_fu_1166_p2 = ($signed(sext_ln703_16_fu_1162_p1) + $signed(add_ln703_fu_1151_p2));

assign add_ln703_30_fu_1172_p2 = ($signed(sext_ln703_3_fu_823_p1) + $signed(sext_ln703_4_fu_859_p1));

assign add_ln703_31_fu_1182_p2 = ($signed(sext_ln703_5_fu_895_p1) + $signed(sext_ln703_6_fu_931_p1));

assign add_ln703_32_fu_1192_p2 = ($signed(sext_ln703_18_fu_1188_p1) + $signed(sext_ln703_17_fu_1178_p1));

assign add_ln703_33_fu_1270_p2 = ($signed(sext_ln703_19_fu_1267_p1) + $signed(add_ln703_29_reg_1610));

assign add_ln703_34_fu_1198_p2 = ($signed(sext_ln703_7_fu_967_p1) + $signed(sext_ln703_8_fu_991_p1));

assign add_ln703_35_fu_1208_p2 = ($signed(sext_ln703_9_fu_1027_p1) + $signed(sext_ln703_10_fu_1051_p1));

assign add_ln703_36_fu_1218_p2 = ($signed(sext_ln703_21_fu_1214_p1) + $signed(sext_ln703_20_fu_1204_p1));

assign add_ln703_37_fu_1228_p2 = ($signed(sext_ln703_11_fu_1087_p1) + $signed(sext_ln703_12_fu_1111_p1));

assign add_ln703_38_fu_689_p2 = ($signed(sext_ln703_14_fu_637_p1) + $signed(sext_ln703_15_fu_685_p1));

assign add_ln703_39_fu_1241_p2 = ($signed(sext_ln703_24_fu_1238_p1) + $signed(sext_ln703_13_fu_1147_p1));

assign add_ln703_40_fu_1251_p2 = ($signed(sext_ln703_25_fu_1247_p1) + $signed(sext_ln703_23_fu_1234_p1));

assign add_ln703_41_fu_1261_p2 = ($signed(sext_ln703_26_fu_1257_p1) + $signed(sext_ln703_22_fu_1224_p1));

assign add_ln703_42_fu_1278_p2 = ($signed(sext_ln703_27_fu_1275_p1) + $signed(add_ln703_33_fu_1270_p2));

assign add_ln703_fu_1151_p2 = ($signed(output_0_V_load_reg_1506) + $signed(sext_ln703_fu_727_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage1_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage1_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage1_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage1_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage1_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage1_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage1_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage1_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage1_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage1_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage1_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_1291_p0 = {{add_ln703_42_reg_1625}, {32'd0}};

assign grp_fu_1291_p1 = sext_ln701_reg_1381;

assign icmp_ln157_fu_408_p2 = ((ap_phi_mux_j_0_0_phi_fu_287_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln164_10_fu_545_p2 = ((trunc_ln162_5_fu_535_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_11_fu_1055_p2 = ((trunc_ln164_2_reg_1583 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_12_fu_571_p2 = ((trunc_ln162_7_fu_567_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_13_fu_1115_p2 = ((trunc_ln162_s_reg_1599 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_14_fu_603_p2 = ((trunc_ln162_10_fu_593_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_15_fu_651_p2 = ((trunc_ln164_3_fu_641_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_1_fu_731_p2 = ((trunc_ln162_3_reg_1511 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_2_fu_453_p2 = ((trunc_ln162_4_fu_443_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_3_fu_791_p2 = ((trunc_ln_reg_1527 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_4_fu_827_p2 = ((trunc_ln162_2_reg_1533 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_5_fu_863_p2 = ((trunc_ln162_8_reg_1539 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_6_fu_899_p2 = ((trunc_ln162_9_reg_1545 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_7_fu_935_p2 = ((trunc_ln164_1_reg_1551 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_8_fu_513_p2 = ((trunc_ln162_6_fu_509_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_9_fu_995_p2 = ((trunc_ln162_1_reg_1567 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_695_p2 = ((trunc_ln162_reg_1500 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln165_10_fu_551_p2 = ((trunc_ln162_5_fu_535_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_11_fu_1060_p2 = ((trunc_ln164_2_reg_1583 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_12_fu_577_p2 = ((trunc_ln162_7_fu_567_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_13_fu_1120_p2 = ((trunc_ln162_s_reg_1599 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_14_fu_609_p2 = ((trunc_ln162_10_fu_593_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_15_fu_657_p2 = ((trunc_ln164_3_fu_641_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_1_fu_736_p2 = ((trunc_ln162_3_reg_1511 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_2_fu_459_p2 = ((trunc_ln162_4_fu_443_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_3_fu_796_p2 = ((trunc_ln_reg_1527 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_4_fu_832_p2 = ((trunc_ln162_2_reg_1533 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_5_fu_868_p2 = ((trunc_ln162_8_reg_1539 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_6_fu_904_p2 = ((trunc_ln162_9_reg_1545 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_7_fu_940_p2 = ((trunc_ln164_1_reg_1551 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_8_fu_519_p2 = ((trunc_ln162_6_fu_509_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_9_fu_1000_p2 = ((trunc_ln162_1_reg_1567 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_700_p2 = ((trunc_ln162_reg_1500 == 2'd2) ? 1'b1 : 1'b0);

assign mul_ln1148_fu_302_p0 = mul_ln1148_fu_302_p00;

assign mul_ln1148_fu_302_p00 = w_scale_V;

assign mul_ln1148_fu_302_p1 = scales_0_V_read;

assign mul_ln1148_fu_302_p2 = ($signed({{1'b0}, {mul_ln1148_fu_302_p0}}) * $signed(mul_ln1148_fu_302_p1));

assign output_0_V_d0 = grp_fu_1291_p2[39:0];

assign packed_weights_0_address0 = zext_ln159_fu_420_p1;

assign packed_weights_1_address0 = zext_ln159_fu_420_p1;

assign packed_weights_2_address0 = zext_ln159_fu_420_p1;

assign packed_weights_3_address0 = zext_ln159_fu_420_p1;

assign select_ln164_10_fu_1037_p3 = ((icmp_ln164_10_reg_1573[0:0] === 1'b1) ? p_read10 : select_ln165_10_fu_1031_p3);

assign select_ln164_11_fu_1072_p3 = ((icmp_ln164_11_fu_1055_p2[0:0] === 1'b1) ? p_read11 : select_ln165_11_fu_1065_p3);

assign select_ln164_12_fu_1097_p3 = ((icmp_ln164_12_reg_1589[0:0] === 1'b1) ? p_read12 : select_ln165_12_fu_1091_p3);

assign select_ln164_13_fu_1132_p3 = ((icmp_ln164_13_fu_1115_p2[0:0] === 1'b1) ? p_read13 : select_ln165_13_fu_1125_p3);

assign select_ln164_14_fu_622_p3 = ((icmp_ln164_14_fu_603_p2[0:0] === 1'b1) ? p_read14 : select_ln165_14_fu_615_p3);

assign select_ln164_15_fu_670_p3 = ((icmp_ln164_15_fu_651_p2[0:0] === 1'b1) ? p_read15 : select_ln165_15_fu_663_p3);

assign select_ln164_1_fu_748_p3 = ((icmp_ln164_1_fu_731_p2[0:0] === 1'b1) ? p_read1 : select_ln165_1_fu_741_p3);

assign select_ln164_2_fu_773_p3 = ((icmp_ln164_2_reg_1517[0:0] === 1'b1) ? p_read2 : select_ln165_2_fu_767_p3);

assign select_ln164_3_fu_808_p3 = ((icmp_ln164_3_fu_791_p2[0:0] === 1'b1) ? p_read3 : select_ln165_3_fu_801_p3);

assign select_ln164_4_fu_844_p3 = ((icmp_ln164_4_fu_827_p2[0:0] === 1'b1) ? p_read4 : select_ln165_4_fu_837_p3);

assign select_ln164_5_fu_880_p3 = ((icmp_ln164_5_fu_863_p2[0:0] === 1'b1) ? p_read5 : select_ln165_5_fu_873_p3);

assign select_ln164_6_fu_916_p3 = ((icmp_ln164_6_fu_899_p2[0:0] === 1'b1) ? p_read6 : select_ln165_6_fu_909_p3);

assign select_ln164_7_fu_952_p3 = ((icmp_ln164_7_fu_935_p2[0:0] === 1'b1) ? p_read7 : select_ln165_7_fu_945_p3);

assign select_ln164_8_fu_977_p3 = ((icmp_ln164_8_reg_1557[0:0] === 1'b1) ? p_read8 : select_ln165_8_fu_971_p3);

assign select_ln164_9_fu_1012_p3 = ((icmp_ln164_9_fu_995_p2[0:0] === 1'b1) ? p_read9 : select_ln165_9_fu_1005_p3);

assign select_ln164_fu_712_p3 = ((icmp_ln164_fu_695_p2[0:0] === 1'b1) ? p_read : select_ln165_fu_705_p3);

assign select_ln165_10_fu_1031_p3 = ((icmp_ln165_10_reg_1578[0:0] === 1'b1) ? xor_ln701_10_reg_1411 : 8'd0);

assign select_ln165_11_fu_1065_p3 = ((icmp_ln165_11_fu_1060_p2[0:0] === 1'b1) ? xor_ln701_11_reg_1406 : 8'd0);

assign select_ln165_12_fu_1091_p3 = ((icmp_ln165_12_reg_1594[0:0] === 1'b1) ? xor_ln701_12_reg_1401 : 8'd0);

assign select_ln165_13_fu_1125_p3 = ((icmp_ln165_13_fu_1120_p2[0:0] === 1'b1) ? xor_ln701_13_reg_1396 : 8'd0);

assign select_ln165_14_fu_615_p3 = ((icmp_ln165_14_fu_609_p2[0:0] === 1'b1) ? xor_ln701_14_reg_1391 : 8'd0);

assign select_ln165_15_fu_663_p3 = ((icmp_ln165_15_fu_657_p2[0:0] === 1'b1) ? xor_ln701_15_reg_1386 : 8'd0);

assign select_ln165_1_fu_741_p3 = ((icmp_ln165_1_fu_736_p2[0:0] === 1'b1) ? xor_ln701_1_reg_1456 : 8'd0);

assign select_ln165_2_fu_767_p3 = ((icmp_ln165_2_reg_1522[0:0] === 1'b1) ? xor_ln701_2_reg_1451 : 8'd0);

assign select_ln165_3_fu_801_p3 = ((icmp_ln165_3_fu_796_p2[0:0] === 1'b1) ? xor_ln701_3_reg_1446 : 8'd0);

assign select_ln165_4_fu_837_p3 = ((icmp_ln165_4_fu_832_p2[0:0] === 1'b1) ? xor_ln701_4_reg_1441 : 8'd0);

assign select_ln165_5_fu_873_p3 = ((icmp_ln165_5_fu_868_p2[0:0] === 1'b1) ? xor_ln701_5_reg_1436 : 8'd0);

assign select_ln165_6_fu_909_p3 = ((icmp_ln165_6_fu_904_p2[0:0] === 1'b1) ? xor_ln701_6_reg_1431 : 8'd0);

assign select_ln165_7_fu_945_p3 = ((icmp_ln165_7_fu_940_p2[0:0] === 1'b1) ? xor_ln701_7_reg_1426 : 8'd0);

assign select_ln165_8_fu_971_p3 = ((icmp_ln165_8_reg_1562[0:0] === 1'b1) ? xor_ln701_8_reg_1421 : 8'd0);

assign select_ln165_9_fu_1005_p3 = ((icmp_ln165_9_fu_1000_p2[0:0] === 1'b1) ? xor_ln701_9_reg_1416 : 8'd0);

assign select_ln165_fu_705_p3 = ((icmp_ln165_fu_700_p2[0:0] === 1'b1) ? xor_ln701_reg_1461 : 8'd0);

assign sext_ln701_fu_308_p1 = $signed(mul_ln1148_fu_302_p2);

assign sext_ln703_10_fu_1051_p1 = $signed(shl_ln703_s_fu_1043_p3);

assign sext_ln703_11_fu_1087_p1 = $signed(shl_ln703_10_fu_1079_p3);

assign sext_ln703_12_fu_1111_p1 = $signed(shl_ln703_11_fu_1103_p3);

assign sext_ln703_13_fu_1147_p1 = $signed(shl_ln703_12_fu_1139_p3);

assign sext_ln703_14_fu_637_p1 = $signed(shl_ln703_13_fu_629_p3);

assign sext_ln703_15_fu_685_p1 = $signed(shl_ln703_14_fu_677_p3);

assign sext_ln703_16_fu_1162_p1 = $signed(add_ln703_28_fu_1156_p2);

assign sext_ln703_17_fu_1178_p1 = $signed(add_ln703_30_fu_1172_p2);

assign sext_ln703_18_fu_1188_p1 = $signed(add_ln703_31_fu_1182_p2);

assign sext_ln703_19_fu_1267_p1 = $signed(add_ln703_32_reg_1615);

assign sext_ln703_1_fu_763_p1 = $signed(shl_ln703_1_fu_755_p3);

assign sext_ln703_20_fu_1204_p1 = $signed(add_ln703_34_fu_1198_p2);

assign sext_ln703_21_fu_1214_p1 = $signed(add_ln703_35_fu_1208_p2);

assign sext_ln703_22_fu_1224_p1 = $signed(add_ln703_36_fu_1218_p2);

assign sext_ln703_23_fu_1234_p1 = $signed(add_ln703_37_fu_1228_p2);

assign sext_ln703_24_fu_1238_p1 = $signed(add_ln703_38_reg_1605);

assign sext_ln703_25_fu_1247_p1 = $signed(add_ln703_39_fu_1241_p2);

assign sext_ln703_26_fu_1257_p1 = $signed(add_ln703_40_fu_1251_p2);

assign sext_ln703_27_fu_1275_p1 = $signed(add_ln703_41_reg_1620);

assign sext_ln703_2_fu_787_p1 = $signed(shl_ln703_2_fu_779_p3);

assign sext_ln703_3_fu_823_p1 = $signed(shl_ln703_3_fu_815_p3);

assign sext_ln703_4_fu_859_p1 = $signed(shl_ln703_4_fu_851_p3);

assign sext_ln703_5_fu_895_p1 = $signed(shl_ln703_5_fu_887_p3);

assign sext_ln703_6_fu_931_p1 = $signed(shl_ln703_6_fu_923_p3);

assign sext_ln703_7_fu_967_p1 = $signed(shl_ln703_7_fu_959_p3);

assign sext_ln703_8_fu_991_p1 = $signed(shl_ln703_8_fu_983_p3);

assign sext_ln703_9_fu_1027_p1 = $signed(shl_ln703_9_fu_1019_p3);

assign sext_ln703_fu_727_p1 = $signed(shl_ln_fu_719_p3);

assign shl_ln703_10_fu_1079_p3 = {{select_ln164_11_fu_1072_p3}, {16'd0}};

assign shl_ln703_11_fu_1103_p3 = {{select_ln164_12_fu_1097_p3}, {16'd0}};

assign shl_ln703_12_fu_1139_p3 = {{select_ln164_13_fu_1132_p3}, {16'd0}};

assign shl_ln703_13_fu_629_p3 = {{select_ln164_14_fu_622_p3}, {16'd0}};

assign shl_ln703_14_fu_677_p3 = {{select_ln164_15_fu_670_p3}, {16'd0}};

assign shl_ln703_1_fu_755_p3 = {{select_ln164_1_fu_748_p3}, {16'd0}};

assign shl_ln703_2_fu_779_p3 = {{select_ln164_2_fu_773_p3}, {16'd0}};

assign shl_ln703_3_fu_815_p3 = {{select_ln164_3_fu_808_p3}, {16'd0}};

assign shl_ln703_4_fu_851_p3 = {{select_ln164_4_fu_844_p3}, {16'd0}};

assign shl_ln703_5_fu_887_p3 = {{select_ln164_5_fu_880_p3}, {16'd0}};

assign shl_ln703_6_fu_923_p3 = {{select_ln164_6_fu_916_p3}, {16'd0}};

assign shl_ln703_7_fu_959_p3 = {{select_ln164_7_fu_952_p3}, {16'd0}};

assign shl_ln703_8_fu_983_p3 = {{select_ln164_8_fu_977_p3}, {16'd0}};

assign shl_ln703_9_fu_1019_p3 = {{select_ln164_9_fu_1012_p3}, {16'd0}};

assign shl_ln703_s_fu_1043_p3 = {{select_ln164_10_fu_1037_p3}, {16'd0}};

assign shl_ln_fu_719_p3 = {{select_ln164_fu_712_p3}, {16'd0}};

assign trunc_ln162_10_fu_593_p4 = {{packed_weights_3_q0[5:4]}};

assign trunc_ln162_2_fu_475_p1 = packed_weights_1_q0[1:0];

assign trunc_ln162_4_fu_443_p4 = {{packed_weights_0_q0[5:4]}};

assign trunc_ln162_5_fu_535_p4 = {{packed_weights_2_q0[5:4]}};

assign trunc_ln162_6_fu_509_p1 = packed_weights_2_q0[1:0];

assign trunc_ln162_7_fu_567_p1 = packed_weights_3_q0[1:0];

assign trunc_ln162_fu_429_p1 = packed_weights_0_q0[1:0];

assign trunc_ln164_3_fu_641_p4 = {{packed_weights_3_q0[7:6]}};

assign xor_ln701_10_fu_342_p2 = (p_read10 ^ 8'd255);

assign xor_ln701_11_fu_336_p2 = (p_read11 ^ 8'd255);

assign xor_ln701_12_fu_330_p2 = (p_read12 ^ 8'd255);

assign xor_ln701_13_fu_324_p2 = (p_read13 ^ 8'd255);

assign xor_ln701_14_fu_318_p2 = (p_read14 ^ 8'd255);

assign xor_ln701_15_fu_312_p2 = (p_read15 ^ 8'd255);

assign xor_ln701_1_fu_396_p2 = (p_read1 ^ 8'd255);

assign xor_ln701_2_fu_390_p2 = (p_read2 ^ 8'd255);

assign xor_ln701_3_fu_384_p2 = (p_read3 ^ 8'd255);

assign xor_ln701_4_fu_378_p2 = (p_read4 ^ 8'd255);

assign xor_ln701_5_fu_372_p2 = (p_read5 ^ 8'd255);

assign xor_ln701_6_fu_366_p2 = (p_read6 ^ 8'd255);

assign xor_ln701_7_fu_360_p2 = (p_read7 ^ 8'd255);

assign xor_ln701_8_fu_354_p2 = (p_read8 ^ 8'd255);

assign xor_ln701_9_fu_348_p2 = (p_read9 ^ 8'd255);

assign xor_ln701_fu_402_p2 = (p_read ^ 8'd255);

assign zext_ln159_fu_420_p1 = ap_phi_mux_j_0_0_phi_fu_287_p4;

always @ (posedge ap_clk) begin
    add_ln703_38_reg_1605[15:0] <= 16'b0000000000000000;
    add_ln703_32_reg_1615[15:0] <= 16'b0000000000000000;
    add_ln703_41_reg_1620[15:0] <= 16'b0000000000000000;
end

endmodule //linear_forward_no_mu
