-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity apply_rotary_pos_hbi_rom is 
    generic(
             DWIDTH     : integer := 22; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of apply_rotary_pos_hbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110100011000111101101", 1 => "1111111100110000100000", 
    2 => "1111101001110100110001", 3 => "1110011011111011000000", 
    4 => "1100110011110001001111", 5 => "1011000101111110101101", 
    6 => "1001011101001101001010", 7 => "0111111110100011101010", 
    8 => "0110101011101110001000", 9 => "0101100100100111011110", 
    10 => "0100101000001101001001", 11 => "0011110101101101000011", 
    12 => "0011001011011000110110", 13 => "0010101000001110111101", 
    14 => "0010001011000100011010", 15 => "0001110010111100011101", 
    16 => "0001011110111011010000", 17 => "0001001110010111000101", 
    18 => "0001000000101101001111", 19 => "0000110101011100011100", 
    20 => "0000101100000111001000", 21 => "0000100100011001100000", 
    22 => "0000011110000011101110", 23 => "0000011000110011110110", 
    24 => "0000010100011110111010", 25 => "0000010000111001111100", 
    26 => "0000001101111100111110", 27 => "0000001011100000111111", 
    28 => "0000001001100000011111", 29 => "0000000111110110001111", 
    30 => "0000000110011110011111", 31 => "0000000101010101111111", 
    32 => "0000000100011010011111", 33 => "0000000011101001000111", 
    34 => "0000000011000000010111", 35 => "0000000010011110101111", 
    36 => "0000000010000011000111", 37 => "0000000001101100001011", 
    38 => "0000000001011001010011", 39 => "0000000001001001101011", 
    40 => "0000000000111100110101", 41 => "0000000000110010001101", 
    42 => "0000000000101001011011", 43 => "0000000000100010001101", 
    44 => "0000000000011100001110", 45 => "0000000000010111010011", 
    46 => "0000000000010011001111", 47 => "0000000000001111111000", 
    48 => "1110100011000111101101", 49 => "1111111100110000100000", 
    50 => "1111101001110100110001", 51 => "1110011011111011000000", 
    52 => "1100110011110001001111", 53 => "1011000101111110101101", 
    54 => "1001011101001101001010", 55 => "0111111110100011101010", 
    56 => "0110101011101110001000", 57 => "0101100100100111011110", 
    58 => "0100101000001101001001", 59 => "0011110101101101000011", 
    60 => "0011001011011000110110", 61 => "0010101000001110111101", 
    62 => "0010001011000100011010", 63 => "0001110010111100011101", 
    64 => "0001011110111011010000", 65 => "0001001110010111000101", 
    66 => "0001000000101101001111", 67 => "0000110101011100011100", 
    68 => "0000101100000111001000", 69 => "0000100100011001100000", 
    70 => "0000011110000011101110", 71 => "0000011000110011110110", 
    72 => "0000010100011110111010", 73 => "0000010000111001111100", 
    74 => "0000001101111100111110", 75 => "0000001011100000111111", 
    76 => "0000001001100000011111", 77 => "0000000111110110001111", 
    78 => "0000000110011110011111", 79 => "0000000101010101111111", 
    80 => "0000000100011010011111", 81 => "0000000011101001000111", 
    82 => "0000000011000000010111", 83 => "0000000010011110101111", 
    84 => "0000000010000011000111", 85 => "0000000001101100001011", 
    86 => "0000000001011001010011", 87 => "0000000001001001101011", 
    88 => "0000000000111100110101", 89 => "0000000000110010001101", 
    90 => "0000000000101001011011", 91 => "0000000000100010001101", 
    92 => "0000000000011100001110", 93 => "0000000000010111010011", 
    94 => "0000000000010011001111", 95 => "0000000000001111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity apply_rotary_pos_hbi is
    generic (
        DataWidth : INTEGER := 22;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of apply_rotary_pos_hbi is
    component apply_rotary_pos_hbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    apply_rotary_pos_hbi_rom_U :  component apply_rotary_pos_hbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


