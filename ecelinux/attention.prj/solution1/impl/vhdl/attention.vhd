-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity attention is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hidden_states_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hidden_states_0_V_ce0 : OUT STD_LOGIC;
    hidden_states_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hidden_states_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hidden_states_0_V_ce1 : OUT STD_LOGIC;
    hidden_states_0_V_we1 : OUT STD_LOGIC;
    hidden_states_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hidden_states_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    final_output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    final_output_0_V_ce0 : OUT STD_LOGIC;
    final_output_0_V_we0 : OUT STD_LOGIC;
    final_output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    final_output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    final_output_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    final_output_0_V_ce1 : OUT STD_LOGIC;
    final_output_0_V_we1 : OUT STD_LOGIC;
    final_output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    final_output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of attention is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv28_4CAB8A0 : STD_LOGIC_VECTOR (27 downto 0) := "0100110010101011100010100000";
    constant ap_const_lv28_4B564FF : STD_LOGIC_VECTOR (27 downto 0) := "0100101101010110010011111111";
    constant ap_const_lv28_2BB4740 : STD_LOGIC_VECTOR (27 downto 0) := "0010101110110100011101000000";
    constant ap_const_lv28_2C711D0 : STD_LOGIC_VECTOR (27 downto 0) := "0010110001110001000111010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ln_weight_in_V_ce0 : STD_LOGIC;
    signal ln_weight_in_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_weights_V_0_ce0 : STD_LOGIC;
    signal q_weights_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_weights_V_1_ce0 : STD_LOGIC;
    signal q_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_weights_V_2_ce0 : STD_LOGIC;
    signal q_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_weights_V_3_ce0 : STD_LOGIC;
    signal q_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_weights_V_0_ce0 : STD_LOGIC;
    signal k_weights_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_weights_V_1_ce0 : STD_LOGIC;
    signal k_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_weights_V_2_ce0 : STD_LOGIC;
    signal k_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_weights_V_3_ce0 : STD_LOGIC;
    signal k_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_weights_V_0_ce0 : STD_LOGIC;
    signal v_weights_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_weights_V_1_ce0 : STD_LOGIC;
    signal v_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_weights_V_2_ce0 : STD_LOGIC;
    signal v_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_weights_V_3_ce0 : STD_LOGIC;
    signal v_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_cache_V_ce0 : STD_LOGIC;
    signal k_cache_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_V_ce0 : STD_LOGIC;
    signal v_cache_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ln_weight_V_ce0 : STD_LOGIC;
    signal ln_weight_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_weights_V_0_ce0 : STD_LOGIC;
    signal o_weights_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_weights_V_1_ce0 : STD_LOGIC;
    signal o_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_weights_V_2_ce0 : STD_LOGIC;
    signal o_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_weights_V_3_ce0 : STD_LOGIC;
    signal o_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_quantize_activation_fu_560_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_quantize_activation_fu_560_ap_ready : STD_LOGIC;
    signal grp_quantize_activation_fu_560_ap_done : STD_LOGIC;
    signal grp_init_2d_mem_fu_653_ap_ready : STD_LOGIC;
    signal grp_init_2d_mem_fu_653_ap_done : STD_LOGIC;
    signal grp_init_2d_mem_fu_658_ap_ready : STD_LOGIC;
    signal grp_init_2d_mem_fu_658_ap_done : STD_LOGIC;
    signal grp_init_2d_mem_fu_663_ap_ready : STD_LOGIC;
    signal grp_init_2d_mem_fu_663_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_state29_on_subcall_done : BOOLEAN;
    signal reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_linear_forward_no_mu_fu_458_ap_ready : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_ap_done : STD_LOGIC;
    signal grp_reshape_2D_to_3D_fu_637_ap_ready : STD_LOGIC;
    signal grp_reshape_2D_to_3D_fu_637_ap_done : STD_LOGIC;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_apply_rotary_pos_emb_fu_511_ap_ready : STD_LOGIC;
    signal grp_apply_rotary_pos_emb_fu_511_ap_done : STD_LOGIC;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln190_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln195_fu_1517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_924_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_proj_V_0_reg_1938 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal k_proj_V_0_1_reg_1943 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_0_2_reg_1948 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_0_3_reg_1953 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_1_reg_1958 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_1_1_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_1_2_reg_1968 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_1_3_reg_1973 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_2_reg_1978 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_2_1_reg_1983 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_2_2_reg_1988 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_2_3_reg_1993 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_3_reg_1998 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_3_1_reg_2003 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_3_2_reg_2008 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_V_3_3_reg_2013 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_0_reg_2018 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_0_1_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_0_2_reg_2028 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_0_3_reg_2033 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_1_reg_2038 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_1_1_reg_2043 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_1_2_reg_2048 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_1_3_reg_2053 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_2_reg_2058 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_2_1_reg_2063 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_2_2_reg_2068 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_2_3_reg_2073 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_3_reg_2078 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_3_1_reg_2083 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_3_2_reg_2088 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_embed_V_3_3_reg_2093 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_0_reg_2098 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_0_1_reg_2103 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_0_2_reg_2108 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_0_3_reg_2113 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_1_reg_2118 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_1_1_reg_2123 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_1_2_reg_2128 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_1_3_reg_2133 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_2_reg_2138 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_2_1_reg_2143 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_2_2_reg_2148 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_2_3_reg_2153 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_3_reg_2158 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_3_1_reg_2163 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_3_2_reg_2168 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_embed_V_3_3_reg_2173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal h_1_fu_1193_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_1_reg_2201 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1265_fu_1199_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1265_reg_2206 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln188_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln190_fu_1209_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln190_reg_2226 : STD_LOGIC_VECTOR (1 downto 0);
    signal attn_weights_V_0_3_0_1_reg_2231 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_2_0_1_reg_2238 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_1_0_1_reg_2245 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_0_0_1_reg_2252 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_2259 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_2264 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln1148_s_reg_2269 : STD_LOGIC_VECTOR (30 downto 0);
    signal h_fu_1523_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal attn_weights_V_0_3_0_4_fu_1547_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_2_0_4_fu_1561_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_1_0_4_fu_1575_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_0_0_4_fu_1589_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_0_0_7_reg_2302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_softmax_1_4_3_s_fu_491_ap_ready : STD_LOGIC;
    signal grp_softmax_1_4_3_s_fu_491_ap_done : STD_LOGIC;
    signal ap_block_state22_on_subcall_done : BOOLEAN;
    signal attn_weights_V_0_1_0_7_reg_2307 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_2_0_7_reg_2312 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_3_0_7_reg_2317 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_0_0_5_reg_2322 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_1_0_5_reg_2327 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_2_0_5_reg_2332 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_3_0_5_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_0_0_5_reg_2342 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_1_0_5_reg_2347 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_2_0_5_reg_2352 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_3_0_5_reg_2357 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_0_reg_2362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_GEMM_3D_float_1_fu_590_ap_ready : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_ap_done : STD_LOGIC;
    signal attn_output_0_1_reg_2367 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_0_2_reg_2372 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_0_3_reg_2377 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_1_reg_2382 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_1_1_reg_2387 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_1_2_reg_2392 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_1_3_reg_2397 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2_reg_2402 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2_1_reg_2407 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2_2_reg_2412 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2_3_reg_2417 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_3_reg_2422 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_3_1_reg_2427 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_3_2_reg_2432 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_3_3_reg_2437 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln221_fu_1733_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln221_reg_2445 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal trunc_ln223_fu_1739_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln223_reg_2450 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln221_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln3_fu_1743_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln3_reg_2456 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_1_fu_1835_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal quantized_hidden_sta_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal quantized_hidden_sta_ce0 : STD_LOGIC;
    signal quantized_hidden_sta_we0 : STD_LOGIC;
    signal quantized_hidden_sta_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal quantized_hidden_sta_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal quantized_hidden_sta_ce1 : STD_LOGIC;
    signal quantized_hidden_sta_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_proj_re_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_proj_re_0_V_ce0 : STD_LOGIC;
    signal q_proj_re_0_V_we0 : STD_LOGIC;
    signal q_proj_re_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_proj_re_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_proj_re_0_V_ce1 : STD_LOGIC;
    signal q_proj_re_0_V_we1 : STD_LOGIC;
    signal q_proj_re_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_re_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_re_0_V_ce0 : STD_LOGIC;
    signal k_proj_re_0_V_we0 : STD_LOGIC;
    signal k_proj_re_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_re_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_re_0_V_ce1 : STD_LOGIC;
    signal k_proj_re_0_V_we1 : STD_LOGIC;
    signal k_proj_re_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_proj_re_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_proj_re_0_V_ce0 : STD_LOGIC;
    signal v_proj_re_0_V_we0 : STD_LOGIC;
    signal v_proj_re_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_proj_re_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_proj_re_0_V_ce1 : STD_LOGIC;
    signal v_proj_re_0_V_we1 : STD_LOGIC;
    signal v_proj_re_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cache_upd_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_cache_upd_0_V_ce0 : STD_LOGIC;
    signal k_cache_upd_0_V_we0 : STD_LOGIC;
    signal k_cache_upd_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cache_upd_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_cache_upd_1_V_ce0 : STD_LOGIC;
    signal k_cache_upd_1_V_we0 : STD_LOGIC;
    signal k_cache_upd_1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cache_upd_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_cache_upd_2_V_ce0 : STD_LOGIC;
    signal k_cache_upd_2_V_we0 : STD_LOGIC;
    signal k_cache_upd_2_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cache_upd_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_cache_upd_3_V_ce0 : STD_LOGIC;
    signal k_cache_upd_3_V_we0 : STD_LOGIC;
    signal k_cache_upd_3_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_cache_upd_0_V_ce0 : STD_LOGIC;
    signal v_cache_upd_0_V_we0 : STD_LOGIC;
    signal v_cache_upd_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_0_V_ce1 : STD_LOGIC;
    signal v_cache_upd_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_cache_upd_1_V_ce0 : STD_LOGIC;
    signal v_cache_upd_1_V_we0 : STD_LOGIC;
    signal v_cache_upd_1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_1_V_ce1 : STD_LOGIC;
    signal v_cache_upd_1_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_cache_upd_2_V_ce0 : STD_LOGIC;
    signal v_cache_upd_2_V_we0 : STD_LOGIC;
    signal v_cache_upd_2_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_2_V_ce1 : STD_LOGIC;
    signal v_cache_upd_2_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_cache_upd_3_V_ce0 : STD_LOGIC;
    signal v_cache_upd_3_V_we0 : STD_LOGIC;
    signal v_cache_upd_3_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_cache_upd_3_V_ce1 : STD_LOGIC;
    signal v_cache_upd_3_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_transposed_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_transposed_0_ce0 : STD_LOGIC;
    signal k_proj_transposed_0_we0 : STD_LOGIC;
    signal k_proj_transposed_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_transposed_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_transposed_0_ce1 : STD_LOGIC;
    signal k_proj_transposed_0_we1 : STD_LOGIC;
    signal k_proj_transposed_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_transposed_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_transposed_1_ce0 : STD_LOGIC;
    signal k_proj_transposed_1_we0 : STD_LOGIC;
    signal k_proj_transposed_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_transposed_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_transposed_1_ce1 : STD_LOGIC;
    signal k_proj_transposed_1_we1 : STD_LOGIC;
    signal k_proj_transposed_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_transposed_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_transposed_2_ce0 : STD_LOGIC;
    signal k_proj_transposed_2_we0 : STD_LOGIC;
    signal k_proj_transposed_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_transposed_2_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_proj_transposed_2_ce1 : STD_LOGIC;
    signal k_proj_transposed_2_we1 : STD_LOGIC;
    signal k_proj_transposed_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2D_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal attn_output_2D_0_V_ce0 : STD_LOGIC;
    signal attn_output_2D_0_V_we0 : STD_LOGIC;
    signal attn_output_2D_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2D_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2D_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal attn_output_2D_0_V_ce1 : STD_LOGIC;
    signal attn_output_2D_0_V_we1 : STD_LOGIC;
    signal attn_output_2D_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_output_2D_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal quantized_final_outp_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal quantized_final_outp_ce0 : STD_LOGIC;
    signal quantized_final_outp_we0 : STD_LOGIC;
    signal quantized_final_outp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal quantized_final_outp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal quantized_final_outp_ce1 : STD_LOGIC;
    signal quantized_final_outp_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_ap_start : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_ap_idle : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_input_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_input_0_V_ce0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_input_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_input_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_input_0_V_ce1 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_input_0_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_output_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_output_0_V_ce0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_output_0_V_we0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_linear_forward_no_mu_fu_458_output_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_linear_forward_no_mu_fu_458_output_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_output_0_V_ce1 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_output_0_V_we1 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_linear_forward_no_mu_fu_458_output_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0 : STD_LOGIC;
    signal grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_linear_forward_no_mu_fu_458_w_scale_V : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_start : STD_LOGIC;
    signal grp_softmax_1_4_3_s_fu_491_ap_idle : STD_LOGIC;
    signal grp_softmax_1_4_3_s_fu_491_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_1_4_3_s_fu_491_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_start : STD_LOGIC;
    signal grp_apply_rotary_pos_emb_fu_511_ap_idle : STD_LOGIC;
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_26 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_29 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_apply_rotary_pos_emb_fu_511_ap_return_31 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rms_norm_16_s_fu_551_ap_start : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_ap_done : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_ap_idle : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_ap_ready : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_input_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rms_norm_16_s_fu_551_input_0_V_ce0 : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_input_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rms_norm_16_s_fu_551_input_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rms_norm_16_s_fu_551_input_0_V_ce1 : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_input_0_V_we1 : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_input_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rms_norm_16_s_fu_551_weight_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rms_norm_16_s_fu_551_weight_V_ce0 : STD_LOGIC;
    signal grp_rms_norm_16_s_fu_551_weight_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_quantize_activation_fu_560_ap_start : STD_LOGIC;
    signal grp_quantize_activation_fu_560_ap_idle : STD_LOGIC;
    signal grp_quantize_activation_fu_560_input_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_quantize_activation_fu_560_input_0_V_ce0 : STD_LOGIC;
    signal grp_quantize_activation_fu_560_input_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_quantize_activation_fu_560_input_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_quantize_activation_fu_560_input_0_V_ce1 : STD_LOGIC;
    signal grp_quantize_activation_fu_560_input_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_quantize_activation_fu_560_output_states_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_quantize_activation_fu_560_output_states_0_V_ce0 : STD_LOGIC;
    signal grp_quantize_activation_fu_560_output_states_0_V_we0 : STD_LOGIC;
    signal grp_quantize_activation_fu_560_output_states_0_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_start : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_ap_done : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_ap_idle : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_ap_ready : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_input_2_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_fu_567_input_2_0_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_input_2_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_fu_567_input_2_0_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_input_2_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_fu_567_input_2_1_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_input_2_1_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_fu_567_input_2_1_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_input_2_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_fu_567_input_2_2_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_input_2_2_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_fu_567_input_2_2_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_fu_567_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_fu_567_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_start : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_ap_idle : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_1_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_2_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce0 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_input_2_3_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce1 : STD_LOGIC;
    signal grp_GEMM_3D_float_1_fu_590_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GEMM_3D_float_1_fu_590_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_ap_start : STD_LOGIC;
    signal grp_cache_update_fu_610_ap_done : STD_LOGIC;
    signal grp_cache_update_fu_610_ap_idle : STD_LOGIC;
    signal grp_cache_update_fu_610_ap_ready : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_in_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cache_update_fu_610_cache_in_V_ce0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_in_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_cache_out_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cache_update_fu_610_cache_out_0_V_ce0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_0_V_we0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_cache_out_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cache_update_fu_610_cache_out_1_V_ce0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_1_V_we0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_1_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_cache_out_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cache_update_fu_610_cache_out_2_V_ce0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_2_V_we0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_2_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_cache_out_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cache_update_fu_610_cache_out_3_V_ce0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_3_V_we0 : STD_LOGIC;
    signal grp_cache_update_fu_610_cache_out_3_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cache_update_fu_610_p_read15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_start : STD_LOGIC;
    signal grp_reshape_2D_to_3D_fu_637_ap_idle : STD_LOGIC;
    signal grp_reshape_2D_to_3D_fu_637_input_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_input_0_V_ce0 : STD_LOGIC;
    signal grp_reshape_2D_to_3D_fu_637_input_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reshape_2D_to_3D_fu_637_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transpose_last_two_d_fu_642_ap_start : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_ap_done : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_ap_idle : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_ap_ready : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_input_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_input_0_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_input_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_input_1_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_input_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_input_2_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_input_3_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_input_3_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_0_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_0_V_we0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_0_V_ce1 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_0_V_we1 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_1_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_1_V_we0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_1_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_1_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_1_V_ce1 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_1_V_we1 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_1_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_2_V_ce0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_2_V_we0 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_2_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_2_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_transpose_last_two_d_fu_642_output_2_V_ce1 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_2_V_we1 : STD_LOGIC;
    signal grp_transpose_last_two_d_fu_642_output_2_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_2d_mem_fu_653_ap_start : STD_LOGIC;
    signal grp_init_2d_mem_fu_653_ap_idle : STD_LOGIC;
    signal grp_init_2d_mem_fu_653_mem_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_init_2d_mem_fu_653_mem_0_V_ce0 : STD_LOGIC;
    signal grp_init_2d_mem_fu_653_mem_0_V_we0 : STD_LOGIC;
    signal grp_init_2d_mem_fu_653_mem_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_2d_mem_fu_658_ap_start : STD_LOGIC;
    signal grp_init_2d_mem_fu_658_ap_idle : STD_LOGIC;
    signal grp_init_2d_mem_fu_658_mem_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_init_2d_mem_fu_658_mem_0_V_ce0 : STD_LOGIC;
    signal grp_init_2d_mem_fu_658_mem_0_V_we0 : STD_LOGIC;
    signal grp_init_2d_mem_fu_658_mem_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_2d_mem_fu_663_ap_start : STD_LOGIC;
    signal grp_init_2d_mem_fu_663_ap_idle : STD_LOGIC;
    signal grp_init_2d_mem_fu_663_mem_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_init_2d_mem_fu_663_mem_0_V_ce0 : STD_LOGIC;
    signal grp_init_2d_mem_fu_663_mem_0_V_we0 : STD_LOGIC;
    signal grp_init_2d_mem_fu_663_mem_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_0_i_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln36_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_0_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal d_0_0_reg_373 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal attn_weights_V_0_0_0_3_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_1_0_3_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_2_0_3_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_3_0_3_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal h85_0_reg_425 : STD_LOGIC_VECTOR (2 downto 0);
    signal h100_0_0_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal j_0_0_i2_reg_447 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln36_1_fu_1829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_linear_forward_no_mu_fu_458_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_softmax_1_4_3_s_fu_491_ap_start_reg : STD_LOGIC := '0';
    signal grp_apply_rotary_pos_emb_fu_511_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_rms_norm_16_s_fu_551_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_quantize_activation_fu_560_ap_start_reg : STD_LOGIC := '0';
    signal grp_GEMM_3D_float_fu_567_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_GEMM_3D_float_1_fu_590_ap_start_reg : STD_LOGIC := '0';
    signal grp_cache_update_fu_610_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_reshape_2D_to_3D_fu_637_ap_start_reg : STD_LOGIC := '0';
    signal grp_transpose_last_two_d_fu_642_ap_start_reg : STD_LOGIC := '0';
    signal grp_init_2d_mem_fu_653_ap_start_reg : STD_LOGIC := '0';
    signal grp_init_2d_mem_fu_658_ap_start_reg : STD_LOGIC := '0';
    signal grp_init_2d_mem_fu_663_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln37_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_fu_1751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_1_fu_1773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_2_fu_1794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_3_fu_1814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_1_fu_1841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal attn_weights_V_0_3_0_6_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_3_0_5_fu_1385_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_2_0_6_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_2_0_5_fu_1395_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_1_0_6_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_1_0_5_fu_1405_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_0_0_6_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_0_0_0_5_fu_1415_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_3_0_4_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_3_0_3_fu_1445_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_2_0_4_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_2_0_3_fu_1458_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_1_0_4_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_1_0_3_fu_1471_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_0_0_4_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_2_0_0_3_fu_1484_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_3_0_4_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_3_0_3_fu_1313_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_2_0_4_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_2_0_3_fu_1326_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_1_0_4_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_1_0_3_fu_1339_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_0_0_4_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal attn_weights_V_1_0_0_3_fu_1352_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1756_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1778_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1799_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1819_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1222_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1222_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_1252_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln1148_fu_1268_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln1148_fu_1294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_6_fu_1300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1148_7_fu_1297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_fu_1306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1265_1_fu_1529_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_1533_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln223_fu_1767_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln223_1_fu_1789_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln223_2_fu_1809_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state15_on_subcall_done : BOOLEAN;

    component linear_forward_no_mu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce0 : OUT STD_LOGIC;
        input_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce1 : OUT STD_LOGIC;
        input_0_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        scales_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        packed_weights_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        packed_weights_0_V_ce0 : OUT STD_LOGIC;
        packed_weights_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        packed_weights_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        packed_weights_1_V_ce0 : OUT STD_LOGIC;
        packed_weights_1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        packed_weights_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        packed_weights_2_V_ce0 : OUT STD_LOGIC;
        packed_weights_2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        packed_weights_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        packed_weights_3_V_ce0 : OUT STD_LOGIC;
        packed_weights_3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_scale_V : IN STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component softmax_1_4_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component apply_rotary_pos_emb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rms_norm_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce0 : OUT STD_LOGIC;
        input_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce1 : OUT STD_LOGIC;
        input_0_V_we1 : OUT STD_LOGIC;
        input_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        weight_V_ce0 : OUT STD_LOGIC;
        weight_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component quantize_activation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce0 : OUT STD_LOGIC;
        input_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce1 : OUT STD_LOGIC;
        input_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_states_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_states_0_V_ce0 : OUT STD_LOGIC;
        output_states_0_V_we0 : OUT STD_LOGIC;
        output_states_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GEMM_3D_float IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_0_V_ce0 : OUT STD_LOGIC;
        input_2_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_0_V_ce1 : OUT STD_LOGIC;
        input_2_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_1_V_ce0 : OUT STD_LOGIC;
        input_2_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_1_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_1_V_ce1 : OUT STD_LOGIC;
        input_2_1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_2_V_ce0 : OUT STD_LOGIC;
        input_2_2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_2_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_2_V_ce1 : OUT STD_LOGIC;
        input_2_2_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GEMM_3D_float_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_0_V_ce0 : OUT STD_LOGIC;
        input_2_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_0_V_ce1 : OUT STD_LOGIC;
        input_2_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_1_V_ce0 : OUT STD_LOGIC;
        input_2_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_1_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_1_V_ce1 : OUT STD_LOGIC;
        input_2_1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_2_V_ce0 : OUT STD_LOGIC;
        input_2_2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_2_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_2_V_ce1 : OUT STD_LOGIC;
        input_2_2_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_3_V_ce0 : OUT STD_LOGIC;
        input_2_3_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_3_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_3_V_ce1 : OUT STD_LOGIC;
        input_2_3_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cache_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cache_in_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        cache_in_V_ce0 : OUT STD_LOGIC;
        cache_in_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cache_out_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cache_out_0_V_ce0 : OUT STD_LOGIC;
        cache_out_0_V_we0 : OUT STD_LOGIC;
        cache_out_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cache_out_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cache_out_1_V_ce0 : OUT STD_LOGIC;
        cache_out_1_V_we0 : OUT STD_LOGIC;
        cache_out_1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cache_out_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cache_out_2_V_ce0 : OUT STD_LOGIC;
        cache_out_2_V_we0 : OUT STD_LOGIC;
        cache_out_2_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cache_out_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        cache_out_3_V_ce0 : OUT STD_LOGIC;
        cache_out_3_V_we0 : OUT STD_LOGIC;
        cache_out_3_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reshape_2D_to_3D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce0 : OUT STD_LOGIC;
        input_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transpose_last_two_d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_V_ce0 : OUT STD_LOGIC;
        input_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_1_V_ce0 : OUT STD_LOGIC;
        input_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_2_V_ce0 : OUT STD_LOGIC;
        input_2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_3_V_ce0 : OUT STD_LOGIC;
        input_3_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_1_V_ce0 : OUT STD_LOGIC;
        output_1_V_we0 : OUT STD_LOGIC;
        output_1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_1_V_ce1 : OUT STD_LOGIC;
        output_1_V_we1 : OUT STD_LOGIC;
        output_1_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_2_V_ce0 : OUT STD_LOGIC;
        output_2_V_we0 : OUT STD_LOGIC;
        output_2_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_2_V_ce1 : OUT STD_LOGIC;
        output_2_V_we1 : OUT STD_LOGIC;
        output_2_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component init_2d_mem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mem_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        mem_0_V_ce0 : OUT STD_LOGIC;
        mem_0_V_we0 : OUT STD_LOGIC;
        mem_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mux_124_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_ln_weigjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_q_weighkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_q_weighlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_q_weighmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_q_weighncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_k_weighocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_k_weighpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_k_weighqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_k_weighrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_v_weighsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_v_weightde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_v_weighudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_v_weighvdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_k_cache_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_v_cache_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_ln_weigwdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_o_weighxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_o_weighyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_o_weighzec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_o_weighAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_quantizBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component attention_q_proj_CeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_k_cacheFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_v_cacheJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ln_weight_in_V_U : component attention_ln_weigjbC
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_rms_norm_16_s_fu_551_weight_V_address0,
        ce0 => ln_weight_in_V_ce0,
        q0 => ln_weight_in_V_q0);

    q_weights_V_0_U : component attention_q_weighkbM
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_address0,
        ce0 => q_weights_V_0_ce0,
        q0 => q_weights_V_0_q0);

    q_weights_V_1_U : component attention_q_weighlbW
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_address0,
        ce0 => q_weights_V_1_ce0,
        q0 => q_weights_V_1_q0);

    q_weights_V_2_U : component attention_q_weighmb6
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_address0,
        ce0 => q_weights_V_2_ce0,
        q0 => q_weights_V_2_q0);

    q_weights_V_3_U : component attention_q_weighncg
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_address0,
        ce0 => q_weights_V_3_ce0,
        q0 => q_weights_V_3_q0);

    k_weights_V_0_U : component attention_k_weighocq
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_address0,
        ce0 => k_weights_V_0_ce0,
        q0 => k_weights_V_0_q0);

    k_weights_V_1_U : component attention_k_weighpcA
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_address0,
        ce0 => k_weights_V_1_ce0,
        q0 => k_weights_V_1_q0);

    k_weights_V_2_U : component attention_k_weighqcK
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_address0,
        ce0 => k_weights_V_2_ce0,
        q0 => k_weights_V_2_q0);

    k_weights_V_3_U : component attention_k_weighrcU
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_address0,
        ce0 => k_weights_V_3_ce0,
        q0 => k_weights_V_3_q0);

    v_weights_V_0_U : component attention_v_weighsc4
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_address0,
        ce0 => v_weights_V_0_ce0,
        q0 => v_weights_V_0_q0);

    v_weights_V_1_U : component attention_v_weightde
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_address0,
        ce0 => v_weights_V_1_ce0,
        q0 => v_weights_V_1_q0);

    v_weights_V_2_U : component attention_v_weighudo
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_address0,
        ce0 => v_weights_V_2_ce0,
        q0 => v_weights_V_2_q0);

    v_weights_V_3_U : component attention_v_weighvdy
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_address0,
        ce0 => v_weights_V_3_ce0,
        q0 => v_weights_V_3_q0);

    k_cache_V_U : component attention_k_cache_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_cache_update_fu_610_cache_in_V_address0,
        ce0 => k_cache_V_ce0,
        q0 => k_cache_V_q0);

    v_cache_V_U : component attention_v_cache_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_cache_update_fu_610_cache_in_V_address0,
        ce0 => v_cache_V_ce0,
        q0 => v_cache_V_q0);

    ln_weight_V_U : component attention_ln_weigwdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_rms_norm_16_s_fu_551_weight_V_address0,
        ce0 => ln_weight_V_ce0,
        q0 => ln_weight_V_q0);

    o_weights_V_0_U : component attention_o_weighxdS
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_address0,
        ce0 => o_weights_V_0_ce0,
        q0 => o_weights_V_0_q0);

    o_weights_V_1_U : component attention_o_weighyd2
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_address0,
        ce0 => o_weights_V_1_ce0,
        q0 => o_weights_V_1_q0);

    o_weights_V_2_U : component attention_o_weighzec
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_address0,
        ce0 => o_weights_V_2_ce0,
        q0 => o_weights_V_2_q0);

    o_weights_V_3_U : component attention_o_weighAem
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_address0,
        ce0 => o_weights_V_3_ce0,
        q0 => o_weights_V_3_q0);

    quantized_hidden_sta_U : component attention_quantizBew
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quantized_hidden_sta_address0,
        ce0 => quantized_hidden_sta_ce0,
        we0 => quantized_hidden_sta_we0,
        d0 => quantized_hidden_sta_d0,
        q0 => quantized_hidden_sta_q0,
        address1 => grp_linear_forward_no_mu_fu_458_input_0_V_address1,
        ce1 => quantized_hidden_sta_ce1,
        q1 => quantized_hidden_sta_q1);

    q_proj_re_0_V_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q_proj_re_0_V_address0,
        ce0 => q_proj_re_0_V_ce0,
        we0 => q_proj_re_0_V_we0,
        d0 => q_proj_re_0_V_d0,
        q0 => q_proj_re_0_V_q0,
        address1 => grp_linear_forward_no_mu_fu_458_output_0_V_address1,
        ce1 => q_proj_re_0_V_ce1,
        we1 => q_proj_re_0_V_we1,
        d1 => grp_linear_forward_no_mu_fu_458_output_0_V_d1,
        q1 => q_proj_re_0_V_q1);

    k_proj_re_0_V_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_proj_re_0_V_address0,
        ce0 => k_proj_re_0_V_ce0,
        we0 => k_proj_re_0_V_we0,
        d0 => k_proj_re_0_V_d0,
        q0 => k_proj_re_0_V_q0,
        address1 => grp_linear_forward_no_mu_fu_458_output_0_V_address1,
        ce1 => k_proj_re_0_V_ce1,
        we1 => k_proj_re_0_V_we1,
        d1 => grp_linear_forward_no_mu_fu_458_output_0_V_d1,
        q1 => k_proj_re_0_V_q1);

    v_proj_re_0_V_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v_proj_re_0_V_address0,
        ce0 => v_proj_re_0_V_ce0,
        we0 => v_proj_re_0_V_we0,
        d0 => v_proj_re_0_V_d0,
        q0 => v_proj_re_0_V_q0,
        address1 => grp_linear_forward_no_mu_fu_458_output_0_V_address1,
        ce1 => v_proj_re_0_V_ce1,
        we1 => v_proj_re_0_V_we1,
        d1 => grp_linear_forward_no_mu_fu_458_output_0_V_d1,
        q1 => v_proj_re_0_V_q1);

    k_cache_upd_0_V_U : component attention_k_cacheFfa
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_cache_upd_0_V_address0,
        ce0 => k_cache_upd_0_V_ce0,
        we0 => k_cache_upd_0_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_0_V_d0,
        q0 => k_cache_upd_0_V_q0);

    k_cache_upd_1_V_U : component attention_k_cacheFfa
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_cache_upd_1_V_address0,
        ce0 => k_cache_upd_1_V_ce0,
        we0 => k_cache_upd_1_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_1_V_d0,
        q0 => k_cache_upd_1_V_q0);

    k_cache_upd_2_V_U : component attention_k_cacheFfa
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_cache_upd_2_V_address0,
        ce0 => k_cache_upd_2_V_ce0,
        we0 => k_cache_upd_2_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_2_V_d0,
        q0 => k_cache_upd_2_V_q0);

    k_cache_upd_3_V_U : component attention_k_cacheFfa
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_cache_upd_3_V_address0,
        ce0 => k_cache_upd_3_V_ce0,
        we0 => k_cache_upd_3_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_3_V_d0,
        q0 => k_cache_upd_3_V_q0);

    v_cache_upd_0_V_U : component attention_v_cacheJfO
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v_cache_upd_0_V_address0,
        ce0 => v_cache_upd_0_V_ce0,
        we0 => v_cache_upd_0_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_0_V_d0,
        q0 => v_cache_upd_0_V_q0,
        address1 => grp_GEMM_3D_float_1_fu_590_input_2_0_V_address1,
        ce1 => v_cache_upd_0_V_ce1,
        q1 => v_cache_upd_0_V_q1);

    v_cache_upd_1_V_U : component attention_v_cacheJfO
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v_cache_upd_1_V_address0,
        ce0 => v_cache_upd_1_V_ce0,
        we0 => v_cache_upd_1_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_1_V_d0,
        q0 => v_cache_upd_1_V_q0,
        address1 => grp_GEMM_3D_float_1_fu_590_input_2_1_V_address1,
        ce1 => v_cache_upd_1_V_ce1,
        q1 => v_cache_upd_1_V_q1);

    v_cache_upd_2_V_U : component attention_v_cacheJfO
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v_cache_upd_2_V_address0,
        ce0 => v_cache_upd_2_V_ce0,
        we0 => v_cache_upd_2_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_2_V_d0,
        q0 => v_cache_upd_2_V_q0,
        address1 => grp_GEMM_3D_float_1_fu_590_input_2_2_V_address1,
        ce1 => v_cache_upd_2_V_ce1,
        q1 => v_cache_upd_2_V_q1);

    v_cache_upd_3_V_U : component attention_v_cacheJfO
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v_cache_upd_3_V_address0,
        ce0 => v_cache_upd_3_V_ce0,
        we0 => v_cache_upd_3_V_we0,
        d0 => grp_cache_update_fu_610_cache_out_3_V_d0,
        q0 => v_cache_upd_3_V_q0,
        address1 => grp_GEMM_3D_float_1_fu_590_input_2_3_V_address1,
        ce1 => v_cache_upd_3_V_ce1,
        q1 => v_cache_upd_3_V_q1);

    k_proj_transposed_0_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_proj_transposed_0_address0,
        ce0 => k_proj_transposed_0_ce0,
        we0 => k_proj_transposed_0_we0,
        d0 => grp_transpose_last_two_d_fu_642_output_0_V_d0,
        q0 => k_proj_transposed_0_q0,
        address1 => k_proj_transposed_0_address1,
        ce1 => k_proj_transposed_0_ce1,
        we1 => k_proj_transposed_0_we1,
        d1 => grp_transpose_last_two_d_fu_642_output_0_V_d1,
        q1 => k_proj_transposed_0_q1);

    k_proj_transposed_1_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_proj_transposed_1_address0,
        ce0 => k_proj_transposed_1_ce0,
        we0 => k_proj_transposed_1_we0,
        d0 => grp_transpose_last_two_d_fu_642_output_1_V_d0,
        q0 => k_proj_transposed_1_q0,
        address1 => k_proj_transposed_1_address1,
        ce1 => k_proj_transposed_1_ce1,
        we1 => k_proj_transposed_1_we1,
        d1 => grp_transpose_last_two_d_fu_642_output_1_V_d1,
        q1 => k_proj_transposed_1_q1);

    k_proj_transposed_2_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_proj_transposed_2_address0,
        ce0 => k_proj_transposed_2_ce0,
        we0 => k_proj_transposed_2_we0,
        d0 => grp_transpose_last_two_d_fu_642_output_2_V_d0,
        q0 => k_proj_transposed_2_q0,
        address1 => k_proj_transposed_2_address1,
        ce1 => k_proj_transposed_2_ce1,
        we1 => k_proj_transposed_2_we1,
        d1 => grp_transpose_last_two_d_fu_642_output_2_V_d1,
        q1 => k_proj_transposed_2_q1);

    attn_output_2D_0_V_U : component attention_q_proj_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => attn_output_2D_0_V_address0,
        ce0 => attn_output_2D_0_V_ce0,
        we0 => attn_output_2D_0_V_we0,
        d0 => attn_output_2D_0_V_d0,
        q0 => attn_output_2D_0_V_q0,
        address1 => attn_output_2D_0_V_address1,
        ce1 => attn_output_2D_0_V_ce1,
        we1 => attn_output_2D_0_V_we1,
        d1 => attn_output_2D_0_V_d1,
        q1 => attn_output_2D_0_V_q1);

    quantized_final_outp_U : component attention_quantizBew
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quantized_final_outp_address0,
        ce0 => quantized_final_outp_ce0,
        we0 => quantized_final_outp_we0,
        d0 => quantized_final_outp_d0,
        q0 => quantized_final_outp_q0,
        address1 => grp_linear_forward_no_mu_fu_458_input_0_V_address1,
        ce1 => quantized_final_outp_ce1,
        q1 => quantized_final_outp_q1);

    grp_linear_forward_no_mu_fu_458 : component linear_forward_no_mu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_linear_forward_no_mu_fu_458_ap_start,
        ap_done => grp_linear_forward_no_mu_fu_458_ap_done,
        ap_idle => grp_linear_forward_no_mu_fu_458_ap_idle,
        ap_ready => grp_linear_forward_no_mu_fu_458_ap_ready,
        input_0_V_address0 => grp_linear_forward_no_mu_fu_458_input_0_V_address0,
        input_0_V_ce0 => grp_linear_forward_no_mu_fu_458_input_0_V_ce0,
        input_0_V_q0 => grp_linear_forward_no_mu_fu_458_input_0_V_q0,
        input_0_V_address1 => grp_linear_forward_no_mu_fu_458_input_0_V_address1,
        input_0_V_ce1 => grp_linear_forward_no_mu_fu_458_input_0_V_ce1,
        input_0_V_q1 => grp_linear_forward_no_mu_fu_458_input_0_V_q1,
        output_0_V_address0 => grp_linear_forward_no_mu_fu_458_output_0_V_address0,
        output_0_V_ce0 => grp_linear_forward_no_mu_fu_458_output_0_V_ce0,
        output_0_V_we0 => grp_linear_forward_no_mu_fu_458_output_0_V_we0,
        output_0_V_d0 => grp_linear_forward_no_mu_fu_458_output_0_V_d0,
        output_0_V_q0 => grp_linear_forward_no_mu_fu_458_output_0_V_q0,
        output_0_V_address1 => grp_linear_forward_no_mu_fu_458_output_0_V_address1,
        output_0_V_ce1 => grp_linear_forward_no_mu_fu_458_output_0_V_ce1,
        output_0_V_we1 => grp_linear_forward_no_mu_fu_458_output_0_V_we1,
        output_0_V_d1 => grp_linear_forward_no_mu_fu_458_output_0_V_d1,
        output_0_V_q1 => grp_linear_forward_no_mu_fu_458_output_0_V_q1,
        scales_0_V_read => reg_777,
        packed_weights_0_V_address0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_address0,
        packed_weights_0_V_ce0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0,
        packed_weights_0_V_q0 => grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0,
        packed_weights_1_V_address0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_address0,
        packed_weights_1_V_ce0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0,
        packed_weights_1_V_q0 => grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0,
        packed_weights_2_V_address0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_address0,
        packed_weights_2_V_ce0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0,
        packed_weights_2_V_q0 => grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0,
        packed_weights_3_V_address0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_address0,
        packed_weights_3_V_ce0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0,
        packed_weights_3_V_q0 => grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0,
        w_scale_V => grp_linear_forward_no_mu_fu_458_w_scale_V);

    grp_softmax_1_4_3_s_fu_491 : component softmax_1_4_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_1_4_3_s_fu_491_ap_start,
        ap_done => grp_softmax_1_4_3_s_fu_491_ap_done,
        ap_idle => grp_softmax_1_4_3_s_fu_491_ap_idle,
        ap_ready => grp_softmax_1_4_3_s_fu_491_ap_ready,
        p_read => attn_weights_V_0_0_0_3_reg_385,
        p_read1 => attn_weights_V_0_1_0_3_reg_395,
        p_read2 => attn_weights_V_0_2_0_3_reg_405,
        p_read3 => attn_weights_V_0_3_0_3_reg_415,
        p_read4 => reg_913,
        p_read5 => reg_908,
        p_read6 => reg_903,
        p_read7 => reg_898,
        p_read8 => reg_893,
        p_read9 => reg_888,
        p_read10 => reg_883,
        p_read11 => reg_878,
        ap_return_0 => grp_softmax_1_4_3_s_fu_491_ap_return_0,
        ap_return_1 => grp_softmax_1_4_3_s_fu_491_ap_return_1,
        ap_return_2 => grp_softmax_1_4_3_s_fu_491_ap_return_2,
        ap_return_3 => grp_softmax_1_4_3_s_fu_491_ap_return_3,
        ap_return_4 => grp_softmax_1_4_3_s_fu_491_ap_return_4,
        ap_return_5 => grp_softmax_1_4_3_s_fu_491_ap_return_5,
        ap_return_6 => grp_softmax_1_4_3_s_fu_491_ap_return_6,
        ap_return_7 => grp_softmax_1_4_3_s_fu_491_ap_return_7,
        ap_return_8 => grp_softmax_1_4_3_s_fu_491_ap_return_8,
        ap_return_9 => grp_softmax_1_4_3_s_fu_491_ap_return_9,
        ap_return_10 => grp_softmax_1_4_3_s_fu_491_ap_return_10,
        ap_return_11 => grp_softmax_1_4_3_s_fu_491_ap_return_11);

    grp_apply_rotary_pos_emb_fu_511 : component apply_rotary_pos_emb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_apply_rotary_pos_emb_fu_511_ap_start,
        ap_done => grp_apply_rotary_pos_emb_fu_511_ap_done,
        ap_idle => grp_apply_rotary_pos_emb_fu_511_ap_idle,
        ap_ready => grp_apply_rotary_pos_emb_fu_511_ap_ready,
        p_read => reg_782,
        p_read1 => reg_788,
        p_read2 => reg_794,
        p_read3 => reg_800,
        p_read4 => reg_806,
        p_read5 => reg_812,
        p_read6 => reg_818,
        p_read7 => reg_824,
        p_read8 => reg_830,
        p_read9 => reg_836,
        p_read10 => reg_842,
        p_read11 => reg_848,
        p_read12 => reg_854,
        p_read13 => reg_860,
        p_read14 => reg_866,
        p_read15 => reg_872,
        p_read16 => k_proj_V_0_reg_1938,
        p_read17 => k_proj_V_0_1_reg_1943,
        p_read18 => k_proj_V_0_2_reg_1948,
        p_read19 => k_proj_V_0_3_reg_1953,
        p_read20 => k_proj_V_1_reg_1958,
        p_read21 => k_proj_V_1_1_reg_1963,
        p_read22 => k_proj_V_1_2_reg_1968,
        p_read23 => k_proj_V_1_3_reg_1973,
        p_read24 => k_proj_V_2_reg_1978,
        p_read25 => k_proj_V_2_1_reg_1983,
        p_read26 => k_proj_V_2_2_reg_1988,
        p_read27 => k_proj_V_2_3_reg_1993,
        p_read28 => k_proj_V_3_reg_1998,
        p_read29 => k_proj_V_3_1_reg_2003,
        p_read30 => k_proj_V_3_2_reg_2008,
        p_read31 => k_proj_V_3_3_reg_2013,
        ap_return_0 => grp_apply_rotary_pos_emb_fu_511_ap_return_0,
        ap_return_1 => grp_apply_rotary_pos_emb_fu_511_ap_return_1,
        ap_return_2 => grp_apply_rotary_pos_emb_fu_511_ap_return_2,
        ap_return_3 => grp_apply_rotary_pos_emb_fu_511_ap_return_3,
        ap_return_4 => grp_apply_rotary_pos_emb_fu_511_ap_return_4,
        ap_return_5 => grp_apply_rotary_pos_emb_fu_511_ap_return_5,
        ap_return_6 => grp_apply_rotary_pos_emb_fu_511_ap_return_6,
        ap_return_7 => grp_apply_rotary_pos_emb_fu_511_ap_return_7,
        ap_return_8 => grp_apply_rotary_pos_emb_fu_511_ap_return_8,
        ap_return_9 => grp_apply_rotary_pos_emb_fu_511_ap_return_9,
        ap_return_10 => grp_apply_rotary_pos_emb_fu_511_ap_return_10,
        ap_return_11 => grp_apply_rotary_pos_emb_fu_511_ap_return_11,
        ap_return_12 => grp_apply_rotary_pos_emb_fu_511_ap_return_12,
        ap_return_13 => grp_apply_rotary_pos_emb_fu_511_ap_return_13,
        ap_return_14 => grp_apply_rotary_pos_emb_fu_511_ap_return_14,
        ap_return_15 => grp_apply_rotary_pos_emb_fu_511_ap_return_15,
        ap_return_16 => grp_apply_rotary_pos_emb_fu_511_ap_return_16,
        ap_return_17 => grp_apply_rotary_pos_emb_fu_511_ap_return_17,
        ap_return_18 => grp_apply_rotary_pos_emb_fu_511_ap_return_18,
        ap_return_19 => grp_apply_rotary_pos_emb_fu_511_ap_return_19,
        ap_return_20 => grp_apply_rotary_pos_emb_fu_511_ap_return_20,
        ap_return_21 => grp_apply_rotary_pos_emb_fu_511_ap_return_21,
        ap_return_22 => grp_apply_rotary_pos_emb_fu_511_ap_return_22,
        ap_return_23 => grp_apply_rotary_pos_emb_fu_511_ap_return_23,
        ap_return_24 => grp_apply_rotary_pos_emb_fu_511_ap_return_24,
        ap_return_25 => grp_apply_rotary_pos_emb_fu_511_ap_return_25,
        ap_return_26 => grp_apply_rotary_pos_emb_fu_511_ap_return_26,
        ap_return_27 => grp_apply_rotary_pos_emb_fu_511_ap_return_27,
        ap_return_28 => grp_apply_rotary_pos_emb_fu_511_ap_return_28,
        ap_return_29 => grp_apply_rotary_pos_emb_fu_511_ap_return_29,
        ap_return_30 => grp_apply_rotary_pos_emb_fu_511_ap_return_30,
        ap_return_31 => grp_apply_rotary_pos_emb_fu_511_ap_return_31);

    grp_rms_norm_16_s_fu_551 : component rms_norm_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rms_norm_16_s_fu_551_ap_start,
        ap_done => grp_rms_norm_16_s_fu_551_ap_done,
        ap_idle => grp_rms_norm_16_s_fu_551_ap_idle,
        ap_ready => grp_rms_norm_16_s_fu_551_ap_ready,
        input_0_V_address0 => grp_rms_norm_16_s_fu_551_input_0_V_address0,
        input_0_V_ce0 => grp_rms_norm_16_s_fu_551_input_0_V_ce0,
        input_0_V_q0 => grp_rms_norm_16_s_fu_551_input_0_V_q0,
        input_0_V_address1 => grp_rms_norm_16_s_fu_551_input_0_V_address1,
        input_0_V_ce1 => grp_rms_norm_16_s_fu_551_input_0_V_ce1,
        input_0_V_we1 => grp_rms_norm_16_s_fu_551_input_0_V_we1,
        input_0_V_d1 => grp_rms_norm_16_s_fu_551_input_0_V_d1,
        weight_V_address0 => grp_rms_norm_16_s_fu_551_weight_V_address0,
        weight_V_ce0 => grp_rms_norm_16_s_fu_551_weight_V_ce0,
        weight_V_q0 => grp_rms_norm_16_s_fu_551_weight_V_q0);

    grp_quantize_activation_fu_560 : component quantize_activation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_quantize_activation_fu_560_ap_start,
        ap_done => grp_quantize_activation_fu_560_ap_done,
        ap_idle => grp_quantize_activation_fu_560_ap_idle,
        ap_ready => grp_quantize_activation_fu_560_ap_ready,
        input_0_V_address0 => grp_quantize_activation_fu_560_input_0_V_address0,
        input_0_V_ce0 => grp_quantize_activation_fu_560_input_0_V_ce0,
        input_0_V_q0 => grp_quantize_activation_fu_560_input_0_V_q0,
        input_0_V_address1 => grp_quantize_activation_fu_560_input_0_V_address1,
        input_0_V_ce1 => grp_quantize_activation_fu_560_input_0_V_ce1,
        input_0_V_q1 => grp_quantize_activation_fu_560_input_0_V_q1,
        output_states_0_V_address0 => grp_quantize_activation_fu_560_output_states_0_V_address0,
        output_states_0_V_ce0 => grp_quantize_activation_fu_560_output_states_0_V_ce0,
        output_states_0_V_we0 => grp_quantize_activation_fu_560_output_states_0_V_we0,
        output_states_0_V_d0 => grp_quantize_activation_fu_560_output_states_0_V_d0,
        ap_return => grp_quantize_activation_fu_560_ap_return);

    grp_GEMM_3D_float_fu_567 : component GEMM_3D_float
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_GEMM_3D_float_fu_567_ap_start,
        ap_done => grp_GEMM_3D_float_fu_567_ap_done,
        ap_idle => grp_GEMM_3D_float_fu_567_ap_idle,
        ap_ready => grp_GEMM_3D_float_fu_567_ap_ready,
        p_read => q_embed_V_0_reg_2018,
        p_read1 => q_embed_V_0_1_reg_2023,
        p_read2 => q_embed_V_0_2_reg_2028,
        p_read3 => q_embed_V_0_3_reg_2033,
        p_read4 => q_embed_V_1_reg_2038,
        p_read5 => q_embed_V_1_1_reg_2043,
        p_read6 => q_embed_V_1_2_reg_2048,
        p_read7 => q_embed_V_1_3_reg_2053,
        p_read8 => q_embed_V_2_reg_2058,
        p_read9 => q_embed_V_2_1_reg_2063,
        p_read10 => q_embed_V_2_2_reg_2068,
        p_read11 => q_embed_V_2_3_reg_2073,
        p_read12 => q_embed_V_3_reg_2078,
        p_read13 => q_embed_V_3_1_reg_2083,
        p_read14 => q_embed_V_3_2_reg_2088,
        p_read15 => q_embed_V_3_3_reg_2093,
        input_2_0_V_address0 => grp_GEMM_3D_float_fu_567_input_2_0_V_address0,
        input_2_0_V_ce0 => grp_GEMM_3D_float_fu_567_input_2_0_V_ce0,
        input_2_0_V_q0 => k_proj_transposed_0_q0,
        input_2_0_V_address1 => grp_GEMM_3D_float_fu_567_input_2_0_V_address1,
        input_2_0_V_ce1 => grp_GEMM_3D_float_fu_567_input_2_0_V_ce1,
        input_2_0_V_q1 => k_proj_transposed_0_q1,
        input_2_1_V_address0 => grp_GEMM_3D_float_fu_567_input_2_1_V_address0,
        input_2_1_V_ce0 => grp_GEMM_3D_float_fu_567_input_2_1_V_ce0,
        input_2_1_V_q0 => k_proj_transposed_1_q0,
        input_2_1_V_address1 => grp_GEMM_3D_float_fu_567_input_2_1_V_address1,
        input_2_1_V_ce1 => grp_GEMM_3D_float_fu_567_input_2_1_V_ce1,
        input_2_1_V_q1 => k_proj_transposed_1_q1,
        input_2_2_V_address0 => grp_GEMM_3D_float_fu_567_input_2_2_V_address0,
        input_2_2_V_ce0 => grp_GEMM_3D_float_fu_567_input_2_2_V_ce0,
        input_2_2_V_q0 => k_proj_transposed_2_q0,
        input_2_2_V_address1 => grp_GEMM_3D_float_fu_567_input_2_2_V_address1,
        input_2_2_V_ce1 => grp_GEMM_3D_float_fu_567_input_2_2_V_ce1,
        input_2_2_V_q1 => k_proj_transposed_2_q1,
        ap_return_0 => grp_GEMM_3D_float_fu_567_ap_return_0,
        ap_return_1 => grp_GEMM_3D_float_fu_567_ap_return_1,
        ap_return_2 => grp_GEMM_3D_float_fu_567_ap_return_2,
        ap_return_3 => grp_GEMM_3D_float_fu_567_ap_return_3,
        ap_return_4 => grp_GEMM_3D_float_fu_567_ap_return_4,
        ap_return_5 => grp_GEMM_3D_float_fu_567_ap_return_5,
        ap_return_6 => grp_GEMM_3D_float_fu_567_ap_return_6,
        ap_return_7 => grp_GEMM_3D_float_fu_567_ap_return_7,
        ap_return_8 => grp_GEMM_3D_float_fu_567_ap_return_8,
        ap_return_9 => grp_GEMM_3D_float_fu_567_ap_return_9,
        ap_return_10 => grp_GEMM_3D_float_fu_567_ap_return_10,
        ap_return_11 => grp_GEMM_3D_float_fu_567_ap_return_11);

    grp_GEMM_3D_float_1_fu_590 : component GEMM_3D_float_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_GEMM_3D_float_1_fu_590_ap_start,
        ap_done => grp_GEMM_3D_float_1_fu_590_ap_done,
        ap_idle => grp_GEMM_3D_float_1_fu_590_ap_idle,
        ap_ready => grp_GEMM_3D_float_1_fu_590_ap_ready,
        p_read => attn_weights_V_0_0_0_7_reg_2302,
        p_read1 => attn_weights_V_0_1_0_7_reg_2307,
        p_read2 => attn_weights_V_0_2_0_7_reg_2312,
        p_read3 => attn_weights_V_0_3_0_7_reg_2317,
        p_read4 => attn_weights_V_1_0_0_5_reg_2322,
        p_read5 => attn_weights_V_1_1_0_5_reg_2327,
        p_read6 => attn_weights_V_1_2_0_5_reg_2332,
        p_read7 => attn_weights_V_1_3_0_5_reg_2337,
        p_read8 => attn_weights_V_2_0_0_5_reg_2342,
        p_read9 => attn_weights_V_2_1_0_5_reg_2347,
        p_read10 => attn_weights_V_2_2_0_5_reg_2352,
        p_read11 => attn_weights_V_2_3_0_5_reg_2357,
        input_2_0_V_address0 => grp_GEMM_3D_float_1_fu_590_input_2_0_V_address0,
        input_2_0_V_ce0 => grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce0,
        input_2_0_V_q0 => v_cache_upd_0_V_q0,
        input_2_0_V_address1 => grp_GEMM_3D_float_1_fu_590_input_2_0_V_address1,
        input_2_0_V_ce1 => grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce1,
        input_2_0_V_q1 => v_cache_upd_0_V_q1,
        input_2_1_V_address0 => grp_GEMM_3D_float_1_fu_590_input_2_1_V_address0,
        input_2_1_V_ce0 => grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce0,
        input_2_1_V_q0 => v_cache_upd_1_V_q0,
        input_2_1_V_address1 => grp_GEMM_3D_float_1_fu_590_input_2_1_V_address1,
        input_2_1_V_ce1 => grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce1,
        input_2_1_V_q1 => v_cache_upd_1_V_q1,
        input_2_2_V_address0 => grp_GEMM_3D_float_1_fu_590_input_2_2_V_address0,
        input_2_2_V_ce0 => grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce0,
        input_2_2_V_q0 => v_cache_upd_2_V_q0,
        input_2_2_V_address1 => grp_GEMM_3D_float_1_fu_590_input_2_2_V_address1,
        input_2_2_V_ce1 => grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce1,
        input_2_2_V_q1 => v_cache_upd_2_V_q1,
        input_2_3_V_address0 => grp_GEMM_3D_float_1_fu_590_input_2_3_V_address0,
        input_2_3_V_ce0 => grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce0,
        input_2_3_V_q0 => v_cache_upd_3_V_q0,
        input_2_3_V_address1 => grp_GEMM_3D_float_1_fu_590_input_2_3_V_address1,
        input_2_3_V_ce1 => grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce1,
        input_2_3_V_q1 => v_cache_upd_3_V_q1,
        ap_return_0 => grp_GEMM_3D_float_1_fu_590_ap_return_0,
        ap_return_1 => grp_GEMM_3D_float_1_fu_590_ap_return_1,
        ap_return_2 => grp_GEMM_3D_float_1_fu_590_ap_return_2,
        ap_return_3 => grp_GEMM_3D_float_1_fu_590_ap_return_3,
        ap_return_4 => grp_GEMM_3D_float_1_fu_590_ap_return_4,
        ap_return_5 => grp_GEMM_3D_float_1_fu_590_ap_return_5,
        ap_return_6 => grp_GEMM_3D_float_1_fu_590_ap_return_6,
        ap_return_7 => grp_GEMM_3D_float_1_fu_590_ap_return_7,
        ap_return_8 => grp_GEMM_3D_float_1_fu_590_ap_return_8,
        ap_return_9 => grp_GEMM_3D_float_1_fu_590_ap_return_9,
        ap_return_10 => grp_GEMM_3D_float_1_fu_590_ap_return_10,
        ap_return_11 => grp_GEMM_3D_float_1_fu_590_ap_return_11,
        ap_return_12 => grp_GEMM_3D_float_1_fu_590_ap_return_12,
        ap_return_13 => grp_GEMM_3D_float_1_fu_590_ap_return_13,
        ap_return_14 => grp_GEMM_3D_float_1_fu_590_ap_return_14,
        ap_return_15 => grp_GEMM_3D_float_1_fu_590_ap_return_15);

    grp_cache_update_fu_610 : component cache_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cache_update_fu_610_ap_start,
        ap_done => grp_cache_update_fu_610_ap_done,
        ap_idle => grp_cache_update_fu_610_ap_idle,
        ap_ready => grp_cache_update_fu_610_ap_ready,
        cache_in_V_address0 => grp_cache_update_fu_610_cache_in_V_address0,
        cache_in_V_ce0 => grp_cache_update_fu_610_cache_in_V_ce0,
        cache_in_V_q0 => grp_cache_update_fu_610_cache_in_V_q0,
        cache_out_0_V_address0 => grp_cache_update_fu_610_cache_out_0_V_address0,
        cache_out_0_V_ce0 => grp_cache_update_fu_610_cache_out_0_V_ce0,
        cache_out_0_V_we0 => grp_cache_update_fu_610_cache_out_0_V_we0,
        cache_out_0_V_d0 => grp_cache_update_fu_610_cache_out_0_V_d0,
        cache_out_1_V_address0 => grp_cache_update_fu_610_cache_out_1_V_address0,
        cache_out_1_V_ce0 => grp_cache_update_fu_610_cache_out_1_V_ce0,
        cache_out_1_V_we0 => grp_cache_update_fu_610_cache_out_1_V_we0,
        cache_out_1_V_d0 => grp_cache_update_fu_610_cache_out_1_V_d0,
        cache_out_2_V_address0 => grp_cache_update_fu_610_cache_out_2_V_address0,
        cache_out_2_V_ce0 => grp_cache_update_fu_610_cache_out_2_V_ce0,
        cache_out_2_V_we0 => grp_cache_update_fu_610_cache_out_2_V_we0,
        cache_out_2_V_d0 => grp_cache_update_fu_610_cache_out_2_V_d0,
        cache_out_3_V_address0 => grp_cache_update_fu_610_cache_out_3_V_address0,
        cache_out_3_V_ce0 => grp_cache_update_fu_610_cache_out_3_V_ce0,
        cache_out_3_V_we0 => grp_cache_update_fu_610_cache_out_3_V_we0,
        cache_out_3_V_d0 => grp_cache_update_fu_610_cache_out_3_V_d0,
        p_read => grp_cache_update_fu_610_p_read,
        p_read1 => grp_cache_update_fu_610_p_read1,
        p_read2 => grp_cache_update_fu_610_p_read2,
        p_read3 => grp_cache_update_fu_610_p_read3,
        p_read4 => grp_cache_update_fu_610_p_read4,
        p_read5 => grp_cache_update_fu_610_p_read5,
        p_read6 => grp_cache_update_fu_610_p_read6,
        p_read7 => grp_cache_update_fu_610_p_read7,
        p_read8 => grp_cache_update_fu_610_p_read8,
        p_read9 => grp_cache_update_fu_610_p_read9,
        p_read10 => grp_cache_update_fu_610_p_read10,
        p_read11 => grp_cache_update_fu_610_p_read11,
        p_read12 => grp_cache_update_fu_610_p_read12,
        p_read13 => grp_cache_update_fu_610_p_read13,
        p_read14 => grp_cache_update_fu_610_p_read14,
        p_read15 => grp_cache_update_fu_610_p_read15);

    grp_reshape_2D_to_3D_fu_637 : component reshape_2D_to_3D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reshape_2D_to_3D_fu_637_ap_start,
        ap_done => grp_reshape_2D_to_3D_fu_637_ap_done,
        ap_idle => grp_reshape_2D_to_3D_fu_637_ap_idle,
        ap_ready => grp_reshape_2D_to_3D_fu_637_ap_ready,
        input_0_V_address0 => grp_reshape_2D_to_3D_fu_637_input_0_V_address0,
        input_0_V_ce0 => grp_reshape_2D_to_3D_fu_637_input_0_V_ce0,
        input_0_V_q0 => grp_reshape_2D_to_3D_fu_637_input_0_V_q0,
        ap_return_0 => grp_reshape_2D_to_3D_fu_637_ap_return_0,
        ap_return_1 => grp_reshape_2D_to_3D_fu_637_ap_return_1,
        ap_return_2 => grp_reshape_2D_to_3D_fu_637_ap_return_2,
        ap_return_3 => grp_reshape_2D_to_3D_fu_637_ap_return_3,
        ap_return_4 => grp_reshape_2D_to_3D_fu_637_ap_return_4,
        ap_return_5 => grp_reshape_2D_to_3D_fu_637_ap_return_5,
        ap_return_6 => grp_reshape_2D_to_3D_fu_637_ap_return_6,
        ap_return_7 => grp_reshape_2D_to_3D_fu_637_ap_return_7,
        ap_return_8 => grp_reshape_2D_to_3D_fu_637_ap_return_8,
        ap_return_9 => grp_reshape_2D_to_3D_fu_637_ap_return_9,
        ap_return_10 => grp_reshape_2D_to_3D_fu_637_ap_return_10,
        ap_return_11 => grp_reshape_2D_to_3D_fu_637_ap_return_11,
        ap_return_12 => grp_reshape_2D_to_3D_fu_637_ap_return_12,
        ap_return_13 => grp_reshape_2D_to_3D_fu_637_ap_return_13,
        ap_return_14 => grp_reshape_2D_to_3D_fu_637_ap_return_14,
        ap_return_15 => grp_reshape_2D_to_3D_fu_637_ap_return_15);

    grp_transpose_last_two_d_fu_642 : component transpose_last_two_d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_transpose_last_two_d_fu_642_ap_start,
        ap_done => grp_transpose_last_two_d_fu_642_ap_done,
        ap_idle => grp_transpose_last_two_d_fu_642_ap_idle,
        ap_ready => grp_transpose_last_two_d_fu_642_ap_ready,
        input_0_V_address0 => grp_transpose_last_two_d_fu_642_input_0_V_address0,
        input_0_V_ce0 => grp_transpose_last_two_d_fu_642_input_0_V_ce0,
        input_0_V_q0 => k_cache_upd_0_V_q0,
        input_1_V_address0 => grp_transpose_last_two_d_fu_642_input_1_V_address0,
        input_1_V_ce0 => grp_transpose_last_two_d_fu_642_input_1_V_ce0,
        input_1_V_q0 => k_cache_upd_1_V_q0,
        input_2_V_address0 => grp_transpose_last_two_d_fu_642_input_2_V_address0,
        input_2_V_ce0 => grp_transpose_last_two_d_fu_642_input_2_V_ce0,
        input_2_V_q0 => k_cache_upd_2_V_q0,
        input_3_V_address0 => grp_transpose_last_two_d_fu_642_input_3_V_address0,
        input_3_V_ce0 => grp_transpose_last_two_d_fu_642_input_3_V_ce0,
        input_3_V_q0 => k_cache_upd_3_V_q0,
        output_0_V_address0 => grp_transpose_last_two_d_fu_642_output_0_V_address0,
        output_0_V_ce0 => grp_transpose_last_two_d_fu_642_output_0_V_ce0,
        output_0_V_we0 => grp_transpose_last_two_d_fu_642_output_0_V_we0,
        output_0_V_d0 => grp_transpose_last_two_d_fu_642_output_0_V_d0,
        output_0_V_address1 => grp_transpose_last_two_d_fu_642_output_0_V_address1,
        output_0_V_ce1 => grp_transpose_last_two_d_fu_642_output_0_V_ce1,
        output_0_V_we1 => grp_transpose_last_two_d_fu_642_output_0_V_we1,
        output_0_V_d1 => grp_transpose_last_two_d_fu_642_output_0_V_d1,
        output_1_V_address0 => grp_transpose_last_two_d_fu_642_output_1_V_address0,
        output_1_V_ce0 => grp_transpose_last_two_d_fu_642_output_1_V_ce0,
        output_1_V_we0 => grp_transpose_last_two_d_fu_642_output_1_V_we0,
        output_1_V_d0 => grp_transpose_last_two_d_fu_642_output_1_V_d0,
        output_1_V_address1 => grp_transpose_last_two_d_fu_642_output_1_V_address1,
        output_1_V_ce1 => grp_transpose_last_two_d_fu_642_output_1_V_ce1,
        output_1_V_we1 => grp_transpose_last_two_d_fu_642_output_1_V_we1,
        output_1_V_d1 => grp_transpose_last_two_d_fu_642_output_1_V_d1,
        output_2_V_address0 => grp_transpose_last_two_d_fu_642_output_2_V_address0,
        output_2_V_ce0 => grp_transpose_last_two_d_fu_642_output_2_V_ce0,
        output_2_V_we0 => grp_transpose_last_two_d_fu_642_output_2_V_we0,
        output_2_V_d0 => grp_transpose_last_two_d_fu_642_output_2_V_d0,
        output_2_V_address1 => grp_transpose_last_two_d_fu_642_output_2_V_address1,
        output_2_V_ce1 => grp_transpose_last_two_d_fu_642_output_2_V_ce1,
        output_2_V_we1 => grp_transpose_last_two_d_fu_642_output_2_V_we1,
        output_2_V_d1 => grp_transpose_last_two_d_fu_642_output_2_V_d1);

    grp_init_2d_mem_fu_653 : component init_2d_mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_init_2d_mem_fu_653_ap_start,
        ap_done => grp_init_2d_mem_fu_653_ap_done,
        ap_idle => grp_init_2d_mem_fu_653_ap_idle,
        ap_ready => grp_init_2d_mem_fu_653_ap_ready,
        mem_0_V_address0 => grp_init_2d_mem_fu_653_mem_0_V_address0,
        mem_0_V_ce0 => grp_init_2d_mem_fu_653_mem_0_V_ce0,
        mem_0_V_we0 => grp_init_2d_mem_fu_653_mem_0_V_we0,
        mem_0_V_d0 => grp_init_2d_mem_fu_653_mem_0_V_d0);

    grp_init_2d_mem_fu_658 : component init_2d_mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_init_2d_mem_fu_658_ap_start,
        ap_done => grp_init_2d_mem_fu_658_ap_done,
        ap_idle => grp_init_2d_mem_fu_658_ap_idle,
        ap_ready => grp_init_2d_mem_fu_658_ap_ready,
        mem_0_V_address0 => grp_init_2d_mem_fu_658_mem_0_V_address0,
        mem_0_V_ce0 => grp_init_2d_mem_fu_658_mem_0_V_ce0,
        mem_0_V_we0 => grp_init_2d_mem_fu_658_mem_0_V_we0,
        mem_0_V_d0 => grp_init_2d_mem_fu_658_mem_0_V_d0);

    grp_init_2d_mem_fu_663 : component init_2d_mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_init_2d_mem_fu_663_ap_start,
        ap_done => grp_init_2d_mem_fu_663_ap_done,
        ap_idle => grp_init_2d_mem_fu_663_ap_idle,
        ap_ready => grp_init_2d_mem_fu_663_ap_ready,
        mem_0_V_address0 => grp_init_2d_mem_fu_663_mem_0_V_address0,
        mem_0_V_ce0 => grp_init_2d_mem_fu_663_mem_0_V_ce0,
        mem_0_V_we0 => grp_init_2d_mem_fu_663_mem_0_V_we0,
        mem_0_V_d0 => grp_init_2d_mem_fu_663_mem_0_V_d0);

    dut_mux_124_32_1_1_U186 : component dut_mux_124_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_0_0_6_fu_252,
        din1 => attn_weights_V_0_1_0_6_fu_248,
        din2 => attn_weights_V_0_2_0_6_fu_244,
        din3 => attn_weights_V_0_3_0_6_fu_240,
        din4 => attn_weights_V_1_0_0_4_fu_284,
        din5 => attn_weights_V_1_1_0_4_fu_280,
        din6 => attn_weights_V_1_2_0_4_fu_276,
        din7 => attn_weights_V_1_3_0_4_fu_272,
        din8 => attn_weights_V_2_0_0_4_fu_268,
        din9 => attn_weights_V_2_1_0_4_fu_264,
        din10 => attn_weights_V_2_2_0_4_fu_260,
        din11 => attn_weights_V_2_3_0_4_fu_256,
        din12 => tmp_2_fu_1222_p13,
        dout => tmp_2_fu_1222_p14);

    dut_mux_42_32_1_1_U187 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_898,
        din1 => reg_898,
        din2 => reg_898,
        din3 => select_ln1148_fu_1306_p3,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_1_3_0_3_fu_1313_p6);

    dut_mux_42_32_1_1_U188 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_903,
        din1 => reg_903,
        din2 => select_ln1148_fu_1306_p3,
        din3 => reg_903,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_1_2_0_3_fu_1326_p6);

    dut_mux_42_32_1_1_U189 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_908,
        din1 => select_ln1148_fu_1306_p3,
        din2 => reg_908,
        din3 => reg_908,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_1_1_0_3_fu_1339_p6);

    dut_mux_42_32_1_1_U190 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln1148_fu_1306_p3,
        din1 => reg_913,
        din2 => reg_913,
        din3 => reg_913,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_1_0_0_3_fu_1352_p6);

    dut_mux_42_32_1_1_U191 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_3_0_1_reg_2231,
        din1 => attn_weights_V_0_3_0_1_reg_2231,
        din2 => attn_weights_V_0_3_0_1_reg_2231,
        din3 => select_ln1148_fu_1306_p3,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_0_3_0_5_fu_1385_p6);

    dut_mux_42_32_1_1_U192 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_2_0_1_reg_2238,
        din1 => attn_weights_V_0_2_0_1_reg_2238,
        din2 => select_ln1148_fu_1306_p3,
        din3 => attn_weights_V_0_2_0_1_reg_2238,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_0_2_0_5_fu_1395_p6);

    dut_mux_42_32_1_1_U193 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_1_0_1_reg_2245,
        din1 => select_ln1148_fu_1306_p3,
        din2 => attn_weights_V_0_1_0_1_reg_2245,
        din3 => attn_weights_V_0_1_0_1_reg_2245,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_0_1_0_5_fu_1405_p6);

    dut_mux_42_32_1_1_U194 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln1148_fu_1306_p3,
        din1 => attn_weights_V_0_0_0_1_reg_2252,
        din2 => attn_weights_V_0_0_0_1_reg_2252,
        din3 => attn_weights_V_0_0_0_1_reg_2252,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_0_0_0_5_fu_1415_p6);

    dut_mux_42_32_1_1_U195 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_878,
        din1 => reg_878,
        din2 => reg_878,
        din3 => select_ln1148_fu_1306_p3,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_2_3_0_3_fu_1445_p6);

    dut_mux_42_32_1_1_U196 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_883,
        din1 => reg_883,
        din2 => select_ln1148_fu_1306_p3,
        din3 => reg_883,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_2_2_0_3_fu_1458_p6);

    dut_mux_42_32_1_1_U197 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_888,
        din1 => select_ln1148_fu_1306_p3,
        din2 => reg_888,
        din3 => reg_888,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_2_1_0_3_fu_1471_p6);

    dut_mux_42_32_1_1_U198 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln1148_fu_1306_p3,
        din1 => reg_893,
        din2 => reg_893,
        din3 => reg_893,
        din4 => trunc_ln1265_reg_2206,
        dout => attn_weights_V_2_0_0_3_fu_1484_p6);

    dut_mux_42_32_1_1_U199 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_0_0_3_reg_385,
        din1 => attn_weights_V_0_1_0_3_reg_395,
        din2 => attn_weights_V_0_2_0_3_reg_405,
        din3 => attn_weights_V_0_3_0_3_reg_415,
        din4 => trunc_ln1265_1_fu_1529_p1,
        dout => tmp_1_fu_1533_p6);

    dut_mux_42_32_1_1_U200 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_3_0_3_reg_415,
        din1 => attn_weights_V_0_3_0_3_reg_415,
        din2 => attn_weights_V_0_3_0_3_reg_415,
        din3 => tmp_1_fu_1533_p6,
        din4 => trunc_ln1265_1_fu_1529_p1,
        dout => attn_weights_V_0_3_0_4_fu_1547_p6);

    dut_mux_42_32_1_1_U201 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_2_0_3_reg_405,
        din1 => attn_weights_V_0_2_0_3_reg_405,
        din2 => tmp_1_fu_1533_p6,
        din3 => attn_weights_V_0_2_0_3_reg_405,
        din4 => trunc_ln1265_1_fu_1529_p1,
        dout => attn_weights_V_0_2_0_4_fu_1561_p6);

    dut_mux_42_32_1_1_U202 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_weights_V_0_1_0_3_reg_395,
        din1 => tmp_1_fu_1533_p6,
        din2 => attn_weights_V_0_1_0_3_reg_395,
        din3 => attn_weights_V_0_1_0_3_reg_395,
        din4 => trunc_ln1265_1_fu_1529_p1,
        dout => attn_weights_V_0_1_0_4_fu_1575_p6);

    dut_mux_42_32_1_1_U203 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_1533_p6,
        din1 => attn_weights_V_0_0_0_3_reg_385,
        din2 => attn_weights_V_0_0_0_3_reg_385,
        din3 => attn_weights_V_0_0_0_3_reg_385,
        din4 => trunc_ln1265_1_fu_1529_p1,
        dout => attn_weights_V_0_0_0_4_fu_1589_p6);

    dut_mux_42_32_1_1_U204 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_output_0_reg_2362,
        din1 => attn_output_0_1_reg_2367,
        din2 => attn_output_0_2_reg_2372,
        din3 => attn_output_0_3_reg_2377,
        din4 => trunc_ln223_fu_1739_p1,
        dout => tmp_3_fu_1756_p6);

    dut_mux_42_32_1_1_U205 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_output_1_reg_2382,
        din1 => attn_output_1_1_reg_2387,
        din2 => attn_output_1_2_reg_2392,
        din3 => attn_output_1_3_reg_2397,
        din4 => trunc_ln223_fu_1739_p1,
        dout => tmp_4_fu_1778_p6);

    dut_mux_42_32_1_1_U206 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_output_2_reg_2402,
        din1 => attn_output_2_1_reg_2407,
        din2 => attn_output_2_2_reg_2412,
        din3 => attn_output_2_3_reg_2417,
        din4 => trunc_ln223_reg_2450,
        dout => tmp_6_fu_1799_p6);

    dut_mux_42_32_1_1_U207 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => attn_output_3_reg_2422,
        din1 => attn_output_3_1_reg_2427,
        din2 => attn_output_3_2_reg_2432,
        din3 => attn_output_3_3_reg_2437,
        din4 => trunc_ln223_reg_2450,
        dout => tmp_7_fu_1819_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_GEMM_3D_float_1_fu_590_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_GEMM_3D_float_1_fu_590_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    grp_GEMM_3D_float_1_fu_590_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_GEMM_3D_float_1_fu_590_ap_ready = ap_const_logic_1)) then 
                    grp_GEMM_3D_float_1_fu_590_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_GEMM_3D_float_fu_567_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_GEMM_3D_float_fu_567_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_GEMM_3D_float_fu_567_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_GEMM_3D_float_fu_567_ap_ready = ap_const_logic_1)) then 
                    grp_GEMM_3D_float_fu_567_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_apply_rotary_pos_emb_fu_511_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_apply_rotary_pos_emb_fu_511_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_apply_rotary_pos_emb_fu_511_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_apply_rotary_pos_emb_fu_511_ap_ready = ap_const_logic_1)) then 
                    grp_apply_rotary_pos_emb_fu_511_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cache_update_fu_610_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cache_update_fu_610_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    grp_cache_update_fu_610_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cache_update_fu_610_ap_ready = ap_const_logic_1)) then 
                    grp_cache_update_fu_610_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_init_2d_mem_fu_653_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_init_2d_mem_fu_653_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((icmp_ln36_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln195_fu_1517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
                    grp_init_2d_mem_fu_653_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_init_2d_mem_fu_653_ap_ready = ap_const_logic_1)) then 
                    grp_init_2d_mem_fu_653_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_init_2d_mem_fu_658_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_init_2d_mem_fu_658_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln36_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_init_2d_mem_fu_658_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_init_2d_mem_fu_658_ap_ready = ap_const_logic_1)) then 
                    grp_init_2d_mem_fu_658_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_init_2d_mem_fu_663_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_init_2d_mem_fu_663_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln36_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_init_2d_mem_fu_663_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_init_2d_mem_fu_663_ap_ready = ap_const_logic_1)) then 
                    grp_init_2d_mem_fu_663_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_linear_forward_no_mu_fu_458_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_linear_forward_no_mu_fu_458_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_linear_forward_no_mu_fu_458_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_linear_forward_no_mu_fu_458_ap_ready = ap_const_logic_1)) then 
                    grp_linear_forward_no_mu_fu_458_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_quantize_activation_fu_560_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_quantize_activation_fu_560_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((icmp_ln36_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_quantize_activation_fu_560_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_quantize_activation_fu_560_ap_ready = ap_const_logic_1)) then 
                    grp_quantize_activation_fu_560_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reshape_2D_to_3D_fu_637_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reshape_2D_to_3D_fu_637_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_reshape_2D_to_3D_fu_637_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reshape_2D_to_3D_fu_637_ap_ready = ap_const_logic_1)) then 
                    grp_reshape_2D_to_3D_fu_637_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rms_norm_16_s_fu_551_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rms_norm_16_s_fu_551_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_rms_norm_16_s_fu_551_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rms_norm_16_s_fu_551_ap_ready = ap_const_logic_1)) then 
                    grp_rms_norm_16_s_fu_551_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_1_4_3_s_fu_491_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_1_4_3_s_fu_491_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln195_fu_1517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    grp_softmax_1_4_3_s_fu_491_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_1_4_3_s_fu_491_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_1_4_3_s_fu_491_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_transpose_last_two_d_fu_642_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_transpose_last_two_d_fu_642_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_transpose_last_two_d_fu_642_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_transpose_last_two_d_fu_642_ap_ready = ap_const_logic_1)) then 
                    grp_transpose_last_two_d_fu_642_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    attn_weights_V_0_0_0_3_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                attn_weights_V_0_0_0_3_reg_385 <= attn_weights_V_0_0_0_6_fu_252;
            elsif (((icmp_ln195_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                attn_weights_V_0_0_0_3_reg_385 <= attn_weights_V_0_0_0_4_fu_1589_p6;
            end if; 
        end if;
    end process;

    attn_weights_V_0_0_0_6_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_0))) then 
                attn_weights_V_0_0_0_6_fu_252 <= attn_weights_V_0_0_0_5_fu_1415_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_0_0_0_6_fu_252 <= grp_GEMM_3D_float_fu_567_ap_return_0;
            end if; 
        end if;
    end process;

    attn_weights_V_0_1_0_3_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                attn_weights_V_0_1_0_3_reg_395 <= attn_weights_V_0_1_0_6_fu_248;
            elsif (((icmp_ln195_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                attn_weights_V_0_1_0_3_reg_395 <= attn_weights_V_0_1_0_4_fu_1575_p6;
            end if; 
        end if;
    end process;

    attn_weights_V_0_1_0_6_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_0))) then 
                attn_weights_V_0_1_0_6_fu_248 <= attn_weights_V_0_1_0_5_fu_1405_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_0_1_0_6_fu_248 <= grp_GEMM_3D_float_fu_567_ap_return_1;
            end if; 
        end if;
    end process;

    attn_weights_V_0_2_0_3_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                attn_weights_V_0_2_0_3_reg_405 <= attn_weights_V_0_2_0_6_fu_244;
            elsif (((icmp_ln195_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                attn_weights_V_0_2_0_3_reg_405 <= attn_weights_V_0_2_0_4_fu_1561_p6;
            end if; 
        end if;
    end process;

    attn_weights_V_0_2_0_6_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_0))) then 
                attn_weights_V_0_2_0_6_fu_244 <= attn_weights_V_0_2_0_5_fu_1395_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_0_2_0_6_fu_244 <= grp_GEMM_3D_float_fu_567_ap_return_2;
            end if; 
        end if;
    end process;

    attn_weights_V_0_3_0_3_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                attn_weights_V_0_3_0_3_reg_415 <= attn_weights_V_0_3_0_6_fu_240;
            elsif (((icmp_ln195_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                attn_weights_V_0_3_0_3_reg_415 <= attn_weights_V_0_3_0_4_fu_1547_p6;
            end if; 
        end if;
    end process;

    attn_weights_V_0_3_0_6_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_0))) then 
                attn_weights_V_0_3_0_6_fu_240 <= attn_weights_V_0_3_0_5_fu_1385_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_0_3_0_6_fu_240 <= grp_GEMM_3D_float_fu_567_ap_return_3;
            end if; 
        end if;
    end process;

    attn_weights_V_1_0_0_4_fu_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_1))) then 
                attn_weights_V_1_0_0_4_fu_284 <= attn_weights_V_1_0_0_3_fu_1352_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_1_0_0_4_fu_284 <= grp_GEMM_3D_float_fu_567_ap_return_4;
            end if; 
        end if;
    end process;

    attn_weights_V_1_1_0_4_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_1))) then 
                attn_weights_V_1_1_0_4_fu_280 <= attn_weights_V_1_1_0_3_fu_1339_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_1_1_0_4_fu_280 <= grp_GEMM_3D_float_fu_567_ap_return_5;
            end if; 
        end if;
    end process;

    attn_weights_V_1_2_0_4_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_1))) then 
                attn_weights_V_1_2_0_4_fu_276 <= attn_weights_V_1_2_0_3_fu_1326_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_1_2_0_4_fu_276 <= grp_GEMM_3D_float_fu_567_ap_return_6;
            end if; 
        end if;
    end process;

    attn_weights_V_1_3_0_4_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (d_0_0_reg_373 = ap_const_lv2_1))) then 
                attn_weights_V_1_3_0_4_fu_272 <= attn_weights_V_1_3_0_3_fu_1313_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_1_3_0_4_fu_272 <= grp_GEMM_3D_float_fu_567_ap_return_7;
            end if; 
        end if;
    end process;

    attn_weights_V_2_0_0_4_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((d_0_0_reg_373 = ap_const_lv2_1)) and not((d_0_0_reg_373 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                attn_weights_V_2_0_0_4_fu_268 <= attn_weights_V_2_0_0_3_fu_1484_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_2_0_0_4_fu_268 <= grp_GEMM_3D_float_fu_567_ap_return_8;
            end if; 
        end if;
    end process;

    attn_weights_V_2_1_0_4_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((d_0_0_reg_373 = ap_const_lv2_1)) and not((d_0_0_reg_373 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                attn_weights_V_2_1_0_4_fu_264 <= attn_weights_V_2_1_0_3_fu_1471_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_2_1_0_4_fu_264 <= grp_GEMM_3D_float_fu_567_ap_return_9;
            end if; 
        end if;
    end process;

    attn_weights_V_2_2_0_4_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((d_0_0_reg_373 = ap_const_lv2_1)) and not((d_0_0_reg_373 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                attn_weights_V_2_2_0_4_fu_260 <= attn_weights_V_2_2_0_3_fu_1458_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_2_2_0_4_fu_260 <= grp_GEMM_3D_float_fu_567_ap_return_10;
            end if; 
        end if;
    end process;

    attn_weights_V_2_3_0_4_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((d_0_0_reg_373 = ap_const_lv2_1)) and not((d_0_0_reg_373 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                attn_weights_V_2_3_0_4_fu_256 <= attn_weights_V_2_3_0_3_fu_1445_p6;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                attn_weights_V_2_3_0_4_fu_256 <= grp_GEMM_3D_float_fu_567_ap_return_11;
            end if; 
        end if;
    end process;

    d_0_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                d_0_0_reg_373 <= add_ln190_reg_2226;
            elsif (((icmp_ln188_fu_1187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                d_0_0_reg_373 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    h100_0_0_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                h100_0_0_reg_436 <= add_ln221_reg_2445;
            elsif (((grp_GEMM_3D_float_1_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                h100_0_0_reg_436 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h85_0_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                h85_0_reg_425 <= ap_const_lv3_0;
            elsif (((icmp_ln195_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                h85_0_reg_425 <= h_fu_1523_p2;
            end if; 
        end if;
    end process;

    h_0_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln190_fu_1203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                h_0_reg_362 <= h_1_reg_2201;
            elsif (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                h_0_reg_362 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_0_i2_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                j_0_0_i2_reg_447 <= add_ln36_1_fu_1835_p2;
            elsif (((grp_rms_norm_16_s_fu_551_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                j_0_0_i2_reg_447 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_0_i_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_0_i_reg_351 <= add_ln36_fu_924_p2;
            elsif (((grp_rms_norm_16_s_fu_551_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_0_i_reg_351 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln190_reg_2226 <= add_ln190_fu_1209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln221_reg_2445 <= add_ln221_fu_1733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_GEMM_3D_float_1_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                attn_output_0_1_reg_2367 <= grp_GEMM_3D_float_1_fu_590_ap_return_1;
                attn_output_0_2_reg_2372 <= grp_GEMM_3D_float_1_fu_590_ap_return_2;
                attn_output_0_3_reg_2377 <= grp_GEMM_3D_float_1_fu_590_ap_return_3;
                attn_output_0_reg_2362 <= grp_GEMM_3D_float_1_fu_590_ap_return_0;
                attn_output_1_1_reg_2387 <= grp_GEMM_3D_float_1_fu_590_ap_return_5;
                attn_output_1_2_reg_2392 <= grp_GEMM_3D_float_1_fu_590_ap_return_6;
                attn_output_1_3_reg_2397 <= grp_GEMM_3D_float_1_fu_590_ap_return_7;
                attn_output_1_reg_2382 <= grp_GEMM_3D_float_1_fu_590_ap_return_4;
                attn_output_2_1_reg_2407 <= grp_GEMM_3D_float_1_fu_590_ap_return_9;
                attn_output_2_2_reg_2412 <= grp_GEMM_3D_float_1_fu_590_ap_return_10;
                attn_output_2_3_reg_2417 <= grp_GEMM_3D_float_1_fu_590_ap_return_11;
                attn_output_2_reg_2402 <= grp_GEMM_3D_float_1_fu_590_ap_return_8;
                attn_output_3_1_reg_2427 <= grp_GEMM_3D_float_1_fu_590_ap_return_13;
                attn_output_3_2_reg_2432 <= grp_GEMM_3D_float_1_fu_590_ap_return_14;
                attn_output_3_3_reg_2437 <= grp_GEMM_3D_float_1_fu_590_ap_return_15;
                attn_output_3_reg_2422 <= grp_GEMM_3D_float_1_fu_590_ap_return_12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln190_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                attn_weights_V_0_0_0_1_reg_2252 <= attn_weights_V_0_0_0_6_fu_252;
                attn_weights_V_0_1_0_1_reg_2245 <= attn_weights_V_0_1_0_6_fu_248;
                attn_weights_V_0_2_0_1_reg_2238 <= attn_weights_V_0_2_0_6_fu_244;
                attn_weights_V_0_3_0_1_reg_2231 <= attn_weights_V_0_3_0_6_fu_240;
                lshr_ln1148_s_reg_2269 <= tmp_2_fu_1222_p14(31 downto 1);
                tmp_47_reg_2259 <= tmp_2_fu_1222_p14(31 downto 31);
                tmp_8_reg_2264 <= sub_ln1148_fu_1268_p2(53 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                attn_weights_V_0_0_0_7_reg_2302 <= grp_softmax_1_4_3_s_fu_491_ap_return_0;
                attn_weights_V_0_1_0_7_reg_2307 <= grp_softmax_1_4_3_s_fu_491_ap_return_1;
                attn_weights_V_0_2_0_7_reg_2312 <= grp_softmax_1_4_3_s_fu_491_ap_return_2;
                attn_weights_V_0_3_0_7_reg_2317 <= grp_softmax_1_4_3_s_fu_491_ap_return_3;
                attn_weights_V_1_0_0_5_reg_2322 <= grp_softmax_1_4_3_s_fu_491_ap_return_4;
                attn_weights_V_1_1_0_5_reg_2327 <= grp_softmax_1_4_3_s_fu_491_ap_return_5;
                attn_weights_V_1_2_0_5_reg_2332 <= grp_softmax_1_4_3_s_fu_491_ap_return_6;
                attn_weights_V_1_3_0_5_reg_2337 <= grp_softmax_1_4_3_s_fu_491_ap_return_7;
                attn_weights_V_2_0_0_5_reg_2342 <= grp_softmax_1_4_3_s_fu_491_ap_return_8;
                attn_weights_V_2_1_0_5_reg_2347 <= grp_softmax_1_4_3_s_fu_491_ap_return_9;
                attn_weights_V_2_2_0_5_reg_2352 <= grp_softmax_1_4_3_s_fu_491_ap_return_10;
                attn_weights_V_2_3_0_5_reg_2357 <= grp_softmax_1_4_3_s_fu_491_ap_return_11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                h_1_reg_2201 <= h_1_fu_1193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                k_embed_V_0_1_reg_2103 <= grp_apply_rotary_pos_emb_fu_511_ap_return_17;
                k_embed_V_0_2_reg_2108 <= grp_apply_rotary_pos_emb_fu_511_ap_return_18;
                k_embed_V_0_3_reg_2113 <= grp_apply_rotary_pos_emb_fu_511_ap_return_19;
                k_embed_V_0_reg_2098 <= grp_apply_rotary_pos_emb_fu_511_ap_return_16;
                k_embed_V_1_1_reg_2123 <= grp_apply_rotary_pos_emb_fu_511_ap_return_21;
                k_embed_V_1_2_reg_2128 <= grp_apply_rotary_pos_emb_fu_511_ap_return_22;
                k_embed_V_1_3_reg_2133 <= grp_apply_rotary_pos_emb_fu_511_ap_return_23;
                k_embed_V_1_reg_2118 <= grp_apply_rotary_pos_emb_fu_511_ap_return_20;
                k_embed_V_2_1_reg_2143 <= grp_apply_rotary_pos_emb_fu_511_ap_return_25;
                k_embed_V_2_2_reg_2148 <= grp_apply_rotary_pos_emb_fu_511_ap_return_26;
                k_embed_V_2_3_reg_2153 <= grp_apply_rotary_pos_emb_fu_511_ap_return_27;
                k_embed_V_2_reg_2138 <= grp_apply_rotary_pos_emb_fu_511_ap_return_24;
                k_embed_V_3_1_reg_2163 <= grp_apply_rotary_pos_emb_fu_511_ap_return_29;
                k_embed_V_3_2_reg_2168 <= grp_apply_rotary_pos_emb_fu_511_ap_return_30;
                k_embed_V_3_3_reg_2173 <= grp_apply_rotary_pos_emb_fu_511_ap_return_31;
                k_embed_V_3_reg_2158 <= grp_apply_rotary_pos_emb_fu_511_ap_return_28;
                q_embed_V_0_1_reg_2023 <= grp_apply_rotary_pos_emb_fu_511_ap_return_1;
                q_embed_V_0_2_reg_2028 <= grp_apply_rotary_pos_emb_fu_511_ap_return_2;
                q_embed_V_0_3_reg_2033 <= grp_apply_rotary_pos_emb_fu_511_ap_return_3;
                q_embed_V_0_reg_2018 <= grp_apply_rotary_pos_emb_fu_511_ap_return_0;
                q_embed_V_1_1_reg_2043 <= grp_apply_rotary_pos_emb_fu_511_ap_return_5;
                q_embed_V_1_2_reg_2048 <= grp_apply_rotary_pos_emb_fu_511_ap_return_6;
                q_embed_V_1_3_reg_2053 <= grp_apply_rotary_pos_emb_fu_511_ap_return_7;
                q_embed_V_1_reg_2038 <= grp_apply_rotary_pos_emb_fu_511_ap_return_4;
                q_embed_V_2_1_reg_2063 <= grp_apply_rotary_pos_emb_fu_511_ap_return_9;
                q_embed_V_2_2_reg_2068 <= grp_apply_rotary_pos_emb_fu_511_ap_return_10;
                q_embed_V_2_3_reg_2073 <= grp_apply_rotary_pos_emb_fu_511_ap_return_11;
                q_embed_V_2_reg_2058 <= grp_apply_rotary_pos_emb_fu_511_ap_return_8;
                q_embed_V_3_1_reg_2083 <= grp_apply_rotary_pos_emb_fu_511_ap_return_13;
                q_embed_V_3_2_reg_2088 <= grp_apply_rotary_pos_emb_fu_511_ap_return_14;
                q_embed_V_3_3_reg_2093 <= grp_apply_rotary_pos_emb_fu_511_ap_return_15;
                q_embed_V_3_reg_2078 <= grp_apply_rotary_pos_emb_fu_511_ap_return_12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                k_proj_V_0_1_reg_1943 <= grp_reshape_2D_to_3D_fu_637_ap_return_1;
                k_proj_V_0_2_reg_1948 <= grp_reshape_2D_to_3D_fu_637_ap_return_2;
                k_proj_V_0_3_reg_1953 <= grp_reshape_2D_to_3D_fu_637_ap_return_3;
                k_proj_V_0_reg_1938 <= grp_reshape_2D_to_3D_fu_637_ap_return_0;
                k_proj_V_1_1_reg_1963 <= grp_reshape_2D_to_3D_fu_637_ap_return_5;
                k_proj_V_1_2_reg_1968 <= grp_reshape_2D_to_3D_fu_637_ap_return_6;
                k_proj_V_1_3_reg_1973 <= grp_reshape_2D_to_3D_fu_637_ap_return_7;
                k_proj_V_1_reg_1958 <= grp_reshape_2D_to_3D_fu_637_ap_return_4;
                k_proj_V_2_1_reg_1983 <= grp_reshape_2D_to_3D_fu_637_ap_return_9;
                k_proj_V_2_2_reg_1988 <= grp_reshape_2D_to_3D_fu_637_ap_return_10;
                k_proj_V_2_3_reg_1993 <= grp_reshape_2D_to_3D_fu_637_ap_return_11;
                k_proj_V_2_reg_1978 <= grp_reshape_2D_to_3D_fu_637_ap_return_8;
                k_proj_V_3_1_reg_2003 <= grp_reshape_2D_to_3D_fu_637_ap_return_13;
                k_proj_V_3_2_reg_2008 <= grp_reshape_2D_to_3D_fu_637_ap_return_14;
                k_proj_V_3_3_reg_2013 <= grp_reshape_2D_to_3D_fu_637_ap_return_15;
                k_proj_V_3_reg_1998 <= grp_reshape_2D_to_3D_fu_637_ap_return_12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state29_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_777 <= grp_quantize_activation_fu_560_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_782 <= grp_reshape_2D_to_3D_fu_637_ap_return_0;
                reg_788 <= grp_reshape_2D_to_3D_fu_637_ap_return_1;
                reg_794 <= grp_reshape_2D_to_3D_fu_637_ap_return_2;
                reg_800 <= grp_reshape_2D_to_3D_fu_637_ap_return_3;
                reg_806 <= grp_reshape_2D_to_3D_fu_637_ap_return_4;
                reg_812 <= grp_reshape_2D_to_3D_fu_637_ap_return_5;
                reg_818 <= grp_reshape_2D_to_3D_fu_637_ap_return_6;
                reg_824 <= grp_reshape_2D_to_3D_fu_637_ap_return_7;
                reg_830 <= grp_reshape_2D_to_3D_fu_637_ap_return_8;
                reg_836 <= grp_reshape_2D_to_3D_fu_637_ap_return_9;
                reg_842 <= grp_reshape_2D_to_3D_fu_637_ap_return_10;
                reg_848 <= grp_reshape_2D_to_3D_fu_637_ap_return_11;
                reg_854 <= grp_reshape_2D_to_3D_fu_637_ap_return_12;
                reg_860 <= grp_reshape_2D_to_3D_fu_637_ap_return_13;
                reg_866 <= grp_reshape_2D_to_3D_fu_637_ap_return_14;
                reg_872 <= grp_reshape_2D_to_3D_fu_637_ap_return_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln195_fu_1517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln190_fu_1203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then
                reg_878 <= attn_weights_V_2_3_0_4_fu_256;
                reg_883 <= attn_weights_V_2_2_0_4_fu_260;
                reg_888 <= attn_weights_V_2_1_0_4_fu_264;
                reg_893 <= attn_weights_V_2_0_0_4_fu_268;
                reg_898 <= attn_weights_V_1_3_0_4_fu_272;
                reg_903 <= attn_weights_V_1_2_0_4_fu_276;
                reg_908 <= attn_weights_V_1_1_0_4_fu_280;
                reg_913 <= attn_weights_V_1_0_0_4_fu_284;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_1727_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    shl_ln3_reg_2456(3 downto 2) <= shl_ln3_fu_1743_p3(3 downto 2);
                trunc_ln223_reg_2450 <= trunc_ln223_fu_1739_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                trunc_ln1265_reg_2206 <= trunc_ln1265_fu_1199_p1;
            end if;
        end if;
    end process;
    shl_ln3_reg_2456(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state29, ap_block_state29_on_subcall_done, ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_ap_done, ap_block_state8_on_subcall_done, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state19, icmp_ln190_fu_1203_p2, ap_CS_fsm_state21, icmp_ln195_fu_1517_p2, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state18, icmp_ln188_fu_1187_p2, ap_CS_fsm_state22, ap_block_state22_on_subcall_done, ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_ap_done, ap_CS_fsm_state24, icmp_ln221_fu_1727_p2, ap_CS_fsm_state28, grp_rms_norm_16_s_fu_551_ap_done, grp_GEMM_3D_float_fu_567_ap_done, grp_cache_update_fu_610_ap_done, ap_CS_fsm_state2, icmp_ln36_fu_918_p2, ap_CS_fsm_state17, ap_CS_fsm_state27, icmp_ln36_1_fu_1829_p2, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_rms_norm_16_s_fu_551_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln36_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_linear_forward_no_mu_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_cache_update_fu_610_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_GEMM_3D_float_fu_567_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln188_fu_1187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln190_fu_1203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln195_fu_1517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((grp_GEMM_3D_float_1_fu_590_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln221_fu_1727_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_rms_norm_16_s_fu_551_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_boolean_0 = ap_block_state29_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_linear_forward_no_mu_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln190_fu_1209_p2 <= std_logic_vector(unsigned(d_0_0_reg_373) + unsigned(ap_const_lv2_1));
    add_ln221_fu_1733_p2 <= std_logic_vector(unsigned(h100_0_0_reg_436) + unsigned(ap_const_lv3_1));
    add_ln36_1_fu_1835_p2 <= std_logic_vector(unsigned(j_0_0_i2_reg_447) + unsigned(ap_const_lv5_1));
    add_ln36_fu_924_p2 <= std_logic_vector(unsigned(j_0_0_i_reg_351) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_linear_forward_no_mu_fu_458_ap_done, grp_reshape_2D_to_3D_fu_637_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_reshape_2D_to_3D_fu_637_ap_done = ap_const_logic_0) or (grp_linear_forward_no_mu_fu_458_ap_done = ap_const_logic_0));
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(grp_reshape_2D_to_3D_fu_637_ap_done, grp_apply_rotary_pos_emb_fu_511_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_apply_rotary_pos_emb_fu_511_ap_done = ap_const_logic_0) or (grp_reshape_2D_to_3D_fu_637_ap_done = ap_const_logic_0));
    end process;


    ap_block_state15_on_subcall_done_assign_proc : process(grp_cache_update_fu_610_ap_done, grp_transpose_last_two_d_fu_642_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((grp_transpose_last_two_d_fu_642_ap_done = ap_const_logic_0) or (grp_cache_update_fu_610_ap_done = ap_const_logic_0));
    end process;


    ap_block_state22_on_subcall_done_assign_proc : process(grp_init_2d_mem_fu_653_ap_done, grp_softmax_1_4_3_s_fu_491_ap_done)
    begin
                ap_block_state22_on_subcall_done <= ((grp_softmax_1_4_3_s_fu_491_ap_done = ap_const_logic_0) or (grp_init_2d_mem_fu_653_ap_done = ap_const_logic_0));
    end process;


    ap_block_state29_on_subcall_done_assign_proc : process(grp_quantize_activation_fu_560_ap_done, grp_init_2d_mem_fu_653_ap_done)
    begin
                ap_block_state29_on_subcall_done <= ((grp_init_2d_mem_fu_653_ap_done = ap_const_logic_0) or (grp_quantize_activation_fu_560_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_quantize_activation_fu_560_ap_done, grp_init_2d_mem_fu_653_ap_done, grp_init_2d_mem_fu_658_ap_done, grp_init_2d_mem_fu_663_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_init_2d_mem_fu_663_ap_done = ap_const_logic_0) or (grp_init_2d_mem_fu_658_ap_done = ap_const_logic_0) or (grp_init_2d_mem_fu_653_ap_done = ap_const_logic_0) or (grp_quantize_activation_fu_560_ap_done = ap_const_logic_0));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_linear_forward_no_mu_fu_458_ap_done, grp_reshape_2D_to_3D_fu_637_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_reshape_2D_to_3D_fu_637_ap_done = ap_const_logic_0) or (grp_linear_forward_no_mu_fu_458_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_linear_forward_no_mu_fu_458_ap_done, ap_CS_fsm_state31)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_linear_forward_no_mu_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_linear_forward_no_mu_fu_458_ap_done, ap_CS_fsm_state31)
    begin
        if (((grp_linear_forward_no_mu_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    attn_output_2D_0_V_address0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state24, grp_rms_norm_16_s_fu_551_input_0_V_address0, grp_quantize_activation_fu_560_input_0_V_address0, grp_init_2d_mem_fu_653_mem_0_V_address0, ap_CS_fsm_state25, ap_CS_fsm_state27, zext_ln223_fu_1751_p1, zext_ln223_2_fu_1794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            attn_output_2D_0_V_address0 <= zext_ln223_2_fu_1794_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            attn_output_2D_0_V_address0 <= zext_ln223_fu_1751_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            attn_output_2D_0_V_address0 <= grp_init_2d_mem_fu_653_mem_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            attn_output_2D_0_V_address0 <= grp_quantize_activation_fu_560_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            attn_output_2D_0_V_address0 <= grp_rms_norm_16_s_fu_551_input_0_V_address0;
        else 
            attn_output_2D_0_V_address0 <= "XXXX";
        end if; 
    end process;


    attn_output_2D_0_V_address1_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state24, grp_rms_norm_16_s_fu_551_input_0_V_address1, grp_quantize_activation_fu_560_input_0_V_address1, ap_CS_fsm_state25, ap_CS_fsm_state27, zext_ln223_1_fu_1773_p1, zext_ln223_3_fu_1814_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            attn_output_2D_0_V_address1 <= zext_ln223_3_fu_1814_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            attn_output_2D_0_V_address1 <= zext_ln223_1_fu_1773_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            attn_output_2D_0_V_address1 <= grp_quantize_activation_fu_560_input_0_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            attn_output_2D_0_V_address1 <= grp_rms_norm_16_s_fu_551_input_0_V_address1;
        else 
            attn_output_2D_0_V_address1 <= "XXXX";
        end if; 
    end process;


    attn_output_2D_0_V_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state24, grp_rms_norm_16_s_fu_551_input_0_V_ce0, grp_quantize_activation_fu_560_input_0_V_ce0, grp_init_2d_mem_fu_653_mem_0_V_ce0, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            attn_output_2D_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            attn_output_2D_0_V_ce0 <= grp_init_2d_mem_fu_653_mem_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            attn_output_2D_0_V_ce0 <= grp_quantize_activation_fu_560_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            attn_output_2D_0_V_ce0 <= grp_rms_norm_16_s_fu_551_input_0_V_ce0;
        else 
            attn_output_2D_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    attn_output_2D_0_V_ce1_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state24, grp_rms_norm_16_s_fu_551_input_0_V_ce1, grp_quantize_activation_fu_560_input_0_V_ce1, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            attn_output_2D_0_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            attn_output_2D_0_V_ce1 <= grp_quantize_activation_fu_560_input_0_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            attn_output_2D_0_V_ce1 <= grp_rms_norm_16_s_fu_551_input_0_V_ce1;
        else 
            attn_output_2D_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    attn_output_2D_0_V_d0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state24, grp_init_2d_mem_fu_653_mem_0_V_d0, ap_CS_fsm_state25, tmp_3_fu_1756_p6, tmp_6_fu_1799_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            attn_output_2D_0_V_d0 <= tmp_6_fu_1799_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            attn_output_2D_0_V_d0 <= tmp_3_fu_1756_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            attn_output_2D_0_V_d0 <= grp_init_2d_mem_fu_653_mem_0_V_d0;
        else 
            attn_output_2D_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    attn_output_2D_0_V_d1_assign_proc : process(ap_CS_fsm_state24, grp_rms_norm_16_s_fu_551_input_0_V_d1, ap_CS_fsm_state25, ap_CS_fsm_state27, tmp_4_fu_1778_p6, tmp_7_fu_1819_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            attn_output_2D_0_V_d1 <= tmp_7_fu_1819_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            attn_output_2D_0_V_d1 <= tmp_4_fu_1778_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            attn_output_2D_0_V_d1 <= grp_rms_norm_16_s_fu_551_input_0_V_d1;
        else 
            attn_output_2D_0_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    attn_output_2D_0_V_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state24, icmp_ln221_fu_1727_p2, grp_init_2d_mem_fu_653_mem_0_V_we0, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln221_fu_1727_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            attn_output_2D_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            attn_output_2D_0_V_we0 <= grp_init_2d_mem_fu_653_mem_0_V_we0;
        else 
            attn_output_2D_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    attn_output_2D_0_V_we1_assign_proc : process(ap_CS_fsm_state24, icmp_ln221_fu_1727_p2, grp_rms_norm_16_s_fu_551_input_0_V_we1, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln221_fu_1727_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            attn_output_2D_0_V_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            attn_output_2D_0_V_we1 <= grp_rms_norm_16_s_fu_551_input_0_V_we1;
        else 
            attn_output_2D_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    final_output_0_V_address0_assign_proc : process(ap_CS_fsm_state29, grp_linear_forward_no_mu_fu_458_output_0_V_address0, grp_init_2d_mem_fu_653_mem_0_V_address0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            final_output_0_V_address0 <= grp_init_2d_mem_fu_653_mem_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            final_output_0_V_address0 <= grp_linear_forward_no_mu_fu_458_output_0_V_address0;
        else 
            final_output_0_V_address0 <= "XXXX";
        end if; 
    end process;

    final_output_0_V_address1 <= grp_linear_forward_no_mu_fu_458_output_0_V_address1;

    final_output_0_V_ce0_assign_proc : process(ap_CS_fsm_state29, grp_linear_forward_no_mu_fu_458_output_0_V_ce0, grp_init_2d_mem_fu_653_mem_0_V_ce0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            final_output_0_V_ce0 <= grp_init_2d_mem_fu_653_mem_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            final_output_0_V_ce0 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce0;
        else 
            final_output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    final_output_0_V_ce1_assign_proc : process(grp_linear_forward_no_mu_fu_458_output_0_V_ce1, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            final_output_0_V_ce1 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce1;
        else 
            final_output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    final_output_0_V_d0_assign_proc : process(ap_CS_fsm_state29, grp_linear_forward_no_mu_fu_458_output_0_V_d0, grp_init_2d_mem_fu_653_mem_0_V_d0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            final_output_0_V_d0 <= grp_init_2d_mem_fu_653_mem_0_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            final_output_0_V_d0 <= grp_linear_forward_no_mu_fu_458_output_0_V_d0;
        else 
            final_output_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    final_output_0_V_d1 <= grp_linear_forward_no_mu_fu_458_output_0_V_d1;

    final_output_0_V_we0_assign_proc : process(ap_CS_fsm_state29, grp_linear_forward_no_mu_fu_458_output_0_V_we0, grp_init_2d_mem_fu_653_mem_0_V_we0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            final_output_0_V_we0 <= grp_init_2d_mem_fu_653_mem_0_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            final_output_0_V_we0 <= grp_linear_forward_no_mu_fu_458_output_0_V_we0;
        else 
            final_output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    final_output_0_V_we1_assign_proc : process(grp_linear_forward_no_mu_fu_458_output_0_V_we1, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            final_output_0_V_we1 <= grp_linear_forward_no_mu_fu_458_output_0_V_we1;
        else 
            final_output_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_GEMM_3D_float_1_fu_590_ap_start <= grp_GEMM_3D_float_1_fu_590_ap_start_reg;
    grp_GEMM_3D_float_fu_567_ap_start <= grp_GEMM_3D_float_fu_567_ap_start_reg;
    grp_apply_rotary_pos_emb_fu_511_ap_start <= grp_apply_rotary_pos_emb_fu_511_ap_start_reg;
    grp_cache_update_fu_610_ap_start <= grp_cache_update_fu_610_ap_start_reg;

    grp_cache_update_fu_610_cache_in_V_q0_assign_proc : process(k_cache_V_q0, v_cache_V_q0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_cache_in_V_q0 <= v_cache_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_cache_in_V_q0 <= k_cache_V_q0;
        else 
            grp_cache_update_fu_610_cache_in_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read_assign_proc : process(reg_782, k_embed_V_0_reg_2098, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read <= reg_782;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read <= k_embed_V_0_reg_2098;
        else 
            grp_cache_update_fu_610_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read1_assign_proc : process(reg_788, k_embed_V_0_1_reg_2103, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read1 <= reg_788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read1 <= k_embed_V_0_1_reg_2103;
        else 
            grp_cache_update_fu_610_p_read1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read10_assign_proc : process(reg_842, k_embed_V_2_2_reg_2148, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read10 <= reg_842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read10 <= k_embed_V_2_2_reg_2148;
        else 
            grp_cache_update_fu_610_p_read10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read11_assign_proc : process(reg_848, k_embed_V_2_3_reg_2153, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read11 <= reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read11 <= k_embed_V_2_3_reg_2153;
        else 
            grp_cache_update_fu_610_p_read11 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read12_assign_proc : process(reg_854, k_embed_V_3_reg_2158, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read12 <= reg_854;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read12 <= k_embed_V_3_reg_2158;
        else 
            grp_cache_update_fu_610_p_read12 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read13_assign_proc : process(reg_860, k_embed_V_3_1_reg_2163, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read13 <= reg_860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read13 <= k_embed_V_3_1_reg_2163;
        else 
            grp_cache_update_fu_610_p_read13 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read14_assign_proc : process(reg_866, k_embed_V_3_2_reg_2168, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read14 <= reg_866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read14 <= k_embed_V_3_2_reg_2168;
        else 
            grp_cache_update_fu_610_p_read14 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read15_assign_proc : process(reg_872, k_embed_V_3_3_reg_2173, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read15 <= reg_872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read15 <= k_embed_V_3_3_reg_2173;
        else 
            grp_cache_update_fu_610_p_read15 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read2_assign_proc : process(reg_794, k_embed_V_0_2_reg_2108, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read2 <= reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read2 <= k_embed_V_0_2_reg_2108;
        else 
            grp_cache_update_fu_610_p_read2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read3_assign_proc : process(reg_800, k_embed_V_0_3_reg_2113, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read3 <= reg_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read3 <= k_embed_V_0_3_reg_2113;
        else 
            grp_cache_update_fu_610_p_read3 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read4_assign_proc : process(reg_806, k_embed_V_1_reg_2118, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read4 <= reg_806;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read4 <= k_embed_V_1_reg_2118;
        else 
            grp_cache_update_fu_610_p_read4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read5_assign_proc : process(reg_812, k_embed_V_1_1_reg_2123, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read5 <= reg_812;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read5 <= k_embed_V_1_1_reg_2123;
        else 
            grp_cache_update_fu_610_p_read5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read6_assign_proc : process(reg_818, k_embed_V_1_2_reg_2128, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read6 <= reg_818;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read6 <= k_embed_V_1_2_reg_2128;
        else 
            grp_cache_update_fu_610_p_read6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read7_assign_proc : process(reg_824, k_embed_V_1_3_reg_2133, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read7 <= reg_824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read7 <= k_embed_V_1_3_reg_2133;
        else 
            grp_cache_update_fu_610_p_read7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read8_assign_proc : process(reg_830, k_embed_V_2_reg_2138, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read8 <= reg_830;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read8 <= k_embed_V_2_reg_2138;
        else 
            grp_cache_update_fu_610_p_read8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_cache_update_fu_610_p_read9_assign_proc : process(reg_836, k_embed_V_2_1_reg_2143, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_cache_update_fu_610_p_read9 <= reg_836;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_cache_update_fu_610_p_read9 <= k_embed_V_2_1_reg_2143;
        else 
            grp_cache_update_fu_610_p_read9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_init_2d_mem_fu_653_ap_start <= grp_init_2d_mem_fu_653_ap_start_reg;
    grp_init_2d_mem_fu_658_ap_start <= grp_init_2d_mem_fu_658_ap_start_reg;
    grp_init_2d_mem_fu_663_ap_start <= grp_init_2d_mem_fu_663_ap_start_reg;
    grp_linear_forward_no_mu_fu_458_ap_start <= grp_linear_forward_no_mu_fu_458_ap_start_reg;

    grp_linear_forward_no_mu_fu_458_input_0_V_q0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, quantized_hidden_sta_q0, quantized_final_outp_q0, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_input_0_V_q0 <= quantized_final_outp_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_linear_forward_no_mu_fu_458_input_0_V_q0 <= quantized_hidden_sta_q0;
        else 
            grp_linear_forward_no_mu_fu_458_input_0_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_input_0_V_q1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, quantized_hidden_sta_q1, quantized_final_outp_q1, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_input_0_V_q1 <= quantized_final_outp_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_linear_forward_no_mu_fu_458_input_0_V_q1 <= quantized_hidden_sta_q1;
        else 
            grp_linear_forward_no_mu_fu_458_input_0_V_q1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_output_0_V_q0_assign_proc : process(final_output_0_V_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, q_proj_re_0_V_q0, k_proj_re_0_V_q0, v_proj_re_0_V_q0, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q0 <= final_output_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q0 <= v_proj_re_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q0 <= k_proj_re_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q0 <= q_proj_re_0_V_q0;
        else 
            grp_linear_forward_no_mu_fu_458_output_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_output_0_V_q1_assign_proc : process(final_output_0_V_q1, ap_CS_fsm_state8, ap_CS_fsm_state10, q_proj_re_0_V_q1, k_proj_re_0_V_q1, v_proj_re_0_V_q1, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q1 <= final_output_0_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q1 <= v_proj_re_0_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q1 <= k_proj_re_0_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_output_0_V_q1 <= q_proj_re_0_V_q1;
        else 
            grp_linear_forward_no_mu_fu_458_output_0_V_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0_assign_proc : process(q_weights_V_0_q0, k_weights_V_0_q0, v_weights_V_0_q0, o_weights_V_0_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0 <= o_weights_V_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0 <= v_weights_V_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0 <= k_weights_V_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0 <= q_weights_V_0_q0;
        else 
            grp_linear_forward_no_mu_fu_458_packed_weights_0_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0_assign_proc : process(q_weights_V_1_q0, k_weights_V_1_q0, v_weights_V_1_q0, o_weights_V_1_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0 <= o_weights_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0 <= v_weights_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0 <= k_weights_V_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0 <= q_weights_V_1_q0;
        else 
            grp_linear_forward_no_mu_fu_458_packed_weights_1_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0_assign_proc : process(q_weights_V_2_q0, k_weights_V_2_q0, v_weights_V_2_q0, o_weights_V_2_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0 <= o_weights_V_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0 <= v_weights_V_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0 <= k_weights_V_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0 <= q_weights_V_2_q0;
        else 
            grp_linear_forward_no_mu_fu_458_packed_weights_2_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0_assign_proc : process(q_weights_V_3_q0, k_weights_V_3_q0, v_weights_V_3_q0, o_weights_V_3_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0 <= o_weights_V_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0 <= v_weights_V_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0 <= k_weights_V_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0 <= q_weights_V_3_q0;
        else 
            grp_linear_forward_no_mu_fu_458_packed_weights_3_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_linear_forward_no_mu_fu_458_w_scale_V_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_linear_forward_no_mu_fu_458_w_scale_V <= ap_const_lv28_2C711D0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_linear_forward_no_mu_fu_458_w_scale_V <= ap_const_lv28_2BB4740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_linear_forward_no_mu_fu_458_w_scale_V <= ap_const_lv28_4B564FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_linear_forward_no_mu_fu_458_w_scale_V <= ap_const_lv28_4CAB8A0;
        else 
            grp_linear_forward_no_mu_fu_458_w_scale_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_quantize_activation_fu_560_ap_start <= grp_quantize_activation_fu_560_ap_start_reg;

    grp_quantize_activation_fu_560_input_0_V_q0_assign_proc : process(hidden_states_0_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state29, attn_output_2D_0_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_quantize_activation_fu_560_input_0_V_q0 <= attn_output_2D_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_quantize_activation_fu_560_input_0_V_q0 <= hidden_states_0_V_q0;
        else 
            grp_quantize_activation_fu_560_input_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_quantize_activation_fu_560_input_0_V_q1_assign_proc : process(hidden_states_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state29, attn_output_2D_0_V_q1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_quantize_activation_fu_560_input_0_V_q1 <= attn_output_2D_0_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_quantize_activation_fu_560_input_0_V_q1 <= hidden_states_0_V_q1;
        else 
            grp_quantize_activation_fu_560_input_0_V_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_reshape_2D_to_3D_fu_637_ap_start <= grp_reshape_2D_to_3D_fu_637_ap_start_reg;

    grp_reshape_2D_to_3D_fu_637_input_0_V_q0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state10, q_proj_re_0_V_q0, k_proj_re_0_V_q0, v_proj_re_0_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_reshape_2D_to_3D_fu_637_input_0_V_q0 <= v_proj_re_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_reshape_2D_to_3D_fu_637_input_0_V_q0 <= k_proj_re_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_reshape_2D_to_3D_fu_637_input_0_V_q0 <= q_proj_re_0_V_q0;
        else 
            grp_reshape_2D_to_3D_fu_637_input_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_rms_norm_16_s_fu_551_ap_start <= grp_rms_norm_16_s_fu_551_ap_start_reg;

    grp_rms_norm_16_s_fu_551_input_0_V_q0_assign_proc : process(hidden_states_0_V_q0, attn_output_2D_0_V_q0, ap_CS_fsm_state2, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_rms_norm_16_s_fu_551_input_0_V_q0 <= attn_output_2D_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_rms_norm_16_s_fu_551_input_0_V_q0 <= hidden_states_0_V_q0;
        else 
            grp_rms_norm_16_s_fu_551_input_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_rms_norm_16_s_fu_551_weight_V_q0_assign_proc : process(ln_weight_in_V_q0, ln_weight_V_q0, ap_CS_fsm_state2, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_rms_norm_16_s_fu_551_weight_V_q0 <= ln_weight_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_rms_norm_16_s_fu_551_weight_V_q0 <= ln_weight_in_V_q0;
        else 
            grp_rms_norm_16_s_fu_551_weight_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_softmax_1_4_3_s_fu_491_ap_start <= grp_softmax_1_4_3_s_fu_491_ap_start_reg;
    grp_transpose_last_two_d_fu_642_ap_start <= grp_transpose_last_two_d_fu_642_ap_start_reg;
    h_1_fu_1193_p2 <= std_logic_vector(unsigned(h_0_reg_362) + unsigned(ap_const_lv3_1));
    h_fu_1523_p2 <= std_logic_vector(unsigned(h85_0_reg_425) + unsigned(ap_const_lv3_1));

    hidden_states_0_V_address0_assign_proc : process(ap_CS_fsm_state4, grp_rms_norm_16_s_fu_551_input_0_V_address0, grp_quantize_activation_fu_560_input_0_V_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hidden_states_0_V_address0 <= grp_quantize_activation_fu_560_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hidden_states_0_V_address0 <= grp_rms_norm_16_s_fu_551_input_0_V_address0;
        else 
            hidden_states_0_V_address0 <= "XXXX";
        end if; 
    end process;


    hidden_states_0_V_address1_assign_proc : process(ap_CS_fsm_state4, grp_rms_norm_16_s_fu_551_input_0_V_address1, grp_quantize_activation_fu_560_input_0_V_address1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hidden_states_0_V_address1 <= grp_quantize_activation_fu_560_input_0_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hidden_states_0_V_address1 <= grp_rms_norm_16_s_fu_551_input_0_V_address1;
        else 
            hidden_states_0_V_address1 <= "XXXX";
        end if; 
    end process;


    hidden_states_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, grp_rms_norm_16_s_fu_551_input_0_V_ce0, grp_quantize_activation_fu_560_input_0_V_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hidden_states_0_V_ce0 <= grp_quantize_activation_fu_560_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hidden_states_0_V_ce0 <= grp_rms_norm_16_s_fu_551_input_0_V_ce0;
        else 
            hidden_states_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden_states_0_V_ce1_assign_proc : process(ap_CS_fsm_state4, grp_rms_norm_16_s_fu_551_input_0_V_ce1, grp_quantize_activation_fu_560_input_0_V_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hidden_states_0_V_ce1 <= grp_quantize_activation_fu_560_input_0_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hidden_states_0_V_ce1 <= grp_rms_norm_16_s_fu_551_input_0_V_ce1;
        else 
            hidden_states_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hidden_states_0_V_d1 <= grp_rms_norm_16_s_fu_551_input_0_V_d1;

    hidden_states_0_V_we1_assign_proc : process(grp_rms_norm_16_s_fu_551_input_0_V_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hidden_states_0_V_we1 <= grp_rms_norm_16_s_fu_551_input_0_V_we1;
        else 
            hidden_states_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln188_fu_1187_p2 <= "1" when (h_0_reg_362 = ap_const_lv3_4) else "0";
    icmp_ln190_fu_1203_p2 <= "1" when (d_0_0_reg_373 = ap_const_lv2_3) else "0";
    icmp_ln195_fu_1517_p2 <= "1" when (h85_0_reg_425 = ap_const_lv3_4) else "0";
    icmp_ln221_fu_1727_p2 <= "1" when (h100_0_0_reg_436 = ap_const_lv3_4) else "0";
    icmp_ln36_1_fu_1829_p2 <= "1" when (j_0_0_i2_reg_447 = ap_const_lv5_10) else "0";
    icmp_ln36_fu_918_p2 <= "1" when (j_0_0_i_reg_351 = ap_const_lv5_10) else "0";

    k_cache_V_ce0_assign_proc : process(grp_cache_update_fu_610_cache_in_V_ce0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_V_ce0 <= grp_cache_update_fu_610_cache_in_V_ce0;
        else 
            k_cache_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_0_V_address0_assign_proc : process(grp_cache_update_fu_610_cache_out_0_V_address0, grp_transpose_last_two_d_fu_642_input_0_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_0_V_address0 <= grp_transpose_last_two_d_fu_642_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_0_V_address0 <= grp_cache_update_fu_610_cache_out_0_V_address0;
        else 
            k_cache_upd_0_V_address0 <= "XXXX";
        end if; 
    end process;


    k_cache_upd_0_V_ce0_assign_proc : process(grp_cache_update_fu_610_cache_out_0_V_ce0, grp_transpose_last_two_d_fu_642_input_0_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_0_V_ce0 <= grp_transpose_last_two_d_fu_642_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_0_V_ce0 <= grp_cache_update_fu_610_cache_out_0_V_ce0;
        else 
            k_cache_upd_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_0_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_0_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_0_V_we0 <= grp_cache_update_fu_610_cache_out_0_V_we0;
        else 
            k_cache_upd_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_1_V_address0_assign_proc : process(grp_cache_update_fu_610_cache_out_1_V_address0, grp_transpose_last_two_d_fu_642_input_1_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_1_V_address0 <= grp_transpose_last_two_d_fu_642_input_1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_1_V_address0 <= grp_cache_update_fu_610_cache_out_1_V_address0;
        else 
            k_cache_upd_1_V_address0 <= "XXXX";
        end if; 
    end process;


    k_cache_upd_1_V_ce0_assign_proc : process(grp_cache_update_fu_610_cache_out_1_V_ce0, grp_transpose_last_two_d_fu_642_input_1_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_1_V_ce0 <= grp_transpose_last_two_d_fu_642_input_1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_1_V_ce0 <= grp_cache_update_fu_610_cache_out_1_V_ce0;
        else 
            k_cache_upd_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_1_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_1_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_1_V_we0 <= grp_cache_update_fu_610_cache_out_1_V_we0;
        else 
            k_cache_upd_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_2_V_address0_assign_proc : process(grp_cache_update_fu_610_cache_out_2_V_address0, grp_transpose_last_two_d_fu_642_input_2_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_2_V_address0 <= grp_transpose_last_two_d_fu_642_input_2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_2_V_address0 <= grp_cache_update_fu_610_cache_out_2_V_address0;
        else 
            k_cache_upd_2_V_address0 <= "XXXX";
        end if; 
    end process;


    k_cache_upd_2_V_ce0_assign_proc : process(grp_cache_update_fu_610_cache_out_2_V_ce0, grp_transpose_last_two_d_fu_642_input_2_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_2_V_ce0 <= grp_transpose_last_two_d_fu_642_input_2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_2_V_ce0 <= grp_cache_update_fu_610_cache_out_2_V_ce0;
        else 
            k_cache_upd_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_2_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_2_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_2_V_we0 <= grp_cache_update_fu_610_cache_out_2_V_we0;
        else 
            k_cache_upd_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_3_V_address0_assign_proc : process(grp_cache_update_fu_610_cache_out_3_V_address0, grp_transpose_last_two_d_fu_642_input_3_V_address0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_3_V_address0 <= grp_transpose_last_two_d_fu_642_input_3_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_3_V_address0 <= grp_cache_update_fu_610_cache_out_3_V_address0;
        else 
            k_cache_upd_3_V_address0 <= "XXXX";
        end if; 
    end process;


    k_cache_upd_3_V_ce0_assign_proc : process(grp_cache_update_fu_610_cache_out_3_V_ce0, grp_transpose_last_two_d_fu_642_input_3_V_ce0, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_cache_upd_3_V_ce0 <= grp_transpose_last_two_d_fu_642_input_3_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_3_V_ce0 <= grp_cache_update_fu_610_cache_out_3_V_ce0;
        else 
            k_cache_upd_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_cache_upd_3_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_3_V_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            k_cache_upd_3_V_we0 <= grp_cache_update_fu_610_cache_out_3_V_we0;
        else 
            k_cache_upd_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_re_0_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_address0, grp_reshape_2D_to_3D_fu_637_input_0_V_address0, grp_init_2d_mem_fu_658_mem_0_V_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_proj_re_0_V_address0 <= grp_init_2d_mem_fu_658_mem_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            k_proj_re_0_V_address0 <= grp_reshape_2D_to_3D_fu_637_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_re_0_V_address0 <= grp_linear_forward_no_mu_fu_458_output_0_V_address0;
        else 
            k_proj_re_0_V_address0 <= "XXXX";
        end if; 
    end process;


    k_proj_re_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_ce0, grp_reshape_2D_to_3D_fu_637_input_0_V_ce0, grp_init_2d_mem_fu_658_mem_0_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_proj_re_0_V_ce0 <= grp_init_2d_mem_fu_658_mem_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            k_proj_re_0_V_ce0 <= grp_reshape_2D_to_3D_fu_637_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_re_0_V_ce0 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce0;
        else 
            k_proj_re_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_re_0_V_ce1_assign_proc : process(ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_output_0_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_re_0_V_ce1 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce1;
        else 
            k_proj_re_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_re_0_V_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_output_0_V_d0, grp_init_2d_mem_fu_658_mem_0_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_proj_re_0_V_d0 <= grp_init_2d_mem_fu_658_mem_0_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_re_0_V_d0 <= grp_linear_forward_no_mu_fu_458_output_0_V_d0;
        else 
            k_proj_re_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    k_proj_re_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_output_0_V_we0, grp_init_2d_mem_fu_658_mem_0_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_proj_re_0_V_we0 <= grp_init_2d_mem_fu_658_mem_0_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_re_0_V_we0 <= grp_linear_forward_no_mu_fu_458_output_0_V_we0;
        else 
            k_proj_re_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_re_0_V_we1_assign_proc : process(ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_output_0_V_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_re_0_V_we1 <= grp_linear_forward_no_mu_fu_458_output_0_V_we1;
        else 
            k_proj_re_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_0_address0_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_0_V_address0, grp_transpose_last_two_d_fu_642_output_0_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_0_address0 <= grp_transpose_last_two_d_fu_642_output_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_0_address0 <= grp_GEMM_3D_float_fu_567_input_2_0_V_address0;
        else 
            k_proj_transposed_0_address0 <= "XXXX";
        end if; 
    end process;


    k_proj_transposed_0_address1_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_0_V_address1, grp_transpose_last_two_d_fu_642_output_0_V_address1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_0_address1 <= grp_transpose_last_two_d_fu_642_output_0_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_0_address1 <= grp_GEMM_3D_float_fu_567_input_2_0_V_address1;
        else 
            k_proj_transposed_0_address1 <= "XXXX";
        end if; 
    end process;


    k_proj_transposed_0_ce0_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_0_V_ce0, grp_transpose_last_two_d_fu_642_output_0_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_0_ce0 <= grp_transpose_last_two_d_fu_642_output_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_0_ce0 <= grp_GEMM_3D_float_fu_567_input_2_0_V_ce0;
        else 
            k_proj_transposed_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_0_ce1_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_0_V_ce1, grp_transpose_last_two_d_fu_642_output_0_V_ce1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_0_ce1 <= grp_transpose_last_two_d_fu_642_output_0_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_0_ce1 <= grp_GEMM_3D_float_fu_567_input_2_0_V_ce1;
        else 
            k_proj_transposed_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_0_we0_assign_proc : process(grp_transpose_last_two_d_fu_642_output_0_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_0_we0 <= grp_transpose_last_two_d_fu_642_output_0_V_we0;
        else 
            k_proj_transposed_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_0_we1_assign_proc : process(grp_transpose_last_two_d_fu_642_output_0_V_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_0_we1 <= grp_transpose_last_two_d_fu_642_output_0_V_we1;
        else 
            k_proj_transposed_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_1_address0_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_1_V_address0, grp_transpose_last_two_d_fu_642_output_1_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_1_address0 <= grp_transpose_last_two_d_fu_642_output_1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_1_address0 <= grp_GEMM_3D_float_fu_567_input_2_1_V_address0;
        else 
            k_proj_transposed_1_address0 <= "XXXX";
        end if; 
    end process;


    k_proj_transposed_1_address1_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_1_V_address1, grp_transpose_last_two_d_fu_642_output_1_V_address1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_1_address1 <= grp_transpose_last_two_d_fu_642_output_1_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_1_address1 <= grp_GEMM_3D_float_fu_567_input_2_1_V_address1;
        else 
            k_proj_transposed_1_address1 <= "XXXX";
        end if; 
    end process;


    k_proj_transposed_1_ce0_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_1_V_ce0, grp_transpose_last_two_d_fu_642_output_1_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_1_ce0 <= grp_transpose_last_two_d_fu_642_output_1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_1_ce0 <= grp_GEMM_3D_float_fu_567_input_2_1_V_ce0;
        else 
            k_proj_transposed_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_1_ce1_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_1_V_ce1, grp_transpose_last_two_d_fu_642_output_1_V_ce1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_1_ce1 <= grp_transpose_last_two_d_fu_642_output_1_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_1_ce1 <= grp_GEMM_3D_float_fu_567_input_2_1_V_ce1;
        else 
            k_proj_transposed_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_1_we0_assign_proc : process(grp_transpose_last_two_d_fu_642_output_1_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_1_we0 <= grp_transpose_last_two_d_fu_642_output_1_V_we0;
        else 
            k_proj_transposed_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_1_we1_assign_proc : process(grp_transpose_last_two_d_fu_642_output_1_V_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_1_we1 <= grp_transpose_last_two_d_fu_642_output_1_V_we1;
        else 
            k_proj_transposed_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_2_address0_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_2_V_address0, grp_transpose_last_two_d_fu_642_output_2_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_2_address0 <= grp_transpose_last_two_d_fu_642_output_2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_2_address0 <= grp_GEMM_3D_float_fu_567_input_2_2_V_address0;
        else 
            k_proj_transposed_2_address0 <= "XXXX";
        end if; 
    end process;


    k_proj_transposed_2_address1_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_2_V_address1, grp_transpose_last_two_d_fu_642_output_2_V_address1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_2_address1 <= grp_transpose_last_two_d_fu_642_output_2_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_2_address1 <= grp_GEMM_3D_float_fu_567_input_2_2_V_address1;
        else 
            k_proj_transposed_2_address1 <= "XXXX";
        end if; 
    end process;


    k_proj_transposed_2_ce0_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_2_V_ce0, grp_transpose_last_two_d_fu_642_output_2_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_2_ce0 <= grp_transpose_last_two_d_fu_642_output_2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_2_ce0 <= grp_GEMM_3D_float_fu_567_input_2_2_V_ce0;
        else 
            k_proj_transposed_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_2_ce1_assign_proc : process(grp_GEMM_3D_float_fu_567_input_2_2_V_ce1, grp_transpose_last_two_d_fu_642_output_2_V_ce1, ap_CS_fsm_state17, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_2_ce1 <= grp_transpose_last_two_d_fu_642_output_2_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            k_proj_transposed_2_ce1 <= grp_GEMM_3D_float_fu_567_input_2_2_V_ce1;
        else 
            k_proj_transposed_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_2_we0_assign_proc : process(grp_transpose_last_two_d_fu_642_output_2_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_2_we0 <= grp_transpose_last_two_d_fu_642_output_2_V_we0;
        else 
            k_proj_transposed_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_transposed_2_we1_assign_proc : process(grp_transpose_last_two_d_fu_642_output_2_V_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            k_proj_transposed_2_we1 <= grp_transpose_last_two_d_fu_642_output_2_V_we1;
        else 
            k_proj_transposed_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    k_weights_V_0_ce0_assign_proc : process(ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_weights_V_0_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0;
        else 
            k_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_weights_V_1_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0;
        else 
            k_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_weights_V_2_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0;
        else 
            k_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_weights_V_3_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0;
        else 
            k_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ln_weight_V_ce0_assign_proc : process(grp_rms_norm_16_s_fu_551_weight_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ln_weight_V_ce0 <= grp_rms_norm_16_s_fu_551_weight_V_ce0;
        else 
            ln_weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ln_weight_in_V_ce0_assign_proc : process(grp_rms_norm_16_s_fu_551_weight_V_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ln_weight_in_V_ce0 <= grp_rms_norm_16_s_fu_551_weight_V_ce0;
        else 
            ln_weight_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_weights_V_0_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            o_weights_V_0_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0;
        else 
            o_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_weights_V_1_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            o_weights_V_1_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0;
        else 
            o_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_weights_V_2_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            o_weights_V_2_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0;
        else 
            o_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_weights_V_3_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            o_weights_V_3_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0;
        else 
            o_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln223_1_fu_1789_p2 <= (shl_ln3_reg_2456 or ap_const_lv4_2);
    or_ln223_2_fu_1809_p2 <= (shl_ln3_reg_2456 or ap_const_lv4_3);
    or_ln223_fu_1767_p2 <= (shl_ln3_fu_1743_p3 or ap_const_lv4_1);

    q_proj_re_0_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_output_0_V_address0, grp_reshape_2D_to_3D_fu_637_input_0_V_address0, grp_init_2d_mem_fu_653_mem_0_V_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            q_proj_re_0_V_address0 <= grp_init_2d_mem_fu_653_mem_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            q_proj_re_0_V_address0 <= grp_reshape_2D_to_3D_fu_637_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_re_0_V_address0 <= grp_linear_forward_no_mu_fu_458_output_0_V_address0;
        else 
            q_proj_re_0_V_address0 <= "XXXX";
        end if; 
    end process;


    q_proj_re_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_linear_forward_no_mu_fu_458_output_0_V_ce0, grp_reshape_2D_to_3D_fu_637_input_0_V_ce0, grp_init_2d_mem_fu_653_mem_0_V_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            q_proj_re_0_V_ce0 <= grp_init_2d_mem_fu_653_mem_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            q_proj_re_0_V_ce0 <= grp_reshape_2D_to_3D_fu_637_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_re_0_V_ce0 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce0;
        else 
            q_proj_re_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_proj_re_0_V_ce1_assign_proc : process(grp_linear_forward_no_mu_fu_458_output_0_V_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_re_0_V_ce1 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce1;
        else 
            q_proj_re_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    q_proj_re_0_V_d0_assign_proc : process(ap_CS_fsm_state4, grp_linear_forward_no_mu_fu_458_output_0_V_d0, grp_init_2d_mem_fu_653_mem_0_V_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            q_proj_re_0_V_d0 <= grp_init_2d_mem_fu_653_mem_0_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_re_0_V_d0 <= grp_linear_forward_no_mu_fu_458_output_0_V_d0;
        else 
            q_proj_re_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    q_proj_re_0_V_we0_assign_proc : process(ap_CS_fsm_state4, grp_linear_forward_no_mu_fu_458_output_0_V_we0, grp_init_2d_mem_fu_653_mem_0_V_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            q_proj_re_0_V_we0 <= grp_init_2d_mem_fu_653_mem_0_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_re_0_V_we0 <= grp_linear_forward_no_mu_fu_458_output_0_V_we0;
        else 
            q_proj_re_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    q_proj_re_0_V_we1_assign_proc : process(grp_linear_forward_no_mu_fu_458_output_0_V_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_re_0_V_we1 <= grp_linear_forward_no_mu_fu_458_output_0_V_we1;
        else 
            q_proj_re_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    q_weights_V_0_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_weights_V_0_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0;
        else 
            q_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_weights_V_1_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_weights_V_1_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0;
        else 
            q_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_weights_V_2_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_weights_V_2_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0;
        else 
            q_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_weights_V_3_ce0_assign_proc : process(grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_weights_V_3_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0;
        else 
            q_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    quantized_final_outp_address0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state28, grp_linear_forward_no_mu_fu_458_input_0_V_address0, grp_quantize_activation_fu_560_output_states_0_V_address0, icmp_ln36_1_fu_1829_p2, ap_CS_fsm_state31, zext_ln37_1_fu_1841_p1)
    begin
        if (((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            quantized_final_outp_address0 <= zext_ln37_1_fu_1841_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            quantized_final_outp_address0 <= grp_quantize_activation_fu_560_output_states_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            quantized_final_outp_address0 <= grp_linear_forward_no_mu_fu_458_input_0_V_address0;
        else 
            quantized_final_outp_address0 <= "XXXX";
        end if; 
    end process;


    quantized_final_outp_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state28, grp_linear_forward_no_mu_fu_458_input_0_V_ce0, grp_quantize_activation_fu_560_output_states_0_V_ce0, icmp_ln36_1_fu_1829_p2, ap_CS_fsm_state31)
    begin
        if (((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            quantized_final_outp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            quantized_final_outp_ce0 <= grp_quantize_activation_fu_560_output_states_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            quantized_final_outp_ce0 <= grp_linear_forward_no_mu_fu_458_input_0_V_ce0;
        else 
            quantized_final_outp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    quantized_final_outp_ce1_assign_proc : process(grp_linear_forward_no_mu_fu_458_input_0_V_ce1, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            quantized_final_outp_ce1 <= grp_linear_forward_no_mu_fu_458_input_0_V_ce1;
        else 
            quantized_final_outp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    quantized_final_outp_d0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state28, grp_quantize_activation_fu_560_output_states_0_V_d0, icmp_ln36_1_fu_1829_p2)
    begin
        if (((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            quantized_final_outp_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            quantized_final_outp_d0 <= grp_quantize_activation_fu_560_output_states_0_V_d0;
        else 
            quantized_final_outp_d0 <= "XXXXXXXX";
        end if; 
    end process;


    quantized_final_outp_we0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state28, grp_quantize_activation_fu_560_output_states_0_V_we0, icmp_ln36_1_fu_1829_p2)
    begin
        if (((icmp_ln36_1_fu_1829_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            quantized_final_outp_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            quantized_final_outp_we0 <= grp_quantize_activation_fu_560_output_states_0_V_we0;
        else 
            quantized_final_outp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    quantized_hidden_sta_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_input_0_V_address0, grp_quantize_activation_fu_560_output_states_0_V_address0, icmp_ln36_fu_918_p2, ap_CS_fsm_state6, zext_ln37_fu_930_p1)
    begin
        if (((icmp_ln36_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            quantized_hidden_sta_address0 <= zext_ln37_fu_930_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quantized_hidden_sta_address0 <= grp_quantize_activation_fu_560_output_states_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            quantized_hidden_sta_address0 <= grp_linear_forward_no_mu_fu_458_input_0_V_address0;
        else 
            quantized_hidden_sta_address0 <= "XXXX";
        end if; 
    end process;


    quantized_hidden_sta_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_input_0_V_ce0, grp_quantize_activation_fu_560_output_states_0_V_ce0, icmp_ln36_fu_918_p2, ap_CS_fsm_state6)
    begin
        if (((icmp_ln36_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            quantized_hidden_sta_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quantized_hidden_sta_ce0 <= grp_quantize_activation_fu_560_output_states_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            quantized_hidden_sta_ce0 <= grp_linear_forward_no_mu_fu_458_input_0_V_ce0;
        else 
            quantized_hidden_sta_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    quantized_hidden_sta_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_input_0_V_ce1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            quantized_hidden_sta_ce1 <= grp_linear_forward_no_mu_fu_458_input_0_V_ce1;
        else 
            quantized_hidden_sta_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    quantized_hidden_sta_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, grp_quantize_activation_fu_560_output_states_0_V_d0, icmp_ln36_fu_918_p2)
    begin
        if (((icmp_ln36_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            quantized_hidden_sta_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quantized_hidden_sta_d0 <= grp_quantize_activation_fu_560_output_states_0_V_d0;
        else 
            quantized_hidden_sta_d0 <= "XXXXXXXX";
        end if; 
    end process;


    quantized_hidden_sta_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, grp_quantize_activation_fu_560_output_states_0_V_we0, icmp_ln36_fu_918_p2)
    begin
        if (((icmp_ln36_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            quantized_hidden_sta_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quantized_hidden_sta_we0 <= grp_quantize_activation_fu_560_output_states_0_V_we0;
        else 
            quantized_hidden_sta_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1148_fu_1306_p3 <= 
        sub_ln1148_6_fu_1300_p2 when (tmp_47_reg_2259(0) = '1') else 
        zext_ln1148_7_fu_1297_p1;
    shl_ln3_fu_1743_p3 <= (trunc_ln223_fu_1739_p1 & ap_const_lv2_0);
    shl_ln_fu_1252_p3 <= (tmp_2_fu_1222_p14 & ap_const_lv22_0);
    sub_ln1148_6_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln1148_fu_1294_p1));
    sub_ln1148_fu_1268_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(shl_ln_fu_1252_p3));
    tmp_2_fu_1222_p13 <= (d_0_0_reg_373 & trunc_ln1265_reg_2206);
    trunc_ln1265_1_fu_1529_p1 <= h85_0_reg_425(2 - 1 downto 0);
    trunc_ln1265_fu_1199_p1 <= h_0_reg_362(2 - 1 downto 0);
    trunc_ln223_fu_1739_p1 <= h100_0_0_reg_436(2 - 1 downto 0);

    v_cache_V_ce0_assign_proc : process(grp_cache_update_fu_610_cache_in_V_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_V_ce0 <= grp_cache_update_fu_610_cache_in_V_ce0;
        else 
            v_cache_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_0_V_address0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_0_V_address0, grp_cache_update_fu_610_cache_out_0_V_address0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_0_V_address0 <= grp_cache_update_fu_610_cache_out_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_0_V_address0 <= grp_GEMM_3D_float_1_fu_590_input_2_0_V_address0;
        else 
            v_cache_upd_0_V_address0 <= "XXXX";
        end if; 
    end process;


    v_cache_upd_0_V_ce0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce0, grp_cache_update_fu_610_cache_out_0_V_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_0_V_ce0 <= grp_cache_update_fu_610_cache_out_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_0_V_ce0 <= grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce0;
        else 
            v_cache_upd_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_0_V_ce1_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_0_V_ce1 <= grp_GEMM_3D_float_1_fu_590_input_2_0_V_ce1;
        else 
            v_cache_upd_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_0_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_0_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_0_V_we0 <= grp_cache_update_fu_610_cache_out_0_V_we0;
        else 
            v_cache_upd_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_1_V_address0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_1_V_address0, grp_cache_update_fu_610_cache_out_1_V_address0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_1_V_address0 <= grp_cache_update_fu_610_cache_out_1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_1_V_address0 <= grp_GEMM_3D_float_1_fu_590_input_2_1_V_address0;
        else 
            v_cache_upd_1_V_address0 <= "XXXX";
        end if; 
    end process;


    v_cache_upd_1_V_ce0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce0, grp_cache_update_fu_610_cache_out_1_V_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_1_V_ce0 <= grp_cache_update_fu_610_cache_out_1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_1_V_ce0 <= grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce0;
        else 
            v_cache_upd_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_1_V_ce1_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_1_V_ce1 <= grp_GEMM_3D_float_1_fu_590_input_2_1_V_ce1;
        else 
            v_cache_upd_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_1_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_1_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_1_V_we0 <= grp_cache_update_fu_610_cache_out_1_V_we0;
        else 
            v_cache_upd_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_2_V_address0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_2_V_address0, grp_cache_update_fu_610_cache_out_2_V_address0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_2_V_address0 <= grp_cache_update_fu_610_cache_out_2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_2_V_address0 <= grp_GEMM_3D_float_1_fu_590_input_2_2_V_address0;
        else 
            v_cache_upd_2_V_address0 <= "XXXX";
        end if; 
    end process;


    v_cache_upd_2_V_ce0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce0, grp_cache_update_fu_610_cache_out_2_V_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_2_V_ce0 <= grp_cache_update_fu_610_cache_out_2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_2_V_ce0 <= grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce0;
        else 
            v_cache_upd_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_2_V_ce1_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_2_V_ce1 <= grp_GEMM_3D_float_1_fu_590_input_2_2_V_ce1;
        else 
            v_cache_upd_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_2_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_2_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_2_V_we0 <= grp_cache_update_fu_610_cache_out_2_V_we0;
        else 
            v_cache_upd_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_3_V_address0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_3_V_address0, grp_cache_update_fu_610_cache_out_3_V_address0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_3_V_address0 <= grp_cache_update_fu_610_cache_out_3_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_3_V_address0 <= grp_GEMM_3D_float_1_fu_590_input_2_3_V_address0;
        else 
            v_cache_upd_3_V_address0 <= "XXXX";
        end if; 
    end process;


    v_cache_upd_3_V_ce0_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce0, grp_cache_update_fu_610_cache_out_3_V_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_3_V_ce0 <= grp_cache_update_fu_610_cache_out_3_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_3_V_ce0 <= grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce0;
        else 
            v_cache_upd_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_3_V_ce1_assign_proc : process(ap_CS_fsm_state23, grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v_cache_upd_3_V_ce1 <= grp_GEMM_3D_float_1_fu_590_input_2_3_V_ce1;
        else 
            v_cache_upd_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_cache_upd_3_V_we0_assign_proc : process(grp_cache_update_fu_610_cache_out_3_V_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v_cache_upd_3_V_we0 <= grp_cache_update_fu_610_cache_out_3_V_we0;
        else 
            v_cache_upd_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_proj_re_0_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_address0, grp_reshape_2D_to_3D_fu_637_input_0_V_address0, grp_init_2d_mem_fu_663_mem_0_V_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v_proj_re_0_V_address0 <= grp_init_2d_mem_fu_663_mem_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            v_proj_re_0_V_address0 <= grp_reshape_2D_to_3D_fu_637_input_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_proj_re_0_V_address0 <= grp_linear_forward_no_mu_fu_458_output_0_V_address0;
        else 
            v_proj_re_0_V_address0 <= "XXXX";
        end if; 
    end process;


    v_proj_re_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_ce0, grp_reshape_2D_to_3D_fu_637_input_0_V_ce0, grp_init_2d_mem_fu_663_mem_0_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v_proj_re_0_V_ce0 <= grp_init_2d_mem_fu_663_mem_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            v_proj_re_0_V_ce0 <= grp_reshape_2D_to_3D_fu_637_input_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_proj_re_0_V_ce0 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce0;
        else 
            v_proj_re_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_proj_re_0_V_ce1_assign_proc : process(ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_proj_re_0_V_ce1 <= grp_linear_forward_no_mu_fu_458_output_0_V_ce1;
        else 
            v_proj_re_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_proj_re_0_V_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_d0, grp_init_2d_mem_fu_663_mem_0_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v_proj_re_0_V_d0 <= grp_init_2d_mem_fu_663_mem_0_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_proj_re_0_V_d0 <= grp_linear_forward_no_mu_fu_458_output_0_V_d0;
        else 
            v_proj_re_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v_proj_re_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_we0, grp_init_2d_mem_fu_663_mem_0_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v_proj_re_0_V_we0 <= grp_init_2d_mem_fu_663_mem_0_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_proj_re_0_V_we0 <= grp_linear_forward_no_mu_fu_458_output_0_V_we0;
        else 
            v_proj_re_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_proj_re_0_V_we1_assign_proc : process(ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_output_0_V_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_proj_re_0_V_we1 <= grp_linear_forward_no_mu_fu_458_output_0_V_we1;
        else 
            v_proj_re_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    v_weights_V_0_ce0_assign_proc : process(ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_weights_V_0_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_0_V_ce0;
        else 
            v_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_weights_V_1_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_1_V_ce0;
        else 
            v_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_weights_V_2_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_2_V_ce0;
        else 
            v_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_state10, grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v_weights_V_3_ce0 <= grp_linear_forward_no_mu_fu_458_packed_weights_3_V_ce0;
        else 
            v_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1148_7_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1148_s_reg_2269),32));
    zext_ln1148_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_2264),32));
    zext_ln223_1_fu_1773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln223_fu_1767_p2),64));
    zext_ln223_2_fu_1794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln223_1_fu_1789_p2),64));
    zext_ln223_3_fu_1814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln223_2_fu_1809_p2),64));
    zext_ln223_fu_1751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1743_p3),64));
    zext_ln37_1_fu_1841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_i2_reg_447),64));
    zext_ln37_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_i_reg_351),64));
end behav;
