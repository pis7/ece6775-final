-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity attention_exp is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of attention_exp is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_read_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_75_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_fu_83_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln58_fu_105_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_113_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1148_fu_155_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_32_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln58_1_fu_219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_1_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1148_fu_225_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln1148_reg_634 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1148_fu_228_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1148_reg_639 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_reg_644 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln1148_4_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_4_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_43_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_36_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_16_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_16_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln58_2_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_2_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1148_1_fu_379_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln1148_1_reg_681 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_44_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_39_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_17_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_17_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal select_ln58_3_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_3_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1148_1_fu_447_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln1148_1_reg_713 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_43_reg_718 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln1148_6_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_6_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_45_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_44_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_V_0_lcssa_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_18_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal select_ln58_4_fu_560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_19_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_fu_83_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_97_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_89_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_97_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1148_8_fu_121_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1148_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1148_9_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1148_9_fu_141_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_5_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1148_4_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_169_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_169_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln703_16_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1148_fu_228_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_6_fu_244_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_35_fu_249_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1148_6_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_7_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_3_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_7_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_fu_292_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln703_17_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_347_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln1148_5_fu_356_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_366_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1148_fu_360_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1148_6_fu_375_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_2_fu_392_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_2_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_2_fu_392_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln703_18_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1148_1_fu_447_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_8_fu_462_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_42_fu_467_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1148_8_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_9_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1148_5_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1148_9_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_3_fu_510_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_3_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_3_fu_510_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal sub_ln703_19_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_513 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    agg_result_V_0_lcssa_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_4_fu_560_p3 = ap_const_lv1_0) and (select_ln58_3_reg_709 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                agg_result_V_0_lcssa_reg_56 <= add_ln703_19_fu_566_p2;
            elsif (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_3_reg_709 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (select_ln58_4_fu_560_p3 = ap_const_lv1_1))) then 
                agg_result_V_0_lcssa_reg_56 <= add_ln703_18_fu_542_p2;
            elsif (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (select_ln58_3_fu_441_p3 = ap_const_lv1_1))) then 
                agg_result_V_0_lcssa_reg_56 <= add_ln703_17_fu_424_p2;
            elsif (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (select_ln58_2_fu_341_p3 = ap_const_lv1_1))) then 
                agg_result_V_0_lcssa_reg_56 <= add_ln703_16_fu_324_p2;
            elsif (((select_ln58_1_fu_219_p3 = ap_const_lv1_1) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                agg_result_V_0_lcssa_reg_56 <= add_ln703_fu_201_p2;
            elsif (((select_ln58_fu_105_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                agg_result_V_0_lcssa_reg_56 <= ap_const_lv32_400000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln703_16_reg_671 <= add_ln703_16_fu_324_p2;
                select_ln58_2_reg_677 <= select_ln58_2_fu_341_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln703_17_reg_703 <= add_ln703_17_fu_424_p2;
                select_ln58_3_reg_709 <= select_ln58_3_fu_441_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln703_reg_624 <= add_ln703_fu_201_p2;
                select_ln58_1_reg_630 <= select_ln58_1_fu_219_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                in_V_read_reg_572 <= in_V;
                select_ln58_reg_593 <= select_ln58_fu_105_p3;
                sub_ln703_reg_588 <= sub_ln703_fu_83_p2;
                tmp_28_reg_580 <= tmp_28_fu_75_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_3_fu_441_p3 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    mul_ln1148_1_reg_713(64 downto 1) <= mul_ln1148_1_fu_447_p2(64 downto 1);
                tmp_43_reg_718 <= mul_ln1148_1_fu_447_p2(64 downto 35);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_fu_219_p3 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    mul_ln1148_reg_639(64 downto 1) <= mul_ln1148_fu_228_p2(64 downto 1);
                sext_ln1148_reg_634 <= sext_ln1148_fu_225_p1;
                tmp_reg_644 <= mul_ln1148_fu_228_p2(64 downto 34);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                p_Val2_43_reg_654 <= mul_ln1118_1_fu_292_p2(53 downto 22);
                tmp_36_reg_661 <= mul_ln1118_1_fu_292_p2(53 downto 53);
                tmp_38_reg_666 <= mul_ln1118_1_fu_292_p2(53 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                p_Val2_44_reg_686 <= mul_ln1118_2_fu_392_p2(53 downto 22);
                tmp_39_reg_693 <= mul_ln1118_2_fu_392_p2(53 downto 53);
                tmp_41_reg_698 <= mul_ln1118_2_fu_392_p2(53 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_3_reg_709 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_Val2_45_reg_728 <= mul_ln1118_3_fu_510_p2(53 downto 22);
                tmp_44_reg_734 <= mul_ln1118_3_fu_510_p2(53 downto 53);
                tmp_46_reg_739 <= mul_ln1118_3_fu_510_p2(53 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Val2_s_reg_607 <= mul_ln1118_fu_169_p2(53 downto 22);
                tmp_32_reg_614 <= mul_ln1118_fu_169_p2(53 downto 53);
                tmp_34_reg_619 <= mul_ln1118_fu_169_p2(53 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_2_fu_341_p3 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                select_ln1148_1_reg_681 <= select_ln1148_1_fu_379_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                select_ln1148_4_reg_649 <= select_ln1148_4_fu_279_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_3_reg_709 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                select_ln1148_6_reg_723 <= select_ln1148_6_fu_497_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln58_fu_105_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                select_ln1148_reg_602 <= select_ln1148_fu_155_p3;
                tmp_31_reg_597 <= tmp_31_fu_113_p1(31 downto 31);
            end if;
        end if;
    end process;
    mul_ln1148_reg_639(0) <= '0';
    mul_ln1148_1_reg_713(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln703_16_fu_324_p2 <= std_logic_vector(unsigned(add_ln703_reg_624) + unsigned(p_Val2_s_reg_607));
    add_ln703_17_fu_424_p2 <= std_logic_vector(signed(p_Val2_43_reg_654) + signed(add_ln703_16_reg_671));
    add_ln703_18_fu_542_p2 <= std_logic_vector(unsigned(add_ln703_17_reg_703) + unsigned(p_Val2_44_reg_686));
    add_ln703_19_fu_566_p2 <= std_logic_vector(unsigned(add_ln703_18_fu_542_p2) + unsigned(p_Val2_45_reg_728));
    add_ln703_fu_201_p2 <= std_logic_vector(signed(in_V_read_reg_572) + signed(ap_const_lv32_400000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_513_assign_proc : process(select_ln58_reg_593, select_ln58_1_reg_630, select_ln58_2_reg_677, select_ln58_3_reg_709, ap_CS_fsm_state11)
    begin
                ap_condition_513 <= ((select_ln58_1_reg_630 = ap_const_lv1_0) and (select_ln58_3_reg_709 = ap_const_lv1_0) and (select_ln58_2_reg_677 = ap_const_lv1_0) and (select_ln58_reg_593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12_assign_proc : process(agg_result_V_0_lcssa_reg_56, add_ln703_18_fu_542_p2, select_ln58_4_fu_560_p3, add_ln703_19_fu_566_p2, ap_condition_513)
    begin
        if ((ap_const_boolean_1 = ap_condition_513)) then
            if ((select_ln58_4_fu_560_p3 = ap_const_lv1_0)) then 
                ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12 <= add_ln703_19_fu_566_p2;
            elsif ((select_ln58_4_fu_560_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12 <= add_ln703_18_fu_542_p2;
            else 
                ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12 <= agg_result_V_0_lcssa_reg_56;
            end if;
        else 
            ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12 <= agg_result_V_0_lcssa_reg_56;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_agg_result_V_0_lcssa_phi_fu_60_p12;
    lshr_ln1148_8_fu_121_p4 <= sub_ln703_fu_83_p2(31 downto 1);
    lshr_ln1148_9_fu_141_p1 <= in_V;
    lshr_ln1148_9_fu_141_p4 <= lshr_ln1148_9_fu_141_p1(31 downto 1);
    mul_ln1118_1_fu_292_p0 <= p_Val2_s_reg_607;
    mul_ln1118_1_fu_292_p1 <= select_ln1148_4_reg_649;
    mul_ln1118_1_fu_292_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_292_p0) * signed(mul_ln1118_1_fu_292_p1))), 54));
    mul_ln1118_2_fu_392_p0 <= select_ln1148_1_reg_681;
    mul_ln1118_2_fu_392_p1 <= p_Val2_43_reg_654;
    mul_ln1118_2_fu_392_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_2_fu_392_p0) * signed(mul_ln1118_2_fu_392_p1))), 54));
    mul_ln1118_3_fu_510_p0 <= p_Val2_44_reg_686;
    mul_ln1118_3_fu_510_p1 <= select_ln1148_6_reg_723;
    mul_ln1118_3_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_3_fu_510_p0) * signed(mul_ln1118_3_fu_510_p1))), 61));
    mul_ln1118_fu_169_p0 <= select_ln1148_reg_602;
    mul_ln1118_fu_169_p1 <= in_V_read_reg_572;
    mul_ln1118_fu_169_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_169_p0) * signed(mul_ln1118_fu_169_p1))), 54));
    mul_ln1148_1_fu_447_p0 <= sext_ln1148_reg_634(32 - 1 downto 0);
    mul_ln1148_1_fu_447_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1148_1_fu_447_p0) * signed('0' &ap_const_lv65_19999999A))), 65));
    mul_ln1148_fu_228_p0 <= in_V_read_reg_572;
    mul_ln1148_fu_228_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1148_fu_228_p0) * signed('0' &ap_const_lv65_155555556))), 65));
    select_ln1148_1_fu_379_p3 <= 
        sub_ln1148_fu_360_p2 when (tmp_31_reg_597(0) = '1') else 
        zext_ln1148_6_fu_375_p1;
    select_ln1148_3_fu_266_p3 <= 
        sext_ln1148_6_fu_259_p1 when (tmp_28_reg_580(0) = '1') else 
        sext_ln1148_7_fu_263_p1;
    select_ln1148_4_fu_279_p3 <= 
        sub_ln1148_7_fu_273_p2 when (tmp_28_reg_580(0) = '1') else 
        sext_ln1148_7_fu_263_p1;
    select_ln1148_5_fu_484_p3 <= 
        sext_ln1148_8_fu_477_p1 when (tmp_28_reg_580(0) = '1') else 
        sext_ln1148_9_fu_481_p1;
    select_ln1148_6_fu_497_p3 <= 
        sub_ln1148_9_fu_491_p2 when (tmp_28_reg_580(0) = '1') else 
        sext_ln1148_9_fu_481_p1;
    select_ln1148_fu_155_p3 <= 
        sub_ln1148_5_fu_135_p2 when (tmp_31_fu_113_p3(0) = '1') else 
        zext_ln1148_4_fu_151_p1;
    select_ln58_1_fu_219_p3 <= 
        tmp_33_fu_211_p3 when (tmp_32_reg_614(0) = '1') else 
        tmp_34_reg_619;
    select_ln58_2_fu_341_p3 <= 
        tmp_37_fu_333_p3 when (tmp_36_reg_661(0) = '1') else 
        tmp_38_reg_666;
    select_ln58_3_fu_441_p3 <= 
        tmp_40_fu_433_p3 when (tmp_39_reg_693(0) = '1') else 
        tmp_41_reg_698;
    select_ln58_4_fu_560_p3 <= 
        tmp_45_fu_552_p3 when (tmp_44_reg_734(0) = '1') else 
        tmp_46_reg_739;
    select_ln58_fu_105_p3 <= 
        tmp_29_fu_89_p3 when (tmp_28_fu_75_p3(0) = '1') else 
        tmp_30_fu_97_p3;
        sext_ln1148_6_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_249_p4),32));

        sext_ln1148_7_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_644),32));

        sext_ln1148_8_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_fu_467_p4),32));

        sext_ln1148_9_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_reg_718),32));

        sext_ln1148_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_read_reg_572),65));

    sub_ln1148_5_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln1148_fu_131_p1));
    sub_ln1148_6_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1148_reg_639));
    sub_ln1148_7_fu_273_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1148_3_fu_266_p3));
    sub_ln1148_8_fu_462_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1148_1_reg_713));
    sub_ln1148_9_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln1148_5_fu_484_p3));
    sub_ln1148_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln1148_5_fu_356_p1));
    sub_ln703_16_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_s_reg_607));
    sub_ln703_17_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_43_reg_654));
    sub_ln703_18_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_44_reg_686));
    sub_ln703_19_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_45_reg_728));
    sub_ln703_fu_83_p1 <= in_V;
    sub_ln703_fu_83_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln703_fu_83_p1));
    tmp_28_fu_75_p1 <= in_V;
    tmp_28_fu_75_p3 <= tmp_28_fu_75_p1(31 downto 31);
    tmp_29_fu_89_p3 <= sub_ln703_fu_83_p2(31 downto 31);
    tmp_30_fu_97_p1 <= in_V;
    tmp_30_fu_97_p3 <= tmp_30_fu_97_p1(31 downto 31);
    tmp_31_fu_113_p1 <= in_V;
    tmp_31_fu_113_p3 <= tmp_31_fu_113_p1(31 downto 31);
    tmp_33_fu_211_p3 <= sub_ln703_16_fu_206_p2(31 downto 31);
    tmp_35_fu_249_p4 <= sub_ln1148_6_fu_244_p2(64 downto 34);
    tmp_37_fu_333_p3 <= sub_ln703_17_fu_328_p2(31 downto 31);
    tmp_40_fu_433_p3 <= sub_ln703_18_fu_428_p2(31 downto 31);
    tmp_42_fu_467_p4 <= sub_ln1148_8_fu_462_p2(64 downto 35);
    tmp_45_fu_552_p3 <= sub_ln703_19_fu_547_p2(31 downto 31);
    tmp_4_fu_366_p4 <= in_V_read_reg_572(31 downto 2);
    tmp_s_fu_347_p4 <= sub_ln703_reg_588(31 downto 2);
    zext_ln1148_4_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1148_9_fu_141_p4),32));
    zext_ln1148_5_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_347_p4),31));
    zext_ln1148_6_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_366_p4),31));
    zext_ln1148_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1148_8_fu_121_p4),32));
end behav;
