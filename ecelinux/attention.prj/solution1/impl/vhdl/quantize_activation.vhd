-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantize_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_states_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_states_0_V_ce0 : OUT STD_LOGIC;
    output_states_0_V_we0 : OUT STD_LOGIC;
    output_states_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of quantize_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv40_7F00000000 : STD_LOGIC_VECTOR (39 downto 0) := "0111111100000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv40_8000 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_const_lv40_FFFFFF8000 : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_FFFF80 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln129_fu_140_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln129_reg_347 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln129_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_171_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_8_reg_357 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln102_fu_184_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal udiv_ln1148_reg_368 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal zext_ln136_fu_191_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln136_reg_372 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln136_fu_201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln136_reg_380 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal zext_ln137_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_385 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln136_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_V_load_reg_395 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal p_Val2_7_reg_400 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal select_ln850_fu_290_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln850_reg_406 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_78_reg_412 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_0_0_reg_100 : STD_LOGIC_VECTOR (39 downto 0);
    signal j_0_0_reg_112 : STD_LOGIC_VECTOR (10 downto 0);
    signal j1_0_0_reg_123 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal zext_ln130_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_fu_165_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln1494_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_215_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_fu_215_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_fu_215_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal icmp_ln1494_26_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln109_fu_235_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln109_fu_243_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln851_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_248_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln851_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_276_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_77_fu_258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_282_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln887_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln887_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln887_fu_321_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln138_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_151_ap_start : STD_LOGIC;
    signal grp_fu_151_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);

    component dut_udiv_40ns_40nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (39 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    dut_udiv_40ns_40nfYi_U12 : component dut_udiv_40ns_40nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 44,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_151_ap_start,
        done => grp_fu_151_ap_done,
        din0 => ap_const_lv40_7F00000000,
        din1 => p_0_0_reg_100,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                j1_0_0_reg_123 <= add_ln136_reg_380;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                j1_0_0_reg_123 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_0_reg_112 <= add_ln129_reg_347;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_112 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_0_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0_0_reg_100 <= select_ln102_fu_184_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0_0_reg_100 <= ap_const_lv40_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln129_reg_347 <= add_ln129_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                add_ln136_reg_380 <= add_ln136_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                input_0_V_load_reg_395 <= input_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                p_Val2_7_reg_400 <= mul_ln1118_fu_215_p2(55 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_8_reg_357 <= p_Val2_8_fu_171_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                select_ln850_reg_406 <= select_ln850_fu_290_p3;
                tmp_78_reg_412 <= select_ln850_fu_290_p3(23 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                udiv_ln1148_reg_368 <= grp_fu_151_p2;
                    zext_ln136_reg_372(39 downto 0) <= zext_ln136_fu_191_p1(39 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    zext_ln137_reg_385(10 downto 0) <= zext_ln137_fu_207_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln136_reg_372(55 downto 40) <= "0000000000000000";
    zext_ln137_reg_385(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln129_fu_134_p2, ap_CS_fsm_state48, icmp_ln136_fu_195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln129_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (icmp_ln136_fu_195_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln109_fu_243_p2 <= std_logic_vector(unsigned(p_Val2_7_reg_400) + unsigned(select_ln109_fu_235_p3));
    add_ln129_fu_140_p2 <= std_logic_vector(unsigned(j_0_0_reg_112) + unsigned(ap_const_lv11_1));
    add_ln136_fu_201_p2 <= std_logic_vector(unsigned(j1_0_0_reg_123) + unsigned(ap_const_lv11_1));
    add_ln700_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(p_Result_s_fu_248_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state48, icmp_ln136_fu_195_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (icmp_ln136_fu_195_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state48, icmp_ln136_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (icmp_ln136_fu_195_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= udiv_ln1148_reg_368;

    grp_fu_151_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln129_fu_134_p2)
    begin
        if (((icmp_ln129_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_151_ap_start <= ap_const_logic_1;
        else 
            grp_fu_151_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln129_fu_134_p2 <= "1" when (j_0_0_reg_112 = ap_const_lv11_600) else "0";
    icmp_ln136_fu_195_p2 <= "1" when (j1_0_0_reg_123 = ap_const_lv11_600) else "0";
    icmp_ln1494_26_fu_230_p2 <= "1" when (signed(p_Val2_7_reg_400) > signed(ap_const_lv40_0)) else "0";
    icmp_ln1494_fu_179_p2 <= "1" when (signed(p_0_0_reg_100) > signed(p_Val2_8_reg_357)) else "0";
    icmp_ln851_fu_270_p2 <= "1" when (trunc_ln851_fu_266_p1 = ap_const_lv16_0) else "0";
    icmp_ln887_fu_308_p2 <= "1" when (signed(select_ln850_reg_406) < signed(ap_const_lv24_FFFF80)) else "0";
    icmp_ln895_fu_313_p2 <= "1" when (signed(tmp_78_reg_412) > signed(ap_const_lv17_0)) else "0";

    input_0_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state48, zext_ln137_fu_207_p1, zext_ln130_fu_146_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            input_0_V_address0 <= zext_ln137_fu_207_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_V_address0 <= zext_ln130_fu_146_p1(11 - 1 downto 0);
        else 
            input_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input_0_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_fu_215_p0 <= zext_ln136_reg_372(40 - 1 downto 0);
    mul_ln1118_fu_215_p1 <= input_0_V_load_reg_395;
    mul_ln1118_fu_215_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1118_fu_215_p0) * signed(mul_ln1118_fu_215_p1))), 56));
    or_ln887_fu_329_p2 <= (icmp_ln895_fu_313_p2 or icmp_ln887_fu_308_p2);
    output_states_0_V_address0 <= zext_ln137_reg_385(11 - 1 downto 0);

    output_states_0_V_ce0_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output_states_0_V_ce0 <= ap_const_logic_1;
        else 
            output_states_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_states_0_V_d0 <= 
        select_ln887_fu_321_p3 when (or_ln887_fu_329_p2(0) = '1') else 
        trunc_ln138_fu_318_p1;

    output_states_0_V_we0_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output_states_0_V_we0 <= ap_const_logic_1;
        else 
            output_states_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_248_p4 <= add_ln109_fu_243_p2(39 downto 16);
    p_Val2_8_fu_171_p3 <= 
        sub_ln703_fu_165_p2 when (tmp_76_fu_157_p3(0) = '1') else 
        input_0_V_q0;
    select_ln102_fu_184_p3 <= 
        p_0_0_reg_100 when (icmp_ln1494_fu_179_p2(0) = '1') else 
        p_Val2_8_reg_357;
    select_ln109_fu_235_p3 <= 
        ap_const_lv40_8000 when (icmp_ln1494_26_fu_230_p2(0) = '1') else 
        ap_const_lv40_FFFFFF8000;
    select_ln850_fu_290_p3 <= 
        select_ln851_fu_282_p3 when (tmp_77_fu_258_p3(0) = '1') else 
        p_Result_s_fu_248_p4;
    select_ln851_fu_282_p3 <= 
        p_Result_s_fu_248_p4 when (icmp_ln851_fu_270_p2(0) = '1') else 
        add_ln700_fu_276_p2;
    select_ln887_fu_321_p3 <= 
        ap_const_lv8_80 when (icmp_ln887_fu_308_p2(0) = '1') else 
        ap_const_lv8_7F;
    sub_ln703_fu_165_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(input_0_V_q0));
    tmp_76_fu_157_p3 <= input_0_V_q0(39 downto 39);
    tmp_77_fu_258_p3 <= add_ln109_fu_243_p2(39 downto 39);
    trunc_ln138_fu_318_p1 <= select_ln850_reg_406(8 - 1 downto 0);
    trunc_ln851_fu_266_p1 <= add_ln109_fu_243_p2(16 - 1 downto 0);
    zext_ln130_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_112),64));
    zext_ln136_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_151_p2),56));
    zext_ln137_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_0_reg_123),64));
end behav;
