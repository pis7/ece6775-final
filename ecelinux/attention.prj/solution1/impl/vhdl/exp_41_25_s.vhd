-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_41_25_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (40 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (40 downto 0) );
end;


architecture behav of exp_41_25_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2E42FEF9 : STD_LOGIC_VECTOR (31 downto 0) := "00101110010000101111111011111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv41_FFFFFFFFFF : STD_LOGIC_VECTOR (40 downto 0) := "01111111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (50 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (67 downto 0);
    signal trunc_ln103_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln103_reg_955 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln103_reg_955_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_960_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_102_reg_966 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_102_reg_966_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_102_reg_966_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_102_reg_966_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_102_reg_966_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_102_reg_966_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_539_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln489_21_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_21_reg_986_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_3_V_reg_991 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_fu_734_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_996 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_996_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_996_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_996_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_996_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_996_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln612_fu_740_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln612_reg_1002 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln612_reg_1002_pp0_iter2_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln612_reg_1002_pp0_iter3_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln612_reg_1002_pp0_iter4_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln612_reg_1002_pp0_iter5_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln612_reg_1002_pp0_iter6_reg : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_8_fu_744_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_reg_1008 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_reg_1008_pp0_iter3_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_reg_1008_pp0_iter4_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_reg_1008_pp0_iter5_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_reg_1008_pp0_iter6_reg : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_s_reg_1023 : STD_LOGIC_VECTOR (60 downto 0);
    signal exp_x_msb_2_3_4_lsb_s_fu_821_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal exp_x_msb_2_3_4_lsb_s_reg_1033 : STD_LOGIC_VECTOR (71 downto 0);
    signal exp_x_msb_1_V_reg_1038 : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_1038_pp0_iter8_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_1038_pp0_iter9_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_1038_pp0_iter10_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_1038_pp0_iter11_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal exp_x_msb_1_V_reg_1038_pp0_iter12_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal y_lo_s_V_reg_1054 : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln339_fu_377_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_99_s_fu_199_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_1_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_2_fu_215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_3_fu_223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_4_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_5_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_6_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_7_fu_255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_8_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_9_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_10_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_11_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_12_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_13_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_14_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_15_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_16_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_17_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_18_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_99_19_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_367_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_V_1_fu_549_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln489_1_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln489_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_3_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_4_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_1_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_2_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_2_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_6_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_7_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_4_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_5_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_9_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_10_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_6_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_8_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_7_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_5_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_8_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_3_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_12_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_13_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_10_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_11_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_15_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_16_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_12_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_14_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_13_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_11_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_18_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_19_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_15_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_17_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln489_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_17_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln486_20_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_18_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_16_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_19_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_14_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_20_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln489_9_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_717_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_fu_731_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_fu_727_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_10_fu_752_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal grp_fu_766_p0 : STD_LOGIC_VECTOR (66 downto 0);
    signal grp_fu_766_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_766_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal p_Result_7_fu_772_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_1_fu_796_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal zext_ln703_3_fu_808_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln703_fu_793_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln703_fu_811_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln703_4_fu_817_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal zext_ln728_fu_804_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_833_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_833_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_fu_833_p2 : STD_LOGIC_VECTOR (139 downto 0);
    signal y_l_V_fu_849_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal xor_ln490_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln490_fu_868_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_fu_853_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_20_fu_876_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_fu_893_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_79_fu_883_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln852_fu_903_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_81_fu_915_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln852_1_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln852_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln852_1_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_937_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_766_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_fu_766_p10 : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_fu_833_p00 : STD_LOGIC_VECTOR (139 downto 0);
    signal grp_fu_833_p10 : STD_LOGIC_VECTOR (139 downto 0);

    component dut_mul_67ns_62nsocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (66 downto 0);
        din1 : IN STD_LOGIC_VECTOR (61 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component dut_mul_72ns_68nspcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (67 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (139 downto 0) );
    end component;


    component exp_41_25_s_f_x_mlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component exp_41_25_s_f_x_mmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component exp_41_25_s_exp_xncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;



begin
    f_x_msb_3_table_V_U : component exp_41_25_s_f_x_mlbW
    generic map (
        DataWidth => 51,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component exp_41_25_s_f_x_mmb6
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component exp_41_25_s_exp_xncg
    generic map (
        DataWidth => 68,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    dut_mul_67ns_62nsocq_U44 : component dut_mul_67ns_62nsocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 67,
        din1_WIDTH => 62,
        dout_WIDTH => 129)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_766_p0,
        din1 => grp_fu_766_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_766_p2);

    dut_mul_72ns_68nspcA_U45 : component dut_mul_72ns_68nspcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 72,
        din1_WIDTH => 68,
        dout_WIDTH => 140)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_833_p0,
        din1 => grp_fu_833_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_833_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln489_21_reg_986_pp0_iter6_reg = ap_const_lv1_0))) then
                exp_x_msb_1_V_reg_1038 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_2_3_4_lsb_s_reg_1033 <= exp_x_msb_2_3_4_lsb_s_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_1038_pp0_iter10_reg <= exp_x_msb_1_V_reg_1038_pp0_iter9_reg;
                exp_x_msb_1_V_reg_1038_pp0_iter11_reg <= exp_x_msb_1_V_reg_1038_pp0_iter10_reg;
                exp_x_msb_1_V_reg_1038_pp0_iter12_reg <= exp_x_msb_1_V_reg_1038_pp0_iter11_reg;
                exp_x_msb_1_V_reg_1038_pp0_iter8_reg <= exp_x_msb_1_V_reg_1038;
                exp_x_msb_1_V_reg_1038_pp0_iter9_reg <= exp_x_msb_1_V_reg_1038_pp0_iter8_reg;
                or_ln489_21_reg_986_pp0_iter10_reg <= or_ln489_21_reg_986_pp0_iter9_reg;
                or_ln489_21_reg_986_pp0_iter11_reg <= or_ln489_21_reg_986_pp0_iter10_reg;
                or_ln489_21_reg_986_pp0_iter12_reg <= or_ln489_21_reg_986_pp0_iter11_reg;
                or_ln489_21_reg_986_pp0_iter2_reg <= or_ln489_21_reg_986_pp0_iter1_reg;
                or_ln489_21_reg_986_pp0_iter3_reg <= or_ln489_21_reg_986_pp0_iter2_reg;
                or_ln489_21_reg_986_pp0_iter4_reg <= or_ln489_21_reg_986_pp0_iter3_reg;
                or_ln489_21_reg_986_pp0_iter5_reg <= or_ln489_21_reg_986_pp0_iter4_reg;
                or_ln489_21_reg_986_pp0_iter6_reg <= or_ln489_21_reg_986_pp0_iter5_reg;
                or_ln489_21_reg_986_pp0_iter7_reg <= or_ln489_21_reg_986_pp0_iter6_reg;
                or_ln489_21_reg_986_pp0_iter8_reg <= or_ln489_21_reg_986_pp0_iter7_reg;
                or_ln489_21_reg_986_pp0_iter9_reg <= or_ln489_21_reg_986_pp0_iter8_reg;
                    p_Result_8_reg_1008_pp0_iter3_reg(50 downto 0) <= p_Result_8_reg_1008(50 downto 0);    p_Result_8_reg_1008_pp0_iter3_reg(61 downto 56) <= p_Result_8_reg_1008(61 downto 56);
                    p_Result_8_reg_1008_pp0_iter4_reg(50 downto 0) <= p_Result_8_reg_1008_pp0_iter3_reg(50 downto 0);    p_Result_8_reg_1008_pp0_iter4_reg(61 downto 56) <= p_Result_8_reg_1008_pp0_iter3_reg(61 downto 56);
                    p_Result_8_reg_1008_pp0_iter5_reg(50 downto 0) <= p_Result_8_reg_1008_pp0_iter4_reg(50 downto 0);    p_Result_8_reg_1008_pp0_iter5_reg(61 downto 56) <= p_Result_8_reg_1008_pp0_iter4_reg(61 downto 56);
                    p_Result_8_reg_1008_pp0_iter6_reg(50 downto 0) <= p_Result_8_reg_1008_pp0_iter5_reg(50 downto 0);    p_Result_8_reg_1008_pp0_iter6_reg(61 downto 56) <= p_Result_8_reg_1008_pp0_iter5_reg(61 downto 56);
                p_Result_s_102_reg_966_pp0_iter2_reg <= p_Result_s_102_reg_966_pp0_iter1_reg;
                p_Result_s_102_reg_966_pp0_iter3_reg <= p_Result_s_102_reg_966_pp0_iter2_reg;
                p_Result_s_102_reg_966_pp0_iter4_reg <= p_Result_s_102_reg_966_pp0_iter3_reg;
                p_Result_s_102_reg_966_pp0_iter5_reg <= p_Result_s_102_reg_966_pp0_iter4_reg;
                p_Result_s_reg_960_pp0_iter10_reg <= p_Result_s_reg_960_pp0_iter9_reg;
                p_Result_s_reg_960_pp0_iter11_reg <= p_Result_s_reg_960_pp0_iter10_reg;
                p_Result_s_reg_960_pp0_iter12_reg <= p_Result_s_reg_960_pp0_iter11_reg;
                p_Result_s_reg_960_pp0_iter2_reg <= p_Result_s_reg_960_pp0_iter1_reg;
                p_Result_s_reg_960_pp0_iter3_reg <= p_Result_s_reg_960_pp0_iter2_reg;
                p_Result_s_reg_960_pp0_iter4_reg <= p_Result_s_reg_960_pp0_iter3_reg;
                p_Result_s_reg_960_pp0_iter5_reg <= p_Result_s_reg_960_pp0_iter4_reg;
                p_Result_s_reg_960_pp0_iter6_reg <= p_Result_s_reg_960_pp0_iter5_reg;
                p_Result_s_reg_960_pp0_iter7_reg <= p_Result_s_reg_960_pp0_iter6_reg;
                p_Result_s_reg_960_pp0_iter8_reg <= p_Result_s_reg_960_pp0_iter7_reg;
                p_Result_s_reg_960_pp0_iter9_reg <= p_Result_s_reg_960_pp0_iter8_reg;
                ret_V_reg_996_pp0_iter2_reg <= ret_V_reg_996;
                ret_V_reg_996_pp0_iter3_reg <= ret_V_reg_996_pp0_iter2_reg;
                ret_V_reg_996_pp0_iter4_reg <= ret_V_reg_996_pp0_iter3_reg;
                ret_V_reg_996_pp0_iter5_reg <= ret_V_reg_996_pp0_iter4_reg;
                ret_V_reg_996_pp0_iter6_reg <= ret_V_reg_996_pp0_iter5_reg;
                trunc_ln612_reg_1002_pp0_iter2_reg <= trunc_ln612_reg_1002;
                trunc_ln612_reg_1002_pp0_iter3_reg <= trunc_ln612_reg_1002_pp0_iter2_reg;
                trunc_ln612_reg_1002_pp0_iter4_reg <= trunc_ln612_reg_1002_pp0_iter3_reg;
                trunc_ln612_reg_1002_pp0_iter5_reg <= trunc_ln612_reg_1002_pp0_iter4_reg;
                trunc_ln612_reg_1002_pp0_iter6_reg <= trunc_ln612_reg_1002_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_991 <= f_x_msb_3_table_V_q0;
                or_ln489_21_reg_986 <= or_ln489_21_fu_711_p2;
                or_ln489_21_reg_986_pp0_iter1_reg <= or_ln489_21_reg_986;
                p_Result_s_102_reg_966 <= x_V(20 downto 14);
                p_Result_s_102_reg_966_pp0_iter1_reg <= p_Result_s_102_reg_966;
                p_Result_s_reg_960 <= x_V(40 downto 40);
                p_Result_s_reg_960_pp0_iter1_reg <= p_Result_s_reg_960;
                tmp_V_reg_971 <= x_V(13 downto 6);
                trunc_ln103_reg_955 <= trunc_ln103_fu_195_p1;
                trunc_ln103_reg_955_pp0_iter1_reg <= trunc_ln103_reg_955;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln489_21_reg_986_pp0_iter1_reg = ap_const_lv1_0))) then
                    p_Result_8_reg_1008(50 downto 0) <= p_Result_8_fu_744_p4(50 downto 0);    p_Result_8_reg_1008(61 downto 56) <= p_Result_8_fu_744_p4(61 downto 56);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln489_21_reg_986 = ap_const_lv1_0))) then
                ret_V_reg_996 <= ret_V_fu_734_p2;
                trunc_ln612_reg_1002 <= trunc_ln612_fu_740_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln489_21_reg_986_pp0_iter5_reg = ap_const_lv1_0))) then
                tmp_s_reg_1023 <= grp_fu_766_p2(128 downto 68);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln489_21_reg_986_pp0_iter11_reg = ap_const_lv1_0))) then
                y_lo_s_V_reg_1054 <= grp_fu_833_p2(139 downto 72);
            end if;
        end if;
    end process;
    p_Result_8_reg_1008(55 downto 51) <= "00000";
    p_Result_8_reg_1008_pp0_iter3_reg(55 downto 51) <= "00000";
    p_Result_8_reg_1008_pp0_iter4_reg(55 downto 51) <= "00000";
    p_Result_8_reg_1008_pp0_iter5_reg(55 downto 51) <= "00000";
    p_Result_8_reg_1008_pp0_iter6_reg(55 downto 51) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_fu_811_p2 <= std_logic_vector(unsigned(zext_ln703_3_fu_808_p1) + unsigned(zext_ln703_fu_793_p1));
    and_ln489_fu_579_p2 <= (icmp_ln489_fu_567_p2 and icmp_ln489_1_fu_573_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv41_FFFFFFFFFF when (or_ln852_1_fu_931_p2(0) = '1') else 
        tmp_59_fu_937_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln544_2_fu_788_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_3_4_lsb_s_fu_821_p2 <= std_logic_vector(unsigned(zext_ln703_4_fu_817_p1) + unsigned(zext_ln728_fu_804_p1));
    f_x_msb_2_table_V_address0 <= zext_ln544_1_fu_562_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln544_fu_557_p1(8 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_766_p0 <= grp_fu_766_p00(67 - 1 downto 0);
    grp_fu_766_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_10_fu_752_p3),129));
    grp_fu_766_p1 <= grp_fu_766_p10(62 - 1 downto 0);
    grp_fu_766_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_744_p4),129));
    grp_fu_833_p0 <= grp_fu_833_p00(72 - 1 downto 0);
    grp_fu_833_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_s_reg_1033),140));
    grp_fu_833_p1 <= grp_fu_833_p10(68 - 1 downto 0);
    grp_fu_833_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_1038),140));
    icmp_ln1494_fu_523_p2 <= "1" when (signed(p_Result_5_fu_367_p4) > signed(ap_const_lv6_16)) else "0";
    icmp_ln489_1_fu_573_p2 <= "1" when (unsigned(p_Result_6_fu_381_p3) > unsigned(ap_const_lv32_2E42FEF9)) else "0";
    icmp_ln489_fu_567_p2 <= "1" when (p_Result_5_fu_367_p4 = ap_const_lv6_16) else "0";
    icmp_ln852_1_fu_925_p2 <= "0" when (tmp_81_fu_915_p4 = ap_const_lv4_0) else "1";
    icmp_ln852_fu_909_p2 <= "0" when (or_ln852_fu_903_p2 = ap_const_lv2_0) else "1";
    lhs_V_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_717_p4),9));
    or_ln489_10_fu_645_p2 <= (xor_ln486_13_fu_467_p2 or xor_ln486_12_fu_461_p2);
    or_ln489_11_fu_651_p2 <= (xor_ln486_11_fu_455_p2 or or_ln489_10_fu_645_p2);
    or_ln489_12_fu_657_p2 <= (xor_ln486_16_fu_485_p2 or xor_ln486_15_fu_479_p2);
    or_ln489_13_fu_663_p2 <= (xor_ln486_14_fu_473_p2 or or_ln489_12_fu_657_p2);
    or_ln489_14_fu_669_p2 <= (or_ln489_13_fu_663_p2 or or_ln489_11_fu_651_p2);
    or_ln489_15_fu_675_p2 <= (xor_ln486_19_fu_503_p2 or xor_ln486_18_fu_497_p2);
    or_ln489_16_fu_681_p2 <= (xor_ln486_17_fu_491_p2 or or_ln489_15_fu_675_p2);
    or_ln489_17_fu_687_p2 <= (icmp_ln1494_fu_523_p2 or and_ln489_fu_579_p2);
    or_ln489_18_fu_693_p2 <= (xor_ln486_20_fu_517_p2 or or_ln489_17_fu_687_p2);
    or_ln489_19_fu_699_p2 <= (or_ln489_18_fu_693_p2 or or_ln489_16_fu_681_p2);
    or_ln489_1_fu_591_p2 <= (xor_ln486_4_fu_413_p2 or xor_ln486_3_fu_407_p2);
    or_ln489_20_fu_705_p2 <= (or_ln489_19_fu_699_p2 or or_ln489_14_fu_669_p2);
    or_ln489_21_fu_711_p2 <= (or_ln489_9_fu_639_p2 or or_ln489_20_fu_705_p2);
    or_ln489_2_fu_597_p2 <= (xor_ln486_2_fu_401_p2 or or_ln489_1_fu_591_p2);
    or_ln489_3_fu_603_p2 <= (or_ln489_fu_585_p2 or or_ln489_2_fu_597_p2);
    or_ln489_4_fu_609_p2 <= (xor_ln486_7_fu_431_p2 or xor_ln486_6_fu_425_p2);
    or_ln489_5_fu_615_p2 <= (xor_ln486_5_fu_419_p2 or or_ln489_4_fu_609_p2);
    or_ln489_6_fu_621_p2 <= (xor_ln486_9_fu_443_p2 or xor_ln486_10_fu_449_p2);
    or_ln489_7_fu_627_p2 <= (xor_ln486_8_fu_437_p2 or or_ln489_6_fu_621_p2);
    or_ln489_8_fu_633_p2 <= (or_ln489_7_fu_627_p2 or or_ln489_5_fu_615_p2);
    or_ln489_9_fu_639_p2 <= (or_ln489_8_fu_633_p2 or or_ln489_3_fu_603_p2);
    or_ln489_fu_585_p2 <= (xor_ln486_fu_389_p2 or xor_ln486_1_fu_395_p2);
    or_ln852_1_fu_931_p2 <= (icmp_ln852_fu_909_p2 or icmp_ln852_1_fu_925_p2);
    or_ln852_fu_903_p2 <= (tmp_80_fu_893_p4 or tmp_79_fu_883_p4);
    p_Result_10_fu_752_p3 <= (ret_V_reg_996 & trunc_ln612_reg_1002);
    p_Result_5_fu_367_p4 <= x_V(21 downto 16);
    p_Result_6_fu_381_p3 <= (trunc_ln339_fu_377_p1 & ap_const_lv16_0);
    p_Result_7_fu_772_p3 <= (p_Result_s_reg_960_pp0_iter5_reg & p_Result_s_102_reg_966_pp0_iter5_reg);
    p_Result_8_fu_744_p4 <= ((trunc_ln103_reg_955_pp0_iter1_reg & ap_const_lv5_0) & f_x_msb_3_V_reg_991);
    p_Result_99_10_fu_279_p3 <= x_V(31 downto 31);
    p_Result_99_11_fu_287_p3 <= x_V(32 downto 32);
    p_Result_99_12_fu_295_p3 <= x_V(33 downto 33);
    p_Result_99_13_fu_303_p3 <= x_V(34 downto 34);
    p_Result_99_14_fu_311_p3 <= x_V(35 downto 35);
    p_Result_99_15_fu_319_p3 <= x_V(36 downto 36);
    p_Result_99_16_fu_327_p3 <= x_V(37 downto 37);
    p_Result_99_17_fu_335_p3 <= x_V(38 downto 38);
    p_Result_99_18_fu_343_p3 <= x_V(39 downto 39);
    p_Result_99_19_fu_351_p3 <= x_V(40 downto 40);
    p_Result_99_1_fu_207_p3 <= x_V(22 downto 22);
    p_Result_99_2_fu_215_p3 <= x_V(23 downto 23);
    p_Result_99_3_fu_223_p3 <= x_V(24 downto 24);
    p_Result_99_4_fu_231_p3 <= x_V(25 downto 25);
    p_Result_99_5_fu_239_p3 <= x_V(26 downto 26);
    p_Result_99_6_fu_247_p3 <= x_V(27 downto 27);
    p_Result_99_7_fu_255_p3 <= x_V(28 downto 28);
    p_Result_99_8_fu_263_p3 <= x_V(29 downto 29);
    p_Result_99_9_fu_271_p3 <= x_V(30 downto 30);
    p_Result_99_s_fu_199_p3 <= x_V(21 downto 21);
    p_Result_9_fu_717_p4 <= f_x_msb_2_table_V_q0(63 downto 58);
    p_Result_s_fu_359_p3 <= x_V(40 downto 40);
    p_Val2_20_fu_876_p3 <= 
        select_ln490_fu_868_p3 when (or_ln489_21_reg_986_pp0_iter12_reg(0) = '1') else 
        y_V_fu_853_p4;
    ret_V_fu_734_p2 <= std_logic_vector(unsigned(rhs_V_fu_731_p1) + unsigned(lhs_V_fu_727_p1));
    rhs_V_1_fu_796_p4 <= ((ret_V_reg_996_pp0_iter6_reg & trunc_ln612_reg_1002_pp0_iter6_reg) & ap_const_lv4_0);
    rhs_V_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_971),9));
    select_ln490_fu_868_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (xor_ln490_fu_863_p2(0) = '1') else 
        ap_const_lv64_0;
    tmp_59_fu_937_p4 <= p_Val2_20_fu_876_p3(56 downto 16);
    tmp_79_fu_883_p4 <= p_Val2_20_fu_876_p3(63 downto 62);
    tmp_80_fu_893_p4 <= p_Val2_20_fu_876_p3(61 downto 60);
    tmp_81_fu_915_p4 <= p_Val2_20_fu_876_p3(59 downto 56);
    tmp_V_1_fu_549_p3 <= (trunc_ln103_fu_195_p1 & ap_const_lv2_0);
    tmp_V_fu_539_p4 <= x_V(13 downto 6);
    tmp_fu_509_p3 <= x_V(40 downto 40);
    trunc_ln103_fu_195_p1 <= x_V(6 - 1 downto 0);
    trunc_ln339_fu_377_p1 <= x_V(16 - 1 downto 0);
    trunc_ln612_fu_740_p1 <= f_x_msb_2_table_V_q0(58 - 1 downto 0);
    xor_ln486_10_fu_449_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_10_fu_279_p3);
    xor_ln486_11_fu_455_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_11_fu_287_p3);
    xor_ln486_12_fu_461_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_12_fu_295_p3);
    xor_ln486_13_fu_467_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_13_fu_303_p3);
    xor_ln486_14_fu_473_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_14_fu_311_p3);
    xor_ln486_15_fu_479_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_15_fu_319_p3);
    xor_ln486_16_fu_485_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_16_fu_327_p3);
    xor_ln486_17_fu_491_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_17_fu_335_p3);
    xor_ln486_18_fu_497_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_18_fu_343_p3);
    xor_ln486_19_fu_503_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_19_fu_351_p3);
    xor_ln486_1_fu_395_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_1_fu_207_p3);
    xor_ln486_20_fu_517_p2 <= (tmp_fu_509_p3 xor p_Result_s_fu_359_p3);
    xor_ln486_2_fu_401_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_2_fu_215_p3);
    xor_ln486_3_fu_407_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_3_fu_223_p3);
    xor_ln486_4_fu_413_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_4_fu_231_p3);
    xor_ln486_5_fu_419_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_5_fu_239_p3);
    xor_ln486_6_fu_425_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_6_fu_247_p3);
    xor_ln486_7_fu_431_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_7_fu_255_p3);
    xor_ln486_8_fu_437_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_8_fu_263_p3);
    xor_ln486_9_fu_443_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_9_fu_271_p3);
    xor_ln486_fu_389_p2 <= (p_Result_s_fu_359_p3 xor p_Result_99_s_fu_199_p3);
    xor_ln490_fu_863_p2 <= (p_Result_s_reg_960_pp0_iter12_reg xor ap_const_lv1_1);
    y_V_fu_853_p4 <= y_l_V_fu_849_p2(67 downto 4);
    y_l_V_fu_849_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_1038_pp0_iter12_reg) + unsigned(y_lo_s_V_reg_1054));
    zext_ln544_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_539_p4),64));
    zext_ln544_2_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_772_p3),64));
    zext_ln544_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_549_p3),64));
    zext_ln703_3_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_reg_1008_pp0_iter6_reg),63));
    zext_ln703_4_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_fu_811_p2),72));
    zext_ln703_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1023),63));
    zext_ln728_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_1_fu_796_p4),72));
end behav;
