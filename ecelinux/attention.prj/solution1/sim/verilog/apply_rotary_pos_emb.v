// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_q_0_V_address0,
        input_q_0_V_ce0,
        input_q_0_V_q0,
        input_q_0_V_address1,
        input_q_0_V_ce1,
        input_q_0_V_q1,
        input_k_0_V_address0,
        input_k_0_V_ce0,
        input_k_0_V_q0,
        input_k_0_V_address1,
        input_k_0_V_ce1,
        input_k_0_V_q1,
        output_q_0_V_address0,
        output_q_0_V_ce0,
        output_q_0_V_we0,
        output_q_0_V_d0,
        output_k_0_V_address0,
        output_k_0_V_ce0,
        output_k_0_V_we0,
        output_k_0_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_q_0_V_address0;
output   input_q_0_V_ce0;
input  [39:0] input_q_0_V_q0;
output  [10:0] input_q_0_V_address1;
output   input_q_0_V_ce1;
input  [39:0] input_q_0_V_q1;
output  [10:0] input_k_0_V_address0;
output   input_k_0_V_ce0;
input  [39:0] input_k_0_V_q0;
output  [10:0] input_k_0_V_address1;
output   input_k_0_V_ce1;
input  [39:0] input_k_0_V_q1;
output  [10:0] output_q_0_V_address0;
output   output_q_0_V_ce0;
output   output_q_0_V_we0;
output  [39:0] output_q_0_V_d0;
output  [10:0] output_k_0_V_address0;
output   output_k_0_V_ce0;
output   output_k_0_V_we0;
output  [39:0] output_k_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_q_0_V_address0;
reg input_q_0_V_ce0;
reg input_q_0_V_ce1;
reg[10:0] input_k_0_V_address0;
reg input_k_0_V_ce0;
reg input_k_0_V_ce1;
reg output_q_0_V_ce0;
reg output_q_0_V_we0;
reg output_k_0_V_ce0;
reg output_k_0_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [17:0] cos_tab_address0;
reg    cos_tab_ce0;
wire   [31:0] cos_tab_q0;
wire   [17:0] sin_tab_address0;
reg    sin_tab_ce0;
wire   [31:0] sin_tab_q0;
reg   [39:0] reg_342;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
reg   [39:0] reg_346;
wire   [4:0] i_fu_356_p2;
reg   [4:0] i_reg_1147;
wire    ap_CS_fsm_state2;
wire   [11:0] sub_ln1265_fu_382_p2;
reg   [11:0] sub_ln1265_reg_1152;
wire   [0:0] icmp_ln201_fu_350_p2;
wire   [5:0] add_ln203_fu_398_p2;
reg   [5:0] add_ln203_reg_1161;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln203_fu_413_p1;
reg  signed [63:0] sext_ln203_reg_1166;
wire   [0:0] icmp_ln203_fu_392_p2;
wire  signed [63:0] sext_ln1265_fu_434_p1;
reg  signed [63:0] sext_ln1265_reg_1182;
wire   [4:0] i_2_fu_460_p2;
reg   [4:0] i_2_reg_1201;
wire    ap_CS_fsm_state6;
wire   [11:0] sub_ln1116_fu_486_p2;
reg   [11:0] sub_ln1116_reg_1206;
wire   [0:0] icmp_ln213_fu_454_p2;
wire   [6:0] add_ln215_fu_498_p2;
reg   [6:0] add_ln215_reg_1214;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln215_fu_492_p2;
wire   [11:0] add_ln1116_fu_524_p2;
reg   [11:0] add_ln1116_reg_1229;
reg   [31:0] cos_tab_load_reg_1234;
wire    ap_CS_fsm_state8;
reg   [31:0] sin_tab_load_reg_1240;
wire   [53:0] select_ln570_fu_581_p3;
reg   [53:0] select_ln570_reg_1246;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln571_fu_589_p2;
reg   [0:0] icmp_ln571_reg_1251;
wire   [0:0] icmp_ln581_fu_601_p2;
reg   [0:0] icmp_ln581_reg_1257;
wire  signed [11:0] select_ln581_fu_619_p3;
reg  signed [11:0] select_ln581_reg_1263;
wire   [0:0] icmp_ln582_fu_627_p2;
reg   [0:0] icmp_ln582_reg_1270;
wire   [39:0] trunc_ln583_fu_633_p1;
reg   [39:0] trunc_ln583_reg_1276;
wire   [53:0] select_ln570_1_fu_689_p3;
reg   [53:0] select_ln570_1_reg_1282;
wire   [0:0] icmp_ln571_1_fu_697_p2;
reg   [0:0] icmp_ln571_1_reg_1287;
wire   [0:0] icmp_ln581_1_fu_709_p2;
reg   [0:0] icmp_ln581_1_reg_1293;
wire  signed [11:0] select_ln581_1_fu_727_p3;
reg  signed [11:0] select_ln581_1_reg_1299;
wire   [0:0] icmp_ln582_1_fu_735_p2;
reg   [0:0] icmp_ln582_1_reg_1306;
wire   [39:0] trunc_ln583_1_fu_741_p1;
reg   [39:0] trunc_ln583_1_reg_1312;
wire  signed [63:0] sext_ln1116_fu_745_p1;
reg  signed [63:0] sext_ln1116_reg_1318;
wire    ap_CS_fsm_state10;
wire   [39:0] select_ln603_fu_866_p3;
reg   [39:0] select_ln603_reg_1344;
wire   [0:0] or_ln603_fu_874_p2;
reg   [0:0] or_ln603_reg_1349;
wire   [39:0] select_ln603_7_fu_880_p3;
reg   [39:0] select_ln603_7_reg_1354;
wire   [0:0] or_ln603_6_fu_893_p2;
reg   [0:0] or_ln603_6_reg_1359;
wire   [39:0] select_ln603_10_fu_1013_p3;
reg   [39:0] select_ln603_10_reg_1364;
wire   [0:0] or_ln603_7_fu_1021_p2;
reg   [0:0] or_ln603_7_reg_1369;
wire   [39:0] select_ln603_11_fu_1027_p3;
reg   [39:0] select_ln603_11_reg_1374;
wire   [0:0] or_ln603_9_fu_1040_p2;
reg   [0:0] or_ln603_9_reg_1379;
wire   [39:0] select_ln603_9_fu_1051_p3;
reg   [39:0] select_ln603_9_reg_1384;
wire   [39:0] select_ln603_13_fu_1063_p3;
reg   [39:0] select_ln603_13_reg_1389;
wire   [39:0] rotated_q_0_V_q0;
reg   [39:0] rotated_q_0_V_load_reg_1394;
wire   [39:0] rotated_k_0_V_q0;
reg   [39:0] rotated_k_0_V_load_reg_1399;
wire   [55:0] mul_ln703_fu_1083_p2;
reg   [55:0] mul_ln703_reg_1404;
wire    ap_CS_fsm_state12;
wire   [55:0] mul_ln1192_fu_1089_p2;
reg   [55:0] mul_ln1192_reg_1409;
wire   [55:0] mul_ln703_1_fu_1102_p2;
reg   [55:0] mul_ln703_1_reg_1414;
wire   [55:0] mul_ln1192_1_fu_1108_p2;
reg   [55:0] mul_ln1192_1_reg_1419;
reg   [10:0] rotated_q_0_V_address0;
reg    rotated_q_0_V_ce0;
reg    rotated_q_0_V_we0;
reg   [39:0] rotated_q_0_V_d0;
reg   [10:0] rotated_k_0_V_address0;
reg    rotated_k_0_V_ce0;
reg    rotated_k_0_V_we0;
reg   [39:0] rotated_k_0_V_d0;
reg   [4:0] i_0_reg_290;
reg   [5:0] k_0_0_reg_301;
wire    ap_CS_fsm_state5;
reg   [4:0] i14_0_reg_312;
reg   [6:0] k16_0_0_reg_323;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln217_2_fu_518_p1;
wire   [39:0] sub_ln703_fu_440_p2;
wire   [39:0] sub_ln703_34_fu_447_p2;
wire   [9:0] tmp_70_fu_370_p3;
wire   [11:0] tmp_69_fu_362_p3;
wire   [11:0] zext_ln1265_fu_378_p1;
wire   [11:0] zext_ln203_13_fu_404_p1;
wire   [11:0] add_ln203_6_fu_408_p2;
wire   [6:0] zext_ln203_fu_388_p1;
wire   [6:0] add_ln204_fu_419_p2;
wire   [11:0] zext_ln1265_3_fu_425_p1;
wire   [11:0] add_ln1265_fu_429_p2;
wire   [9:0] tmp_72_fu_474_p3;
wire   [11:0] tmp_71_fu_466_p3;
wire   [11:0] zext_ln1116_fu_482_p1;
wire   [9:0] zext_ln217_1_fu_508_p1;
wire   [9:0] add_ln217_fu_512_p2;
wire   [11:0] zext_ln217_fu_504_p1;
wire   [63:0] grp_fu_334_p1;
wire   [63:0] bitcast_ln696_fu_529_p1;
wire   [10:0] p_Result_s_fu_545_p4;
wire   [51:0] trunc_ln565_fu_559_p1;
wire   [52:0] tmp_22_fu_563_p3;
wire   [53:0] zext_ln569_fu_571_p1;
wire   [0:0] tmp_88_fu_537_p3;
wire   [53:0] sub_ln461_fu_575_p2;
wire   [62:0] trunc_ln557_fu_533_p1;
wire   [11:0] zext_ln461_fu_555_p1;
wire   [11:0] sub_ln575_fu_595_p2;
wire   [11:0] add_ln581_fu_607_p2;
wire   [11:0] sub_ln581_fu_613_p2;
wire   [63:0] grp_fu_338_p1;
wire   [63:0] bitcast_ln696_2_fu_637_p1;
wire   [10:0] p_Result_7_fu_653_p4;
wire   [51:0] trunc_ln565_1_fu_667_p1;
wire   [52:0] tmp_23_fu_671_p3;
wire   [53:0] zext_ln569_1_fu_679_p1;
wire   [0:0] tmp_90_fu_645_p3;
wire   [53:0] sub_ln461_1_fu_683_p2;
wire   [62:0] trunc_ln557_1_fu_641_p1;
wire   [11:0] zext_ln461_1_fu_663_p1;
wire   [11:0] sub_ln575_1_fu_703_p2;
wire   [11:0] add_ln581_1_fu_715_p2;
wire   [11:0] sub_ln581_1_fu_721_p2;
wire  signed [31:0] sext_ln581_fu_752_p1;
wire   [53:0] zext_ln586_fu_765_p1;
wire   [53:0] ashr_ln586_fu_769_p2;
wire   [31:0] bitcast_ln696_1_fu_778_p1;
wire   [0:0] tmp_89_fu_781_p3;
wire   [39:0] zext_ln604_fu_797_p1;
wire   [0:0] xor_ln571_fu_806_p2;
wire   [0:0] or_ln582_fu_816_p2;
wire   [0:0] xor_ln582_fu_820_p2;
wire   [0:0] icmp_ln585_fu_755_p2;
wire   [0:0] and_ln581_fu_826_p2;
wire   [0:0] xor_ln585_fu_831_p2;
wire   [0:0] or_ln581_fu_849_p2;
wire   [0:0] icmp_ln603_fu_760_p2;
wire   [0:0] xor_ln581_fu_854_p2;
wire   [0:0] and_ln603_fu_860_p2;
wire   [39:0] shl_ln604_fu_801_p2;
wire   [39:0] trunc_ln586_fu_774_p1;
wire   [0:0] and_ln585_3_fu_843_p2;
wire   [0:0] and_ln585_fu_837_p2;
wire   [39:0] select_ln588_fu_789_p3;
wire   [0:0] and_ln582_fu_811_p2;
wire   [0:0] or_ln603_5_fu_887_p2;
wire  signed [31:0] sext_ln581_1_fu_899_p1;
wire   [53:0] zext_ln586_1_fu_912_p1;
wire   [53:0] ashr_ln586_1_fu_916_p2;
wire   [31:0] bitcast_ln696_3_fu_925_p1;
wire   [0:0] tmp_91_fu_928_p3;
wire   [39:0] zext_ln604_1_fu_944_p1;
wire   [0:0] xor_ln571_1_fu_953_p2;
wire   [0:0] or_ln582_1_fu_963_p2;
wire   [0:0] xor_ln582_1_fu_967_p2;
wire   [0:0] icmp_ln585_1_fu_902_p2;
wire   [0:0] and_ln581_1_fu_973_p2;
wire   [0:0] xor_ln585_1_fu_978_p2;
wire   [0:0] or_ln581_1_fu_996_p2;
wire   [0:0] icmp_ln603_1_fu_907_p2;
wire   [0:0] xor_ln581_1_fu_1001_p2;
wire   [0:0] and_ln603_1_fu_1007_p2;
wire   [39:0] shl_ln604_1_fu_948_p2;
wire   [39:0] trunc_ln586_1_fu_921_p1;
wire   [0:0] and_ln585_5_fu_990_p2;
wire   [0:0] and_ln585_4_fu_984_p2;
wire   [39:0] select_ln588_1_fu_936_p3;
wire   [0:0] and_ln582_1_fu_958_p2;
wire   [0:0] or_ln603_8_fu_1034_p2;
wire   [39:0] select_ln603_8_fu_1046_p3;
wire   [39:0] select_ln603_12_fu_1058_p3;
wire  signed [39:0] mul_ln703_fu_1083_p0;
wire  signed [39:0] mul_ln703_fu_1083_p1;
wire  signed [55:0] sext_ln1118_2_fu_1074_p1;
wire  signed [39:0] mul_ln1192_fu_1089_p0;
wire  signed [39:0] mul_ln1192_fu_1089_p1;
wire  signed [55:0] sext_ln1118_4_fu_1080_p1;
wire  signed [39:0] mul_ln703_1_fu_1102_p0;
wire  signed [39:0] mul_ln703_1_fu_1102_p1;
wire  signed [39:0] mul_ln1192_1_fu_1108_p0;
wire  signed [39:0] mul_ln1192_1_fu_1108_p1;
wire   [55:0] add_ln1192_fu_1114_p2;
wire   [55:0] add_ln1192_1_fu_1129_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

apply_rotary_pos_hbi #(
    .DataWidth( 32 ),
    .AddressRange( 196608 ),
    .AddressWidth( 18 ))
cos_tab_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cos_tab_address0),
    .ce0(cos_tab_ce0),
    .q0(cos_tab_q0)
);

apply_rotary_pos_ibs #(
    .DataWidth( 32 ),
    .AddressRange( 196608 ),
    .AddressWidth( 18 ))
sin_tab_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_tab_address0),
    .ce0(sin_tab_ce0),
    .q0(sin_tab_q0)
);

apply_rotary_pos_jbC #(
    .DataWidth( 40 ),
    .AddressRange( 1536 ),
    .AddressWidth( 11 ))
rotated_q_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_V_address0),
    .ce0(rotated_q_0_V_ce0),
    .we0(rotated_q_0_V_we0),
    .d0(rotated_q_0_V_d0),
    .q0(rotated_q_0_V_q0)
);

apply_rotary_pos_jbC #(
    .DataWidth( 40 ),
    .AddressRange( 1536 ),
    .AddressWidth( 11 ))
rotated_k_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_V_address0),
    .ce0(rotated_k_0_V_ce0),
    .we0(rotated_k_0_V_we0),
    .d0(rotated_k_0_V_d0),
    .q0(rotated_k_0_V_q0)
);

dut_fpext_32ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_fpext_32ns_64bkb_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cos_tab_q0),
    .ce(1'b1),
    .dout(grp_fu_334_p1)
);

dut_fpext_32ns_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_fpext_32ns_64bkb_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sin_tab_q0),
    .ce(1'b1),
    .dout(grp_fu_338_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln201_fu_350_p2 == 1'd1))) begin
        i14_0_reg_312 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln215_fu_492_p2 == 1'd1))) begin
        i14_0_reg_312 <= i_2_reg_1201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_290 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln203_fu_392_p2 == 1'd1))) begin
        i_0_reg_290 <= i_reg_1147;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k16_0_0_reg_323 <= add_ln215_reg_1214;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_454_p2 == 1'd0))) begin
        k16_0_0_reg_323 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_301 <= add_ln203_reg_1161;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln201_fu_350_p2 == 1'd0))) begin
        k_0_0_reg_301 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln215_fu_492_p2 == 1'd0))) begin
        add_ln1116_reg_1229 <= add_ln1116_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln203_reg_1161 <= add_ln203_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln215_reg_1214 <= add_ln215_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        cos_tab_load_reg_1234 <= cos_tab_q0;
        sin_tab_load_reg_1240 <= sin_tab_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_1201 <= i_2_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1147 <= i_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln571_1_reg_1287 <= icmp_ln571_1_fu_697_p2;
        icmp_ln571_reg_1251 <= icmp_ln571_fu_589_p2;
        icmp_ln581_1_reg_1293 <= icmp_ln581_1_fu_709_p2;
        icmp_ln581_reg_1257 <= icmp_ln581_fu_601_p2;
        icmp_ln582_1_reg_1306 <= icmp_ln582_1_fu_735_p2;
        icmp_ln582_reg_1270 <= icmp_ln582_fu_627_p2;
        select_ln570_1_reg_1282 <= select_ln570_1_fu_689_p3;
        select_ln570_reg_1246 <= select_ln570_fu_581_p3;
        select_ln581_1_reg_1299 <= select_ln581_1_fu_727_p3;
        select_ln581_reg_1263 <= select_ln581_fu_619_p3;
        trunc_ln583_1_reg_1312 <= trunc_ln583_1_fu_741_p1;
        trunc_ln583_reg_1276 <= trunc_ln583_fu_633_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln1192_1_reg_1419 <= mul_ln1192_1_fu_1108_p2;
        mul_ln1192_reg_1409 <= mul_ln1192_fu_1089_p2;
        mul_ln703_1_reg_1414 <= mul_ln703_1_fu_1102_p2;
        mul_ln703_reg_1404 <= mul_ln703_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        or_ln603_6_reg_1359 <= or_ln603_6_fu_893_p2;
        or_ln603_7_reg_1369 <= or_ln603_7_fu_1021_p2;
        or_ln603_9_reg_1379 <= or_ln603_9_fu_1040_p2;
        or_ln603_reg_1349 <= or_ln603_fu_874_p2;
        select_ln603_10_reg_1364 <= select_ln603_10_fu_1013_p3;
        select_ln603_11_reg_1374 <= select_ln603_11_fu_1027_p3;
        select_ln603_7_reg_1354 <= select_ln603_7_fu_880_p3;
        select_ln603_reg_1344 <= select_ln603_fu_866_p3;
        sext_ln1116_reg_1318 <= sext_ln1116_fu_745_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_342 <= input_q_0_V_q0;
        reg_346 <= input_k_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        rotated_k_0_V_load_reg_1399 <= rotated_k_0_V_q0;
        rotated_q_0_V_load_reg_1394 <= rotated_q_0_V_q0;
        select_ln603_13_reg_1389 <= select_ln603_13_fu_1063_p3;
        select_ln603_9_reg_1384 <= select_ln603_9_fu_1051_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln203_fu_392_p2 == 1'd0))) begin
        sext_ln1265_reg_1182 <= sext_ln1265_fu_434_p1;
        sext_ln203_reg_1166 <= sext_ln203_fu_413_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_454_p2 == 1'd0))) begin
        sub_ln1116_reg_1206[11 : 5] <= sub_ln1116_fu_486_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln201_fu_350_p2 == 1'd0))) begin
        sub_ln1265_reg_1152[11 : 5] <= sub_ln1265_fu_382_p2[11 : 5];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_454_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_454_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cos_tab_ce0 = 1'b1;
    end else begin
        cos_tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_k_0_V_address0 = sext_ln1116_fu_745_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_address0 = sext_ln1265_fu_434_p1;
    end else begin
        input_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        input_k_0_V_ce0 = 1'b1;
    end else begin
        input_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_k_0_V_ce1 = 1'b1;
    end else begin
        input_k_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_q_0_V_address0 = sext_ln1116_fu_745_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_address0 = sext_ln1265_fu_434_p1;
    end else begin
        input_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        input_q_0_V_ce0 = 1'b1;
    end else begin
        input_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_q_0_V_ce1 = 1'b1;
    end else begin
        input_q_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_k_0_V_ce0 = 1'b1;
    end else begin
        output_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_k_0_V_we0 = 1'b1;
    end else begin
        output_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_q_0_V_ce0 = 1'b1;
    end else begin
        output_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_q_0_V_we0 = 1'b1;
    end else begin
        output_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rotated_k_0_V_address0 = sext_ln1116_fu_745_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_address0 = sext_ln203_reg_1166;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_address0 = sext_ln1265_reg_1182;
    end else begin
        rotated_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        rotated_k_0_V_ce0 = 1'b1;
    end else begin
        rotated_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_d0 = sub_ln703_34_fu_447_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_k_0_V_d0 = input_k_0_V_q1;
    end else begin
        rotated_k_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        rotated_k_0_V_we0 = 1'b1;
    end else begin
        rotated_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rotated_q_0_V_address0 = sext_ln1116_fu_745_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_address0 = sext_ln203_reg_1166;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_address0 = sext_ln1265_reg_1182;
    end else begin
        rotated_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        rotated_q_0_V_ce0 = 1'b1;
    end else begin
        rotated_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_q_0_V_d0 = sub_ln703_fu_440_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rotated_q_0_V_d0 = input_q_0_V_q1;
    end else begin
        rotated_q_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        rotated_q_0_V_we0 = 1'b1;
    end else begin
        rotated_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sin_tab_ce0 = 1'b1;
    end else begin
        sin_tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln201_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln203_fu_392_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln213_fu_454_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln215_fu_492_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_524_p2 = (sub_ln1116_reg_1206 + zext_ln217_fu_504_p1);

assign add_ln1192_1_fu_1129_p2 = (mul_ln1192_1_reg_1419 + mul_ln703_1_reg_1414);

assign add_ln1192_fu_1114_p2 = (mul_ln1192_reg_1409 + mul_ln703_reg_1404);

assign add_ln1265_fu_429_p2 = (sub_ln1265_reg_1152 + zext_ln1265_3_fu_425_p1);

assign add_ln203_6_fu_408_p2 = (sub_ln1265_reg_1152 + zext_ln203_13_fu_404_p1);

assign add_ln203_fu_398_p2 = (k_0_0_reg_301 + 6'd1);

assign add_ln204_fu_419_p2 = (zext_ln203_fu_388_p1 + 7'd48);

assign add_ln215_fu_498_p2 = (k16_0_0_reg_323 + 7'd1);

assign add_ln217_fu_512_p2 = (10'd480 + zext_ln217_1_fu_508_p1);

assign add_ln581_1_fu_715_p2 = ($signed(12'd4080) + $signed(sub_ln575_1_fu_703_p2));

assign add_ln581_fu_607_p2 = ($signed(12'd4080) + $signed(sub_ln575_fu_595_p2));

assign and_ln581_1_fu_973_p2 = (xor_ln582_1_fu_967_p2 & icmp_ln581_1_reg_1293);

assign and_ln581_fu_826_p2 = (xor_ln582_fu_820_p2 & icmp_ln581_reg_1257);

assign and_ln582_1_fu_958_p2 = (xor_ln571_1_fu_953_p2 & icmp_ln582_1_reg_1306);

assign and_ln582_fu_811_p2 = (xor_ln571_fu_806_p2 & icmp_ln582_reg_1270);

assign and_ln585_3_fu_843_p2 = (icmp_ln585_fu_755_p2 & and_ln581_fu_826_p2);

assign and_ln585_4_fu_984_p2 = (xor_ln585_1_fu_978_p2 & and_ln581_1_fu_973_p2);

assign and_ln585_5_fu_990_p2 = (icmp_ln585_1_fu_902_p2 & and_ln581_1_fu_973_p2);

assign and_ln585_fu_837_p2 = (xor_ln585_fu_831_p2 & and_ln581_fu_826_p2);

assign and_ln603_1_fu_1007_p2 = (xor_ln581_1_fu_1001_p2 & icmp_ln603_1_fu_907_p2);

assign and_ln603_fu_860_p2 = (xor_ln581_fu_854_p2 & icmp_ln603_fu_760_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ashr_ln586_1_fu_916_p2 = $signed(select_ln570_1_reg_1282) >>> zext_ln586_1_fu_912_p1;

assign ashr_ln586_fu_769_p2 = $signed(select_ln570_reg_1246) >>> zext_ln586_fu_765_p1;

assign bitcast_ln696_1_fu_778_p1 = cos_tab_load_reg_1234;

assign bitcast_ln696_2_fu_637_p1 = grp_fu_338_p1;

assign bitcast_ln696_3_fu_925_p1 = sin_tab_load_reg_1240;

assign bitcast_ln696_fu_529_p1 = grp_fu_334_p1;

assign cos_tab_address0 = zext_ln217_2_fu_518_p1;

assign i_2_fu_460_p2 = (i14_0_reg_312 + 5'd1);

assign i_fu_356_p2 = (i_0_reg_290 + 5'd1);

assign icmp_ln201_fu_350_p2 = ((i_0_reg_290 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_392_p2 = ((k_0_0_reg_301 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln213_fu_454_p2 = ((i14_0_reg_312 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_492_p2 = ((k16_0_0_reg_323 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln571_1_fu_697_p2 = ((trunc_ln557_1_fu_641_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_589_p2 = ((trunc_ln557_fu_533_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_1_fu_709_p2 = (($signed(sub_ln575_1_fu_703_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_601_p2 = (($signed(sub_ln575_fu_595_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_1_fu_735_p2 = ((sub_ln575_1_fu_703_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_627_p2 = ((sub_ln575_fu_595_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_1_fu_902_p2 = ((select_ln581_1_reg_1299 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_755_p2 = ((select_ln581_reg_1263 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_1_fu_907_p2 = ((select_ln581_1_reg_1299 < 12'd40) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_760_p2 = ((select_ln581_reg_1263 < 12'd40) ? 1'b1 : 1'b0);

assign input_k_0_V_address1 = sext_ln203_fu_413_p1;

assign input_q_0_V_address1 = sext_ln203_fu_413_p1;

assign mul_ln1192_1_fu_1108_p0 = rotated_k_0_V_load_reg_1399;

assign mul_ln1192_1_fu_1108_p1 = sext_ln1118_4_fu_1080_p1;

assign mul_ln1192_1_fu_1108_p2 = ($signed(mul_ln1192_1_fu_1108_p0) * $signed(mul_ln1192_1_fu_1108_p1));

assign mul_ln1192_fu_1089_p0 = rotated_q_0_V_load_reg_1394;

assign mul_ln1192_fu_1089_p1 = sext_ln1118_4_fu_1080_p1;

assign mul_ln1192_fu_1089_p2 = ($signed(mul_ln1192_fu_1089_p0) * $signed(mul_ln1192_fu_1089_p1));

assign mul_ln703_1_fu_1102_p0 = reg_346;

assign mul_ln703_1_fu_1102_p1 = sext_ln1118_2_fu_1074_p1;

assign mul_ln703_1_fu_1102_p2 = ($signed(mul_ln703_1_fu_1102_p0) * $signed(mul_ln703_1_fu_1102_p1));

assign mul_ln703_fu_1083_p0 = reg_342;

assign mul_ln703_fu_1083_p1 = sext_ln1118_2_fu_1074_p1;

assign mul_ln703_fu_1083_p2 = ($signed(mul_ln703_fu_1083_p0) * $signed(mul_ln703_fu_1083_p1));

assign or_ln581_1_fu_996_p2 = (or_ln582_1_fu_963_p2 | icmp_ln581_1_reg_1293);

assign or_ln581_fu_849_p2 = (or_ln582_fu_816_p2 | icmp_ln581_reg_1257);

assign or_ln582_1_fu_963_p2 = (icmp_ln582_1_reg_1306 | icmp_ln571_1_reg_1287);

assign or_ln582_fu_816_p2 = (icmp_ln582_reg_1270 | icmp_ln571_reg_1251);

assign or_ln603_5_fu_887_p2 = (and_ln585_fu_837_p2 | and_ln582_fu_811_p2);

assign or_ln603_6_fu_893_p2 = (or_ln603_fu_874_p2 | or_ln603_5_fu_887_p2);

assign or_ln603_7_fu_1021_p2 = (and_ln603_1_fu_1007_p2 | and_ln585_5_fu_990_p2);

assign or_ln603_8_fu_1034_p2 = (and_ln585_4_fu_984_p2 | and_ln582_1_fu_958_p2);

assign or_ln603_9_fu_1040_p2 = (or_ln603_8_fu_1034_p2 | or_ln603_7_fu_1021_p2);

assign or_ln603_fu_874_p2 = (and_ln603_fu_860_p2 | and_ln585_3_fu_843_p2);

assign output_k_0_V_address0 = sext_ln1116_reg_1318;

assign output_k_0_V_d0 = {{add_ln1192_1_fu_1129_p2[55:16]}};

assign output_q_0_V_address0 = sext_ln1116_reg_1318;

assign output_q_0_V_d0 = {{add_ln1192_fu_1114_p2[55:16]}};

assign p_Result_7_fu_653_p4 = {{bitcast_ln696_2_fu_637_p1[62:52]}};

assign p_Result_s_fu_545_p4 = {{bitcast_ln696_fu_529_p1[62:52]}};

assign select_ln570_1_fu_689_p3 = ((tmp_90_fu_645_p3[0:0] === 1'b1) ? sub_ln461_1_fu_683_p2 : zext_ln569_1_fu_679_p1);

assign select_ln570_fu_581_p3 = ((tmp_88_fu_537_p3[0:0] === 1'b1) ? sub_ln461_fu_575_p2 : zext_ln569_fu_571_p1);

assign select_ln581_1_fu_727_p3 = ((icmp_ln581_1_fu_709_p2[0:0] === 1'b1) ? add_ln581_1_fu_715_p2 : sub_ln581_1_fu_721_p2);

assign select_ln581_fu_619_p3 = ((icmp_ln581_fu_601_p2[0:0] === 1'b1) ? add_ln581_fu_607_p2 : sub_ln581_fu_613_p2);

assign select_ln588_1_fu_936_p3 = ((tmp_91_fu_928_p3[0:0] === 1'b1) ? 40'd1099511627775 : 40'd0);

assign select_ln588_fu_789_p3 = ((tmp_89_fu_781_p3[0:0] === 1'b1) ? 40'd1099511627775 : 40'd0);

assign select_ln603_10_fu_1013_p3 = ((and_ln603_1_fu_1007_p2[0:0] === 1'b1) ? shl_ln604_1_fu_948_p2 : trunc_ln586_1_fu_921_p1);

assign select_ln603_11_fu_1027_p3 = ((and_ln585_4_fu_984_p2[0:0] === 1'b1) ? select_ln588_1_fu_936_p3 : trunc_ln583_1_reg_1312);

assign select_ln603_12_fu_1058_p3 = ((or_ln603_7_reg_1369[0:0] === 1'b1) ? select_ln603_10_reg_1364 : select_ln603_11_reg_1374);

assign select_ln603_13_fu_1063_p3 = ((or_ln603_9_reg_1379[0:0] === 1'b1) ? select_ln603_12_fu_1058_p3 : 40'd0);

assign select_ln603_7_fu_880_p3 = ((and_ln585_fu_837_p2[0:0] === 1'b1) ? select_ln588_fu_789_p3 : trunc_ln583_reg_1276);

assign select_ln603_8_fu_1046_p3 = ((or_ln603_reg_1349[0:0] === 1'b1) ? select_ln603_reg_1344 : select_ln603_7_reg_1354);

assign select_ln603_9_fu_1051_p3 = ((or_ln603_6_reg_1359[0:0] === 1'b1) ? select_ln603_8_fu_1046_p3 : 40'd0);

assign select_ln603_fu_866_p3 = ((and_ln603_fu_860_p2[0:0] === 1'b1) ? shl_ln604_fu_801_p2 : trunc_ln586_fu_774_p1);

assign sext_ln1116_fu_745_p1 = $signed(add_ln1116_reg_1229);

assign sext_ln1118_2_fu_1074_p1 = $signed(select_ln603_9_reg_1384);

assign sext_ln1118_4_fu_1080_p1 = $signed(select_ln603_13_reg_1389);

assign sext_ln1265_fu_434_p1 = $signed(add_ln1265_fu_429_p2);

assign sext_ln203_fu_413_p1 = $signed(add_ln203_6_fu_408_p2);

assign sext_ln581_1_fu_899_p1 = select_ln581_1_reg_1299;

assign sext_ln581_fu_752_p1 = select_ln581_reg_1263;

assign shl_ln604_1_fu_948_p2 = trunc_ln583_1_reg_1312 << zext_ln604_1_fu_944_p1;

assign shl_ln604_fu_801_p2 = trunc_ln583_reg_1276 << zext_ln604_fu_797_p1;

assign sin_tab_address0 = zext_ln217_2_fu_518_p1;

assign sub_ln1116_fu_486_p2 = (tmp_71_fu_466_p3 - zext_ln1116_fu_482_p1);

assign sub_ln1265_fu_382_p2 = (tmp_69_fu_362_p3 - zext_ln1265_fu_378_p1);

assign sub_ln461_1_fu_683_p2 = (54'd0 - zext_ln569_1_fu_679_p1);

assign sub_ln461_fu_575_p2 = (54'd0 - zext_ln569_fu_571_p1);

assign sub_ln575_1_fu_703_p2 = (12'd1075 - zext_ln461_1_fu_663_p1);

assign sub_ln575_fu_595_p2 = (12'd1075 - zext_ln461_fu_555_p1);

assign sub_ln581_1_fu_721_p2 = (12'd16 - sub_ln575_1_fu_703_p2);

assign sub_ln581_fu_613_p2 = (12'd16 - sub_ln575_fu_595_p2);

assign sub_ln703_34_fu_447_p2 = (40'd0 - reg_346);

assign sub_ln703_fu_440_p2 = (40'd0 - reg_342);

assign tmp_22_fu_563_p3 = {{1'd1}, {trunc_ln565_fu_559_p1}};

assign tmp_23_fu_671_p3 = {{1'd1}, {trunc_ln565_1_fu_667_p1}};

assign tmp_69_fu_362_p3 = {{i_0_reg_290}, {7'd0}};

assign tmp_70_fu_370_p3 = {{i_0_reg_290}, {5'd0}};

assign tmp_71_fu_466_p3 = {{i14_0_reg_312}, {7'd0}};

assign tmp_72_fu_474_p3 = {{i14_0_reg_312}, {5'd0}};

assign tmp_88_fu_537_p3 = bitcast_ln696_fu_529_p1[32'd63];

assign tmp_89_fu_781_p3 = bitcast_ln696_1_fu_778_p1[32'd31];

assign tmp_90_fu_645_p3 = bitcast_ln696_2_fu_637_p1[32'd63];

assign tmp_91_fu_928_p3 = bitcast_ln696_3_fu_925_p1[32'd31];

assign trunc_ln557_1_fu_641_p1 = bitcast_ln696_2_fu_637_p1[62:0];

assign trunc_ln557_fu_533_p1 = bitcast_ln696_fu_529_p1[62:0];

assign trunc_ln565_1_fu_667_p1 = bitcast_ln696_2_fu_637_p1[51:0];

assign trunc_ln565_fu_559_p1 = bitcast_ln696_fu_529_p1[51:0];

assign trunc_ln583_1_fu_741_p1 = select_ln570_1_fu_689_p3[39:0];

assign trunc_ln583_fu_633_p1 = select_ln570_fu_581_p3[39:0];

assign trunc_ln586_1_fu_921_p1 = ashr_ln586_1_fu_916_p2[39:0];

assign trunc_ln586_fu_774_p1 = ashr_ln586_fu_769_p2[39:0];

assign xor_ln571_1_fu_953_p2 = (icmp_ln571_1_reg_1287 ^ 1'd1);

assign xor_ln571_fu_806_p2 = (icmp_ln571_reg_1251 ^ 1'd1);

assign xor_ln581_1_fu_1001_p2 = (or_ln581_1_fu_996_p2 ^ 1'd1);

assign xor_ln581_fu_854_p2 = (or_ln581_fu_849_p2 ^ 1'd1);

assign xor_ln582_1_fu_967_p2 = (or_ln582_1_fu_963_p2 ^ 1'd1);

assign xor_ln582_fu_820_p2 = (or_ln582_fu_816_p2 ^ 1'd1);

assign xor_ln585_1_fu_978_p2 = (icmp_ln585_1_fu_902_p2 ^ 1'd1);

assign xor_ln585_fu_831_p2 = (icmp_ln585_fu_755_p2 ^ 1'd1);

assign zext_ln1116_fu_482_p1 = tmp_72_fu_474_p3;

assign zext_ln1265_3_fu_425_p1 = add_ln204_fu_419_p2;

assign zext_ln1265_fu_378_p1 = tmp_70_fu_370_p3;

assign zext_ln203_13_fu_404_p1 = k_0_0_reg_301;

assign zext_ln203_fu_388_p1 = k_0_0_reg_301;

assign zext_ln217_1_fu_508_p1 = k16_0_0_reg_323;

assign zext_ln217_2_fu_518_p1 = add_ln217_fu_512_p2;

assign zext_ln217_fu_504_p1 = k16_0_0_reg_323;

assign zext_ln461_1_fu_663_p1 = p_Result_7_fu_653_p4;

assign zext_ln461_fu_555_p1 = p_Result_s_fu_545_p4;

assign zext_ln569_1_fu_679_p1 = tmp_23_fu_671_p3;

assign zext_ln569_fu_571_p1 = tmp_22_fu_563_p3;

assign zext_ln586_1_fu_912_p1 = $unsigned(sext_ln581_1_fu_899_p1);

assign zext_ln586_fu_765_p1 = $unsigned(sext_ln581_fu_752_p1);

assign zext_ln604_1_fu_944_p1 = $unsigned(sext_ln581_1_fu_899_p1);

assign zext_ln604_fu_797_p1 = $unsigned(sext_ln581_fu_752_p1);

always @ (posedge ap_clk) begin
    sub_ln1265_reg_1152[4:0] <= 5'b00000;
    sub_ln1116_reg_1206[4:0] <= 5'b00000;
end

endmodule //apply_rotary_pos_emb
