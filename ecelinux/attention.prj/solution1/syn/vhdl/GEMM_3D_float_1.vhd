-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GEMM_3D_float_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_0_V_ce0 : OUT STD_LOGIC;
    input_2_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_0_V_ce1 : OUT STD_LOGIC;
    input_2_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_1_V_ce0 : OUT STD_LOGIC;
    input_2_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_1_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_1_V_ce1 : OUT STD_LOGIC;
    input_2_1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_2_V_ce0 : OUT STD_LOGIC;
    input_2_2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_2_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_2_V_ce1 : OUT STD_LOGIC;
    input_2_2_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_3_V_ce0 : OUT STD_LOGIC;
    input_2_3_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_3_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_2_3_V_ce1 : OUT STD_LOGIC;
    input_2_3_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GEMM_3D_float_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_375 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_0_reg_386 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_397_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln267_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln267_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_1035_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln267_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln267_reg_1039 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln270_fu_438_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln270_reg_1044 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln270_1_fu_446_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln270_1_reg_1049 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1117_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1117_reg_1054 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln270_fu_494_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln270_reg_1099 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln270_reg_1099_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_fu_498_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_reg_1103 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_reg_1103_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_502_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_512_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_522_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1119_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_545_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln269_fu_558_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln269_reg_1149 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln1192_fu_582_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal mul_ln1192_reg_1154 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_24_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1192_1_fu_617_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal mul_ln1192_1_reg_1164 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_27_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_368_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_379_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_k_0_0_phi_fu_390_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1117_2_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_3_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_4_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal output_V823_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_V822_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V821_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V8_1_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V12_1_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V720_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V719_1_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V13_1_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V718_1_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V7_1_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V14_1_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V617_1_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V616_1_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V6_1_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V615_1_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln269_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_426_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_458_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1117_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1117_fu_480_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1117_1_fu_532_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1118_fu_570_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1192_fu_582_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1192_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_570_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal shl_ln_fu_598_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal mul_ln1192_1_fu_617_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1192_1_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_fu_605_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal shl_ln728_6_fu_633_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln1192_2_fu_640_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component dut_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dut_mux_42_32_1_1_U165 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => input_2_0_V_q0,
        din1 => input_2_1_V_q0,
        din2 => input_2_2_V_q0,
        din3 => input_2_3_V_q0,
        din4 => trunc_ln203_reg_1103,
        dout => grp_fu_397_p6);

    dut_mux_42_32_1_1_U166 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => trunc_ln270_fu_494_p1,
        dout => tmp_20_fu_502_p6);

    dut_mux_42_32_1_1_U167 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read4,
        din1 => p_read5,
        din2 => p_read6,
        din3 => p_read7,
        din4 => trunc_ln270_fu_494_p1,
        dout => tmp_22_fu_512_p6);

    dut_mux_42_32_1_1_U168 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read8,
        din1 => p_read9,
        din2 => p_read10,
        din3 => p_read11,
        din4 => trunc_ln270_fu_494_p1,
        dout => tmp_25_fu_522_p6);

    dut_mux_42_32_1_1_U169 : component dut_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => input_2_0_V_q1,
        din1 => input_2_1_V_q1,
        din2 => input_2_2_V_q1,
        din3 => input_2_3_V_q1,
        din4 => trunc_ln203_reg_1103,
        dout => tmp_23_fu_545_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then 
                i_0_reg_375 <= select_ln270_1_reg_1049;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_375 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then 
                indvar_flatten_reg_364 <= add_ln267_reg_1039;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_364 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then 
                k_0_0_reg_386 <= add_ln269_reg_1149;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_0_reg_386 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln267_reg_1039 <= add_ln267_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln267_reg_1035 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln269_reg_1149 <= add_ln269_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln267_reg_1035 <= icmp_ln267_fu_414_p2;
                icmp_ln267_reg_1035_pp0_iter1_reg <= icmp_ln267_reg_1035;
                tmp_25_reg_1119_pp0_iter1_reg <= tmp_25_reg_1119;
                trunc_ln203_reg_1103_pp0_iter1_reg <= trunc_ln203_reg_1103;
                trunc_ln270_reg_1099_pp0_iter1_reg <= trunc_ln270_reg_1099;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln267_reg_1035_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln1192_1_reg_1164 <= mul_ln1192_1_fu_617_p2;
                tmp_27_reg_1169 <= add_ln1192_fu_605_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then
                mul_ln1192_reg_1154 <= mul_ln1192_fu_582_p2;
                tmp_24_reg_1159 <= mul_ln1118_fu_570_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_0) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V12_1_fu_116 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_0) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V13_1_fu_128 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_0) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V14_1_fu_140 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_1) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V615_1_fu_156 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_1) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V616_1_fu_148 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_1) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V617_1_fu_144 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_1) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V6_1_fu_152 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_2) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V718_1_fu_132 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_2) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V719_1_fu_124 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_2) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V720_1_fu_120 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_2) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V7_1_fu_136 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_3) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V821_1_fu_108 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_3) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V822_1_fu_100 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_3) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V823_1_fu_96 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_3) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V8_1_fu_112 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln203_reg_1103_pp0_iter1_reg = ap_const_lv2_0) and (trunc_ln270_reg_1099_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V_1_fu_104 <= add_ln1192_2_fu_640_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_reg_1035 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln267_reg_1035 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_410 <= grp_fu_397_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_fu_414_p2 = ap_const_lv1_0))) then
                select_ln270_1_reg_1049 <= select_ln270_1_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_fu_414_p2 = ap_const_lv1_0))) then
                select_ln270_reg_1044 <= select_ln270_fu_438_p3;
                sub_ln1117_reg_1054 <= sub_ln1117_fu_466_p2;
                tmp_20_reg_1109 <= tmp_20_fu_502_p6;
                tmp_22_reg_1114 <= tmp_22_fu_512_p6;
                tmp_25_reg_1119 <= tmp_25_fu_522_p6;
                trunc_ln203_reg_1103 <= trunc_ln203_fu_498_p1;
                trunc_ln270_reg_1099 <= trunc_ln270_fu_494_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln267_reg_1035 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_23_reg_1144 <= tmp_23_fu_545_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln267_fu_414_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln267_fu_414_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln267_fu_414_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1117_1_fu_532_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(sub_ln1117_reg_1054));
    add_ln1117_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(sub_ln1117_fu_466_p2));
    add_ln1192_2_fu_640_p2 <= std_logic_vector(unsigned(shl_ln728_6_fu_633_p3) + unsigned(mul_ln1192_1_reg_1164));
    add_ln1192_fu_605_p2 <= std_logic_vector(unsigned(shl_ln_fu_598_p3) + unsigned(mul_ln1192_reg_1154));
    add_ln267_fu_420_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_368_p4) + unsigned(ap_const_lv5_1));
    add_ln269_fu_558_p2 <= std_logic_vector(unsigned(select_ln270_reg_1044) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln267_fu_414_p2)
    begin
        if ((icmp_ln267_fu_414_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_379_p4_assign_proc : process(i_0_reg_375, icmp_ln267_reg_1035, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln270_1_reg_1049, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_379_p4 <= select_ln270_1_reg_1049;
        else 
            ap_phi_mux_i_0_phi_fu_379_p4 <= i_0_reg_375;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_368_p4_assign_proc : process(indvar_flatten_reg_364, icmp_ln267_reg_1035, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln267_reg_1039, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_368_p4 <= add_ln267_reg_1039;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_368_p4 <= indvar_flatten_reg_364;
        end if; 
    end process;


    ap_phi_mux_k_0_0_phi_fu_390_p4_assign_proc : process(k_0_0_reg_386, icmp_ln267_reg_1035, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln269_reg_1149, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln267_reg_1035 = ap_const_lv1_0))) then 
            ap_phi_mux_k_0_0_phi_fu_390_p4 <= add_ln269_reg_1149;
        else 
            ap_phi_mux_k_0_0_phi_fu_390_p4 <= k_0_0_reg_386;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= output_V_1_fu_104;
    ap_return_1 <= output_V12_1_fu_116;
    ap_return_10 <= output_V719_1_fu_124;
    ap_return_11 <= output_V720_1_fu_120;
    ap_return_12 <= output_V8_1_fu_112;
    ap_return_13 <= output_V821_1_fu_108;
    ap_return_14 <= output_V822_1_fu_100;
    ap_return_15 <= output_V823_1_fu_96;
    ap_return_2 <= output_V13_1_fu_128;
    ap_return_3 <= output_V14_1_fu_140;
    ap_return_4 <= output_V6_1_fu_152;
    ap_return_5 <= output_V615_1_fu_156;
    ap_return_6 <= output_V616_1_fu_148;
    ap_return_7 <= output_V617_1_fu_144;
    ap_return_8 <= output_V7_1_fu_136;
    ap_return_9 <= output_V718_1_fu_132;
    i_fu_426_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_i_0_phi_fu_379_p4));
    icmp_ln267_fu_414_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_368_p4 = ap_const_lv5_10) else "0";
    icmp_ln269_fu_432_p2 <= "1" when (ap_phi_mux_k_0_0_phi_fu_390_p4 = ap_const_lv3_4) else "0";

    input_2_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln1117_2_fu_472_p1, sext_ln1117_4_fu_537_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_0_V_address0 <= sext_ln1117_4_fu_537_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_0_V_address0 <= sext_ln1117_2_fu_472_p1(4 - 1 downto 0);
            else 
                input_2_0_V_address0 <= "XXXX";
            end if;
        else 
            input_2_0_V_address0 <= "XXXX";
        end if; 
    end process;

    input_2_0_V_address1 <= sext_ln1117_3_fu_486_p1(4 - 1 downto 0);

    input_2_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_0_V_ce0 <= ap_const_logic_1;
        else 
            input_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_0_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_0_V_ce1 <= ap_const_logic_1;
        else 
            input_2_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_1_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln1117_2_fu_472_p1, sext_ln1117_4_fu_537_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_1_V_address0 <= sext_ln1117_4_fu_537_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_1_V_address0 <= sext_ln1117_2_fu_472_p1(4 - 1 downto 0);
            else 
                input_2_1_V_address0 <= "XXXX";
            end if;
        else 
            input_2_1_V_address0 <= "XXXX";
        end if; 
    end process;

    input_2_1_V_address1 <= sext_ln1117_3_fu_486_p1(4 - 1 downto 0);

    input_2_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_1_V_ce0 <= ap_const_logic_1;
        else 
            input_2_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_1_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_1_V_ce1 <= ap_const_logic_1;
        else 
            input_2_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_2_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln1117_2_fu_472_p1, sext_ln1117_4_fu_537_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_2_V_address0 <= sext_ln1117_4_fu_537_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_2_V_address0 <= sext_ln1117_2_fu_472_p1(4 - 1 downto 0);
            else 
                input_2_2_V_address0 <= "XXXX";
            end if;
        else 
            input_2_2_V_address0 <= "XXXX";
        end if; 
    end process;

    input_2_2_V_address1 <= sext_ln1117_3_fu_486_p1(4 - 1 downto 0);

    input_2_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_2_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_2_V_ce1 <= ap_const_logic_1;
        else 
            input_2_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_3_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln1117_2_fu_472_p1, sext_ln1117_4_fu_537_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_3_V_address0 <= sext_ln1117_4_fu_537_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_3_V_address0 <= sext_ln1117_2_fu_472_p1(4 - 1 downto 0);
            else 
                input_2_3_V_address0 <= "XXXX";
            end if;
        else 
            input_2_3_V_address0 <= "XXXX";
        end if; 
    end process;

    input_2_3_V_address1 <= sext_ln1117_3_fu_486_p1(4 - 1 downto 0);

    input_2_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_3_V_ce0 <= ap_const_logic_1;
        else 
            input_2_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_3_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_3_V_ce1 <= ap_const_logic_1;
        else 
            input_2_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_fu_570_p0 <= tmp_20_reg_1109;
    mul_ln1118_fu_570_p1 <= reg_410;
    mul_ln1118_fu_570_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_570_p0) * signed(mul_ln1118_fu_570_p1))), 54));
    mul_ln1192_1_fu_617_p0 <= tmp_25_reg_1119_pp0_iter1_reg;
    mul_ln1192_1_fu_617_p1 <= reg_410;
    mul_ln1192_1_fu_617_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_1_fu_617_p0) * signed(mul_ln1192_1_fu_617_p1))), 54));
    mul_ln1192_fu_582_p0 <= tmp_22_reg_1114;
    mul_ln1192_fu_582_p1 <= tmp_23_reg_1144;
    mul_ln1192_fu_582_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_582_p0) * signed(mul_ln1192_fu_582_p1))), 54));
    select_ln270_1_fu_446_p3 <= 
        i_fu_426_p2 when (icmp_ln269_fu_432_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_379_p4;
    select_ln270_fu_438_p3 <= 
        ap_const_lv3_0 when (icmp_ln269_fu_432_p2(0) = '1') else 
        ap_phi_mux_k_0_0_phi_fu_390_p4;
        sext_ln1117_2_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1117_fu_466_p2),64));

        sext_ln1117_3_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_fu_480_p2),64));

        sext_ln1117_4_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_1_fu_532_p2),64));

    shl_ln728_6_fu_633_p3 <= (tmp_27_reg_1169 & ap_const_lv22_0);
    shl_ln_fu_598_p3 <= (tmp_24_reg_1159 & ap_const_lv22_0);
    sub_ln1117_fu_466_p2 <= std_logic_vector(unsigned(tmp_fu_458_p3) - unsigned(zext_ln1117_fu_454_p1));
    tmp_fu_458_p3 <= (select_ln270_1_fu_446_p3 & ap_const_lv2_0);
    trunc_ln203_fu_498_p1 <= select_ln270_fu_438_p3(2 - 1 downto 0);
    trunc_ln270_fu_494_p1 <= select_ln270_1_fu_446_p3(2 - 1 downto 0);
    zext_ln1117_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln270_1_fu_446_p3),5));
end behav;
