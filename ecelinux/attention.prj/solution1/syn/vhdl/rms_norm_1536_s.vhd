-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rms_norm_1536_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_we0 : OUT STD_LOGIC;
    input_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    input_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of rms_norm_1536_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv81_15555555556 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000010101010101010101010101010101010101010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv81_0 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv33_100000000 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_28 : STD_LOGIC_VECTOR (11 downto 0) := "000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv40_FFFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_170 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal i_fu_180_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_615 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln88_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1192_fu_205_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_reg_630 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (80 downto 0);
    signal mul_ln1148_reg_640 : STD_LOGIC_VECTOR (80 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_73_reg_645 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln1148_1_fu_280_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln1148_1_reg_651 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sqrt_fixed_42_26_s_fu_161_ap_return : STD_LOGIC_VECTOR (28 downto 0);
    signal agg_result_V_i_reg_656 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal zext_ln1118_fu_296_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal zext_ln1118_reg_666 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i_1_fu_306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_674 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln93_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_V_addr_4_reg_684 : STD_LOGIC_VECTOR (10 downto 0);
    signal weight_load_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal man_V_2_fu_370_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_695 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln571_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_408_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_712 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_422_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln583_reg_725 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_fu_540_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_reg_731 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal or_ln603_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_554_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_1_reg_741 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln603_2_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_3_fu_578_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_3_reg_751 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal mul_ln1118_fu_588_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal mul_ln1118_reg_756 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal trunc_ln5_reg_766 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal p_Val2_s_reg_127 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_0_reg_139 : STD_LOGIC_VECTOR (10 downto 0);
    signal i1_0_reg_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln89_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln1192_fu_205_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_1_fu_201_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_fu_205_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal lhs_V_fu_211_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_219_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal sub_ln1148_fu_244_p2 : STD_LOGIC_VECTOR (80 downto 0);
    signal tmp_71_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_257_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln1148_fu_267_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln1227_fu_274_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_334_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_348_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_352_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_4_fu_360_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_364_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_322_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_344_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_384_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_402_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_439_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_443_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln604_fu_471_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln571_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_475_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln586_fu_448_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln585_1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_463_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln582_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_573_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_fu_588_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1118_fu_588_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_290_ap_start : STD_LOGIC;
    signal grp_fu_290_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_290_p10 : STD_LOGIC_VECTOR (32 downto 0);

    component sqrt_fixed_42_26_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dut_fpext_32ns_64bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_mul_40s_42ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (39 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (80 downto 0) );
    end component;


    component dut_udiv_33s_29nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component dut_mul_72s_40s_7eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (71 downto 0) );
    end component;



begin
    grp_sqrt_fixed_42_26_s_fu_161 : component sqrt_fixed_42_26_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x_V => select_ln1148_1_reg_651,
        ap_return => grp_sqrt_fixed_42_26_s_fu_161_ap_return);

    dut_fpext_32ns_64bkb_U2 : component dut_fpext_32ns_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p1);

    dut_mul_40s_42ns_cud_U3 : component dut_mul_40s_42ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 40,
        din1_WIDTH => 42,
        dout_WIDTH => 81)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_s_reg_127,
        din1 => grp_fu_195_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);

    dut_udiv_33s_29nsdEe_U4 : component dut_udiv_33s_29nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 37,
        din0_WIDTH => 33,
        din1_WIDTH => 29,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_290_ap_start,
        done => grp_fu_290_ap_done,
        din0 => ap_const_lv33_100000000,
        din1 => grp_fu_290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    dut_mul_72s_40s_7eOg_U5 : component dut_mul_72s_40s_7eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 72,
        din1_WIDTH => 40,
        dout_WIDTH => 72)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln1118_reg_756,
        din1 => reg_170,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                i1_0_reg_150 <= i_1_reg_674;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                i1_0_reg_150 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_139 <= i_reg_615;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_139 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_s_reg_127 <= ret_V_fu_219_p2(55 downto 16);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_127 <= ap_const_lv40_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                agg_result_V_i_reg_656 <= grp_sqrt_fixed_42_26_s_fu_161_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                i_1_reg_674 <= i_1_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_615 <= i_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                icmp_ln571_reg_700 <= icmp_ln571_fu_378_p2;
                icmp_ln581_reg_706 <= icmp_ln581_fu_390_p2;
                icmp_ln582_reg_719 <= icmp_ln582_fu_416_p2;
                man_V_2_reg_695 <= man_V_2_fu_370_p3;
                sh_amt_reg_712 <= sh_amt_fu_408_p3;
                trunc_ln583_reg_725 <= trunc_ln583_fu_422_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (icmp_ln93_fu_300_p2 = ap_const_lv1_0))) then
                input_0_V_addr_4_reg_684 <= zext_ln94_fu_312_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                mul_ln1118_reg_756 <= mul_ln1118_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1148_reg_640 <= grp_fu_195_p2;
                tmp_73_reg_645 <= grp_fu_195_p2(80 downto 51);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln1192_reg_630 <= mul_ln1192_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                or_ln603_2_reg_746 <= or_ln603_2_fu_567_p2;
                or_ln603_reg_736 <= or_ln603_fu_548_p2;
                select_ln603_1_reg_741 <= select_ln603_1_fu_554_p3;
                select_ln603_reg_731 <= select_ln603_fu_540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_170 <= input_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                select_ln1148_1_reg_651 <= select_ln1148_1_fu_280_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                select_ln603_3_reg_751 <= select_ln603_3_fu_578_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                trunc_ln5_reg_766 <= grp_fu_597_p2(71 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                weight_load_reg_689 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                    zext_ln1118_reg_666(32 downto 0) <= zext_ln1118_fu_296_p1(32 downto 0);
            end if;
        end if;
    end process;
    zext_ln1118_reg_666(71 downto 33) <= "000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln88_fu_174_p2, ap_CS_fsm_state64, icmp_ln93_fu_300_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln88_fu_174_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (icmp_ln93_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_344_p1));
    add_ln581_fu_396_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_384_p2));
    and_ln581_fu_500_p2 <= (xor_ln582_fu_494_p2 and icmp_ln581_reg_706);
    and_ln582_fu_485_p2 <= (xor_ln571_fu_480_p2 and icmp_ln582_reg_719);
    and_ln585_1_fu_517_p2 <= (icmp_ln585_fu_429_p2 and and_ln581_fu_500_p2);
    and_ln585_fu_511_p2 <= (xor_ln585_fu_505_p2 and and_ln581_fu_500_p2);
    and_ln603_fu_534_p2 <= (xor_ln581_fu_528_p2 and icmp_ln603_fu_434_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state64, icmp_ln93_fu_300_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (icmp_ln93_fu_300_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state64, icmp_ln93_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) and (icmp_ln93_fu_300_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_443_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_695),to_integer(unsigned('0' & zext_ln586_fu_439_p1(31-1 downto 0)))));
    bitcast_ln696_fu_452_p1 <= weight_load_reg_689;
    exp_tmp_V_fu_334_p4 <= ireg_V_fu_318_p1(62 downto 52);
    grp_fu_195_p1 <= ap_const_lv81_15555555556(42 - 1 downto 0);

    grp_fu_290_ap_start_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_290_ap_start <= ap_const_logic_1;
        else 
            grp_fu_290_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_290_p1 <= grp_fu_290_p10(29 - 1 downto 0);
    grp_fu_290_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(agg_result_V_i_reg_656),33));
    i_1_fu_306_p2 <= std_logic_vector(unsigned(i1_0_reg_150) + unsigned(ap_const_lv11_1));
    i_fu_180_p2 <= std_logic_vector(unsigned(i_0_reg_139) + unsigned(ap_const_lv11_1));
    icmp_ln571_fu_378_p2 <= "1" when (trunc_ln556_fu_322_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_390_p2 <= "1" when (signed(F2_fu_384_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln582_fu_416_p2 <= "1" when (F2_fu_384_p2 = ap_const_lv12_10) else "0";
    icmp_ln585_fu_429_p2 <= "1" when (unsigned(sh_amt_reg_712) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_434_p2 <= "1" when (unsigned(sh_amt_reg_712) < unsigned(ap_const_lv12_28)) else "0";
    icmp_ln88_fu_174_p2 <= "1" when (i_0_reg_139 = ap_const_lv11_600) else "0";
    icmp_ln93_fu_300_p2 <= "1" when (i1_0_reg_150 = ap_const_lv11_600) else "0";

    input_0_V_address0_assign_proc : process(ap_CS_fsm_state2, input_0_V_addr_4_reg_684, ap_CS_fsm_state68, ap_CS_fsm_state75, zext_ln89_fu_186_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            input_0_V_address0 <= input_0_V_addr_4_reg_684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_V_address0 <= zext_ln89_fu_186_p1(11 - 1 downto 0);
        else 
            input_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input_0_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state68, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_0_V_d0 <= trunc_ln5_reg_766;

    input_0_V_we0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            input_0_V_we0 <= ap_const_logic_1;
        else 
            input_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_318_p1 <= grp_fu_166_p1;
    lhs_V_fu_211_p3 <= (p_Val2_s_reg_127 & ap_const_lv16_0);
    man_V_1_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_4_fu_360_p1));
    man_V_2_fu_370_p3 <= 
        man_V_1_fu_364_p2 when (p_Result_s_fu_326_p3(0) = '1') else 
        p_Result_4_fu_360_p1;
    mul_ln1118_fu_588_p0 <= zext_ln1118_reg_666(33 - 1 downto 0);
    mul_ln1118_fu_588_p1 <= select_ln603_3_reg_751;
    mul_ln1118_fu_588_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1118_fu_588_p0) * signed(mul_ln1118_fu_588_p1))), 72));
    mul_ln1192_fu_205_p0 <= sext_ln1118_1_fu_201_p1(40 - 1 downto 0);
    mul_ln1192_fu_205_p1 <= sext_ln1118_1_fu_201_p1(40 - 1 downto 0);
    mul_ln1192_fu_205_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_205_p0) * signed(mul_ln1192_fu_205_p1))), 56));
    or_ln581_fu_523_p2 <= (or_ln582_fu_490_p2 or icmp_ln581_reg_706);
    or_ln582_fu_490_p2 <= (icmp_ln582_reg_719 or icmp_ln571_reg_700);
    or_ln603_1_fu_561_p2 <= (and_ln585_fu_511_p2 or and_ln582_fu_485_p2);
    or_ln603_2_fu_567_p2 <= (or_ln603_fu_548_p2 or or_ln603_1_fu_561_p2);
    or_ln603_fu_548_p2 <= (and_ln603_fu_534_p2 or and_ln585_1_fu_517_p2);
    p_Result_4_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_352_p3),54));
    p_Result_s_fu_326_p3 <= ireg_V_fu_318_p1(63 downto 63);
    ret_V_fu_219_p2 <= std_logic_vector(unsigned(mul_ln1192_reg_630) + unsigned(lhs_V_fu_211_p3));
    select_ln1148_1_fu_280_p3 <= 
        sub_ln1227_fu_274_p2 when (tmp_71_fu_249_p3(0) = '1') else 
        tmp_73_reg_645;
    select_ln1148_fu_267_p3 <= 
        tmp_72_fu_257_p4 when (tmp_71_fu_249_p3(0) = '1') else 
        tmp_73_reg_645;
    select_ln588_fu_463_p3 <= 
        ap_const_lv40_FFFFFFFFFF when (tmp_75_fu_455_p3(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_1_fu_554_p3 <= 
        select_ln588_fu_463_p3 when (and_ln585_fu_511_p2(0) = '1') else 
        trunc_ln583_reg_725;
    select_ln603_2_fu_573_p3 <= 
        select_ln603_reg_731 when (or_ln603_reg_736(0) = '1') else 
        select_ln603_1_reg_741;
    select_ln603_3_fu_578_p3 <= 
        select_ln603_2_fu_573_p3 when (or_ln603_2_reg_746(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_fu_540_p3 <= 
        shl_ln604_fu_475_p2 when (and_ln603_fu_534_p2(0) = '1') else 
        trunc_ln586_fu_448_p1;
        sext_ln1118_1_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_170),56));

        sext_ln581_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_712),32));

    sh_amt_fu_408_p3 <= 
        add_ln581_fu_396_p2 when (icmp_ln581_fu_390_p2(0) = '1') else 
        sub_ln581_fu_402_p2;
    shl_ln604_fu_475_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_725),to_integer(unsigned('0' & zext_ln604_fu_471_p1(31-1 downto 0)))));
    sub_ln1148_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv81_0) - unsigned(mul_ln1148_reg_640));
    sub_ln1227_fu_274_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(select_ln1148_fu_267_p3));
    sub_ln581_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_384_p2));
    tmp_71_fu_249_p3 <= p_Val2_s_reg_127(39 downto 39);
    tmp_72_fu_257_p4 <= sub_ln1148_fu_244_p2(80 downto 51);
    tmp_75_fu_455_p3 <= bitcast_ln696_fu_452_p1(31 downto 31);
    tmp_fu_352_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_348_p1);
    trunc_ln556_fu_322_p1 <= ireg_V_fu_318_p1(63 - 1 downto 0);
    trunc_ln565_fu_348_p1 <= ireg_V_fu_318_p1(52 - 1 downto 0);
    trunc_ln583_fu_422_p1 <= man_V_2_fu_370_p3(40 - 1 downto 0);
    trunc_ln586_fu_448_p1 <= ashr_ln586_fu_443_p2(40 - 1 downto 0);
    weight_address0 <= zext_ln94_fu_312_p1(11 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_480_p2 <= (icmp_ln571_reg_700 xor ap_const_lv1_1);
    xor_ln581_fu_528_p2 <= (or_ln581_fu_523_p2 xor ap_const_lv1_1);
    xor_ln582_fu_494_p2 <= (or_ln582_fu_490_p2 xor ap_const_lv1_1);
    xor_ln585_fu_505_p2 <= (icmp_ln585_fu_429_p2 xor ap_const_lv1_1);
    zext_ln1118_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_290_p2),72));
    zext_ln461_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_334_p4),12));
    zext_ln586_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_426_p1),54));
    zext_ln604_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_426_p1),40));
    zext_ln89_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_139),64));
    zext_ln94_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_150),64));
end behav;
