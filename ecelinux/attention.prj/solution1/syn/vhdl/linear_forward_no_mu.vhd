-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_forward_no_mu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    scales_0_V_read : IN STD_LOGIC_VECTOR (39 downto 0);
    packed_weights_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    packed_weights_0_ce0 : OUT STD_LOGIC;
    packed_weights_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    packed_weights_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    packed_weights_1_ce0 : OUT STD_LOGIC;
    packed_weights_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    packed_weights_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    packed_weights_2_ce0 : OUT STD_LOGIC;
    packed_weights_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    packed_weights_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    packed_weights_3_ce0 : OUT STD_LOGIC;
    packed_weights_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_scale_V : IN STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of linear_forward_no_mu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_0_0_reg_283 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln701_fu_308_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal sext_ln701_reg_1381 : STD_LOGIC_VECTOR (71 downto 0);
    signal xor_ln701_15_fu_312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_15_reg_1386 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_14_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_14_reg_1391 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_13_fu_324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_13_reg_1396 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_12_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_12_reg_1401 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_11_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_11_reg_1406 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_10_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_10_reg_1411 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_9_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_9_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_8_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_8_reg_1421 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_7_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_7_reg_1426 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_6_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_6_reg_1431 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_5_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_5_reg_1436 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_4_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_4_reg_1441 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_3_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_3_reg_1446 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_2_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_2_reg_1451 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_1_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_1_reg_1456 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln701_reg_1461 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln157_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln157_reg_1466_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1466_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln157_fu_414_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln157_reg_1470 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_0_V_addr_reg_1475 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter26_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter27_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter28_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter29_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter30_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter31_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter32_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter33_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter34_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter35_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter36_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter37_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter38_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_0_V_addr_reg_1475_pp0_iter39_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln162_fu_429_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_reg_1500 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state41_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state43_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state49_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state53_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state55_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_state57_pp0_stage1_iter27 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter28 : BOOLEAN;
    signal ap_block_state61_pp0_stage1_iter29 : BOOLEAN;
    signal ap_block_state63_pp0_stage1_iter30 : BOOLEAN;
    signal ap_block_state65_pp0_stage1_iter31 : BOOLEAN;
    signal ap_block_state67_pp0_stage1_iter32 : BOOLEAN;
    signal ap_block_state69_pp0_stage1_iter33 : BOOLEAN;
    signal ap_block_state71_pp0_stage1_iter34 : BOOLEAN;
    signal ap_block_state73_pp0_stage1_iter35 : BOOLEAN;
    signal ap_block_state75_pp0_stage1_iter36 : BOOLEAN;
    signal ap_block_state77_pp0_stage1_iter37 : BOOLEAN;
    signal ap_block_state79_pp0_stage1_iter38 : BOOLEAN;
    signal ap_block_state81_pp0_stage1_iter39 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal output_0_V_load_reg_1506 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln162_3_reg_1511 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln164_2_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_2_reg_1517 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_2_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_2_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_1527 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_2_fu_475_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_2_reg_1533 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_8_reg_1539 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_9_reg_1545 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln164_1_reg_1551 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln164_8_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_8_reg_1557 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_8_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_8_reg_1562 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln162_1_reg_1567 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln164_10_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_10_reg_1573 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_10_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_10_reg_1578 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln164_2_reg_1583 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln164_12_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_12_reg_1589 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_12_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_12_reg_1594 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln162_s_reg_1599 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln703_38_fu_689_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_38_reg_1605 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_29_fu_1166_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_29_reg_1610 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_32_fu_1192_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_32_reg_1615 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_41_fu_1261_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln703_41_reg_1620 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln703_42_fu_1278_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_42_reg_1625 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_phi_mux_j_0_0_phi_fu_287_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln159_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mul_ln1148_fu_302_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1148_fu_302_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1148_fu_302_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln162_4_fu_443_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_6_fu_509_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_5_fu_535_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_7_fu_567_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln162_10_fu_593_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln165_14_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_14_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_14_fu_615_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_14_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_13_fu_629_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln164_3_fu_641_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln165_15_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_15_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_15_fu_663_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_15_fu_670_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_14_fu_677_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_14_fu_637_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_15_fu_685_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln165_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_fu_705_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_fu_712_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_719_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_1_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_1_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_1_fu_741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_1_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_1_fu_755_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln165_2_fu_767_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_2_fu_773_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_2_fu_779_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_3_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_3_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_3_fu_801_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_3_fu_808_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_3_fu_815_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_4_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_4_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_4_fu_837_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_4_fu_844_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_4_fu_851_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_5_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_5_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_5_fu_873_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_5_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_5_fu_887_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_6_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_6_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_6_fu_909_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_6_fu_916_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_6_fu_923_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_7_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_7_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_7_fu_945_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_7_fu_952_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_7_fu_959_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln165_8_fu_971_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_8_fu_977_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_8_fu_983_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_9_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_9_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_9_fu_1005_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_9_fu_1012_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_9_fu_1019_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln165_10_fu_1031_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_10_fu_1037_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_s_fu_1043_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_11_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_11_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_11_fu_1065_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_11_fu_1072_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_10_fu_1079_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln165_12_fu_1091_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_12_fu_1097_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_11_fu_1103_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln165_13_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_13_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln165_13_fu_1125_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_13_fu_1132_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln703_12_fu_1139_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_fu_727_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln703_1_fu_763_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_2_fu_787_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_28_fu_1156_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_16_fu_1162_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_fu_1151_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln703_3_fu_823_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_4_fu_859_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_30_fu_1172_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_5_fu_895_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_6_fu_931_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_31_fu_1182_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_18_fu_1188_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_17_fu_1178_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_7_fu_967_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_8_fu_991_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_34_fu_1198_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_9_fu_1027_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_10_fu_1051_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_35_fu_1208_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_21_fu_1214_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_20_fu_1204_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_36_fu_1218_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_11_fu_1087_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_12_fu_1111_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln703_37_fu_1228_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln703_24_fu_1238_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_13_fu_1147_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln703_39_fu_1241_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_25_fu_1247_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln703_23_fu_1234_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln703_40_fu_1251_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln703_26_fu_1257_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln703_22_fu_1224_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln703_19_fu_1267_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln703_27_fu_1275_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_33_fu_1270_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1291_p0 : STD_LOGIC_VECTOR (71 downto 0);
    signal grp_fu_1291_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_1291_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1148_fu_302_p00 : STD_LOGIC_VECTOR (60 downto 0);

    component dut_sdiv_72ns_61seOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (71 downto 0);
        din1 : IN STD_LOGIC_VECTOR (60 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    dut_sdiv_72ns_61seOg_U12 : component dut_sdiv_72ns_61seOg
    generic map (
        ID => 1,
        NUM_STAGE => 76,
        din0_WIDTH => 72,
        din1_WIDTH => 61,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1291_p0,
        din1 => grp_fu_1291_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1291_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_0_0_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln157_reg_1466 = ap_const_lv1_0))) then 
                j_0_0_reg_283 <= add_ln157_reg_1470;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_283 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln157_reg_1470 <= add_ln157_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln157_reg_1466 = ap_const_lv1_0))) then
                add_ln703_29_reg_1610 <= add_ln703_29_fu_1166_p2;
                    add_ln703_32_reg_1615(25 downto 16) <= add_ln703_32_fu_1192_p2(25 downto 16);
                    add_ln703_41_reg_1620(27 downto 16) <= add_ln703_41_fu_1261_p2(27 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln157_reg_1466 = ap_const_lv1_0))) then
                    add_ln703_38_reg_1605(24 downto 16) <= add_ln703_38_fu_689_p2(24 downto 16);
                icmp_ln164_10_reg_1573 <= icmp_ln164_10_fu_545_p2;
                icmp_ln164_12_reg_1589 <= icmp_ln164_12_fu_571_p2;
                icmp_ln164_2_reg_1517 <= icmp_ln164_2_fu_453_p2;
                icmp_ln164_8_reg_1557 <= icmp_ln164_8_fu_513_p2;
                icmp_ln165_10_reg_1578 <= icmp_ln165_10_fu_551_p2;
                icmp_ln165_12_reg_1594 <= icmp_ln165_12_fu_577_p2;
                icmp_ln165_2_reg_1522 <= icmp_ln165_2_fu_459_p2;
                icmp_ln165_8_reg_1562 <= icmp_ln165_8_fu_519_p2;
                trunc_ln162_1_reg_1567 <= packed_weights_2_q0(3 downto 2);
                trunc_ln162_2_reg_1533 <= trunc_ln162_2_fu_475_p1;
                trunc_ln162_3_reg_1511 <= packed_weights_0_q0(3 downto 2);
                trunc_ln162_8_reg_1539 <= packed_weights_1_q0(3 downto 2);
                trunc_ln162_9_reg_1545 <= packed_weights_1_q0(5 downto 4);
                trunc_ln162_reg_1500 <= trunc_ln162_fu_429_p1;
                trunc_ln162_s_reg_1599 <= packed_weights_3_q0(3 downto 2);
                trunc_ln164_1_reg_1551 <= packed_weights_1_q0(7 downto 6);
                trunc_ln164_2_reg_1583 <= packed_weights_2_q0(7 downto 6);
                trunc_ln_reg_1527 <= packed_weights_0_q0(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln157_reg_1466_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln703_42_reg_1625 <= add_ln703_42_fu_1278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln157_reg_1466 <= icmp_ln157_fu_408_p2;
                icmp_ln157_reg_1466_pp0_iter10_reg <= icmp_ln157_reg_1466_pp0_iter9_reg;
                icmp_ln157_reg_1466_pp0_iter11_reg <= icmp_ln157_reg_1466_pp0_iter10_reg;
                icmp_ln157_reg_1466_pp0_iter12_reg <= icmp_ln157_reg_1466_pp0_iter11_reg;
                icmp_ln157_reg_1466_pp0_iter13_reg <= icmp_ln157_reg_1466_pp0_iter12_reg;
                icmp_ln157_reg_1466_pp0_iter14_reg <= icmp_ln157_reg_1466_pp0_iter13_reg;
                icmp_ln157_reg_1466_pp0_iter15_reg <= icmp_ln157_reg_1466_pp0_iter14_reg;
                icmp_ln157_reg_1466_pp0_iter16_reg <= icmp_ln157_reg_1466_pp0_iter15_reg;
                icmp_ln157_reg_1466_pp0_iter17_reg <= icmp_ln157_reg_1466_pp0_iter16_reg;
                icmp_ln157_reg_1466_pp0_iter18_reg <= icmp_ln157_reg_1466_pp0_iter17_reg;
                icmp_ln157_reg_1466_pp0_iter19_reg <= icmp_ln157_reg_1466_pp0_iter18_reg;
                icmp_ln157_reg_1466_pp0_iter1_reg <= icmp_ln157_reg_1466;
                icmp_ln157_reg_1466_pp0_iter20_reg <= icmp_ln157_reg_1466_pp0_iter19_reg;
                icmp_ln157_reg_1466_pp0_iter21_reg <= icmp_ln157_reg_1466_pp0_iter20_reg;
                icmp_ln157_reg_1466_pp0_iter22_reg <= icmp_ln157_reg_1466_pp0_iter21_reg;
                icmp_ln157_reg_1466_pp0_iter23_reg <= icmp_ln157_reg_1466_pp0_iter22_reg;
                icmp_ln157_reg_1466_pp0_iter24_reg <= icmp_ln157_reg_1466_pp0_iter23_reg;
                icmp_ln157_reg_1466_pp0_iter25_reg <= icmp_ln157_reg_1466_pp0_iter24_reg;
                icmp_ln157_reg_1466_pp0_iter26_reg <= icmp_ln157_reg_1466_pp0_iter25_reg;
                icmp_ln157_reg_1466_pp0_iter27_reg <= icmp_ln157_reg_1466_pp0_iter26_reg;
                icmp_ln157_reg_1466_pp0_iter28_reg <= icmp_ln157_reg_1466_pp0_iter27_reg;
                icmp_ln157_reg_1466_pp0_iter29_reg <= icmp_ln157_reg_1466_pp0_iter28_reg;
                icmp_ln157_reg_1466_pp0_iter2_reg <= icmp_ln157_reg_1466_pp0_iter1_reg;
                icmp_ln157_reg_1466_pp0_iter30_reg <= icmp_ln157_reg_1466_pp0_iter29_reg;
                icmp_ln157_reg_1466_pp0_iter31_reg <= icmp_ln157_reg_1466_pp0_iter30_reg;
                icmp_ln157_reg_1466_pp0_iter32_reg <= icmp_ln157_reg_1466_pp0_iter31_reg;
                icmp_ln157_reg_1466_pp0_iter33_reg <= icmp_ln157_reg_1466_pp0_iter32_reg;
                icmp_ln157_reg_1466_pp0_iter34_reg <= icmp_ln157_reg_1466_pp0_iter33_reg;
                icmp_ln157_reg_1466_pp0_iter35_reg <= icmp_ln157_reg_1466_pp0_iter34_reg;
                icmp_ln157_reg_1466_pp0_iter36_reg <= icmp_ln157_reg_1466_pp0_iter35_reg;
                icmp_ln157_reg_1466_pp0_iter37_reg <= icmp_ln157_reg_1466_pp0_iter36_reg;
                icmp_ln157_reg_1466_pp0_iter38_reg <= icmp_ln157_reg_1466_pp0_iter37_reg;
                icmp_ln157_reg_1466_pp0_iter39_reg <= icmp_ln157_reg_1466_pp0_iter38_reg;
                icmp_ln157_reg_1466_pp0_iter3_reg <= icmp_ln157_reg_1466_pp0_iter2_reg;
                icmp_ln157_reg_1466_pp0_iter4_reg <= icmp_ln157_reg_1466_pp0_iter3_reg;
                icmp_ln157_reg_1466_pp0_iter5_reg <= icmp_ln157_reg_1466_pp0_iter4_reg;
                icmp_ln157_reg_1466_pp0_iter6_reg <= icmp_ln157_reg_1466_pp0_iter5_reg;
                icmp_ln157_reg_1466_pp0_iter7_reg <= icmp_ln157_reg_1466_pp0_iter6_reg;
                icmp_ln157_reg_1466_pp0_iter8_reg <= icmp_ln157_reg_1466_pp0_iter7_reg;
                icmp_ln157_reg_1466_pp0_iter9_reg <= icmp_ln157_reg_1466_pp0_iter8_reg;
                output_0_V_addr_reg_1475_pp0_iter10_reg <= output_0_V_addr_reg_1475_pp0_iter9_reg;
                output_0_V_addr_reg_1475_pp0_iter11_reg <= output_0_V_addr_reg_1475_pp0_iter10_reg;
                output_0_V_addr_reg_1475_pp0_iter12_reg <= output_0_V_addr_reg_1475_pp0_iter11_reg;
                output_0_V_addr_reg_1475_pp0_iter13_reg <= output_0_V_addr_reg_1475_pp0_iter12_reg;
                output_0_V_addr_reg_1475_pp0_iter14_reg <= output_0_V_addr_reg_1475_pp0_iter13_reg;
                output_0_V_addr_reg_1475_pp0_iter15_reg <= output_0_V_addr_reg_1475_pp0_iter14_reg;
                output_0_V_addr_reg_1475_pp0_iter16_reg <= output_0_V_addr_reg_1475_pp0_iter15_reg;
                output_0_V_addr_reg_1475_pp0_iter17_reg <= output_0_V_addr_reg_1475_pp0_iter16_reg;
                output_0_V_addr_reg_1475_pp0_iter18_reg <= output_0_V_addr_reg_1475_pp0_iter17_reg;
                output_0_V_addr_reg_1475_pp0_iter19_reg <= output_0_V_addr_reg_1475_pp0_iter18_reg;
                output_0_V_addr_reg_1475_pp0_iter1_reg <= output_0_V_addr_reg_1475;
                output_0_V_addr_reg_1475_pp0_iter20_reg <= output_0_V_addr_reg_1475_pp0_iter19_reg;
                output_0_V_addr_reg_1475_pp0_iter21_reg <= output_0_V_addr_reg_1475_pp0_iter20_reg;
                output_0_V_addr_reg_1475_pp0_iter22_reg <= output_0_V_addr_reg_1475_pp0_iter21_reg;
                output_0_V_addr_reg_1475_pp0_iter23_reg <= output_0_V_addr_reg_1475_pp0_iter22_reg;
                output_0_V_addr_reg_1475_pp0_iter24_reg <= output_0_V_addr_reg_1475_pp0_iter23_reg;
                output_0_V_addr_reg_1475_pp0_iter25_reg <= output_0_V_addr_reg_1475_pp0_iter24_reg;
                output_0_V_addr_reg_1475_pp0_iter26_reg <= output_0_V_addr_reg_1475_pp0_iter25_reg;
                output_0_V_addr_reg_1475_pp0_iter27_reg <= output_0_V_addr_reg_1475_pp0_iter26_reg;
                output_0_V_addr_reg_1475_pp0_iter28_reg <= output_0_V_addr_reg_1475_pp0_iter27_reg;
                output_0_V_addr_reg_1475_pp0_iter29_reg <= output_0_V_addr_reg_1475_pp0_iter28_reg;
                output_0_V_addr_reg_1475_pp0_iter2_reg <= output_0_V_addr_reg_1475_pp0_iter1_reg;
                output_0_V_addr_reg_1475_pp0_iter30_reg <= output_0_V_addr_reg_1475_pp0_iter29_reg;
                output_0_V_addr_reg_1475_pp0_iter31_reg <= output_0_V_addr_reg_1475_pp0_iter30_reg;
                output_0_V_addr_reg_1475_pp0_iter32_reg <= output_0_V_addr_reg_1475_pp0_iter31_reg;
                output_0_V_addr_reg_1475_pp0_iter33_reg <= output_0_V_addr_reg_1475_pp0_iter32_reg;
                output_0_V_addr_reg_1475_pp0_iter34_reg <= output_0_V_addr_reg_1475_pp0_iter33_reg;
                output_0_V_addr_reg_1475_pp0_iter35_reg <= output_0_V_addr_reg_1475_pp0_iter34_reg;
                output_0_V_addr_reg_1475_pp0_iter36_reg <= output_0_V_addr_reg_1475_pp0_iter35_reg;
                output_0_V_addr_reg_1475_pp0_iter37_reg <= output_0_V_addr_reg_1475_pp0_iter36_reg;
                output_0_V_addr_reg_1475_pp0_iter38_reg <= output_0_V_addr_reg_1475_pp0_iter37_reg;
                output_0_V_addr_reg_1475_pp0_iter39_reg <= output_0_V_addr_reg_1475_pp0_iter38_reg;
                output_0_V_addr_reg_1475_pp0_iter3_reg <= output_0_V_addr_reg_1475_pp0_iter2_reg;
                output_0_V_addr_reg_1475_pp0_iter4_reg <= output_0_V_addr_reg_1475_pp0_iter3_reg;
                output_0_V_addr_reg_1475_pp0_iter5_reg <= output_0_V_addr_reg_1475_pp0_iter4_reg;
                output_0_V_addr_reg_1475_pp0_iter6_reg <= output_0_V_addr_reg_1475_pp0_iter5_reg;
                output_0_V_addr_reg_1475_pp0_iter7_reg <= output_0_V_addr_reg_1475_pp0_iter6_reg;
                output_0_V_addr_reg_1475_pp0_iter8_reg <= output_0_V_addr_reg_1475_pp0_iter7_reg;
                output_0_V_addr_reg_1475_pp0_iter9_reg <= output_0_V_addr_reg_1475_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln157_fu_408_p2 = ap_const_lv1_0))) then
                output_0_V_addr_reg_1475 <= zext_ln159_fu_420_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln157_reg_1466 = ap_const_lv1_0))) then
                output_0_V_load_reg_1506 <= output_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sext_ln701_reg_1381 <= sext_ln701_fu_308_p1;
                xor_ln701_10_reg_1411 <= xor_ln701_10_fu_342_p2;
                xor_ln701_11_reg_1406 <= xor_ln701_11_fu_336_p2;
                xor_ln701_12_reg_1401 <= xor_ln701_12_fu_330_p2;
                xor_ln701_13_reg_1396 <= xor_ln701_13_fu_324_p2;
                xor_ln701_14_reg_1391 <= xor_ln701_14_fu_318_p2;
                xor_ln701_15_reg_1386 <= xor_ln701_15_fu_312_p2;
                xor_ln701_1_reg_1456 <= xor_ln701_1_fu_396_p2;
                xor_ln701_2_reg_1451 <= xor_ln701_2_fu_390_p2;
                xor_ln701_3_reg_1446 <= xor_ln701_3_fu_384_p2;
                xor_ln701_4_reg_1441 <= xor_ln701_4_fu_378_p2;
                xor_ln701_5_reg_1436 <= xor_ln701_5_fu_372_p2;
                xor_ln701_6_reg_1431 <= xor_ln701_6_fu_366_p2;
                xor_ln701_7_reg_1426 <= xor_ln701_7_fu_360_p2;
                xor_ln701_8_reg_1421 <= xor_ln701_8_fu_354_p2;
                xor_ln701_9_reg_1416 <= xor_ln701_9_fu_348_p2;
                xor_ln701_reg_1461 <= xor_ln701_fu_402_p2;
            end if;
        end if;
    end process;
    add_ln703_38_reg_1605(15 downto 0) <= "0000000000000000";
    add_ln703_32_reg_1615(15 downto 0) <= "0000000000000000";
    add_ln703_41_reg_1620(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln157_fu_408_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln157_fu_408_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln157_fu_408_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln157_fu_414_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_0_phi_fu_287_p4) + unsigned(ap_const_lv5_1));
    add_ln703_28_fu_1156_p2 <= std_logic_vector(signed(sext_ln703_1_fu_763_p1) + signed(sext_ln703_2_fu_787_p1));
    add_ln703_29_fu_1166_p2 <= std_logic_vector(signed(sext_ln703_16_fu_1162_p1) + signed(add_ln703_fu_1151_p2));
    add_ln703_30_fu_1172_p2 <= std_logic_vector(signed(sext_ln703_3_fu_823_p1) + signed(sext_ln703_4_fu_859_p1));
    add_ln703_31_fu_1182_p2 <= std_logic_vector(signed(sext_ln703_5_fu_895_p1) + signed(sext_ln703_6_fu_931_p1));
    add_ln703_32_fu_1192_p2 <= std_logic_vector(signed(sext_ln703_18_fu_1188_p1) + signed(sext_ln703_17_fu_1178_p1));
    add_ln703_33_fu_1270_p2 <= std_logic_vector(signed(sext_ln703_19_fu_1267_p1) + signed(add_ln703_29_reg_1610));
    add_ln703_34_fu_1198_p2 <= std_logic_vector(signed(sext_ln703_7_fu_967_p1) + signed(sext_ln703_8_fu_991_p1));
    add_ln703_35_fu_1208_p2 <= std_logic_vector(signed(sext_ln703_9_fu_1027_p1) + signed(sext_ln703_10_fu_1051_p1));
    add_ln703_36_fu_1218_p2 <= std_logic_vector(signed(sext_ln703_21_fu_1214_p1) + signed(sext_ln703_20_fu_1204_p1));
    add_ln703_37_fu_1228_p2 <= std_logic_vector(signed(sext_ln703_11_fu_1087_p1) + signed(sext_ln703_12_fu_1111_p1));
    add_ln703_38_fu_689_p2 <= std_logic_vector(signed(sext_ln703_14_fu_637_p1) + signed(sext_ln703_15_fu_685_p1));
    add_ln703_39_fu_1241_p2 <= std_logic_vector(signed(sext_ln703_24_fu_1238_p1) + signed(sext_ln703_13_fu_1147_p1));
    add_ln703_40_fu_1251_p2 <= std_logic_vector(signed(sext_ln703_25_fu_1247_p1) + signed(sext_ln703_23_fu_1234_p1));
    add_ln703_41_fu_1261_p2 <= std_logic_vector(signed(sext_ln703_26_fu_1257_p1) + signed(sext_ln703_22_fu_1224_p1));
    add_ln703_42_fu_1278_p2 <= std_logic_vector(signed(sext_ln703_27_fu_1275_p1) + signed(add_ln703_33_fu_1270_p2));
    add_ln703_fu_1151_p2 <= std_logic_vector(unsigned(output_0_V_load_reg_1506) + unsigned(sext_ln703_fu_727_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state82 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage1_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage1_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage1_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage1_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage1_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage1_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage1_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage1_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage1_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage1_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage1_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage1_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln157_fu_408_p2)
    begin
        if ((icmp_ln157_fu_408_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39)
    begin
        if (((ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_0_phi_fu_287_p4_assign_proc : process(j_0_0_reg_283, icmp_ln157_reg_1466, ap_CS_fsm_pp0_stage0, add_ln157_reg_1470, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln157_reg_1466 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_0_phi_fu_287_p4 <= add_ln157_reg_1470;
        else 
            ap_phi_mux_j_0_0_phi_fu_287_p4 <= j_0_0_reg_283;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1291_p0 <= (add_ln703_42_reg_1625 & ap_const_lv32_0);
    grp_fu_1291_p1 <= sext_ln701_reg_1381(61 - 1 downto 0);
    icmp_ln157_fu_408_p2 <= "1" when (ap_phi_mux_j_0_0_phi_fu_287_p4 = ap_const_lv5_10) else "0";
    icmp_ln164_10_fu_545_p2 <= "1" when (trunc_ln162_5_fu_535_p4 = ap_const_lv2_1) else "0";
    icmp_ln164_11_fu_1055_p2 <= "1" when (trunc_ln164_2_reg_1583 = ap_const_lv2_1) else "0";
    icmp_ln164_12_fu_571_p2 <= "1" when (trunc_ln162_7_fu_567_p1 = ap_const_lv2_1) else "0";
    icmp_ln164_13_fu_1115_p2 <= "1" when (trunc_ln162_s_reg_1599 = ap_const_lv2_1) else "0";
    icmp_ln164_14_fu_603_p2 <= "1" when (trunc_ln162_10_fu_593_p4 = ap_const_lv2_1) else "0";
    icmp_ln164_15_fu_651_p2 <= "1" when (trunc_ln164_3_fu_641_p4 = ap_const_lv2_1) else "0";
    icmp_ln164_1_fu_731_p2 <= "1" when (trunc_ln162_3_reg_1511 = ap_const_lv2_1) else "0";
    icmp_ln164_2_fu_453_p2 <= "1" when (trunc_ln162_4_fu_443_p4 = ap_const_lv2_1) else "0";
    icmp_ln164_3_fu_791_p2 <= "1" when (trunc_ln_reg_1527 = ap_const_lv2_1) else "0";
    icmp_ln164_4_fu_827_p2 <= "1" when (trunc_ln162_2_reg_1533 = ap_const_lv2_1) else "0";
    icmp_ln164_5_fu_863_p2 <= "1" when (trunc_ln162_8_reg_1539 = ap_const_lv2_1) else "0";
    icmp_ln164_6_fu_899_p2 <= "1" when (trunc_ln162_9_reg_1545 = ap_const_lv2_1) else "0";
    icmp_ln164_7_fu_935_p2 <= "1" when (trunc_ln164_1_reg_1551 = ap_const_lv2_1) else "0";
    icmp_ln164_8_fu_513_p2 <= "1" when (trunc_ln162_6_fu_509_p1 = ap_const_lv2_1) else "0";
    icmp_ln164_9_fu_995_p2 <= "1" when (trunc_ln162_1_reg_1567 = ap_const_lv2_1) else "0";
    icmp_ln164_fu_695_p2 <= "1" when (trunc_ln162_reg_1500 = ap_const_lv2_1) else "0";
    icmp_ln165_10_fu_551_p2 <= "1" when (trunc_ln162_5_fu_535_p4 = ap_const_lv2_2) else "0";
    icmp_ln165_11_fu_1060_p2 <= "1" when (trunc_ln164_2_reg_1583 = ap_const_lv2_2) else "0";
    icmp_ln165_12_fu_577_p2 <= "1" when (trunc_ln162_7_fu_567_p1 = ap_const_lv2_2) else "0";
    icmp_ln165_13_fu_1120_p2 <= "1" when (trunc_ln162_s_reg_1599 = ap_const_lv2_2) else "0";
    icmp_ln165_14_fu_609_p2 <= "1" when (trunc_ln162_10_fu_593_p4 = ap_const_lv2_2) else "0";
    icmp_ln165_15_fu_657_p2 <= "1" when (trunc_ln164_3_fu_641_p4 = ap_const_lv2_2) else "0";
    icmp_ln165_1_fu_736_p2 <= "1" when (trunc_ln162_3_reg_1511 = ap_const_lv2_2) else "0";
    icmp_ln165_2_fu_459_p2 <= "1" when (trunc_ln162_4_fu_443_p4 = ap_const_lv2_2) else "0";
    icmp_ln165_3_fu_796_p2 <= "1" when (trunc_ln_reg_1527 = ap_const_lv2_2) else "0";
    icmp_ln165_4_fu_832_p2 <= "1" when (trunc_ln162_2_reg_1533 = ap_const_lv2_2) else "0";
    icmp_ln165_5_fu_868_p2 <= "1" when (trunc_ln162_8_reg_1539 = ap_const_lv2_2) else "0";
    icmp_ln165_6_fu_904_p2 <= "1" when (trunc_ln162_9_reg_1545 = ap_const_lv2_2) else "0";
    icmp_ln165_7_fu_940_p2 <= "1" when (trunc_ln164_1_reg_1551 = ap_const_lv2_2) else "0";
    icmp_ln165_8_fu_519_p2 <= "1" when (trunc_ln162_6_fu_509_p1 = ap_const_lv2_2) else "0";
    icmp_ln165_9_fu_1000_p2 <= "1" when (trunc_ln162_1_reg_1567 = ap_const_lv2_2) else "0";
    icmp_ln165_fu_700_p2 <= "1" when (trunc_ln162_reg_1500 = ap_const_lv2_2) else "0";
    mul_ln1148_fu_302_p0 <= mul_ln1148_fu_302_p00(22 - 1 downto 0);
    mul_ln1148_fu_302_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_scale_V),61));
    mul_ln1148_fu_302_p1 <= scales_0_V_read;
    mul_ln1148_fu_302_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1148_fu_302_p0) * signed(mul_ln1148_fu_302_p1))), 61));

    output_0_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, output_0_V_addr_reg_1475_pp0_iter39_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter39, ap_block_pp0_stage0, zext_ln159_fu_420_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_address0 <= output_0_V_addr_reg_1475_pp0_iter39_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_V_address0 <= zext_ln159_fu_420_p1(4 - 1 downto 0);
        else 
            output_0_V_address0 <= "XXXX";
        end if; 
    end process;


    output_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter39)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= grp_fu_1291_p2(40 - 1 downto 0);

    output_0_V_we0_assign_proc : process(icmp_ln157_reg_1466_pp0_iter39_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter39)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln157_reg_1466_pp0_iter39_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_0_address0 <= zext_ln159_fu_420_p1(4 - 1 downto 0);

    packed_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            packed_weights_0_ce0 <= ap_const_logic_1;
        else 
            packed_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_1_address0 <= zext_ln159_fu_420_p1(4 - 1 downto 0);

    packed_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            packed_weights_1_ce0 <= ap_const_logic_1;
        else 
            packed_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_2_address0 <= zext_ln159_fu_420_p1(4 - 1 downto 0);

    packed_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            packed_weights_2_ce0 <= ap_const_logic_1;
        else 
            packed_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    packed_weights_3_address0 <= zext_ln159_fu_420_p1(4 - 1 downto 0);

    packed_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            packed_weights_3_ce0 <= ap_const_logic_1;
        else 
            packed_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln164_10_fu_1037_p3 <= 
        p_read10 when (icmp_ln164_10_reg_1573(0) = '1') else 
        select_ln165_10_fu_1031_p3;
    select_ln164_11_fu_1072_p3 <= 
        p_read11 when (icmp_ln164_11_fu_1055_p2(0) = '1') else 
        select_ln165_11_fu_1065_p3;
    select_ln164_12_fu_1097_p3 <= 
        p_read12 when (icmp_ln164_12_reg_1589(0) = '1') else 
        select_ln165_12_fu_1091_p3;
    select_ln164_13_fu_1132_p3 <= 
        p_read13 when (icmp_ln164_13_fu_1115_p2(0) = '1') else 
        select_ln165_13_fu_1125_p3;
    select_ln164_14_fu_622_p3 <= 
        p_read14 when (icmp_ln164_14_fu_603_p2(0) = '1') else 
        select_ln165_14_fu_615_p3;
    select_ln164_15_fu_670_p3 <= 
        p_read15 when (icmp_ln164_15_fu_651_p2(0) = '1') else 
        select_ln165_15_fu_663_p3;
    select_ln164_1_fu_748_p3 <= 
        p_read1 when (icmp_ln164_1_fu_731_p2(0) = '1') else 
        select_ln165_1_fu_741_p3;
    select_ln164_2_fu_773_p3 <= 
        p_read2 when (icmp_ln164_2_reg_1517(0) = '1') else 
        select_ln165_2_fu_767_p3;
    select_ln164_3_fu_808_p3 <= 
        p_read3 when (icmp_ln164_3_fu_791_p2(0) = '1') else 
        select_ln165_3_fu_801_p3;
    select_ln164_4_fu_844_p3 <= 
        p_read4 when (icmp_ln164_4_fu_827_p2(0) = '1') else 
        select_ln165_4_fu_837_p3;
    select_ln164_5_fu_880_p3 <= 
        p_read5 when (icmp_ln164_5_fu_863_p2(0) = '1') else 
        select_ln165_5_fu_873_p3;
    select_ln164_6_fu_916_p3 <= 
        p_read6 when (icmp_ln164_6_fu_899_p2(0) = '1') else 
        select_ln165_6_fu_909_p3;
    select_ln164_7_fu_952_p3 <= 
        p_read7 when (icmp_ln164_7_fu_935_p2(0) = '1') else 
        select_ln165_7_fu_945_p3;
    select_ln164_8_fu_977_p3 <= 
        p_read8 when (icmp_ln164_8_reg_1557(0) = '1') else 
        select_ln165_8_fu_971_p3;
    select_ln164_9_fu_1012_p3 <= 
        p_read9 when (icmp_ln164_9_fu_995_p2(0) = '1') else 
        select_ln165_9_fu_1005_p3;
    select_ln164_fu_712_p3 <= 
        p_read when (icmp_ln164_fu_695_p2(0) = '1') else 
        select_ln165_fu_705_p3;
    select_ln165_10_fu_1031_p3 <= 
        xor_ln701_10_reg_1411 when (icmp_ln165_10_reg_1578(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_11_fu_1065_p3 <= 
        xor_ln701_11_reg_1406 when (icmp_ln165_11_fu_1060_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_12_fu_1091_p3 <= 
        xor_ln701_12_reg_1401 when (icmp_ln165_12_reg_1594(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_13_fu_1125_p3 <= 
        xor_ln701_13_reg_1396 when (icmp_ln165_13_fu_1120_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_14_fu_615_p3 <= 
        xor_ln701_14_reg_1391 when (icmp_ln165_14_fu_609_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_15_fu_663_p3 <= 
        xor_ln701_15_reg_1386 when (icmp_ln165_15_fu_657_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_1_fu_741_p3 <= 
        xor_ln701_1_reg_1456 when (icmp_ln165_1_fu_736_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_2_fu_767_p3 <= 
        xor_ln701_2_reg_1451 when (icmp_ln165_2_reg_1522(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_3_fu_801_p3 <= 
        xor_ln701_3_reg_1446 when (icmp_ln165_3_fu_796_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_4_fu_837_p3 <= 
        xor_ln701_4_reg_1441 when (icmp_ln165_4_fu_832_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_5_fu_873_p3 <= 
        xor_ln701_5_reg_1436 when (icmp_ln165_5_fu_868_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_6_fu_909_p3 <= 
        xor_ln701_6_reg_1431 when (icmp_ln165_6_fu_904_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_7_fu_945_p3 <= 
        xor_ln701_7_reg_1426 when (icmp_ln165_7_fu_940_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_8_fu_971_p3 <= 
        xor_ln701_8_reg_1421 when (icmp_ln165_8_reg_1562(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_9_fu_1005_p3 <= 
        xor_ln701_9_reg_1416 when (icmp_ln165_9_fu_1000_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln165_fu_705_p3 <= 
        xor_ln701_reg_1461 when (icmp_ln165_fu_700_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln701_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1148_fu_302_p2),72));

        sext_ln703_10_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_s_fu_1043_p3),25));

        sext_ln703_11_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_10_fu_1079_p3),25));

        sext_ln703_12_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_11_fu_1103_p3),25));

        sext_ln703_13_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_12_fu_1139_p3),26));

        sext_ln703_14_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_13_fu_629_p3),25));

        sext_ln703_15_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_14_fu_677_p3),25));

        sext_ln703_16_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_28_fu_1156_p2),40));

        sext_ln703_17_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_30_fu_1172_p2),26));

        sext_ln703_18_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_31_fu_1182_p2),26));

        sext_ln703_19_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_32_reg_1615),40));

        sext_ln703_1_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_1_fu_755_p3),25));

        sext_ln703_20_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_34_fu_1198_p2),26));

        sext_ln703_21_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_35_fu_1208_p2),26));

        sext_ln703_22_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_36_fu_1218_p2),28));

        sext_ln703_23_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_37_fu_1228_p2),27));

        sext_ln703_24_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_38_reg_1605),26));

        sext_ln703_25_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_39_fu_1241_p2),27));

        sext_ln703_26_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_40_fu_1251_p2),28));

        sext_ln703_27_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_41_reg_1620),40));

        sext_ln703_2_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_2_fu_779_p3),25));

        sext_ln703_3_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_3_fu_815_p3),25));

        sext_ln703_4_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_4_fu_851_p3),25));

        sext_ln703_5_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_5_fu_887_p3),25));

        sext_ln703_6_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_6_fu_923_p3),25));

        sext_ln703_7_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_7_fu_959_p3),25));

        sext_ln703_8_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_8_fu_983_p3),25));

        sext_ln703_9_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln703_9_fu_1019_p3),25));

        sext_ln703_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_719_p3),40));

    shl_ln703_10_fu_1079_p3 <= (select_ln164_11_fu_1072_p3 & ap_const_lv16_0);
    shl_ln703_11_fu_1103_p3 <= (select_ln164_12_fu_1097_p3 & ap_const_lv16_0);
    shl_ln703_12_fu_1139_p3 <= (select_ln164_13_fu_1132_p3 & ap_const_lv16_0);
    shl_ln703_13_fu_629_p3 <= (select_ln164_14_fu_622_p3 & ap_const_lv16_0);
    shl_ln703_14_fu_677_p3 <= (select_ln164_15_fu_670_p3 & ap_const_lv16_0);
    shl_ln703_1_fu_755_p3 <= (select_ln164_1_fu_748_p3 & ap_const_lv16_0);
    shl_ln703_2_fu_779_p3 <= (select_ln164_2_fu_773_p3 & ap_const_lv16_0);
    shl_ln703_3_fu_815_p3 <= (select_ln164_3_fu_808_p3 & ap_const_lv16_0);
    shl_ln703_4_fu_851_p3 <= (select_ln164_4_fu_844_p3 & ap_const_lv16_0);
    shl_ln703_5_fu_887_p3 <= (select_ln164_5_fu_880_p3 & ap_const_lv16_0);
    shl_ln703_6_fu_923_p3 <= (select_ln164_6_fu_916_p3 & ap_const_lv16_0);
    shl_ln703_7_fu_959_p3 <= (select_ln164_7_fu_952_p3 & ap_const_lv16_0);
    shl_ln703_8_fu_983_p3 <= (select_ln164_8_fu_977_p3 & ap_const_lv16_0);
    shl_ln703_9_fu_1019_p3 <= (select_ln164_9_fu_1012_p3 & ap_const_lv16_0);
    shl_ln703_s_fu_1043_p3 <= (select_ln164_10_fu_1037_p3 & ap_const_lv16_0);
    shl_ln_fu_719_p3 <= (select_ln164_fu_712_p3 & ap_const_lv16_0);
    trunc_ln162_10_fu_593_p4 <= packed_weights_3_q0(5 downto 4);
    trunc_ln162_2_fu_475_p1 <= packed_weights_1_q0(2 - 1 downto 0);
    trunc_ln162_4_fu_443_p4 <= packed_weights_0_q0(5 downto 4);
    trunc_ln162_5_fu_535_p4 <= packed_weights_2_q0(5 downto 4);
    trunc_ln162_6_fu_509_p1 <= packed_weights_2_q0(2 - 1 downto 0);
    trunc_ln162_7_fu_567_p1 <= packed_weights_3_q0(2 - 1 downto 0);
    trunc_ln162_fu_429_p1 <= packed_weights_0_q0(2 - 1 downto 0);
    trunc_ln164_3_fu_641_p4 <= packed_weights_3_q0(7 downto 6);
    xor_ln701_10_fu_342_p2 <= (p_read10 xor ap_const_lv8_FF);
    xor_ln701_11_fu_336_p2 <= (p_read11 xor ap_const_lv8_FF);
    xor_ln701_12_fu_330_p2 <= (p_read12 xor ap_const_lv8_FF);
    xor_ln701_13_fu_324_p2 <= (p_read13 xor ap_const_lv8_FF);
    xor_ln701_14_fu_318_p2 <= (p_read14 xor ap_const_lv8_FF);
    xor_ln701_15_fu_312_p2 <= (p_read15 xor ap_const_lv8_FF);
    xor_ln701_1_fu_396_p2 <= (p_read1 xor ap_const_lv8_FF);
    xor_ln701_2_fu_390_p2 <= (p_read2 xor ap_const_lv8_FF);
    xor_ln701_3_fu_384_p2 <= (p_read3 xor ap_const_lv8_FF);
    xor_ln701_4_fu_378_p2 <= (p_read4 xor ap_const_lv8_FF);
    xor_ln701_5_fu_372_p2 <= (p_read5 xor ap_const_lv8_FF);
    xor_ln701_6_fu_366_p2 <= (p_read6 xor ap_const_lv8_FF);
    xor_ln701_7_fu_360_p2 <= (p_read7 xor ap_const_lv8_FF);
    xor_ln701_8_fu_354_p2 <= (p_read8 xor ap_const_lv8_FF);
    xor_ln701_9_fu_348_p2 <= (p_read9 xor ap_const_lv8_FF);
    xor_ln701_fu_402_p2 <= (p_read xor ap_const_lv8_FF);
    zext_ln159_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_0_phi_fu_287_p4),64));
end behav;
