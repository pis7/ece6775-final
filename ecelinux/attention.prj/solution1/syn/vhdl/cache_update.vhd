-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cache_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cache_in_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cache_in_V_ce0 : OUT STD_LOGIC;
    cache_in_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cache_out_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cache_out_0_V_ce0 : OUT STD_LOGIC;
    cache_out_0_V_we0 : OUT STD_LOGIC;
    cache_out_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cache_out_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cache_out_1_V_ce0 : OUT STD_LOGIC;
    cache_out_1_V_we0 : OUT STD_LOGIC;
    cache_out_1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cache_out_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cache_out_2_V_ce0 : OUT STD_LOGIC;
    cache_out_2_V_we0 : OUT STD_LOGIC;
    cache_out_2_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cache_out_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    cache_out_3_V_ce0 : OUT STD_LOGIC;
    cache_out_3_V_we0 : OUT STD_LOGIC;
    cache_out_3_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cache_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_532 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln203_4_fu_308_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_4_reg_537 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln231_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_320_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln203_reg_542 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln203_fu_326_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_reg_547 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_336_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_555 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln234_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_cast_fu_357_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_cast_reg_564 : STD_LOGIC_VECTOR (6 downto 0);
    signal cache_out_0_V_addr_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal cache_out_1_V_addr_reg_574 : STD_LOGIC_VECTOR (3 downto 0);
    signal cache_out_2_V_addr_reg_579 : STD_LOGIC_VECTOR (3 downto 0);
    signal cache_out_3_V_addr_reg_584 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_592 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln233_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_2_fu_404_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_2_reg_602 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_251 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_262 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_0_reg_273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln203_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_7_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln203_1_fu_408_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_423_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_300_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_312_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_3_fu_296_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_5_fu_348_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln203_fu_352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln203_1_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_6_fu_390_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln203_2_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_412_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_423_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component dut_mux_165_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dut_mux_165_32_1_1_U73 : component dut_mux_165_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => p_read12,
        din13 => p_read13,
        din14 => p_read14,
        din15 => p_read15,
        din16 => tmp_9_fu_423_p17,
        dout => tmp_9_fu_423_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln232_fu_330_p2 = ap_const_lv1_1))) then 
                i_0_reg_251 <= i_reg_532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_251 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln233_fu_378_p2 = ap_const_lv1_1))) then 
                j_0_reg_262 <= j_reg_555;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln231_fu_284_p2 = ap_const_lv1_0))) then 
                j_0_reg_262 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_0_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_reg_273 <= k_reg_592;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln232_fu_330_p2 = ap_const_lv1_0))) then 
                k_0_reg_273 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln232_fu_330_p2 = ap_const_lv1_0))) then
                cache_out_0_V_addr_reg_569 <= sext_ln203_fu_370_p1(4 - 1 downto 0);
                cache_out_1_V_addr_reg_574 <= sext_ln203_fu_370_p1(4 - 1 downto 0);
                cache_out_2_V_addr_reg_579 <= sext_ln203_fu_370_p1(4 - 1 downto 0);
                cache_out_3_V_addr_reg_584 <= sext_ln203_fu_370_p1(4 - 1 downto 0);
                icmp_ln234_reg_560 <= icmp_ln234_fu_342_p2;
                    tmp_15_cast_reg_564(6 downto 2) <= tmp_15_cast_fu_357_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_532 <= i_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_555 <= j_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_592 <= k_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln231_fu_284_p2 = ap_const_lv1_0))) then
                sub_ln203_reg_542 <= sub_ln203_fu_320_p2;
                trunc_ln203_reg_547 <= trunc_ln203_fu_326_p1;
                    zext_ln203_4_reg_537(3 downto 1) <= zext_ln203_4_fu_308_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln233_fu_378_p2 = ap_const_lv1_0) and (icmp_ln234_reg_560 = ap_const_lv1_0))) then
                trunc_ln203_2_reg_602 <= trunc_ln203_2_fu_404_p1;
            end if;
        end if;
    end process;
    zext_ln203_4_reg_537(0) <= '0';
    zext_ln203_4_reg_537(4) <= '0';
    tmp_15_cast_reg_564(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln231_fu_284_p2, ap_CS_fsm_state3, icmp_ln232_fu_330_p2, ap_CS_fsm_state4, icmp_ln233_fu_378_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln231_fu_284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln232_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln233_fu_378_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln203_1_fu_365_p2 <= std_logic_vector(unsigned(zext_ln203_5_fu_348_p1) + unsigned(sub_ln203_reg_542));
    add_ln203_2_fu_394_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_564) + unsigned(zext_ln203_6_fu_390_p1));
    add_ln203_fu_352_p2 <= std_logic_vector(unsigned(zext_ln203_5_fu_348_p1) + unsigned(zext_ln203_4_reg_537));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln231_fu_284_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln231_fu_284_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln231_fu_284_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln231_fu_284_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cache_in_V_address0 <= zext_ln203_7_fu_399_p1(5 - 1 downto 0);

    cache_in_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_in_V_ce0 <= ap_const_logic_1;
        else 
            cache_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_out_0_V_address0 <= cache_out_0_V_addr_reg_569;

    cache_out_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cache_out_0_V_ce0 <= ap_const_logic_1;
        else 
            cache_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_out_0_V_d0_assign_proc : process(cache_in_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_9_fu_423_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache_out_0_V_d0 <= cache_in_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_out_0_V_d0 <= tmp_9_fu_423_p18;
        else 
            cache_out_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cache_out_0_V_we0_assign_proc : process(icmp_ln234_reg_560, ap_CS_fsm_state4, icmp_ln233_fu_378_p2, trunc_ln203_2_reg_602, ap_CS_fsm_state5, trunc_ln203_1_fu_408_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_2_reg_602 = ap_const_lv2_0) and (icmp_ln234_reg_560 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln203_1_fu_408_p1 = ap_const_lv2_0) and (icmp_ln234_reg_560 = ap_const_lv1_1) and (icmp_ln233_fu_378_p2 = ap_const_lv1_0)))) then 
            cache_out_0_V_we0 <= ap_const_logic_1;
        else 
            cache_out_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_out_1_V_address0 <= cache_out_1_V_addr_reg_574;

    cache_out_1_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cache_out_1_V_ce0 <= ap_const_logic_1;
        else 
            cache_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_out_1_V_d0_assign_proc : process(cache_in_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_9_fu_423_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache_out_1_V_d0 <= cache_in_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_out_1_V_d0 <= tmp_9_fu_423_p18;
        else 
            cache_out_1_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cache_out_1_V_we0_assign_proc : process(icmp_ln234_reg_560, ap_CS_fsm_state4, icmp_ln233_fu_378_p2, trunc_ln203_2_reg_602, ap_CS_fsm_state5, trunc_ln203_1_fu_408_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_2_reg_602 = ap_const_lv2_1) and (icmp_ln234_reg_560 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln203_1_fu_408_p1 = ap_const_lv2_1) and (icmp_ln234_reg_560 = ap_const_lv1_1) and (icmp_ln233_fu_378_p2 = ap_const_lv1_0)))) then 
            cache_out_1_V_we0 <= ap_const_logic_1;
        else 
            cache_out_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_out_2_V_address0 <= cache_out_2_V_addr_reg_579;

    cache_out_2_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cache_out_2_V_ce0 <= ap_const_logic_1;
        else 
            cache_out_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_out_2_V_d0_assign_proc : process(cache_in_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_9_fu_423_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache_out_2_V_d0 <= cache_in_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_out_2_V_d0 <= tmp_9_fu_423_p18;
        else 
            cache_out_2_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cache_out_2_V_we0_assign_proc : process(icmp_ln234_reg_560, ap_CS_fsm_state4, icmp_ln233_fu_378_p2, trunc_ln203_2_reg_602, ap_CS_fsm_state5, trunc_ln203_1_fu_408_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_2_reg_602 = ap_const_lv2_2) and (icmp_ln234_reg_560 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln203_1_fu_408_p1 = ap_const_lv2_2) and (icmp_ln234_reg_560 = ap_const_lv1_1) and (icmp_ln233_fu_378_p2 = ap_const_lv1_0)))) then 
            cache_out_2_V_we0 <= ap_const_logic_1;
        else 
            cache_out_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_out_3_V_address0 <= cache_out_3_V_addr_reg_584;

    cache_out_3_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            cache_out_3_V_ce0 <= ap_const_logic_1;
        else 
            cache_out_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_out_3_V_d0_assign_proc : process(cache_in_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_9_fu_423_p18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache_out_3_V_d0 <= cache_in_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_out_3_V_d0 <= tmp_9_fu_423_p18;
        else 
            cache_out_3_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cache_out_3_V_we0_assign_proc : process(icmp_ln234_reg_560, ap_CS_fsm_state4, icmp_ln233_fu_378_p2, trunc_ln203_2_reg_602, ap_CS_fsm_state5, trunc_ln203_1_fu_408_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_2_reg_602 = ap_const_lv2_3) and (icmp_ln234_reg_560 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln203_1_fu_408_p1 = ap_const_lv2_3) and (icmp_ln234_reg_560 = ap_const_lv1_1) and (icmp_ln233_fu_378_p2 = ap_const_lv1_0)))) then 
            cache_out_3_V_we0 <= ap_const_logic_1;
        else 
            cache_out_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_290_p2 <= std_logic_vector(unsigned(i_0_reg_251) + unsigned(ap_const_lv3_1));
    icmp_ln231_fu_284_p2 <= "1" when (i_0_reg_251 = ap_const_lv3_4) else "0";
    icmp_ln232_fu_330_p2 <= "1" when (j_0_reg_262 = ap_const_lv2_3) else "0";
    icmp_ln233_fu_378_p2 <= "1" when (k_0_reg_273 = ap_const_lv3_4) else "0";
    icmp_ln234_fu_342_p2 <= "1" when (j_0_reg_262 = ap_const_lv2_2) else "0";
    j_fu_336_p2 <= std_logic_vector(unsigned(j_0_reg_262) + unsigned(ap_const_lv2_1));
    k_fu_384_p2 <= std_logic_vector(unsigned(k_0_reg_273) + unsigned(ap_const_lv3_1));
        sext_ln203_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_1_fu_365_p2),64));

    sub_ln203_fu_320_p2 <= std_logic_vector(unsigned(tmp_3_fu_312_p3) - unsigned(zext_ln203_3_fu_296_p1));
    tmp_15_cast_fu_357_p3 <= (add_ln203_fu_352_p2 & ap_const_lv2_0);
    tmp_1_fu_412_p3 <= (trunc_ln203_1_fu_408_p1 & trunc_ln203_reg_547);
    tmp_2_fu_300_p3 <= (i_0_reg_251 & ap_const_lv1_0);
    tmp_3_fu_312_p3 <= (i_0_reg_251 & ap_const_lv2_0);
    tmp_9_fu_423_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_412_p3),5));
    trunc_ln203_1_fu_408_p1 <= k_0_reg_273(2 - 1 downto 0);
    trunc_ln203_2_fu_404_p1 <= k_0_reg_273(2 - 1 downto 0);
    trunc_ln203_fu_326_p1 <= i_0_reg_251(2 - 1 downto 0);
    zext_ln203_3_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_251),5));
    zext_ln203_4_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_300_p3),5));
    zext_ln203_5_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_262),5));
    zext_ln203_6_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_273),7));
    zext_ln203_7_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_394_p2),64));
end behav;
