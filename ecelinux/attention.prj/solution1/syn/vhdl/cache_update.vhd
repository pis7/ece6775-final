-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cache_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cache_in_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cache_in_ce0 : OUT STD_LOGIC;
    cache_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cache_out_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    cache_out_V_ce0 : OUT STD_LOGIC;
    cache_out_V_we0 : OUT STD_LOGIC;
    cache_out_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    update_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    update_0_V_ce0 : OUT STD_LOGIC;
    update_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of cache_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_28 : STD_LOGIC_VECTOR (11 downto 0) := "000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv40_FFFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111111111111";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_197_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_702 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln237_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln237_reg_707 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln234_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln203_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln203_reg_712 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln203_4_fu_279_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln203_4_reg_717 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_291_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_725 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln237_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln237_fu_340_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln237_reg_734 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln203_5_fu_371_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln203_5_reg_739 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_fu_383_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_747 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln236_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cache_out_V_addr_reg_757 : STD_LOGIC_VECTOR (13 downto 0);
    signal cache_in_load_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal man_V_4_fu_483_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_773 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln571_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_521_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_790 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_535_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln583_reg_803 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_fu_653_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_reg_809 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln603_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_4_fu_667_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_4_reg_819 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln603_4_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_4_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_144 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_155 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal select_ln603_6_fu_691_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_180_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal storemerge_reg_177 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln237_8_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_12_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_2_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_207_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln237_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln237_1_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_fu_225_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_237_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_fu_233_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_10_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_fu_249_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_fu_267_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_259_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_11_fu_275_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln237_3_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln237_1_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln237_fu_316_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_82_fu_328_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_320_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_4_fu_336_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_2_fu_303_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_fu_346_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln203_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_355_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_fu_363_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln237_7_fu_397_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln237_2_fu_401_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_6_fu_393_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_4_fu_411_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln237_5_fu_389_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_5_fu_421_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_447_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_461_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_20_fu_465_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_11_fu_473_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_3_fu_477_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_435_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_457_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_497_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_509_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_552_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_556_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln604_fu_584_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln571_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_588_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln586_fu_561_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln585_2_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_576_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln582_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_3_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_5_fu_686_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component dut_fpext_32ns_64bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dut_fpext_32ns_64bkb_U35 : component dut_fpext_32ns_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cache_in_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_144 <= i_reg_702;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_144 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_155 <= j_reg_725;
            elsif (((icmp_ln234_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_155 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_0_reg_166 <= k_reg_747;
            elsif (((icmp_ln235_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_166 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    storemerge_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                storemerge_reg_177 <= update_0_V_q0;
            elsif (((icmp_ln237_reg_730 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                storemerge_reg_177 <= select_ln603_6_fu_691_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln234_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln237_reg_707 <= add_ln237_fu_219_p2;
                    sext_ln203_reg_712(9 downto 1) <= sext_ln203_fu_255_p1(9 downto 1);
                    sub_ln203_4_reg_717(11 downto 5) <= sub_ln203_4_fu_279_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                cache_in_load_reg_767 <= cache_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                cache_out_V_addr_reg_757 <= zext_ln203_12_fu_416_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_702 <= i_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln237_reg_730 <= icmp_ln237_fu_297_p2;
                    sub_ln203_5_reg_739(14 downto 5) <= sub_ln203_5_fu_371_p2(14 downto 5);
                    sub_ln237_reg_734(13 downto 5) <= sub_ln237_fu_340_p2(13 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln571_reg_778 <= icmp_ln571_fu_491_p2;
                icmp_ln581_reg_784 <= icmp_ln581_fu_503_p2;
                icmp_ln582_reg_797 <= icmp_ln582_fu_529_p2;
                man_V_4_reg_773 <= man_V_4_fu_483_p3;
                sh_amt_reg_790 <= sh_amt_fu_521_p3;
                trunc_ln583_reg_803 <= trunc_ln583_fu_535_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_725 <= j_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_747 <= k_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                or_ln603_4_reg_824 <= or_ln603_4_fu_680_p2;
                or_ln603_reg_814 <= or_ln603_fu_661_p2;
                select_ln603_4_reg_819 <= select_ln603_4_fu_667_p3;
                select_ln603_reg_809 <= select_ln603_fu_653_p3;
            end if;
        end if;
    end process;
    sext_ln203_reg_712(0) <= '0';
    sub_ln203_4_reg_717(4 downto 0) <= "00000";
    sub_ln237_reg_734(4 downto 0) <= "00000";
    sub_ln203_5_reg_739(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln234_fu_191_p2, ap_CS_fsm_state3, icmp_ln237_reg_730, icmp_ln235_fu_285_p2, ap_CS_fsm_state4, icmp_ln236_fu_377_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln234_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln235_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln236_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln237_reg_730 = ap_const_lv1_1) and (icmp_ln236_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    F2_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_457_p1));
    add_ln203_4_fu_411_p2 <= std_logic_vector(unsigned(sub_ln203_5_reg_739) + unsigned(zext_ln237_6_fu_393_p1));
    add_ln203_5_fu_421_p2 <= std_logic_vector(unsigned(sub_ln203_4_reg_717) + unsigned(zext_ln237_5_fu_389_p1));
    add_ln203_fu_346_p2 <= std_logic_vector(signed(sext_ln203_reg_712) + signed(zext_ln237_2_fu_303_p1));
    add_ln237_1_fu_311_p2 <= std_logic_vector(unsigned(add_ln237_reg_707) + unsigned(zext_ln237_3_fu_307_p1));
    add_ln237_2_fu_401_p2 <= std_logic_vector(unsigned(sub_ln237_reg_734) + unsigned(zext_ln237_7_fu_397_p1));
    add_ln237_fu_219_p2 <= std_logic_vector(unsigned(zext_ln237_fu_203_p1) + unsigned(zext_ln237_1_fu_215_p1));
    add_ln581_fu_509_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_497_p2));
    and_ln581_fu_613_p2 <= (xor_ln582_fu_607_p2 and icmp_ln581_reg_784);
    and_ln582_fu_598_p2 <= (xor_ln571_fu_593_p2 and icmp_ln582_reg_797);
    and_ln585_2_fu_630_p2 <= (icmp_ln585_fu_542_p2 and and_ln581_fu_613_p2);
    and_ln585_fu_624_p2 <= (xor_ln585_fu_618_p2 and and_ln581_fu_613_p2);
    and_ln603_fu_647_p2 <= (xor_ln581_fu_641_p2 and icmp_ln603_fu_547_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln234_fu_191_p2)
    begin
        if ((((icmp_ln234_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_180_p4_assign_proc : process(icmp_ln237_reg_730, ap_CS_fsm_state8, select_ln603_6_fu_691_p3, storemerge_reg_177)
    begin
        if (((icmp_ln237_reg_730 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_storemerge_phi_fu_180_p4 <= select_ln603_6_fu_691_p3;
        else 
            ap_phi_mux_storemerge_phi_fu_180_p4 <= storemerge_reg_177;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln234_fu_191_p2)
    begin
        if (((icmp_ln234_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_556_p2 <= std_logic_vector(shift_right(signed(man_V_4_reg_773),to_integer(unsigned('0' & zext_ln586_fu_552_p1(31-1 downto 0)))));
    bitcast_ln696_fu_565_p1 <= cache_in_load_reg_767;
    cache_in_address0 <= zext_ln237_8_fu_406_p1(13 - 1 downto 0);

    cache_in_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache_in_ce0 <= ap_const_logic_1;
        else 
            cache_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_out_V_address0 <= cache_out_V_addr_reg_757;

    cache_out_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cache_out_V_ce0 <= ap_const_logic_1;
        else 
            cache_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_out_V_d0 <= ap_phi_mux_storemerge_phi_fu_180_p4;

    cache_out_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cache_out_V_we0 <= ap_const_logic_1;
        else 
            cache_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_447_p4 <= ireg_V_fu_431_p1(62 downto 52);
    i_fu_197_p2 <= std_logic_vector(unsigned(i_0_reg_144) + unsigned(ap_const_lv5_1));
    icmp_ln234_fu_191_p2 <= "1" when (i_0_reg_144 = ap_const_lv5_10) else "0";
    icmp_ln235_fu_285_p2 <= "1" when (j_0_reg_155 = ap_const_lv3_6) else "0";
    icmp_ln236_fu_377_p2 <= "1" when (k_0_reg_166 = ap_const_lv7_60) else "0";
    icmp_ln237_fu_297_p2 <= "1" when (j_0_reg_155 = ap_const_lv3_5) else "0";
    icmp_ln571_fu_491_p2 <= "1" when (trunc_ln556_fu_435_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_503_p2 <= "1" when (signed(F2_fu_497_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln582_fu_529_p2 <= "1" when (F2_fu_497_p2 = ap_const_lv12_10) else "0";
    icmp_ln585_fu_542_p2 <= "1" when (unsigned(sh_amt_reg_790) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_547_p2 <= "1" when (unsigned(sh_amt_reg_790) < unsigned(ap_const_lv12_28)) else "0";
    ireg_V_fu_431_p1 <= grp_fu_187_p1;
    j_fu_291_p2 <= std_logic_vector(unsigned(j_0_reg_155) + unsigned(ap_const_lv3_1));
    k_fu_383_p2 <= std_logic_vector(unsigned(k_0_reg_166) + unsigned(ap_const_lv7_1));
    man_V_3_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_11_fu_473_p1));
    man_V_4_fu_483_p3 <= 
        man_V_3_fu_477_p2 when (p_Result_s_fu_439_p3(0) = '1') else 
        p_Result_11_fu_473_p1;
    or_ln581_fu_636_p2 <= (or_ln582_fu_603_p2 or icmp_ln581_reg_784);
    or_ln582_fu_603_p2 <= (icmp_ln582_reg_797 or icmp_ln571_reg_778);
    or_ln603_3_fu_674_p2 <= (and_ln585_fu_624_p2 or and_ln582_fu_598_p2);
    or_ln603_4_fu_680_p2 <= (or_ln603_fu_661_p2 or or_ln603_3_fu_674_p2);
    or_ln603_fu_661_p2 <= (and_ln603_fu_647_p2 or and_ln585_2_fu_630_p2);
    p_Result_11_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_465_p3),54));
    p_Result_s_fu_439_p3 <= ireg_V_fu_431_p1(63 downto 63);
    p_shl5_cast_fu_355_p3 <= (trunc_ln203_fu_351_p1 & ap_const_lv7_0);
    p_shl6_cast_fu_363_p3 <= (add_ln203_fu_346_p2 & ap_const_lv5_0);
    p_shl7_cast_fu_320_p3 <= (trunc_ln237_fu_316_p1 & ap_const_lv7_0);
    select_ln588_fu_576_p3 <= 
        ap_const_lv40_FFFFFFFFFF when (tmp_84_fu_568_p3(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_4_fu_667_p3 <= 
        select_ln588_fu_576_p3 when (and_ln585_fu_624_p2(0) = '1') else 
        trunc_ln583_reg_803;
    select_ln603_5_fu_686_p3 <= 
        select_ln603_reg_809 when (or_ln603_reg_814(0) = '1') else 
        select_ln603_4_reg_819;
    select_ln603_6_fu_691_p3 <= 
        select_ln603_5_fu_686_p3 when (or_ln603_4_reg_824(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_fu_653_p3 <= 
        shl_ln604_fu_588_p2 when (and_ln603_fu_647_p2(0) = '1') else 
        trunc_ln586_fu_561_p1;
        sext_ln203_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_5_fu_421_p2),64));

        sext_ln203_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln203_fu_249_p2),10));

        sext_ln581_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_790),32));

    sh_amt_fu_521_p3 <= 
        add_ln581_fu_509_p2 when (icmp_ln581_fu_503_p2(0) = '1') else 
        sub_ln581_fu_515_p2;
    shl_ln604_fu_588_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_803),to_integer(unsigned('0' & zext_ln604_fu_584_p1(31-1 downto 0)))));
    sub_ln203_4_fu_279_p2 <= std_logic_vector(unsigned(tmp_63_fu_259_p3) - unsigned(zext_ln203_11_fu_275_p1));
    sub_ln203_5_fu_371_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_355_p3) - unsigned(p_shl6_cast_fu_363_p3));
    sub_ln203_fu_249_p2 <= std_logic_vector(unsigned(zext_ln203_fu_233_p1) - unsigned(zext_ln203_10_fu_245_p1));
    sub_ln237_fu_340_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_320_p3) - unsigned(zext_ln237_4_fu_336_p1));
    sub_ln581_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_497_p2));
    tmp_20_fu_465_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_461_p1);
    tmp_60_fu_207_p3 <= (i_0_reg_144 & ap_const_lv2_0);
    tmp_61_fu_225_p3 <= (i_0_reg_144 & ap_const_lv3_0);
    tmp_62_fu_237_p3 <= (i_0_reg_144 & ap_const_lv1_0);
    tmp_63_fu_259_p3 <= (i_0_reg_144 & ap_const_lv7_0);
    tmp_64_fu_267_p3 <= (i_0_reg_144 & ap_const_lv5_0);
    tmp_82_fu_328_p3 <= (add_ln237_1_fu_311_p2 & ap_const_lv5_0);
    tmp_84_fu_568_p3 <= bitcast_ln696_fu_565_p1(31 downto 31);
    trunc_ln203_fu_351_p1 <= add_ln203_fu_346_p2(8 - 1 downto 0);
    trunc_ln237_fu_316_p1 <= add_ln237_1_fu_311_p2(7 - 1 downto 0);
    trunc_ln556_fu_435_p1 <= ireg_V_fu_431_p1(63 - 1 downto 0);
    trunc_ln565_fu_461_p1 <= ireg_V_fu_431_p1(52 - 1 downto 0);
    trunc_ln583_fu_535_p1 <= man_V_4_fu_483_p3(40 - 1 downto 0);
    trunc_ln586_fu_561_p1 <= ashr_ln586_fu_556_p2(40 - 1 downto 0);
    update_0_V_address0 <= sext_ln203_2_fu_426_p1(11 - 1 downto 0);

    update_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            update_0_V_ce0 <= ap_const_logic_1;
        else 
            update_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_593_p2 <= (icmp_ln571_reg_778 xor ap_const_lv1_1);
    xor_ln581_fu_641_p2 <= (or_ln581_fu_636_p2 xor ap_const_lv1_1);
    xor_ln582_fu_607_p2 <= (or_ln582_fu_603_p2 xor ap_const_lv1_1);
    xor_ln585_fu_618_p2 <= (icmp_ln585_fu_542_p2 xor ap_const_lv1_1);
    zext_ln203_10_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_237_p3),9));
    zext_ln203_11_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_267_p3),12));
    zext_ln203_12_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_4_fu_411_p2),64));
    zext_ln203_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_225_p3),9));
    zext_ln237_1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_207_p3),8));
    zext_ln237_2_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_155),10));
    zext_ln237_3_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_155),8));
    zext_ln237_4_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_328_p3),14));
    zext_ln237_5_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_166),12));
    zext_ln237_6_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_166),15));
    zext_ln237_7_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_166),14));
    zext_ln237_8_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln237_2_fu_401_p2),64));
    zext_ln237_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_144),8));
    zext_ln461_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_447_p4),12));
    zext_ln586_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_539_p1),54));
    zext_ln604_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_539_p1),40));
end behav;
