-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantize_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_V_ce1 : OUT STD_LOGIC;
    input_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_states_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_states_0_V_ce0 : OUT STD_LOGIC;
    output_states_0_V_we0 : OUT STD_LOGIC;
    output_states_0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of quantize_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (66 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (66 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (66 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (66 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (66 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (66 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (66 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (66 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (66 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_29 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000101001";
    constant ap_const_lv51_7F00000000000 : STD_LOGIC_VECTOR (50 downto 0) := "111111100000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_200000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_const_lv32_FFE00000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111000000000000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_380 : STD_LOGIC_VECTOR (9 downto 0) := "1110000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j1_0_0_reg_280 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln100_fu_351_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_reg_842 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln58_1_fu_362_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_1_reg_858 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1494_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_15_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln58_2_fu_372_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_2_reg_873 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_3_fu_390_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_3_reg_888 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_3_fu_401_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_3_reg_893 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_3_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_4_fu_411_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_4_reg_903 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_5_fu_430_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_5_reg_918 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_5_fu_441_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_5_reg_923 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_5_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_5_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_6_fu_451_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_6_reg_933 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_7_fu_470_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_7_reg_948 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_7_fu_481_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_7_reg_953 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_7_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_7_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_8_fu_491_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_8_reg_963 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_9_fu_510_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_9_reg_978 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_9_fu_521_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_9_reg_983 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_9_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_9_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_10_fu_531_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_10_reg_993 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_11_fu_550_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_11_reg_1008 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_11_fu_561_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_11_reg_1013 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_11_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_11_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_12_fu_571_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_12_reg_1023 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_13_fu_590_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_13_reg_1038 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_13_fu_601_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_13_reg_1043 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_13_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_13_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_14_fu_611_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_14_reg_1053 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_15_fu_630_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln100_15_reg_1063 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln58_15_fu_641_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_15_reg_1068 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_15_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_15_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln703_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal sext_ln134_fu_684_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln134_reg_1087 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln134_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state66_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln134_reg_1092_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_reg_1092_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_reg_1092_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln134_fu_694_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln135_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_reg_1101 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_reg_1101_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_reg_1101_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_reg_1101_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input_0_V_load_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_Val2_42_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln850_fu_783_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln850_reg_1122 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_reg_1128 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state66 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_fu_339_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_2_fu_376_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_1_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_2_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_4_fu_415_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_3_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_4_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_4_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_6_fu_455_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_5_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_6_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_6_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_8_fu_495_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_7_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_8_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_8_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_10_fu_535_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_9_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_10_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_10_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_12_fu_575_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_11_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_12_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_12_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_14_fu_615_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln100_13_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_14_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_14_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_16_fu_651_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1494_16_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_17_fu_662_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_674_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_708_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_708_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln1494_17_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln107_fu_736_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln851_fu_759_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_s_fu_741_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln851_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_769_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_751_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_775_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln887_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln887_fu_814_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_811_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_674_ap_start : STD_LOGIC;
    signal grp_fu_674_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (66 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_674_p10 : STD_LOGIC_VECTOR (50 downto 0);

    component dut_udiv_51s_31nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (50 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dut_udiv_51s_31nseOg_U9 : component dut_udiv_51s_31nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 55,
        din0_WIDTH => 51,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_674_ap_start,
        done => grp_fu_674_ap_done,
        din0 => ap_const_lv51_7F00000000000,
        din1 => grp_fu_674_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_674_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state66) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state66)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state66);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j1_0_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln134_fu_688_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j1_0_0_reg_280 <= add_ln134_fu_694_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                j1_0_0_reg_280 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln134_reg_1092 <= icmp_ln134_fu_688_p2;
                icmp_ln134_reg_1092_pp0_iter1_reg <= icmp_ln134_reg_1092;
                    zext_ln135_reg_1101_pp0_iter1_reg(4 downto 0) <= zext_ln135_reg_1101(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln134_reg_1092_pp0_iter2_reg <= icmp_ln134_reg_1092_pp0_iter1_reg;
                icmp_ln134_reg_1092_pp0_iter3_reg <= icmp_ln134_reg_1092_pp0_iter2_reg;
                    zext_ln135_reg_1101_pp0_iter2_reg(4 downto 0) <= zext_ln135_reg_1101_pp0_iter1_reg(4 downto 0);
                    zext_ln135_reg_1101_pp0_iter3_reg(4 downto 0) <= zext_ln135_reg_1101_pp0_iter2_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln1494_11_reg_1018 <= icmp_ln1494_11_fu_565_p2;
                select_ln100_11_reg_1008 <= select_ln100_11_fu_550_p3;
                trunc_ln58_11_reg_1013 <= trunc_ln58_11_fu_561_p1;
                trunc_ln58_12_reg_1023 <= trunc_ln58_12_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln1494_13_reg_1048 <= icmp_ln1494_13_fu_605_p2;
                select_ln100_13_reg_1038 <= select_ln100_13_fu_590_p3;
                trunc_ln58_13_reg_1043 <= trunc_ln58_13_fu_601_p1;
                trunc_ln58_14_reg_1053 <= trunc_ln58_14_fu_611_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln1494_15_reg_1073 <= icmp_ln1494_15_fu_645_p2;
                select_ln100_15_reg_1063 <= select_ln100_15_fu_630_p3;
                trunc_ln58_15_reg_1068 <= trunc_ln58_15_fu_641_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln1494_3_reg_898 <= icmp_ln1494_3_fu_405_p2;
                select_ln100_3_reg_888 <= select_ln100_3_fu_390_p3;
                trunc_ln58_3_reg_893 <= trunc_ln58_3_fu_401_p1;
                trunc_ln58_4_reg_903 <= trunc_ln58_4_fu_411_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln1494_5_reg_928 <= icmp_ln1494_5_fu_445_p2;
                select_ln100_5_reg_918 <= select_ln100_5_fu_430_p3;
                trunc_ln58_5_reg_923 <= trunc_ln58_5_fu_441_p1;
                trunc_ln58_6_reg_933 <= trunc_ln58_6_fu_451_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln1494_7_reg_958 <= icmp_ln1494_7_fu_485_p2;
                select_ln100_7_reg_948 <= select_ln100_7_fu_470_p3;
                trunc_ln58_7_reg_953 <= trunc_ln58_7_fu_481_p1;
                trunc_ln58_8_reg_963 <= trunc_ln58_8_fu_491_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln1494_9_reg_988 <= icmp_ln1494_9_fu_525_p2;
                select_ln100_9_reg_978 <= select_ln100_9_fu_510_p3;
                trunc_ln58_10_reg_993 <= trunc_ln58_10_fu_531_p1;
                trunc_ln58_9_reg_983 <= trunc_ln58_9_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln1494_reg_863 <= icmp_ln1494_fu_366_p2;
                p_Val2_15_reg_868 <= grp_fu_327_p3;
                trunc_ln58_1_reg_858 <= trunc_ln58_1_fu_362_p1;
                trunc_ln58_2_reg_873 <= trunc_ln58_2_fu_372_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln134_reg_1092 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_0_V_load_reg_1111 <= input_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln134_reg_1092_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_42_reg_1116 <= mul_ln1118_fu_708_p2(53 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_335 <= grp_fu_305_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln100_reg_842 <= select_ln100_fu_351_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln134_reg_1092_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln850_reg_1122 <= select_ln850_fu_783_p3;
                tmp_27_reg_1128 <= select_ln850_fu_783_p3(9 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                sext_ln134_reg_1087 <= sext_ln134_fu_684_p1;
                trunc_ln703_reg_1083 <= trunc_ln703_fu_680_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln134_fu_688_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln135_reg_1101(4 downto 0) <= zext_ln135_fu_700_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln135_reg_1101(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln135_reg_1101_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln135_reg_1101_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln135_reg_1101_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln134_fu_688_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln134_fu_688_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln134_fu_688_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln107_fu_736_p2 <= std_logic_vector(unsigned(p_Val2_42_reg_1116) + unsigned(select_ln107_fu_728_p3));
    add_ln134_fu_694_p2 <= std_logic_vector(unsigned(j1_0_0_reg_280) + unsigned(ap_const_lv5_1));
    add_ln700_fu_769_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(p_Result_s_fu_741_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(65);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(66);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state66_assign_proc : process(icmp_ln134_fu_688_p2)
    begin
        if ((icmp_ln134_fu_688_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state66 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state66 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= trunc_ln703_reg_1083;
    grp_fu_291_p3 <= input_0_V_q0(31 downto 31);
    grp_fu_299_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(input_0_V_q0));
    grp_fu_305_p3 <= 
        grp_fu_299_p2 when (grp_fu_291_p3(0) = '1') else 
        input_0_V_q0;
    grp_fu_313_p3 <= input_0_V_q1(31 downto 31);
    grp_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(input_0_V_q1));
    grp_fu_327_p3 <= 
        grp_fu_321_p2 when (grp_fu_313_p3(0) = '1') else 
        input_0_V_q1;

    grp_fu_674_ap_start_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_674_ap_start <= ap_const_logic_1;
        else 
            grp_fu_674_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_674_p1 <= grp_fu_674_p10(31 - 1 downto 0);
    grp_fu_674_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_17_fu_662_p3),51));
    icmp_ln134_fu_688_p2 <= "1" when (j1_0_0_reg_280 = ap_const_lv5_10) else "0";
    icmp_ln1494_10_fu_544_p2 <= "1" when (signed(zext_ln100_9_fu_540_p1) > signed(reg_335)) else "0";
    icmp_ln1494_11_fu_565_p2 <= "1" when (signed(zext_ln100_10_fu_557_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_12_fu_584_p2 <= "1" when (signed(zext_ln100_11_fu_580_p1) > signed(reg_335)) else "0";
    icmp_ln1494_13_fu_605_p2 <= "1" when (signed(zext_ln100_12_fu_597_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_14_fu_624_p2 <= "1" when (signed(zext_ln100_13_fu_620_p1) > signed(reg_335)) else "0";
    icmp_ln1494_15_fu_645_p2 <= "1" when (signed(zext_ln100_14_fu_637_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_16_fu_656_p2 <= "1" when (unsigned(select_ln100_16_fu_651_p3) > unsigned(ap_const_lv31_29)) else "0";
    icmp_ln1494_17_fu_723_p2 <= "1" when (signed(p_Val2_42_reg_1116) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1494_2_fu_385_p2 <= "1" when (signed(zext_ln100_1_fu_381_p1) > signed(p_Val2_15_reg_868)) else "0";
    icmp_ln1494_3_fu_405_p2 <= "1" when (signed(zext_ln100_2_fu_397_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_4_fu_424_p2 <= "1" when (signed(zext_ln100_3_fu_420_p1) > signed(reg_335)) else "0";
    icmp_ln1494_5_fu_445_p2 <= "1" when (signed(zext_ln100_4_fu_437_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_6_fu_464_p2 <= "1" when (signed(zext_ln100_5_fu_460_p1) > signed(reg_335)) else "0";
    icmp_ln1494_7_fu_485_p2 <= "1" when (signed(zext_ln100_6_fu_477_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_8_fu_504_p2 <= "1" when (signed(zext_ln100_7_fu_500_p1) > signed(reg_335)) else "0";
    icmp_ln1494_9_fu_525_p2 <= "1" when (signed(zext_ln100_8_fu_517_p1) > signed(grp_fu_327_p3)) else "0";
    icmp_ln1494_fu_366_p2 <= "1" when (signed(zext_ln100_fu_359_p1) > signed(grp_fu_305_p3)) else "0";
    icmp_ln851_fu_763_p2 <= "1" when (trunc_ln851_fu_759_p1 = ap_const_lv22_0) else "0";
    icmp_ln887_fu_801_p2 <= "1" when (signed(select_ln850_reg_1122) < signed(ap_const_lv10_380)) else "0";
    icmp_ln895_fu_806_p2 <= "1" when (signed(tmp_27_reg_1128) > signed(ap_const_lv3_0)) else "0";

    input_0_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln135_fu_700_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_V_address0 <= zext_ln135_fu_700_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_0_V_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_0_V_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_0_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_0_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            input_0_V_address0 <= "XXXX";
        end if; 
    end process;


    input_0_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_0_V_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_0_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_0_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_0_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_0_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            input_0_V_address1 <= "XXXX";
        end if; 
    end process;


    input_0_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_0_V_ce1 <= ap_const_logic_1;
        else 
            input_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_fu_708_p0 <= sext_ln134_reg_1087(32 - 1 downto 0);
    mul_ln1118_fu_708_p1 <= input_0_V_load_reg_1111;
    mul_ln1118_fu_708_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_708_p0) * signed(mul_ln1118_fu_708_p1))), 54));
    or_ln887_fu_822_p2 <= (icmp_ln895_fu_806_p2 or icmp_ln887_fu_801_p2);
    output_states_0_V_address0 <= zext_ln135_reg_1101_pp0_iter3_reg(4 - 1 downto 0);

    output_states_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_states_0_V_ce0 <= ap_const_logic_1;
        else 
            output_states_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_states_0_V_d0 <= 
        select_ln887_fu_814_p3 when (or_ln887_fu_822_p2(0) = '1') else 
        trunc_ln136_fu_811_p1;

    output_states_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln134_reg_1092_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((icmp_ln134_reg_1092_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_states_0_V_we0 <= ap_const_logic_1;
        else 
            output_states_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_741_p4 <= add_ln107_fu_736_p2(31 downto 22);
    select_ln100_10_fu_535_p3 <= 
        select_ln100_9_reg_978 when (icmp_ln1494_9_reg_988(0) = '1') else 
        trunc_ln58_9_reg_983;
    select_ln100_11_fu_550_p3 <= 
        select_ln100_10_fu_535_p3 when (icmp_ln1494_10_fu_544_p2(0) = '1') else 
        trunc_ln58_10_reg_993;
    select_ln100_12_fu_575_p3 <= 
        select_ln100_11_reg_1008 when (icmp_ln1494_11_reg_1018(0) = '1') else 
        trunc_ln58_11_reg_1013;
    select_ln100_13_fu_590_p3 <= 
        select_ln100_12_fu_575_p3 when (icmp_ln1494_12_fu_584_p2(0) = '1') else 
        trunc_ln58_12_reg_1023;
    select_ln100_14_fu_615_p3 <= 
        select_ln100_13_reg_1038 when (icmp_ln1494_13_reg_1048(0) = '1') else 
        trunc_ln58_13_reg_1043;
    select_ln100_15_fu_630_p3 <= 
        select_ln100_14_fu_615_p3 when (icmp_ln1494_14_fu_624_p2(0) = '1') else 
        trunc_ln58_14_reg_1053;
    select_ln100_16_fu_651_p3 <= 
        select_ln100_15_reg_1063 when (icmp_ln1494_15_reg_1073(0) = '1') else 
        trunc_ln58_15_reg_1068;
    select_ln100_17_fu_662_p3 <= 
        select_ln100_16_fu_651_p3 when (icmp_ln1494_16_fu_656_p2(0) = '1') else 
        ap_const_lv31_29;
    select_ln100_2_fu_376_p3 <= 
        select_ln100_reg_842 when (icmp_ln1494_reg_863(0) = '1') else 
        trunc_ln58_1_reg_858;
    select_ln100_3_fu_390_p3 <= 
        select_ln100_2_fu_376_p3 when (icmp_ln1494_2_fu_385_p2(0) = '1') else 
        trunc_ln58_2_reg_873;
    select_ln100_4_fu_415_p3 <= 
        select_ln100_3_reg_888 when (icmp_ln1494_3_reg_898(0) = '1') else 
        trunc_ln58_3_reg_893;
    select_ln100_5_fu_430_p3 <= 
        select_ln100_4_fu_415_p3 when (icmp_ln1494_4_fu_424_p2(0) = '1') else 
        trunc_ln58_4_reg_903;
    select_ln100_6_fu_455_p3 <= 
        select_ln100_5_reg_918 when (icmp_ln1494_5_reg_928(0) = '1') else 
        trunc_ln58_5_reg_923;
    select_ln100_7_fu_470_p3 <= 
        select_ln100_6_fu_455_p3 when (icmp_ln1494_6_fu_464_p2(0) = '1') else 
        trunc_ln58_6_reg_933;
    select_ln100_8_fu_495_p3 <= 
        select_ln100_7_reg_948 when (icmp_ln1494_7_reg_958(0) = '1') else 
        trunc_ln58_7_reg_953;
    select_ln100_9_fu_510_p3 <= 
        select_ln100_8_fu_495_p3 when (icmp_ln1494_8_fu_504_p2(0) = '1') else 
        trunc_ln58_8_reg_963;
    select_ln100_fu_351_p3 <= 
        ap_const_lv31_0 when (tmp_10_fu_343_p3(0) = '1') else 
        trunc_ln58_fu_339_p1;
    select_ln107_fu_728_p3 <= 
        ap_const_lv32_200000 when (icmp_ln1494_17_fu_723_p2(0) = '1') else 
        ap_const_lv32_FFE00000;
    select_ln850_fu_783_p3 <= 
        select_ln851_fu_775_p3 when (tmp_26_fu_751_p3(0) = '1') else 
        p_Result_s_fu_741_p4;
    select_ln851_fu_775_p3 <= 
        p_Result_s_fu_741_p4 when (icmp_ln851_fu_763_p2(0) = '1') else 
        add_ln700_fu_769_p2;
    select_ln887_fu_814_p3 <= 
        ap_const_lv8_80 when (icmp_ln887_fu_801_p2(0) = '1') else 
        ap_const_lv8_7F;
        sext_ln134_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln703_fu_680_p1),54));

    tmp_10_fu_343_p3 <= grp_fu_305_p3(31 downto 31);
    tmp_26_fu_751_p3 <= add_ln107_fu_736_p2(31 downto 31);
    trunc_ln136_fu_811_p1 <= select_ln850_reg_1122(8 - 1 downto 0);
    trunc_ln58_10_fu_531_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_11_fu_561_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_12_fu_571_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_13_fu_601_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_14_fu_611_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_15_fu_641_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_1_fu_362_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_2_fu_372_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_3_fu_401_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_4_fu_411_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_5_fu_441_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_6_fu_451_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_7_fu_481_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_8_fu_491_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln58_9_fu_521_p1 <= grp_fu_327_p3(31 - 1 downto 0);
    trunc_ln58_fu_339_p1 <= grp_fu_305_p3(31 - 1 downto 0);
    trunc_ln703_fu_680_p1 <= grp_fu_674_p2(32 - 1 downto 0);
    trunc_ln851_fu_759_p1 <= add_ln107_fu_736_p2(22 - 1 downto 0);
    zext_ln100_10_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_11_fu_550_p3),32));
    zext_ln100_11_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_12_fu_575_p3),32));
    zext_ln100_12_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_13_fu_590_p3),32));
    zext_ln100_13_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_14_fu_615_p3),32));
    zext_ln100_14_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_15_fu_630_p3),32));
    zext_ln100_1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_2_fu_376_p3),32));
    zext_ln100_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_3_fu_390_p3),32));
    zext_ln100_3_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_4_fu_415_p3),32));
    zext_ln100_4_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_5_fu_430_p3),32));
    zext_ln100_5_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_6_fu_455_p3),32));
    zext_ln100_6_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_7_fu_470_p3),32));
    zext_ln100_7_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_8_fu_495_p3),32));
    zext_ln100_8_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_9_fu_510_p3),32));
    zext_ln100_9_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_10_fu_535_p3),32));
    zext_ln100_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_reg_842),32));
    zext_ln135_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_0_reg_280),64));
end behav;
