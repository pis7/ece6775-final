-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GEMM_3D_float is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_1_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_1_0_V_ce0 : OUT STD_LOGIC;
    input_1_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_2_V_ce0 : OUT STD_LOGIC;
    input_2_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of GEMM_3D_float is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_164_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_358 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln1116_fu_200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1116_reg_363 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln271_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln203_reg_368 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln273_fu_236_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln273_reg_376 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln203_14_fu_242_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_14_reg_381 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln273_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_0_V_addr_reg_386 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln275_fu_266_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln275_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln1116_fu_276_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_reg_399 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln275_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1117_fu_307_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1117_reg_404 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_1_0_V_load_reg_419 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_2_V_load_reg_424 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_326_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_reg_429 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_0_reg_123 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_0_V_load_reg_134 : STD_LOGIC_VECTOR (39 downto 0);
    signal l_0_0_reg_147 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln203_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_2_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_170_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_78_fu_182_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_178_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1116_5_fu_190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1116_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_80_fu_212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_79_fu_204_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_15_fu_246_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_6_fu_272_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1117_fu_281_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_285_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_293_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1117_fu_301_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1192_fu_326_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_326_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal shl_ln_fu_332_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_fu_340_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln273_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_112 <= i_reg_358;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln275_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_0_0_reg_123 <= add_ln273_reg_376;
            elsif (((icmp_ln271_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_0_reg_123 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    l_0_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                l_0_0_reg_147 <= add_ln275_reg_394;
            elsif (((icmp_ln273_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                l_0_0_reg_147 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    output_0_V_load_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                output_0_V_load_reg_134 <= add_ln1192_fu_340_p2(55 downto 16);
            elsif (((icmp_ln273_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                output_0_V_load_reg_134 <= ap_const_lv40_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln275_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln1116_reg_399 <= add_ln1116_fu_276_p2;
                add_ln1117_reg_404 <= add_ln1117_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln273_reg_376 <= add_ln273_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln275_reg_394 <= add_ln275_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_358 <= i_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_1_0_V_load_reg_419 <= input_1_0_V_q0;
                input_2_V_load_reg_424 <= input_2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln1192_reg_429 <= mul_ln1192_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln273_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_0_V_addr_reg_386 <= sext_ln203_fu_255_p1(9 - 1 downto 0);
                    zext_ln203_14_reg_381(5 downto 0) <= zext_ln203_14_fu_242_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln271_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln1116_reg_363(8 downto 1) <= sext_ln1116_fu_200_p1(8 downto 1);
                    sub_ln203_reg_368(9 downto 4) <= sub_ln203_fu_224_p2(9 downto 4);
            end if;
        end if;
    end process;
    sext_ln1116_reg_363(0) <= '0';
    sub_ln203_reg_368(3 downto 0) <= "0000";
    zext_ln203_14_reg_381(12 downto 6) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln271_fu_158_p2, ap_CS_fsm_state3, icmp_ln273_fu_230_p2, ap_CS_fsm_state4, icmp_ln275_fu_260_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln271_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln273_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln275_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln1116_fu_276_p2 <= std_logic_vector(signed(sext_ln1116_reg_363) + signed(zext_ln1116_6_fu_272_p1));
    add_ln1117_fu_307_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_301_p2) + unsigned(zext_ln203_14_reg_381));
    add_ln1192_fu_340_p2 <= std_logic_vector(unsigned(mul_ln1192_reg_429) + unsigned(shl_ln_fu_332_p3));
    add_ln203_fu_250_p2 <= std_logic_vector(unsigned(sub_ln203_reg_368) + unsigned(zext_ln203_15_fu_246_p1));
    add_ln273_fu_236_p2 <= std_logic_vector(unsigned(k_0_0_reg_123) + unsigned(ap_const_lv6_1));
    add_ln275_fu_266_p2 <= std_logic_vector(unsigned(l_0_0_reg_147) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln271_fu_158_p2)
    begin
        if ((((icmp_ln271_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln271_fu_158_p2)
    begin
        if (((icmp_ln271_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_164_p2 <= std_logic_vector(unsigned(i_0_reg_112) + unsigned(ap_const_lv4_1));
    icmp_ln271_fu_158_p2 <= "1" when (i_0_reg_112 = ap_const_lv4_8) else "0";
    icmp_ln273_fu_230_p2 <= "1" when (k_0_0_reg_123 = ap_const_lv6_30) else "0";
    icmp_ln275_fu_260_p2 <= "1" when (l_0_0_reg_147 = ap_const_lv3_6) else "0";
    input_1_0_V_address0 <= sext_ln1116_2_fu_312_p1(6 - 1 downto 0);

    input_1_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_1_0_V_ce0 <= ap_const_logic_1;
        else 
            input_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_V_address0 <= zext_ln1117_fu_316_p1(12 - 1 downto 0);

    input_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1192_fu_326_p0 <= input_2_V_load_reg_424;
    mul_ln1192_fu_326_p1 <= input_1_0_V_load_reg_419;
    mul_ln1192_fu_326_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_326_p0) * signed(mul_ln1192_fu_326_p1))), 56));
    output_0_V_address0 <= output_0_V_addr_reg_386;

    output_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= output_0_V_load_reg_134;

    output_0_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_285_p3 <= (trunc_ln1117_fu_281_p1 & ap_const_lv6_0);
    p_shl5_cast_fu_293_p3 <= (add_ln1116_fu_276_p2 & ap_const_lv4_0);
        sext_ln1116_2_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_reg_399),64));

        sext_ln1116_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_194_p2),9));

        sext_ln203_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_250_p2),64));

    shl_ln_fu_332_p3 <= (output_0_V_load_reg_134 & ap_const_lv16_0);
    sub_ln1116_fu_194_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_178_p1) - unsigned(zext_ln1116_5_fu_190_p1));
    sub_ln1117_fu_301_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_285_p3) - unsigned(p_shl5_cast_fu_293_p3));
    sub_ln203_fu_224_p2 <= std_logic_vector(unsigned(tmp_79_fu_204_p3) - unsigned(zext_ln203_fu_220_p1));
    tmp_77_fu_170_p3 <= (i_0_reg_112 & ap_const_lv3_0);
    tmp_78_fu_182_p3 <= (i_0_reg_112 & ap_const_lv1_0);
    tmp_79_fu_204_p3 <= (i_0_reg_112 & ap_const_lv6_0);
    tmp_80_fu_212_p3 <= (i_0_reg_112 & ap_const_lv4_0);
    trunc_ln1117_fu_281_p1 <= add_ln1116_fu_276_p2(7 - 1 downto 0);
    zext_ln1116_5_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_182_p3),8));
    zext_ln1116_6_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_0_reg_147),9));
    zext_ln1116_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_170_p3),8));
    zext_ln1117_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_reg_404),64));
    zext_ln203_14_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_123),13));
    zext_ln203_15_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_123),10));
    zext_ln203_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_212_p3),10));
end behav;
