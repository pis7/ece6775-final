-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_rotary_pos_emb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_q_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_q_0_V_ce0 : OUT STD_LOGIC;
    input_q_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_q_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_q_0_V_ce1 : OUT STD_LOGIC;
    input_q_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_k_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_k_0_V_ce0 : OUT STD_LOGIC;
    input_k_0_V_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    input_k_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_k_0_V_ce1 : OUT STD_LOGIC;
    input_k_0_V_q1 : IN STD_LOGIC_VECTOR (39 downto 0);
    output_q_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_q_0_V_ce0 : OUT STD_LOGIC;
    output_q_0_V_we0 : OUT STD_LOGIC;
    output_q_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    output_k_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_k_0_V_ce0 : OUT STD_LOGIC;
    output_k_0_V_we0 : OUT STD_LOGIC;
    output_k_0_V_d0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of apply_rotary_pos_emb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1E0 : STD_LOGIC_VECTOR (9 downto 0) := "0111100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_28 : STD_LOGIC_VECTOR (11 downto 0) := "000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv40_FFFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_tab_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal cos_tab_ce0 : STD_LOGIC;
    signal cos_tab_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_tab_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_tab_ce0 : STD_LOGIC;
    signal sin_tab_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_342 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_346 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1147 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln1265_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1265_reg_1152 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln201_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_reg_1161 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln203_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_reg_1166 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln203_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1265_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1265_reg_1182 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1201 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1116_fu_486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1116_reg_1206 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln213_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln215_fu_498_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln215_reg_1214 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln215_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_fu_524_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1116_reg_1229 : STD_LOGIC_VECTOR (11 downto 0);
    signal cos_tab_load_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sin_tab_load_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln570_fu_581_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln570_reg_1246 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln571_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln581_fu_619_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln581_reg_1263 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_633_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln583_reg_1276 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln570_1_fu_689_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln570_1_reg_1282 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln571_1_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_1_reg_1287 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_1_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_1_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln581_1_fu_727_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln581_1_reg_1299 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_reg_1306 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_1_fu_741_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln583_1_reg_1312 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1116_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_reg_1318 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln603_fu_866_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_reg_1344 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln603_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1349 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_7_fu_880_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_7_reg_1354 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln603_6_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_6_reg_1359 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_10_fu_1013_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_10_reg_1364 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln603_7_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_7_reg_1369 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_11_fu_1027_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_11_reg_1374 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln603_9_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_9_reg_1379 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_9_fu_1051_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_9_reg_1384 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_13_fu_1063_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_13_reg_1389 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_q_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_q_0_V_load_reg_1394 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_load_reg_1399 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_fu_1083_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln703_reg_1404 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln1192_fu_1089_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_reg_1409 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln703_1_fu_1102_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln703_1_reg_1414 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_1_fu_1108_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_1_reg_1419 : STD_LOGIC_VECTOR (55 downto 0);
    signal rotated_q_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal rotated_q_0_V_ce0 : STD_LOGIC;
    signal rotated_q_0_V_we0 : STD_LOGIC;
    signal rotated_q_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rotated_k_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal rotated_k_0_V_ce0 : STD_LOGIC;
    signal rotated_k_0_V_we0 : STD_LOGIC;
    signal rotated_k_0_V_d0 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_0_reg_290 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_0_reg_301 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i14_0_reg_312 : STD_LOGIC_VECTOR (4 downto 0);
    signal k16_0_0_reg_323 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln217_2_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln703_fu_440_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln703_34_fu_447_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_70_fu_370_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_69_fu_362_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1265_fu_378_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_13_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_6_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln204_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1265_3_fu_425_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1265_fu_429_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_72_fu_474_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1116_fu_482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln217_1_fu_508_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln217_fu_512_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln217_fu_504_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln696_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_545_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_559_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_22_fu_563_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_571_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_88_fu_537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_575_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln557_fu_533_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_555_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln575_fu_595_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_607_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_613_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln696_2_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_7_fu_653_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_1_fu_667_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_23_fu_671_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_1_fu_679_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_90_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_1_fu_683_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln557_1_fu_641_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_1_fu_663_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln575_1_fu_703_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_1_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_721_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_765_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_769_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_1_fu_778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_781_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln604_fu_797_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln571_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_801_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln586_fu_774_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln585_3_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_789_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln582_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_5_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_1_fu_899_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_912_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_916_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_3_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_928_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln604_1_fu_944_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal xor_ln571_1_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_1_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_1_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_948_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln586_1_fu_921_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln585_5_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_4_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_1_fu_936_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln582_1_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_8_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_8_fu_1046_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln603_12_fu_1058_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_fu_1083_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_fu_1083_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_2_fu_1074_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln1192_fu_1089_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_fu_1089_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1118_4_fu_1080_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln703_1_fu_1102_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln703_1_fu_1102_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_1_fu_1108_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1192_1_fu_1108_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln1192_fu_1114_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_1_fu_1129_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component dut_fpext_32ns_64bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component apply_rotary_pos_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component apply_rotary_pos_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component apply_rotary_pos_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (39 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    cos_tab_U : component apply_rotary_pos_hbi
    generic map (
        DataWidth => 32,
        AddressRange => 196608,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_tab_address0,
        ce0 => cos_tab_ce0,
        q0 => cos_tab_q0);

    sin_tab_U : component apply_rotary_pos_ibs
    generic map (
        DataWidth => 32,
        AddressRange => 196608,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_tab_address0,
        ce0 => sin_tab_ce0,
        q0 => sin_tab_q0);

    rotated_q_0_V_U : component apply_rotary_pos_jbC
    generic map (
        DataWidth => 40,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_q_0_V_address0,
        ce0 => rotated_q_0_V_ce0,
        we0 => rotated_q_0_V_we0,
        d0 => rotated_q_0_V_d0,
        q0 => rotated_q_0_V_q0);

    rotated_k_0_V_U : component apply_rotary_pos_jbC
    generic map (
        DataWidth => 40,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_k_0_V_address0,
        ce0 => rotated_k_0_V_ce0,
        we0 => rotated_k_0_V_we0,
        d0 => rotated_k_0_V_d0,
        q0 => rotated_k_0_V_q0);

    dut_fpext_32ns_64bkb_U26 : component dut_fpext_32ns_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_tab_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_334_p1);

    dut_fpext_32ns_64bkb_U27 : component dut_fpext_32ns_64bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_tab_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i14_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln201_fu_350_p2 = ap_const_lv1_1))) then 
                i14_0_reg_312 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln215_fu_492_p2 = ap_const_lv1_1))) then 
                i14_0_reg_312 <= i_2_reg_1201;
            end if; 
        end if;
    end process;

    i_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_290 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln203_fu_392_p2 = ap_const_lv1_1))) then 
                i_0_reg_290 <= i_reg_1147;
            end if; 
        end if;
    end process;

    k16_0_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k16_0_0_reg_323 <= add_ln215_reg_1214;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_454_p2 = ap_const_lv1_0))) then 
                k16_0_0_reg_323 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_0_reg_301 <= add_ln203_reg_1161;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln201_fu_350_p2 = ap_const_lv1_0))) then 
                k_0_0_reg_301 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln215_fu_492_p2 = ap_const_lv1_0))) then
                add_ln1116_reg_1229 <= add_ln1116_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln203_reg_1161 <= add_ln203_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln215_reg_1214 <= add_ln215_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                cos_tab_load_reg_1234 <= cos_tab_q0;
                sin_tab_load_reg_1240 <= sin_tab_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_1201 <= i_2_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1147 <= i_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln571_1_reg_1287 <= icmp_ln571_1_fu_697_p2;
                icmp_ln571_reg_1251 <= icmp_ln571_fu_589_p2;
                icmp_ln581_1_reg_1293 <= icmp_ln581_1_fu_709_p2;
                icmp_ln581_reg_1257 <= icmp_ln581_fu_601_p2;
                icmp_ln582_1_reg_1306 <= icmp_ln582_1_fu_735_p2;
                icmp_ln582_reg_1270 <= icmp_ln582_fu_627_p2;
                select_ln570_1_reg_1282 <= select_ln570_1_fu_689_p3;
                select_ln570_reg_1246 <= select_ln570_fu_581_p3;
                select_ln581_1_reg_1299 <= select_ln581_1_fu_727_p3;
                select_ln581_reg_1263 <= select_ln581_fu_619_p3;
                trunc_ln583_1_reg_1312 <= trunc_ln583_1_fu_741_p1;
                trunc_ln583_reg_1276 <= trunc_ln583_fu_633_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln1192_1_reg_1419 <= mul_ln1192_1_fu_1108_p2;
                mul_ln1192_reg_1409 <= mul_ln1192_fu_1089_p2;
                mul_ln703_1_reg_1414 <= mul_ln703_1_fu_1102_p2;
                mul_ln703_reg_1404 <= mul_ln703_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                or_ln603_6_reg_1359 <= or_ln603_6_fu_893_p2;
                or_ln603_7_reg_1369 <= or_ln603_7_fu_1021_p2;
                or_ln603_9_reg_1379 <= or_ln603_9_fu_1040_p2;
                or_ln603_reg_1349 <= or_ln603_fu_874_p2;
                select_ln603_10_reg_1364 <= select_ln603_10_fu_1013_p3;
                select_ln603_11_reg_1374 <= select_ln603_11_fu_1027_p3;
                select_ln603_7_reg_1354 <= select_ln603_7_fu_880_p3;
                select_ln603_reg_1344 <= select_ln603_fu_866_p3;
                sext_ln1116_reg_1318 <= sext_ln1116_fu_745_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_342 <= input_q_0_V_q0;
                reg_346 <= input_k_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                rotated_k_0_V_load_reg_1399 <= rotated_k_0_V_q0;
                rotated_q_0_V_load_reg_1394 <= rotated_q_0_V_q0;
                select_ln603_13_reg_1389 <= select_ln603_13_fu_1063_p3;
                select_ln603_9_reg_1384 <= select_ln603_9_fu_1051_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln203_fu_392_p2 = ap_const_lv1_0))) then
                sext_ln1265_reg_1182 <= sext_ln1265_fu_434_p1;
                sext_ln203_reg_1166 <= sext_ln203_fu_413_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_454_p2 = ap_const_lv1_0))) then
                    sub_ln1116_reg_1206(11 downto 5) <= sub_ln1116_fu_486_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln201_fu_350_p2 = ap_const_lv1_0))) then
                    sub_ln1265_reg_1152(11 downto 5) <= sub_ln1265_fu_382_p2(11 downto 5);
            end if;
        end if;
    end process;
    sub_ln1265_reg_1152(4 downto 0) <= "00000";
    sub_ln1116_reg_1206(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln201_fu_350_p2, ap_CS_fsm_state3, icmp_ln203_fu_392_p2, ap_CS_fsm_state6, icmp_ln213_fu_454_p2, ap_CS_fsm_state7, icmp_ln215_fu_492_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln201_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln203_fu_392_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln215_fu_492_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1116_fu_524_p2 <= std_logic_vector(unsigned(sub_ln1116_reg_1206) + unsigned(zext_ln217_fu_504_p1));
    add_ln1192_1_fu_1129_p2 <= std_logic_vector(unsigned(mul_ln1192_1_reg_1419) + unsigned(mul_ln703_1_reg_1414));
    add_ln1192_fu_1114_p2 <= std_logic_vector(unsigned(mul_ln1192_reg_1409) + unsigned(mul_ln703_reg_1404));
    add_ln1265_fu_429_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_1152) + unsigned(zext_ln1265_3_fu_425_p1));
    add_ln203_6_fu_408_p2 <= std_logic_vector(unsigned(sub_ln1265_reg_1152) + unsigned(zext_ln203_13_fu_404_p1));
    add_ln203_fu_398_p2 <= std_logic_vector(unsigned(k_0_0_reg_301) + unsigned(ap_const_lv6_1));
    add_ln204_fu_419_p2 <= std_logic_vector(unsigned(zext_ln203_fu_388_p1) + unsigned(ap_const_lv7_30));
    add_ln215_fu_498_p2 <= std_logic_vector(unsigned(k16_0_0_reg_323) + unsigned(ap_const_lv7_1));
    add_ln217_fu_512_p2 <= std_logic_vector(unsigned(ap_const_lv10_1E0) + unsigned(zext_ln217_1_fu_508_p1));
    add_ln581_1_fu_715_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(sub_ln575_1_fu_703_p2));
    add_ln581_fu_607_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(sub_ln575_fu_595_p2));
    and_ln581_1_fu_973_p2 <= (xor_ln582_1_fu_967_p2 and icmp_ln581_1_reg_1293);
    and_ln581_fu_826_p2 <= (xor_ln582_fu_820_p2 and icmp_ln581_reg_1257);
    and_ln582_1_fu_958_p2 <= (xor_ln571_1_fu_953_p2 and icmp_ln582_1_reg_1306);
    and_ln582_fu_811_p2 <= (xor_ln571_fu_806_p2 and icmp_ln582_reg_1270);
    and_ln585_3_fu_843_p2 <= (icmp_ln585_fu_755_p2 and and_ln581_fu_826_p2);
    and_ln585_4_fu_984_p2 <= (xor_ln585_1_fu_978_p2 and and_ln581_1_fu_973_p2);
    and_ln585_5_fu_990_p2 <= (icmp_ln585_1_fu_902_p2 and and_ln581_1_fu_973_p2);
    and_ln585_fu_837_p2 <= (xor_ln585_fu_831_p2 and and_ln581_fu_826_p2);
    and_ln603_1_fu_1007_p2 <= (xor_ln581_1_fu_1001_p2 and icmp_ln603_1_fu_907_p2);
    and_ln603_fu_860_p2 <= (xor_ln581_fu_854_p2 and icmp_ln603_fu_760_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln213_fu_454_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_454_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln213_fu_454_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln213_fu_454_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_916_p2 <= std_logic_vector(shift_right(signed(select_ln570_1_reg_1282),to_integer(unsigned('0' & zext_ln586_1_fu_912_p1(31-1 downto 0)))));
    ashr_ln586_fu_769_p2 <= std_logic_vector(shift_right(signed(select_ln570_reg_1246),to_integer(unsigned('0' & zext_ln586_fu_765_p1(31-1 downto 0)))));
    bitcast_ln696_1_fu_778_p1 <= cos_tab_load_reg_1234;
    bitcast_ln696_2_fu_637_p1 <= grp_fu_338_p1;
    bitcast_ln696_3_fu_925_p1 <= sin_tab_load_reg_1240;
    bitcast_ln696_fu_529_p1 <= grp_fu_334_p1;
    cos_tab_address0 <= zext_ln217_2_fu_518_p1(18 - 1 downto 0);

    cos_tab_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cos_tab_ce0 <= ap_const_logic_1;
        else 
            cos_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_460_p2 <= std_logic_vector(unsigned(i14_0_reg_312) + unsigned(ap_const_lv5_1));
    i_fu_356_p2 <= std_logic_vector(unsigned(i_0_reg_290) + unsigned(ap_const_lv5_1));
    icmp_ln201_fu_350_p2 <= "1" when (i_0_reg_290 = ap_const_lv5_10) else "0";
    icmp_ln203_fu_392_p2 <= "1" when (k_0_0_reg_301 = ap_const_lv6_30) else "0";
    icmp_ln213_fu_454_p2 <= "1" when (i14_0_reg_312 = ap_const_lv5_10) else "0";
    icmp_ln215_fu_492_p2 <= "1" when (k16_0_0_reg_323 = ap_const_lv7_60) else "0";
    icmp_ln571_1_fu_697_p2 <= "1" when (trunc_ln557_1_fu_641_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_589_p2 <= "1" when (trunc_ln557_fu_533_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_709_p2 <= "1" when (signed(sub_ln575_1_fu_703_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln581_fu_601_p2 <= "1" when (signed(sub_ln575_fu_595_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln582_1_fu_735_p2 <= "1" when (sub_ln575_1_fu_703_p2 = ap_const_lv12_10) else "0";
    icmp_ln582_fu_627_p2 <= "1" when (sub_ln575_fu_595_p2 = ap_const_lv12_10) else "0";
    icmp_ln585_1_fu_902_p2 <= "1" when (unsigned(select_ln581_1_reg_1299) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_755_p2 <= "1" when (unsigned(select_ln581_reg_1263) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_907_p2 <= "1" when (unsigned(select_ln581_1_reg_1299) < unsigned(ap_const_lv12_28)) else "0";
    icmp_ln603_fu_760_p2 <= "1" when (unsigned(select_ln581_reg_1263) < unsigned(ap_const_lv12_28)) else "0";

    input_k_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_434_p1, sext_ln1116_fu_745_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_k_0_V_address0 <= sext_ln1116_fu_745_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_address0 <= sext_ln1265_fu_434_p1(11 - 1 downto 0);
        else 
            input_k_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    input_k_0_V_address1 <= sext_ln203_fu_413_p1(11 - 1 downto 0);

    input_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_k_0_V_ce0 <= ap_const_logic_1;
        else 
            input_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_k_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_k_0_V_ce1 <= ap_const_logic_1;
        else 
            input_k_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_address0_assign_proc : process(ap_CS_fsm_state3, sext_ln1265_fu_434_p1, sext_ln1116_fu_745_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_q_0_V_address0 <= sext_ln1116_fu_745_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_address0 <= sext_ln1265_fu_434_p1(11 - 1 downto 0);
        else 
            input_q_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    input_q_0_V_address1 <= sext_ln203_fu_413_p1(11 - 1 downto 0);

    input_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_q_0_V_ce0 <= ap_const_logic_1;
        else 
            input_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_q_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_q_0_V_ce1 <= ap_const_logic_1;
        else 
            input_q_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1192_1_fu_1108_p0 <= rotated_k_0_V_load_reg_1399;
    mul_ln1192_1_fu_1108_p1 <= sext_ln1118_4_fu_1080_p1(40 - 1 downto 0);
    mul_ln1192_1_fu_1108_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_1_fu_1108_p0) * signed(mul_ln1192_1_fu_1108_p1))), 56));
    mul_ln1192_fu_1089_p0 <= rotated_q_0_V_load_reg_1394;
    mul_ln1192_fu_1089_p1 <= sext_ln1118_4_fu_1080_p1(40 - 1 downto 0);
    mul_ln1192_fu_1089_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1192_fu_1089_p0) * signed(mul_ln1192_fu_1089_p1))), 56));
    mul_ln703_1_fu_1102_p0 <= reg_346;
    mul_ln703_1_fu_1102_p1 <= sext_ln1118_2_fu_1074_p1(40 - 1 downto 0);
    mul_ln703_1_fu_1102_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln703_1_fu_1102_p0) * signed(mul_ln703_1_fu_1102_p1))), 56));
    mul_ln703_fu_1083_p0 <= reg_342;
    mul_ln703_fu_1083_p1 <= sext_ln1118_2_fu_1074_p1(40 - 1 downto 0);
    mul_ln703_fu_1083_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln703_fu_1083_p0) * signed(mul_ln703_fu_1083_p1))), 56));
    or_ln581_1_fu_996_p2 <= (or_ln582_1_fu_963_p2 or icmp_ln581_1_reg_1293);
    or_ln581_fu_849_p2 <= (or_ln582_fu_816_p2 or icmp_ln581_reg_1257);
    or_ln582_1_fu_963_p2 <= (icmp_ln582_1_reg_1306 or icmp_ln571_1_reg_1287);
    or_ln582_fu_816_p2 <= (icmp_ln582_reg_1270 or icmp_ln571_reg_1251);
    or_ln603_5_fu_887_p2 <= (and_ln585_fu_837_p2 or and_ln582_fu_811_p2);
    or_ln603_6_fu_893_p2 <= (or_ln603_fu_874_p2 or or_ln603_5_fu_887_p2);
    or_ln603_7_fu_1021_p2 <= (and_ln603_1_fu_1007_p2 or and_ln585_5_fu_990_p2);
    or_ln603_8_fu_1034_p2 <= (and_ln585_4_fu_984_p2 or and_ln582_1_fu_958_p2);
    or_ln603_9_fu_1040_p2 <= (or_ln603_8_fu_1034_p2 or or_ln603_7_fu_1021_p2);
    or_ln603_fu_874_p2 <= (and_ln603_fu_860_p2 or and_ln585_3_fu_843_p2);
    output_k_0_V_address0 <= sext_ln1116_reg_1318(11 - 1 downto 0);

    output_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_k_0_V_ce0 <= ap_const_logic_1;
        else 
            output_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_k_0_V_d0 <= add_ln1192_1_fu_1129_p2(55 downto 16);

    output_k_0_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_k_0_V_we0 <= ap_const_logic_1;
        else 
            output_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_V_address0 <= sext_ln1116_reg_1318(11 - 1 downto 0);

    output_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_q_0_V_ce0 <= ap_const_logic_1;
        else 
            output_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_q_0_V_d0 <= add_ln1192_fu_1114_p2(55 downto 16);

    output_q_0_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_q_0_V_we0 <= ap_const_logic_1;
        else 
            output_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_7_fu_653_p4 <= bitcast_ln696_2_fu_637_p1(62 downto 52);
    p_Result_s_fu_545_p4 <= bitcast_ln696_fu_529_p1(62 downto 52);

    rotated_k_0_V_address0_assign_proc : process(ap_CS_fsm_state4, sext_ln203_reg_1166, sext_ln1265_reg_1182, sext_ln1116_fu_745_p1, ap_CS_fsm_state10, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rotated_k_0_V_address0 <= sext_ln1116_fu_745_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_V_address0 <= sext_ln203_reg_1166(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_address0 <= sext_ln1265_reg_1182(11 - 1 downto 0);
        else 
            rotated_k_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            rotated_k_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_V_d0_assign_proc : process(input_k_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln703_34_fu_447_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_V_d0 <= sub_ln703_34_fu_447_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_k_0_V_d0 <= input_k_0_V_q1;
        else 
            rotated_k_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            rotated_k_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_k_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_address0_assign_proc : process(ap_CS_fsm_state4, sext_ln203_reg_1166, sext_ln1265_reg_1182, sext_ln1116_fu_745_p1, ap_CS_fsm_state10, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rotated_q_0_V_address0 <= sext_ln1116_fu_745_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_q_0_V_address0 <= sext_ln203_reg_1166(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_address0 <= sext_ln1265_reg_1182(11 - 1 downto 0);
        else 
            rotated_q_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            rotated_q_0_V_ce0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_V_d0_assign_proc : process(input_q_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln703_fu_440_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_q_0_V_d0 <= sub_ln703_fu_440_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rotated_q_0_V_d0 <= input_q_0_V_q1;
        else 
            rotated_q_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            rotated_q_0_V_we0 <= ap_const_logic_1;
        else 
            rotated_q_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln570_1_fu_689_p3 <= 
        sub_ln461_1_fu_683_p2 when (tmp_90_fu_645_p3(0) = '1') else 
        zext_ln569_1_fu_679_p1;
    select_ln570_fu_581_p3 <= 
        sub_ln461_fu_575_p2 when (tmp_88_fu_537_p3(0) = '1') else 
        zext_ln569_fu_571_p1;
    select_ln581_1_fu_727_p3 <= 
        add_ln581_1_fu_715_p2 when (icmp_ln581_1_fu_709_p2(0) = '1') else 
        sub_ln581_1_fu_721_p2;
    select_ln581_fu_619_p3 <= 
        add_ln581_fu_607_p2 when (icmp_ln581_fu_601_p2(0) = '1') else 
        sub_ln581_fu_613_p2;
    select_ln588_1_fu_936_p3 <= 
        ap_const_lv40_FFFFFFFFFF when (tmp_91_fu_928_p3(0) = '1') else 
        ap_const_lv40_0;
    select_ln588_fu_789_p3 <= 
        ap_const_lv40_FFFFFFFFFF when (tmp_89_fu_781_p3(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_10_fu_1013_p3 <= 
        shl_ln604_1_fu_948_p2 when (and_ln603_1_fu_1007_p2(0) = '1') else 
        trunc_ln586_1_fu_921_p1;
    select_ln603_11_fu_1027_p3 <= 
        select_ln588_1_fu_936_p3 when (and_ln585_4_fu_984_p2(0) = '1') else 
        trunc_ln583_1_reg_1312;
    select_ln603_12_fu_1058_p3 <= 
        select_ln603_10_reg_1364 when (or_ln603_7_reg_1369(0) = '1') else 
        select_ln603_11_reg_1374;
    select_ln603_13_fu_1063_p3 <= 
        select_ln603_12_fu_1058_p3 when (or_ln603_9_reg_1379(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_7_fu_880_p3 <= 
        select_ln588_fu_789_p3 when (and_ln585_fu_837_p2(0) = '1') else 
        trunc_ln583_reg_1276;
    select_ln603_8_fu_1046_p3 <= 
        select_ln603_reg_1344 when (or_ln603_reg_1349(0) = '1') else 
        select_ln603_7_reg_1354;
    select_ln603_9_fu_1051_p3 <= 
        select_ln603_8_fu_1046_p3 when (or_ln603_6_reg_1359(0) = '1') else 
        ap_const_lv40_0;
    select_ln603_fu_866_p3 <= 
        shl_ln604_fu_801_p2 when (and_ln603_fu_860_p2(0) = '1') else 
        trunc_ln586_fu_774_p1;
        sext_ln1116_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_reg_1229),64));

        sext_ln1118_2_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln603_9_reg_1384),56));

        sext_ln1118_4_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln603_13_reg_1389),56));

        sext_ln1265_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1265_fu_429_p2),64));

        sext_ln203_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_6_fu_408_p2),64));

        sext_ln581_1_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln581_1_reg_1299),32));

        sext_ln581_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln581_reg_1263),32));

    shl_ln604_1_fu_948_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_1_reg_1312),to_integer(unsigned('0' & zext_ln604_1_fu_944_p1(31-1 downto 0)))));
    shl_ln604_fu_801_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1276),to_integer(unsigned('0' & zext_ln604_fu_797_p1(31-1 downto 0)))));
    sin_tab_address0 <= zext_ln217_2_fu_518_p1(18 - 1 downto 0);

    sin_tab_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sin_tab_ce0 <= ap_const_logic_1;
        else 
            sin_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1116_fu_486_p2 <= std_logic_vector(unsigned(tmp_71_fu_466_p3) - unsigned(zext_ln1116_fu_482_p1));
    sub_ln1265_fu_382_p2 <= std_logic_vector(unsigned(tmp_69_fu_362_p3) - unsigned(zext_ln1265_fu_378_p1));
    sub_ln461_1_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_1_fu_679_p1));
    sub_ln461_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_571_p1));
    sub_ln575_1_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_1_fu_663_p1));
    sub_ln575_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_555_p1));
    sub_ln581_1_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(sub_ln575_1_fu_703_p2));
    sub_ln581_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(sub_ln575_fu_595_p2));
    sub_ln703_34_fu_447_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(reg_346));
    sub_ln703_fu_440_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(reg_342));
    tmp_22_fu_563_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_559_p1);
    tmp_23_fu_671_p3 <= (ap_const_lv1_1 & trunc_ln565_1_fu_667_p1);
    tmp_69_fu_362_p3 <= (i_0_reg_290 & ap_const_lv7_0);
    tmp_70_fu_370_p3 <= (i_0_reg_290 & ap_const_lv5_0);
    tmp_71_fu_466_p3 <= (i14_0_reg_312 & ap_const_lv7_0);
    tmp_72_fu_474_p3 <= (i14_0_reg_312 & ap_const_lv5_0);
    tmp_88_fu_537_p3 <= bitcast_ln696_fu_529_p1(63 downto 63);
    tmp_89_fu_781_p3 <= bitcast_ln696_1_fu_778_p1(31 downto 31);
    tmp_90_fu_645_p3 <= bitcast_ln696_2_fu_637_p1(63 downto 63);
    tmp_91_fu_928_p3 <= bitcast_ln696_3_fu_925_p1(31 downto 31);
    trunc_ln557_1_fu_641_p1 <= bitcast_ln696_2_fu_637_p1(63 - 1 downto 0);
    trunc_ln557_fu_533_p1 <= bitcast_ln696_fu_529_p1(63 - 1 downto 0);
    trunc_ln565_1_fu_667_p1 <= bitcast_ln696_2_fu_637_p1(52 - 1 downto 0);
    trunc_ln565_fu_559_p1 <= bitcast_ln696_fu_529_p1(52 - 1 downto 0);
    trunc_ln583_1_fu_741_p1 <= select_ln570_1_fu_689_p3(40 - 1 downto 0);
    trunc_ln583_fu_633_p1 <= select_ln570_fu_581_p3(40 - 1 downto 0);
    trunc_ln586_1_fu_921_p1 <= ashr_ln586_1_fu_916_p2(40 - 1 downto 0);
    trunc_ln586_fu_774_p1 <= ashr_ln586_fu_769_p2(40 - 1 downto 0);
    xor_ln571_1_fu_953_p2 <= (icmp_ln571_1_reg_1287 xor ap_const_lv1_1);
    xor_ln571_fu_806_p2 <= (icmp_ln571_reg_1251 xor ap_const_lv1_1);
    xor_ln581_1_fu_1001_p2 <= (or_ln581_1_fu_996_p2 xor ap_const_lv1_1);
    xor_ln581_fu_854_p2 <= (or_ln581_fu_849_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_967_p2 <= (or_ln582_1_fu_963_p2 xor ap_const_lv1_1);
    xor_ln582_fu_820_p2 <= (or_ln582_fu_816_p2 xor ap_const_lv1_1);
    xor_ln585_1_fu_978_p2 <= (icmp_ln585_1_fu_902_p2 xor ap_const_lv1_1);
    xor_ln585_fu_831_p2 <= (icmp_ln585_fu_755_p2 xor ap_const_lv1_1);
    zext_ln1116_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_474_p3),12));
    zext_ln1265_3_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_fu_419_p2),12));
    zext_ln1265_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_370_p3),12));
    zext_ln203_13_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_301),12));
    zext_ln203_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_301),7));
    zext_ln217_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_323),10));
    zext_ln217_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln217_fu_512_p2),64));
    zext_ln217_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k16_0_0_reg_323),12));
    zext_ln461_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_653_p4),12));
    zext_ln461_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_545_p4),12));
    zext_ln569_1_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_671_p3),54));
    zext_ln569_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_563_p3),54));
    zext_ln586_1_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_899_p1),54));
    zext_ln586_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_752_p1),54));
    zext_ln604_1_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_1_fu_899_p1),40));
    zext_ln604_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_752_p1),40));
end behav;
