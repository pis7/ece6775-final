-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_1_4_3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (39 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (39 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (39 downto 0) );
end;


architecture behav of softmax_1_4_3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv40_10000 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln302_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_917 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln203_fu_346_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln203_reg_922 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_350_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_1_reg_940 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln306_fu_462_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln305_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln305_fu_470_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln703_fu_476_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln703_reg_959 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln703_34_fu_481_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln703_34_reg_965 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln703_35_fu_487_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln703_35_reg_971 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln728_fu_502_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln728_reg_977 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln2_reg_982 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln728_1_fu_526_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln728_1_reg_987 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_1_reg_992 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln728_2_fu_550_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln728_2_reg_997 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_2_reg_1002 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln3_fu_577_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln3_reg_1007 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln708_s_fu_599_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln708_s_reg_1012 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln708_29_fu_621_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln708_29_reg_1017 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_27_fu_637_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_27_reg_1022 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1148_fu_643_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_V211_1_fu_697_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal input_V210_1_fu_710_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V29_1_fu_723_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V28_1_fu_736_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V17_1_fu_749_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V16_1_fu_762_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V15_1_fu_775_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V14_1_fu_788_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V3_1_fu_801_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V2_1_fu_814_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V12_1_fu_827_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V_1_fu_840_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V_0_reg_156 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V12_0_reg_166 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V2_0_reg_176 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V3_0_reg_186 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V14_0_reg_196 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V15_0_reg_206 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V16_0_reg_216 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V17_0_reg_226 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V28_0_reg_236 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V29_0_reg_246 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V210_0_reg_256 : STD_LOGIC_VECTOR (39 downto 0);
    signal input_V211_0_reg_266 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_0_reg_276 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_33_0_reg_287 : STD_LOGIC_VECTOR (39 downto 0);
    signal k_0_0_reg_297 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_350_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1494_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_308_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_321_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln1494_fu_448_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln1494_26_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_496_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1116_fu_493_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln1118_fu_496_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_fu_496_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln1118_1_fu_520_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1116_1_fu_517_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln1118_1_fu_520_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_1_fu_520_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln1118_2_fu_544_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1116_2_fu_541_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln1118_2_fu_544_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln1118_2_fu_544_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal shl_ln_fu_565_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_fu_572_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln728_1_fu_587_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_1_fu_594_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln728_2_fu_609_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln1192_2_fu_616_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln703_fu_631_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_653_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_666_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_666_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_679_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_679_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_679_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln703_2_fu_693_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln703_1_fu_689_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln703_fu_685_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_653_ap_start : STD_LOGIC;
    signal grp_fu_653_ap_done : STD_LOGIC;
    signal grp_fu_666_ap_start : STD_LOGIC;
    signal grp_fu_666_ap_done : STD_LOGIC;
    signal grp_fu_679_ap_start : STD_LOGIC;
    signal grp_fu_679_ap_done : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);

    component dut_mux_42_40_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (39 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        din2 : IN STD_LOGIC_VECTOR (39 downto 0);
        din3 : IN STD_LOGIC_VECTOR (39 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component dut_sdiv_56ns_40shbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    dut_mux_42_40_1_1_U147 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V14_0_reg_196,
        din1 => input_V15_0_reg_206,
        din2 => input_V16_0_reg_216,
        din3 => input_V17_0_reg_226,
        din4 => trunc_ln203_reg_922,
        dout => grp_fu_308_p6);

    dut_mux_42_40_1_1_U148 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V28_0_reg_236,
        din1 => input_V29_0_reg_246,
        din2 => input_V210_0_reg_256,
        din3 => input_V211_0_reg_266,
        din4 => trunc_ln203_reg_922,
        dout => grp_fu_321_p6);

    dut_mux_42_40_1_1_U149 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V_0_reg_156,
        din1 => input_V12_0_reg_166,
        din2 => input_V2_0_reg_176,
        din3 => input_V3_0_reg_186,
        din4 => tmp_1_fu_350_p5,
        dout => tmp_1_fu_350_p6);

    dut_sdiv_56ns_40shbi_U150 : component dut_sdiv_56ns_40shbi
    generic map (
        ID => 1,
        NUM_STAGE => 60,
        din0_WIDTH => 56,
        din1_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_653_ap_start,
        done => grp_fu_653_ap_done,
        din0 => grp_fu_653_p0,
        din1 => grp_fu_653_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_653_p2);

    dut_sdiv_56ns_40shbi_U151 : component dut_sdiv_56ns_40shbi
    generic map (
        ID => 1,
        NUM_STAGE => 60,
        din0_WIDTH => 56,
        din1_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_666_ap_start,
        done => grp_fu_666_ap_done,
        din0 => grp_fu_666_p0,
        din1 => grp_fu_666_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_666_p2);

    dut_sdiv_56ns_40shbi_U152 : component dut_sdiv_56ns_40shbi
    generic map (
        ID => 1,
        NUM_STAGE => 60,
        din0_WIDTH => 56,
        din1_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_679_ap_start,
        done => grp_fu_679_ap_done,
        din0 => grp_fu_679_p0,
        din1 => grp_fu_679_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_679_p2);

    dut_mux_42_40_1_1_U153 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V211_0_reg_266,
        din1 => input_V211_0_reg_266,
        din2 => input_V211_0_reg_266,
        din3 => trunc_ln703_2_fu_693_p1,
        din4 => trunc_ln203_reg_922,
        dout => input_V211_1_fu_697_p6);

    dut_mux_42_40_1_1_U154 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V210_0_reg_256,
        din1 => input_V210_0_reg_256,
        din2 => trunc_ln703_2_fu_693_p1,
        din3 => input_V210_0_reg_256,
        din4 => trunc_ln203_reg_922,
        dout => input_V210_1_fu_710_p6);

    dut_mux_42_40_1_1_U155 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V29_0_reg_246,
        din1 => trunc_ln703_2_fu_693_p1,
        din2 => input_V29_0_reg_246,
        din3 => input_V29_0_reg_246,
        din4 => trunc_ln203_reg_922,
        dout => input_V29_1_fu_723_p6);

    dut_mux_42_40_1_1_U156 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => trunc_ln703_2_fu_693_p1,
        din1 => input_V28_0_reg_236,
        din2 => input_V28_0_reg_236,
        din3 => input_V28_0_reg_236,
        din4 => trunc_ln203_reg_922,
        dout => input_V28_1_fu_736_p6);

    dut_mux_42_40_1_1_U157 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V17_0_reg_226,
        din1 => input_V17_0_reg_226,
        din2 => input_V17_0_reg_226,
        din3 => trunc_ln703_1_fu_689_p1,
        din4 => trunc_ln203_reg_922,
        dout => input_V17_1_fu_749_p6);

    dut_mux_42_40_1_1_U158 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V16_0_reg_216,
        din1 => input_V16_0_reg_216,
        din2 => trunc_ln703_1_fu_689_p1,
        din3 => input_V16_0_reg_216,
        din4 => trunc_ln203_reg_922,
        dout => input_V16_1_fu_762_p6);

    dut_mux_42_40_1_1_U159 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V15_0_reg_206,
        din1 => trunc_ln703_1_fu_689_p1,
        din2 => input_V15_0_reg_206,
        din3 => input_V15_0_reg_206,
        din4 => trunc_ln203_reg_922,
        dout => input_V15_1_fu_775_p6);

    dut_mux_42_40_1_1_U160 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => trunc_ln703_1_fu_689_p1,
        din1 => input_V14_0_reg_196,
        din2 => input_V14_0_reg_196,
        din3 => input_V14_0_reg_196,
        din4 => trunc_ln203_reg_922,
        dout => input_V14_1_fu_788_p6);

    dut_mux_42_40_1_1_U161 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V3_0_reg_186,
        din1 => input_V3_0_reg_186,
        din2 => input_V3_0_reg_186,
        din3 => trunc_ln703_fu_685_p1,
        din4 => trunc_ln203_reg_922,
        dout => input_V3_1_fu_801_p6);

    dut_mux_42_40_1_1_U162 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V2_0_reg_176,
        din1 => input_V2_0_reg_176,
        din2 => trunc_ln703_fu_685_p1,
        din3 => input_V2_0_reg_176,
        din4 => trunc_ln203_reg_922,
        dout => input_V2_1_fu_814_p6);

    dut_mux_42_40_1_1_U163 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => input_V12_0_reg_166,
        din1 => trunc_ln703_fu_685_p1,
        din2 => input_V12_0_reg_166,
        din3 => input_V12_0_reg_166,
        din4 => trunc_ln203_reg_922,
        dout => input_V12_1_fu_827_p6);

    dut_mux_42_40_1_1_U164 : component dut_mux_42_40_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        din2_WIDTH => 40,
        din3_WIDTH => 40,
        din4_WIDTH => 2,
        dout_WIDTH => 40)
    port map (
        din0 => trunc_ln703_fu_685_p1,
        din1 => input_V_0_reg_156,
        din2 => input_V_0_reg_156,
        din3 => input_V_0_reg_156,
        din4 => trunc_ln203_reg_922,
        dout => input_V_1_fu_840_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_0_preg <= input_V_0_reg_156;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_10_preg <= input_V210_0_reg_256;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_11_preg <= input_V211_0_reg_266;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_1_preg <= input_V12_0_reg_166;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_2_preg <= input_V2_0_reg_176;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_3_preg <= input_V3_0_reg_186;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_4_preg <= input_V14_0_reg_196;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_5_preg <= input_V15_0_reg_206;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_6_preg <= input_V16_0_reg_216;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_7_preg <= input_V17_0_reg_226;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_8_preg <= input_V28_0_reg_236;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv40_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_return_9_preg <= input_V29_0_reg_246;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                i_0_reg_276 <= i_reg_917;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_276 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    input_V12_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V12_0_reg_166 <= input_V12_1_fu_827_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V12_0_reg_166 <= p_read1;
            end if; 
        end if;
    end process;

    input_V14_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V14_0_reg_196 <= input_V14_1_fu_788_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V14_0_reg_196 <= p_read4;
            end if; 
        end if;
    end process;

    input_V15_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V15_0_reg_206 <= input_V15_1_fu_775_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V15_0_reg_206 <= p_read5;
            end if; 
        end if;
    end process;

    input_V16_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V16_0_reg_216 <= input_V16_1_fu_762_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V16_0_reg_216 <= p_read6;
            end if; 
        end if;
    end process;

    input_V17_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V17_0_reg_226 <= input_V17_1_fu_749_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V17_0_reg_226 <= p_read7;
            end if; 
        end if;
    end process;

    input_V210_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V210_0_reg_256 <= input_V210_1_fu_710_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V210_0_reg_256 <= p_read10;
            end if; 
        end if;
    end process;

    input_V211_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V211_0_reg_266 <= input_V211_1_fu_697_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V211_0_reg_266 <= p_read11;
            end if; 
        end if;
    end process;

    input_V28_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V28_0_reg_236 <= input_V28_1_fu_736_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V28_0_reg_236 <= p_read8;
            end if; 
        end if;
    end process;

    input_V29_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V29_0_reg_246 <= input_V29_1_fu_723_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V29_0_reg_246 <= p_read9;
            end if; 
        end if;
    end process;

    input_V2_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V2_0_reg_176 <= input_V2_1_fu_814_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V2_0_reg_176 <= p_read2;
            end if; 
        end if;
    end process;

    input_V3_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V3_0_reg_186 <= input_V3_1_fu_801_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V3_0_reg_186 <= p_read3;
            end if; 
        end if;
    end process;

    input_V_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                input_V_0_reg_156 <= input_V_1_fu_840_p6;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                input_V_0_reg_156 <= p_read;
            end if; 
        end if;
    end process;

    k_0_0_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln305_fu_436_p2 = ap_const_lv1_0))) then 
                k_0_0_reg_297 <= add_ln305_fu_470_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_0))) then 
                k_0_0_reg_297 <= ap_const_lv2_1;
            end if; 
        end if;
    end process;

    p_Val2_33_0_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln305_fu_436_p2 = ap_const_lv1_0))) then 
                p_Val2_33_0_reg_287 <= select_ln306_fu_462_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_0))) then 
                p_Val2_33_0_reg_287 <= tmp_1_fu_350_p6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln703_27_reg_1022 <= add_ln703_27_fu_637_p2;
                trunc_ln3_reg_1007 <= add_ln1192_fu_572_p2(55 downto 16);
                trunc_ln708_29_reg_1017 <= add_ln1192_2_fu_616_p2(55 downto 16);
                trunc_ln708_s_reg_1012 <= add_ln1192_1_fu_594_p2(55 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln728_1_reg_987 <= add_ln728_1_fu_526_p2;
                add_ln728_2_reg_997 <= add_ln728_2_fu_550_p2;
                add_ln728_reg_977 <= add_ln728_fu_502_p2;
                trunc_ln1192_1_reg_992 <= mul_ln1118_1_fu_520_p2(56 downto 1);
                trunc_ln1192_2_reg_1002 <= mul_ln1118_2_fu_544_p2(56 downto 1);
                trunc_ln2_reg_982 <= mul_ln1118_fu_496_p2(56 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_917 <= i_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sub_ln703_34_reg_965 <= sub_ln703_34_fu_481_p2;
                sub_ln703_35_reg_971 <= sub_ln703_35_fu_487_p2;
                sub_ln703_reg_959 <= sub_ln703_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_0))) then
                tmp_1_reg_940 <= tmp_1_fu_350_p6;
                trunc_ln203_reg_922 <= trunc_ln203_fu_346_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln302_fu_334_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln305_fu_436_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln305_fu_436_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1192_1_fu_594_p2 <= std_logic_vector(unsigned(shl_ln728_1_fu_587_p3) + unsigned(trunc_ln1192_1_reg_992));
    add_ln1192_2_fu_616_p2 <= std_logic_vector(unsigned(shl_ln728_2_fu_609_p3) + unsigned(trunc_ln1192_2_reg_1002));
    add_ln1192_fu_572_p2 <= std_logic_vector(unsigned(shl_ln_fu_565_p3) + unsigned(trunc_ln2_reg_982));
    add_ln305_fu_470_p2 <= std_logic_vector(unsigned(k_0_0_reg_297) + unsigned(ap_const_lv2_1));
    add_ln703_27_fu_637_p2 <= std_logic_vector(unsigned(add_ln703_fu_631_p2) + unsigned(trunc_ln3_fu_577_p4));
    add_ln703_fu_631_p2 <= std_logic_vector(unsigned(trunc_ln708_s_fu_599_p4) + unsigned(trunc_ln708_29_fu_621_p4));
    add_ln728_1_fu_526_p2 <= std_logic_vector(unsigned(ap_const_lv40_10000) + unsigned(sub_ln703_34_reg_965));
    add_ln728_2_fu_550_p2 <= std_logic_vector(unsigned(ap_const_lv40_10000) + unsigned(sub_ln703_35_reg_971));
    add_ln728_fu_502_p2 <= std_logic_vector(unsigned(ap_const_lv40_10000) + unsigned(sub_ln703_reg_959));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln302_fu_334_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V_0_reg_156, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_0 <= input_V_0_reg_156;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V12_0_reg_166, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_1 <= input_V12_0_reg_166;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V210_0_reg_256, ap_return_10_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_10 <= input_V210_0_reg_256;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V211_0_reg_266, ap_return_11_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_11 <= input_V211_0_reg_266;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V2_0_reg_176, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_2 <= input_V2_0_reg_176;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V3_0_reg_186, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_3 <= input_V3_0_reg_186;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V14_0_reg_196, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_4 <= input_V14_0_reg_196;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V15_0_reg_206, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_5 <= input_V15_0_reg_206;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V16_0_reg_216, ap_return_6_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_6 <= input_V16_0_reg_216;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V17_0_reg_226, ap_return_7_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_7 <= input_V17_0_reg_226;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V28_0_reg_236, ap_return_8_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_8 <= input_V28_0_reg_236;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(icmp_ln302_fu_334_p2, ap_CS_fsm_state2, input_V29_0_reg_246, ap_return_9_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln302_fu_334_p2 = ap_const_lv1_1))) then 
            ap_return_9 <= input_V29_0_reg_246;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;


    grp_fu_653_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_653_ap_start <= ap_const_logic_1;
        else 
            grp_fu_653_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_653_p0 <= (trunc_ln3_reg_1007 & ap_const_lv16_0);
    grp_fu_653_p1 <= sext_ln1148_fu_643_p1(40 - 1 downto 0);

    grp_fu_666_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_666_ap_start <= ap_const_logic_1;
        else 
            grp_fu_666_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_666_p0 <= (trunc_ln708_s_reg_1012 & ap_const_lv16_0);
    grp_fu_666_p1 <= sext_ln1148_fu_643_p1(40 - 1 downto 0);

    grp_fu_679_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_679_ap_start <= ap_const_logic_1;
        else 
            grp_fu_679_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_679_p0 <= (trunc_ln708_29_reg_1017 & ap_const_lv16_0);
    grp_fu_679_p1 <= sext_ln1148_fu_643_p1(40 - 1 downto 0);
    i_fu_340_p2 <= std_logic_vector(unsigned(i_0_reg_276) + unsigned(ap_const_lv3_1));
    icmp_ln1494_26_fu_456_p2 <= "1" when (signed(select_ln1494_fu_448_p3) > signed(p_Val2_33_0_reg_287)) else "0";
    icmp_ln1494_fu_442_p2 <= "1" when (k_0_0_reg_297 = ap_const_lv2_1) else "0";
    icmp_ln302_fu_334_p2 <= "1" when (i_0_reg_276 = ap_const_lv3_4) else "0";
    icmp_ln305_fu_436_p2 <= "1" when (k_0_0_reg_297 = ap_const_lv2_3) else "0";
    mul_ln1118_1_fu_520_p0 <= sext_ln1116_1_fu_517_p1(40 - 1 downto 0);
    mul_ln1118_1_fu_520_p1 <= sext_ln1116_1_fu_517_p1(40 - 1 downto 0);
    mul_ln1118_1_fu_520_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_520_p0) * signed(mul_ln1118_1_fu_520_p1))), 80));
    mul_ln1118_2_fu_544_p0 <= sext_ln1116_2_fu_541_p1(40 - 1 downto 0);
    mul_ln1118_2_fu_544_p1 <= sext_ln1116_2_fu_541_p1(40 - 1 downto 0);
    mul_ln1118_2_fu_544_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_2_fu_544_p0) * signed(mul_ln1118_2_fu_544_p1))), 80));
    mul_ln1118_fu_496_p0 <= sext_ln1116_fu_493_p1(40 - 1 downto 0);
    mul_ln1118_fu_496_p1 <= sext_ln1116_fu_493_p1(40 - 1 downto 0);
    mul_ln1118_fu_496_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_496_p0) * signed(mul_ln1118_fu_496_p1))), 80));
    select_ln1494_fu_448_p3 <= 
        grp_fu_308_p6 when (icmp_ln1494_fu_442_p2(0) = '1') else 
        grp_fu_321_p6;
    select_ln306_fu_462_p3 <= 
        select_ln1494_fu_448_p3 when (icmp_ln1494_26_fu_456_p2(0) = '1') else 
        p_Val2_33_0_reg_287;
        sext_ln1116_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_34_reg_965),80));

        sext_ln1116_2_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_35_reg_971),80));

        sext_ln1116_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_reg_959),80));

        sext_ln1148_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_27_reg_1022),56));

    shl_ln728_1_fu_587_p3 <= (add_ln728_1_reg_987 & ap_const_lv16_0);
    shl_ln728_2_fu_609_p3 <= (add_ln728_2_reg_997 & ap_const_lv16_0);
    shl_ln_fu_565_p3 <= (add_ln728_reg_977 & ap_const_lv16_0);
    sub_ln703_34_fu_481_p2 <= std_logic_vector(unsigned(grp_fu_308_p6) - unsigned(p_Val2_33_0_reg_287));
    sub_ln703_35_fu_487_p2 <= std_logic_vector(unsigned(grp_fu_321_p6) - unsigned(p_Val2_33_0_reg_287));
    sub_ln703_fu_476_p2 <= std_logic_vector(unsigned(tmp_1_reg_940) - unsigned(p_Val2_33_0_reg_287));
    tmp_1_fu_350_p5 <= i_0_reg_276(2 - 1 downto 0);
    trunc_ln203_fu_346_p1 <= i_0_reg_276(2 - 1 downto 0);
    trunc_ln3_fu_577_p4 <= add_ln1192_fu_572_p2(55 downto 16);
    trunc_ln703_1_fu_689_p1 <= grp_fu_666_p2(40 - 1 downto 0);
    trunc_ln703_2_fu_693_p1 <= grp_fu_679_p2(40 - 1 downto 0);
    trunc_ln703_fu_685_p1 <= grp_fu_653_p2(40 - 1 downto 0);
    trunc_ln708_29_fu_621_p4 <= add_ln1192_2_fu_616_p2(55 downto 16);
    trunc_ln708_s_fu_599_p4 <= add_ln1192_1_fu_594_p2(55 downto 16);
end behav;
