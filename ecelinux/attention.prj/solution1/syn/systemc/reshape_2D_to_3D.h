// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reshape_2D_to_3D_HH_
#define _reshape_2D_to_3D_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reshape_2D_to_3D : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > input_0_V_address0;
    sc_out< sc_logic > input_0_V_ce0;
    sc_in< sc_lv<40> > input_0_V_q0;
    sc_out< sc_lv<40> > ap_return_0;
    sc_out< sc_lv<40> > ap_return_1;
    sc_out< sc_lv<40> > ap_return_2;
    sc_out< sc_lv<40> > ap_return_3;
    sc_out< sc_lv<40> > ap_return_4;
    sc_out< sc_lv<40> > ap_return_5;
    sc_out< sc_lv<40> > ap_return_6;
    sc_out< sc_lv<40> > ap_return_7;
    sc_out< sc_lv<40> > ap_return_8;
    sc_out< sc_lv<40> > ap_return_9;
    sc_out< sc_lv<40> > ap_return_10;
    sc_out< sc_lv<40> > ap_return_11;
    sc_out< sc_lv<40> > ap_return_12;
    sc_out< sc_lv<40> > ap_return_13;
    sc_out< sc_lv<40> > ap_return_14;
    sc_out< sc_lv<40> > ap_return_15;


    // Module declarations
    reshape_2D_to_3D(sc_module_name name);
    SC_HAS_PROCESS(reshape_2D_to_3D);

    ~reshape_2D_to_3D();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten_reg_129;
    sc_signal< sc_lv<3> > i_0_0_reg_140;
    sc_signal< sc_lv<3> > k_0_0_reg_151;
    sc_signal< sc_lv<1> > icmp_ln183_fu_162_p2;
    sc_signal< sc_lv<1> > icmp_ln183_reg_559;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<5> > add_ln183_1_fu_168_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > select_ln183_1_fu_194_p3;
    sc_signal< sc_lv<3> > select_ln183_1_reg_568;
    sc_signal< sc_lv<2> > trunc_ln183_fu_202_p1;
    sc_signal< sc_lv<2> > trunc_ln183_reg_573;
    sc_signal< sc_lv<2> > trunc_ln203_fu_229_p1;
    sc_signal< sc_lv<2> > trunc_ln203_reg_582;
    sc_signal< sc_lv<3> > add_ln184_fu_233_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<3> > ap_phi_mux_i_0_0_phi_fu_144_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln185_fu_224_p1;
    sc_signal< sc_lv<40> > output_V315_1_fu_52;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<40> > output_V314_1_fu_56;
    sc_signal< sc_lv<40> > output_V_1_fu_60;
    sc_signal< sc_lv<40> > output_V313_1_fu_64;
    sc_signal< sc_lv<40> > output_V31247_1_fu_68;
    sc_signal< sc_lv<40> > output_V16_1_fu_72;
    sc_signal< sc_lv<40> > output_V211_1_fu_76;
    sc_signal< sc_lv<40> > output_V210_1_fu_80;
    sc_signal< sc_lv<40> > output_V2_1_fu_84;
    sc_signal< sc_lv<40> > output_V2936_1_fu_88;
    sc_signal< sc_lv<40> > output_V28_1_fu_92;
    sc_signal< sc_lv<40> > output_V3_1_fu_96;
    sc_signal< sc_lv<40> > output_V17_1_fu_100;
    sc_signal< sc_lv<40> > output_V1625_1_fu_104;
    sc_signal< sc_lv<40> > output_V14_1_fu_108;
    sc_signal< sc_lv<40> > output_V1520_1_fu_112;
    sc_signal< sc_lv<1> > icmp_ln184_fu_180_p2;
    sc_signal< sc_lv<3> > add_ln183_fu_174_p2;
    sc_signal< sc_lv<3> > select_ln183_fu_186_p3;
    sc_signal< sc_lv<4> > zext_ln184_fu_214_p1;
    sc_signal< sc_lv<4> > shl_ln185_mid2_fu_206_p3;
    sc_signal< sc_lv<4> > add_ln185_fu_218_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln183_1_fu_168_p2();
    void thread_add_ln183_fu_174_p2();
    void thread_add_ln184_fu_233_p2();
    void thread_add_ln185_fu_218_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_0_phi_fu_144_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_icmp_ln183_fu_162_p2();
    void thread_icmp_ln184_fu_180_p2();
    void thread_input_0_V_address0();
    void thread_input_0_V_ce0();
    void thread_select_ln183_1_fu_194_p3();
    void thread_select_ln183_fu_186_p3();
    void thread_shl_ln185_mid2_fu_206_p3();
    void thread_trunc_ln183_fu_202_p1();
    void thread_trunc_ln203_fu_229_p1();
    void thread_zext_ln184_fu_214_p1();
    void thread_zext_ln185_fu_224_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
