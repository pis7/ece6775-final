// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cache_update_HH_
#define _cache_update_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_mux_42_40_1_1.h"

namespace ap_rtl {

struct cache_update : public sc_module {
    // Port declarations 50
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > cache_in_0_V_address0;
    sc_out< sc_logic > cache_in_0_V_ce0;
    sc_in< sc_lv<40> > cache_in_0_V_q0;
    sc_out< sc_lv<3> > cache_in_1_V_address0;
    sc_out< sc_logic > cache_in_1_V_ce0;
    sc_in< sc_lv<40> > cache_in_1_V_q0;
    sc_out< sc_lv<3> > cache_in_2_V_address0;
    sc_out< sc_logic > cache_in_2_V_ce0;
    sc_in< sc_lv<40> > cache_in_2_V_q0;
    sc_out< sc_lv<3> > cache_in_3_V_address0;
    sc_out< sc_logic > cache_in_3_V_ce0;
    sc_in< sc_lv<40> > cache_in_3_V_q0;
    sc_out< sc_lv<4> > cache_out_0_V_address0;
    sc_out< sc_logic > cache_out_0_V_ce0;
    sc_out< sc_logic > cache_out_0_V_we0;
    sc_out< sc_lv<40> > cache_out_0_V_d0;
    sc_out< sc_lv<4> > cache_out_1_V_address0;
    sc_out< sc_logic > cache_out_1_V_ce0;
    sc_out< sc_logic > cache_out_1_V_we0;
    sc_out< sc_lv<40> > cache_out_1_V_d0;
    sc_out< sc_lv<4> > cache_out_2_V_address0;
    sc_out< sc_logic > cache_out_2_V_ce0;
    sc_out< sc_logic > cache_out_2_V_we0;
    sc_out< sc_lv<40> > cache_out_2_V_d0;
    sc_out< sc_lv<4> > cache_out_3_V_address0;
    sc_out< sc_logic > cache_out_3_V_ce0;
    sc_out< sc_logic > cache_out_3_V_we0;
    sc_out< sc_lv<40> > cache_out_3_V_d0;
    sc_in< sc_lv<40> > p_read;
    sc_in< sc_lv<40> > p_read1;
    sc_in< sc_lv<40> > p_read2;
    sc_in< sc_lv<40> > p_read3;
    sc_in< sc_lv<40> > p_read4;
    sc_in< sc_lv<40> > p_read5;
    sc_in< sc_lv<40> > p_read6;
    sc_in< sc_lv<40> > p_read7;
    sc_in< sc_lv<40> > p_read8;
    sc_in< sc_lv<40> > p_read9;
    sc_in< sc_lv<40> > p_read10;
    sc_in< sc_lv<40> > p_read11;
    sc_in< sc_lv<40> > p_read12;
    sc_in< sc_lv<40> > p_read13;
    sc_in< sc_lv<40> > p_read14;
    sc_in< sc_lv<40> > p_read15;


    // Module declarations
    cache_update(sc_module_name name);
    SC_HAS_PROCESS(cache_update);

    ~cache_update();

    sc_trace_file* mVcdFile;

    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U86;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U87;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U88;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U89;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > indvar_flatten_reg_302;
    sc_signal< sc_lv<3> > i_0_reg_313;
    sc_signal< sc_lv<2> > j_0_reg_324;
    sc_signal< sc_lv<1> > icmp_ln236_fu_335_p2;
    sc_signal< sc_lv<1> > icmp_ln236_reg_601;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > add_ln236_fu_341_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln239_4_fu_359_p3;
    sc_signal< sc_lv<2> > select_ln239_4_reg_610;
    sc_signal< sc_lv<3> > select_ln239_5_fu_367_p3;
    sc_signal< sc_lv<3> > select_ln239_5_reg_615;
    sc_signal< sc_lv<5> > zext_ln239_1_fu_391_p1;
    sc_signal< sc_lv<5> > zext_ln239_1_reg_622;
    sc_signal< sc_lv<40> > tmp_6_fu_409_p6;
    sc_signal< sc_lv<40> > tmp_6_reg_647;
    sc_signal< sc_lv<40> > tmp_7_fu_419_p6;
    sc_signal< sc_lv<40> > tmp_7_reg_652;
    sc_signal< sc_lv<40> > tmp_8_fu_429_p6;
    sc_signal< sc_lv<40> > tmp_8_reg_657;
    sc_signal< sc_lv<40> > tmp_9_fu_439_p6;
    sc_signal< sc_lv<40> > tmp_9_reg_662;
    sc_signal< sc_lv<2> > j_fu_449_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<3> > ap_phi_mux_i_0_phi_fu_317_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln239_2_fu_401_p1;
    sc_signal< sc_lv<64> > sext_ln203_fu_476_p1;
    sc_signal< sc_lv<1> > icmp_ln237_fu_353_p2;
    sc_signal< sc_lv<3> > i_fu_347_p2;
    sc_signal< sc_lv<4> > tmp_fu_375_p3;
    sc_signal< sc_lv<5> > zext_ln203_fu_383_p1;
    sc_signal< sc_lv<5> > add_ln239_fu_395_p2;
    sc_signal< sc_lv<2> > trunc_ln239_fu_387_p1;
    sc_signal< sc_lv<5> > tmp_55_fu_458_p3;
    sc_signal< sc_lv<5> > zext_ln239_fu_455_p1;
    sc_signal< sc_lv<5> > sub_ln203_fu_465_p2;
    sc_signal< sc_lv<5> > add_ln203_fu_471_p2;
    sc_signal< sc_lv<1> > icmp_ln239_fu_484_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln203_fu_471_p2();
    void thread_add_ln236_fu_341_p2();
    void thread_add_ln239_fu_395_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_317_p4();
    void thread_ap_ready();
    void thread_cache_in_0_V_address0();
    void thread_cache_in_0_V_ce0();
    void thread_cache_in_1_V_address0();
    void thread_cache_in_1_V_ce0();
    void thread_cache_in_2_V_address0();
    void thread_cache_in_2_V_ce0();
    void thread_cache_in_3_V_address0();
    void thread_cache_in_3_V_ce0();
    void thread_cache_out_0_V_address0();
    void thread_cache_out_0_V_ce0();
    void thread_cache_out_0_V_d0();
    void thread_cache_out_0_V_we0();
    void thread_cache_out_1_V_address0();
    void thread_cache_out_1_V_ce0();
    void thread_cache_out_1_V_d0();
    void thread_cache_out_1_V_we0();
    void thread_cache_out_2_V_address0();
    void thread_cache_out_2_V_ce0();
    void thread_cache_out_2_V_d0();
    void thread_cache_out_2_V_we0();
    void thread_cache_out_3_V_address0();
    void thread_cache_out_3_V_ce0();
    void thread_cache_out_3_V_d0();
    void thread_cache_out_3_V_we0();
    void thread_i_fu_347_p2();
    void thread_icmp_ln236_fu_335_p2();
    void thread_icmp_ln237_fu_353_p2();
    void thread_icmp_ln239_fu_484_p2();
    void thread_j_fu_449_p2();
    void thread_select_ln239_4_fu_359_p3();
    void thread_select_ln239_5_fu_367_p3();
    void thread_sext_ln203_fu_476_p1();
    void thread_sub_ln203_fu_465_p2();
    void thread_tmp_55_fu_458_p3();
    void thread_tmp_fu_375_p3();
    void thread_trunc_ln239_fu_387_p1();
    void thread_zext_ln203_fu_383_p1();
    void thread_zext_ln239_1_fu_391_p1();
    void thread_zext_ln239_2_fu_401_p1();
    void thread_zext_ln239_fu_455_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
