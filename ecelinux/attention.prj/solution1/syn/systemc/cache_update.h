// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cache_update_HH_
#define _cache_update_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_mux_165_32_1_1.h"

namespace ap_rtl {

struct cache_update : public sc_module {
    // Port declarations 41
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > cache_in_V_address0;
    sc_out< sc_logic > cache_in_V_ce0;
    sc_in< sc_lv<32> > cache_in_V_q0;
    sc_out< sc_lv<4> > cache_out_0_V_address0;
    sc_out< sc_logic > cache_out_0_V_ce0;
    sc_out< sc_logic > cache_out_0_V_we0;
    sc_out< sc_lv<32> > cache_out_0_V_d0;
    sc_out< sc_lv<4> > cache_out_1_V_address0;
    sc_out< sc_logic > cache_out_1_V_ce0;
    sc_out< sc_logic > cache_out_1_V_we0;
    sc_out< sc_lv<32> > cache_out_1_V_d0;
    sc_out< sc_lv<4> > cache_out_2_V_address0;
    sc_out< sc_logic > cache_out_2_V_ce0;
    sc_out< sc_logic > cache_out_2_V_we0;
    sc_out< sc_lv<32> > cache_out_2_V_d0;
    sc_out< sc_lv<4> > cache_out_3_V_address0;
    sc_out< sc_logic > cache_out_3_V_ce0;
    sc_out< sc_logic > cache_out_3_V_we0;
    sc_out< sc_lv<32> > cache_out_3_V_d0;
    sc_in< sc_lv<32> > p_read;
    sc_in< sc_lv<32> > p_read1;
    sc_in< sc_lv<32> > p_read2;
    sc_in< sc_lv<32> > p_read3;
    sc_in< sc_lv<32> > p_read4;
    sc_in< sc_lv<32> > p_read5;
    sc_in< sc_lv<32> > p_read6;
    sc_in< sc_lv<32> > p_read7;
    sc_in< sc_lv<32> > p_read8;
    sc_in< sc_lv<32> > p_read9;
    sc_in< sc_lv<32> > p_read10;
    sc_in< sc_lv<32> > p_read11;
    sc_in< sc_lv<32> > p_read12;
    sc_in< sc_lv<32> > p_read13;
    sc_in< sc_lv<32> > p_read14;
    sc_in< sc_lv<32> > p_read15;


    // Module declarations
    cache_update(sc_module_name name);
    SC_HAS_PROCESS(cache_update);

    ~cache_update();

    sc_trace_file* mVcdFile;

    dut_mux_165_32_1_1<1,1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,5,32>* dut_mux_165_32_1_1_U73;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_290_p2;
    sc_signal< sc_lv<3> > i_reg_532;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > zext_ln203_4_fu_308_p1;
    sc_signal< sc_lv<5> > zext_ln203_4_reg_537;
    sc_signal< sc_lv<1> > icmp_ln231_fu_284_p2;
    sc_signal< sc_lv<5> > sub_ln203_fu_320_p2;
    sc_signal< sc_lv<5> > sub_ln203_reg_542;
    sc_signal< sc_lv<2> > trunc_ln203_fu_326_p1;
    sc_signal< sc_lv<2> > trunc_ln203_reg_547;
    sc_signal< sc_lv<2> > j_fu_336_p2;
    sc_signal< sc_lv<2> > j_reg_555;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln234_fu_342_p2;
    sc_signal< sc_lv<1> > icmp_ln234_reg_560;
    sc_signal< sc_lv<1> > icmp_ln232_fu_330_p2;
    sc_signal< sc_lv<7> > tmp_15_cast_fu_357_p3;
    sc_signal< sc_lv<7> > tmp_15_cast_reg_564;
    sc_signal< sc_lv<4> > cache_out_0_V_addr_reg_569;
    sc_signal< sc_lv<4> > cache_out_1_V_addr_reg_574;
    sc_signal< sc_lv<4> > cache_out_2_V_addr_reg_579;
    sc_signal< sc_lv<4> > cache_out_3_V_addr_reg_584;
    sc_signal< sc_lv<3> > k_fu_384_p2;
    sc_signal< sc_lv<3> > k_reg_592;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln233_fu_378_p2;
    sc_signal< sc_lv<2> > trunc_ln203_2_fu_404_p1;
    sc_signal< sc_lv<2> > trunc_ln203_2_reg_602;
    sc_signal< sc_lv<3> > i_0_reg_251;
    sc_signal< sc_lv<2> > j_0_reg_262;
    sc_signal< sc_lv<3> > k_0_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > sext_ln203_fu_370_p1;
    sc_signal< sc_lv<64> > zext_ln203_7_fu_399_p1;
    sc_signal< sc_lv<2> > trunc_ln203_1_fu_408_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_423_p18;
    sc_signal< sc_lv<4> > tmp_2_fu_300_p3;
    sc_signal< sc_lv<5> > tmp_3_fu_312_p3;
    sc_signal< sc_lv<5> > zext_ln203_3_fu_296_p1;
    sc_signal< sc_lv<5> > zext_ln203_5_fu_348_p1;
    sc_signal< sc_lv<5> > add_ln203_fu_352_p2;
    sc_signal< sc_lv<5> > add_ln203_1_fu_365_p2;
    sc_signal< sc_lv<7> > zext_ln203_6_fu_390_p1;
    sc_signal< sc_lv<7> > add_ln203_2_fu_394_p2;
    sc_signal< sc_lv<4> > tmp_1_fu_412_p3;
    sc_signal< sc_lv<5> > tmp_9_fu_423_p17;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln203_1_fu_365_p2();
    void thread_add_ln203_2_fu_394_p2();
    void thread_add_ln203_fu_352_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cache_in_V_address0();
    void thread_cache_in_V_ce0();
    void thread_cache_out_0_V_address0();
    void thread_cache_out_0_V_ce0();
    void thread_cache_out_0_V_d0();
    void thread_cache_out_0_V_we0();
    void thread_cache_out_1_V_address0();
    void thread_cache_out_1_V_ce0();
    void thread_cache_out_1_V_d0();
    void thread_cache_out_1_V_we0();
    void thread_cache_out_2_V_address0();
    void thread_cache_out_2_V_ce0();
    void thread_cache_out_2_V_d0();
    void thread_cache_out_2_V_we0();
    void thread_cache_out_3_V_address0();
    void thread_cache_out_3_V_ce0();
    void thread_cache_out_3_V_d0();
    void thread_cache_out_3_V_we0();
    void thread_i_fu_290_p2();
    void thread_icmp_ln231_fu_284_p2();
    void thread_icmp_ln232_fu_330_p2();
    void thread_icmp_ln233_fu_378_p2();
    void thread_icmp_ln234_fu_342_p2();
    void thread_j_fu_336_p2();
    void thread_k_fu_384_p2();
    void thread_sext_ln203_fu_370_p1();
    void thread_sub_ln203_fu_320_p2();
    void thread_tmp_15_cast_fu_357_p3();
    void thread_tmp_1_fu_412_p3();
    void thread_tmp_2_fu_300_p3();
    void thread_tmp_3_fu_312_p3();
    void thread_tmp_9_fu_423_p17();
    void thread_trunc_ln203_1_fu_408_p1();
    void thread_trunc_ln203_2_fu_404_p1();
    void thread_trunc_ln203_fu_326_p1();
    void thread_zext_ln203_3_fu_296_p1();
    void thread_zext_ln203_4_fu_308_p1();
    void thread_zext_ln203_5_fu_348_p1();
    void thread_zext_ln203_6_fu_390_p1();
    void thread_zext_ln203_7_fu_399_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
