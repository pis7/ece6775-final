// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _GEMM_3D_float_1_HH_
#define _GEMM_3D_float_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_mux_42_40_1_1.h"

namespace ap_rtl {

struct GEMM_3D_float_1 : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<40> > p_read;
    sc_in< sc_lv<40> > p_read1;
    sc_in< sc_lv<40> > p_read2;
    sc_in< sc_lv<40> > p_read3;
    sc_in< sc_lv<40> > p_read4;
    sc_in< sc_lv<40> > p_read5;
    sc_in< sc_lv<40> > p_read6;
    sc_in< sc_lv<40> > p_read7;
    sc_in< sc_lv<40> > p_read8;
    sc_in< sc_lv<40> > p_read9;
    sc_in< sc_lv<40> > p_read10;
    sc_in< sc_lv<40> > p_read11;
    sc_out< sc_lv<4> > input_2_0_V_address0;
    sc_out< sc_logic > input_2_0_V_ce0;
    sc_in< sc_lv<40> > input_2_0_V_q0;
    sc_out< sc_lv<4> > input_2_0_V_address1;
    sc_out< sc_logic > input_2_0_V_ce1;
    sc_in< sc_lv<40> > input_2_0_V_q1;
    sc_out< sc_lv<4> > input_2_1_V_address0;
    sc_out< sc_logic > input_2_1_V_ce0;
    sc_in< sc_lv<40> > input_2_1_V_q0;
    sc_out< sc_lv<4> > input_2_1_V_address1;
    sc_out< sc_logic > input_2_1_V_ce1;
    sc_in< sc_lv<40> > input_2_1_V_q1;
    sc_out< sc_lv<4> > input_2_2_V_address0;
    sc_out< sc_logic > input_2_2_V_ce0;
    sc_in< sc_lv<40> > input_2_2_V_q0;
    sc_out< sc_lv<4> > input_2_2_V_address1;
    sc_out< sc_logic > input_2_2_V_ce1;
    sc_in< sc_lv<40> > input_2_2_V_q1;
    sc_out< sc_lv<4> > input_2_3_V_address0;
    sc_out< sc_logic > input_2_3_V_ce0;
    sc_in< sc_lv<40> > input_2_3_V_q0;
    sc_out< sc_lv<4> > input_2_3_V_address1;
    sc_out< sc_logic > input_2_3_V_ce1;
    sc_in< sc_lv<40> > input_2_3_V_q1;
    sc_out< sc_lv<40> > ap_return_0;
    sc_out< sc_lv<40> > ap_return_1;
    sc_out< sc_lv<40> > ap_return_2;
    sc_out< sc_lv<40> > ap_return_3;
    sc_out< sc_lv<40> > ap_return_4;
    sc_out< sc_lv<40> > ap_return_5;
    sc_out< sc_lv<40> > ap_return_6;
    sc_out< sc_lv<40> > ap_return_7;
    sc_out< sc_lv<40> > ap_return_8;
    sc_out< sc_lv<40> > ap_return_9;
    sc_out< sc_lv<40> > ap_return_10;
    sc_out< sc_lv<40> > ap_return_11;
    sc_out< sc_lv<40> > ap_return_12;
    sc_out< sc_lv<40> > ap_return_13;
    sc_out< sc_lv<40> > ap_return_14;
    sc_out< sc_lv<40> > ap_return_15;


    // Module declarations
    GEMM_3D_float_1(sc_module_name name);
    SC_HAS_PROCESS(GEMM_3D_float_1);

    ~GEMM_3D_float_1();

    sc_trace_file* mVcdFile;

    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U178;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U179;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U180;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U181;
    dut_mux_42_40_1_1<1,1,40,40,40,40,2,40>* dut_mux_42_40_1_1_U182;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten_reg_364;
    sc_signal< sc_lv<3> > i_0_reg_375;
    sc_signal< sc_lv<3> > k_0_0_reg_386;
    sc_signal< sc_lv<40> > grp_fu_397_p6;
    sc_signal< sc_lv<40> > reg_410;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > icmp_ln271_reg_1035;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln271_fu_414_p2;
    sc_signal< sc_lv<1> > icmp_ln271_reg_1035_pp0_iter1_reg;
    sc_signal< sc_lv<5> > add_ln271_fu_420_p2;
    sc_signal< sc_lv<5> > add_ln271_reg_1039;
    sc_signal< sc_lv<3> > select_ln274_fu_438_p3;
    sc_signal< sc_lv<3> > select_ln274_reg_1044;
    sc_signal< sc_lv<3> > select_ln274_1_fu_446_p3;
    sc_signal< sc_lv<3> > select_ln274_1_reg_1049;
    sc_signal< sc_lv<5> > sub_ln1117_fu_466_p2;
    sc_signal< sc_lv<5> > sub_ln1117_reg_1054;
    sc_signal< sc_lv<2> > trunc_ln274_fu_494_p1;
    sc_signal< sc_lv<2> > trunc_ln274_reg_1099;
    sc_signal< sc_lv<2> > trunc_ln274_reg_1099_pp0_iter1_reg;
    sc_signal< sc_lv<2> > trunc_ln203_fu_498_p1;
    sc_signal< sc_lv<2> > trunc_ln203_reg_1103;
    sc_signal< sc_lv<2> > trunc_ln203_reg_1103_pp0_iter1_reg;
    sc_signal< sc_lv<40> > tmp_28_fu_502_p6;
    sc_signal< sc_lv<40> > tmp_28_reg_1109;
    sc_signal< sc_lv<40> > tmp_30_fu_512_p6;
    sc_signal< sc_lv<40> > tmp_30_reg_1114;
    sc_signal< sc_lv<40> > tmp_32_fu_522_p6;
    sc_signal< sc_lv<40> > tmp_32_reg_1119;
    sc_signal< sc_lv<40> > tmp_32_reg_1119_pp0_iter1_reg;
    sc_signal< sc_lv<40> > tmp_31_fu_545_p6;
    sc_signal< sc_lv<40> > tmp_31_reg_1144;
    sc_signal< sc_lv<3> > add_ln273_fu_558_p2;
    sc_signal< sc_lv<3> > add_ln273_reg_1149;
    sc_signal< sc_lv<56> > mul_ln1192_fu_582_p2;
    sc_signal< sc_lv<56> > mul_ln1192_reg_1154;
    sc_signal< sc_lv<40> > tmp_57_reg_1159;
    sc_signal< sc_lv<56> > mul_ln1192_1_fu_617_p2;
    sc_signal< sc_lv<56> > mul_ln1192_1_reg_1164;
    sc_signal< sc_lv<40> > tmp_58_reg_1169;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<5> > ap_phi_mux_indvar_flatten_phi_fu_368_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_i_0_phi_fu_379_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_k_0_0_phi_fu_390_p4;
    sc_signal< sc_lv<64> > sext_ln1117_1_fu_472_p1;
    sc_signal< sc_lv<64> > sext_ln1117_2_fu_486_p1;
    sc_signal< sc_lv<64> > sext_ln1117_3_fu_537_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<40> > output_V823_1_fu_96;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<40> > output_V822_1_fu_100;
    sc_signal< sc_lv<40> > output_V_1_fu_104;
    sc_signal< sc_lv<40> > output_V821_1_fu_108;
    sc_signal< sc_lv<40> > output_V8_1_fu_112;
    sc_signal< sc_lv<40> > output_V12_1_fu_116;
    sc_signal< sc_lv<40> > output_V720_1_fu_120;
    sc_signal< sc_lv<40> > output_V719_1_fu_124;
    sc_signal< sc_lv<40> > output_V13_1_fu_128;
    sc_signal< sc_lv<40> > output_V718_1_fu_132;
    sc_signal< sc_lv<40> > output_V7_1_fu_136;
    sc_signal< sc_lv<40> > output_V14_1_fu_140;
    sc_signal< sc_lv<40> > output_V617_1_fu_144;
    sc_signal< sc_lv<40> > output_V616_1_fu_148;
    sc_signal< sc_lv<40> > output_V6_1_fu_152;
    sc_signal< sc_lv<40> > output_V615_1_fu_156;
    sc_signal< sc_lv<1> > icmp_ln273_fu_432_p2;
    sc_signal< sc_lv<3> > i_fu_426_p2;
    sc_signal< sc_lv<5> > tmp_fu_458_p3;
    sc_signal< sc_lv<5> > zext_ln1117_fu_454_p1;
    sc_signal< sc_lv<5> > add_ln1117_fu_480_p2;
    sc_signal< sc_lv<5> > add_ln1117_1_fu_532_p2;
    sc_signal< sc_lv<40> > mul_ln1118_fu_570_p0;
    sc_signal< sc_lv<40> > mul_ln1118_fu_570_p1;
    sc_signal< sc_lv<40> > mul_ln1192_fu_582_p0;
    sc_signal< sc_lv<40> > mul_ln1192_fu_582_p1;
    sc_signal< sc_lv<56> > mul_ln1118_fu_570_p2;
    sc_signal< sc_lv<56> > shl_ln_fu_598_p3;
    sc_signal< sc_lv<40> > mul_ln1192_1_fu_617_p0;
    sc_signal< sc_lv<40> > mul_ln1192_1_fu_617_p1;
    sc_signal< sc_lv<56> > add_ln1192_fu_605_p2;
    sc_signal< sc_lv<56> > shl_ln728_8_fu_633_p3;
    sc_signal< sc_lv<56> > add_ln1192_4_fu_640_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<16> ap_const_lv16_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1117_1_fu_532_p2();
    void thread_add_ln1117_fu_480_p2();
    void thread_add_ln1192_4_fu_640_p2();
    void thread_add_ln1192_fu_605_p2();
    void thread_add_ln271_fu_420_p2();
    void thread_add_ln273_fu_558_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_379_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_368_p4();
    void thread_ap_phi_mux_k_0_0_phi_fu_390_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_i_fu_426_p2();
    void thread_icmp_ln271_fu_414_p2();
    void thread_icmp_ln273_fu_432_p2();
    void thread_input_2_0_V_address0();
    void thread_input_2_0_V_address1();
    void thread_input_2_0_V_ce0();
    void thread_input_2_0_V_ce1();
    void thread_input_2_1_V_address0();
    void thread_input_2_1_V_address1();
    void thread_input_2_1_V_ce0();
    void thread_input_2_1_V_ce1();
    void thread_input_2_2_V_address0();
    void thread_input_2_2_V_address1();
    void thread_input_2_2_V_ce0();
    void thread_input_2_2_V_ce1();
    void thread_input_2_3_V_address0();
    void thread_input_2_3_V_address1();
    void thread_input_2_3_V_ce0();
    void thread_input_2_3_V_ce1();
    void thread_mul_ln1118_fu_570_p0();
    void thread_mul_ln1118_fu_570_p1();
    void thread_mul_ln1118_fu_570_p2();
    void thread_mul_ln1192_1_fu_617_p0();
    void thread_mul_ln1192_1_fu_617_p1();
    void thread_mul_ln1192_1_fu_617_p2();
    void thread_mul_ln1192_fu_582_p0();
    void thread_mul_ln1192_fu_582_p1();
    void thread_mul_ln1192_fu_582_p2();
    void thread_select_ln274_1_fu_446_p3();
    void thread_select_ln274_fu_438_p3();
    void thread_sext_ln1117_1_fu_472_p1();
    void thread_sext_ln1117_2_fu_486_p1();
    void thread_sext_ln1117_3_fu_537_p1();
    void thread_shl_ln728_8_fu_633_p3();
    void thread_shl_ln_fu_598_p3();
    void thread_sub_ln1117_fu_466_p2();
    void thread_tmp_fu_458_p3();
    void thread_trunc_ln203_fu_498_p1();
    void thread_trunc_ln274_fu_494_p1();
    void thread_zext_ln1117_fu_454_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
