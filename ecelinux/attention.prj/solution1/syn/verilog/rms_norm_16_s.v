// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rms_norm_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_0_V_address1,
        input_0_V_ce1,
        input_0_V_we1,
        input_0_V_d1,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0
);

parameter    ap_ST_fsm_state1 = 116'd1;
parameter    ap_ST_fsm_pp0_stage0 = 116'd2;
parameter    ap_ST_fsm_state6 = 116'd4;
parameter    ap_ST_fsm_state7 = 116'd8;
parameter    ap_ST_fsm_state8 = 116'd16;
parameter    ap_ST_fsm_state9 = 116'd32;
parameter    ap_ST_fsm_state10 = 116'd64;
parameter    ap_ST_fsm_state11 = 116'd128;
parameter    ap_ST_fsm_state12 = 116'd256;
parameter    ap_ST_fsm_state13 = 116'd512;
parameter    ap_ST_fsm_state14 = 116'd1024;
parameter    ap_ST_fsm_state15 = 116'd2048;
parameter    ap_ST_fsm_state16 = 116'd4096;
parameter    ap_ST_fsm_state17 = 116'd8192;
parameter    ap_ST_fsm_state18 = 116'd16384;
parameter    ap_ST_fsm_state19 = 116'd32768;
parameter    ap_ST_fsm_state20 = 116'd65536;
parameter    ap_ST_fsm_state21 = 116'd131072;
parameter    ap_ST_fsm_state22 = 116'd262144;
parameter    ap_ST_fsm_state23 = 116'd524288;
parameter    ap_ST_fsm_state24 = 116'd1048576;
parameter    ap_ST_fsm_state25 = 116'd2097152;
parameter    ap_ST_fsm_state26 = 116'd4194304;
parameter    ap_ST_fsm_state27 = 116'd8388608;
parameter    ap_ST_fsm_state28 = 116'd16777216;
parameter    ap_ST_fsm_state29 = 116'd33554432;
parameter    ap_ST_fsm_state30 = 116'd67108864;
parameter    ap_ST_fsm_state31 = 116'd134217728;
parameter    ap_ST_fsm_state32 = 116'd268435456;
parameter    ap_ST_fsm_state33 = 116'd536870912;
parameter    ap_ST_fsm_state34 = 116'd1073741824;
parameter    ap_ST_fsm_state35 = 116'd2147483648;
parameter    ap_ST_fsm_state36 = 116'd4294967296;
parameter    ap_ST_fsm_state37 = 116'd8589934592;
parameter    ap_ST_fsm_state38 = 116'd17179869184;
parameter    ap_ST_fsm_state39 = 116'd34359738368;
parameter    ap_ST_fsm_state40 = 116'd68719476736;
parameter    ap_ST_fsm_state41 = 116'd137438953472;
parameter    ap_ST_fsm_state42 = 116'd274877906944;
parameter    ap_ST_fsm_state43 = 116'd549755813888;
parameter    ap_ST_fsm_state44 = 116'd1099511627776;
parameter    ap_ST_fsm_state45 = 116'd2199023255552;
parameter    ap_ST_fsm_state46 = 116'd4398046511104;
parameter    ap_ST_fsm_state47 = 116'd8796093022208;
parameter    ap_ST_fsm_state48 = 116'd17592186044416;
parameter    ap_ST_fsm_state49 = 116'd35184372088832;
parameter    ap_ST_fsm_state50 = 116'd70368744177664;
parameter    ap_ST_fsm_state51 = 116'd140737488355328;
parameter    ap_ST_fsm_state52 = 116'd281474976710656;
parameter    ap_ST_fsm_state53 = 116'd562949953421312;
parameter    ap_ST_fsm_state54 = 116'd1125899906842624;
parameter    ap_ST_fsm_state55 = 116'd2251799813685248;
parameter    ap_ST_fsm_state56 = 116'd4503599627370496;
parameter    ap_ST_fsm_state57 = 116'd9007199254740992;
parameter    ap_ST_fsm_state58 = 116'd18014398509481984;
parameter    ap_ST_fsm_state59 = 116'd36028797018963968;
parameter    ap_ST_fsm_state60 = 116'd72057594037927936;
parameter    ap_ST_fsm_state61 = 116'd144115188075855872;
parameter    ap_ST_fsm_state62 = 116'd288230376151711744;
parameter    ap_ST_fsm_state63 = 116'd576460752303423488;
parameter    ap_ST_fsm_state64 = 116'd1152921504606846976;
parameter    ap_ST_fsm_state65 = 116'd2305843009213693952;
parameter    ap_ST_fsm_state66 = 116'd4611686018427387904;
parameter    ap_ST_fsm_state67 = 116'd9223372036854775808;
parameter    ap_ST_fsm_state68 = 116'd18446744073709551616;
parameter    ap_ST_fsm_state69 = 116'd36893488147419103232;
parameter    ap_ST_fsm_state70 = 116'd73786976294838206464;
parameter    ap_ST_fsm_state71 = 116'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 116'd295147905179352825856;
parameter    ap_ST_fsm_state73 = 116'd590295810358705651712;
parameter    ap_ST_fsm_state74 = 116'd1180591620717411303424;
parameter    ap_ST_fsm_state75 = 116'd2361183241434822606848;
parameter    ap_ST_fsm_state76 = 116'd4722366482869645213696;
parameter    ap_ST_fsm_state77 = 116'd9444732965739290427392;
parameter    ap_ST_fsm_state78 = 116'd18889465931478580854784;
parameter    ap_ST_fsm_state79 = 116'd37778931862957161709568;
parameter    ap_ST_fsm_state80 = 116'd75557863725914323419136;
parameter    ap_ST_fsm_state81 = 116'd151115727451828646838272;
parameter    ap_ST_fsm_state82 = 116'd302231454903657293676544;
parameter    ap_ST_fsm_state83 = 116'd604462909807314587353088;
parameter    ap_ST_fsm_state84 = 116'd1208925819614629174706176;
parameter    ap_ST_fsm_state85 = 116'd2417851639229258349412352;
parameter    ap_ST_fsm_state86 = 116'd4835703278458516698824704;
parameter    ap_ST_fsm_state87 = 116'd9671406556917033397649408;
parameter    ap_ST_fsm_state88 = 116'd19342813113834066795298816;
parameter    ap_ST_fsm_state89 = 116'd38685626227668133590597632;
parameter    ap_ST_fsm_state90 = 116'd77371252455336267181195264;
parameter    ap_ST_fsm_state91 = 116'd154742504910672534362390528;
parameter    ap_ST_fsm_state92 = 116'd309485009821345068724781056;
parameter    ap_ST_fsm_state93 = 116'd618970019642690137449562112;
parameter    ap_ST_fsm_state94 = 116'd1237940039285380274899124224;
parameter    ap_ST_fsm_state95 = 116'd2475880078570760549798248448;
parameter    ap_ST_fsm_state96 = 116'd4951760157141521099596496896;
parameter    ap_ST_fsm_state97 = 116'd9903520314283042199192993792;
parameter    ap_ST_fsm_state98 = 116'd19807040628566084398385987584;
parameter    ap_ST_fsm_state99 = 116'd39614081257132168796771975168;
parameter    ap_ST_fsm_state100 = 116'd79228162514264337593543950336;
parameter    ap_ST_fsm_state101 = 116'd158456325028528675187087900672;
parameter    ap_ST_fsm_state102 = 116'd316912650057057350374175801344;
parameter    ap_ST_fsm_state103 = 116'd633825300114114700748351602688;
parameter    ap_ST_fsm_state104 = 116'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state105 = 116'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state106 = 116'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state107 = 116'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state108 = 116'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state109 = 116'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state110 = 116'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state111 = 116'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state112 = 116'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state113 = 116'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state114 = 116'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state115 = 116'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state116 = 116'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state117 = 116'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_pp1_stage0 = 116'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state127 = 116'd41538374868278621028243970633760768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_V_address0;
output   input_0_V_ce0;
input  [31:0] input_0_V_q0;
output  [3:0] input_0_V_address1;
output   input_0_V_ce1;
output   input_0_V_we1;
output  [31:0] input_0_V_d1;
output  [3:0] weight_V_address0;
output   weight_V_ce0;
input  [31:0] weight_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_0_V_address0;
reg input_0_V_ce0;
reg input_0_V_ce1;
reg input_0_V_we1;
reg weight_V_ce0;

(* fsm_encoding = "none" *) reg   [115:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] p_Val2_s_reg_157;
reg   [4:0] i_0_reg_169;
reg   [4:0] i1_0_reg_211;
reg  signed [31:0] reg_222;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln86_reg_653;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state118_pp1_stage0_iter0;
wire    ap_block_state119_pp1_stage0_iter1;
wire    ap_block_state120_pp1_stage0_iter2;
wire    ap_block_state121_pp1_stage0_iter3;
wire    ap_block_state122_pp1_stage0_iter4;
wire    ap_block_state123_pp1_stage0_iter5;
wire    ap_block_state124_pp1_stage0_iter6;
wire    ap_block_state125_pp1_stage0_iter7;
wire    ap_block_state126_pp1_stage0_iter8;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln91_reg_762;
reg   [0:0] icmp_ln91_reg_762_pp1_iter1_reg;
wire   [0:0] icmp_ln86_fu_226_p2;
reg   [0:0] icmp_ln86_reg_653_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_653_pp0_iter2_reg;
wire   [4:0] i_fu_232_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] r_V_7_fu_247_p2;
reg   [63:0] r_V_7_reg_667;
reg    ap_enable_reg_pp0_iter3;
wire   [29:0] p_Val2_1_fu_352_p2;
reg   [29:0] p_Val2_1_reg_677;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_2_reg_682;
reg   [28:0] trunc_ln1148_7_reg_687;
wire  signed [52:0] sext_ln728_1_fu_383_p1;
reg  signed [52:0] sext_ln728_1_reg_692;
wire    ap_CS_fsm_state7;
wire   [31:0] guess_V_fu_424_p3;
wire  signed [64:0] sext_ln728_fu_431_p1;
reg  signed [64:0] sext_ln728_reg_702;
wire   [0:0] icmp_ln68_fu_435_p2;
reg   [0:0] icmp_ln68_reg_707;
wire    ap_CS_fsm_state8;
wire   [3:0] i_1_fu_441_p2;
reg   [3:0] i_1_reg_711;
wire   [53:0] ret_V_1_fu_464_p2;
reg   [53:0] ret_V_1_reg_721;
wire    ap_CS_fsm_state64;
reg   [0:0] tmp_5_reg_726;
reg   [31:0] trunc_ln1148_6_reg_731;
wire  signed [31:0] guess_V_1_fu_525_p3;
reg  signed [31:0] guess_V_1_reg_736;
wire    ap_CS_fsm_state65;
wire   [63:0] r_V_8_fu_534_p2;
reg   [63:0] r_V_8_reg_743;
wire    ap_CS_fsm_state66;
wire   [0:0] icmp_ln1495_fu_580_p2;
reg   [0:0] icmp_ln1495_reg_748;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire  signed [63:0] r_V_4_fu_600_p1;
reg  signed [63:0] r_V_4_reg_757;
wire    ap_CS_fsm_state117;
wire   [0:0] icmp_ln91_fu_604_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln91_reg_762_pp1_iter2_reg;
reg   [0:0] icmp_ln91_reg_762_pp1_iter3_reg;
reg   [0:0] icmp_ln91_reg_762_pp1_iter4_reg;
reg   [0:0] icmp_ln91_reg_762_pp1_iter5_reg;
reg   [0:0] icmp_ln91_reg_762_pp1_iter6_reg;
reg   [0:0] icmp_ln91_reg_762_pp1_iter7_reg;
wire   [4:0] i_2_fu_610_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [3:0] input_0_V_addr_1_reg_776;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter1_reg;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter2_reg;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter3_reg;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter4_reg;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter5_reg;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter6_reg;
reg   [3:0] input_0_V_addr_1_reg_776_pp1_iter7_reg;
reg   [31:0] weight_V_load_reg_782;
wire   [63:0] r_V_5_fu_625_p2;
reg  signed [63:0] r_V_5_reg_787;
reg   [31:0] trunc_ln2_reg_802;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state118;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg  signed [31:0] p_Val2_4_reg_180;
reg   [3:0] i_0_i_reg_190;
reg  signed [31:0] ap_phi_mux_agg_result_V_1_i_phi_fu_204_p4;
reg   [31:0] agg_result_V_1_i_reg_201;
wire   [63:0] zext_ln87_fu_238_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln92_fu_616_p1;
wire    ap_block_pp1_stage0;
wire  signed [31:0] r_V_7_fu_247_p0;
wire  signed [63:0] r_V_fu_243_p1;
wire  signed [31:0] r_V_7_fu_247_p1;
wire   [53:0] lhs_V_fu_253_p3;
wire   [64:0] zext_ln703_fu_265_p1;
wire   [64:0] zext_ln728_fu_261_p1;
wire   [64:0] ret_V_fu_268_p2;
wire   [53:0] t_V_fu_284_p3;
wire   [53:0] sub_ln1148_fu_300_p2;
wire   [27:0] tmp_6_fu_306_p4;
wire   [27:0] tmp_7_fu_320_p4;
wire   [28:0] zext_ln1148_1_fu_316_p1;
wire   [0:0] tmp_1_fu_292_p3;
wire   [28:0] sub_ln1148_1_fu_334_p2;
wire   [28:0] zext_ln1148_2_fu_330_p1;
wire   [28:0] select_ln1148_fu_340_p3;
wire  signed [29:0] sext_ln1148_1_fu_348_p1;
wire  signed [51:0] rhs_V_fu_376_p3;
wire   [52:0] sub_ln1148_2_fu_387_p2;
wire   [29:0] tmp_3_fu_393_p4;
wire  signed [30:0] sext_ln1148_2_fu_403_p1;
wire  signed [30:0] sext_ln1148_3_fu_411_p1;
wire   [31:0] zext_ln1148_3_fu_407_p1;
wire   [31:0] sub_ln1148_3_fu_418_p2;
wire   [31:0] zext_ln1148_fu_414_p1;
wire   [52:0] grp_fu_451_p2;
wire  signed [53:0] sext_ln703_fu_460_p1;
wire  signed [53:0] sext_ln1148_5_fu_456_p1;
wire   [75:0] tmp_4_fu_488_p3;
wire  signed [76:0] sext_ln728_2_fu_495_p1;
wire   [77:0] t_V_1_fu_499_p1;
wire   [77:0] sub_ln1148_4_fu_503_p2;
wire   [31:0] trunc_ln1148_5_fu_509_p4;
wire   [31:0] sub_ln1148_5_fu_519_p2;
wire  signed [31:0] r_V_8_fu_534_p0;
wire  signed [63:0] r_V_2_fu_531_p1;
wire  signed [31:0] r_V_8_fu_534_p1;
wire   [64:0] zext_ln703_1_fu_540_p1;
wire   [64:0] ret_V_2_fu_543_p2;
wire   [31:0] p_Val2_8_fu_548_p4;
wire   [0:0] tmp_8_fu_558_p3;
wire   [31:0] sub_ln703_fu_566_p2;
wire   [31:0] p_Val2_9_fu_572_p3;
wire   [31:0] grp_fu_590_p2;
wire   [31:0] variance_V_1_fu_596_p1;
wire  signed [31:0] r_V_5_fu_625_p0;
wire  signed [31:0] r_V_5_fu_625_p1;
wire   [75:0] grp_fu_637_p2;
reg    grp_fu_451_ap_start;
wire    grp_fu_451_ap_done;
reg    grp_fu_590_ap_start;
wire    grp_fu_590_ap_done;
wire    ap_CS_fsm_state127;
reg   [115:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 116'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
end

dut_sdiv_53s_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 57 ),
    .din0_WIDTH( 53 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 53 ))
dut_sdiv_53s_32s_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_451_ap_start),
    .done(grp_fu_451_ap_done),
    .din0(sext_ln728_1_reg_692),
    .din1(p_Val2_4_reg_180),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

dut_sdiv_46ns_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 50 ),
    .din0_WIDTH( 46 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_sdiv_46ns_32scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_590_ap_start),
    .done(grp_fu_590_ap_done),
    .din0(46'd17592186044416),
    .din1(ap_phi_mux_agg_result_V_1_i_phi_fu_204_p4),
    .ce(1'b1),
    .dout(grp_fu_590_p2)
);

dut_mul_64s_32s_7dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 76 ))
dut_mul_64s_32s_7dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_V_5_reg_787),
    .din1(reg_222),
    .ce(1'b1),
    .dout(grp_fu_637_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state118) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state117)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state118)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state118);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end else if ((1'b1 == ap_CS_fsm_state117)) begin
            ap_enable_reg_pp1_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1495_reg_748 == 1'd1) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln68_reg_707 == 1'd0))) begin
        agg_result_V_1_i_reg_201 <= guess_V_1_reg_736;
    end else if (((icmp_ln68_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        agg_result_V_1_i_reg_201 <= p_Val2_4_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_fu_604_p2 == 1'd0))) begin
        i1_0_reg_211 <= i_2_fu_610_p2;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        i1_0_reg_211 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1495_reg_748 == 1'd0) & (icmp_ln68_reg_707 == 1'd0))) begin
        i_0_i_reg_190 <= i_1_reg_711;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_reg_190 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_169 <= i_fu_232_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_169 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (icmp_ln1495_reg_748 == 1'd0) & (icmp_ln68_reg_707 == 1'd0))) begin
        p_Val2_4_reg_180 <= guess_V_1_reg_736;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_4_reg_180 <= guess_V_fu_424_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln86_reg_653_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_157 <= {{ret_V_fu_268_p2[53:22]}};
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        guess_V_1_reg_736 <= guess_V_1_fu_525_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_711 <= i_1_fu_441_p2;
        icmp_ln68_reg_707 <= icmp_ln68_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        icmp_ln1495_reg_748 <= icmp_ln1495_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln86_reg_653 <= icmp_ln86_fu_226_p2;
        icmp_ln86_reg_653_pp0_iter1_reg <= icmp_ln86_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln86_reg_653_pp0_iter2_reg <= icmp_ln86_reg_653_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln91_reg_762 <= icmp_ln91_fu_604_p2;
        icmp_ln91_reg_762_pp1_iter1_reg <= icmp_ln91_reg_762;
        input_0_V_addr_1_reg_776_pp1_iter1_reg <= input_0_V_addr_1_reg_776;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln91_reg_762_pp1_iter2_reg <= icmp_ln91_reg_762_pp1_iter1_reg;
        icmp_ln91_reg_762_pp1_iter3_reg <= icmp_ln91_reg_762_pp1_iter2_reg;
        icmp_ln91_reg_762_pp1_iter4_reg <= icmp_ln91_reg_762_pp1_iter3_reg;
        icmp_ln91_reg_762_pp1_iter5_reg <= icmp_ln91_reg_762_pp1_iter4_reg;
        icmp_ln91_reg_762_pp1_iter6_reg <= icmp_ln91_reg_762_pp1_iter5_reg;
        icmp_ln91_reg_762_pp1_iter7_reg <= icmp_ln91_reg_762_pp1_iter6_reg;
        input_0_V_addr_1_reg_776_pp1_iter2_reg <= input_0_V_addr_1_reg_776_pp1_iter1_reg;
        input_0_V_addr_1_reg_776_pp1_iter3_reg <= input_0_V_addr_1_reg_776_pp1_iter2_reg;
        input_0_V_addr_1_reg_776_pp1_iter4_reg <= input_0_V_addr_1_reg_776_pp1_iter3_reg;
        input_0_V_addr_1_reg_776_pp1_iter5_reg <= input_0_V_addr_1_reg_776_pp1_iter4_reg;
        input_0_V_addr_1_reg_776_pp1_iter6_reg <= input_0_V_addr_1_reg_776_pp1_iter5_reg;
        input_0_V_addr_1_reg_776_pp1_iter7_reg <= input_0_V_addr_1_reg_776_pp1_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_fu_604_p2 == 1'd0))) begin
        input_0_V_addr_1_reg_776 <= zext_ln92_fu_616_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_1_reg_677 <= p_Val2_1_fu_352_p2;
        tmp_2_reg_682 <= p_Val2_1_fu_352_p2[32'd29];
        trunc_ln1148_7_reg_687 <= {{p_Val2_1_fu_352_p2[29:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        r_V_4_reg_757 <= r_V_4_fu_600_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_reg_762_pp1_iter1_reg == 1'd0))) begin
        r_V_5_reg_787 <= r_V_5_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_653_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_7_reg_667 <= r_V_7_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        r_V_8_reg_743 <= r_V_8_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_reg_762_pp1_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_reg_653 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_222 <= input_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        ret_V_1_reg_721 <= ret_V_1_fu_464_p2;
        tmp_5_reg_726 <= ret_V_1_fu_464_p2[32'd53];
        trunc_ln1148_6_reg_731 <= {{ret_V_1_fu_464_p2[32:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sext_ln728_1_reg_692[52 : 22] <= sext_ln728_1_fu_383_p1[52 : 22];
        sext_ln728_reg_702[64 : 22] <= sext_ln728_fu_431_p1[64 : 22];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_reg_762_pp1_iter6_reg == 1'd0))) begin
        trunc_ln2_reg_802 <= {{grp_fu_637_p2[75:44]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_reg_762 == 1'd0))) begin
        weight_V_load_reg_782 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_226_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln91_fu_604_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state118 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state118 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state127) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1495_reg_748 == 1'd1) & (1'b1 == ap_CS_fsm_state68) & (icmp_ln68_reg_707 == 1'd0))) begin
        ap_phi_mux_agg_result_V_1_i_phi_fu_204_p4 = guess_V_1_reg_736;
    end else begin
        ap_phi_mux_agg_result_V_1_i_phi_fu_204_p4 = agg_result_V_1_i_reg_201;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln68_fu_435_p2 == 1'd0))) begin
        grp_fu_451_ap_start = 1'b1;
    end else begin
        grp_fu_451_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state68) & ((icmp_ln1495_reg_748 == 1'd1) | (icmp_ln68_reg_707 == 1'd1)))) begin
        grp_fu_590_ap_start = 1'b1;
    end else begin
        grp_fu_590_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_0_V_address0 = input_0_V_addr_1_reg_776;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_V_address0 = zext_ln87_fu_238_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_0_V_ce1 = 1'b1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln91_reg_762_pp1_iter7_reg == 1'd0))) begin
        input_0_V_we1 = 1'b1;
    end else begin
        input_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln86_fu_226_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln86_fu_226_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln68_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & ((icmp_ln1495_reg_748 == 1'd1) | (icmp_ln68_reg_707 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln91_fu_604_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter7 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter7 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter8 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln91_fu_604_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state118_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign guess_V_1_fu_525_p3 = ((tmp_5_reg_726[0:0] === 1'b1) ? sub_ln1148_5_fu_519_p2 : trunc_ln1148_6_reg_731);

assign guess_V_fu_424_p3 = ((tmp_2_reg_682[0:0] === 1'b1) ? sub_ln1148_3_fu_418_p2 : zext_ln1148_fu_414_p1);

assign i_1_fu_441_p2 = (i_0_i_reg_190 + 4'd1);

assign i_2_fu_610_p2 = (i1_0_reg_211 + 5'd1);

assign i_fu_232_p2 = (i_0_reg_169 + 5'd1);

assign icmp_ln1495_fu_580_p2 = (($signed(p_Val2_9_fu_572_p3) < $signed(32'd419)) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_435_p2 = ((i_0_i_reg_190 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_226_p2 = ((i_0_reg_169 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_604_p2 = ((i1_0_reg_211 == 5'd16) ? 1'b1 : 1'b0);

assign input_0_V_address1 = input_0_V_addr_1_reg_776_pp1_iter7_reg;

assign input_0_V_d1 = trunc_ln2_reg_802;

assign lhs_V_fu_253_p3 = {{p_Val2_s_reg_157}, {22'd0}};

assign p_Val2_1_fu_352_p2 = ($signed(sext_ln1148_1_fu_348_p1) + $signed(30'd41));

assign p_Val2_8_fu_548_p4 = {{ret_V_2_fu_543_p2[53:22]}};

assign p_Val2_9_fu_572_p3 = ((tmp_8_fu_558_p3[0:0] === 1'b1) ? sub_ln703_fu_566_p2 : p_Val2_8_fu_548_p4);

assign r_V_2_fu_531_p1 = guess_V_1_reg_736;

assign r_V_4_fu_600_p1 = $signed(variance_V_1_fu_596_p1);

assign r_V_5_fu_625_p0 = r_V_4_reg_757;

assign r_V_5_fu_625_p1 = weight_V_load_reg_782;

assign r_V_5_fu_625_p2 = ($signed(r_V_5_fu_625_p0) * $signed(r_V_5_fu_625_p1));

assign r_V_7_fu_247_p0 = r_V_fu_243_p1;

assign r_V_7_fu_247_p1 = r_V_fu_243_p1;

assign r_V_7_fu_247_p2 = ($signed(r_V_7_fu_247_p0) * $signed(r_V_7_fu_247_p1));

assign r_V_8_fu_534_p0 = r_V_2_fu_531_p1;

assign r_V_8_fu_534_p1 = r_V_2_fu_531_p1;

assign r_V_8_fu_534_p2 = ($signed(r_V_8_fu_534_p0) * $signed(r_V_8_fu_534_p1));

assign r_V_fu_243_p1 = reg_222;

assign ret_V_1_fu_464_p2 = ($signed(sext_ln703_fu_460_p1) + $signed(sext_ln1148_5_fu_456_p1));

assign ret_V_2_fu_543_p2 = ($signed(zext_ln703_1_fu_540_p1) - $signed(sext_ln728_reg_702));

assign ret_V_fu_268_p2 = (zext_ln703_fu_265_p1 + zext_ln728_fu_261_p1);

assign rhs_V_fu_376_p3 = {{p_Val2_1_reg_677}, {22'd0}};

assign select_ln1148_fu_340_p3 = ((tmp_1_fu_292_p3[0:0] === 1'b1) ? sub_ln1148_1_fu_334_p2 : zext_ln1148_2_fu_330_p1);

assign sext_ln1148_1_fu_348_p1 = $signed(select_ln1148_fu_340_p3);

assign sext_ln1148_2_fu_403_p1 = $signed(tmp_3_fu_393_p4);

assign sext_ln1148_3_fu_411_p1 = $signed(trunc_ln1148_7_reg_687);

assign sext_ln1148_5_fu_456_p1 = $signed(grp_fu_451_p2);

assign sext_ln703_fu_460_p1 = p_Val2_4_reg_180;

assign sext_ln728_1_fu_383_p1 = rhs_V_fu_376_p3;

assign sext_ln728_2_fu_495_p1 = $signed(tmp_4_fu_488_p3);

assign sext_ln728_fu_431_p1 = rhs_V_fu_376_p3;

assign sub_ln1148_1_fu_334_p2 = (29'd0 - zext_ln1148_1_fu_316_p1);

assign sub_ln1148_2_fu_387_p2 = ($signed(53'd0) - $signed(sext_ln728_1_fu_383_p1));

assign sub_ln1148_3_fu_418_p2 = (32'd0 - zext_ln1148_3_fu_407_p1);

assign sub_ln1148_4_fu_503_p2 = (78'd0 - t_V_1_fu_499_p1);

assign sub_ln1148_5_fu_519_p2 = (32'd0 - trunc_ln1148_5_fu_509_p4);

assign sub_ln1148_fu_300_p2 = (54'd0 - t_V_fu_284_p3);

assign sub_ln703_fu_566_p2 = (32'd0 - p_Val2_8_fu_548_p4);

assign t_V_1_fu_499_p1 = $unsigned(sext_ln728_2_fu_495_p1);

assign t_V_fu_284_p3 = {{p_Val2_s_reg_157}, {22'd0}};

assign tmp_1_fu_292_p3 = p_Val2_s_reg_157[32'd31];

assign tmp_3_fu_393_p4 = {{sub_ln1148_2_fu_387_p2[52:23]}};

assign tmp_4_fu_488_p3 = {{ret_V_1_reg_721}, {22'd0}};

assign tmp_6_fu_306_p4 = {{sub_ln1148_fu_300_p2[53:26]}};

assign tmp_7_fu_320_p4 = {{p_Val2_s_reg_157[31:4]}};

assign tmp_8_fu_558_p3 = ret_V_2_fu_543_p2[32'd53];

assign trunc_ln1148_5_fu_509_p4 = {{sub_ln1148_4_fu_503_p2[54:23]}};

assign variance_V_1_fu_596_p1 = grp_fu_590_p2[31:0];

assign weight_V_address0 = zext_ln92_fu_616_p1;

assign zext_ln1148_1_fu_316_p1 = tmp_6_fu_306_p4;

assign zext_ln1148_2_fu_330_p1 = tmp_7_fu_320_p4;

assign zext_ln1148_3_fu_407_p1 = $unsigned(sext_ln1148_2_fu_403_p1);

assign zext_ln1148_fu_414_p1 = $unsigned(sext_ln1148_3_fu_411_p1);

assign zext_ln703_1_fu_540_p1 = r_V_8_reg_743;

assign zext_ln703_fu_265_p1 = r_V_7_reg_667;

assign zext_ln728_fu_261_p1 = lhs_V_fu_253_p3;

assign zext_ln87_fu_238_p1 = i_0_reg_169;

assign zext_ln92_fu_616_p1 = i1_0_reg_211;

always @ (posedge ap_clk) begin
    sext_ln728_1_reg_692[21:0] <= 22'b0000000000000000000000;
    sext_ln728_reg_702[21:0] <= 22'b0000000000000000000000;
end

endmodule //rms_norm_16_s
