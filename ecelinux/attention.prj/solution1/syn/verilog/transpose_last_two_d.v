// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transpose_last_two_d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_1_V_address0,
        input_1_V_ce0,
        input_1_V_q0,
        input_2_V_address0,
        input_2_V_ce0,
        input_2_V_q0,
        input_3_V_address0,
        input_3_V_ce0,
        input_3_V_q0,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_0_V_address1,
        output_0_V_ce1,
        output_0_V_we1,
        output_0_V_d1,
        output_1_V_address0,
        output_1_V_ce0,
        output_1_V_we0,
        output_1_V_d0,
        output_1_V_address1,
        output_1_V_ce1,
        output_1_V_we1,
        output_1_V_d1,
        output_2_V_address0,
        output_2_V_ce0,
        output_2_V_we0,
        output_2_V_d0,
        output_2_V_address1,
        output_2_V_ce1,
        output_2_V_we1,
        output_2_V_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_V_address0;
output   input_0_V_ce0;
input  [39:0] input_0_V_q0;
output  [3:0] input_1_V_address0;
output   input_1_V_ce0;
input  [39:0] input_1_V_q0;
output  [3:0] input_2_V_address0;
output   input_2_V_ce0;
input  [39:0] input_2_V_q0;
output  [3:0] input_3_V_address0;
output   input_3_V_ce0;
input  [39:0] input_3_V_q0;
output  [3:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [39:0] output_0_V_d0;
output  [3:0] output_0_V_address1;
output   output_0_V_ce1;
output   output_0_V_we1;
output  [39:0] output_0_V_d1;
output  [3:0] output_1_V_address0;
output   output_1_V_ce0;
output   output_1_V_we0;
output  [39:0] output_1_V_d0;
output  [3:0] output_1_V_address1;
output   output_1_V_ce1;
output   output_1_V_we1;
output  [39:0] output_1_V_d1;
output  [3:0] output_2_V_address0;
output   output_2_V_ce0;
output   output_2_V_we0;
output  [39:0] output_2_V_d0;
output  [3:0] output_2_V_address1;
output   output_2_V_ce1;
output   output_2_V_we1;
output  [39:0] output_2_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_V_ce0;
reg input_1_V_ce0;
reg input_2_V_ce0;
reg input_3_V_ce0;
reg[3:0] output_0_V_address0;
reg output_0_V_ce0;
reg output_0_V_we0;
reg[39:0] output_0_V_d0;
reg[3:0] output_0_V_address1;
reg output_0_V_ce1;
reg output_0_V_we1;
reg[39:0] output_0_V_d1;
reg[3:0] output_1_V_address0;
reg output_1_V_ce0;
reg output_1_V_we0;
reg[39:0] output_1_V_d0;
reg[3:0] output_1_V_address1;
reg output_1_V_ce1;
reg output_1_V_we1;
reg[39:0] output_1_V_d1;
reg[3:0] output_2_V_address0;
reg output_2_V_ce0;
reg output_2_V_we0;
reg[39:0] output_2_V_d0;
reg[3:0] output_2_V_address1;
reg output_2_V_ce1;
reg output_2_V_we1;
reg[39:0] output_2_V_d1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_249;
reg   [2:0] i_0_reg_260;
reg   [1:0] j_0_reg_271;
wire   [0:0] icmp_ln250_fu_282_p2;
reg   [0:0] icmp_ln250_reg_417;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln250_fu_288_p2;
reg   [3:0] add_ln250_reg_421;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln253_fu_306_p3;
reg   [1:0] select_ln253_reg_426;
wire   [2:0] select_ln253_1_fu_314_p3;
reg   [2:0] select_ln253_1_reg_431;
wire   [4:0] tmp_fu_326_p3;
reg   [4:0] tmp_reg_436;
reg   [39:0] input_2_V_load_reg_464;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [39:0] input_3_V_load_reg_471;
wire   [1:0] j_fu_380_p2;
reg   [1:0] j_reg_478;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_253_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_i_0_phi_fu_264_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_275_p4;
wire  signed [63:0] sext_ln203_fu_350_p1;
wire   [63:0] zext_ln203_fu_358_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_3_fu_369_p3;
wire   [63:0] tmp_4_fu_390_p3;
wire   [63:0] tmp_5_fu_406_p3;
wire   [0:0] icmp_ln251_fu_300_p2;
wire   [2:0] i_fu_294_p2;
wire   [4:0] zext_ln203_1_fu_322_p1;
wire   [4:0] zext_ln203_2_fu_340_p1;
wire   [4:0] sub_ln203_fu_334_p2;
wire   [4:0] add_ln203_fu_344_p2;
wire   [4:0] or_ln203_fu_364_p2;
wire   [4:0] or_ln203_1_fu_385_p2;
wire   [4:0] or_ln203_2_fu_401_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_260 <= select_ln253_1_reg_431;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_260 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_249 <= add_ln250_reg_421;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_249 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_271 <= j_reg_478;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_271 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln250_reg_421 <= add_ln250_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln250_reg_417 <= icmp_ln250_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_2_V_load_reg_464 <= input_2_V_q0;
        input_3_V_load_reg_471 <= input_3_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_478 <= j_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln250_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln253_1_reg_431 <= select_ln253_1_fu_314_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln250_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln253_reg_426 <= select_ln253_fu_306_p3;
        tmp_reg_436[4 : 2] <= tmp_fu_326_p3[4 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln250_fu_282_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_264_p4 = select_ln253_1_reg_431;
    end else begin
        ap_phi_mux_i_0_phi_fu_264_p4 = i_0_reg_260;
    end
end

always @ (*) begin
    if (((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = add_ln250_reg_421;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = indvar_flatten_reg_249;
    end
end

always @ (*) begin
    if (((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_275_p4 = j_reg_478;
    end else begin
        ap_phi_mux_j_0_phi_fu_275_p4 = j_0_reg_271;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_V_ce0 = 1'b1;
    end else begin
        input_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_V_ce0 = 1'b1;
    end else begin
        input_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_3_V_ce0 = 1'b1;
    end else begin
        input_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_0_V_address0 = tmp_4_fu_390_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_0_V_address0 = zext_ln203_fu_358_p1;
    end else begin
        output_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_0_V_address1 = tmp_5_fu_406_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_0_V_address1 = tmp_3_fu_369_p3;
    end else begin
        output_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_0_V_ce1 = 1'b1;
    end else begin
        output_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_0_V_d0 = input_2_V_load_reg_464;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_0_V_d0 = input_0_V_q0;
    end else begin
        output_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_0_V_d1 = input_3_V_load_reg_471;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_0_V_d1 = input_1_V_q0;
    end else begin
        output_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln253_reg_426 == 2'd0)) | ((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (select_ln253_reg_426 == 2'd0)))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln253_reg_426 == 2'd0)) | ((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (select_ln253_reg_426 == 2'd0)))) begin
        output_0_V_we1 = 1'b1;
    end else begin
        output_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_1_V_address0 = tmp_4_fu_390_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_1_V_address0 = zext_ln203_fu_358_p1;
    end else begin
        output_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_1_V_address1 = tmp_5_fu_406_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_1_V_address1 = tmp_3_fu_369_p3;
    end else begin
        output_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_1_V_ce0 = 1'b1;
    end else begin
        output_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_1_V_ce1 = 1'b1;
    end else begin
        output_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_1_V_d0 = input_2_V_load_reg_464;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_1_V_d0 = input_0_V_q0;
    end else begin
        output_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_1_V_d1 = input_3_V_load_reg_471;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_1_V_d1 = input_1_V_q0;
    end else begin
        output_1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln253_reg_426 == 2'd1)) | ((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (select_ln253_reg_426 == 2'd1)))) begin
        output_1_V_we0 = 1'b1;
    end else begin
        output_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln253_reg_426 == 2'd1)) | ((icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (select_ln253_reg_426 == 2'd1)))) begin
        output_1_V_we1 = 1'b1;
    end else begin
        output_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_2_V_address0 = tmp_4_fu_390_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_2_V_address0 = zext_ln203_fu_358_p1;
    end else begin
        output_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_2_V_address1 = tmp_5_fu_406_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_2_V_address1 = tmp_3_fu_369_p3;
    end else begin
        output_2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_2_V_ce0 = 1'b1;
    end else begin
        output_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_2_V_ce1 = 1'b1;
    end else begin
        output_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_2_V_d0 = input_2_V_load_reg_464;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_2_V_d0 = input_0_V_q0;
    end else begin
        output_2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_2_V_d1 = input_3_V_load_reg_471;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_2_V_d1 = input_1_V_q0;
    end else begin
        output_2_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((~(select_ln253_reg_426 == 2'd0) & ~(select_ln253_reg_426 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~(select_ln253_reg_426 == 2'd0) & ~(select_ln253_reg_426 == 2'd1) & (icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_2_V_we0 = 1'b1;
    end else begin
        output_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((~(select_ln253_reg_426 == 2'd0) & ~(select_ln253_reg_426 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~(select_ln253_reg_426 == 2'd0) & ~(select_ln253_reg_426 == 2'd1) & (icmp_ln250_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_2_V_we1 = 1'b1;
    end else begin
        output_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln250_fu_282_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln250_fu_282_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_344_p2 = (zext_ln203_2_fu_340_p1 + sub_ln203_fu_334_p2);

assign add_ln250_fu_288_p2 = (ap_phi_mux_indvar_flatten_phi_fu_253_p4 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_294_p2 = (ap_phi_mux_i_0_phi_fu_264_p4 + 3'd1);

assign icmp_ln250_fu_282_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_253_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_300_p2 = ((ap_phi_mux_j_0_phi_fu_275_p4 == 2'd3) ? 1'b1 : 1'b0);

assign input_0_V_address0 = sext_ln203_fu_350_p1;

assign input_1_V_address0 = sext_ln203_fu_350_p1;

assign input_2_V_address0 = sext_ln203_fu_350_p1;

assign input_3_V_address0 = sext_ln203_fu_350_p1;

assign j_fu_380_p2 = (select_ln253_reg_426 + 2'd1);

assign or_ln203_1_fu_385_p2 = (tmp_reg_436 | 5'd2);

assign or_ln203_2_fu_401_p2 = (tmp_reg_436 | 5'd3);

assign or_ln203_fu_364_p2 = (tmp_reg_436 | 5'd1);

assign select_ln253_1_fu_314_p3 = ((icmp_ln251_fu_300_p2[0:0] === 1'b1) ? i_fu_294_p2 : ap_phi_mux_i_0_phi_fu_264_p4);

assign select_ln253_fu_306_p3 = ((icmp_ln251_fu_300_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_0_phi_fu_275_p4);

assign sext_ln203_fu_350_p1 = $signed(add_ln203_fu_344_p2);

assign sub_ln203_fu_334_p2 = (tmp_fu_326_p3 - zext_ln203_1_fu_322_p1);

assign tmp_3_fu_369_p3 = {{59'd0}, {or_ln203_fu_364_p2}};

assign tmp_4_fu_390_p3 = {{59'd0}, {or_ln203_1_fu_385_p2}};

assign tmp_5_fu_406_p3 = {{59'd0}, {or_ln203_2_fu_401_p2}};

assign tmp_fu_326_p3 = {{select_ln253_1_fu_314_p3}, {2'd0}};

assign zext_ln203_1_fu_322_p1 = select_ln253_1_fu_314_p3;

assign zext_ln203_2_fu_340_p1 = select_ln253_fu_306_p3;

assign zext_ln203_fu_358_p1 = tmp_reg_436;

always @ (posedge ap_clk) begin
    tmp_reg_436[1:0] <= 2'b00;
end

endmodule //transpose_last_two_d
