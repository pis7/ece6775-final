// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2024.1_2/1117371 Production Release
//  HLS Date:       Fri Jun 28 23:58:31 PDT 2024
// 
//  Generated by:   dr655@ecelinux-04.ece.cornell.edu
//  Generated date: Fri Dec 13 01:25:49 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_22_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_22_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_21_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_21_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_20_384_8_9_0_1_1_0_0_1_1_8_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_20_384_8_9_0_1_1_0_0_1_1_8_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [15:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [15:0] data_in;
  input [15:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [15:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_19_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_19_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_18_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_18_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_17_48_40_6_0_1_1_0_0_1_1_40_48_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_17_48_40_6_0_1_1_0_0_1_1_40_48_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [11:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [11:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_16_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_16_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [23:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [23:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_15_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_15_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [23:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [23:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_14_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_14_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [23:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [23:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_13_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_13_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_12_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_12_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_11_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_11_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_10_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_10_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_9_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_9_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_8_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_8_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_7_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_7_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_6_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_6_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_5_384_8_9_0_1_1_0_0_1_1_8_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_5_384_8_9_0_1_1_0_0_1_1_8_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [15:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [15:0] data_in;
  input [15:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [15:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_4_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_4_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_3_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
// ------------------------------------------------------------------


module dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_3_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
    (
  en, data_out, we, re, addr, data_in, data_in_d, addr_d, re_d, we_d, data_out_d,
      en_d
);
  output en;
  input [79:0] data_out;
  output [1:0] we;
  output [1:0] re;
  output [17:0] addr;
  output [79:0] data_in;
  input [79:0] data_in_d;
  input [17:0] addr_d;
  input [1:0] re_d;
  input [1:0] we_d;
  output [79:0] data_out_d;
  input en_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = en_d;
  assign data_out_d = data_out;
  assign we = we_d;
  assign re = re_d;
  assign addr = addr_d;
  assign data_in = data_in_d;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module dut_core_core_fsm (
  clk, rst, input_rsc_en_d_1, fsm_output, for_for_C_1_tr0, attention_sqrt_for_C_10_tr0,
      RMS_NORM_LOOP_2_C_3_tr0, QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0, QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0,
      attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0, LINEAR_FORWARD_NO_MUL_LOOP_3_C_1_tr0,
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_56_tr0, RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0, RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0,
      RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0, RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0, APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0,
      APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0, CACHE_UPDATE_LOOP_3_C_2_tr0, CACHE_UPDATE_LOOP_2_C_0_tr0,
      CACHE_UPDATE_LOOP_1_C_0_tr0, TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0, TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0, GEMM_3D_FLOAT_LOOP_3_C_50_tr0, GEMM_3D_FLOAT_LOOP_1_C_0_tr0,
      SF_LOOP_3_C_3_tr0, SF_LOOP_1_C_0_tr0, SOFTMAX_LOOP_3_C_1_tr0, SOFTMAX_LOOP_4_C_5_tr0,
      SOFTMAX_LOOP_5_C_16_tr0, SOFTMAX_LOOP_1_C_2_tr0, GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0,
      GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0, ATTN_2D_LOOP_3_C_2_tr0, ATTN_2D_LOOP_2_C_0_tr0,
      RMS_NORM_LOOP_1_2_C_1_tr0, attention_sqrt_1_for_C_10_tr0, RMS_NORM_LOOP_2_2_C_3_tr0,
      QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0, QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0,
      output_vinit_C_1_tr0, LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0, LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0,
      for_1_for_C_2_tr0
);
  input clk;
  input rst;
  input input_rsc_en_d_1;
  output [8:0] fsm_output;
  reg [8:0] fsm_output;
  input for_for_C_1_tr0;
  input attention_sqrt_for_C_10_tr0;
  input RMS_NORM_LOOP_2_C_3_tr0;
  input QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0;
  input QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0;
  input attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_3_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_2_C_56_tr0;
  input RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0;
  input RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0;
  input RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0;
  input RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0;
  input APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0;
  input APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0;
  input CACHE_UPDATE_LOOP_3_C_2_tr0;
  input CACHE_UPDATE_LOOP_2_C_0_tr0;
  input CACHE_UPDATE_LOOP_1_C_0_tr0;
  input TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0;
  input TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0;
  input TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0;
  input GEMM_3D_FLOAT_LOOP_3_C_50_tr0;
  input GEMM_3D_FLOAT_LOOP_1_C_0_tr0;
  input SF_LOOP_3_C_3_tr0;
  input SF_LOOP_1_C_0_tr0;
  input SOFTMAX_LOOP_3_C_1_tr0;
  input SOFTMAX_LOOP_4_C_5_tr0;
  input SOFTMAX_LOOP_5_C_16_tr0;
  input SOFTMAX_LOOP_1_C_2_tr0;
  input GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0;
  input GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0;
  input ATTN_2D_LOOP_3_C_2_tr0;
  input ATTN_2D_LOOP_2_C_0_tr0;
  input RMS_NORM_LOOP_1_2_C_1_tr0;
  input attention_sqrt_1_for_C_10_tr0;
  input RMS_NORM_LOOP_2_2_C_3_tr0;
  input QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0;
  input QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0;
  input output_vinit_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0;
  input for_1_for_C_2_tr0;


  // FSM State Type Declaration for dut_core_core_fsm_1
  parameter
    main_C_0 = 9'd0,
    for_for_C_0 = 9'd1,
    for_for_C_1 = 9'd2,
    main_C_1 = 9'd3,
    main_C_2 = 9'd4,
    attention_sqrt_for_C_0 = 9'd5,
    attention_sqrt_for_C_1 = 9'd6,
    attention_sqrt_for_C_2 = 9'd7,
    attention_sqrt_for_C_3 = 9'd8,
    attention_sqrt_for_C_4 = 9'd9,
    attention_sqrt_for_C_5 = 9'd10,
    attention_sqrt_for_C_6 = 9'd11,
    attention_sqrt_for_C_7 = 9'd12,
    attention_sqrt_for_C_8 = 9'd13,
    attention_sqrt_for_C_9 = 9'd14,
    attention_sqrt_for_C_10 = 9'd15,
    main_C_3 = 9'd16,
    main_C_4 = 9'd17,
    main_C_5 = 9'd18,
    main_C_6 = 9'd19,
    main_C_7 = 9'd20,
    main_C_8 = 9'd21,
    main_C_9 = 9'd22,
    main_C_10 = 9'd23,
    main_C_11 = 9'd24,
    main_C_12 = 9'd25,
    main_C_13 = 9'd26,
    main_C_14 = 9'd27,
    main_C_15 = 9'd28,
    main_C_16 = 9'd29,
    main_C_17 = 9'd30,
    main_C_18 = 9'd31,
    main_C_19 = 9'd32,
    main_C_20 = 9'd33,
    main_C_21 = 9'd34,
    main_C_22 = 9'd35,
    main_C_23 = 9'd36,
    main_C_24 = 9'd37,
    main_C_25 = 9'd38,
    main_C_26 = 9'd39,
    main_C_27 = 9'd40,
    main_C_28 = 9'd41,
    main_C_29 = 9'd42,
    RMS_NORM_LOOP_2_C_0 = 9'd43,
    RMS_NORM_LOOP_2_C_1 = 9'd44,
    RMS_NORM_LOOP_2_C_2 = 9'd45,
    RMS_NORM_LOOP_2_C_3 = 9'd46,
    main_C_30 = 9'd47,
    main_C_31 = 9'd48,
    main_C_32 = 9'd49,
    main_C_33 = 9'd50,
    main_C_34 = 9'd51,
    main_C_35 = 9'd52,
    main_C_36 = 9'd53,
    main_C_37 = 9'd54,
    main_C_38 = 9'd55,
    main_C_39 = 9'd56,
    main_C_40 = 9'd57,
    QUANTIZE_ACTIVATION_LOOP_4_C_0 = 9'd58,
    QUANTIZE_ACTIVATION_LOOP_4_C_1 = 9'd59,
    QUANTIZE_ACTIVATION_LOOP_4_C_2 = 9'd60,
    QUANTIZE_ACTIVATION_LOOP_4_C_3 = 9'd61,
    QUANTIZE_ACTIVATION_LOOP_4_C_4 = 9'd62,
    QUANTIZE_ACTIVATION_LOOP_4_C_5 = 9'd63,
    QUANTIZE_ACTIVATION_LOOP_4_C_6 = 9'd64,
    QUANTIZE_ACTIVATION_LOOP_4_C_7 = 9'd65,
    QUANTIZE_ACTIVATION_LOOP_3_C_0 = 9'd66,
    attention_5_1_384_384_8_48_q_proj_re_vinit_C_0 = 9'd67,
    attention_5_1_384_384_8_48_q_proj_re_vinit_C_1 = 9'd68,
    LINEAR_FORWARD_NO_MUL_LOOP_3_C_0 = 9'd69,
    LINEAR_FORWARD_NO_MUL_LOOP_3_C_1 = 9'd70,
    LINEAR_FORWARD_NO_MUL_LOOP_3_C_2 = 9'd71,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_0 = 9'd72,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_1 = 9'd73,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_2 = 9'd74,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_3 = 9'd75,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_4 = 9'd76,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_5 = 9'd77,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_6 = 9'd78,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_7 = 9'd79,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_8 = 9'd80,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_9 = 9'd81,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_10 = 9'd82,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_11 = 9'd83,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_12 = 9'd84,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_13 = 9'd85,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_14 = 9'd86,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_15 = 9'd87,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_16 = 9'd88,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_17 = 9'd89,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_18 = 9'd90,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_19 = 9'd91,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_20 = 9'd92,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_21 = 9'd93,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_22 = 9'd94,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_23 = 9'd95,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_24 = 9'd96,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_25 = 9'd97,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_26 = 9'd98,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_27 = 9'd99,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_28 = 9'd100,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_29 = 9'd101,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_30 = 9'd102,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_31 = 9'd103,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_32 = 9'd104,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_33 = 9'd105,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_34 = 9'd106,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_35 = 9'd107,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_36 = 9'd108,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_37 = 9'd109,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_38 = 9'd110,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_39 = 9'd111,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_40 = 9'd112,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_41 = 9'd113,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_42 = 9'd114,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_43 = 9'd115,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_44 = 9'd116,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_45 = 9'd117,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_46 = 9'd118,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_47 = 9'd119,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_48 = 9'd120,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_49 = 9'd121,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_50 = 9'd122,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_51 = 9'd123,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_52 = 9'd124,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_53 = 9'd125,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_54 = 9'd126,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_55 = 9'd127,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_56 = 9'd128,
    RESHAPE_2D_TO_3D_LOOP_3_C_0 = 9'd129,
    RESHAPE_2D_TO_3D_LOOP_3_C_1 = 9'd130,
    RESHAPE_2D_TO_3D_LOOP_3_C_2 = 9'd131,
    RESHAPE_2D_TO_3D_LOOP_2_C_0 = 9'd132,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_0 = 9'd133,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_1 = 9'd134,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_2 = 9'd135,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_3 = 9'd136,
    RESHAPE_2D_TO_3D_LOOP_2_2_C_0 = 9'd137,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_0 = 9'd138,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_1 = 9'd139,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_2 = 9'd140,
    APPLY_ROTARY_POS_EMB_LOOP_4_C_0 = 9'd141,
    CACHE_UPDATE_LOOP_3_C_0 = 9'd142,
    CACHE_UPDATE_LOOP_3_C_1 = 9'd143,
    CACHE_UPDATE_LOOP_3_C_2 = 9'd144,
    CACHE_UPDATE_LOOP_2_C_0 = 9'd145,
    CACHE_UPDATE_LOOP_1_C_0 = 9'd146,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0 = 9'd147,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_1 = 9'd148,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2 = 9'd149,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0 = 9'd150,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0 = 9'd151,
    GEMM_3D_FLOAT_LOOP_3_C_0 = 9'd152,
    GEMM_3D_FLOAT_LOOP_3_C_1 = 9'd153,
    GEMM_3D_FLOAT_LOOP_3_C_2 = 9'd154,
    GEMM_3D_FLOAT_LOOP_3_C_3 = 9'd155,
    GEMM_3D_FLOAT_LOOP_3_C_4 = 9'd156,
    GEMM_3D_FLOAT_LOOP_3_C_5 = 9'd157,
    GEMM_3D_FLOAT_LOOP_3_C_6 = 9'd158,
    GEMM_3D_FLOAT_LOOP_3_C_7 = 9'd159,
    GEMM_3D_FLOAT_LOOP_3_C_8 = 9'd160,
    GEMM_3D_FLOAT_LOOP_3_C_9 = 9'd161,
    GEMM_3D_FLOAT_LOOP_3_C_10 = 9'd162,
    GEMM_3D_FLOAT_LOOP_3_C_11 = 9'd163,
    GEMM_3D_FLOAT_LOOP_3_C_12 = 9'd164,
    GEMM_3D_FLOAT_LOOP_3_C_13 = 9'd165,
    GEMM_3D_FLOAT_LOOP_3_C_14 = 9'd166,
    GEMM_3D_FLOAT_LOOP_3_C_15 = 9'd167,
    GEMM_3D_FLOAT_LOOP_3_C_16 = 9'd168,
    GEMM_3D_FLOAT_LOOP_3_C_17 = 9'd169,
    GEMM_3D_FLOAT_LOOP_3_C_18 = 9'd170,
    GEMM_3D_FLOAT_LOOP_3_C_19 = 9'd171,
    GEMM_3D_FLOAT_LOOP_3_C_20 = 9'd172,
    GEMM_3D_FLOAT_LOOP_3_C_21 = 9'd173,
    GEMM_3D_FLOAT_LOOP_3_C_22 = 9'd174,
    GEMM_3D_FLOAT_LOOP_3_C_23 = 9'd175,
    GEMM_3D_FLOAT_LOOP_3_C_24 = 9'd176,
    GEMM_3D_FLOAT_LOOP_3_C_25 = 9'd177,
    GEMM_3D_FLOAT_LOOP_3_C_26 = 9'd178,
    GEMM_3D_FLOAT_LOOP_3_C_27 = 9'd179,
    GEMM_3D_FLOAT_LOOP_3_C_28 = 9'd180,
    GEMM_3D_FLOAT_LOOP_3_C_29 = 9'd181,
    GEMM_3D_FLOAT_LOOP_3_C_30 = 9'd182,
    GEMM_3D_FLOAT_LOOP_3_C_31 = 9'd183,
    GEMM_3D_FLOAT_LOOP_3_C_32 = 9'd184,
    GEMM_3D_FLOAT_LOOP_3_C_33 = 9'd185,
    GEMM_3D_FLOAT_LOOP_3_C_34 = 9'd186,
    GEMM_3D_FLOAT_LOOP_3_C_35 = 9'd187,
    GEMM_3D_FLOAT_LOOP_3_C_36 = 9'd188,
    GEMM_3D_FLOAT_LOOP_3_C_37 = 9'd189,
    GEMM_3D_FLOAT_LOOP_3_C_38 = 9'd190,
    GEMM_3D_FLOAT_LOOP_3_C_39 = 9'd191,
    GEMM_3D_FLOAT_LOOP_3_C_40 = 9'd192,
    GEMM_3D_FLOAT_LOOP_3_C_41 = 9'd193,
    GEMM_3D_FLOAT_LOOP_3_C_42 = 9'd194,
    GEMM_3D_FLOAT_LOOP_3_C_43 = 9'd195,
    GEMM_3D_FLOAT_LOOP_3_C_44 = 9'd196,
    GEMM_3D_FLOAT_LOOP_3_C_45 = 9'd197,
    GEMM_3D_FLOAT_LOOP_3_C_46 = 9'd198,
    GEMM_3D_FLOAT_LOOP_3_C_47 = 9'd199,
    GEMM_3D_FLOAT_LOOP_3_C_48 = 9'd200,
    GEMM_3D_FLOAT_LOOP_3_C_49 = 9'd201,
    GEMM_3D_FLOAT_LOOP_3_C_50 = 9'd202,
    GEMM_3D_FLOAT_LOOP_1_C_0 = 9'd203,
    SF_LOOP_3_C_0 = 9'd204,
    SF_LOOP_3_C_1 = 9'd205,
    SF_LOOP_3_C_2 = 9'd206,
    SF_LOOP_3_C_3 = 9'd207,
    SF_LOOP_1_C_0 = 9'd208,
    SOFTMAX_LOOP_1_C_0 = 9'd209,
    SOFTMAX_LOOP_1_C_1 = 9'd210,
    SOFTMAX_LOOP_3_C_0 = 9'd211,
    SOFTMAX_LOOP_3_C_1 = 9'd212,
    SOFTMAX_LOOP_4_C_0 = 9'd213,
    SOFTMAX_LOOP_4_C_1 = 9'd214,
    SOFTMAX_LOOP_4_C_2 = 9'd215,
    SOFTMAX_LOOP_4_C_3 = 9'd216,
    SOFTMAX_LOOP_4_C_4 = 9'd217,
    SOFTMAX_LOOP_4_C_5 = 9'd218,
    SOFTMAX_LOOP_5_C_0 = 9'd219,
    SOFTMAX_LOOP_5_C_1 = 9'd220,
    SOFTMAX_LOOP_5_C_2 = 9'd221,
    SOFTMAX_LOOP_5_C_3 = 9'd222,
    SOFTMAX_LOOP_5_C_4 = 9'd223,
    SOFTMAX_LOOP_5_C_5 = 9'd224,
    SOFTMAX_LOOP_5_C_6 = 9'd225,
    SOFTMAX_LOOP_5_C_7 = 9'd226,
    SOFTMAX_LOOP_5_C_8 = 9'd227,
    SOFTMAX_LOOP_5_C_9 = 9'd228,
    SOFTMAX_LOOP_5_C_10 = 9'd229,
    SOFTMAX_LOOP_5_C_11 = 9'd230,
    SOFTMAX_LOOP_5_C_12 = 9'd231,
    SOFTMAX_LOOP_5_C_13 = 9'd232,
    SOFTMAX_LOOP_5_C_14 = 9'd233,
    SOFTMAX_LOOP_5_C_15 = 9'd234,
    SOFTMAX_LOOP_5_C_16 = 9'd235,
    SOFTMAX_LOOP_1_C_2 = 9'd236,
    GEMM_3D_FLOAT_LOOP_3_1_C_0 = 9'd237,
    GEMM_3D_FLOAT_LOOP_3_1_C_1 = 9'd238,
    GEMM_3D_FLOAT_LOOP_3_1_C_2 = 9'd239,
    GEMM_3D_FLOAT_LOOP_3_1_C_3 = 9'd240,
    GEMM_3D_FLOAT_LOOP_3_1_C_4 = 9'd241,
    GEMM_3D_FLOAT_LOOP_3_1_C_5 = 9'd242,
    GEMM_3D_FLOAT_LOOP_3_1_C_6 = 9'd243,
    GEMM_3D_FLOAT_LOOP_3_1_C_7 = 9'd244,
    GEMM_3D_FLOAT_LOOP_1_1_C_0 = 9'd245,
    ATTN_2D_LOOP_3_C_0 = 9'd246,
    ATTN_2D_LOOP_3_C_1 = 9'd247,
    ATTN_2D_LOOP_3_C_2 = 9'd248,
    ATTN_2D_LOOP_2_C_0 = 9'd249,
    RMS_NORM_LOOP_1_2_C_0 = 9'd250,
    RMS_NORM_LOOP_1_2_C_1 = 9'd251,
    main_C_41 = 9'd252,
    main_C_42 = 9'd253,
    main_C_43 = 9'd254,
    attention_sqrt_1_for_C_0 = 9'd255,
    attention_sqrt_1_for_C_1 = 9'd256,
    attention_sqrt_1_for_C_2 = 9'd257,
    attention_sqrt_1_for_C_3 = 9'd258,
    attention_sqrt_1_for_C_4 = 9'd259,
    attention_sqrt_1_for_C_5 = 9'd260,
    attention_sqrt_1_for_C_6 = 9'd261,
    attention_sqrt_1_for_C_7 = 9'd262,
    attention_sqrt_1_for_C_8 = 9'd263,
    attention_sqrt_1_for_C_9 = 9'd264,
    attention_sqrt_1_for_C_10 = 9'd265,
    main_C_44 = 9'd266,
    main_C_45 = 9'd267,
    main_C_46 = 9'd268,
    main_C_47 = 9'd269,
    main_C_48 = 9'd270,
    main_C_49 = 9'd271,
    main_C_50 = 9'd272,
    main_C_51 = 9'd273,
    main_C_52 = 9'd274,
    main_C_53 = 9'd275,
    main_C_54 = 9'd276,
    main_C_55 = 9'd277,
    main_C_56 = 9'd278,
    main_C_57 = 9'd279,
    RMS_NORM_LOOP_2_2_C_0 = 9'd280,
    RMS_NORM_LOOP_2_2_C_1 = 9'd281,
    RMS_NORM_LOOP_2_2_C_2 = 9'd282,
    RMS_NORM_LOOP_2_2_C_3 = 9'd283,
    main_C_58 = 9'd284,
    main_C_59 = 9'd285,
    main_C_60 = 9'd286,
    main_C_61 = 9'd287,
    main_C_62 = 9'd288,
    main_C_63 = 9'd289,
    main_C_64 = 9'd290,
    main_C_65 = 9'd291,
    main_C_66 = 9'd292,
    main_C_67 = 9'd293,
    main_C_68 = 9'd294,
    main_C_69 = 9'd295,
    main_C_70 = 9'd296,
    main_C_71 = 9'd297,
    main_C_72 = 9'd298,
    main_C_73 = 9'd299,
    main_C_74 = 9'd300,
    main_C_75 = 9'd301,
    main_C_76 = 9'd302,
    main_C_77 = 9'd303,
    main_C_78 = 9'd304,
    main_C_79 = 9'd305,
    main_C_80 = 9'd306,
    main_C_81 = 9'd307,
    main_C_82 = 9'd308,
    main_C_83 = 9'd309,
    main_C_84 = 9'd310,
    main_C_85 = 9'd311,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_0 = 9'd312,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_1 = 9'd313,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_2 = 9'd314,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_3 = 9'd315,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_4 = 9'd316,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_5 = 9'd317,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_6 = 9'd318,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_7 = 9'd319,
    QUANTIZE_ACTIVATION_LOOP_3_1_C_0 = 9'd320,
    output_vinit_C_0 = 9'd321,
    output_vinit_C_1 = 9'd322,
    LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0 = 9'd323,
    LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_1 = 9'd324,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_0 = 9'd325,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_1 = 9'd326,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_2 = 9'd327,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_3 = 9'd328,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_4 = 9'd329,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_5 = 9'd330,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_6 = 9'd331,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_7 = 9'd332,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_8 = 9'd333,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_9 = 9'd334,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_10 = 9'd335,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_11 = 9'd336,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_12 = 9'd337,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_13 = 9'd338,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_14 = 9'd339,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_15 = 9'd340,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_16 = 9'd341,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_17 = 9'd342,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_18 = 9'd343,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_19 = 9'd344,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_20 = 9'd345,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_21 = 9'd346,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_22 = 9'd347,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_23 = 9'd348,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_24 = 9'd349,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_25 = 9'd350,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_26 = 9'd351,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_27 = 9'd352,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_28 = 9'd353,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29 = 9'd354,
    for_1_for_C_0 = 9'd355,
    for_1_for_C_1 = 9'd356,
    for_1_for_C_2 = 9'd357;

  reg [8:0] state_var;
  reg [8:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : dut_core_core_fsm_1
    case (state_var)
      for_for_C_0 : begin
        fsm_output = 9'b000000001;
        state_var_NS = for_for_C_1;
      end
      for_for_C_1 : begin
        fsm_output = 9'b000000010;
        if ( for_for_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = for_for_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 9'b000000011;
        state_var_NS = main_C_2;
      end
      main_C_2 : begin
        fsm_output = 9'b000000100;
        state_var_NS = attention_sqrt_for_C_0;
      end
      attention_sqrt_for_C_0 : begin
        fsm_output = 9'b000000101;
        state_var_NS = attention_sqrt_for_C_1;
      end
      attention_sqrt_for_C_1 : begin
        fsm_output = 9'b000000110;
        state_var_NS = attention_sqrt_for_C_2;
      end
      attention_sqrt_for_C_2 : begin
        fsm_output = 9'b000000111;
        state_var_NS = attention_sqrt_for_C_3;
      end
      attention_sqrt_for_C_3 : begin
        fsm_output = 9'b000001000;
        state_var_NS = attention_sqrt_for_C_4;
      end
      attention_sqrt_for_C_4 : begin
        fsm_output = 9'b000001001;
        state_var_NS = attention_sqrt_for_C_5;
      end
      attention_sqrt_for_C_5 : begin
        fsm_output = 9'b000001010;
        state_var_NS = attention_sqrt_for_C_6;
      end
      attention_sqrt_for_C_6 : begin
        fsm_output = 9'b000001011;
        state_var_NS = attention_sqrt_for_C_7;
      end
      attention_sqrt_for_C_7 : begin
        fsm_output = 9'b000001100;
        state_var_NS = attention_sqrt_for_C_8;
      end
      attention_sqrt_for_C_8 : begin
        fsm_output = 9'b000001101;
        state_var_NS = attention_sqrt_for_C_9;
      end
      attention_sqrt_for_C_9 : begin
        fsm_output = 9'b000001110;
        state_var_NS = attention_sqrt_for_C_10;
      end
      attention_sqrt_for_C_10 : begin
        fsm_output = 9'b000001111;
        if ( attention_sqrt_for_C_10_tr0 ) begin
          state_var_NS = main_C_3;
        end
        else begin
          state_var_NS = attention_sqrt_for_C_0;
        end
      end
      main_C_3 : begin
        fsm_output = 9'b000010000;
        state_var_NS = main_C_4;
      end
      main_C_4 : begin
        fsm_output = 9'b000010001;
        state_var_NS = main_C_5;
      end
      main_C_5 : begin
        fsm_output = 9'b000010010;
        state_var_NS = main_C_6;
      end
      main_C_6 : begin
        fsm_output = 9'b000010011;
        state_var_NS = main_C_7;
      end
      main_C_7 : begin
        fsm_output = 9'b000010100;
        state_var_NS = main_C_8;
      end
      main_C_8 : begin
        fsm_output = 9'b000010101;
        state_var_NS = main_C_9;
      end
      main_C_9 : begin
        fsm_output = 9'b000010110;
        state_var_NS = main_C_10;
      end
      main_C_10 : begin
        fsm_output = 9'b000010111;
        state_var_NS = main_C_11;
      end
      main_C_11 : begin
        fsm_output = 9'b000011000;
        state_var_NS = main_C_12;
      end
      main_C_12 : begin
        fsm_output = 9'b000011001;
        state_var_NS = main_C_13;
      end
      main_C_13 : begin
        fsm_output = 9'b000011010;
        state_var_NS = main_C_14;
      end
      main_C_14 : begin
        fsm_output = 9'b000011011;
        state_var_NS = main_C_15;
      end
      main_C_15 : begin
        fsm_output = 9'b000011100;
        state_var_NS = main_C_16;
      end
      main_C_16 : begin
        fsm_output = 9'b000011101;
        state_var_NS = main_C_17;
      end
      main_C_17 : begin
        fsm_output = 9'b000011110;
        state_var_NS = main_C_18;
      end
      main_C_18 : begin
        fsm_output = 9'b000011111;
        state_var_NS = main_C_19;
      end
      main_C_19 : begin
        fsm_output = 9'b000100000;
        state_var_NS = main_C_20;
      end
      main_C_20 : begin
        fsm_output = 9'b000100001;
        state_var_NS = main_C_21;
      end
      main_C_21 : begin
        fsm_output = 9'b000100010;
        state_var_NS = main_C_22;
      end
      main_C_22 : begin
        fsm_output = 9'b000100011;
        state_var_NS = main_C_23;
      end
      main_C_23 : begin
        fsm_output = 9'b000100100;
        state_var_NS = main_C_24;
      end
      main_C_24 : begin
        fsm_output = 9'b000100101;
        state_var_NS = main_C_25;
      end
      main_C_25 : begin
        fsm_output = 9'b000100110;
        state_var_NS = main_C_26;
      end
      main_C_26 : begin
        fsm_output = 9'b000100111;
        state_var_NS = main_C_27;
      end
      main_C_27 : begin
        fsm_output = 9'b000101000;
        state_var_NS = main_C_28;
      end
      main_C_28 : begin
        fsm_output = 9'b000101001;
        state_var_NS = main_C_29;
      end
      main_C_29 : begin
        fsm_output = 9'b000101010;
        state_var_NS = RMS_NORM_LOOP_2_C_0;
      end
      RMS_NORM_LOOP_2_C_0 : begin
        fsm_output = 9'b000101011;
        state_var_NS = RMS_NORM_LOOP_2_C_1;
      end
      RMS_NORM_LOOP_2_C_1 : begin
        fsm_output = 9'b000101100;
        state_var_NS = RMS_NORM_LOOP_2_C_2;
      end
      RMS_NORM_LOOP_2_C_2 : begin
        fsm_output = 9'b000101101;
        state_var_NS = RMS_NORM_LOOP_2_C_3;
      end
      RMS_NORM_LOOP_2_C_3 : begin
        fsm_output = 9'b000101110;
        if ( RMS_NORM_LOOP_2_C_3_tr0 ) begin
          state_var_NS = main_C_30;
        end
        else begin
          state_var_NS = RMS_NORM_LOOP_2_C_0;
        end
      end
      main_C_30 : begin
        fsm_output = 9'b000101111;
        state_var_NS = main_C_31;
      end
      main_C_31 : begin
        fsm_output = 9'b000110000;
        state_var_NS = main_C_32;
      end
      main_C_32 : begin
        fsm_output = 9'b000110001;
        state_var_NS = main_C_33;
      end
      main_C_33 : begin
        fsm_output = 9'b000110010;
        state_var_NS = main_C_34;
      end
      main_C_34 : begin
        fsm_output = 9'b000110011;
        state_var_NS = main_C_35;
      end
      main_C_35 : begin
        fsm_output = 9'b000110100;
        state_var_NS = main_C_36;
      end
      main_C_36 : begin
        fsm_output = 9'b000110101;
        state_var_NS = main_C_37;
      end
      main_C_37 : begin
        fsm_output = 9'b000110110;
        state_var_NS = main_C_38;
      end
      main_C_38 : begin
        fsm_output = 9'b000110111;
        state_var_NS = main_C_39;
      end
      main_C_39 : begin
        fsm_output = 9'b000111000;
        state_var_NS = main_C_40;
      end
      main_C_40 : begin
        fsm_output = 9'b000111001;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_0;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_0 : begin
        fsm_output = 9'b000111010;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_1;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_1 : begin
        fsm_output = 9'b000111011;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_2;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_2 : begin
        fsm_output = 9'b000111100;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_3;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_3 : begin
        fsm_output = 9'b000111101;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_4;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_4 : begin
        fsm_output = 9'b000111110;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_5;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_5 : begin
        fsm_output = 9'b000111111;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_6;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_6 : begin
        fsm_output = 9'b001000000;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_7;
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_7 : begin
        fsm_output = 9'b001000001;
        if ( QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0 ) begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_3_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_0;
        end
      end
      QUANTIZE_ACTIVATION_LOOP_3_C_0 : begin
        fsm_output = 9'b001000010;
        if ( QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0 ) begin
          state_var_NS = attention_5_1_384_384_8_48_q_proj_re_vinit_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_0;
        end
      end
      attention_5_1_384_384_8_48_q_proj_re_vinit_C_0 : begin
        fsm_output = 9'b001000011;
        state_var_NS = attention_5_1_384_384_8_48_q_proj_re_vinit_C_1;
      end
      attention_5_1_384_384_8_48_q_proj_re_vinit_C_1 : begin
        fsm_output = 9'b001000100;
        if ( attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_C_0;
        end
        else begin
          state_var_NS = attention_5_1_384_384_8_48_q_proj_re_vinit_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_C_0 : begin
        fsm_output = 9'b001000101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_C_1 : begin
        fsm_output = 9'b001000110;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_3_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_C_2;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_C_2 : begin
        fsm_output = 9'b001000111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_C_0;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_0 : begin
        fsm_output = 9'b001001000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_1 : begin
        fsm_output = 9'b001001001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_2;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_2 : begin
        fsm_output = 9'b001001010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_3;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_3 : begin
        fsm_output = 9'b001001011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_4;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_4 : begin
        fsm_output = 9'b001001100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_5;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_5 : begin
        fsm_output = 9'b001001101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_6;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_6 : begin
        fsm_output = 9'b001001110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_7;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_7 : begin
        fsm_output = 9'b001001111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_8;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_8 : begin
        fsm_output = 9'b001010000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_9;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_9 : begin
        fsm_output = 9'b001010001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_10;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_10 : begin
        fsm_output = 9'b001010010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_11;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_11 : begin
        fsm_output = 9'b001010011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_12;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_12 : begin
        fsm_output = 9'b001010100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_13;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_13 : begin
        fsm_output = 9'b001010101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_14;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_14 : begin
        fsm_output = 9'b001010110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_15;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_15 : begin
        fsm_output = 9'b001010111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_16;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_16 : begin
        fsm_output = 9'b001011000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_17;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_17 : begin
        fsm_output = 9'b001011001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_18;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_18 : begin
        fsm_output = 9'b001011010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_19;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_19 : begin
        fsm_output = 9'b001011011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_20;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_20 : begin
        fsm_output = 9'b001011100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_21;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_21 : begin
        fsm_output = 9'b001011101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_22;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_22 : begin
        fsm_output = 9'b001011110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_23;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_23 : begin
        fsm_output = 9'b001011111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_24;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_24 : begin
        fsm_output = 9'b001100000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_25;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_25 : begin
        fsm_output = 9'b001100001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_26;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_26 : begin
        fsm_output = 9'b001100010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_27;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_27 : begin
        fsm_output = 9'b001100011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_28;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_28 : begin
        fsm_output = 9'b001100100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_29;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_29 : begin
        fsm_output = 9'b001100101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_30;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_30 : begin
        fsm_output = 9'b001100110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_31;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_31 : begin
        fsm_output = 9'b001100111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_32;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_32 : begin
        fsm_output = 9'b001101000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_33;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_33 : begin
        fsm_output = 9'b001101001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_34;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_34 : begin
        fsm_output = 9'b001101010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_35;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_35 : begin
        fsm_output = 9'b001101011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_36;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_36 : begin
        fsm_output = 9'b001101100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_37;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_37 : begin
        fsm_output = 9'b001101101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_38;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_38 : begin
        fsm_output = 9'b001101110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_39;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_39 : begin
        fsm_output = 9'b001101111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_40;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_40 : begin
        fsm_output = 9'b001110000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_41;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_41 : begin
        fsm_output = 9'b001110001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_42;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_42 : begin
        fsm_output = 9'b001110010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_43;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_43 : begin
        fsm_output = 9'b001110011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_44;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_44 : begin
        fsm_output = 9'b001110100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_45;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_45 : begin
        fsm_output = 9'b001110101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_46;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_46 : begin
        fsm_output = 9'b001110110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_47;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_47 : begin
        fsm_output = 9'b001110111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_48;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_48 : begin
        fsm_output = 9'b001111000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_49;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_49 : begin
        fsm_output = 9'b001111001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_50;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_50 : begin
        fsm_output = 9'b001111010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_51;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_51 : begin
        fsm_output = 9'b001111011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_52;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_52 : begin
        fsm_output = 9'b001111100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_53;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_53 : begin
        fsm_output = 9'b001111101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_54;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_54 : begin
        fsm_output = 9'b001111110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_55;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_55 : begin
        fsm_output = 9'b001111111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_56;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_56 : begin
        fsm_output = 9'b010000000;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_2_C_56_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_3_C_0 : begin
        fsm_output = 9'b010000001;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_1;
      end
      RESHAPE_2D_TO_3D_LOOP_3_C_1 : begin
        fsm_output = 9'b010000010;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_2;
      end
      RESHAPE_2D_TO_3D_LOOP_3_C_2 : begin
        fsm_output = 9'b010000011;
        if ( RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_2_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_2_C_0 : begin
        fsm_output = 9'b010000100;
        if ( RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_0 : begin
        fsm_output = 9'b010000101;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_1;
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_1 : begin
        fsm_output = 9'b010000110;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_2;
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_2 : begin
        fsm_output = 9'b010000111;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_3;
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_3 : begin
        fsm_output = 9'b010001000;
        if ( RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_2_2_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_2_2_C_0 : begin
        fsm_output = 9'b010001001;
        if ( RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0 ) begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_0;
        end
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_0 : begin
        fsm_output = 9'b010001010;
        state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_1;
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_1 : begin
        fsm_output = 9'b010001011;
        state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_2;
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_2 : begin
        fsm_output = 9'b010001100;
        if ( APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0 ) begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_4_C_0;
        end
        else begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_0;
        end
      end
      APPLY_ROTARY_POS_EMB_LOOP_4_C_0 : begin
        fsm_output = 9'b010001101;
        if ( APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0 ) begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
        else begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_0;
        end
      end
      CACHE_UPDATE_LOOP_3_C_0 : begin
        fsm_output = 9'b010001110;
        state_var_NS = CACHE_UPDATE_LOOP_3_C_1;
      end
      CACHE_UPDATE_LOOP_3_C_1 : begin
        fsm_output = 9'b010001111;
        state_var_NS = CACHE_UPDATE_LOOP_3_C_2;
      end
      CACHE_UPDATE_LOOP_3_C_2 : begin
        fsm_output = 9'b010010000;
        if ( CACHE_UPDATE_LOOP_3_C_2_tr0 ) begin
          state_var_NS = CACHE_UPDATE_LOOP_2_C_0;
        end
        else begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
      end
      CACHE_UPDATE_LOOP_2_C_0 : begin
        fsm_output = 9'b010010001;
        if ( CACHE_UPDATE_LOOP_2_C_0_tr0 ) begin
          state_var_NS = CACHE_UPDATE_LOOP_1_C_0;
        end
        else begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
      end
      CACHE_UPDATE_LOOP_1_C_0 : begin
        fsm_output = 9'b010010010;
        if ( CACHE_UPDATE_LOOP_1_C_0_tr0 ) begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
        else begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0 : begin
        fsm_output = 9'b010010011;
        state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_1;
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_1 : begin
        fsm_output = 9'b010010100;
        state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2;
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2 : begin
        fsm_output = 9'b010010101;
        if ( TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0 ) begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0;
        end
        else begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0 : begin
        fsm_output = 9'b010010110;
        if ( TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0 ) begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0;
        end
        else begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0 : begin
        fsm_output = 9'b010010111;
        if ( TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_0;
        end
        else begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_3_C_0 : begin
        fsm_output = 9'b010011000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_1;
      end
      GEMM_3D_FLOAT_LOOP_3_C_1 : begin
        fsm_output = 9'b010011001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_2;
      end
      GEMM_3D_FLOAT_LOOP_3_C_2 : begin
        fsm_output = 9'b010011010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_3;
      end
      GEMM_3D_FLOAT_LOOP_3_C_3 : begin
        fsm_output = 9'b010011011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_4;
      end
      GEMM_3D_FLOAT_LOOP_3_C_4 : begin
        fsm_output = 9'b010011100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_5;
      end
      GEMM_3D_FLOAT_LOOP_3_C_5 : begin
        fsm_output = 9'b010011101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_6;
      end
      GEMM_3D_FLOAT_LOOP_3_C_6 : begin
        fsm_output = 9'b010011110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_7;
      end
      GEMM_3D_FLOAT_LOOP_3_C_7 : begin
        fsm_output = 9'b010011111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_8;
      end
      GEMM_3D_FLOAT_LOOP_3_C_8 : begin
        fsm_output = 9'b010100000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_9;
      end
      GEMM_3D_FLOAT_LOOP_3_C_9 : begin
        fsm_output = 9'b010100001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_10;
      end
      GEMM_3D_FLOAT_LOOP_3_C_10 : begin
        fsm_output = 9'b010100010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_11;
      end
      GEMM_3D_FLOAT_LOOP_3_C_11 : begin
        fsm_output = 9'b010100011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_12;
      end
      GEMM_3D_FLOAT_LOOP_3_C_12 : begin
        fsm_output = 9'b010100100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_13;
      end
      GEMM_3D_FLOAT_LOOP_3_C_13 : begin
        fsm_output = 9'b010100101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_14;
      end
      GEMM_3D_FLOAT_LOOP_3_C_14 : begin
        fsm_output = 9'b010100110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_15;
      end
      GEMM_3D_FLOAT_LOOP_3_C_15 : begin
        fsm_output = 9'b010100111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_16;
      end
      GEMM_3D_FLOAT_LOOP_3_C_16 : begin
        fsm_output = 9'b010101000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_17;
      end
      GEMM_3D_FLOAT_LOOP_3_C_17 : begin
        fsm_output = 9'b010101001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_18;
      end
      GEMM_3D_FLOAT_LOOP_3_C_18 : begin
        fsm_output = 9'b010101010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_19;
      end
      GEMM_3D_FLOAT_LOOP_3_C_19 : begin
        fsm_output = 9'b010101011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_20;
      end
      GEMM_3D_FLOAT_LOOP_3_C_20 : begin
        fsm_output = 9'b010101100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_21;
      end
      GEMM_3D_FLOAT_LOOP_3_C_21 : begin
        fsm_output = 9'b010101101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_22;
      end
      GEMM_3D_FLOAT_LOOP_3_C_22 : begin
        fsm_output = 9'b010101110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_23;
      end
      GEMM_3D_FLOAT_LOOP_3_C_23 : begin
        fsm_output = 9'b010101111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_24;
      end
      GEMM_3D_FLOAT_LOOP_3_C_24 : begin
        fsm_output = 9'b010110000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_25;
      end
      GEMM_3D_FLOAT_LOOP_3_C_25 : begin
        fsm_output = 9'b010110001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_26;
      end
      GEMM_3D_FLOAT_LOOP_3_C_26 : begin
        fsm_output = 9'b010110010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_27;
      end
      GEMM_3D_FLOAT_LOOP_3_C_27 : begin
        fsm_output = 9'b010110011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_28;
      end
      GEMM_3D_FLOAT_LOOP_3_C_28 : begin
        fsm_output = 9'b010110100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_29;
      end
      GEMM_3D_FLOAT_LOOP_3_C_29 : begin
        fsm_output = 9'b010110101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_30;
      end
      GEMM_3D_FLOAT_LOOP_3_C_30 : begin
        fsm_output = 9'b010110110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_31;
      end
      GEMM_3D_FLOAT_LOOP_3_C_31 : begin
        fsm_output = 9'b010110111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_32;
      end
      GEMM_3D_FLOAT_LOOP_3_C_32 : begin
        fsm_output = 9'b010111000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_33;
      end
      GEMM_3D_FLOAT_LOOP_3_C_33 : begin
        fsm_output = 9'b010111001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_34;
      end
      GEMM_3D_FLOAT_LOOP_3_C_34 : begin
        fsm_output = 9'b010111010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_35;
      end
      GEMM_3D_FLOAT_LOOP_3_C_35 : begin
        fsm_output = 9'b010111011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_36;
      end
      GEMM_3D_FLOAT_LOOP_3_C_36 : begin
        fsm_output = 9'b010111100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_37;
      end
      GEMM_3D_FLOAT_LOOP_3_C_37 : begin
        fsm_output = 9'b010111101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_38;
      end
      GEMM_3D_FLOAT_LOOP_3_C_38 : begin
        fsm_output = 9'b010111110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_39;
      end
      GEMM_3D_FLOAT_LOOP_3_C_39 : begin
        fsm_output = 9'b010111111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_40;
      end
      GEMM_3D_FLOAT_LOOP_3_C_40 : begin
        fsm_output = 9'b011000000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_41;
      end
      GEMM_3D_FLOAT_LOOP_3_C_41 : begin
        fsm_output = 9'b011000001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_42;
      end
      GEMM_3D_FLOAT_LOOP_3_C_42 : begin
        fsm_output = 9'b011000010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_43;
      end
      GEMM_3D_FLOAT_LOOP_3_C_43 : begin
        fsm_output = 9'b011000011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_44;
      end
      GEMM_3D_FLOAT_LOOP_3_C_44 : begin
        fsm_output = 9'b011000100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_45;
      end
      GEMM_3D_FLOAT_LOOP_3_C_45 : begin
        fsm_output = 9'b011000101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_46;
      end
      GEMM_3D_FLOAT_LOOP_3_C_46 : begin
        fsm_output = 9'b011000110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_47;
      end
      GEMM_3D_FLOAT_LOOP_3_C_47 : begin
        fsm_output = 9'b011000111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_48;
      end
      GEMM_3D_FLOAT_LOOP_3_C_48 : begin
        fsm_output = 9'b011001000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_49;
      end
      GEMM_3D_FLOAT_LOOP_3_C_49 : begin
        fsm_output = 9'b011001001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_50;
      end
      GEMM_3D_FLOAT_LOOP_3_C_50 : begin
        fsm_output = 9'b011001010;
        if ( GEMM_3D_FLOAT_LOOP_3_C_50_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_1_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_1_C_0 : begin
        fsm_output = 9'b011001011;
        if ( GEMM_3D_FLOAT_LOOP_1_C_0_tr0 ) begin
          state_var_NS = SF_LOOP_3_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_0;
        end
      end
      SF_LOOP_3_C_0 : begin
        fsm_output = 9'b011001100;
        state_var_NS = SF_LOOP_3_C_1;
      end
      SF_LOOP_3_C_1 : begin
        fsm_output = 9'b011001101;
        state_var_NS = SF_LOOP_3_C_2;
      end
      SF_LOOP_3_C_2 : begin
        fsm_output = 9'b011001110;
        state_var_NS = SF_LOOP_3_C_3;
      end
      SF_LOOP_3_C_3 : begin
        fsm_output = 9'b011001111;
        if ( SF_LOOP_3_C_3_tr0 ) begin
          state_var_NS = SF_LOOP_1_C_0;
        end
        else begin
          state_var_NS = SF_LOOP_3_C_0;
        end
      end
      SF_LOOP_1_C_0 : begin
        fsm_output = 9'b011010000;
        if ( SF_LOOP_1_C_0_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_1_C_0;
        end
        else begin
          state_var_NS = SF_LOOP_3_C_0;
        end
      end
      SOFTMAX_LOOP_1_C_0 : begin
        fsm_output = 9'b011010001;
        state_var_NS = SOFTMAX_LOOP_1_C_1;
      end
      SOFTMAX_LOOP_1_C_1 : begin
        fsm_output = 9'b011010010;
        state_var_NS = SOFTMAX_LOOP_3_C_0;
      end
      SOFTMAX_LOOP_3_C_0 : begin
        fsm_output = 9'b011010011;
        state_var_NS = SOFTMAX_LOOP_3_C_1;
      end
      SOFTMAX_LOOP_3_C_1 : begin
        fsm_output = 9'b011010100;
        if ( SOFTMAX_LOOP_3_C_1_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_4_C_0;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_3_C_0;
        end
      end
      SOFTMAX_LOOP_4_C_0 : begin
        fsm_output = 9'b011010101;
        state_var_NS = SOFTMAX_LOOP_4_C_1;
      end
      SOFTMAX_LOOP_4_C_1 : begin
        fsm_output = 9'b011010110;
        state_var_NS = SOFTMAX_LOOP_4_C_2;
      end
      SOFTMAX_LOOP_4_C_2 : begin
        fsm_output = 9'b011010111;
        state_var_NS = SOFTMAX_LOOP_4_C_3;
      end
      SOFTMAX_LOOP_4_C_3 : begin
        fsm_output = 9'b011011000;
        state_var_NS = SOFTMAX_LOOP_4_C_4;
      end
      SOFTMAX_LOOP_4_C_4 : begin
        fsm_output = 9'b011011001;
        state_var_NS = SOFTMAX_LOOP_4_C_5;
      end
      SOFTMAX_LOOP_4_C_5 : begin
        fsm_output = 9'b011011010;
        if ( SOFTMAX_LOOP_4_C_5_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_5_C_0;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_4_C_0;
        end
      end
      SOFTMAX_LOOP_5_C_0 : begin
        fsm_output = 9'b011011011;
        state_var_NS = SOFTMAX_LOOP_5_C_1;
      end
      SOFTMAX_LOOP_5_C_1 : begin
        fsm_output = 9'b011011100;
        state_var_NS = SOFTMAX_LOOP_5_C_2;
      end
      SOFTMAX_LOOP_5_C_2 : begin
        fsm_output = 9'b011011101;
        state_var_NS = SOFTMAX_LOOP_5_C_3;
      end
      SOFTMAX_LOOP_5_C_3 : begin
        fsm_output = 9'b011011110;
        state_var_NS = SOFTMAX_LOOP_5_C_4;
      end
      SOFTMAX_LOOP_5_C_4 : begin
        fsm_output = 9'b011011111;
        state_var_NS = SOFTMAX_LOOP_5_C_5;
      end
      SOFTMAX_LOOP_5_C_5 : begin
        fsm_output = 9'b011100000;
        state_var_NS = SOFTMAX_LOOP_5_C_6;
      end
      SOFTMAX_LOOP_5_C_6 : begin
        fsm_output = 9'b011100001;
        state_var_NS = SOFTMAX_LOOP_5_C_7;
      end
      SOFTMAX_LOOP_5_C_7 : begin
        fsm_output = 9'b011100010;
        state_var_NS = SOFTMAX_LOOP_5_C_8;
      end
      SOFTMAX_LOOP_5_C_8 : begin
        fsm_output = 9'b011100011;
        state_var_NS = SOFTMAX_LOOP_5_C_9;
      end
      SOFTMAX_LOOP_5_C_9 : begin
        fsm_output = 9'b011100100;
        state_var_NS = SOFTMAX_LOOP_5_C_10;
      end
      SOFTMAX_LOOP_5_C_10 : begin
        fsm_output = 9'b011100101;
        state_var_NS = SOFTMAX_LOOP_5_C_11;
      end
      SOFTMAX_LOOP_5_C_11 : begin
        fsm_output = 9'b011100110;
        state_var_NS = SOFTMAX_LOOP_5_C_12;
      end
      SOFTMAX_LOOP_5_C_12 : begin
        fsm_output = 9'b011100111;
        state_var_NS = SOFTMAX_LOOP_5_C_13;
      end
      SOFTMAX_LOOP_5_C_13 : begin
        fsm_output = 9'b011101000;
        state_var_NS = SOFTMAX_LOOP_5_C_14;
      end
      SOFTMAX_LOOP_5_C_14 : begin
        fsm_output = 9'b011101001;
        state_var_NS = SOFTMAX_LOOP_5_C_15;
      end
      SOFTMAX_LOOP_5_C_15 : begin
        fsm_output = 9'b011101010;
        state_var_NS = SOFTMAX_LOOP_5_C_16;
      end
      SOFTMAX_LOOP_5_C_16 : begin
        fsm_output = 9'b011101011;
        if ( SOFTMAX_LOOP_5_C_16_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_1_C_2;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_5_C_0;
        end
      end
      SOFTMAX_LOOP_1_C_2 : begin
        fsm_output = 9'b011101100;
        if ( SOFTMAX_LOOP_1_C_2_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_0;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_1_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_0 : begin
        fsm_output = 9'b011101101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_1;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_1 : begin
        fsm_output = 9'b011101110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_2;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_2 : begin
        fsm_output = 9'b011101111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_3;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_3 : begin
        fsm_output = 9'b011110000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_4;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_4 : begin
        fsm_output = 9'b011110001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_5;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_5 : begin
        fsm_output = 9'b011110010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_6;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_6 : begin
        fsm_output = 9'b011110011;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_7;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_7 : begin
        fsm_output = 9'b011110100;
        if ( GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_1_1_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_1_1_C_0 : begin
        fsm_output = 9'b011110101;
        if ( GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0 ) begin
          state_var_NS = ATTN_2D_LOOP_3_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_0;
        end
      end
      ATTN_2D_LOOP_3_C_0 : begin
        fsm_output = 9'b011110110;
        state_var_NS = ATTN_2D_LOOP_3_C_1;
      end
      ATTN_2D_LOOP_3_C_1 : begin
        fsm_output = 9'b011110111;
        state_var_NS = ATTN_2D_LOOP_3_C_2;
      end
      ATTN_2D_LOOP_3_C_2 : begin
        fsm_output = 9'b011111000;
        if ( ATTN_2D_LOOP_3_C_2_tr0 ) begin
          state_var_NS = ATTN_2D_LOOP_2_C_0;
        end
        else begin
          state_var_NS = ATTN_2D_LOOP_3_C_0;
        end
      end
      ATTN_2D_LOOP_2_C_0 : begin
        fsm_output = 9'b011111001;
        if ( ATTN_2D_LOOP_2_C_0_tr0 ) begin
          state_var_NS = RMS_NORM_LOOP_1_2_C_0;
        end
        else begin
          state_var_NS = ATTN_2D_LOOP_3_C_0;
        end
      end
      RMS_NORM_LOOP_1_2_C_0 : begin
        fsm_output = 9'b011111010;
        state_var_NS = RMS_NORM_LOOP_1_2_C_1;
      end
      RMS_NORM_LOOP_1_2_C_1 : begin
        fsm_output = 9'b011111011;
        if ( RMS_NORM_LOOP_1_2_C_1_tr0 ) begin
          state_var_NS = main_C_41;
        end
        else begin
          state_var_NS = RMS_NORM_LOOP_1_2_C_0;
        end
      end
      main_C_41 : begin
        fsm_output = 9'b011111100;
        state_var_NS = main_C_42;
      end
      main_C_42 : begin
        fsm_output = 9'b011111101;
        state_var_NS = main_C_43;
      end
      main_C_43 : begin
        fsm_output = 9'b011111110;
        state_var_NS = attention_sqrt_1_for_C_0;
      end
      attention_sqrt_1_for_C_0 : begin
        fsm_output = 9'b011111111;
        state_var_NS = attention_sqrt_1_for_C_1;
      end
      attention_sqrt_1_for_C_1 : begin
        fsm_output = 9'b100000000;
        state_var_NS = attention_sqrt_1_for_C_2;
      end
      attention_sqrt_1_for_C_2 : begin
        fsm_output = 9'b100000001;
        state_var_NS = attention_sqrt_1_for_C_3;
      end
      attention_sqrt_1_for_C_3 : begin
        fsm_output = 9'b100000010;
        state_var_NS = attention_sqrt_1_for_C_4;
      end
      attention_sqrt_1_for_C_4 : begin
        fsm_output = 9'b100000011;
        state_var_NS = attention_sqrt_1_for_C_5;
      end
      attention_sqrt_1_for_C_5 : begin
        fsm_output = 9'b100000100;
        state_var_NS = attention_sqrt_1_for_C_6;
      end
      attention_sqrt_1_for_C_6 : begin
        fsm_output = 9'b100000101;
        state_var_NS = attention_sqrt_1_for_C_7;
      end
      attention_sqrt_1_for_C_7 : begin
        fsm_output = 9'b100000110;
        state_var_NS = attention_sqrt_1_for_C_8;
      end
      attention_sqrt_1_for_C_8 : begin
        fsm_output = 9'b100000111;
        state_var_NS = attention_sqrt_1_for_C_9;
      end
      attention_sqrt_1_for_C_9 : begin
        fsm_output = 9'b100001000;
        state_var_NS = attention_sqrt_1_for_C_10;
      end
      attention_sqrt_1_for_C_10 : begin
        fsm_output = 9'b100001001;
        if ( attention_sqrt_1_for_C_10_tr0 ) begin
          state_var_NS = main_C_44;
        end
        else begin
          state_var_NS = attention_sqrt_1_for_C_0;
        end
      end
      main_C_44 : begin
        fsm_output = 9'b100001010;
        state_var_NS = main_C_45;
      end
      main_C_45 : begin
        fsm_output = 9'b100001011;
        state_var_NS = main_C_46;
      end
      main_C_46 : begin
        fsm_output = 9'b100001100;
        state_var_NS = main_C_47;
      end
      main_C_47 : begin
        fsm_output = 9'b100001101;
        state_var_NS = main_C_48;
      end
      main_C_48 : begin
        fsm_output = 9'b100001110;
        state_var_NS = main_C_49;
      end
      main_C_49 : begin
        fsm_output = 9'b100001111;
        state_var_NS = main_C_50;
      end
      main_C_50 : begin
        fsm_output = 9'b100010000;
        state_var_NS = main_C_51;
      end
      main_C_51 : begin
        fsm_output = 9'b100010001;
        state_var_NS = main_C_52;
      end
      main_C_52 : begin
        fsm_output = 9'b100010010;
        state_var_NS = main_C_53;
      end
      main_C_53 : begin
        fsm_output = 9'b100010011;
        state_var_NS = main_C_54;
      end
      main_C_54 : begin
        fsm_output = 9'b100010100;
        state_var_NS = main_C_55;
      end
      main_C_55 : begin
        fsm_output = 9'b100010101;
        state_var_NS = main_C_56;
      end
      main_C_56 : begin
        fsm_output = 9'b100010110;
        state_var_NS = main_C_57;
      end
      main_C_57 : begin
        fsm_output = 9'b100010111;
        state_var_NS = RMS_NORM_LOOP_2_2_C_0;
      end
      RMS_NORM_LOOP_2_2_C_0 : begin
        fsm_output = 9'b100011000;
        state_var_NS = RMS_NORM_LOOP_2_2_C_1;
      end
      RMS_NORM_LOOP_2_2_C_1 : begin
        fsm_output = 9'b100011001;
        state_var_NS = RMS_NORM_LOOP_2_2_C_2;
      end
      RMS_NORM_LOOP_2_2_C_2 : begin
        fsm_output = 9'b100011010;
        state_var_NS = RMS_NORM_LOOP_2_2_C_3;
      end
      RMS_NORM_LOOP_2_2_C_3 : begin
        fsm_output = 9'b100011011;
        if ( RMS_NORM_LOOP_2_2_C_3_tr0 ) begin
          state_var_NS = main_C_58;
        end
        else begin
          state_var_NS = RMS_NORM_LOOP_2_2_C_0;
        end
      end
      main_C_58 : begin
        fsm_output = 9'b100011100;
        state_var_NS = main_C_59;
      end
      main_C_59 : begin
        fsm_output = 9'b100011101;
        state_var_NS = main_C_60;
      end
      main_C_60 : begin
        fsm_output = 9'b100011110;
        state_var_NS = main_C_61;
      end
      main_C_61 : begin
        fsm_output = 9'b100011111;
        state_var_NS = main_C_62;
      end
      main_C_62 : begin
        fsm_output = 9'b100100000;
        state_var_NS = main_C_63;
      end
      main_C_63 : begin
        fsm_output = 9'b100100001;
        state_var_NS = main_C_64;
      end
      main_C_64 : begin
        fsm_output = 9'b100100010;
        state_var_NS = main_C_65;
      end
      main_C_65 : begin
        fsm_output = 9'b100100011;
        state_var_NS = main_C_66;
      end
      main_C_66 : begin
        fsm_output = 9'b100100100;
        state_var_NS = main_C_67;
      end
      main_C_67 : begin
        fsm_output = 9'b100100101;
        state_var_NS = main_C_68;
      end
      main_C_68 : begin
        fsm_output = 9'b100100110;
        state_var_NS = main_C_69;
      end
      main_C_69 : begin
        fsm_output = 9'b100100111;
        state_var_NS = main_C_70;
      end
      main_C_70 : begin
        fsm_output = 9'b100101000;
        state_var_NS = main_C_71;
      end
      main_C_71 : begin
        fsm_output = 9'b100101001;
        state_var_NS = main_C_72;
      end
      main_C_72 : begin
        fsm_output = 9'b100101010;
        state_var_NS = main_C_73;
      end
      main_C_73 : begin
        fsm_output = 9'b100101011;
        state_var_NS = main_C_74;
      end
      main_C_74 : begin
        fsm_output = 9'b100101100;
        state_var_NS = main_C_75;
      end
      main_C_75 : begin
        fsm_output = 9'b100101101;
        state_var_NS = main_C_76;
      end
      main_C_76 : begin
        fsm_output = 9'b100101110;
        state_var_NS = main_C_77;
      end
      main_C_77 : begin
        fsm_output = 9'b100101111;
        state_var_NS = main_C_78;
      end
      main_C_78 : begin
        fsm_output = 9'b100110000;
        state_var_NS = main_C_79;
      end
      main_C_79 : begin
        fsm_output = 9'b100110001;
        state_var_NS = main_C_80;
      end
      main_C_80 : begin
        fsm_output = 9'b100110010;
        state_var_NS = main_C_81;
      end
      main_C_81 : begin
        fsm_output = 9'b100110011;
        state_var_NS = main_C_82;
      end
      main_C_82 : begin
        fsm_output = 9'b100110100;
        state_var_NS = main_C_83;
      end
      main_C_83 : begin
        fsm_output = 9'b100110101;
        state_var_NS = main_C_84;
      end
      main_C_84 : begin
        fsm_output = 9'b100110110;
        state_var_NS = main_C_85;
      end
      main_C_85 : begin
        fsm_output = 9'b100110111;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_0;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_0 : begin
        fsm_output = 9'b100111000;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_1;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_1 : begin
        fsm_output = 9'b100111001;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_2;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_2 : begin
        fsm_output = 9'b100111010;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_3;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_3 : begin
        fsm_output = 9'b100111011;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_4;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_4 : begin
        fsm_output = 9'b100111100;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_5;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_5 : begin
        fsm_output = 9'b100111101;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_6;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_6 : begin
        fsm_output = 9'b100111110;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_7;
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_7 : begin
        fsm_output = 9'b100111111;
        if ( QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0 ) begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_3_1_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_0;
        end
      end
      QUANTIZE_ACTIVATION_LOOP_3_1_C_0 : begin
        fsm_output = 9'b101000000;
        if ( QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0 ) begin
          state_var_NS = output_vinit_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_0;
        end
      end
      output_vinit_C_0 : begin
        fsm_output = 9'b101000001;
        state_var_NS = output_vinit_C_1;
      end
      output_vinit_C_1 : begin
        fsm_output = 9'b101000010;
        if ( output_vinit_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0;
        end
        else begin
          state_var_NS = output_vinit_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0 : begin
        fsm_output = 9'b101000011;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_1;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_1 : begin
        fsm_output = 9'b101000100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_0 : begin
        fsm_output = 9'b101000101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_1 : begin
        fsm_output = 9'b101000110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_2;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_2 : begin
        fsm_output = 9'b101000111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_3;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_3 : begin
        fsm_output = 9'b101001000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_4;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_4 : begin
        fsm_output = 9'b101001001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_5;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_5 : begin
        fsm_output = 9'b101001010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_6;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_6 : begin
        fsm_output = 9'b101001011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_7;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_7 : begin
        fsm_output = 9'b101001100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_8;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_8 : begin
        fsm_output = 9'b101001101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_9;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_9 : begin
        fsm_output = 9'b101001110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_10;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_10 : begin
        fsm_output = 9'b101001111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_11;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_11 : begin
        fsm_output = 9'b101010000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_12;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_12 : begin
        fsm_output = 9'b101010001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_13;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_13 : begin
        fsm_output = 9'b101010010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_14;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_14 : begin
        fsm_output = 9'b101010011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_15;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_15 : begin
        fsm_output = 9'b101010100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_16;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_16 : begin
        fsm_output = 9'b101010101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_17;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_17 : begin
        fsm_output = 9'b101010110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_18;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_18 : begin
        fsm_output = 9'b101010111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_19;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_19 : begin
        fsm_output = 9'b101011000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_20;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_20 : begin
        fsm_output = 9'b101011001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_21;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_21 : begin
        fsm_output = 9'b101011010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_22;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_22 : begin
        fsm_output = 9'b101011011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_23;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_23 : begin
        fsm_output = 9'b101011100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_24;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_24 : begin
        fsm_output = 9'b101011101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_25;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_25 : begin
        fsm_output = 9'b101011110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_26;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_26 : begin
        fsm_output = 9'b101011111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_27;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_27 : begin
        fsm_output = 9'b101100000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_28;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_28 : begin
        fsm_output = 9'b101100001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29 : begin
        fsm_output = 9'b101100010;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0 ) begin
          state_var_NS = for_1_for_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0;
        end
      end
      for_1_for_C_0 : begin
        fsm_output = 9'b101100011;
        state_var_NS = for_1_for_C_1;
      end
      for_1_for_C_1 : begin
        fsm_output = 9'b101100100;
        state_var_NS = for_1_for_C_2;
      end
      for_1_for_C_2 : begin
        fsm_output = 9'b101100101;
        if ( for_1_for_C_2_tr0 ) begin
          state_var_NS = main_C_0;
        end
        else begin
          state_var_NS = for_1_for_C_0;
        end
      end
      // main_C_0
      default : begin
        fsm_output = 9'b000000000;
        state_var_NS = for_for_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( input_rsc_en_d_1 ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_staller
// ------------------------------------------------------------------


module dut_core_staller (
  en, strm_in_rsci_wen_comp, strm_out_rsci_wen_comp, input_rsc_en_d_1
);
  input en;
  input strm_in_rsci_wen_comp;
  input strm_out_rsci_wen_comp;
  output input_rsc_en_d_1;



  // Interconnect Declarations for Component Instantiations 
  assign input_rsc_en_d_1 = strm_in_rsci_wen_comp & strm_out_rsci_wen_comp & en;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_out_rsci_strm_out_wait_ctrl
// ------------------------------------------------------------------


module dut_core_strm_out_rsci_strm_out_wait_ctrl (
  strm_out_rsci_iswt0, strm_out_rsci_biwt, strm_out_rsci_irdy
);
  input strm_out_rsci_iswt0;
  output strm_out_rsci_biwt;
  input strm_out_rsci_irdy;



  // Interconnect Declarations for Component Instantiations 
  assign strm_out_rsci_biwt = strm_out_rsci_iswt0 & strm_out_rsci_irdy;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_in_rsci_strm_in_wait_ctrl
// ------------------------------------------------------------------


module dut_core_strm_in_rsci_strm_in_wait_ctrl (
  strm_in_rsci_iswt0, strm_in_rsci_biwt, strm_in_rsci_ivld
);
  input strm_in_rsci_iswt0;
  output strm_in_rsci_biwt;
  input strm_in_rsci_ivld;



  // Interconnect Declarations for Component Instantiations 
  assign strm_in_rsci_biwt = strm_in_rsci_iswt0 & strm_in_rsci_ivld;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_out_rsci
// ------------------------------------------------------------------


module dut_core_strm_out_rsci (
  strm_out_rsc_dat, strm_out_rsc_vld, strm_out_rsc_rdy, strm_out_rsci_oswt, strm_out_rsci_wen_comp,
      strm_out_rsci_idat
);
  output [31:0] strm_out_rsc_dat;
  output strm_out_rsc_vld;
  input strm_out_rsc_rdy;
  input strm_out_rsci_oswt;
  output strm_out_rsci_wen_comp;
  input [31:0] strm_out_rsci_idat;


  // Interconnect Declarations
  wire strm_out_rsci_biwt;
  wire strm_out_rsci_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [31:0] nl_strm_out_rsci_idat;
  assign nl_strm_out_rsci_idat = {(strm_out_rsci_idat[31:2]) , 2'b00};
  ccs_out_wait_v1 #(.rscid(32'sd2),
  .width(32'sd32)) strm_out_rsci (
      .irdy(strm_out_rsci_irdy),
      .ivld(strm_out_rsci_oswt),
      .idat(nl_strm_out_rsci_idat[31:0]),
      .rdy(strm_out_rsc_rdy),
      .vld(strm_out_rsc_vld),
      .dat(strm_out_rsc_dat)
    );
  dut_core_strm_out_rsci_strm_out_wait_ctrl dut_core_strm_out_rsci_strm_out_wait_ctrl_inst
      (
      .strm_out_rsci_iswt0(strm_out_rsci_oswt),
      .strm_out_rsci_biwt(strm_out_rsci_biwt),
      .strm_out_rsci_irdy(strm_out_rsci_irdy)
    );
  assign strm_out_rsci_wen_comp = (~ strm_out_rsci_oswt) | strm_out_rsci_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_in_rsci
// ------------------------------------------------------------------


module dut_core_strm_in_rsci (
  strm_in_rsc_dat, strm_in_rsc_vld, strm_in_rsc_rdy, strm_in_rsci_oswt, strm_in_rsci_wen_comp,
      strm_in_rsci_idat_mxwt
);
  input [31:0] strm_in_rsc_dat;
  input strm_in_rsc_vld;
  output strm_in_rsc_rdy;
  input strm_in_rsci_oswt;
  output strm_in_rsci_wen_comp;
  output [29:0] strm_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire strm_in_rsci_biwt;
  wire strm_in_rsci_ivld;
  wire [31:0] strm_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd1),
  .width(32'sd32)) strm_in_rsci (
      .rdy(strm_in_rsc_rdy),
      .vld(strm_in_rsc_vld),
      .dat(strm_in_rsc_dat),
      .irdy(strm_in_rsci_oswt),
      .ivld(strm_in_rsci_ivld),
      .idat(strm_in_rsci_idat)
    );
  dut_core_strm_in_rsci_strm_in_wait_ctrl dut_core_strm_in_rsci_strm_in_wait_ctrl_inst
      (
      .strm_in_rsci_iswt0(strm_in_rsci_oswt),
      .strm_in_rsci_biwt(strm_in_rsci_biwt),
      .strm_in_rsci_ivld(strm_in_rsci_ivld)
    );
  assign strm_in_rsci_idat_mxwt = strm_in_rsci_idat[31:2];
  assign strm_in_rsci_wen_comp = (~ strm_in_rsci_oswt) | strm_in_rsci_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core
// ------------------------------------------------------------------


module dut_core (
  clk, en, rst, strm_in_rsc_dat, strm_in_rsc_vld, strm_in_rsc_rdy, strm_out_rsc_dat,
      strm_out_rsc_vld, strm_out_rsc_rdy, input_rsci_data_in_d, input_rsci_addr_d,
      input_rsci_re_d, input_rsci_we_d, input_rsci_data_out_d, input_rsci_en_d, output_rsci_data_in_d,
      output_rsci_addr_d, output_rsci_re_d, output_rsci_we_d, output_rsci_data_out_d,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d, attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d, attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d, attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d,
      attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d, attention_5_1_384_384_8_48_q_proj_re_rsci_re_d,
      attention_5_1_384_384_8_48_q_proj_re_rsci_we_d, attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d,
      attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d, attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d,
      attention_5_1_384_384_8_48_k_proj_re_rsci_re_d, attention_5_1_384_384_8_48_k_proj_re_rsci_we_d,
      attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d, attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d,
      attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d, attention_5_1_384_384_8_48_v_proj_re_rsci_re_d,
      attention_5_1_384_384_8_48_v_proj_re_rsci_we_d, attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d,
      attention_5_1_384_384_8_48_q_proj_rsci_data_in_d, attention_5_1_384_384_8_48_q_proj_rsci_addr_d,
      attention_5_1_384_384_8_48_q_proj_rsci_re_d, attention_5_1_384_384_8_48_q_proj_rsci_we_d,
      attention_5_1_384_384_8_48_q_proj_rsci_data_out_d, attention_5_1_384_384_8_48_k_proj_rsci_data_in_d,
      attention_5_1_384_384_8_48_k_proj_rsci_addr_d, attention_5_1_384_384_8_48_k_proj_rsci_re_d,
      attention_5_1_384_384_8_48_k_proj_rsci_we_d, attention_5_1_384_384_8_48_k_proj_rsci_data_out_d,
      attention_5_1_384_384_8_48_v_proj_rsci_data_in_d, attention_5_1_384_384_8_48_v_proj_rsci_addr_d,
      attention_5_1_384_384_8_48_v_proj_rsci_re_d, attention_5_1_384_384_8_48_v_proj_rsci_we_d,
      attention_5_1_384_384_8_48_v_proj_rsci_data_out_d, attention_5_1_384_384_8_48_q_embed_rsci_data_in_d,
      attention_5_1_384_384_8_48_q_embed_rsci_addr_d, attention_5_1_384_384_8_48_q_embed_rsci_re_d,
      attention_5_1_384_384_8_48_q_embed_rsci_we_d, attention_5_1_384_384_8_48_q_embed_rsci_data_out_d,
      attention_5_1_384_384_8_48_k_embed_rsci_data_in_d, attention_5_1_384_384_8_48_k_embed_rsci_addr_d,
      attention_5_1_384_384_8_48_k_embed_rsci_re_d, attention_5_1_384_384_8_48_k_embed_rsci_we_d,
      attention_5_1_384_384_8_48_k_embed_rsci_data_out_d, attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d,
      attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d, attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d,
      attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d, attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d,
      attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d, attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d,
      attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d, attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d,
      attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d, attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d,
      attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d, attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d,
      attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d, attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d,
      attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d, attention_5_1_384_384_8_48_attn_weights_rsci_addr_d,
      attention_5_1_384_384_8_48_attn_weights_rsci_re_d, attention_5_1_384_384_8_48_attn_weights_rsci_we_d,
      attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d, attention_5_1_384_384_8_48_attn_output_rsci_data_in_d,
      attention_5_1_384_384_8_48_attn_output_rsci_addr_d, attention_5_1_384_384_8_48_attn_output_rsci_re_d,
      attention_5_1_384_384_8_48_attn_output_rsci_we_d, attention_5_1_384_384_8_48_attn_output_rsci_data_out_d,
      attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d, attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d,
      attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d, attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d,
      attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d, attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d,
      attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d, attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d,
      attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d, attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d,
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d, apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d,
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d, apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d,
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d, apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d,
      apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d, apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d,
      apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d, apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d
);
  input clk;
  input en;
  input rst;
  input [31:0] strm_in_rsc_dat;
  input strm_in_rsc_vld;
  output strm_in_rsc_rdy;
  output [31:0] strm_out_rsc_dat;
  output strm_out_rsc_vld;
  input strm_out_rsc_rdy;
  output [39:0] input_rsci_data_in_d;
  output [8:0] input_rsci_addr_d;
  output [1:0] input_rsci_re_d;
  output [1:0] input_rsci_we_d;
  input [79:0] input_rsci_data_out_d;
  output input_rsci_en_d;
  output [39:0] output_rsci_data_in_d;
  output [8:0] output_rsci_addr_d;
  output [1:0] output_rsci_re_d;
  output [1:0] output_rsci_we_d;
  input [79:0] output_rsci_data_out_d;
  output [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d;
  input [15:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_q_proj_re_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_q_proj_re_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_k_proj_re_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_k_proj_re_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_v_proj_re_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_v_proj_re_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_q_proj_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_q_proj_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_q_proj_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_q_proj_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_q_proj_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_k_proj_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_k_proj_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_k_proj_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_k_proj_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_k_proj_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_v_proj_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_v_proj_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_v_proj_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_v_proj_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_v_proj_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_q_embed_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_q_embed_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_q_embed_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_q_embed_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_q_embed_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_k_embed_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_k_embed_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_k_embed_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_k_embed_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_k_embed_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d;
  output [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d;
  output [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d;
  output [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d;
  output [5:0] attention_5_1_384_384_8_48_attn_weights_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_attn_weights_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_attn_weights_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_attn_output_rsci_data_in_d;
  wire [40:0] nl_attention_5_1_384_384_8_48_attn_output_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_attn_output_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_attn_output_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_attn_output_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_attn_output_rsci_data_out_d;
  output [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d;
  input [79:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d;
  output [7:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d;
  output [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d;
  output [1:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d;
  output [1:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d;
  input [15:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d;
  output [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d;
  output [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d;
  output [1:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d;
  output [1:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d;
  input [79:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d;
  output [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d;
  output [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d;
  output [1:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d;
  output [1:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d;
  input [79:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d;


  // Interconnect Declarations
  wire strm_in_rsci_wen_comp;
  wire [29:0] strm_in_rsci_idat_mxwt;
  wire strm_out_rsci_wen_comp;
  wire input_rsc_en_d_1;
  wire [55:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z;
  wire [71:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z;
  wire [71:0] rms_norm_384_div_cmp_z;
  wire [39:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z;
  reg [29:0] strm_out_rsci_idat_31_2;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_17_16;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_1_0;
  reg [3:0] rms_norm_384_div_cmp_b_19_16;
  reg [3:0] rms_norm_384_div_cmp_b_4_1;
  reg rms_norm_384_div_cmp_b_0;
  wire [8:0] fsm_output;
  wire INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_tmp;
  wire RMS_NORM_LOOP_2_2_and_2_tmp;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp;
  wire RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nand_tmp;
  wire for_for_for_for_nor_tmp;
  wire and_dcpl;
  wire and_dcpl_1;
  wire not_tmp_21;
  wire and_dcpl_6;
  wire or_tmp_46;
  wire or_tmp_55;
  wire and_dcpl_13;
  wire or_tmp_68;
  wire and_dcpl_19;
  wire or_tmp_76;
  wire and_dcpl_25;
  wire and_dcpl_28;
  wire or_tmp_188;
  wire or_tmp_191;
  wire or_tmp_207;
  wire and_dcpl_79;
  wire and_dcpl_97;
  wire and_dcpl_98;
  wire and_dcpl_99;
  wire and_dcpl_100;
  wire and_dcpl_101;
  wire and_dcpl_102;
  wire and_dcpl_103;
  wire and_dcpl_104;
  wire and_dcpl_105;
  wire or_dcpl_104;
  wire or_dcpl_105;
  wire or_dcpl_106;
  wire or_dcpl_109;
  wire or_dcpl_110;
  wire or_dcpl_111;
  wire or_dcpl_114;
  wire or_dcpl_115;
  wire and_dcpl_107;
  wire and_dcpl_108;
  wire and_dcpl_110;
  wire and_dcpl_111;
  wire and_dcpl_112;
  wire or_dcpl_129;
  wire or_dcpl_130;
  wire or_dcpl_133;
  wire or_dcpl_134;
  wire and_dcpl_114;
  wire and_dcpl_116;
  wire and_dcpl_117;
  wire and_dcpl_118;
  wire and_tmp_16;
  wire or_tmp_227;
  wire or_tmp_230;
  wire and_dcpl_125;
  wire and_dcpl_126;
  wire and_dcpl_127;
  wire and_dcpl_128;
  wire not_tmp_199;
  wire and_dcpl_130;
  wire and_dcpl_132;
  wire or_tmp_247;
  wire and_dcpl_135;
  wire and_dcpl_136;
  wire and_dcpl_138;
  wire and_dcpl_142;
  wire and_dcpl_144;
  wire or_tmp_266;
  wire and_dcpl_147;
  wire and_dcpl_148;
  wire and_dcpl_149;
  wire and_dcpl_150;
  wire mux_tmp_236;
  wire and_dcpl_151;
  wire and_dcpl_152;
  wire mux_tmp_238;
  wire and_dcpl_153;
  wire and_dcpl_155;
  wire and_dcpl_157;
  wire and_dcpl_158;
  wire and_dcpl_159;
  wire and_dcpl_160;
  wire and_dcpl_161;
  wire and_dcpl_162;
  wire nor_tmp_88;
  wire not_tmp_215;
  wire and_dcpl_165;
  wire and_dcpl_166;
  wire or_tmp_278;
  wire and_dcpl_167;
  wire or_dcpl_150;
  wire and_dcpl_168;
  wire and_dcpl_169;
  wire and_dcpl_171;
  wire and_dcpl_172;
  wire and_dcpl_173;
  wire and_dcpl_176;
  wire and_dcpl_178;
  wire mux_tmp_260;
  wire mux_tmp_261;
  wire and_dcpl_183;
  wire and_dcpl_185;
  wire or_dcpl_156;
  wire and_dcpl_189;
  wire and_dcpl_192;
  wire and_dcpl_194;
  wire and_dcpl_195;
  wire and_dcpl_196;
  wire and_dcpl_197;
  wire and_dcpl_198;
  wire and_dcpl_204;
  wire and_dcpl_205;
  wire and_dcpl_208;
  wire and_dcpl_210;
  wire and_dcpl_211;
  wire and_dcpl_212;
  wire and_dcpl_213;
  wire and_dcpl_214;
  wire nor_tmp_95;
  wire and_dcpl_228;
  wire and_dcpl_232;
  wire and_dcpl_233;
  wire and_dcpl_234;
  wire and_dcpl_235;
  wire and_dcpl_238;
  wire and_dcpl_240;
  wire and_dcpl_241;
  wire and_dcpl_242;
  wire and_dcpl_243;
  wire and_dcpl_245;
  wire and_dcpl_247;
  wire or_tmp_313;
  wire mux_tmp_277;
  wire or_tmp_314;
  wire or_tmp_316;
  wire mux_tmp_278;
  wire mux_tmp_283;
  wire and_dcpl_256;
  wire and_dcpl_257;
  wire and_dcpl_259;
  wire and_dcpl_260;
  wire and_dcpl_261;
  wire and_dcpl_262;
  wire and_dcpl_263;
  wire and_dcpl_264;
  wire and_dcpl_265;
  wire and_dcpl_266;
  wire and_dcpl_267;
  wire and_dcpl_268;
  wire and_dcpl_269;
  wire and_dcpl_272;
  wire and_dcpl_274;
  wire and_dcpl_275;
  wire and_dcpl_276;
  wire and_dcpl_277;
  wire and_dcpl_278;
  wire and_dcpl_279;
  wire and_dcpl_280;
  wire and_dcpl_281;
  wire and_dcpl_282;
  wire and_dcpl_283;
  wire and_dcpl_284;
  wire and_dcpl_285;
  wire and_dcpl_286;
  wire and_dcpl_287;
  wire and_dcpl_288;
  wire and_dcpl_289;
  wire and_dcpl_290;
  wire and_dcpl_291;
  wire and_dcpl_292;
  wire and_dcpl_293;
  wire and_dcpl_294;
  wire and_dcpl_295;
  wire and_dcpl_296;
  wire and_dcpl_297;
  wire and_dcpl_298;
  wire and_dcpl_299;
  wire and_dcpl_300;
  wire and_dcpl_301;
  wire and_dcpl_302;
  wire and_dcpl_303;
  wire and_dcpl_304;
  wire and_dcpl_305;
  wire and_dcpl_306;
  wire and_dcpl_307;
  wire and_dcpl_308;
  wire and_dcpl_309;
  wire and_dcpl_310;
  wire and_dcpl_311;
  wire and_dcpl_312;
  wire and_dcpl_313;
  wire and_dcpl_314;
  wire and_dcpl_315;
  wire and_dcpl_316;
  wire and_dcpl_317;
  wire and_dcpl_318;
  wire and_dcpl_319;
  wire and_dcpl_320;
  wire and_dcpl_321;
  wire and_dcpl_322;
  wire and_dcpl_323;
  wire and_dcpl_324;
  wire and_dcpl_325;
  wire and_dcpl_328;
  wire and_dcpl_329;
  wire and_dcpl_332;
  wire and_dcpl_335;
  wire and_dcpl_337;
  wire and_dcpl_342;
  wire and_dcpl_348;
  wire or_dcpl_166;
  wire or_tmp_324;
  wire mux_tmp_291;
  wire and_dcpl_356;
  wire or_tmp_329;
  wire and_dcpl_359;
  wire and_dcpl_361;
  wire and_dcpl_366;
  wire and_dcpl_367;
  wire and_dcpl_368;
  wire and_dcpl_373;
  wire and_dcpl_374;
  wire or_tmp_340;
  wire and_dcpl_378;
  wire and_dcpl_384;
  wire and_dcpl_386;
  wire and_dcpl_387;
  wire and_dcpl_388;
  wire nor_tmp_98;
  wire and_dcpl_395;
  wire and_dcpl_396;
  wire and_dcpl_399;
  wire and_dcpl_403;
  wire and_dcpl_404;
  wire and_dcpl_405;
  wire and_dcpl_406;
  wire and_dcpl_407;
  wire or_dcpl_179;
  wire or_tmp_348;
  wire or_tmp_349;
  wire and_dcpl_419;
  wire not_tmp_260;
  wire or_tmp_354;
  wire and_dcpl_440;
  wire and_dcpl_445;
  wire and_dcpl_446;
  wire and_dcpl_447;
  wire and_dcpl_450;
  wire and_dcpl_454;
  wire or_tmp_373;
  wire mux_tmp_356;
  wire nor_tmp_109;
  wire and_dcpl_458;
  wire and_dcpl_460;
  wire and_dcpl_461;
  wire and_dcpl_468;
  wire not_tmp_296;
  wire and_dcpl_474;
  wire or_tmp_449;
  wire mux_tmp_402;
  wire mux_tmp_405;
  wire and_dcpl_477;
  wire and_dcpl_494;
  wire and_dcpl_496;
  wire and_dcpl_497;
  wire and_dcpl_500;
  wire or_tmp_496;
  wire mux_tmp_458;
  wire or_tmp_497;
  wire or_tmp_499;
  wire or_tmp_500;
  wire or_tmp_502;
  wire or_tmp_511;
  wire and_dcpl_505;
  wire or_tmp_523;
  wire and_dcpl_514;
  wire nor_tmp_140;
  wire and_dcpl_530;
  wire and_dcpl_545;
  wire mux_tmp_584;
  wire or_tmp_646;
  wire nor_tmp_145;
  wire xor_dcpl_4;
  wire and_dcpl_553;
  wire and_dcpl_556;
  wire mux_tmp_606;
  wire or_tmp_676;
  wire or_tmp_707;
  wire or_tmp_712;
  wire or_tmp_726;
  wire mux_tmp_665;
  wire and_dcpl_581;
  wire and_dcpl_583;
  wire or_tmp_766;
  wire and_dcpl_584;
  wire and_dcpl_587;
  wire and_dcpl_588;
  wire or_dcpl_202;
  wire mux_tmp_681;
  wire and_dcpl_606;
  wire and_dcpl_612;
  wire nor_tmp_171;
  wire or_tmp_831;
  wire mux_tmp_728;
  wire or_tmp_849;
  wire or_dcpl_205;
  wire not_tmp_460;
  wire or_tmp_874;
  wire nor_tmp_182;
  wire and_dcpl_630;
  wire or_tmp_907;
  wire or_tmp_911;
  wire mux_tmp_808;
  wire or_dcpl_210;
  wire not_tmp_504;
  wire or_tmp_927;
  wire not_tmp_512;
  wire or_tmp_943;
  wire and_dcpl_640;
  wire mux_tmp_848;
  wire or_tmp_976;
  wire and_dcpl_655;
  wire or_tmp_979;
  wire and_dcpl_659;
  wire and_dcpl_661;
  wire and_dcpl_662;
  wire not_tmp_552;
  wire mux_tmp_956;
  wire or_tmp_1058;
  wire CACHE_UPDATE_LOOP_1_and_cse;
  reg CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  reg INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm;
  reg exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1;
  reg LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1;
  reg APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire exit_LINEAR_FORWARD_NO_MUL_LOOP_4_lpi_3_dfm_2;
  reg LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_mdf_sva;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1;
  wire QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1;
  wire QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1;
  wire QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1;
  reg LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2;
  reg QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs;
  reg QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39;
  reg QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39;
  wire and_254_ssc;
  wire and_255_ssc;
  wire and_257_ssc;
  wire and_461_ssc;
  wire and_462_ssc;
  wire and_463_ssc;
  reg [20:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_18;
  wire mux_234_seb;
  reg operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39;
  reg [8:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30;
  wire [13:0] SF_LOOP_3_acc_45_sdt;
  wire [17:0] nl_SF_LOOP_3_acc_45_sdt;
  reg [4:0] SF_LOOP_3_acc_45_itm_13_9;
  reg [8:0] SF_LOOP_3_acc_45_itm_8_0;
  reg [3:0] attention_round_1_qr_39_16_3_lpi_3_dfm_23_20;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_ssc;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_ssc;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_sdt;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_1_ssc;
  wire [18:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt;
  wire [19:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt;
  wire [18:0] SF_LOOP_3_acc_38_sdt;
  wire [20:0] nl_SF_LOOP_3_acc_38_sdt;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_1_and_ssc;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_ssc;
  wire [40:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt;
  wire [41:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_ssc;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_ssc;
  wire or_1327_cse;
  wire and_863_cse;
  wire or_1328_cse;
  reg reg_strm_out_rsci_iswt0_cse;
  reg reg_strm_in_rsci_iswt0_cse;
  wire or_412_cse;
  wire or_455_cse;
  wire and_850_cse;
  wire or_616_cse;
  wire or_1363_cse;
  wire nor_83_cse;
  wire nor_414_cse;
  wire nor_372_cse;
  wire or_601_cse;
  wire or_607_cse;
  wire or_1326_cse;
  wire nor_371_cse;
  wire and_849_cse;
  wire or_369_cse;
  wire or_811_cse;
  wire nand_158_cse;
  wire or_966_cse;
  wire or_955_cse;
  wire or_454_cse;
  wire and_864_cse;
  wire or_629_cse;
  wire nand_170_cse;
  wire nand_175_cse;
  wire nor_552_cse;
  wire and_855_cse;
  wire and_745_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_2_cse;
  wire GEMM_3D_FLOAT_LOOP_4_and_5_cse;
  wire GEMM_3D_FLOAT_LOOP_4_1_and_4_cse;
  wire or_1325_cse;
  wire nand_160_cse;
  wire and_19_cse;
  wire or_645_cse;
  wire or_1217_cse;
  wire and_929_cse;
  wire or_1017_cse;
  wire or_113_cse;
  wire nor_581_cse;
  wire nor_315_cse;
  wire and_747_cse;
  wire or_935_cse;
  wire or_6_cse;
  wire and_944_cse;
  wire and_882_cse;
  wire or_586_cse;
  wire nor_439_cse;
  wire or_604_cse;
  wire or_80_cse;
  wire nor_428_cse;
  wire or_722_cse;
  wire nor_398_cse;
  wire mux_716_cse;
  wire or_788_cse;
  wire or_1283_cse;
  wire or_553_cse;
  wire nor_419_cse;
  wire and_878_cse;
  wire or_614_cse;
  wire and_971_cse;
  wire mux_797_cse;
  wire ATTN_2D_LOOP_3_or_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_38_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_39_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_41_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_43_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_48_cse;
  wire for_for_or_cse;
  reg [6:0] GEMM_3D_FLOAT_LOOP_4_acc_185_sdt;
  wire mux_220_ssc;
  reg reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd;
  reg reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1;
  wire and_274_ssc;
  wire and_277_ssc;
  wire INIT_2D_MEM_LOOP_2_1_or_ssc;
  wire and_447_ssc;
  wire [39:0] CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_sdt;
  wire GEMM_3D_FLOAT_LOOP_4_1_and_ssc;
  reg reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd;
  reg [23:0] reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1;
  reg [14:0] reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2;
  reg rms_norm_384_div_cmp_b_60;
  wire and_528_seb;
  reg SF_LOOP_3_acc_5_psp_sva_9;
  reg [8:0] SF_LOOP_3_acc_5_psp_sva_8_0;
  wire attention_sqrt_1_for_i_and_ssc;
  reg [1:0] attention_sqrt_1_for_i_4_0_sva_4_3;
  reg [2:0] attention_sqrt_1_for_i_4_0_sva_2_0;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_58;
  reg [18:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_57_39;
  reg [20:0] rms_norm_384_div_cmp_b_59_39;
  reg [18:0] rms_norm_384_div_cmp_b_38_20;
  wire [5:0] GEMM_3D_FLOAT_LOOP_4_acc_34_sdt;
  wire [6:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_34_sdt;
  wire and_667_ssc;
  wire and_668_ssc;
  wire and_688_ssc;
  wire [12:0] SF_LOOP_3_acc_86_sdt;
  wire [13:0] nl_SF_LOOP_3_acc_86_sdt;
  wire [14:0] SF_LOOP_3_acc_87_sdt;
  wire [15:0] nl_SF_LOOP_3_acc_87_sdt;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_sdt;
  wire GEMM_3D_FLOAT_LOOP_4_or_5_cse;
  wire GEMM_3D_FLOAT_LOOP_4_or_6_cse;
  wire GEMM_3D_FLOAT_LOOP_4_or_8_cse;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_4_cse;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_or_cse;
  wire or_368_cse;
  wire mux_445_cse;
  wire nor_501_cse;
  reg [3:0] reg_GEMM_3D_FLOAT_LOOP_4_acc_96_cse;
  wire mux_967_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_1_rgt;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_3_rgt;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_5_rgt;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_or_2_m1c;
  wire QUANTIZE_ACTIVATION_LOOP_5_or_5_m1c;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_2_m1c;
  wire and_198_ssc;
  wire and_202_ssc;
  reg SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39;
  reg [14:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_14_0;
  wire and_195_ssc;
  wire and_197_ssc;
  reg SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55;
  reg [23:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_31;
  reg [14:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_30_16;
  wire or_436_ssc;
  wire and_188_ssc;
  reg LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71;
  reg [14:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_46_32;
  reg LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_15;
  reg [12:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_14_2;
  wire and_173_ssc;
  reg rms_norm_384_div_cmp_a_71;
  reg [23:0] rms_norm_384_div_cmp_a_70_47;
  reg [14:0] rms_norm_384_div_cmp_a_46_32;
  reg rms_norm_384_div_cmp_b_15;
  reg [9:0] rms_norm_384_div_cmp_b_14_5;
  reg [14:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_15;
  reg [14:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_14_0;
  wire QUANTIZE_ACTIVATION_LOOP_1_1_max_val_and_1_ssc;
  reg [23:0] QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15;
  reg [14:0] QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_14_0;
  wire QUANTIZE_ACTIVATION_LOOP_1_max_val_and_1_ssc;
  reg [23:0] QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_15;
  reg [14:0] QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_14_0;
  wire CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_nand_ssc;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_and_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_57_cse;
  wire attention_sqrt_1_for_i_4_0_sva_mx0c3;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx0c2;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_mx0c2;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_mx1c2;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_mx0c1;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0c1;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_mx0c1;
  wire SF_LOOP_3_SF_LOOP_3_or_24_rmff;
  wire SF_LOOP_3_SF_LOOP_3_or_20_rmff;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_nand_rmff;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_17_rmff;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_16_rmff;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_nand_1_rmff;
  reg [3:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1;
  reg [3:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp;
  reg [3:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_252_psp;
  reg [6:0] GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_251_psp;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_251_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_248_psp;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_248_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_247_psp;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_247_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_246_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_245_psp;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_245_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_244_psp;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_244_psp;
  reg [2:0] GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0;
  reg [1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0;
  reg [6:0] GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm;
  reg [2:0] GEMM_3D_FLOAT_LOOP_4_acc_250_sdt_2_0;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp;
  reg [6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0;
  reg [6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp;
  reg [6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0;
  reg [2:0] GEMM_3D_FLOAT_LOOP_4_acc_243_sdt_2_0;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva;
  reg [2:0] CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_l_2_0_lpi_3_dfm_1_0_1;
  reg [39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0;
  reg [39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0;
  reg [39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0;
  reg [39:0] QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva;
  reg SF_LOOP_3_acc_5_psp_sva_21;
  reg [2:0] SF_LOOP_3_acc_5_psp_sva_19_17;
  wire [14:0] SF_LOOP_3_acc_90_psp_1;
  wire [15:0] nl_SF_LOOP_3_acc_90_psp_1;
  wire [17:0] SF_LOOP_3_acc_7_psp_sva_1;
  wire [18:0] nl_SF_LOOP_3_acc_7_psp_sva_1;
  reg [3:0] SF_LOOP_3_acc_53_itm_27_24;
  reg [8:0] SF_LOOP_3_acc_53_itm_23_15;
  reg [5:0] SF_LOOP_3_acc_53_itm_14_9;
  reg [8:0] SF_LOOP_3_acc_53_itm_8_0;
  reg [39:0] GEMM_3D_FLOAT_LOOP_4_acc_193_itm;
  wire [4:0] GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5;
  wire [5:0] nl_GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5;
  reg [4:0] GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva;
  reg [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt;
  reg [3:0] CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0;
  wire [4:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2;
  wire [6:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_1_cse_1;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_2_exs_2_0;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_and_ssc;
  reg [2:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_and_1_ssc;
  reg [2:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2;
  reg [1:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0;
  wire [4:0] attention_sqrt_for_i_4_0_sva_1_mx0w0;
  wire [5:0] nl_attention_sqrt_for_i_4_0_sva_1_mx0w0;
  wire [2:0] APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_3_1;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_0;
  wire [39:0] CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm;
  wire [17:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm;
  wire [18:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm;
  wire [16:0] APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm;
  wire SF_LOOP_3_and_itm;
  wire [16:0] APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm;
  wire [19:0] SF_LOOP_3_acc_47_itm;
  wire [21:0] nl_SF_LOOP_3_acc_47_itm;
  wire mux_502_itm;
  wire [12:0] RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm;
  wire [11:0] RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_1_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_12_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_13_itm;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm;
  wire [6:0] LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_itm;
  wire [6:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_itm;
  wire and_677_itm;
  wire and_678_itm;
  wire and_679_itm;
  wire and_682_itm;
  wire and_683_itm;
  wire and_684_itm;
  wire [1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm;
  wire [2:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm;
  wire [2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm;
  wire [4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm;
  wire [6:0] LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_itm;
  wire [6:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_itm;
  wire [39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm;
  wire [40:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm;
  wire mux_328_itm;
  wire mux_946_itm;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_10_itm;
  wire GEMM_3D_FLOAT_LOOP_4_or_7_itm;
  wire [37:0] z_out;
  wire [38:0] nl_z_out;
  wire and_dcpl_728;
  wire [21:0] z_out_2;
  wire [22:0] nl_z_out_2;
  wire and_dcpl_749;
  wire and_dcpl_763;
  wire [31:0] z_out_4;
  wire [32:0] nl_z_out_4;
  wire [7:0] z_out_5;
  wire and_dcpl_787;
  wire and_dcpl_790;
  wire and_dcpl_795;
  wire and_dcpl_800;
  wire and_dcpl_804;
  wire [9:0] z_out_6;
  wire [11:0] z_out_7;
  wire [12:0] nl_z_out_7;
  wire and_dcpl_829;
  wire [23:0] z_out_8;
  wire [24:0] nl_z_out_8;
  wire and_dcpl_855;
  wire and_dcpl_856;
  wire and_dcpl_874;
  wire and_dcpl_877;
  wire [42:0] z_out_9;
  wire [43:0] nl_z_out_9;
  wire and_dcpl_880;
  wire and_dcpl_884;
  wire and_dcpl_885;
  wire and_dcpl_887;
  wire and_dcpl_889;
  wire and_dcpl_893;
  wire and_dcpl_897;
  wire and_dcpl_898;
  wire and_dcpl_901;
  wire and_dcpl_902;
  wire and_dcpl_905;
  wire and_dcpl_914;
  wire and_dcpl_922;
  wire and_dcpl_924;
  wire [67:0] z_out_10;
  wire signed [91:0] nl_z_out_10;
  wire and_dcpl_932;
  wire and_dcpl_939;
  wire and_dcpl_940;
  wire and_dcpl_944;
  wire and_dcpl_946;
  wire and_dcpl_947;
  wire and_dcpl_950;
  wire and_dcpl_955;
  wire [99:0] z_out_11;
  wire signed [119:0] nl_z_out_11;
  wire and_dcpl_962;
  wire and_dcpl_963;
  wire and_dcpl_969;
  wire and_dcpl_970;
  wire and_dcpl_973;
  wire and_dcpl_976;
  wire and_dcpl_978;
  wire [39:0] z_out_12;
  wire [40:0] nl_z_out_12;
  wire and_dcpl_1000;
  wire and_dcpl_1006;
  wire [3:0] z_out_14;
  wire and_dcpl_1029;
  wire [3:0] z_out_15;
  wire [4:0] nl_z_out_15;
  wire and_dcpl_1057;
  wire [3:0] z_out_16;
  wire [4:0] nl_z_out_16;
  wire and_dcpl_1070;
  wire and_dcpl_1075;
  wire and_dcpl_1079;
  wire and_dcpl_1080;
  wire and_dcpl_1083;
  wire and_dcpl_1084;
  wire [3:0] z_out_17;
  wire [4:0] nl_z_out_17;
  wire and_dcpl_1097;
  wire and_dcpl_1103;
  wire and_dcpl_1105;
  wire and_dcpl_1112;
  wire [3:0] z_out_18;
  wire and_dcpl_1136;
  wire [2:0] z_out_19;
  wire not_tmp_753;
  wire not_tmp_754;
  wire [8:0] z_out_20;
  wire and_dcpl_1178;
  wire [2:0] z_out_21;
  wire [3:0] nl_z_out_21;
  wire and_dcpl_1186;
  wire and_dcpl_1201;
  wire and_dcpl_1206;
  wire and_dcpl_1208;
  wire [5:0] z_out_22;
  wire [3:0] z_out_23;
  wire [4:0] nl_z_out_23;
  wire and_dcpl_1238;
  wire and_dcpl_1239;
  wire and_dcpl_1240;
  wire and_dcpl_1245;
  wire and_dcpl_1249;
  wire and_dcpl_1254;
  wire and_dcpl_1257;
  wire [3:0] z_out_24;
  wire [3:0] z_out_25;
  wire and_dcpl_1291;
  wire and_dcpl_1295;
  wire and_dcpl_1301;
  wire and_dcpl_1306;
  wire [3:0] z_out_26;
  wire or_tmp_1137;
  wire [2:0] z_out_27;
  wire [3:0] nl_z_out_27;
  wire and_dcpl_1337;
  wire and_dcpl_1344;
  wire [2:0] z_out_28;
  wire and_dcpl_1346;
  wire [8:0] z_out_29;
  wire [4:0] z_out_31;
  wire [5:0] nl_z_out_31;
  wire and_dcpl_1385;
  wire and_dcpl_1388;
  wire and_dcpl_1392;
  wire and_dcpl_1393;
  wire and_dcpl_1398;
  wire and_dcpl_1400;
  wire and_dcpl_1402;
  wire and_dcpl_1403;
  wire and_dcpl_1407;
  wire and_dcpl_1411;
  wire [8:0] z_out_32;
  wire [9:0] nl_z_out_32;
  wire [3:0] z_out_33;
  wire [4:0] nl_z_out_33;
  wire and_dcpl_1440;
  wire [6:0] z_out_34;
  wire or_tmp_1208;
  wire nor_tmp_241;
  wire [3:0] z_out_35;
  wire [4:0] nl_z_out_35;
  wire and_dcpl_1468;
  wire and_dcpl_1471;
  wire and_dcpl_1476;
  wire [4:0] z_out_36;
  wire [5:0] nl_z_out_36;
  wire and_dcpl_1498;
  wire [4:0] z_out_37;
  wire [5:0] nl_z_out_37;
  wire [6:0] z_out_39;
  wire [41:0] z_out_40;
  wire [42:0] nl_z_out_40;
  wire and_dcpl_1557;
  wire and_dcpl_1572;
  wire [29:0] z_out_49;
  wire [30:0] nl_z_out_49;
  wire [23:0] z_out_50;
  wire [24:0] nl_z_out_50;
  wire and_dcpl_1685;
  wire and_dcpl_1698;
  wire and_dcpl_1721;
  wire and_dcpl_1729;
  wire and_dcpl_1760;
  wire and_dcpl_1764;
  wire and_dcpl_1766;
  wire and_dcpl_1772;
  wire and_dcpl_1775;
  wire and_dcpl_1780;
  wire and_dcpl_1787;
  wire and_dcpl_1793;
  wire and_dcpl_1797;
  wire and_dcpl_1802;
  wire [29:0] z_out_56;
  wire [30:0] nl_z_out_56;
  wire [30:0] z_out_57;
  wire [31:0] nl_z_out_57;
  wire and_dcpl_1823;
  wire and_dcpl_1825;
  wire and_dcpl_1832;
  wire and_dcpl_1837;
  wire [60:0] z_out_58;
  wire [61:0] nl_z_out_58;
  wire and_dcpl_1840;
  wire and_dcpl_1852;
  wire and_dcpl_1853;
  wire and_dcpl_1855;
  wire and_dcpl_1857;
  wire and_dcpl_1869;
  wire and_dcpl_1870;
  wire [39:0] z_out_59;
  wire [40:0] nl_z_out_59;
  wire and_dcpl_1884;
  wire [39:0] z_out_60;
  wire and_dcpl_1901;
  wire [39:0] z_out_61;
  wire [40:0] nl_z_out_61;
  wire and_dcpl_1910;
  wire and_dcpl_1917;
  wire and_dcpl_1923;
  wire [39:0] z_out_62;
  wire [40:0] nl_z_out_62;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs;
  reg [79:0] attention_exp_exp_half_mul_3_cse_sva;
  reg [30:0] attention_abs_4_qif_acc_pmx_lpi_1_dfm;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs;
  reg [29:0] attention_sqrt_1_guess_sva_29_0;
  reg [40:0] LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp;
  wire [41:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp;
  wire exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2_mx0c2;
  wire [8:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7;
  wire [9:0] nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7;
  wire CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c5;
  wire [5:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1;
  wire [6:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1;
  wire [2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1;
  wire [4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1;
  wire [1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1;
  wire [3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1;
  wire attention_sqrt_1_guess_sva_29_0_mx0c0;
  wire attention_sqrt_1_guess_sva_29_0_mx0c2;
  wire attention_sqrt_1_guess_sva_29_0_mx0c3;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_mx0w6;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c5;
  wire [39:0] GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8;
  wire [40:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8;
  wire GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c4;
  wire GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c7;
  wire GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c9;
  wire GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c10;
  wire [52:0] LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1;
  wire [53:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c0;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c2;
  wire lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_sva_dfm_mx1w0;
  wire lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_3_sva_dfm_mx2w0;
  wire GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c0;
  wire GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c2;
  wire RMS_NORM_LOOP_2_and_4_ssc_1;
  wire RMS_NORM_LOOP_2_2_and_1_ssc_1;
  wire RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1;
  wire RMS_NORM_LOOP_2_2_and_5_ssc_1;
  wire [3:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12;
  wire [5:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c0;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c1;
  wire [4:0] GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5;
  wire [5:0] nl_GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c1;
  wire [23:0] attention_round_qr_39_16_lpi_3_dfm_mx0w0;
  wire [24:0] nl_attention_round_qr_39_16_lpi_3_dfm_mx0w0;
  wire [7:0] GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2;
  wire [8:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2;
  wire [7:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3;
  wire [9:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c0;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c3;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c4;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c6;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c7;
  wire [5:0] GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5;
  wire [6:0] nl_GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5;
  wire [5:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3;
  wire [6:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_l_2_0_lpi_3_dfm_1_0_1;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_dfm_1_0_1;
  wire [3:0] GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3;
  wire [6:0] GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1;
  wire [7:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1;
  wire [6:0] GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2;
  wire [7:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2;
  wire [5:0] CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8;
  wire [6:0] nl_CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8;
  wire [56:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1;
  wire [59:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1;
  wire [41:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0;
  wire [42:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0;
  wire GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1;
  wire [5:0] CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1;
  wire [6:0] nl_CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1;
  wire [5:0] CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1;
  wire [6:0] nl_CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1;
  wire [6:0] GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1;
  wire [7:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1;
  wire [19:0] SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1;
  wire [14:0] SF_LOOP_3_acc_34_sdt_14_0_1;
  wire [15:0] nl_SF_LOOP_3_acc_34_sdt_14_0_1;
  wire [2:0] SF_LOOP_3_acc_77_sdt_1;
  wire [3:0] nl_SF_LOOP_3_acc_77_sdt_1;
  wire [59:0] attention_exp_exp_half_mul_4_cse_sva_1;
  wire RMS_NORM_LOOP_2_2_and_4_ssc_1;
  wire RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1;
  wire [29:0] attention_abs_qif_acc_pmx_lpi_1_dfm_mx0_30_1;
  wire attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39;
  wire attention_max_attn_fixed_t_1_conc_psp_mx0w12_39;
  reg LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_7;
  reg LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_7;
  reg LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_7;
  reg SF_LOOP_3_acc_38_itm_18;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_41_40;
  reg [15:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_12_sdt_15_0;
  reg LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_52;
  reg [51:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_42_41;
  reg LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_40;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_41_40;
  reg operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_60;
  reg [2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_59_57;
  reg [56:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_exs_5_0;
  reg [1:0] CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_4;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_7;
  wire [6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0;
  wire [23:0] attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_15;
  wire [14:0] attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_14_0;
  wire [23:0] attention_max_attn_fixed_t_1_conc_psp_mx0w12_38_15;
  wire [14:0] attention_max_attn_fixed_t_1_conc_psp_mx0w12_14_0;
  reg reg_SF_LOOP_3_acc_38_1_ftd;
  reg [7:0] reg_SF_LOOP_3_acc_38_1_ftd_1;
  reg [8:0] reg_SF_LOOP_3_acc_38_1_ftd_2;
  wire attention_round_1_qelse_and_3_ssc;
  reg [2:0] reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd;
  reg [4:0] reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1;
  reg [2:0] reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2;
  reg [8:0] reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_and_ssc;
  reg [3:0] reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd;
  reg [1:0] reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1;
  reg [1:0] reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2;
  wire [12:0] exs_tmp_1_12_0;
  wire [13:0] nl_exs_tmp_1_12_0;
  wire [6:0] exu_tmp_5_6_0;
  wire [7:0] nl_exu_tmp_5_6_0;
  wire [26:0] exs_tmp_4_26_0;
  wire [27:0] nl_exs_tmp_4_26_0;
  wire [44:0] exs_tmp_40_54_10;
  wire [45:0] nl_exs_tmp_40_54_10;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc;
  wire and_1675_ssc;
  wire and_1676_ssc;
  wire attention_round_1_qelse_or_9_cse;
  wire attention_round_1_qelse_or_8_cse;
  wire GEMM_3D_FLOAT_LOOP_4_1_or_13_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_9_cse;
  wire SF_LOOP_3_and_4_cse;
  wire or_705_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_7_cse;
  wire [16:0] attention_round_qelse_mux_2_cse;
  wire and_893_cse;
  wire mux_316_cse;
  wire nor_525_cse;
  wire nor_609_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_nor_6_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_nor_11_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  wire nor_450_cse;
  wire nand_242_cse;
  wire nor_721_cse;
  wire RMS_NORM_LOOP_1_1_nor_1_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_nor_3_cse;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_60_cse;
  wire SF_LOOP_3_or_9_cse;
  wire mux_993_cse;
  wire nor_723_cse;
  wire nand_164_cse;
  wire nand_258_cse;
  wire nor_775_cse;
  wire nor_707_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_1_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  wire or_709_cse;
  wire nor_706_cse;
  wire SF_LOOP_3_or_11_cse;
  wire and_629_ssc;
  wire [3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_7_4;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_3_2;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_1_0;
  wire and_1055_cse;
  wire xor_cse;
  wire and_615_cse;
  wire and_1312_cse;
  wire and_1441_cse;
  wire and_1076_cse;
  wire and_1305_cse;
  wire mux_991_cse;
  wire and_1562_cse;
  wire and_1447_cse;
  wire and_1425_cse;
  wire and_1417_cse;
  wire and_1914_cse;
  wire and_995_cse;
  wire and_1208_cse;
  wire and_1216_cse;
  wire nor_779_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_1_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_7_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_45_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_17_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse;
  wire and_1333_cse;
  wire and_1338_cse;
  wire and_1388_cse;
  wire and_1360_cse;
  wire and_1358_cse;
  wire and_1214_cse;
  wire for_for_nor_3_cse;
  wire and_1318_cse;
  wire and_1304_cse;
  wire and_1315_cse;
  wire and_1298_cse;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse;
  reg APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1;
  reg APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0;
  wire nand_246_seb;
  reg [1:0] CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4;
  wire attention_sqrt_1_guess_or_1_cse;
  wire attention_sqrt_1_guess_or_2_cse;
  wire attention_round_1_qelse_or_16_cse;
  wire QUANTIZE_ACTIVATION_LOOP_5_or_6_cse;
  wire INIT_2D_MEM_LOOP_2_or_cse;
  wire or_dcpl;
  wire GEMM_3D_FLOAT_LOOP_4_or_21_cse;
  wire CACHE_UPDATE_LOOP_3_1_or_6_cse_1;
  wire or_1563_tmp;
  wire or_1566_tmp;
  wire and_2271_cse;
  wire and_2277_cse;
  wire GEMM_3D_FLOAT_LOOP_4_nand_3_itm;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_10_itm;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_and_12_itm;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_and_13_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_3_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_4_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_5_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_20_itm;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_21_itm;
  wire nand_245_itm;
  wire and_416_itm;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_nor_5_itm;
  wire [34:0] SF_LOOP_3_acc_56_itm;
  wire [35:0] nl_SF_LOOP_3_acc_56_itm;
  wire [21:0] SF_LOOP_3_acc_32_itm;
  wire [25:0] nl_SF_LOOP_3_acc_32_itm;
  wire RMS_NORM_LOOP_1_2_or_itm;
  wire RMS_NORM_LOOP_1_2_or_1_itm;
  wire RMS_NORM_LOOP_1_2_or_2_itm;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_18_itm;
  wire SF_LOOP_3_or_4_itm;
  wire SF_LOOP_3_or_13_itm;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_itm;
  wire [39:0] RMS_NORM_LOOP_2_2_mul_itm_71_32_1;
  wire operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_23_1;
  wire operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_40_1;
  wire attention_max_attn_fixed_t_or_cse_1;
  wire GEMM_3D_FLOAT_LOOP_4_and_ssc;
  reg [3:0] reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd;
  reg [35:0] reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1;
  wire GEMM_3D_FLOAT_LOOP_4_and_2_ssc;
  reg [3:0] reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd;
  reg [1:0] reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1;
  reg [1:0] reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_and_5_ssc;
  reg reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd;
  reg [1:0] reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1;
  wire CACHE_UPDATE_LOOP_2_1_j_and_ssc;
  reg [1:0] reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd;
  reg reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1;
  reg [1:0] reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd;
  reg [1:0] reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1;
  reg [1:0] reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2;
  reg [1:0] reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd;
  reg [1:0] reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1;
  wire RMS_NORM_LOOP_1_2_nor_seb;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_2_cse_1;
  wire CACHE_UPDATE_LOOP_3_1_or_1_ssc;
  reg [2:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_36;
  reg [20:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_35_15;
  reg [2:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_70_68;
  reg [20:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_67_47;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_2;
  wire [1:0] APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1_0;
  wire CACHE_UPDATE_LOOP_3_qif_CACHE_UPDATE_LOOP_3_qif_nor_ssc;
  wire CACHE_UPDATE_LOOP_3_qif_and_2_ssc;
  wire CACHE_UPDATE_LOOP_3_qif_and_ssc;
  reg [1:0] CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_1;
  reg CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_0;
  wire [3:0] GEMM_3D_FLOAT_LOOP_4_acc_242_sdt;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_242_sdt;
  wire and_704_ssc;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_and_7_cse;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_and_8_cse;
  wire z_out_30_2;
  wire z_out_44_17;
  wire z_out_45_17;
  wire z_out_46_17;
  wire [39:0] z_out_51_40_1;
  wire z_out_53_40;
  reg z_out_55_1;
  reg z_out_55_0;
  wire and_1159_cse;
  wire nor_696_cse;
  wire [42:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt;
  wire [43:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt;
  wire [40:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1;
  wire [41:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1;
  wire [44:0] z_out_41_52_8;
  wire [45:0] nl_z_out_41_52_8;
  wire [41:0] z_out_42_49_8;
  wire [42:0] nl_z_out_42_49_8;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17;

  wire RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux1h_nl;
  wire RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux1h_nl;
  wire mux_208_nl;
  wire mux_207_nl;
  wire mux_206_nl;
  wire mux_205_nl;
  wire mux_204_nl;
  wire mux_203_nl;
  wire mux_202_nl;
  wire or_366_nl;
  wire and_851_nl;
  wire or_389_nl;
  wire mux_219_nl;
  wire nor_236_nl;
  wire mux_218_nl;
  wire or_387_nl;
  wire and_856_nl;
  wire nand_13_nl;
  wire mux_217_nl;
  wire nor_367_nl;
  wire and_858_nl;
  wire mux_225_nl;
  wire mux_189_nl;
  wire nor_311_nl;
  wire and_807_nl;
  wire mux_233_nl;
  wire nor_606_nl;
  wire mux_232_nl;
  wire or_411_nl;
  wire nor_607_nl;
  wire mux_231_nl;
  wire or_408_nl;
  wire or_406_nl;
  wire mux_230_nl;
  wire mux_229_nl;
  wire nor_608_nl;
  wire mux_228_nl;
  wire nor_610_nl;
  wire mux_227_nl;
  wire nor_611_nl;
  wire nor_612_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_2_nl;
  wire rms_norm_384_mux1h_2_nl;
  wire mux_246_nl;
  wire mux_245_nl;
  wire nand_14_nl;
  wire mux_244_nl;
  wire and_862_nl;
  wire mux_243_nl;
  wire mux_242_nl;
  wire mux_241_nl;
  wire mux_240_nl;
  wire or_422_nl;
  wire or_420_nl;
  wire or_419_nl;
  wire mux_249_nl;
  wire mux_248_nl;
  wire rms_norm_384_mux1h_17_nl;
  wire[23:0] rms_norm_384_mux1h_21_nl;
  wire rms_norm_384_not_1_nl;
  wire mux_257_nl;
  wire mux_256_nl;
  wire mux_255_nl;
  wire or_435_nl;
  wire or_434_nl;
  wire mux_254_nl;
  wire or_433_nl;
  wire or_431_nl;
  wire mux_258_nl;
  wire nor_374_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_9_nl;
  wire[2:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_13_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_not_4_nl;
  wire[20:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_16_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_not_2_nl;
  wire mux_259_nl;
  wire mux_263_nl;
  wire mux_262_nl;
  wire SOFTMAX_LOOP_5_mux_nl;
  wire and_192_nl;
  wire[14:0] SOFTMAX_LOOP_5_mux_1_nl;
  wire SOFTMAX_LOOP_5_not_1_nl;
  wire mux_264_nl;
  wire mux_266_nl;
  wire mux_265_nl;
  wire mux_282_nl;
  wire or_478_nl;
  wire mux_285_nl;
  wire mux_284_nl;
  wire mux_288_nl;
  wire mux_287_nl;
  wire or_488_nl;
  wire mux_286_nl;
  wire or_487_nl;
  wire or_486_nl;
  wire mux_304_nl;
  wire mux_303_nl;
  wire or_503_nl;
  wire mux_302_nl;
  wire mux_301_nl;
  wire or_512_nl;
  wire or_510_nl;
  wire mux_298_nl;
  wire nor_339_nl;
  wire nor_340_nl;
  wire mux_349_nl;
  wire mux_348_nl;
  wire nor_400_nl;
  wire nor_401_nl;
  wire nor_402_nl;
  wire mux_347_nl;
  wire mux_346_nl;
  wire mux_345_nl;
  wire mux_344_nl;
  wire or_1362_nl;
  wire nand_nl;
  wire mux_343_nl;
  wire mux_342_nl;
  wire nand_243_nl;
  wire mux_341_nl;
  wire mux_340_nl;
  wire mux_339_nl;
  wire nor_397_nl;
  wire mux_338_nl;
  wire mux_337_nl;
  wire mux_336_nl;
  wire mux_335_nl;
  wire mux_334_nl;
  wire nor_394_nl;
  wire nor_395_nl;
  wire mux_333_nl;
  wire or_556_nl;
  wire mux_332_nl;
  wire or_554_nl;
  wire[3:0] mux1h_1_nl;
  wire[35:0] mux1h_2_nl;
  wire[13:0] SF_LOOP_3_acc_84_nl;
  wire[14:0] nl_SF_LOOP_3_acc_84_nl;
  wire[1:0] SF_LOOP_3_acc_88_nl;
  wire[2:0] nl_SF_LOOP_3_acc_88_nl;
  wire[15:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_nl;
  wire[16:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_nl;
  wire[13:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl;
  wire[14:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl;
  wire mux_398_nl;
  wire nor_418_nl;
  wire mux_397_nl;
  wire or_637_nl;
  wire or_636_nl;
  wire and_884_nl;
  wire[8:0] for_for_j_and_1_nl;
  wire[8:0] for_for_j_mux1h_1_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_2_acc_nl;
  wire[9:0] nl_INIT_2D_MEM_LOOP_2_2_acc_nl;
  wire for_for_j_or_nl;
  wire and_487_nl;
  wire mux_385_nl;
  wire mux_384_nl;
  wire mux_383_nl;
  wire mux_382_nl;
  wire nor_411_nl;
  wire mux_381_nl;
  wire nor_412_nl;
  wire nor_415_nl;
  wire mux_380_nl;
  wire nand_18_nl;
  wire nor_416_nl;
  wire and_494_nl;
  wire INIT_2D_MEM_LOOP_2_2_not_nl;
  wire mux_379_nl;
  wire mux_378_nl;
  wire mux_377_nl;
  wire or_608_nl;
  wire mux_376_nl;
  wire mux_375_nl;
  wire or_605_nl;
  wire mux_374_nl;
  wire mux_373_nl;
  wire mux_372_nl;
  wire mux_371_nl;
  wire or_600_nl;
  wire or_597_nl;
  wire mux_396_nl;
  wire mux_395_nl;
  wire mux_394_nl;
  wire mux_393_nl;
  wire mux_392_nl;
  wire mux_391_nl;
  wire or_633_nl;
  wire or_632_nl;
  wire or_631_nl;
  wire mux_390_nl;
  wire mux_389_nl;
  wire or_628_nl;
  wire mux_388_nl;
  wire or_627_nl;
  wire mux_387_nl;
  wire or_625_nl;
  wire[8:0] for_for_j_and_nl;
  wire[8:0] for_for_j_mux1h_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_1_acc_nl;
  wire[9:0] nl_INIT_2D_MEM_LOOP_2_1_acc_nl;
  wire nor_407_nl;
  wire mux_357_nl;
  wire or_1332_nl;
  wire nand_179_nl;
  wire mux_369_nl;
  wire mux_368_nl;
  wire mux_367_nl;
  wire mux_366_nl;
  wire or_593_nl;
  wire mux_365_nl;
  wire or_592_nl;
  wire or_590_nl;
  wire mux_364_nl;
  wire mux_363_nl;
  wire nor_408_nl;
  wire mux_362_nl;
  wire nand_17_nl;
  wire mux_361_nl;
  wire mux_360_nl;
  wire nor_409_nl;
  wire mux_359_nl;
  wire and_477_nl;
  wire mux_358_nl;
  wire nand_181_nl;
  wire and_486_nl;
  wire mux_355_nl;
  wire or_1359_nl;
  wire mux_354_nl;
  wire mux_353_nl;
  wire or_578_nl;
  wire mux_352_nl;
  wire or_577_nl;
  wire or_576_nl;
  wire mux_351_nl;
  wire or_1360_nl;
  wire or_1361_nl;
  wire mux_350_nl;
  wire or_572_nl;
  wire mux_422_nl;
  wire mux_421_nl;
  wire mux_420_nl;
  wire mux_419_nl;
  wire mux_418_nl;
  wire mux_417_nl;
  wire mux_416_nl;
  wire or_651_nl;
  wire mux_415_nl;
  wire mux_414_nl;
  wire mux_413_nl;
  wire mux_412_nl;
  wire mux_411_nl;
  wire mux_410_nl;
  wire mux_409_nl;
  wire mux_408_nl;
  wire mux_407_nl;
  wire nand_183_nl;
  wire mux_406_nl;
  wire mux_404_nl;
  wire mux_403_nl;
  wire mux_401_nl;
  wire or_644_nl;
  wire mux_400_nl;
  wire mux_399_nl;
  wire or_643_nl;
  wire or_642_nl;
  wire nand_19_nl;
  wire for_for_mux1h_4_nl;
  wire INIT_2D_MEM_LOOP_2_and_1_nl;
  wire for_for_or_3_nl;
  wire for_for_or_6_nl;
  wire mux_456_nl;
  wire mux_455_nl;
  wire mux_454_nl;
  wire mux_453_nl;
  wire or_690_nl;
  wire nand_21_nl;
  wire mux_452_nl;
  wire nand_20_nl;
  wire mux_451_nl;
  wire nor_429_nl;
  wire mux_450_nl;
  wire mux_449_nl;
  wire mux_448_nl;
  wire or_684_nl;
  wire mux_447_nl;
  wire mux_446_nl;
  wire or_680_nl;
  wire mux_444_nl;
  wire mux_443_nl;
  wire or_678_nl;
  wire mux_465_nl;
  wire mux_464_nl;
  wire or_698_nl;
  wire mux_463_nl;
  wire mux_462_nl;
  wire mux_461_nl;
  wire mux_460_nl;
  wire mux_459_nl;
  wire or_695_nl;
  wire[1:0] attention_sqrt_for_i_attention_sqrt_for_i_mux_nl;
  wire attention_sqrt_1_for_i_not_2_nl;
  wire[2:0] mux1h_nl;
  wire mux_649_nl;
  wire mux_648_nl;
  wire nand_38_nl;
  wire mux_647_nl;
  wire and_725_nl;
  wire mux_646_nl;
  wire nor_156_nl;
  wire mux_645_nl;
  wire nor_217_nl;
  wire mux_644_nl;
  wire nand_61_nl;
  wire or_930_nl;
  wire mux_643_nl;
  wire or_929_nl;
  wire mux_642_nl;
  wire mux_641_nl;
  wire mux_640_nl;
  wire nand_62_nl;
  wire mux_639_nl;
  wire mux_638_nl;
  wire or_926_nl;
  wire mux_637_nl;
  wire mux_636_nl;
  wire or_924_nl;
  wire nand_36_nl;
  wire or_921_nl;
  wire SF_LOOP_3_or_1_nl;
  wire mux_652_nl;
  wire mux_651_nl;
  wire nor_492_nl;
  wire nor_493_nl;
  wire nor_494_nl;
  wire mux_650_nl;
  wire or_937_nl;
  wire and_595_nl;
  wire mux_490_nl;
  wire mux_489_nl;
  wire mux_488_nl;
  wire mux_487_nl;
  wire mux_486_nl;
  wire mux_485_nl;
  wire mux_484_nl;
  wire mux_483_nl;
  wire mux_482_nl;
  wire mux_480_nl;
  wire or_713_nl;
  wire mux_479_nl;
  wire mux_478_nl;
  wire mux_477_nl;
  wire mux_476_nl;
  wire mux_474_nl;
  wire mux_471_nl;
  wire or_708_nl;
  wire mux_470_nl;
  wire or_706_nl;
  wire mux_469_nl;
  wire mux_468_nl;
  wire or_703_nl;
  wire mux_467_nl;
  wire mux_466_nl;
  wire and_596_nl;
  wire nor_629_nl;
  wire mux_979_nl;
  wire mux_978_nl;
  wire mux_977_nl;
  wire mux_976_nl;
  wire or_1378_nl;
  wire mux_975_nl;
  wire or_1376_nl;
  wire mux_974_nl;
  wire or_1375_nl;
  wire nand_249_nl;
  wire mux_973_nl;
  wire or_1374_nl;
  wire or_1372_nl;
  wire mux_972_nl;
  wire or_1371_nl;
  wire[30:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_nl;
  wire[31:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_nl;
  wire attention_abs_qif_or_nl;
  wire attention_abs_qif_or_1_nl;
  wire mux_516_nl;
  wire mux_515_nl;
  wire nand_194_nl;
  wire mux_514_nl;
  wire mux_210_nl;
  wire mux_512_nl;
  wire or_746_nl;
  wire[77:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_nl;
  wire[78:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl;
  wire attention_sqrt_guess_or_nl;
  wire mux_501_nl;
  wire or_381_nl;
  wire mux_500_nl;
  wire mux_499_nl;
  wire or_730_nl;
  wire mux_498_nl;
  wire mux_497_nl;
  wire or_729_nl;
  wire or_726_nl;
  wire mux_496_nl;
  wire mux_495_nl;
  wire or_724_nl;
  wire mux_494_nl;
  wire mux_493_nl;
  wire or_721_nl;
  wire mux_511_nl;
  wire and_900_nl;
  wire nor_442_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_or_1_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_and_1_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_1_nl;
  wire mux_510_nl;
  wire or_742_nl;
  wire mux_509_nl;
  wire mux_508_nl;
  wire mux_507_nl;
  wire mux_506_nl;
  wire mux_505_nl;
  wire mux_504_nl;
  wire or_735_nl;
  wire mux_503_nl;
  wire or_734_nl;
  wire or_733_nl;
  wire not_2244_nl;
  wire mux_530_nl;
  wire mux_529_nl;
  wire nand_197_nl;
  wire mux_528_nl;
  wire mux_527_nl;
  wire mux_526_nl;
  wire mux_525_nl;
  wire mux_524_nl;
  wire mux_523_nl;
  wire nor_451_nl;
  wire mux_522_nl;
  wire mux_521_nl;
  wire or_764_nl;
  wire or_762_nl;
  wire and_545_nl;
  wire[3:0] attention_sqrt_for_acc_3_nl;
  wire[4:0] nl_attention_sqrt_for_acc_3_nl;
  wire attention_sqrt_for_or_nl;
  wire attention_sqrt_for_or_1_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_mux1h_nl;
  wire RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_and_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_3_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_or_nl;
  wire mux_583_nl;
  wire nor_465_nl;
  wire mux_582_nl;
  wire nor_466_nl;
  wire mux_581_nl;
  wire or_830_nl;
  wire mux_580_nl;
  wire nand_203_nl;
  wire or_829_nl;
  wire or_828_nl;
  wire RMS_NORM_LOOP_2_mux1h_nl;
  wire and_568_nl;
  wire mux_589_nl;
  wire mux_590_nl;
  wire mux_588_nl;
  wire or_1366_nl;
  wire mux_587_nl;
  wire or_845_nl;
  wire or_843_nl;
  wire or_1367_nl;
  wire mux_586_nl;
  wire or_839_nl;
  wire mux_585_nl;
  wire nand_30_nl;
  wire or_838_nl;
  wire or_836_nl;
  wire[10:0] SF_LOOP_3_acc_43_nl;
  wire[12:0] nl_SF_LOOP_3_acc_43_nl;
  wire[8:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_j_asn_SF_LOOP_3_acc_45_itm_1_8_RMS_NORM_LOOP_2_and_nl;
  wire[8:0] RMS_NORM_LOOP_2_mux1h_1_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_acc_nl;
  wire[9:0] nl_INIT_2D_MEM_LOOP_2_acc_nl;
  wire nor_474_nl;
  wire mux_596_nl;
  wire mux_595_nl;
  wire nand_206_nl;
  wire mux_594_nl;
  wire nor_469_nl;
  wire mux_593_nl;
  wire or_857_nl;
  wire nor_475_nl;
  wire mux_592_nl;
  wire or_1343_nl;
  wire mux_591_nl;
  wire or_850_nl;
  wire or_849_nl;
  wire and_576_nl;
  wire and_577_nl;
  wire mux_605_nl;
  wire mux_604_nl;
  wire mux_603_nl;
  wire nor_614_nl;
  wire nor_615_nl;
  wire mux_602_nl;
  wire mux_601_nl;
  wire or_1364_nl;
  wire mux_600_nl;
  wire mux_599_nl;
  wire or_867_nl;
  wire mux_598_nl;
  wire nor_616_nl;
  wire mux_597_nl;
  wire nor_617_nl;
  wire SF_LOOP_3_SF_LOOP_3_nor_nl;
  wire mux_613_nl;
  wire mux_612_nl;
  wire mux_611_nl;
  wire mux_610_nl;
  wire mux_609_nl;
  wire mux_608_nl;
  wire mux_607_nl;
  wire nor_148_nl;
  wire or_875_nl;
  wire nor_911_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_if_mux1h_nl;
  wire[40:0] QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl;
  wire[41:0] nl_QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_attention_abs_2_nand_nl;
  wire[38:0] attention_abs_2_mux_2_nl;
  wire mux_619_nl;
  wire or_1344_nl;
  wire mux_618_nl;
  wire or_889_nl;
  wire or_1345_nl;
  wire mux_617_nl;
  wire or_886_nl;
  wire or_884_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_11_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_17_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_18_nl;
  wire nor_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl;
  wire mux_677_nl;
  wire mux_676_nl;
  wire mux_675_nl;
  wire nand_40_nl;
  wire mux_674_nl;
  wire mux_673_nl;
  wire mux_672_nl;
  wire and_921_nl;
  wire mux_671_nl;
  wire mux_670_nl;
  wire mux_669_nl;
  wire mux_668_nl;
  wire mux_667_nl;
  wire mux_666_nl;
  wire nand_213_nl;
  wire mux_664_nl;
  wire or_961_nl;
  wire mux_663_nl;
  wire mux_662_nl;
  wire mux_661_nl;
  wire or_959_nl;
  wire mux_660_nl;
  wire or_956_nl;
  wire mux_659_nl;
  wire or_954_nl;
  wire and_612_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_1_or_nl;
  wire and_622_nl;
  wire mux_691_nl;
  wire mux_690_nl;
  wire or_1347_nl;
  wire mux_689_nl;
  wire mux_688_nl;
  wire mux_687_nl;
  wire nor_504_nl;
  wire and_616_nl;
  wire mux_686_nl;
  wire nor_505_nl;
  wire nor_506_nl;
  wire mux_685_nl;
  wire mux_684_nl;
  wire and_614_nl;
  wire nor_507_nl;
  wire mux_683_nl;
  wire nand_214_nl;
  wire mux_682_nl;
  wire and_613_nl;
  wire mux_710_nl;
  wire mux_709_nl;
  wire mux_708_nl;
  wire mux_707_nl;
  wire or_1009_nl;
  wire mux_706_nl;
  wire or_1004_nl;
  wire mux_705_nl;
  wire mux_704_nl;
  wire or_1001_nl;
  wire or_1000_nl;
  wire mux_702_nl;
  wire or_999_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_6_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_15_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_7_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_1_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_23_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_8_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_24_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_9_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_2_nl;
  wire mux_944_nl;
  wire[6:0] GEMM_3D_FLOAT_LOOP_4_acc_192_nl;
  wire[7:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_192_nl;
  wire[1:0] GEMM_3D_FLOAT_LOOP_4_acc_17_nl;
  wire[2:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_17_nl;
  wire mux_720_nl;
  wire mux_719_nl;
  wire nand_43_nl;
  wire or_1025_nl;
  wire mux_718_nl;
  wire mux_717_nl;
  wire or_1023_nl;
  wire mux_941_nl;
  wire mux_748_nl;
  wire mux_747_nl;
  wire mux_746_nl;
  wire mux_745_nl;
  wire or_1056_nl;
  wire mux_744_nl;
  wire mux_743_nl;
  wire or_1050_nl;
  wire mux_742_nl;
  wire mux_741_nl;
  wire mux_740_nl;
  wire mux_739_nl;
  wire mux_738_nl;
  wire mux_737_nl;
  wire mux_736_nl;
  wire or_1046_nl;
  wire mux_735_nl;
  wire mux_734_nl;
  wire or_1045_nl;
  wire or_1040_nl;
  wire mux_733_nl;
  wire mux_732_nl;
  wire mux_731_nl;
  wire mux_730_nl;
  wire mux_729_nl;
  wire mux_727_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_5_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_and_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_and_4_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_8_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_not_2_nl;
  wire mux_770_nl;
  wire nor_543_nl;
  wire mux_769_nl;
  wire or_1085_nl;
  wire mux_768_nl;
  wire mux_767_nl;
  wire mux_766_nl;
  wire mux_765_nl;
  wire nor_540_nl;
  wire mux_764_nl;
  wire mux_763_nl;
  wire mux_762_nl;
  wire and_938_nl;
  wire nor_541_nl;
  wire mux_761_nl;
  wire mux_760_nl;
  wire nand_226_nl;
  wire nand_227_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_1_i_nand_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_6_nl;
  wire CACHE_UPDATE_LOOP_2_1_j_not_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_9_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_12_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_4_acc_240_nl;
  wire[4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_240_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_and_14_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_and_15_nl;
  wire nor_908_nl;
  wire mux_789_nl;
  wire mux_788_nl;
  wire and_947_nl;
  wire mux_787_nl;
  wire mux_786_nl;
  wire and_948_nl;
  wire mux_785_nl;
  wire nor_553_nl;
  wire nor_554_nl;
  wire mux_784_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_15_nl;
  wire not_2256_nl;
  wire mux_798_nl;
  wire nand_46_nl;
  wire mux_796_nl;
  wire nor_555_nl;
  wire mux_795_nl;
  wire mux_794_nl;
  wire and_951_nl;
  wire mux_793_nl;
  wire mux_792_nl;
  wire nor_556_nl;
  wire mux_791_nl;
  wire and_659_nl;
  wire or_1107_nl;
  wire mux_790_nl;
  wire mux_802_nl;
  wire mux_801_nl;
  wire mux_800_nl;
  wire mux_799_nl;
  wire nand_235_nl;
  wire mux_806_nl;
  wire nor_559_nl;
  wire mux_805_nl;
  wire mux_804_nl;
  wire nand_250_nl;
  wire nand_251_nl;
  wire and_955_nl;
  wire mux_803_nl;
  wire or_258_nl;
  wire mux_807_nl;
  wire or_1124_nl;
  wire mux_943_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_nor_1_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_10_nl;
  wire CACHE_UPDATE_LOOP_3_1_qif_and_1_nl;
  wire CACHE_UPDATE_LOOP_3_1_qif_and_2_nl;
  wire CACHE_UPDATE_LOOP_3_1_qif_or_1_nl;
  wire mux_814_nl;
  wire mux_813_nl;
  wire or_1136_nl;
  wire nand_49_nl;
  wire[3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_1_nl;
  wire[3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_mux_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_4_acc_241_nl;
  wire[4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_241_nl;
  wire mux_830_nl;
  wire mux_829_nl;
  wire mux_828_nl;
  wire or_1155_nl;
  wire or_1154_nl;
  wire or_1153_nl;
  wire mux_942_nl;
  wire mux_840_nl;
  wire nor_566_nl;
  wire mux_839_nl;
  wire nor_567_nl;
  wire mux_847_nl;
  wire nor_568_nl;
  wire mux_846_nl;
  wire mux_845_nl;
  wire mux_844_nl;
  wire mux_843_nl;
  wire and_958_nl;
  wire mux_842_nl;
  wire mux_841_nl;
  wire nand_51_nl;
  wire mux_849_nl;
  wire mux_838_nl;
  wire or_1162_nl;
  wire mux_837_nl;
  wire or_1161_nl;
  wire mux_836_nl;
  wire nand_50_nl;
  wire mux_835_nl;
  wire mux_834_nl;
  wire mux_833_nl;
  wire or_1158_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_6_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_8_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_or_nl;
  wire[1:0] mux1h_4_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_and_2_nl;
  wire or_1576_nl;
  wire mux_861_nl;
  wire nor_571_nl;
  wire mux_860_nl;
  wire or_1176_nl;
  wire mux_859_nl;
  wire or_1175_nl;
  wire or_1174_nl;
  wire and_961_nl;
  wire mux_858_nl;
  wire nor_570_nl;
  wire mux_857_nl;
  wire mux_856_nl;
  wire mux_855_nl;
  wire mux_854_nl;
  wire and_960_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_k_mux1h_5_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_k_mux1h_10_nl;
  wire[1:0] mux1h_5_nl;
  wire[1:0] GEMM_3D_FLOAT_LOOP_4_acc_22_nl;
  wire[2:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_22_nl;
  wire or_1569_nl;
  wire mux_nl;
  wire or_1575_nl;
  wire nor_910_nl;
  wire mux_867_nl;
  wire[3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_2_nl;
  wire[3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_mux_nl;
  wire mux_822_nl;
  wire mux_821_nl;
  wire mux_820_nl;
  wire mux_819_nl;
  wire mux_818_nl;
  wire mux_817_nl;
  wire mux_816_nl;
  wire or_1141_nl;
  wire mux_815_nl;
  wire or_1139_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_2_nl;
  wire and_710_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_1_or_2_nl;
  wire mux_953_nl;
  wire mux_952_nl;
  wire nor_597_nl;
  wire mux_951_nl;
  wire and_711_nl;
  wire mux_950_nl;
  wire mux_949_nl;
  wire mux_948_nl;
  wire nor_598_nl;
  wire nor_599_nl;
  wire mux_947_nl;
  wire or_1280_nl;
  wire or_1279_nl;
  wire or_1358_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_5_nl;
  wire mux_966_nl;
  wire mux_965_nl;
  wire mux_964_nl;
  wire mux_963_nl;
  wire nand_241_nl;
  wire mux_962_nl;
  wire or_1293_nl;
  wire mux_961_nl;
  wire mux_960_nl;
  wire mux_959_nl;
  wire or_1292_nl;
  wire mux_958_nl;
  wire mux_923_nl;
  wire mux_922_nl;
  wire mux_921_nl;
  wire mux_920_nl;
  wire mux_919_nl;
  wire nor_582_nl;
  wire nor_583_nl;
  wire nor_584_nl;
  wire mux_918_nl;
  wire nor_585_nl;
  wire mux_917_nl;
  wire and_969_nl;
  wire nor_586_nl;
  wire nor_587_nl;
  wire mux_940_nl;
  wire mux_939_nl;
  wire mux_938_nl;
  wire[5:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl;
  wire[6:0] nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_66_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_66_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl;
  wire[5:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_86_nl;
  wire[8:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_86_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_76_nl;
  wire[4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_76_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_92_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_92_nl;
  wire[71:0] RMS_NORM_LOOP_2_2_mul_nl;
  wire signed [92:0] nl_RMS_NORM_LOOP_2_2_mul_nl;
  wire[50:0] LINEAR_FORWARD_NO_MUL_LOOP_2_acc_11_nl;
  wire[51:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_11_nl;
  wire[48:0] LINEAR_FORWARD_NO_MUL_LOOP_2_acc_10_nl;
  wire[51:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_10_nl;
  wire[39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_acc_6_nl;
  wire[40:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_6_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_88_nl;
  wire[4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_88_nl;
  wire[5:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_90_nl;
  wire[7:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_90_nl;
  wire[46:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_7_nl;
  wire[48:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_7_nl;
  wire[41:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_5_nl;
  wire[42:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_5_nl;
  wire[4:0] CACHE_UPDATE_LOOP_3_qif_acc_4_nl;
  wire[5:0] nl_CACHE_UPDATE_LOOP_3_qif_acc_4_nl;
  wire[4:0] CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl;
  wire[5:0] nl_CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl;
  wire SOFTMAX_LOOP_4_SOFTMAX_LOOP_4_nor_nl;
  wire SOFTMAX_LOOP_4_and_1_nl;
  wire[4:0] SF_LOOP_3_acc_82_nl;
  wire[5:0] nl_SF_LOOP_3_acc_82_nl;
  wire[17:0] SF_LOOP_3_acc_39_nl;
  wire[18:0] nl_SF_LOOP_3_acc_39_nl;
  wire[23:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_1;
  wire[24:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_1;
  wire signed [59:0] nl_attention_exp_exp_half_mul_4_sgnd;
  wire[40:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_2;
  wire[41:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_2;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_3_LINEAR_FORWARD_NO_MUL_LOOP_4_3_nor_nl;
  wire mux_223_nl;
  wire nor_326_nl;
  wire mux_222_nl;
  wire nor_327_nl;
  wire mux_221_nl;
  wire nor_328_nl;
  wire and_811_nl;
  wire nor_329_nl;
  wire mux_235_nl;
  wire mux_237_nl;
  wire mux_239_nl;
  wire mux_247_nl;
  wire and_813_nl;
  wire mux_250_nl;
  wire mux_252_nl;
  wire mux_251_nl;
  wire mux_253_nl;
  wire nor_334_nl;
  wire or_473_nl;
  wire nand_136_nl;
  wire or_480_nl;
  wire or_492_nl;
  wire and_805_nl;
  wire or_582_nl;
  wire or_580_nl;
  wire mux_370_nl;
  wire nor_343_nl;
  wire nor_344_nl;
  wire nor_345_nl;
  wire nor_346_nl;
  wire mux_427_nl;
  wire mux_426_nl;
  wire nor_348_nl;
  wire mux_425_nl;
  wire nor_350_nl;
  wire nor_351_nl;
  wire mux_457_nl;
  wire nor_352_nl;
  wire and_797_nl;
  wire mux_579_nl;
  wire nor_354_nl;
  wire mux_678_nl;
  wire or_1320_nl;
  wire nand_143_nl;
  wire mux_679_nl;
  wire or_970_nl;
  wire mux_680_nl;
  wire mux_874_nl;
  wire mux_897_nl;
  wire mux_955_nl;
  wire or_810_nl;
  wire mux_209_nl;
  wire or_1324_nl;
  wire nand_157_nl;
  wire mux_441_nl;
  wire mux_440_nl;
  wire or_675_nl;
  wire mux_439_nl;
  wire mux_438_nl;
  wire nand_185_nl;
  wire or_673_nl;
  wire or_672_nl;
  wire mux_437_nl;
  wire or_671_nl;
  wire mux_436_nl;
  wire mux_435_nl;
  wire mux_434_nl;
  wire mux_433_nl;
  wire mux_432_nl;
  wire mux_431_nl;
  wire mux_430_nl;
  wire and_889_nl;
  wire or_667_nl;
  wire or_664_nl;
  wire mux_429_nl;
  wire or_663_nl;
  wire mux_428_nl;
  wire or_662_nl;
  wire or_661_nl;
  wire or_659_nl;
  wire mux_492_nl;
  wire or_1335_nl;
  wire mux_491_nl;
  wire or_718_nl;
  wire or_716_nl;
  wire or_1336_nl;
  wire mux_532_nl;
  wire nor_453_nl;
  wire mux_531_nl;
  wire nor_454_nl;
  wire mux_533_nl;
  wire or_774_nl;
  wire mux_534_nl;
  wire nor_455_nl;
  wire nor_456_nl;
  wire mux_548_nl;
  wire or_1340_nl;
  wire or_1341_nl;
  wire mux_554_nl;
  wire mux_553_nl;
  wire nand_202_nl;
  wire or_801_nl;
  wire mux_552_nl;
  wire mux_551_nl;
  wire mux_550_nl;
  wire mux_549_nl;
  wire mux_620_nl;
  wire nor_486_nl;
  wire nor_487_nl;
  wire mux_621_nl;
  wire nor_630_nl;
  wire nor_631_nl;
  wire mux_653_nl;
  wire nor_496_nl;
  wire nor_497_nl;
  wire nor_499_nl;
  wire mux_657_nl;
  wire mux_656_nl;
  wire or_952_nl;
  wire mux_655_nl;
  wire nand_211_nl;
  wire or_949_nl;
  wire or_947_nl;
  wire and_919_nl;
  wire mux_654_nl;
  wire and_918_nl;
  wire nor_498_nl;
  wire mux_692_nl;
  wire nand_216_nl;
  wire or_1348_nl;
  wire mux_715_nl;
  wire mux_721_nl;
  wire mux_725_nl;
  wire mux_724_nl;
  wire nor_520_nl;
  wire mux_723_nl;
  wire nor_521_nl;
  wire nor_522_nl;
  wire nor_523_nl;
  wire mux_722_nl;
  wire nor_519_nl;
  wire and_931_nl;
  wire mux_752_nl;
  wire nor_531_nl;
  wire mux_751_nl;
  wire or_1062_nl;
  wire or_1061_nl;
  wire nor_532_nl;
  wire mux_750_nl;
  wire mux_749_nl;
  wire or_1350_nl;
  wire or_1058_nl;
  wire mux_759_nl;
  wire mux_758_nl;
  wire mux_757_nl;
  wire nor_533_nl;
  wire mux_756_nl;
  wire or_1076_nl;
  wire or_1075_nl;
  wire nor_534_nl;
  wire nor_535_nl;
  wire mux_755_nl;
  wire and_935_nl;
  wire mux_754_nl;
  wire mux_753_nl;
  wire nor_536_nl;
  wire nor_537_nl;
  wire nor_538_nl;
  wire mux_783_nl;
  wire or_1098_nl;
  wire mux_782_nl;
  wire nor_545_nl;
  wire mux_781_nl;
  wire mux_780_nl;
  wire mux_779_nl;
  wire mux_778_nl;
  wire nor_544_nl;
  wire mux_777_nl;
  wire or_1095_nl;
  wire mux_776_nl;
  wire mux_775_nl;
  wire mux_774_nl;
  wire and_942_nl;
  wire and_943_nl;
  wire mux_772_nl;
  wire nor_547_nl;
  wire nor_548_nl;
  wire mux_771_nl;
  wire or_1089_nl;
  wire mux_809_nl;
  wire mux_869_nl;
  wire and_nl;
  wire nor_632_nl;
  wire mux_868_nl;
  wire mux_884_nl;
  wire mux_883_nl;
  wire and_692_nl;
  wire mux_882_nl;
  wire mux_881_nl;
  wire mux_880_nl;
  wire mux_879_nl;
  wire mux_878_nl;
  wire mux_877_nl;
  wire mux_876_nl;
  wire or_1204_nl;
  wire or_1203_nl;
  wire mux_875_nl;
  wire or_1200_nl;
  wire mux_904_nl;
  wire mux_903_nl;
  wire mux_902_nl;
  wire mux_901_nl;
  wire mux_900_nl;
  wire mux_899_nl;
  wire mux_898_nl;
  wire mux_930_nl;
  wire mux_929_nl;
  wire mux_928_nl;
  wire mux_927_nl;
  wire nor_588_nl;
  wire nor_589_nl;
  wire nor_590_nl;
  wire nor_591_nl;
  wire mux_926_nl;
  wire mux_925_nl;
  wire nor_592_nl;
  wire nor_593_nl;
  wire mux_924_nl;
  wire nor_594_nl;
  wire nor_595_nl;
  wire mux_274_nl;
  wire nor_380_nl;
  wire nor_381_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_31_nl;
  wire mux_331_nl;
  wire mux_330_nl;
  wire mux_329_nl;
  wire mux_327_nl;
  wire and_868_nl;
  wire for_for_nand_nl;
  wire mux_326_nl;
  wire or_1329_nl;
  wire or_1330_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_29_nl;
  wire mux_323_nl;
  wire mux_322_nl;
  wire mux_321_nl;
  wire mux_320_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_28_nl;
  wire mux_319_nl;
  wire mux_318_nl;
  wire or_528_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_nand_1_nl;
  wire mux_317_nl;
  wire and_2251_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_nand_nl;
  wire mux_312_nl;
  wire nor_386_nl;
  wire nor_387_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_25_nl;
  wire mux_309_nl;
  wire mux_308_nl;
  wire nor_384_nl;
  wire mux_307_nl;
  wire mux_306_nl;
  wire or_518_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_23_nl;
  wire mux_300_nl;
  wire mux_299_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_22_nl;
  wire mux_296_nl;
  wire mux_295_nl;
  wire or_500_nl;
  wire mux_294_nl;
  wire mux_293_nl;
  wire or_497_nl;
  wire or_495_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_21_nl;
  wire mux_292_nl;
  wire mux_290_nl;
  wire mux_289_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_2_nand_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_nand_nl;
  wire CACHE_UPDATE_LOOP_3_1_nand_nl;
  wire GEMM_3D_FLOAT_LOOP_4_nand_1_nl;
  wire mux_281_nl;
  wire mux_280_nl;
  wire nand_168_nl;
  wire mux_279_nl;
  wire GEMM_3D_FLOAT_LOOP_4_nand_nl;
  wire mux_276_nl;
  wire mux_275_nl;
  wire or_469_nl;
  wire or_468_nl;
  wire SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_nand_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_5_nl;
  wire mux_271_nl;
  wire mux_270_nl;
  wire mux_269_nl;
  wire nand_167_nl;
  wire mux_268_nl;
  wire or_453_nl;
  wire ATTN_2D_LOOP_3_nand_nl;
  wire mux_267_nl;
  wire nor_375_nl;
  wire nor_376_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_nand_1_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_nand_nl;
  wire[2:0] for_for_and_1_nl;
  wire[2:0] for_for_mux1h_1_nl;
  wire for_for_not_1_nl;
  wire[3:0] for_for_and_2_nl;
  wire[3:0] for_for_mux1h_5_nl;
  wire for_for_not_2_nl;
  wire[1:0] for_for_or_2_nl;
  wire[1:0] for_for_and_3_nl;
  wire[1:0] for_for_mux1h_6_nl;
  wire for_for_nor_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_and_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_3_mux_nl;
  wire not_2250_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_and_1_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_3_mux_1_nl;
  wire not_2251_nl;
  wire INIT_2D_MEM_LOOP_2_3_or_nl;
  wire mux_325_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_or_3_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_or_4_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_and_7_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_and_8_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_mux1h_4_nl;
  wire[3:0] QUANTIZE_ACTIVATION_LOOP_5_mux1h_7_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_or_2_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_and_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_mux1h_9_nl;
  wire not_2240_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_2_mux_4_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_2_mux_7_nl;
  wire not_2249_nl;
  wire mux_311_nl;
  wire nor_385_nl;
  wire and_867_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_mux1h_2_nl;
  wire INIT_2D_MEM_LOOP_2_mux1h_5_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_mux1h_7_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_2_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_2_mux_2_nl;
  wire not_2247_nl;
  wire INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_3_nl;
  wire INIT_2D_MEM_LOOP_2_2_mux_3_nl;
  wire[14:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_6_nl;
  wire[14:0] INIT_2D_MEM_LOOP_2_2_mux_6_nl;
  wire not_2268_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_mux1h_3_nl;
  wire INIT_2D_MEM_LOOP_2_1_mux1h_7_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_mux1h_8_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_2_mux_nl;
  wire not_2245_nl;
  wire INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_1_nl;
  wire INIT_2D_MEM_LOOP_2_2_mux_1_nl;
  wire[14:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_5_nl;
  wire[14:0] INIT_2D_MEM_LOOP_2_2_mux_5_nl;
  wire not_2267_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_nl;
  wire INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_1_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_2_nl;
  wire[2:0] RESHAPE_2D_TO_3D_LOOP_3_mux1h_1_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_mux1h_5_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_mux1h_3_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_mux1h_4_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_or_nl;
  wire[2:0] RESHAPE_2D_TO_3D_LOOP_3_RESHAPE_2D_TO_3D_LOOP_3_mux_nl;
  wire[2:0] RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_1_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_6_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_3_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_5_nl;
  wire[1:0] RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_nl;
  wire[3:0] RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_mux_nl;
  wire RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_mux_1_nl;
  wire[55:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl;
  wire[56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl;
  wire[55:0] APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_nl;
  wire signed [56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_4_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_5_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_16_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_6_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_1_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_2_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl;
  wire[55:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl;
  wire[56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl;
  wire[55:0] APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_nl;
  wire signed [56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_1_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_3_nl;
  wire CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nand_nl;
  wire[3:0] CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_nl;
  wire CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_1_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_4_nl;
  wire CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_2_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_3_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_5_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux_1_nl;
  wire[23:0] CACHE_UPDATE_LOOP_3_1_mux_2_nl;
  wire[14:0] CACHE_UPDATE_LOOP_3_1_mux_3_nl;
  wire[3:0] CACHE_UPDATE_LOOP_3_1_mux1h_1_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux1h_3_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux1h_7_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux1h_5_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux1h_4_nl;
  wire CACHE_UPDATE_LOOP_3_1_or_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_2_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_and_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_1_nl;
  wire[1:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_3_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_12_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_4_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_19_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_5_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_27_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_6_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_32_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_37_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_7_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_40_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_8_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_9_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_47_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_10_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_51_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_55_nl;
  wire[37:0] SF_LOOP_3_acc_8_nl;
  wire[38:0] nl_SF_LOOP_3_acc_8_nl;
  wire and_289_nl;
  wire and_290_nl;
  wire[2:0] mux1h_6_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_35_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_24_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_11_nl;
  wire GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_or_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_13_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_1_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_2_nl;
  wire[1:0] GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_3_nl;
  wire[1:0] GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_5_nl;
  wire[2:0] ATTN_2D_LOOP_3_and_nl;
  wire[2:0] ATTN_2D_LOOP_3_mux1h_1_nl;
  wire ATTN_2D_LOOP_3_not_1_nl;
  wire ATTN_2D_LOOP_3_and_1_nl;
  wire ATTN_2D_LOOP_3_mux1h_4_nl;
  wire ATTN_2D_LOOP_3_and_3_nl;
  wire ATTN_2D_LOOP_3_mux1h_6_nl;
  wire[1:0] ATTN_2D_LOOP_3_and_4_nl;
  wire[1:0] ATTN_2D_LOOP_3_mux1h_7_nl;
  wire ATTN_2D_LOOP_3_not_3_nl;
  wire[1:0] ATTN_2D_LOOP_3_or_2_nl;
  wire[1:0] ATTN_2D_LOOP_3_and_2_nl;
  wire[1:0] ATTN_2D_LOOP_3_mux1h_5_nl;
  wire ATTN_2D_LOOP_3_nor_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_or_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_or_1_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_and_8_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_and_9_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_QUANTIZE_ACTIVATION_LOOP_5_1_or_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_QUANTIZE_ACTIVATION_LOOP_5_1_or_1_nl;
  wire[39:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl;
  wire[40:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl;
  wire[39:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl;
  wire[40:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl;
  wire[10:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl;
  wire[11:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_30_nl;
  wire[10:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_30_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_nl;
  wire[24:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_nl;
  wire[25:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_nl;
  wire[22:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl;
  wire[23:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl;
  wire[20:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl;
  wire[21:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl;
  wire[18:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl;
  wire[19:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl;
  wire[16:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_nl;
  wire[17:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_nl;
  wire[14:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl;
  wire[15:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl;
  wire[12:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl;
  wire[13:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl;
  wire[10:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl;
  wire[11:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_nl;
  wire[10:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_nand_nl;
  wire mux_981_nl;
  wire nor_687_nl;
  wire nor_688_nl;
  wire mux_984_nl;
  wire mux_983_nl;
  wire mux_982_nl;
  wire nor_697_nl;
  wire mux_985_nl;
  wire nor_698_nl;
  wire nor_699_nl;
  wire mux_986_nl;
  wire nor_702_nl;
  wire nor_703_nl;
  wire mux_988_nl;
  wire mux_987_nl;
  wire nor_708_nl;
  wire mux_989_nl;
  wire or_nl;
  wire or_1544_nl;
  wire mux_990_nl;
  wire or_1545_nl;
  wire mux_992_nl;
  wire nor_727_nl;
  wire and_2253_nl;
  wire nor_728_nl;
  wire nor_737_nl;
  wire mux_999_nl;
  wire mux_998_nl;
  wire or_1421_nl;
  wire or_1420_nl;
  wire mux_997_nl;
  wire or_1418_nl;
  wire or_1416_nl;
  wire nor_738_nl;
  wire mux_996_nl;
  wire or_1413_nl;
  wire mux_995_nl;
  wire or_1411_nl;
  wire or_1410_nl;
  wire mux_1003_nl;
  wire or_1549_nl;
  wire mux_1002_nl;
  wire nand_263_nl;
  wire or_1550_nl;
  wire mux_1001_nl;
  wire mux_1016_nl;
  wire mux_1015_nl;
  wire mux_1014_nl;
  wire or_1449_nl;
  wire mux_1013_nl;
  wire or_1448_nl;
  wire mux_1012_nl;
  wire or_1445_nl;
  wire or_1443_nl;
  wire mux_1011_nl;
  wire or_1441_nl;
  wire mux_1021_nl;
  wire mux_1020_nl;
  wire nor_784_nl;
  wire mux_1019_nl;
  wire nor_785_nl;
  wire and_754_nl;
  wire mux_1018_nl;
  wire nor_786_nl;
  wire nor_787_nl;
  wire mux_1024_nl;
  wire and_2257_nl;
  wire mux_1023_nl;
  wire nor_789_nl;
  wire nor_790_nl;
  wire mux_1022_nl;
  wire nor_791_nl;
  wire nor_792_nl;
  wire mux_1052_nl;
  wire nor_811_nl;
  wire nor_812_nl;
  wire mux_1063_nl;
  wire mux_1062_nl;
  wire nor_832_nl;
  wire nor_833_nl;
  wire mux_1061_nl;
  wire mux_1060_nl;
  wire nor_835_nl;
  wire mux_1064_nl;
  wire mux_1074_nl;
  wire mux_1073_nl;
  wire mux_1072_nl;
  wire mux_1071_nl;
  wire mux_1034_nl;
  wire nor_886_nl;
  wire nor_887_nl;
  wire mux_1039_nl;
  wire mux_1038_nl;
  wire mux_1037_nl;
  wire nor_890_nl;
  wire nor_891_nl;
  wire mux_1036_nl;
  wire and_2263_nl;
  wire mux_1035_nl;
  wire and_2262_nl;
  wire nor_888_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_1_nl;
  wire[30:0] SF_LOOP_3_acc_55_nl;
  wire[31:0] nl_SF_LOOP_3_acc_55_nl;
  wire[9:0] SF_LOOP_3_acc_80_nl;
  wire[10:0] nl_SF_LOOP_3_acc_80_nl;
  wire[2:0] SF_LOOP_3_acc_73_nl;
  wire[3:0] nl_SF_LOOP_3_acc_73_nl;
  wire[4:0] SF_LOOP_3_acc_76_nl;
  wire[5:0] nl_SF_LOOP_3_acc_76_nl;
  wire[8:0] SF_LOOP_3_acc_81_nl;
  wire[9:0] nl_SF_LOOP_3_acc_81_nl;
  wire[2:0] SF_LOOP_3_acc_74_nl;
  wire[3:0] nl_SF_LOOP_3_acc_74_nl;
  wire[3:0] SF_LOOP_3_acc_75_nl;
  wire[4:0] nl_SF_LOOP_3_acc_75_nl;
  wire[2:0] SF_LOOP_3_acc_78_nl;
  wire[3:0] nl_SF_LOOP_3_acc_78_nl;
  wire[2:0] SF_LOOP_3_acc_79_nl;
  wire[3:0] nl_SF_LOOP_3_acc_79_nl;
  wire[13:0] SF_LOOP_3_acc_68_nl;
  wire[14:0] nl_SF_LOOP_3_acc_68_nl;
  wire[5:0] SF_LOOP_3_acc_69_nl;
  wire[6:0] nl_SF_LOOP_3_acc_69_nl;
  wire[3:0] SF_LOOP_3_acc_70_nl;
  wire[4:0] nl_SF_LOOP_3_acc_70_nl;
  wire[3:0] SF_LOOP_3_acc_71_nl;
  wire[4:0] nl_SF_LOOP_3_acc_71_nl;
  wire[9:0] SF_LOOP_3_acc_62_nl;
  wire[10:0] nl_SF_LOOP_3_acc_62_nl;
  wire[13:0] SF_LOOP_3_acc_66_nl;
  wire[15:0] nl_SF_LOOP_3_acc_66_nl;
  wire[6:0] SF_LOOP_3_acc_64_nl;
  wire[7:0] nl_SF_LOOP_3_acc_64_nl;
  wire[16:0] SF_LOOP_3_acc_12_nl;
  wire[18:0] nl_SF_LOOP_3_acc_12_nl;
  wire[1:0] SF_LOOP_3_mux_70_nl;
  wire[1:0] SF_LOOP_3_mux_71_nl;
  wire[1:0] SF_LOOP_3_mux_72_nl;
  wire[3:0] SF_LOOP_3_SF_LOOP_3_and_10_nl;
  wire SF_LOOP_3_mux_73_nl;
  wire SF_LOOP_3_SF_LOOP_3_and_11_nl;
  wire SF_LOOP_3_SF_LOOP_3_and_12_nl;
  wire[1:0] SF_LOOP_3_mux_74_nl;
  wire[1:0] SF_LOOP_3_mux_75_nl;
  wire[1:0] SF_LOOP_3_mux_76_nl;
  wire[1:0] SF_LOOP_3_mux_77_nl;
  wire[7:0] SF_LOOP_3_SF_LOOP_3_and_13_nl;
  wire[1:0] SF_LOOP_3_mux_78_nl;
  wire[1:0] SF_LOOP_3_mux_79_nl;
  wire[7:0] SF_LOOP_3_SF_LOOP_3_or_38_nl;
  wire not_3341_nl;
  wire[1:0] SF_LOOP_3_mux_80_nl;
  wire[1:0] SF_LOOP_3_SF_LOOP_3_or_39_nl;
  wire not_3342_nl;
  wire[1:0] SF_LOOP_3_mux_81_nl;
  wire[9:0] SF_LOOP_3_SF_LOOP_3_or_40_nl;
  wire not_3343_nl;
  wire[1:0] SF_LOOP_3_mux_82_nl;
  wire[1:0] SF_LOOP_3_mux_83_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_41_nl;
  wire[1:0] SF_LOOP_3_mux_84_nl;
  wire[1:0] SF_LOOP_3_SF_LOOP_3_or_42_nl;
  wire not_3345_nl;
  wire[1:0] SF_LOOP_3_mux_85_nl;
  wire[7:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_18_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_126_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_19_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_127_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_20_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_128_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_21_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_129_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_22_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_130_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_23_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_131_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_24_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_132_nl;
  wire[20:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_133_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_134_nl;
  wire[30:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_12_nl;
  wire[30:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_94_nl;
  wire[31:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_94_nl;
  wire[28:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_95_nl;
  wire[29:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_95_nl;
  wire[26:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_96_nl;
  wire[27:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_96_nl;
  wire[24:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_97_nl;
  wire[25:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_97_nl;
  wire[22:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_98_nl;
  wire[23:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_98_nl;
  wire[20:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_99_nl;
  wire[21:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_99_nl;
  wire[29:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_2_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_2_nl;
  wire[8:0] acc_5_nl;
  wire[9:0] nl_acc_5_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux_20_nl;
  wire[10:0] acc_6_nl;
  wire[11:0] nl_acc_6_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_13_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_13_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_14_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_14_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_15_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_15_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_16_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_38_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux_21_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_39_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_18_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_3_nl;
  wire[6:0] operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_16_nl;
  wire[6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_nl;
  wire[7:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_nl;
  wire[1:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_mux_4_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_17_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_17_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_18_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_18_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_19_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_19_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_20_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_4_nl;
  wire not_3348_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_21_nl;
  wire[3:0] operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_22_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_5_nl;
  wire[13:0] operator_40_24_true_AC_TRN_AC_WRAP_2_and_40_nl;
  wire[13:0] operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_89_nl;
  wire not_3350_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_90_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_41_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_91_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_92_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_42_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_93_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_94_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_43_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_95_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_96_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_44_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_97_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_98_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_45_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_99_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_100_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_46_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_101_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_102_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_47_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_103_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_104_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_48_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_105_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_106_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_49_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_107_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_108_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_50_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_109_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_110_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_51_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_111_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_112_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_52_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_113_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_114_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_53_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_115_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_116_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_117_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_54_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_118_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_119_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_55_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_120_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_121_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_56_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_122_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_123_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_57_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_124_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_125_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_58_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_126_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_127_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_59_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_128_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_129_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_60_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_130_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_131_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_61_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_132_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_133_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_62_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_134_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_135_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_63_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_136_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_137_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_64_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_138_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_139_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_65_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_140_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_141_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_66_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_142_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_143_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_67_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_144_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_145_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_68_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_146_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_147_nl;
  wire[8:0] RMS_NORM_LOOP_1_2_and_5_nl;
  wire[8:0] RMS_NORM_LOOP_1_2_mux1h_8_nl;
  wire not_3364_nl;
  wire[30:0] RMS_NORM_LOOP_1_2_mux1h_9_nl;
  wire[34:0] RMS_NORM_LOOP_1_2_and_6_nl;
  wire[34:0] RMS_NORM_LOOP_1_2_mux1h_10_nl;
  wire RMS_NORM_LOOP_1_2_and_7_nl;
  wire RMS_NORM_LOOP_1_2_mux1h_11_nl;
  wire[2:0] RMS_NORM_LOOP_1_2_and_8_nl;
  wire[2:0] RMS_NORM_LOOP_1_2_mux1h_12_nl;
  wire RMS_NORM_LOOP_1_2_and_9_nl;
  wire RMS_NORM_LOOP_1_2_mux1h_13_nl;
  wire[2:0] RMS_NORM_LOOP_1_2_mux1h_14_nl;
  wire[8:0] RMS_NORM_LOOP_1_2_mux1h_15_nl;
  wire[39:0] RMS_NORM_LOOP_1_1_mux1h_10_nl;
  wire RMS_NORM_LOOP_1_1_or_10_nl;
  wire[79:0] RMS_NORM_LOOP_1_1_mux1h_11_nl;
  wire[23:0] attention_abs_2_qif_mux1h_2_nl;
  wire[14:0] attention_abs_2_qif_mux1h_3_nl;
  wire[4:0] acc_12_nl;
  wire[5:0] nl_acc_12_nl;
  wire[2:0] CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_3_nl;
  wire CACHE_UPDATE_LOOP_3_1_or_7_nl;
  wire CACHE_UPDATE_LOOP_3_1_or_8_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux1h_9_nl;
  wire CACHE_UPDATE_LOOP_3_1_or_9_nl;
  wire CACHE_UPDATE_LOOP_3_1_mux1h_10_nl;
  wire[2:0] GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_6_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_and_2_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_mux1h_30_nl;
  wire[2:0] CACHE_UPDATE_LOOP_3_or_3_nl;
  wire[2:0] CACHE_UPDATE_LOOP_3_mux1h_7_nl;
  wire CACHE_UPDATE_LOOP_3_or_4_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_mux1h_8_nl;
  wire GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_or_2_nl;
  wire[1:0] GEMM_3D_FLOAT_LOOP_4_mux1h_42_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_25_nl;
  wire[1:0] mux_1087_nl;
  wire or_1577_nl;
  wire[4:0] acc_16_nl;
  wire[5:0] nl_acc_16_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_4_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_22_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nor_2_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_33_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_104_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_104_nl;
  wire[3:0] acc_17_nl;
  wire[4:0] nl_acc_17_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_26_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_43_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_44_nl;
  wire GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_nor_1_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_27_nl;
  wire[9:0] acc_18_nl;
  wire[10:0] nl_acc_18_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_5_nl;
  wire RMS_NORM_LOOP_1_1_nor_5_nl;
  wire[3:0] RMS_NORM_LOOP_1_1_and_2_nl;
  wire[3:0] RMS_NORM_LOOP_1_1_mux1h_12_nl;
  wire not_3368_nl;
  wire RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_or_1_nl;
  wire RMS_NORM_LOOP_1_1_mux_6_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_mux1h_13_nl;
  wire RMS_NORM_LOOP_1_1_or_11_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_6_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_mux_7_nl;
  wire RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_7_nl;
  wire RMS_NORM_LOOP_1_1_mux_8_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_8_nl;
  wire RMS_NORM_LOOP_1_1_nor_7_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_9_nl;
  wire[1:0] RMS_NORM_LOOP_1_1_mux_9_nl;
  wire not_3370_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_45_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_46_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_28_nl;
  wire[6:0] acc_20_nl;
  wire[7:0] nl_acc_20_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_20_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_49_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_148_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_50_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_149_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_51_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_150_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_71_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_151_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_52_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux_22_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_2_and_73_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_2_mux_23_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_nor_31_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_and_74_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_152_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_or_53_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_153_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_3_or_12_nl;
  wire[1:0] mux_1088_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_or_13_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_24_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_5_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_or_14_nl;
  wire[4:0] acc_22_nl;
  wire[5:0] nl_acc_22_nl;
  wire[1:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_15_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_61_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_16_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_and_4_nl;
  wire[1:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_17_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_18_nl;
  wire[4:0] acc_23_nl;
  wire[5:0] nl_acc_23_nl;
  wire SF_LOOP_3_mux1h_31_nl;
  wire[1:0] SF_LOOP_3_mux1h_32_nl;
  wire SF_LOOP_3_or_15_nl;
  wire SF_LOOP_3_mux1h_33_nl;
  wire SF_LOOP_3_mux1h_34_nl;
  wire SF_LOOP_3_mux1h_35_nl;
  wire[4:0] acc_24_nl;
  wire[5:0] nl_acc_24_nl;
  wire SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_and_2_nl;
  wire[1:0] SF_LOOP_3_SF_LOOP_3_mux_6_nl;
  wire SF_LOOP_3_and_10_nl;
  wire SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_and_3_nl;
  wire[1:0] SF_LOOP_3_SF_LOOP_3_mux_7_nl;
  wire SF_LOOP_3_SF_LOOP_3_and_14_nl;
  wire[1:0] SF_LOOP_3_SF_LOOP_3_or_43_nl;
  wire[1:0] SF_LOOP_3_mux_86_nl;
  wire[1:0] SF_LOOP_3_mux1h_36_nl;
  wire SF_LOOP_3_or_16_nl;
  wire[3:0] acc_26_nl;
  wire[4:0] nl_acc_26_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_25_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_136_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_105_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_105_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nor_3_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_34_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_106_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_106_nl;
  wire[9:0] acc_27_nl;
  wire[10:0] nl_acc_27_nl;
  wire[1:0] for_for_for_for_and_6_nl;
  wire for_for_nor_5_nl;
  wire[1:0] for_for_mux1h_10_nl;
  wire for_for_for_for_and_7_nl;
  wire for_for_mux_5_nl;
  wire[1:0] for_for_for_for_and_8_nl;
  wire[1:0] for_for_mux_6_nl;
  wire not_3376_nl;
  wire[1:0] for_for_for_for_and_9_nl;
  wire[1:0] for_for_mux_7_nl;
  wire not_3377_nl;
  wire for_for_or_8_nl;
  wire[3:0] for_for_for_for_and_10_nl;
  wire[3:0] for_for_mux_8_nl;
  wire not_3378_nl;
  wire for_for_for_for_and_11_nl;
  wire for_for_for_for_or_1_nl;
  wire for_for_mux_9_nl;
  wire[2:0] LINEAR_FORWARD_NO_MUL_LOOP_3_2_acc_nl;
  wire[3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_3_2_acc_nl;
  wire[1:0] LINEAR_FORWARD_NO_MUL_LOOP_3_2_mux1h_2_nl;
  wire and_2309_nl;
  wire mux_1090_nl;
  wire nor_913_nl;
  wire mux_1091_nl;
  wire nor_914_nl;
  wire nor_915_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_or_1_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_5_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_3_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_13_nl;
  wire and_2310_nl;
  wire[4:0] RMS_NORM_LOOP_2_and_9_nl;
  wire[4:0] RMS_NORM_LOOP_2_mux1h_5_nl;
  wire RMS_NORM_LOOP_2_nor_2_nl;
  wire[3:0] RMS_NORM_LOOP_2_or_3_nl;
  wire[3:0] RMS_NORM_LOOP_2_mux1h_6_nl;
  wire[1:0] RMS_NORM_LOOP_2_mux1h_7_nl;
  wire RMS_NORM_LOOP_2_or_4_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux_26_nl;
  wire and_2311_nl;
  wire[7:0] acc_32_nl;
  wire[8:0] nl_acc_32_nl;
  wire[3:0] SF_LOOP_3_mux_87_nl;
  wire SF_LOOP_3_SF_LOOP_3_or_44_nl;
  wire SF_LOOP_3_mux_88_nl;
  wire SF_LOOP_3_or_17_nl;
  wire[1:0] SF_LOOP_3_mux_89_nl;
  wire SF_LOOP_3_SF_LOOP_3_and_15_nl;
  wire SF_LOOP_3_SF_LOOP_3_and_16_nl;
  wire[1:0] SF_LOOP_3_SF_LOOP_3_and_17_nl;
  wire not_3392_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_or_19_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_mux_7_nl;
  wire mux_1092_nl;
  wire mux_1093_nl;
  wire nor_917_nl;
  wire mux_1094_nl;
  wire mux_1095_nl;
  wire nor_918_nl;
  wire nor_919_nl;
  wire mux_1096_nl;
  wire mux_1097_nl;
  wire nor_920_nl;
  wire mux_1098_nl;
  wire or_1580_nl;
  wire GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_and_2_nl;
  wire[2:0] GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mux_8_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_29_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux_27_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_and_3_nl;
  wire[2:0] GEMM_3D_FLOAT_LOOP_4_1_mux1h_31_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_or_20_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_or_21_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_mux_8_nl;
  wire[7:0] acc_37_nl;
  wire[8:0] nl_acc_37_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_or_22_nl;
  wire[40:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux_3_nl;
  wire and_2314_nl;
  wire[39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_13_nl;
  wire[2:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_14_nl;
  wire[1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_15_nl;
  wire[39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_17_nl;
  wire[39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_14_nl;
  wire[40:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_14_nl;
  wire[39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_16_nl;
  wire[1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_1_scale_not_101_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl;
  wire[3:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_5_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_6_nl;
  wire[4:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_8_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_9_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_1_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_1_nl;
  wire[3:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_8_nl;
  wire[3:0] attention_round_qelse_mux_13_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_9_nl;
  wire[2:0] attention_round_qelse_mux_14_nl;
  wire[4:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_10_nl;
  wire[4:0] attention_round_qelse_mux_15_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_11_nl;
  wire[2:0] attention_round_qelse_mux_16_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_12_nl;
  wire[1:0] attention_round_qelse_mux_17_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl;
  wire[5:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_26_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_27_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_28_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_137_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_29_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_138_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_139_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_140_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_30_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_141_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_142_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_31_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_143_nl;
  wire[27:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_144_nl;
  wire[27:0] SF_LOOP_3_acc_91_nl;
  wire[28:0] nl_SF_LOOP_3_acc_91_nl;
  wire[24:0] SF_LOOP_3_acc_92_nl;
  wire[26:0] nl_SF_LOOP_3_acc_92_nl;
  wire[23:0] SF_LOOP_3_acc_93_nl;
  wire[27:0] nl_SF_LOOP_3_acc_93_nl;
  wire SF_LOOP_3_SF_LOOP_3_nand_2_nl;
  wire SF_LOOP_3_and_11_nl;
  wire[41:0] acc_49_nl;
  wire[42:0] nl_acc_49_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_8_nl;
  wire[8:0] QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_9_nl;
  wire[14:0] QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_10_nl;
  wire[14:0] QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_11_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_1_if_or_3_nl;
  wire[39:0] QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_12_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_1_attention_abs_6_nand_1_nl;
  wire[38:0] attention_abs_6_mux_3_nl;
  wire[40:0] attention_max_attn_fixed_t_acc_nl;
  wire[41:0] nl_attention_max_attn_fixed_t_acc_nl;
  wire attention_max_attn_fixed_t_mux1h_3_nl;
  wire[23:0] attention_max_attn_fixed_t_mux1h_4_nl;
  wire[14:0] attention_max_attn_fixed_t_mux1h_5_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_19_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_35_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_36_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_20_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_37_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_38_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_21_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_39_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_40_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_22_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_41_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_42_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_23_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_43_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_44_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_24_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_45_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_46_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_25_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_47_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_48_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_26_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_49_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_50_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_27_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_51_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_52_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_28_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_53_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_54_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_29_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_55_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_56_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_30_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_57_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_58_nl;
  wire[27:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_59_nl;
  wire[27:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_114_nl;
  wire[30:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_114_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_135_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_100_nl;
  wire[20:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_100_nl;
  wire[17:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_101_nl;
  wire[18:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_101_nl;
  wire[15:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_102_nl;
  wire[16:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_102_nl;
  wire[13:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_103_nl;
  wire[14:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_103_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_54_nl;
  wire[20:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_54_nl;
  wire and_2308_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_7_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux_3_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl;
  wire[8:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_LINEAR_FORWARD_NO_MUL_LOOP_5_3_and_6_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_mux_8_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl;
  wire[8:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_23_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_4_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_6_nl;
  wire not_3405_nl;
  wire[23:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_14_nl;
  wire[15:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_15_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_5_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_7_nl;
  wire not_3406_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_6_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_8_nl;
  wire[15:0] operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_7_nl;
  wire[15:0] operator_40_24_true_AC_TRN_AC_WRAP_mux_9_nl;
  wire not_3408_nl;
  wire[23:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_16_nl;
  wire[5:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_17_nl;
  wire[9:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_18_nl;
  wire[39:0] RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mux_1_nl;
  wire RMS_NORM_LOOP_1_1_or_12_nl;
  wire[39:0] RMS_NORM_LOOP_1_1_mux1h_14_nl;
  wire RMS_NORM_LOOP_1_1_or_13_nl;
  wire RMS_NORM_LOOP_1_1_or_14_nl;
  wire and_2319_nl;
  wire and_2320_nl;
  wire[40:0] acc_57_nl;
  wire[41:0] nl_acc_57_nl;
  wire[39:0] SOFTMAX_LOOP_4_x_mux_4_nl;
  wire SOFTMAX_LOOP_4_x_SOFTMAX_LOOP_4_x_nand_1_nl;
  wire SOFTMAX_LOOP_4_x_mux_5_nl;
  wire[23:0] SOFTMAX_LOOP_4_x_mux_6_nl;
  wire[14:0] SOFTMAX_LOOP_4_x_mux_7_nl;
  wire[39:0] GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mux_9_nl;
  wire GEMM_3D_FLOAT_LOOP_4_or_30_nl;
  wire mux_1099_nl;
  wire mux_1100_nl;
  wire nor_921_nl;
  wire nor_923_nl;
  wire[39:0] GEMM_3D_FLOAT_LOOP_4_mux_28_nl;
  wire[39:0] GEMM_3D_FLOAT_LOOP_4_mux1h_47_nl;
  wire[39:0] GEMM_3D_FLOAT_LOOP_4_acc_255_nl;
  wire[40:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_255_nl;
  wire GEMM_3D_FLOAT_LOOP_4_mux1h_48_nl;
  wire[23:0] GEMM_3D_FLOAT_LOOP_4_mux1h_49_nl;
  wire[14:0] GEMM_3D_FLOAT_LOOP_4_mux1h_50_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [55:0] nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a;
  assign nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a = {SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55
      , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_31 , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_30_16
      , 16'b0000000000000000};
  wire [39:0] nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b;
  assign nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b = {SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39
      , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_36 , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_35_15
      , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_14_0};
  wire [71:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a
      = {LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_70_68
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_67_47
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_46_32
      , 32'b00000000000000000000000000000000};
  wire [59:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b
      = {LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_58
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_57_39
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_18
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_17_16
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_15
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_14_2
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_1_0};
  wire [71:0] nl_rms_norm_384_div_cmp_a;
  assign nl_rms_norm_384_div_cmp_a = {rms_norm_384_div_cmp_a_71 , rms_norm_384_div_cmp_a_70_47
      , rms_norm_384_div_cmp_a_46_32 , 32'b00000000000000000000000000000000};
  wire [60:0] nl_rms_norm_384_div_cmp_b;
  assign nl_rms_norm_384_div_cmp_b = {rms_norm_384_div_cmp_b_60 , rms_norm_384_div_cmp_b_59_39
      , rms_norm_384_div_cmp_b_38_20 , rms_norm_384_div_cmp_b_19_16 , rms_norm_384_div_cmp_b_15
      , rms_norm_384_div_cmp_b_14_5 , rms_norm_384_div_cmp_b_4_1 , rms_norm_384_div_cmp_b_0};
  wire [39:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a = {1'b0, signext_39_33({reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd
      , 15'b000000000000000 , reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1
      , 16'b0000000000000000})};
  wire [39:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b = {operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39
      , operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30 , operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_15
      , operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_14_0};
  wire[2:0] CACHE_UPDATE_LOOP_3_qif_acc_nl;
  wire[3:0] nl_CACHE_UPDATE_LOOP_3_qif_acc_nl;
  wire [10:0] nl_CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg_addr;
  assign nl_CACHE_UPDATE_LOOP_3_qif_acc_nl = conv_s2u_2_3(CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1[5:4])
      + ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1});
  assign CACHE_UPDATE_LOOP_3_qif_acc_nl = nl_CACHE_UPDATE_LOOP_3_qif_acc_nl[2:0];
  assign nl_CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg_addr = {CACHE_UPDATE_LOOP_3_qif_acc_nl
      , (CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1[3:0]) , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  wire [9:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg_addr;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg_addr
      = {(z_out_22[4:0]) , (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd[0]) , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2};
  wire [9:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg_addr;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg_addr
      = {(z_out_22[4:0]) , (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd[0]) , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2};
  wire[2:0] CACHE_UPDATE_LOOP_3_1_qif_acc_nl;
  wire[3:0] nl_CACHE_UPDATE_LOOP_3_1_qif_acc_nl;
  wire [10:0] nl_CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg_addr;
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_acc_nl = conv_s2u_2_3(CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1[5:4])
      + GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0;
  assign CACHE_UPDATE_LOOP_3_1_qif_acc_nl = nl_CACHE_UPDATE_LOOP_3_1_qif_acc_nl[2:0];
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg_addr = {CACHE_UPDATE_LOOP_3_1_qif_acc_nl
      , (CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1[3:0]) , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2};
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg_addr
      = {(z_out_6[8:0]) , (SF_LOOP_3_acc_45_itm_8_0[6:0])};
  wire[8:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl;
  wire[9:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl;
  wire[6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl;
  wire[7:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl;
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl = ({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd
      , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 , APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp})
      + conv_u2u_2_7(reg_SF_LOOP_3_acc_38_1_ftd_2[8:7]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl[6:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl = conv_u2u_7_9(LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl)
      + conv_u2u_8_9({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp , 1'b0});
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl[8:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg_addr
      = {LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl , (reg_SF_LOOP_3_acc_38_1_ftd_2[6:0])};
  wire [3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_rg_s;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_rg_s = {1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_dfm_1_0_1
      , 1'b0};
  wire [3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_rg_s;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_rg_s = {1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_5_2_l_2_0_lpi_3_dfm_1_0_1
      , 1'b0};
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg_addr
      = {(z_out_6[8:0]) , (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[6:0])};
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg_addr
      = {(z_out_7[8:0]) , (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[6:0])};
  wire [3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_rg_s;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_rg_s = {1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_5_l_2_0_lpi_3_dfm_1_0_1
      , 1'b0};
  wire [3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_rg_s;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_rg_s = {1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1
      , 1'b0};
  wire [31:0] nl_dut_core_strm_out_rsci_inst_strm_out_rsci_idat;
  assign nl_dut_core_strm_out_rsci_inst_strm_out_rsci_idat = {strm_out_rsci_idat_31_2
      , 2'b00};
  wire  nl_dut_core_core_fsm_inst_attention_sqrt_for_C_10_tr0;
  assign nl_dut_core_core_fsm_inst_attention_sqrt_for_C_10_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0 = APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2[2];
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0 = ~ (z_out_31[2]);
  wire  nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0 = z_out_37[3];
  wire  nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0 = ~ (z_out_31[2]);
  wire  nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0 = z_out_35[3];
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_C_50_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_C_50_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_C_0_tr0 = z_out_35[3];
  wire  nl_dut_core_core_fsm_inst_SF_LOOP_3_C_3_tr0;
  assign nl_dut_core_core_fsm_inst_SF_LOOP_3_C_3_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SF_LOOP_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_SF_LOOP_1_C_0_tr0 = z_out_35[3];
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_3_C_1_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_3_C_1_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_4_C_5_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_4_C_5_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_5_C_16_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_5_C_16_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_1_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_1_C_2_tr0 = z_out_35[3];
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0 = z_out_35[3];
  wire  nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_3_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_3_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_2_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_2_C_0_tr0 = z_out_37[3];
  wire  nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_1_2_C_1_tr0;
  assign nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_1_2_C_1_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_attention_sqrt_1_for_C_10_tr0;
  assign nl_dut_core_core_fsm_inst_attention_sqrt_1_for_C_10_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0 = APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2[2];
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0 = ~ (z_out_31[2]);
  wire  nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0;
  assign nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_for_1_for_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_for_1_for_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  mgc_div #(.width_a(32'sd56),
  .width_b(32'sd40),
  .signd(32'sd1)) SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp (
      .a(nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a[55:0]),
      .b(nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b[39:0]),
      .z(SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z)
    );
  mgc_div #(.width_a(32'sd72),
  .width_b(32'sd60),
  .signd(32'sd1)) LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp
      (
      .a(nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a[71:0]),
      .b(nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b[59:0]),
      .z(LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z)
    );
  mgc_div #(.width_a(32'sd72),
  .width_b(32'sd61),
  .signd(32'sd1)) rms_norm_384_div_cmp (
      .a(nl_rms_norm_384_div_cmp_a[71:0]),
      .b(nl_rms_norm_384_div_cmp_b[60:0]),
      .z(rms_norm_384_div_cmp_z)
    );
  mgc_div #(.width_a(32'sd40),
  .width_b(32'sd40),
  .signd(32'sd1)) operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp (
      .a(nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a[39:0]),
      .b(nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b[39:0]),
      .z(operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z)
    );
  dutmgc_rom_33_1920_40_1_60  CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg
      (
      .addr(nl_CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg_addr[10:0]),
      .data_out(CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm)
    );
  dutmgc_rom_34_960_17_1_60  APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg
      (
      .addr(nl_APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg_addr[9:0]),
      .data_out(APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm)
    );
  dutmgc_rom_35_960_17_1_60  APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg
      (
      .addr(nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg_addr[9:0]),
      .data_out(APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm)
    );
  dutmgc_rom_36_1920_40_1_60  CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg
      (
      .addr(nl_CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg_addr[10:0]),
      .data_out(CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_sdt)
    );
  dutmgc_rom_37_384_13_1_60  RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_rg (
      .addr(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3),
      .data_out(RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm)
    );
  dutmgc_rom_38_384_12_1_60  RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_rg (
      .addr(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3),
      .data_out(RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm)
    );
  dutmgc_rom_39_36864_8_1_60  LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm)
    );
  dutmgc_rom_40_36864_8_1_60  LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_sdt)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd7)) LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_rg (
      .a(1'b1),
      .s(nl_LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_rg_s[3:0]),
      .z(LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_itm)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd7)) LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_rg (
      .a(1'b1),
      .s(nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_rg_s[3:0]),
      .z(LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_itm)
    );
  dutmgc_rom_41_36864_8_1_60  LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm)
    );
  dutmgc_rom_42_36864_8_1_60  LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_sdt)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd7)) LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_rg (
      .a(1'b1),
      .s(nl_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_rg_s[3:0]),
      .z(LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_itm)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd1),
  .signd_a(32'sd0),
  .width_s(32'sd4),
  .width_z(32'sd7)) LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_rg (
      .a(1'b1),
      .s(nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_rg_s[3:0]),
      .z(LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_itm)
    );
  dut_core_strm_in_rsci dut_core_strm_in_rsci_inst (
      .strm_in_rsc_dat(strm_in_rsc_dat),
      .strm_in_rsc_vld(strm_in_rsc_vld),
      .strm_in_rsc_rdy(strm_in_rsc_rdy),
      .strm_in_rsci_oswt(reg_strm_in_rsci_iswt0_cse),
      .strm_in_rsci_wen_comp(strm_in_rsci_wen_comp),
      .strm_in_rsci_idat_mxwt(strm_in_rsci_idat_mxwt)
    );
  dut_core_strm_out_rsci dut_core_strm_out_rsci_inst (
      .strm_out_rsc_dat(strm_out_rsc_dat),
      .strm_out_rsc_vld(strm_out_rsc_vld),
      .strm_out_rsc_rdy(strm_out_rsc_rdy),
      .strm_out_rsci_oswt(reg_strm_out_rsci_iswt0_cse),
      .strm_out_rsci_wen_comp(strm_out_rsci_wen_comp),
      .strm_out_rsci_idat(nl_dut_core_strm_out_rsci_inst_strm_out_rsci_idat[31:0])
    );
  dut_core_staller dut_core_staller_inst (
      .en(en),
      .strm_in_rsci_wen_comp(strm_in_rsci_wen_comp),
      .strm_out_rsci_wen_comp(strm_out_rsci_wen_comp),
      .input_rsc_en_d_1(input_rsc_en_d_1)
    );
  dut_core_core_fsm dut_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .input_rsc_en_d_1(input_rsc_en_d_1),
      .fsm_output(fsm_output),
      .for_for_C_1_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .attention_sqrt_for_C_10_tr0(nl_dut_core_core_fsm_inst_attention_sqrt_for_C_10_tr0),
      .RMS_NORM_LOOP_2_C_3_tr0(and_dcpl_13),
      .QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_C_7_tr0),
      .QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0),
      .attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .LINEAR_FORWARD_NO_MUL_LOOP_3_C_1_tr0(and_dcpl_97),
      .LINEAR_FORWARD_NO_MUL_LOOP_2_C_56_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0(CACHE_UPDATE_LOOP_1_and_cse),
      .RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0(and_dcpl_13),
      .RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0(CACHE_UPDATE_LOOP_1_and_cse),
      .APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0(nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_6_C_2_tr0),
      .APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0(nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0),
      .CACHE_UPDATE_LOOP_3_C_2_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .CACHE_UPDATE_LOOP_2_C_0_tr0(for_for_for_for_nor_tmp),
      .CACHE_UPDATE_LOOP_1_C_0_tr0(CACHE_UPDATE_LOOP_1_and_cse),
      .TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0(nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0),
      .TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0(nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0),
      .TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0(nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0),
      .GEMM_3D_FLOAT_LOOP_3_C_50_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_C_50_tr0),
      .GEMM_3D_FLOAT_LOOP_1_C_0_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_C_0_tr0),
      .SF_LOOP_3_C_3_tr0(nl_dut_core_core_fsm_inst_SF_LOOP_3_C_3_tr0),
      .SF_LOOP_1_C_0_tr0(nl_dut_core_core_fsm_inst_SF_LOOP_1_C_0_tr0),
      .SOFTMAX_LOOP_3_C_1_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_3_C_1_tr0),
      .SOFTMAX_LOOP_4_C_5_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_4_C_5_tr0),
      .SOFTMAX_LOOP_5_C_16_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_5_C_16_tr0),
      .SOFTMAX_LOOP_1_C_2_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_1_C_2_tr0),
      .GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_1_C_7_tr0),
      .GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0),
      .ATTN_2D_LOOP_3_C_2_tr0(nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_3_C_2_tr0),
      .ATTN_2D_LOOP_2_C_0_tr0(nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_2_C_0_tr0),
      .RMS_NORM_LOOP_1_2_C_1_tr0(nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_1_2_C_1_tr0),
      .attention_sqrt_1_for_C_10_tr0(nl_dut_core_core_fsm_inst_attention_sqrt_1_for_C_10_tr0),
      .RMS_NORM_LOOP_2_2_C_3_tr0(and_dcpl_13),
      .QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_1_C_7_tr0),
      .QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0),
      .output_vinit_C_1_tr0(INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm),
      .LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0(and_dcpl_97),
      .LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0(nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29_tr0),
      .for_1_for_C_2_tr0(nl_dut_core_core_fsm_inst_for_1_for_C_2_tr0)
    );
  assign input_rsci_en_d = input_rsc_en_d_1;
  assign QUANTIZE_ACTIVATION_LOOP_1_max_val_and_1_ssc = input_rsc_en_d_1 & (RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1
      | RMS_NORM_LOOP_2_and_4_ssc_1 | RMS_NORM_LOOP_2_2_and_5_ssc_1 | and_19_cse)
      & and_dcpl_105;
  assign QUANTIZE_ACTIVATION_LOOP_1_1_max_val_and_1_ssc = input_rsc_en_d_1 & (RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1
      | RMS_NORM_LOOP_2_2_and_4_ssc_1 | RMS_NORM_LOOP_2_2_and_5_ssc_1 | and_19_cse)
      & and_dcpl_112;
  assign and_850_cse = (fsm_output[1:0]==2'b11);
  assign and_849_cse = (fsm_output[8:7]==2'b11);
  assign or_369_cse = (fsm_output[2:0]!=3'b000);
  assign nor_315_cse = ~((fsm_output[0]) | (fsm_output[2]));
  assign or_368_cse = and_850_cse | (fsm_output[7]);
  assign nand_158_cse = ~((fsm_output[6:5]==2'b11));
  assign or_1325_cse = (fsm_output[7:5]!=3'b000);
  assign nand_160_cse = ~((fsm_output[7:5]==3'b111));
  assign or_1326_cse = (fsm_output[2:1]!=2'b00);
  assign and_855_cse = (fsm_output[2:1]==2'b11);
  assign nor_236_nl = ~((fsm_output[8]) | (fsm_output[2]));
  assign or_387_nl = and_855_cse | (fsm_output[8]);
  assign and_856_nl = or_1326_cse & (fsm_output[8]);
  assign mux_218_nl = MUX_s_1_2_2(or_387_nl, and_856_nl, fsm_output[0]);
  assign mux_219_nl = MUX_s_1_2_2(nor_236_nl, mux_218_nl, fsm_output[3]);
  assign or_389_nl = (fsm_output[6]) | (fsm_output[4]) | (fsm_output[7]) | mux_219_nl;
  assign nor_367_nl = ~((fsm_output[7]) | (fsm_output[3]) | (~ (fsm_output[0])) |
      (fsm_output[1]) | (~((fsm_output[2]) & (fsm_output[8]))));
  assign and_858_nl = (fsm_output[7]) & (fsm_output[3]) & (fsm_output[1]) & (fsm_output[2])
      & (~ (fsm_output[8]));
  assign mux_217_nl = MUX_s_1_2_2(nor_367_nl, and_858_nl, fsm_output[4]);
  assign nand_13_nl = ~((fsm_output[6]) & mux_217_nl);
  assign mux_220_ssc = MUX_s_1_2_2(or_389_nl, nand_13_nl, fsm_output[5]);
  assign and_747_cse = (fsm_output[1]) & (fsm_output[3]);
  assign mux_225_nl = MUX_s_1_2_2((~ or_tmp_247), and_747_cse, fsm_output[0]);
  assign nor_311_nl = ~((fsm_output[6]) | (fsm_output[2]) | (~ (fsm_output[0])) |
      (fsm_output[1]) | (fsm_output[4]) | (fsm_output[7]) | (~ (fsm_output[8])));
  assign and_807_nl = (fsm_output[6]) & (fsm_output[2]) & (~ (fsm_output[0])) & (fsm_output[1])
      & (fsm_output[4]) & (fsm_output[7]) & (~ (fsm_output[8]));
  assign mux_189_nl = MUX_s_1_2_2(nor_311_nl, and_807_nl, fsm_output[5]);
  assign attention_sqrt_1_guess_or_1_cse = ((~ and_dcpl_149) & mux_225_nl & and_dcpl_132
      & and_dcpl_130 & and_dcpl) | ((~ and_dcpl_183) & mux_189_nl & (fsm_output[3]));
  assign attention_sqrt_1_guess_or_2_cse = and_dcpl_149 | and_dcpl_183;
  assign or_1327_cse = (fsm_output[1:0]!=2'b01);
  assign or_412_cse = (fsm_output[8:6]!=3'b100);
  assign nor_83_cse = ~((fsm_output[1:0]!=2'b10));
  assign nor_609_cse = ~((fsm_output[8:6]!=3'b000));
  assign nand_164_cse = ~((fsm_output[7:6]==2'b11));
  assign or_411_nl = (~((fsm_output[0]) | (fsm_output[1]) | (fsm_output[8]))) | (fsm_output[7:6]!=2'b00);
  assign mux_232_nl = MUX_s_1_2_2(or_412_cse, or_411_nl, fsm_output[2]);
  assign nor_606_nl = ~((fsm_output[4]) | mux_232_nl);
  assign or_408_nl = (or_1327_cse & (fsm_output[8])) | (fsm_output[7:6]!=2'b00);
  assign or_406_nl = nor_83_cse | (fsm_output[8:6]!=3'b000);
  assign mux_231_nl = MUX_s_1_2_2(or_408_nl, or_406_nl, fsm_output[2]);
  assign nor_607_nl = ~((fsm_output[4]) | mux_231_nl);
  assign mux_233_nl = MUX_s_1_2_2(nor_606_nl, nor_607_nl, fsm_output[3]);
  assign nor_608_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[0])) | (fsm_output[1])
      | (~ (fsm_output[8])) | (~ (fsm_output[6])) | (fsm_output[7]));
  assign mux_229_nl = MUX_s_1_2_2(nor_608_nl, nor_609_cse, fsm_output[4]);
  assign nor_610_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[0])) | (~ (fsm_output[1]))
      | (fsm_output[8]) | (fsm_output[6]) | (fsm_output[7]));
  assign nor_611_nl = ~((fsm_output[0]) | (fsm_output[1]) | (fsm_output[8]) | (fsm_output[6])
      | (fsm_output[7]));
  assign nor_612_nl = ~((~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[8])
      | nand_164_cse);
  assign mux_227_nl = MUX_s_1_2_2(nor_611_nl, nor_612_nl, fsm_output[2]);
  assign mux_228_nl = MUX_s_1_2_2(nor_610_nl, mux_227_nl, fsm_output[4]);
  assign mux_230_nl = MUX_s_1_2_2(mux_229_nl, mux_228_nl, fsm_output[3]);
  assign mux_234_seb = MUX_s_1_2_2(mux_233_nl, mux_230_nl, fsm_output[5]);
  assign nor_371_cse = ~((fsm_output[2:0]!=3'b000));
  assign nor_372_cse = ~(nor_371_cse | (fsm_output[8]));
  assign and_863_cse = (fsm_output[2:0]==3'b111);
  assign mux_248_nl = MUX_s_1_2_2((fsm_output[4]), or_616_cse, and_863_cse);
  assign mux_249_nl = MUX_s_1_2_2(mux_248_nl, (~ mux_tmp_236), fsm_output[5]);
  assign and_173_ssc = mux_249_nl & and_dcpl_150;
  assign or_1328_cse = (fsm_output[1:0]!=2'b00);
  assign and_864_cse = (fsm_output[1]) & (fsm_output[8]);
  assign or_435_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[8]);
  assign mux_255_nl = MUX_s_1_2_2((fsm_output[4]), or_616_cse, or_435_nl);
  assign or_434_nl = and_864_cse | (fsm_output[4:3]!=2'b00);
  assign mux_256_nl = MUX_s_1_2_2(mux_255_nl, or_434_nl, fsm_output[2]);
  assign or_433_nl = (or_1328_cse & (fsm_output[8])) | (fsm_output[4:3]!=2'b00);
  assign or_431_nl = (~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[8]))
      | (fsm_output[4]) | (fsm_output[3]);
  assign mux_254_nl = MUX_s_1_2_2(or_433_nl, or_431_nl, fsm_output[2]);
  assign mux_257_nl = MUX_s_1_2_2((~ mux_256_nl), mux_254_nl, fsm_output[5]);
  assign or_436_ssc = mux_257_nl | or_dcpl_150;
  assign nor_374_nl = ~(and_863_cse | (fsm_output[4:3]!=2'b00));
  assign mux_258_nl = MUX_s_1_2_2(nor_374_nl, or_tmp_278, fsm_output[5]);
  assign and_188_ssc = (~ mux_258_nl) & and_dcpl_166;
  assign mux_259_nl = MUX_s_1_2_2(not_tmp_215, mux_tmp_236, fsm_output[5]);
  assign and_195_ssc = (~ mux_259_nl) & and_dcpl_176;
  assign mux_262_nl = MUX_s_1_2_2(or_tmp_76, mux_tmp_260, or_1328_cse);
  assign mux_263_nl = MUX_s_1_2_2(mux_262_nl, mux_tmp_261, fsm_output[2]);
  assign and_197_ssc = (~ mux_263_nl) & and_dcpl_178;
  assign mux_264_nl = MUX_s_1_2_2(and_944_cse, (~ mux_tmp_236), fsm_output[5]);
  assign and_198_ssc = mux_264_nl & and_dcpl_176;
  assign mux_265_nl = MUX_s_1_2_2(or_tmp_76, mux_tmp_260, fsm_output[1]);
  assign mux_266_nl = MUX_s_1_2_2(mux_265_nl, mux_tmp_261, fsm_output[2]);
  assign and_202_ssc = (~ mux_266_nl) & and_dcpl_178;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_nand_1_rmff = ~(and_dcpl_192 & and_dcpl_189
      & (~((fsm_output[5]) | LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1)));
  assign APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_3_1 = MUX1HOT_v_3_3_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2,
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2, (z_out_23[3:1]), {and_dcpl_197
      , and_dcpl_198 , and_dcpl_196});
  assign APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_0 = MUX1HOT_s_1_3_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1,
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0[1]), (z_out_23[0]), {and_dcpl_197
      , and_dcpl_198 , and_dcpl_196});
  assign APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_17_rmff = MUX1HOT_s_1_3_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0,
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0[0]), (z_out_14[0]), {and_dcpl_197
      , and_dcpl_198 , and_dcpl_196});
  assign APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_16_rmff = MUX1HOT_s_1_3_2(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      (attention_sqrt_1_for_i_4_0_sva_4_3[0]), (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1]),
      {and_dcpl_197 , and_dcpl_198 , and_dcpl_196});
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_2 = MUX_s_1_2_2((attention_sqrt_1_for_i_4_0_sva_2_0[2]),
      (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[0]), and_dcpl_196);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1_0 = MUX_v_2_2_2((attention_sqrt_1_for_i_4_0_sva_2_0[1:0]),
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2, and_dcpl_196);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_or_2_m1c = ((~(QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_211)
      | ((~(QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_212);
  assign or_455_cse = (fsm_output[8:7]!=2'b10);
  assign or_454_cse = (fsm_output[8:7]!=2'b01);
  assign and_274_ssc = (~ mux_tmp_283) & and_dcpl_19 & and_dcpl_28;
  assign and_277_ssc = and_dcpl_257 & and_dcpl_114;
  assign or_478_nl = (fsm_output[1:0]!=2'b10);
  assign mux_282_nl = MUX_s_1_2_2(or_1327_cse, or_478_nl, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_or_5_cse = ((~ mux_282_nl) & and_dcpl_102 & and_dcpl_19
      & and_dcpl_204) | and_dcpl_261;
  assign GEMM_3D_FLOAT_LOOP_4_or_6_cse = and_277_ssc | and_dcpl_263;
  assign GEMM_3D_FLOAT_LOOP_4_or_8_cse = and_dcpl_268 | and_dcpl_269;
  assign mux_284_nl = MUX_s_1_2_2(or_dcpl_109, or_616_cse, fsm_output[6]);
  assign mux_285_nl = MUX_s_1_2_2(mux_284_nl, (fsm_output[6]), fsm_output[5]);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_nand_rmff = ~((~ mux_285_nl) & and_dcpl_19);
  assign CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_nand_ssc = ~((reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1])
      & reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 & (~ (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[0])));
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_4_cse = and_dcpl_292 | and_dcpl_309 | and_dcpl_310
      | and_dcpl_311 | and_dcpl_312 | and_dcpl_313 | and_dcpl_314 | and_dcpl_315
      | and_dcpl_317 | and_dcpl_318 | and_dcpl_319 | and_dcpl_320 | and_dcpl_321
      | and_dcpl_322 | and_dcpl_323 | and_dcpl_324;
  assign or_488_nl = (fsm_output[0]) | (~ and_747_cse);
  assign or_487_nl = (~ (fsm_output[1])) | (fsm_output[3]);
  assign mux_286_nl = MUX_s_1_2_2(or_487_nl, or_tmp_247, fsm_output[0]);
  assign mux_287_nl = MUX_s_1_2_2(or_488_nl, mux_286_nl, fsm_output[2]);
  assign or_486_nl = (fsm_output[2]) | (fsm_output[0]) | (~ and_747_cse);
  assign mux_288_nl = MUX_s_1_2_2(mux_287_nl, or_486_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign SF_LOOP_3_SF_LOOP_3_or_20_rmff = mux_288_nl | or_586_cse | (~ (fsm_output[7]))
      | or_811_cse;
  assign RESHAPE_2D_TO_3D_LOOP_3_1_or_cse = and_dcpl_348 | and_dcpl_197;
  assign or_503_nl = (fsm_output[2]) | (fsm_output[0]) | (fsm_output[7]) | (~ (fsm_output[3]));
  assign mux_303_nl = MUX_s_1_2_2(or_tmp_340, or_503_nl, fsm_output[6]);
  assign or_512_nl = (fsm_output[0]) | (fsm_output[7]) | (~ (fsm_output[3]));
  assign or_510_nl = (~ (fsm_output[0])) | (fsm_output[7]) | (fsm_output[3]);
  assign mux_301_nl = MUX_s_1_2_2(or_512_nl, or_510_nl, fsm_output[2]);
  assign mux_302_nl = MUX_s_1_2_2(or_tmp_340, mux_301_nl, fsm_output[6]);
  assign mux_304_nl = MUX_s_1_2_2(mux_303_nl, mux_302_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign SF_LOOP_3_SF_LOOP_3_or_24_rmff = mux_304_nl | or_586_cse | (fsm_output[1])
      | (fsm_output[5]);
  assign nor_339_nl = ~((fsm_output[3:2]!=2'b10));
  assign nor_340_nl = ~((fsm_output[3:2]!=2'b01));
  assign mux_298_nl = MUX_s_1_2_2(nor_339_nl, nor_340_nl, fsm_output[5]);
  assign INIT_2D_MEM_LOOP_2_1_or_ssc = (and_dcpl_384 & and_dcpl_259) | (mux_298_nl
      & and_dcpl_132 & and_dcpl_127 & (~ (fsm_output[0])) & (fsm_output[6]));
  assign nand_170_cse = ~((fsm_output[1]) & (fsm_output[6]));
  assign QUANTIZE_ACTIVATION_LOOP_5_or_5_m1c = ((~(QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_404)
      | ((~(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_405);
  assign and_447_ssc = and_dcpl_128 & and_dcpl_243;
  assign or_1363_cse = (fsm_output[7:2]!=6'b000110);
  assign nand_175_cse = ~((fsm_output[1:0]==2'b11));
  assign nor_398_cse = ~((fsm_output[2]) | (~ (fsm_output[7])));
  assign or_553_cse = (fsm_output[1]) | (~ (fsm_output[7]));
  assign and_2271_cse = and_dcpl_104 & and_dcpl_238;
  assign and_2277_cse = and_dcpl_454 & and_dcpl_148;
  assign nor_400_nl = ~((fsm_output[2]) | (fsm_output[0]) | (fsm_output[7]) | (fsm_output[4])
      | (fsm_output[3]));
  assign nor_401_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (~ (fsm_output[7]))
      | (~ (fsm_output[4])) | (fsm_output[3]));
  assign mux_348_nl = MUX_s_1_2_2(nor_400_nl, nor_401_nl, fsm_output[6]);
  assign nor_402_nl = ~((~ (fsm_output[6])) | (fsm_output[2]) | (~((fsm_output[0])
      & (fsm_output[7]) & (fsm_output[4]) & (fsm_output[3]))));
  assign mux_349_nl = MUX_s_1_2_2(mux_348_nl, nor_402_nl, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_nand_3_itm = ~(mux_349_nl & nor_439_cse);
  assign or_1362_nl = (fsm_output[3]) | (fsm_output[2]) | (~ (fsm_output[1])) | (fsm_output[7]);
  assign mux_342_nl = MUX_s_1_2_2(and_882_cse, (fsm_output[1]), fsm_output[0]);
  assign mux_343_nl = MUX_s_1_2_2(mux_342_nl, or_604_cse, fsm_output[2]);
  assign nand_nl = ~((fsm_output[3]) & mux_343_nl);
  assign mux_344_nl = MUX_s_1_2_2(or_1362_nl, nand_nl, fsm_output[5]);
  assign nand_243_nl = ~((fsm_output[5]) & (fsm_output[7]));
  assign mux_345_nl = MUX_s_1_2_2(mux_344_nl, nand_243_nl, fsm_output[4]);
  assign nor_397_nl = ~((~((fsm_output[2:1]!=2'b00))) | (fsm_output[7]));
  assign mux_339_nl = MUX_s_1_2_2((fsm_output[7]), nor_397_nl, fsm_output[3]);
  assign mux_337_nl = MUX_s_1_2_2(or_604_cse, (fsm_output[7]), fsm_output[2]);
  assign mux_338_nl = MUX_s_1_2_2(mux_337_nl, nor_398_cse, fsm_output[3]);
  assign mux_340_nl = MUX_s_1_2_2(mux_339_nl, mux_338_nl, fsm_output[5]);
  assign nor_394_nl = ~((fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[7])));
  assign mux_334_nl = MUX_s_1_2_2((fsm_output[7]), nor_394_nl, fsm_output[2]);
  assign nor_395_nl = ~((fsm_output[2]) | (~ (fsm_output[0])) | (fsm_output[1]) |
      (~ (fsm_output[7])));
  assign mux_335_nl = MUX_s_1_2_2(mux_334_nl, nor_395_nl, fsm_output[3]);
  assign or_556_nl = (fsm_output[2]) | (~(nand_175_cse & (fsm_output[7])));
  assign or_554_nl = (fsm_output[0]) | (~ and_882_cse);
  assign mux_332_nl = MUX_s_1_2_2(or_554_nl, or_553_cse, fsm_output[2]);
  assign mux_333_nl = MUX_s_1_2_2(or_556_nl, mux_332_nl, fsm_output[3]);
  assign mux_336_nl = MUX_s_1_2_2(mux_335_nl, mux_333_nl, fsm_output[5]);
  assign mux_341_nl = MUX_s_1_2_2((~ mux_340_nl), mux_336_nl, fsm_output[4]);
  assign mux_346_nl = MUX_s_1_2_2(mux_345_nl, mux_341_nl, fsm_output[6]);
  assign mux_347_nl = MUX_s_1_2_2(mux_346_nl, or_1363_cse, fsm_output[8]);
  assign GEMM_3D_FLOAT_LOOP_4_and_ssc = input_rsc_en_d_1 & mux_347_nl;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt = conv_u2s_18_19({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]))})
      + conv_s2s_17_19(z_out_49[16:0]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt[18:0];
  assign nl_SF_LOOP_3_acc_88_nl = conv_u2u_1_2(z_out_2[20]) + conv_u2u_1_2(z_out_2[17]);
  assign SF_LOOP_3_acc_88_nl = nl_SF_LOOP_3_acc_88_nl[1:0];
  assign nl_SF_LOOP_3_acc_84_nl = conv_u2u_13_14({SF_LOOP_3_acc_88_nl , (SF_LOOP_3_acc_34_sdt_14_0_1[14:4])})
      + 14'b01000000000001;
  assign SF_LOOP_3_acc_84_nl = nl_SF_LOOP_3_acc_84_nl[13:0];
  assign nl_SF_LOOP_3_acc_38_sdt = conv_u2u_18_19({SF_LOOP_3_acc_84_nl , (SF_LOOP_3_acc_34_sdt_14_0_1[3:0])})
      + conv_u2u_17_19(z_out_2[16:0]) + conv_u2u_17_19({(z_out_2[19:18]) , 2'b00
      , (z_out_2[19:18]) , 2'b00 , (signext_5_1(z_out_2[20])) , 3'b000 , (z_out_2[17])});
  assign SF_LOOP_3_acc_38_sdt = nl_SF_LOOP_3_acc_38_sdt[18:0];
  assign or_629_cse = (fsm_output[8:7]!=2'b00);
  assign and_882_cse = (fsm_output[1]) & (fsm_output[7]);
  assign or_616_cse = (fsm_output[4:3]!=2'b00);
  assign nor_414_cse = ~((fsm_output[1:0]!=2'b00));
  assign or_601_cse = (~ (fsm_output[1])) | (fsm_output[7]);
  assign or_607_cse = (fsm_output[1]) | (fsm_output[7]);
  assign or_604_cse = (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[7]);
  assign or_614_cse = (fsm_output[2]) | (~ (fsm_output[6]));
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl = conv_u2s_13_14({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])})
      + conv_s2s_12_14(z_out_7);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl[13:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_nl = conv_u2s_15_16({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])})
      + conv_s2s_14_16(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_nl[15:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm = conv_u2s_17_18({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])})
      + conv_s2s_16_18(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm[17:0];
  assign or_637_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[7]) | (~ (fsm_output[8]))
      | (fsm_output[4]);
  assign or_636_nl = (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[7]) | (fsm_output[8])
      | (fsm_output[4]);
  assign mux_397_nl = MUX_s_1_2_2(or_637_nl, or_636_nl, fsm_output[2]);
  assign nor_418_nl = ~((fsm_output[6]) | mux_397_nl);
  assign and_884_nl = (fsm_output[6]) & (fsm_output[2]) & (fsm_output[0]) & (~ (fsm_output[1]))
      & (fsm_output[7]) & (~ (fsm_output[8])) & (fsm_output[4]);
  assign mux_398_nl = MUX_s_1_2_2(nor_418_nl, and_884_nl, fsm_output[5]);
  assign SF_LOOP_3_and_itm = (~ and_dcpl_514) & mux_398_nl & (fsm_output[3]);
  assign or_645_cse = (fsm_output[6:5]!=2'b10);
  assign nor_419_cse = ~((fsm_output[5]) | (fsm_output[8]));
  assign attention_round_1_qelse_or_9_cse = (and_dcpl_403 & and_dcpl_477 & (fsm_output[5])
      & z_out_53_40) | (and_dcpl_111 & and_dcpl_228 & (fsm_output[5]) & z_out_53_40);
  assign attention_round_1_qelse_or_8_cse = and_dcpl_445 | and_dcpl_240;
  assign and_745_cse = (fsm_output[2]) & (fsm_output[4]);
  assign or_586_cse = (fsm_output[8]) | (fsm_output[4]);
  assign and_878_cse = (fsm_output[5]) & (fsm_output[8]);
  assign nl_SF_LOOP_3_acc_47_itm = conv_u2u_19_20({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33]))
      , 2'b11 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25]))
      , 2'b11 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:23]))
      , 1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]))
      , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14])) , (~
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33]))}) + conv_u2u_19_20(signext_19_18({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19:18]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:30])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:29]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12])
      , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17]))}))
      + conv_u2u_1_20(z_out_2[20]);
  assign SF_LOOP_3_acc_47_itm = nl_SF_LOOP_3_acc_47_itm[19:0];
  assign attention_round_1_qelse_and_3_ssc = input_rsc_en_d_1 & (~ and_dcpl_662);
  assign attention_round_1_qelse_or_16_cse = attention_round_1_qelse_or_8_cse | (and_dcpl_403
      & and_dcpl_477 & (fsm_output[5]) & (~ z_out_53_40)) | (and_dcpl_111 & and_dcpl_228
      & (fsm_output[5]) & (~ z_out_53_40));
  assign nor_428_cse = ~((~ (fsm_output[1])) | (~ (fsm_output[8])) | (fsm_output[7]));
  assign mux_445_cse = MUX_s_1_2_2(or_455_cse, or_629_cse, fsm_output[1]);
  assign or_935_cse = (~ (fsm_output[1])) | (fsm_output[8]);
  assign or_698_nl = (fsm_output[7]) | (~ or_tmp_496);
  assign mux_464_nl = MUX_s_1_2_2(or_698_nl, or_tmp_497, fsm_output[1]);
  assign mux_461_nl = MUX_s_1_2_2(nor_tmp_95, or_tmp_496, fsm_output[7]);
  assign mux_462_nl = MUX_s_1_2_2(or_tmp_497, mux_461_nl, fsm_output[1]);
  assign mux_459_nl = MUX_s_1_2_2(mux_tmp_458, or_tmp_496, fsm_output[7]);
  assign or_695_nl = (fsm_output[7]) | nor_tmp_95;
  assign mux_460_nl = MUX_s_1_2_2(mux_459_nl, or_695_nl, fsm_output[1]);
  assign mux_463_nl = MUX_s_1_2_2(mux_462_nl, mux_460_nl, fsm_output[0]);
  assign mux_465_nl = MUX_s_1_2_2(mux_464_nl, mux_463_nl, fsm_output[2]);
  assign attention_sqrt_1_for_i_and_ssc = input_rsc_en_d_1 & (mux_465_nl | (fsm_output[6:4]!=3'b000));
  assign or_705_cse = (fsm_output[4]) | (~ (fsm_output[6]));
  assign and_893_cse = (fsm_output[6:5]==2'b11);
  assign or_709_cse = (fsm_output[6:5]!=2'b01);
  assign or_381_nl = (fsm_output[8:4]!=5'b10000);
  assign mux_499_nl = MUX_s_1_2_2(or_1325_cse, or_tmp_523, fsm_output[1]);
  assign or_730_nl = (fsm_output[8:5]!=4'b1000);
  assign mux_500_nl = MUX_s_1_2_2(mux_499_nl, or_730_nl, fsm_output[4]);
  assign mux_501_nl = MUX_s_1_2_2(or_381_nl, mux_500_nl, fsm_output[3]);
  assign or_729_nl = (fsm_output[4]) | nor_439_cse | (fsm_output[7:5]!=3'b000);
  assign or_726_nl = (fsm_output[4]) | (fsm_output[8]) | (fsm_output[6]) | (fsm_output[7]);
  assign mux_497_nl = MUX_s_1_2_2(or_729_nl, or_726_nl, fsm_output[3]);
  assign or_724_nl = (~ (fsm_output[1])) | (~ (fsm_output[8])) | (fsm_output[5])
      | (fsm_output[6]) | (fsm_output[7]);
  assign mux_495_nl = MUX_s_1_2_2(or_1325_cse, or_724_nl, fsm_output[4]);
  assign mux_493_nl = MUX_s_1_2_2(or_tmp_523, or_722_cse, fsm_output[1]);
  assign or_721_nl = (~ (fsm_output[1])) | (fsm_output[8]) | nand_160_cse;
  assign mux_494_nl = MUX_s_1_2_2(mux_493_nl, or_721_nl, fsm_output[4]);
  assign mux_496_nl = MUX_s_1_2_2(mux_495_nl, mux_494_nl, fsm_output[3]);
  assign mux_498_nl = MUX_s_1_2_2(mux_497_nl, mux_496_nl, fsm_output[0]);
  assign mux_502_itm = MUX_s_1_2_2(mux_501_nl, mux_498_nl, fsm_output[2]);
  assign and_900_nl = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[8]) & (fsm_output[4])
      & (~ (fsm_output[3]));
  assign nor_442_nl = ~((fsm_output[2]) | (fsm_output[0]) | (fsm_output[8]) | (fsm_output[4])
      | (~ (fsm_output[3])));
  assign mux_511_nl = MUX_s_1_2_2(and_900_nl, nor_442_nl, fsm_output[5]);
  assign and_528_seb = mux_511_nl & and_dcpl_101 & (~ (fsm_output[6]));
  assign SF_LOOP_3_and_4_cse = input_rsc_en_d_1 & (~((((or_1328_cse | (fsm_output[2]))
      & (fsm_output[3])) | (fsm_output[5:4]!=2'b00)) & and_dcpl_152));
  assign nor_450_cse = ~((fsm_output[7:6]!=2'b00));
  assign or_788_cse = (fsm_output[5]) | (~ (fsm_output[8])) | (fsm_output[7]);
  assign or_811_cse = (fsm_output[6:5]!=2'b00);
  assign GEMM_3D_FLOAT_LOOP_4_1_and_ssc = input_rsc_en_d_1 & (and_dcpl_147 | and_dcpl_447
      | and_dcpl_136 | and_dcpl_445 | GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c4
      | and_dcpl_388 | and_dcpl_337 | GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c7
      | and_dcpl_324 | GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c9
      | GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c10
      | and_dcpl_242 | and_dcpl_162 | and_dcpl_240 | and_dcpl_169);
  assign GEMM_3D_FLOAT_LOOP_4_1_or_13_cse = GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c7
      | GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c10;
  assign nl_SF_LOOP_3_acc_43_nl = conv_u2u_10_11({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22])
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20])}) + conv_u2u_10_11({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28:25]) , 1'b0 ,
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8])}) + conv_u2u_1_11(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35]);
  assign SF_LOOP_3_acc_43_nl = nl_SF_LOOP_3_acc_43_nl[10:0];
  assign nl_SF_LOOP_3_acc_45_sdt = conv_u2u_13_14({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17:12]) , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23])})
      + conv_u2u_1_14(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      + conv_u2u_11_14(SF_LOOP_3_acc_43_nl) + conv_u2u_1_14(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36])
      + conv_u2u_8_14(signext_8_7({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28:25]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6])}))
      + conv_u2u_1_14(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29])
      + conv_u2u_8_14({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]) , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14])})
      + conv_u2u_1_14(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22])
      + conv_u2u_5_14({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33]))
      , 1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12]))})
      + conv_u2u_4_14({(~ (z_out_2[21])) , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30]))})
      + conv_u2u_1_14(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[18]);
  assign SF_LOOP_3_acc_45_sdt = nl_SF_LOOP_3_acc_45_sdt[13:0];
  assign nl_SF_LOOP_3_acc_86_sdt = conv_u2u_12_13({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:30])
      , 1'b0 , (signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33])}) + conv_u2u_12_13(signext_12_11({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]) , 1'b0
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:22]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35])}));
  assign SF_LOOP_3_acc_86_sdt = nl_SF_LOOP_3_acc_86_sdt[12:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_ssc = input_rsc_en_d_1 & (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c0
      | and_dcpl_497 | LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c2 | and_dcpl_556);
  assign or_1563_tmp = LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c2 | LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c0;
  assign and_19_cse = RMS_NORM_LOOP_2_2_and_2_tmp & reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd;
  assign or_966_cse = (~ (fsm_output[5])) | (~ (fsm_output[7])) | (fsm_output[8]);
  assign or_955_cse = (fsm_output[1]) | (~ (fsm_output[7])) | (fsm_output[8]);
  assign nor_501_cse = ~(nor_371_cse | (fsm_output[8:7]!=2'b01));
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_9_cse = and_dcpl_581 | and_dcpl_348 | and_dcpl_587
      | and_dcpl_260;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_10_itm = and_dcpl_584 | and_dcpl_337 | and_dcpl_328;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_and_12_itm = (~ (z_out_19[2])) & and_dcpl_118;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_and_13_itm = (z_out_19[2]) & and_dcpl_118;
  assign and_615_cse = (fsm_output[3]) & or_369_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_and_ssc = input_rsc_en_d_1 & (APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0
      | APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c1 | and_dcpl_348 | and_dcpl_337
      | and_dcpl_274 | and_dcpl_263);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse = and_dcpl_337 | and_dcpl_274;
  assign and_929_cse = (fsm_output[4:3]==2'b11);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_2_m1c = ((~(QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      | z_out_45_17)) & and_dcpl_446) | ((~(QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      | z_out_45_17)) & and_dcpl_241);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_itm = (z_out_45_17
      & and_dcpl_446) | (z_out_45_17 & and_dcpl_241);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_1_itm = ((~((~ QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | z_out_45_17)) & and_dcpl_446) | ((~((~ QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | z_out_45_17)) & and_dcpl_241);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_12_itm = (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm)
      & QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_2_m1c;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_13_itm = CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm
      & QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_2_m1c;
  assign or_1009_nl = nor_414_cse | (fsm_output[8:7]!=2'b01);
  assign or_1004_nl = (~ (fsm_output[1])) | (~ (fsm_output[8])) | (fsm_output[7]);
  assign mux_706_nl = MUX_s_1_2_2(or_955_cse, or_1004_nl, fsm_output[0]);
  assign mux_707_nl = MUX_s_1_2_2(or_1009_nl, mux_706_nl, fsm_output[5]);
  assign or_1001_nl = and_864_cse | (fsm_output[7]);
  assign mux_704_nl = MUX_s_1_2_2(mux_445_cse, or_1001_nl, fsm_output[0]);
  assign mux_705_nl = MUX_s_1_2_2(or_454_cse, mux_704_nl, fsm_output[5]);
  assign mux_708_nl = MUX_s_1_2_2(mux_707_nl, mux_705_nl, fsm_output[2]);
  assign mux_709_nl = MUX_s_1_2_2(or_966_cse, mux_708_nl, and_929_cse);
  assign or_999_nl = (fsm_output[1]) | (~ (fsm_output[8])) | (fsm_output[7]);
  assign mux_702_nl = MUX_s_1_2_2(or_999_nl, or_629_cse, fsm_output[0]);
  assign or_1000_nl = (fsm_output[5:2]!=4'b0001) | mux_702_nl;
  assign mux_710_nl = MUX_s_1_2_2(mux_709_nl, or_1000_nl, fsm_output[6]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_and_ssc = input_rsc_en_d_1 & (((~
      or_dcpl_202) & mux_710_nl) | and_dcpl_446 | and_dcpl_274 | and_dcpl_241 | and_dcpl_118);
  assign or_1017_cse = (fsm_output[1]) | (fsm_output[8]) | (fsm_output[0]) | (~ (fsm_output[7]));
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_3_itm = (z_out_45_17
      & and_dcpl_404) | (z_out_45_17 & and_dcpl_211);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_4_itm = ((~((~ QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | z_out_45_17)) & and_dcpl_404) | ((~((~ QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | z_out_45_17)) & and_dcpl_211);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_5_itm = ((~(QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      | z_out_45_17)) & and_dcpl_404) | ((~(QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      | z_out_45_17)) & and_dcpl_211);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_20_itm = (~ and_dcpl_25)
      & and_dcpl_373;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_21_itm = and_dcpl_25
      & and_dcpl_373;
  assign GEMM_3D_FLOAT_LOOP_4_and_2_ssc = input_rsc_en_d_1 & (and_dcpl_404 | and_dcpl_373
      | and_dcpl_274 | and_dcpl_530 | and_dcpl_211);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_ssc = input_rsc_en_d_1 & (~(and_dcpl_384
      & (fsm_output[2:1]==2'b11) & and_dcpl_28));
  assign mux_944_nl = MUX_s_1_2_2(not_tmp_512, mux_tmp_238, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_1_rgt = (~((~ mux_944_nl) &
      and_dcpl_606)) & LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx0c2;
  assign mux_716_cse = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[8]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_ssc = input_rsc_en_d_1 & ((~(or_dcpl_202
      | and_dcpl_368)) | LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_mx0c2);
  assign mux_941_nl = MUX_s_1_2_2(not_tmp_512, nor_tmp_171, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_3_rgt = (~((~ mux_941_nl)
      & and_dcpl_606)) & LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_mx0c2;
  assign nor_525_cse = ~((fsm_output[5:4]!=2'b00));
  assign or_1056_nl = (~((fsm_output[0]) | (fsm_output[4]) | (fsm_output[5]))) |
      (fsm_output[8:7]!=2'b01);
  assign mux_745_nl = MUX_s_1_2_2(or_1056_nl, or_tmp_849, fsm_output[1]);
  assign or_1050_nl = nor_525_cse | (fsm_output[8:7]!=2'b01);
  assign mux_743_nl = MUX_s_1_2_2(or_tmp_849, or_1050_nl, fsm_output[0]);
  assign mux_744_nl = MUX_s_1_2_2(mux_743_nl, or_454_cse, fsm_output[1]);
  assign mux_746_nl = MUX_s_1_2_2(mux_745_nl, mux_744_nl, fsm_output[3]);
  assign mux_740_nl = MUX_s_1_2_2(or_454_cse, mux_716_cse, fsm_output[5]);
  assign mux_741_nl = MUX_s_1_2_2(mux_740_nl, or_788_cse, fsm_output[4]);
  assign mux_738_nl = MUX_s_1_2_2(mux_tmp_728, or_tmp_831, and_971_cse);
  assign mux_736_nl = MUX_s_1_2_2(or_455_cse, or_454_cse, fsm_output[5]);
  assign or_1046_nl = (fsm_output[0]) | (fsm_output[4]);
  assign mux_737_nl = MUX_s_1_2_2(mux_736_nl, or_788_cse, or_1046_nl);
  assign mux_739_nl = MUX_s_1_2_2(mux_738_nl, mux_737_nl, fsm_output[1]);
  assign mux_742_nl = MUX_s_1_2_2(mux_741_nl, mux_739_nl, fsm_output[3]);
  assign mux_747_nl = MUX_s_1_2_2(mux_746_nl, mux_742_nl, fsm_output[6]);
  assign or_1045_nl = (~((~(nor_414_cse | (fsm_output[4]))) | (fsm_output[5]))) |
      (fsm_output[8:7]!=2'b01);
  assign or_1040_nl = (~((fsm_output[1]) | (~ (fsm_output[0])) | (fsm_output[4])
      | (fsm_output[5]))) | (fsm_output[8:7]!=2'b01);
  assign mux_734_nl = MUX_s_1_2_2(or_1045_nl, or_1040_nl, fsm_output[3]);
  assign mux_731_nl = MUX_s_1_2_2(mux_716_cse, or_788_cse, fsm_output[4]);
  assign mux_729_nl = MUX_s_1_2_2(and_849_cse, or_454_cse, fsm_output[5]);
  assign mux_730_nl = MUX_s_1_2_2(mux_729_nl, mux_tmp_728, fsm_output[4]);
  assign mux_732_nl = MUX_s_1_2_2(mux_731_nl, mux_730_nl, fsm_output[1]);
  assign mux_727_nl = MUX_s_1_2_2(or_788_cse, or_tmp_831, fsm_output[4]);
  assign mux_733_nl = MUX_s_1_2_2(mux_732_nl, mux_727_nl, fsm_output[3]);
  assign mux_735_nl = MUX_s_1_2_2(mux_734_nl, mux_733_nl, fsm_output[6]);
  assign mux_748_nl = MUX_s_1_2_2(mux_747_nl, mux_735_nl, fsm_output[2]);
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_and_5_ssc = input_rsc_en_d_1 & ((~(or_dcpl_205
      | (~ (z_out_22[4])) | (~((z_out_36[4]) & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1))))
      | APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c0 | APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c3
      | and_dcpl_587 | and_dcpl_450 | and_dcpl_260 | and_dcpl_530 | and_dcpl_118)
      & mux_748_nl;
  assign or_1085_nl = (fsm_output[1]) | (~ (fsm_output[6]));
  assign mux_769_nl = MUX_s_1_2_2(nand_170_cse, or_1085_nl, fsm_output[0]);
  assign nor_543_nl = ~((fsm_output[5:2]!=4'b0001) | mux_769_nl);
  assign nor_540_nl = ~((fsm_output[0]) | (fsm_output[1]) | (fsm_output[6]));
  assign mux_765_nl = MUX_s_1_2_2((fsm_output[6]), nor_540_nl, fsm_output[4]);
  assign mux_764_nl = MUX_s_1_2_2((fsm_output[6]), (~ or_tmp_874), fsm_output[4]);
  assign mux_766_nl = MUX_s_1_2_2(mux_765_nl, mux_764_nl, fsm_output[2]);
  assign and_938_nl = nand_175_cse & (fsm_output[6]);
  assign mux_762_nl = MUX_s_1_2_2(or_tmp_874, and_938_nl, fsm_output[4]);
  assign mux_761_nl = MUX_s_1_2_2((fsm_output[6]), (~ (fsm_output[6])), fsm_output[1]);
  assign nor_541_nl = ~((fsm_output[4]) | mux_761_nl);
  assign mux_763_nl = MUX_s_1_2_2(mux_762_nl, nor_541_nl, fsm_output[2]);
  assign mux_767_nl = MUX_s_1_2_2(mux_766_nl, (~ mux_763_nl), fsm_output[3]);
  assign nand_226_nl = ~((fsm_output[4]) & (fsm_output[6]));
  assign nand_227_nl = ~(((fsm_output[2]) | (fsm_output[4]) | (fsm_output[1])) &
      (fsm_output[6]));
  assign mux_760_nl = MUX_s_1_2_2(nand_226_nl, nand_227_nl, fsm_output[3]);
  assign mux_768_nl = MUX_s_1_2_2(mux_767_nl, mux_760_nl, fsm_output[5]);
  assign mux_770_nl = MUX_s_1_2_2(nor_543_nl, mux_768_nl, fsm_output[7]);
  assign CACHE_UPDATE_LOOP_2_1_j_and_ssc = input_rsc_en_d_1 & ((~(or_dcpl_202 | (mux_770_nl
      & (~ (fsm_output[8]))))) | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0 | and_dcpl_348
      | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c4 | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5
      | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c6 | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c7);
  assign nor_552_cse = ~((fsm_output[5]) | (fsm_output[7]));
  assign and_944_cse = (fsm_output[4:2]==3'b111);
  assign mux_797_cse = MUX_s_1_2_2((fsm_output[1]), (~ (fsm_output[1])), fsm_output[0]);
  assign mux_799_nl = MUX_s_1_2_2(and_929_cse, mux_tmp_260, nor_83_cse);
  assign mux_800_nl = MUX_s_1_2_2(nor_tmp_88, mux_799_nl, fsm_output[2]);
  assign mux_801_nl = MUX_s_1_2_2(mux_800_nl, (~ or_tmp_907), fsm_output[6]);
  assign nand_235_nl = ~((fsm_output[6]) & (~((fsm_output[4:1]==4'b0111))));
  assign mux_802_nl = MUX_s_1_2_2(mux_801_nl, nand_235_nl, fsm_output[5]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_and_1_ssc = input_rsc_en_d_1 & (~(mux_802_nl
      & and_dcpl_19));
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_34_sdt = conv_u2u_5_6({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 2'b00}) + conv_u2u_2_6(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]) + 6'b000001;
  assign GEMM_3D_FLOAT_LOOP_4_acc_34_sdt = nl_GEMM_3D_FLOAT_LOOP_4_acc_34_sdt[5:0];
  assign nand_250_nl = ~((fsm_output[1]) & mux_tmp_260);
  assign nand_251_nl = ~(((fsm_output[1]) | (fsm_output[4])) & (fsm_output[3]));
  assign mux_804_nl = MUX_s_1_2_2(nand_250_nl, nand_251_nl, fsm_output[0]);
  assign mux_805_nl = MUX_s_1_2_2(mux_804_nl, or_tmp_911, fsm_output[2]);
  assign nor_559_nl = ~((fsm_output[6]) | mux_805_nl);
  assign or_258_nl = (~ (fsm_output[1])) | (fsm_output[3]) | (~ (fsm_output[4]));
  assign mux_803_nl = MUX_s_1_2_2(or_tmp_188, or_258_nl, fsm_output[0]);
  assign and_955_nl = (fsm_output[6]) & (fsm_output[2]) & (~ mux_803_nl);
  assign mux_806_nl = MUX_s_1_2_2(nor_559_nl, and_955_nl, fsm_output[5]);
  assign and_667_ssc = mux_806_nl & and_dcpl_19;
  assign or_1124_nl = (fsm_output[6]) | (fsm_output[4]) | (~ (fsm_output[3]));
  assign mux_807_nl = MUX_s_1_2_2(or_1124_nl, or_tmp_766, fsm_output[5]);
  assign and_668_ssc = (~ mux_807_nl) & and_dcpl_583;
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_1_ssc = input_rsc_en_d_1 &
      (~ and_dcpl_395);
  assign mux_943_nl = MUX_s_1_2_2(not_tmp_512, mux_tmp_808, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_5_rgt = (~((~ mux_943_nl)
      & and_dcpl_606)) & LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_mx1c2;
  assign CACHE_UPDATE_LOOP_3_qif_CACHE_UPDATE_LOOP_3_qif_nor_ssc = ~(or_dcpl_210
      | LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse);
  assign CACHE_UPDATE_LOOP_3_qif_and_2_ssc = or_dcpl_210 & (~ LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse);
  assign or_1136_nl = (~ (fsm_output[2])) | (fsm_output[0]) | (~ (fsm_output[1]))
      | (fsm_output[7]) | (fsm_output[4]) | (fsm_output[3]);
  assign mux_813_nl = MUX_s_1_2_2(not_tmp_504, or_1136_nl, fsm_output[6]);
  assign nand_49_nl = ~((~((fsm_output[7:6]!=2'b10))) & or_dcpl_109);
  assign mux_814_nl = MUX_s_1_2_2(mux_813_nl, nand_49_nl, fsm_output[5]);
  assign CACHE_UPDATE_LOOP_3_qif_and_ssc = input_rsc_en_d_1 & (mux_814_nl | (fsm_output[8]));
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_242_sdt = conv_u2u_1_4(z_out_23[3]) + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign GEMM_3D_FLOAT_LOOP_4_acc_242_sdt = nl_GEMM_3D_FLOAT_LOOP_4_acc_242_sdt[3:0];
  assign mux_942_nl = MUX_s_1_2_2(not_tmp_512, mux_tmp_848, fsm_output[5]);
  assign and_704_ssc = (~ mux_942_nl) & and_dcpl_606;
  assign mux_839_nl = MUX_s_1_2_2(or_tmp_76, or_tmp_207, fsm_output[2]);
  assign nor_566_nl = ~((fsm_output[6]) | mux_839_nl);
  assign nor_567_nl = ~((~ (fsm_output[6])) | (fsm_output[2]) | or_dcpl_109);
  assign mux_840_nl = MUX_s_1_2_2(nor_566_nl, nor_567_nl, fsm_output[5]);
  assign and_677_itm = mux_840_nl & and_dcpl_19 & nor_414_cse;
  assign mux_845_nl = MUX_s_1_2_2(or_tmp_188, or_tmp_191, fsm_output[0]);
  assign mux_843_nl = MUX_s_1_2_2(or_tmp_76, or_tmp_207, fsm_output[1]);
  assign mux_844_nl = MUX_s_1_2_2(mux_843_nl, or_tmp_247, fsm_output[0]);
  assign mux_846_nl = MUX_s_1_2_2(mux_845_nl, mux_844_nl, fsm_output[2]);
  assign nor_568_nl = ~((fsm_output[6]) | mux_846_nl);
  assign nand_51_nl = ~((fsm_output[1]) & (~ mux_tmp_260));
  assign mux_841_nl = MUX_s_1_2_2(nand_51_nl, or_tmp_188, fsm_output[0]);
  assign mux_842_nl = MUX_s_1_2_2(or_tmp_76, mux_841_nl, fsm_output[2]);
  assign and_958_nl = (fsm_output[6]) & (~ mux_842_nl);
  assign mux_847_nl = MUX_s_1_2_2(nor_568_nl, and_958_nl, fsm_output[5]);
  assign and_678_itm = mux_847_nl & and_dcpl_19;
  assign mux_849_nl = MUX_s_1_2_2(or_dcpl_109, mux_tmp_848, fsm_output[5]);
  assign and_679_itm = (~ mux_849_nl) & and_dcpl_606;
  assign or_1566_tmp = and_dcpl_395 | and_678_itm;
  assign or_1161_nl = (~ (fsm_output[1])) | (fsm_output[5]) | (fsm_output[6]);
  assign mux_837_nl = MUX_s_1_2_2(or_tmp_943, or_1161_nl, fsm_output[4]);
  assign or_1162_nl = (fsm_output[3]) | mux_837_nl;
  assign mux_834_nl = MUX_s_1_2_2(nand_158_cse, or_811_cse, fsm_output[1]);
  assign mux_835_nl = MUX_s_1_2_2(or_tmp_943, mux_834_nl, fsm_output[2]);
  assign nand_50_nl = ~((fsm_output[4]) & (~ mux_835_nl));
  assign or_1158_nl = (fsm_output[2:1]!=2'b00) | nand_158_cse;
  assign mux_833_nl = MUX_s_1_2_2(or_tmp_943, or_1158_nl, fsm_output[4]);
  assign mux_836_nl = MUX_s_1_2_2(nand_50_nl, mux_833_nl, fsm_output[3]);
  assign mux_838_nl = MUX_s_1_2_2(or_1162_nl, mux_836_nl, fsm_output[0]);
  assign nand_245_itm = ~((~ mux_838_nl) & and_dcpl_19);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_and_7_cse = (~ and_704_ssc) & and_679_itm;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_and_8_cse = and_704_ssc & and_679_itm;
  assign or_1176_nl = (~ (fsm_output[0])) | (fsm_output[1]) | (fsm_output[4]) | (fsm_output[3]);
  assign or_1175_nl = (~ (fsm_output[1])) | (fsm_output[4]);
  assign or_1174_nl = (~ (fsm_output[1])) | (fsm_output[4]) | (fsm_output[3]);
  assign mux_859_nl = MUX_s_1_2_2(or_1175_nl, or_1174_nl, fsm_output[0]);
  assign mux_860_nl = MUX_s_1_2_2(or_1176_nl, mux_859_nl, fsm_output[2]);
  assign nor_571_nl = ~((fsm_output[6]) | mux_860_nl);
  assign and_961_nl = (fsm_output[6]) & (~ mux_tmp_277);
  assign mux_861_nl = MUX_s_1_2_2(nor_571_nl, and_961_nl, fsm_output[5]);
  assign and_682_itm = mux_861_nl & and_dcpl_19;
  assign and_683_itm = and_dcpl_257 & and_dcpl_194;
  assign and_684_itm = and_dcpl_257 & and_dcpl_185;
  assign mux_855_nl = MUX_s_1_2_2(or_616_cse, or_tmp_76, fsm_output[1]);
  assign mux_856_nl = MUX_s_1_2_2(mux_855_nl, or_tmp_314, fsm_output[0]);
  assign mux_854_nl = MUX_s_1_2_2(or_tmp_191, or_tmp_316, fsm_output[0]);
  assign mux_857_nl = MUX_s_1_2_2(mux_856_nl, mux_854_nl, fsm_output[2]);
  assign nor_570_nl = ~((fsm_output[6]) | mux_857_nl);
  assign and_960_nl = (fsm_output[6]) & (fsm_output[2]) & (~ mux_tmp_278);
  assign mux_858_nl = MUX_s_1_2_2(nor_570_nl, and_960_nl, fsm_output[5]);
  assign nand_246_seb = ~(mux_858_nl & and_dcpl_19);
  assign mux_867_nl = MUX_s_1_2_2((~ or_tmp_646), nor_tmp_145, fsm_output[2]);
  assign and_688_ssc = mux_867_nl & and_dcpl_132 & and_882_cse & and_dcpl;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_and_cse = input_rsc_en_d_1 & (~(or_tmp_207
      | (fsm_output[8]) | or_607_cse | or_113_cse | (fsm_output[6:5]!=2'b10)));
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_ssc = input_rsc_en_d_1 & (and_dcpl_497
      | LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_mx0c1);
  assign or_1217_cse = (fsm_output[8]) | (~ (fsm_output[6]));
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_and_ssc = input_rsc_en_d_1 & (and_dcpl_497
      | LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0c1 | and_dcpl_556);
  assign or_1283_cse = (fsm_output[2]) | (~ (fsm_output[4]));
  assign and_971_cse = (fsm_output[0]) & (fsm_output[4]);
  assign nl_SF_LOOP_3_acc_87_sdt = conv_u2u_14_15(signext_14_11({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22])
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]) , 1'b0 ,
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]) , (z_out_2[20])
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[16]))}))
      + conv_u2u_14_15({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19:18])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12])
      , (signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]) ,
      (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19]))});
  assign SF_LOOP_3_acc_87_sdt = nl_SF_LOOP_3_acc_87_sdt[14:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt = conv_s2u_38_41(LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0[41:4])
      + conv_s2u_40_41(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt[40:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_ssc = input_rsc_en_d_1 & (and_dcpl_659
      | LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_mx0c1 | and_dcpl_661 | and_dcpl_556);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_2_cse = (~ and_dcpl_655) & and_dcpl_659;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_7_cse = and_dcpl_661 | and_dcpl_556;
  assign or_1358_nl = (fsm_output[6]) | (~ (fsm_output[4]));
  assign mux_967_cse = MUX_s_1_2_2(or_705_cse, or_1358_nl, fsm_output[5]);
  assign nand_242_cse = ~((fsm_output[6:4]==3'b111));
  assign nor_581_cse = ~((fsm_output[4:3]!=2'b00));
  assign GEMM_3D_FLOAT_LOOP_4_and_5_cse = input_rsc_en_d_1 & (~(or_dcpl_110 | or_553_cse
      | or_113_cse | or_811_cse));
  assign GEMM_3D_FLOAT_LOOP_4_1_and_4_cse = input_rsc_en_d_1 & (and_dcpl_274 | and_dcpl_263);
  assign QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_46_17, QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs,
      z_out_45_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_44_17, QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_46_17, QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs,
      z_out_45_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_44_17, QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_46_17, QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs,
      z_out_45_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_44_17, QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_46_17, QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs,
      z_out_45_17);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1
      = MUX_s_1_2_2(z_out_44_17, QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp = (z_out_21[2]) & (z_out_20[2]) &
      (z_out_19[2]);
  assign nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl = ({reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1 , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2})
      + conv_u2u_2_6(attention_sqrt_1_for_i_4_0_sva_2_0[2:1]);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl = nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl[5:0];
  assign nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7 = conv_u2u_8_9({z_out_24
      , (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[0]) , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2
      , 1'b0}) + conv_u2u_6_9(TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7 = nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7[8:0];
  assign for_for_for_for_nor_tmp = ~(z_out_30_2 | (z_out_31[2]));
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp = ~((z_out_31[2])
      | (z_out_17[2]) | z_out_30_2);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]))
      + 2'b01;
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_66_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[19])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20]))
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_66_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_66_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]))
      + conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm = conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_66_nl)
      + conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl) + conv_u2u_1_3(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[11])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[12]))
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[13])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14]))
      + conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_76_nl = conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl)
      + conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl) + conv_u2u_1_3(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_76_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_76_nl[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_86_nl = conv_u2u_4_6(z_out_24)
      + conv_u2u_1_6(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]))
      + conv_u2u_4_6(z_out_18) + conv_u2u_3_6(operator_40_24_true_AC_TRN_AC_WRAP_acc_76_nl)
      + conv_u2u_1_6(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_86_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_86_nl[5:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1 = operator_40_24_true_AC_TRN_AC_WRAP_acc_86_nl
      + ({5'b10111 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[7])});
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[5:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_92_nl = ({1'b1 , (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[0])})
      + conv_u2s_1_2(~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[1])) + conv_u2s_1_2(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[2]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_92_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_92_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1 = conv_s2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_92_nl)
      + conv_s2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[5:4]) + conv_u2u_1_3(~
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[3]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1 = ({1'b1 , (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[0])})
      + conv_u2u_1_2(~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[1])) +
      conv_u2u_1_2(~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1[1:0];
  assign attention_abs_qif_acc_pmx_lpi_1_dfm_mx0_30_1 = MUX_v_30_2_2((z_out_9[30:1]),
      (z_out_57[30:1]), z_out_9[31]);
  assign nl_attention_sqrt_for_i_4_0_sva_1_mx0w0 = ({attention_sqrt_1_for_i_4_0_sva_4_3
      , attention_sqrt_1_for_i_4_0_sva_2_0}) + 5'b00001;
  assign attention_sqrt_for_i_4_0_sva_1_mx0w0 = nl_attention_sqrt_for_i_4_0_sva_1_mx0w0[4:0];
  assign nor_439_cse = ~((fsm_output[1]) | (fsm_output[8]));
  assign or_722_cse = (fsm_output[8:5]!=4'b0000);
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_mx0w6 = (operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1[0])
      | (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[6:0]!=7'b0000000);
  assign attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39 =
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39 & z_out_53_40;
  assign attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_15
      = MUX_v_24_2_2(24'b000000000000000000000000, QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_15,
      z_out_53_40);
  assign attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_14_0
      = MUX_v_15_2_2(15'b000000000000000, QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_14_0,
      z_out_53_40);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8 = (z_out_11[55:16]) + ({reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1
      , reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2});
  assign GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8 = nl_GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8[39:0];
  assign nl_RMS_NORM_LOOP_2_2_mul_nl = $signed((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[39:0]))
      * $signed(({LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_52 , LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0}));
  assign RMS_NORM_LOOP_2_2_mul_nl = nl_RMS_NORM_LOOP_2_2_mul_nl[71:0];
  assign RMS_NORM_LOOP_2_2_mul_itm_71_32_1 = readslicef_72_40_32(RMS_NORM_LOOP_2_2_mul_nl);
  assign attention_max_attn_fixed_t_1_conc_psp_mx0w12_39 = QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39
      & z_out_53_40;
  assign attention_max_attn_fixed_t_1_conc_psp_mx0w12_38_15 = MUX_v_24_2_2(24'b000000000000000000000000,
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15, z_out_53_40);
  assign attention_max_attn_fixed_t_1_conc_psp_mx0w12_14_0 = MUX_v_15_2_2(15'b000000000000000,
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_14_0, z_out_53_40);
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nand_tmp = ~(SF_LOOP_3_acc_5_psp_sva_9 &
      (SF_LOOP_3_acc_5_psp_sva_8_0==9'b111111111));
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_6_nl = (~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      + conv_s2s_36_40(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:4]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_acc_6_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_6_nl[39:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_10_nl = ({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva
      , 9'b010000000}) + conv_s2s_47_49({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 7'b0100000}) + conv_s2s_45_49({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 5'b01000}) + conv_s2s_43_49({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva) ,
      3'b001}) + conv_s2s_40_49(LINEAR_FORWARD_NO_MUL_LOOP_2_acc_6_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_acc_10_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_10_nl[48:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_11_nl = ({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 11'b00000000000}) + conv_s2s_49_51(LINEAR_FORWARD_NO_MUL_LOOP_2_acc_10_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_acc_11_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_11_nl[50:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1 = ({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva
      , 13'b0100000000000}) + conv_s2s_51_53(LINEAR_FORWARD_NO_MUL_LOOP_2_acc_11_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1 = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1[52:0];
  assign lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_sva_dfm_mx1w0 = LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp
      | (~ exit_LINEAR_FORWARD_NO_MUL_LOOP_4_lpi_3_dfm_2);
  assign lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_3_sva_dfm_mx2w0 = ~((z_out_31[2])
      & (z_out_22[4]) & (z_out_19[2]));
  assign RMS_NORM_LOOP_2_and_4_ssc_1 = (input_rsci_data_out_d[39]) & (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign RMS_NORM_LOOP_2_2_and_1_ssc_1 = (~ QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs)
      & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1;
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1 = ~((input_rsci_data_out_d[39])
      | LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign RMS_NORM_LOOP_2_2_and_5_ssc_1 = (~ reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd)
      & RMS_NORM_LOOP_2_2_and_2_tmp;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_88_nl = conv_u2s_2_3({(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[3])
      , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[8])})
      + conv_s2s_2_3({1'b1 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[10])})
      + conv_u2s_1_3(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[11]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_88_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_88_nl[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12 = conv_s2s_3_4(operator_40_24_true_AC_TRN_AC_WRAP_acc_88_nl)
      + conv_s2s_2_4(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[5:4]) + conv_u2s_1_4(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[3:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5 = conv_u2u_4_5({2'b10 , CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4})
      + conv_u2u_4_5({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 , 1'b0}) + 5'b00001;
  assign GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5 = nl_GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5[4:0];
  assign nl_attention_round_qr_39_16_lpi_3_dfm_mx0w0 = conv_u2s_23_24(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23:1])
      + conv_u2s_1_24(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[0]);
  assign attention_round_qr_39_16_lpi_3_dfm_mx0w0 = nl_attention_round_qr_39_16_lpi_3_dfm_mx0w0[23:0];
  assign and_629_ssc = QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs & (~ exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_7_4 = MUX_v_4_2_2((LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm[7:4]),
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd, and_629_ssc);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_3_2 = MUX_v_2_2_2((LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm[3:2]),
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1, and_629_ssc);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_1_0 = MUX_v_2_2_2((LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm[1:0]),
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2, and_629_ssc);
  assign attention_round_qelse_mux_2_cse = MUX_v_17_2_2((z_out_8[23:7]), (z_out_50[23:7]),
      z_out_53_40);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2 = 8'b01101111 + conv_u2u_7_8({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 2'b00 , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd});
  assign GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2 = nl_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2[7:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_90_nl = conv_s2s_4_6({(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[5:4])
      , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]))})
      + conv_u2s_4_6({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14])
      , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[11:9])})
      + conv_u2s_1_6(operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[2]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_90_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_90_nl[5:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3 = conv_s2s_6_8(operator_40_24_true_AC_TRN_AC_WRAP_acc_90_nl)
      + conv_u2s_6_8({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[12])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2]))})
      + conv_u2s_1_8(operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3[7:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_7 = MUX_s_1_2_2((LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_sdt[7]),
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_7, and_dcpl_25);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0 = MUX_v_7_2_2((LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_sdt[6:0]),
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0, and_dcpl_25);
  assign nl_GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5 = conv_s2u_4_5({1'b1 , (~
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0)}) + ({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 2'b01});
  assign GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5 = nl_GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[4:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2 = conv_u2u_4_5({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1 , 1'b0}) + conv_u2u_3_5({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}) + conv_u2u_1_5(attention_sqrt_1_for_i_4_0_sva_4_3[1]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2 = nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[4:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5 = conv_u2u_5_6({z_out_15 , (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[0])})
      + 6'b001111;
  assign GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5 = nl_GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5[5:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3 = ({reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1 , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2})
      + 6'b000001;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3 = nl_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[5:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_1_cse_1
      = APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1 & (~ APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_l_2_0_lpi_3_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0, LINEAR_FORWARD_NO_MUL_LOOP_5_exs_5_0);
  assign exit_LINEAR_FORWARD_NO_MUL_LOOP_4_lpi_3_dfm_2 = (z_out_36[4]) & (z_out_22[4])
      & (z_out_37[4]) & LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp;
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_l_2_0_lpi_3_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0, LINEAR_FORWARD_NO_MUL_LOOP_5_exs_5_0);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0, LINEAR_FORWARD_NO_MUL_LOOP_5_exs_5_0);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_exs_5_0 = ~(LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_mdf_sva
      | (~ QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs));
  assign nl_GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3 = conv_s2u_3_4({1'b1 , (~
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]))}) + ({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 1'b1});
  assign GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3 = nl_GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3[3:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1 = conv_u2u_6_7({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 3'b000}) + conv_u2u_4_7({3'b111 , (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1])})
      + 7'b0000001;
  assign GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1 = nl_GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1[6:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2 = 7'b0111111 + conv_u2u_2_7(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd);
  assign GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2 = nl_GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2[6:0];
  assign nl_CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8 = ({CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1})
      + 6'b000001;
  assign CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8 = nl_CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[5:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_5_nl = ({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva
      , 2'b01}) + conv_s2s_40_42(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_5_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_5_nl[41:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_7_nl = ({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 7'b0000000}) + conv_s2s_44_47({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva , 4'b0000})
      + conv_s2s_42_47(LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_5_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_7_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_7_nl[46:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1 = conv_s2s_56_57({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 16'b0010000000000000}) + conv_s2s_53_57({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 13'b0100000000000}) + conv_s2s_51_57({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 11'b01000000000}) + conv_s2s_49_57({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 9'b010000000}) + conv_s2s_47_57(LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_7_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1 = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1[56:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0 = ({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva
      , 2'b01}) + conv_s2u_41_42(LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1[56:16]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0 = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0[41:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm = (~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      + conv_s2s_37_40(z_out_41_52_8[44:8]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[39:0];
  assign nl_CACHE_UPDATE_LOOP_3_qif_acc_4_nl = conv_s2s_4_5({1'b1 , (~ reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd)
      , (~ reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1)}) + conv_u2s_4_5({attention_sqrt_1_for_i_4_0_sva_2_0
      , 1'b1});
  assign CACHE_UPDATE_LOOP_3_qif_acc_4_nl = nl_CACHE_UPDATE_LOOP_3_qif_acc_4_nl[4:0];
  assign nl_CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1 = conv_s2s_5_6(CACHE_UPDATE_LOOP_3_qif_acc_4_nl)
      + conv_u2s_3_6(z_out_27);
  assign CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1 = nl_CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1[5:0];
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl = conv_s2s_4_5({1'b1 , (~ GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0)})
      + conv_u2s_4_5({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1
      , 1'b1});
  assign CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl = nl_CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl[4:0];
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1 = conv_s2s_5_6(CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl)
      + conv_u2s_3_6(z_out_28);
  assign CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1 = nl_CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1[5:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1 = conv_u2u_6_7({5'b11111 , (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1])})
      + conv_u2u_6_7({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 , 3'b000}) + 7'b0000001;
  assign GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1 = nl_GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1[6:0];
  assign SOFTMAX_LOOP_4_SOFTMAX_LOOP_4_nor_nl = ~(operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_23_1
      | operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_40_1);
  assign SOFTMAX_LOOP_4_and_1_nl = operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_23_1
      & (~ operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_40_1);
  assign SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1 = MUX1HOT_v_20_3_2((z_out_60[20:1]),
      20'b10110000000000000000, 20'b01010000000000000000, {SOFTMAX_LOOP_4_SOFTMAX_LOOP_4_nor_nl
      , SOFTMAX_LOOP_4_and_1_nl , operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_40_1});
  assign nl_SF_LOOP_3_acc_82_nl = conv_u2u_4_5(signext_4_3({(z_out_2[21]) , 1'b0
      , (z_out_2[21])})) + conv_u2u_4_5({(z_out_2[17]) , 1'b0 , (z_out_2[19:18])});
  assign SF_LOOP_3_acc_82_nl = nl_SF_LOOP_3_acc_82_nl[4:0];
  assign nl_SF_LOOP_3_acc_34_sdt_14_0_1 = conv_u2u_14_15({(z_out_2[21]) , SF_LOOP_3_acc_82_nl
      , (z_out_2[19:17]) , (z_out_2[17]) , z_out_16}) + conv_u2u_14_15({(z_out_2[20])
      , 1'b0 , (signext_2_1(z_out_2[20])) , 1'b0 , (z_out_2[17]) , 1'b0 , (z_out_2[21])
      , 3'b000 , (z_out_2[20]) , 1'b0 , (z_out_2[20])});
  assign SF_LOOP_3_acc_34_sdt_14_0_1 = nl_SF_LOOP_3_acc_34_sdt_14_0_1[14:0];
  assign nl_SF_LOOP_3_acc_77_sdt_1 = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]))})
      + ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]))})
      + 3'b001;
  assign SF_LOOP_3_acc_77_sdt_1 = nl_SF_LOOP_3_acc_77_sdt_1[2:0];
  assign nl_SF_LOOP_3_acc_90_psp_1 = ({SF_LOOP_3_acc_38_itm_18 , reg_SF_LOOP_3_acc_38_1_ftd
      , reg_SF_LOOP_3_acc_38_1_ftd_1 , (reg_SF_LOOP_3_acc_38_1_ftd_2[8:4])}) + ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1 , 10'b1111111111 , (~
      (SF_LOOP_3_acc_5_psp_sva_19_17[2:1]))});
  assign SF_LOOP_3_acc_90_psp_1 = nl_SF_LOOP_3_acc_90_psp_1[14:0];
  assign nl_SF_LOOP_3_acc_39_nl = conv_s2s_17_18({(SF_LOOP_3_acc_90_psp_1[14]) ,
      1'b0 , (signext_3_1(SF_LOOP_3_acc_90_psp_1[14])) , 1'b0 , (signext_2_1(SF_LOOP_3_acc_90_psp_1[14]))
      , 1'b0 , (signext_2_1(SF_LOOP_3_acc_90_psp_1[14])) , 2'b00 , (signext_4_1(SF_LOOP_3_acc_90_psp_1[14]))})
      + conv_u2s_17_18({(SF_LOOP_3_acc_90_psp_1[12:0]) , (reg_SF_LOOP_3_acc_38_1_ftd_2[3:0])});
  assign SF_LOOP_3_acc_39_nl = nl_SF_LOOP_3_acc_39_nl[17:0];
  assign nl_SF_LOOP_3_acc_7_psp_sva_1 = SF_LOOP_3_acc_39_nl + ({(SF_LOOP_3_acc_90_psp_1[13])
      , 1'b0 , (SF_LOOP_3_acc_90_psp_1[13]) , 3'b000 , (SF_LOOP_3_acc_90_psp_1[13])
      , 2'b00 , (SF_LOOP_3_acc_90_psp_1[13]) , 2'b00 , (signext_2_1(SF_LOOP_3_acc_90_psp_1[13]))
      , 3'b000 , (SF_LOOP_3_acc_90_psp_1[13])});
  assign SF_LOOP_3_acc_7_psp_sva_1 = nl_SF_LOOP_3_acc_7_psp_sva_1[17:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_1 = conv_s2u_23_24(z_out_60[39:17])
      + 24'b000000000000000000000101;
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_1 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_1[23:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_23_1 = readslicef_24_1_23(operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_1);
  assign nl_attention_exp_exp_half_mul_4_sgnd = $signed((z_out_10[39:0])) * $signed(SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1);
  assign attention_exp_exp_half_mul_4_cse_sva_1 = $unsigned(nl_attention_exp_exp_half_mul_4_sgnd);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_2 = conv_s2s_40_41(~ z_out_60)
      + 41'b00000000000000000000010100000000000000001;
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_2 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_2[40:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_itm_40_1 = readslicef_41_1_40(operator_40_24_true_AC_TRN_AC_WRAP_acc_nl_2);
  assign RMS_NORM_LOOP_2_2_and_4_ssc_1 = (attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[39])
      & (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1 = ~((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[39])
      | LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign RMS_NORM_LOOP_2_2_and_2_tmp = QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs
      & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1;
  assign INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_tmp = ~((SF_LOOP_3_acc_45_itm_8_0!=9'b000000000));
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_LINEAR_FORWARD_NO_MUL_LOOP_4_3_nor_nl = ~(exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2
      | (~ QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs));
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1 = MUX_v_2_2_2(2'b00,
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0, LINEAR_FORWARD_NO_MUL_LOOP_5_3_LINEAR_FORWARD_NO_MUL_LOOP_4_3_nor_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_exs_2_0 = (APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0
      & (~ APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1)) | LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_1_cse_1;
  assign CACHE_UPDATE_LOOP_1_and_cse = (z_out_37[3]) & (z_out_35[3]);
  assign or_6_cse = (fsm_output[4:2]!=3'b000);
  assign and_dcpl = ~((fsm_output[6:5]!=2'b00));
  assign and_dcpl_1 = ~((fsm_output[7]) | (fsm_output[4]));
  assign not_tmp_21 = ~((fsm_output[1]) | (fsm_output[3]));
  assign and_dcpl_6 = ~((fsm_output[8:7]!=2'b00));
  assign or_tmp_46 = (fsm_output[4]) | (fsm_output[6]) | (fsm_output[7]);
  assign or_tmp_55 = (fsm_output[8:6]!=3'b001);
  assign or_80_cse = (fsm_output[6]) | (fsm_output[8]);
  assign and_dcpl_13 = LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2 & CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  assign or_tmp_68 = (fsm_output[8]) | (~ (fsm_output[5]));
  assign or_113_cse = (fsm_output[2]) | (fsm_output[0]);
  assign and_dcpl_19 = (fsm_output[8:7]==2'b01);
  assign or_tmp_76 = (fsm_output[4:3]!=2'b10);
  assign and_dcpl_25 = QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs & (~ LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_mdf_sva);
  assign and_dcpl_28 = (fsm_output[6:5]==2'b10);
  assign or_tmp_188 = (~ (fsm_output[1])) | (~ (fsm_output[3])) | (fsm_output[4]);
  assign or_tmp_191 = (fsm_output[1]) | (fsm_output[3]) | (fsm_output[4]);
  assign or_tmp_207 = (fsm_output[4:3]!=2'b01);
  assign and_dcpl_79 = (fsm_output[8:7]==2'b10);
  assign and_dcpl_97 = ~(LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 | CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign and_dcpl_98 = (fsm_output[6:5]==2'b01);
  assign and_dcpl_99 = (~ (fsm_output[0])) & (fsm_output[2]);
  assign and_dcpl_100 = and_dcpl_99 & and_dcpl_98;
  assign and_dcpl_101 = (~ (fsm_output[7])) & (fsm_output[1]);
  assign and_dcpl_102 = (fsm_output[4:3]==2'b01);
  assign and_dcpl_103 = and_dcpl_102 & (~ (fsm_output[8]));
  assign and_dcpl_104 = and_dcpl_103 & and_dcpl_101;
  assign and_dcpl_105 = and_dcpl_104 & and_dcpl_100;
  assign or_dcpl_104 = (~ (fsm_output[5])) | z_out_45_17;
  assign or_dcpl_105 = (fsm_output[0]) | (~ (fsm_output[2]));
  assign or_dcpl_106 = or_dcpl_105 | (fsm_output[6]);
  assign or_dcpl_109 = ~((fsm_output[4:3]==2'b11));
  assign or_dcpl_110 = or_dcpl_109 | (fsm_output[8]);
  assign or_dcpl_111 = or_dcpl_110 | or_607_cse;
  assign or_dcpl_114 = ~((fsm_output[0]) & (fsm_output[2]));
  assign or_dcpl_115 = or_dcpl_114 | (fsm_output[6]);
  assign and_dcpl_107 = (fsm_output[0]) & (~ (fsm_output[2]));
  assign and_dcpl_108 = and_dcpl_107 & and_dcpl;
  assign and_dcpl_110 = and_929_cse & (fsm_output[8]);
  assign and_dcpl_111 = and_dcpl_110 & and_dcpl_101;
  assign and_dcpl_112 = and_dcpl_111 & and_dcpl_108;
  assign or_dcpl_129 = or_dcpl_109 | (~ (fsm_output[8]));
  assign or_dcpl_130 = or_dcpl_129 | or_601_cse;
  assign or_dcpl_133 = (~ (fsm_output[0])) | (fsm_output[2]);
  assign or_dcpl_134 = or_dcpl_133 | (fsm_output[6]);
  assign and_dcpl_114 = and_dcpl_107 & and_dcpl_28;
  assign and_dcpl_116 = nor_581_cse & (fsm_output[8]);
  assign and_dcpl_117 = and_dcpl_116 & and_dcpl_101;
  assign and_dcpl_118 = and_dcpl_117 & and_dcpl_114;
  assign and_tmp_16 = (fsm_output[8]) & or_616_cse;
  assign or_tmp_227 = (fsm_output[8]) | (fsm_output[4]) | (fsm_output[3]);
  assign or_tmp_230 = (fsm_output[7:4]!=4'b0000);
  assign and_dcpl_125 = (fsm_output[0]) & (fsm_output[2]);
  assign and_dcpl_126 = and_dcpl_125 & and_893_cse;
  assign and_dcpl_127 = ~((fsm_output[7]) | (fsm_output[1]));
  assign and_dcpl_128 = and_dcpl_116 & and_dcpl_127;
  assign nor_326_nl = ~((fsm_output[7:3]!=5'b00001));
  assign nor_327_nl = ~((~((fsm_output[3]) | (fsm_output[0]))) | (fsm_output[7:4]!=4'b0000));
  assign nor_328_nl = ~((fsm_output[7:4]!=4'b0000));
  assign and_811_nl = (fsm_output[0]) & (fsm_output[4]) & (fsm_output[5]) & (fsm_output[6])
      & (fsm_output[7]);
  assign mux_221_nl = MUX_s_1_2_2(nor_328_nl, and_811_nl, fsm_output[3]);
  assign mux_222_nl = MUX_s_1_2_2(nor_327_nl, mux_221_nl, fsm_output[1]);
  assign mux_223_nl = MUX_s_1_2_2(nor_326_nl, mux_222_nl, fsm_output[2]);
  assign nor_329_nl = ~((fsm_output[7:3]!=5'b00000));
  assign not_tmp_199 = MUX_s_1_2_2(mux_223_nl, nor_329_nl, fsm_output[8]);
  assign and_dcpl_130 = (~ (fsm_output[7])) & (fsm_output[2]);
  assign and_dcpl_132 = ~((fsm_output[4]) | (fsm_output[8]));
  assign or_tmp_247 = (fsm_output[1]) | (fsm_output[3]);
  assign and_dcpl_135 = and_dcpl_125 & and_dcpl_98;
  assign and_dcpl_136 = and_dcpl_104 & and_dcpl_135;
  assign and_dcpl_138 = and_dcpl_6 & and_dcpl_98;
  assign and_dcpl_142 = (~((~(nor_414_cse & (~ (fsm_output[2])))) & (fsm_output[3])))
      & (fsm_output[4]) & and_dcpl_138;
  assign and_dcpl_144 = (~ (fsm_output[7])) & (fsm_output[0]);
  assign or_tmp_266 = (fsm_output[1]) | (~ (fsm_output[8]));
  assign mux_235_nl = MUX_s_1_2_2(or_tmp_266, or_935_cse, fsm_output[2]);
  assign and_dcpl_147 = (~ mux_235_nl) & and_dcpl_102 & and_dcpl_144 & and_dcpl;
  assign and_dcpl_148 = and_dcpl_125 & and_dcpl;
  assign and_dcpl_149 = and_dcpl_104 & and_dcpl_148;
  assign and_dcpl_150 = and_dcpl_6 & (~ (fsm_output[6]));
  assign mux_tmp_236 = MUX_s_1_2_2((fsm_output[4]), or_616_cse, or_1326_cse);
  assign mux_237_nl = MUX_s_1_2_2((fsm_output[4]), (~ mux_tmp_236), fsm_output[5]);
  assign and_dcpl_151 = mux_237_nl & and_dcpl_150;
  assign and_dcpl_152 = and_dcpl_6 & (fsm_output[6]);
  assign mux_tmp_238 = MUX_s_1_2_2((fsm_output[4]), or_616_cse, or_369_cse);
  assign mux_239_nl = MUX_s_1_2_2(mux_tmp_238, (~ or_6_cse), fsm_output[5]);
  assign and_dcpl_153 = mux_239_nl & and_dcpl_152;
  assign and_813_nl = (fsm_output[0]) & (fsm_output[1]) & (fsm_output[4]) & (fsm_output[3]);
  assign mux_247_nl = MUX_s_1_2_2(nor_581_cse, and_813_nl, fsm_output[2]);
  assign and_dcpl_155 = (~ mux_247_nl) & and_dcpl_6 & and_893_cse;
  assign and_dcpl_157 = and_dcpl_103 & and_dcpl_127;
  assign and_dcpl_158 = and_dcpl_157 & and_dcpl_114;
  assign mux_250_nl = MUX_s_1_2_2(mux_tmp_236, (~ or_6_cse), fsm_output[5]);
  assign and_dcpl_159 = mux_250_nl & and_dcpl_152;
  assign and_dcpl_160 = and_dcpl_99 & and_dcpl;
  assign and_dcpl_161 = and_dcpl_110 & and_dcpl_127;
  assign and_dcpl_162 = and_dcpl_161 & and_dcpl_160;
  assign nor_tmp_88 = or_1328_cse & (fsm_output[4:3]==2'b11);
  assign not_tmp_215 = ~((fsm_output[2]) & nor_tmp_88);
  assign mux_251_nl = MUX_s_1_2_2(and_929_cse, (fsm_output[4]), and_863_cse);
  assign mux_252_nl = MUX_s_1_2_2(not_tmp_215, mux_251_nl, fsm_output[5]);
  assign and_dcpl_165 = (~ mux_252_nl) & and_dcpl_79 & (~ (fsm_output[6]));
  assign and_dcpl_166 = and_dcpl_79 & (fsm_output[6]);
  assign or_tmp_278 = (fsm_output[4:0]!=5'b00000);
  assign nor_334_nl = ~(and_855_cse | (fsm_output[4:3]!=2'b00));
  assign mux_253_nl = MUX_s_1_2_2(nor_334_nl, or_tmp_278, fsm_output[5]);
  assign and_dcpl_167 = (~ mux_253_nl) & and_dcpl_166;
  assign or_dcpl_150 = (fsm_output[7:6]!=2'b01);
  assign and_dcpl_168 = and_dcpl_99 & and_dcpl_28;
  assign and_dcpl_169 = and_dcpl_117 & and_dcpl_168;
  assign and_dcpl_171 = (fsm_output[7]) & (~ (fsm_output[1]));
  assign and_dcpl_172 = and_929_cse & (~ (fsm_output[8]));
  assign and_dcpl_173 = and_dcpl_172 & and_dcpl_171;
  assign and_dcpl_176 = and_dcpl_19 & (fsm_output[6]);
  assign and_dcpl_178 = and_dcpl_79 & and_dcpl;
  assign mux_tmp_260 = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[4]);
  assign mux_tmp_261 = MUX_s_1_2_2(mux_tmp_260, or_tmp_207, and_850_cse);
  assign and_dcpl_183 = and_dcpl_102 & (fsm_output[8]) & and_dcpl_127 & and_dcpl_108;
  assign and_dcpl_185 = and_dcpl_99 & and_893_cse;
  assign or_dcpl_156 = or_616_cse | (fsm_output[0]);
  assign and_dcpl_189 = (fsm_output[2]) & (~ (fsm_output[6]));
  assign and_dcpl_192 = (~ or_tmp_227) & and_882_cse;
  assign and_dcpl_194 = nor_315_cse & and_dcpl;
  assign and_dcpl_195 = and_dcpl_103 & and_882_cse;
  assign and_dcpl_196 = and_dcpl_195 & and_dcpl_194;
  assign and_dcpl_197 = and_dcpl_192 & and_dcpl_160;
  assign and_dcpl_198 = and_dcpl_192 & and_dcpl_148;
  assign and_dcpl_204 = (~ (fsm_output[2])) & (fsm_output[6]);
  assign and_dcpl_205 = and_dcpl_204 & (~ (fsm_output[5]));
  assign and_dcpl_208 = and_dcpl_116 & and_dcpl_101 & (fsm_output[0]);
  assign and_dcpl_210 = and_dcpl_107 & and_dcpl_98;
  assign and_dcpl_211 = and_dcpl_111 & and_dcpl_210;
  assign and_dcpl_212 = and_dcpl_161 & and_dcpl_100;
  assign and_dcpl_213 = and_dcpl_161 & and_dcpl_135;
  assign and_dcpl_214 = and_dcpl_111 & and_dcpl_100;
  assign nor_tmp_95 = (fsm_output[8]) & (fsm_output[3]);
  assign and_dcpl_228 = nor_315_cse & (~ (fsm_output[6]));
  assign and_dcpl_232 = (fsm_output[4:3]==2'b10);
  assign and_dcpl_233 = and_dcpl_232 & (~ (fsm_output[8]));
  assign and_dcpl_234 = and_dcpl_233 & and_882_cse;
  assign and_dcpl_235 = and_dcpl_234 & and_dcpl_126;
  assign and_dcpl_238 = nor_315_cse & and_dcpl_98;
  assign and_dcpl_240 = and_dcpl_161 & and_dcpl_210;
  assign and_dcpl_241 = and_dcpl_111 & and_dcpl_238;
  assign and_dcpl_242 = and_dcpl_161 & and_dcpl_108;
  assign and_dcpl_243 = and_dcpl_107 & and_893_cse;
  assign and_dcpl_245 = and_dcpl_234 & and_dcpl_185;
  assign and_dcpl_247 = (fsm_output[3]) & (~ (fsm_output[8]));
  assign or_tmp_313 = and_850_cse | (fsm_output[4:3]!=2'b10);
  assign or_473_nl = nor_414_cse | (fsm_output[4:3]!=2'b01);
  assign mux_tmp_277 = MUX_s_1_2_2(or_tmp_313, or_473_nl, fsm_output[2]);
  assign or_tmp_314 = (fsm_output[1]) | (~ (fsm_output[4])) | (fsm_output[3]);
  assign or_tmp_316 = (fsm_output[1]) | (fsm_output[4]) | (~ (fsm_output[3]));
  assign mux_tmp_278 = MUX_s_1_2_2(or_tmp_316, or_tmp_314, fsm_output[0]);
  assign nand_136_nl = ~((fsm_output[0]) & (fsm_output[1]) & (fsm_output[4]));
  assign or_480_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[4]) | (~ (fsm_output[3]));
  assign mux_tmp_283 = MUX_s_1_2_2(nand_136_nl, or_480_nl, fsm_output[2]);
  assign and_dcpl_256 = and_dcpl_195 & and_dcpl_168;
  assign and_dcpl_257 = and_dcpl_233 & and_dcpl_171;
  assign and_dcpl_259 = and_dcpl_125 & and_dcpl_28;
  assign and_dcpl_260 = and_dcpl_257 & and_dcpl_259;
  assign and_dcpl_261 = and_dcpl_173 & and_dcpl_114;
  assign and_dcpl_262 = and_dcpl_103 & and_dcpl_171;
  assign and_dcpl_263 = and_dcpl_262 & and_dcpl_126;
  assign and_dcpl_264 = and_dcpl_195 & and_dcpl_185;
  assign and_dcpl_265 = and_dcpl_195 & and_dcpl_126;
  assign and_dcpl_266 = nor_315_cse & and_893_cse;
  assign and_dcpl_267 = and_dcpl_257 & and_dcpl_266;
  assign and_dcpl_268 = and_dcpl_257 & and_dcpl_243;
  assign and_dcpl_269 = and_dcpl_234 & and_dcpl_266;
  assign and_dcpl_272 = and_dcpl_257 & and_dcpl_160;
  assign and_dcpl_274 = and_dcpl_173 & and_dcpl_194;
  assign and_dcpl_275 = and_dcpl_173 & and_dcpl_108;
  assign and_dcpl_276 = and_dcpl_172 & and_882_cse;
  assign and_dcpl_277 = and_dcpl_276 & and_dcpl_194;
  assign and_dcpl_278 = and_dcpl_276 & and_dcpl_108;
  assign and_dcpl_279 = and_dcpl_173 & and_dcpl_160;
  assign and_dcpl_280 = and_dcpl_173 & and_dcpl_148;
  assign and_dcpl_281 = and_dcpl_276 & and_dcpl_160;
  assign and_dcpl_282 = and_dcpl_276 & and_dcpl_148;
  assign and_dcpl_283 = (~ or_tmp_227) & and_dcpl_171;
  assign and_dcpl_284 = and_dcpl_283 & and_dcpl_238;
  assign and_dcpl_285 = and_dcpl_283 & and_dcpl_210;
  assign and_dcpl_286 = and_dcpl_192 & and_dcpl_238;
  assign and_dcpl_287 = and_dcpl_192 & and_dcpl_210;
  assign and_dcpl_288 = and_dcpl_283 & and_dcpl_100;
  assign and_dcpl_289 = and_dcpl_283 & and_dcpl_135;
  assign and_dcpl_290 = and_dcpl_192 & and_dcpl_100;
  assign and_dcpl_291 = and_dcpl_192 & and_dcpl_135;
  assign and_dcpl_292 = and_dcpl_262 & and_dcpl_238;
  assign and_dcpl_293 = and_dcpl_262 & and_dcpl_210;
  assign and_dcpl_294 = and_dcpl_195 & and_dcpl_238;
  assign and_dcpl_295 = and_dcpl_195 & and_dcpl_210;
  assign and_dcpl_296 = and_dcpl_262 & and_dcpl_100;
  assign and_dcpl_297 = and_dcpl_262 & and_dcpl_135;
  assign and_dcpl_298 = and_dcpl_195 & and_dcpl_100;
  assign and_dcpl_299 = and_dcpl_195 & and_dcpl_135;
  assign and_dcpl_300 = and_dcpl_257 & and_dcpl_238;
  assign and_dcpl_301 = and_dcpl_257 & and_dcpl_210;
  assign and_dcpl_302 = and_dcpl_234 & and_dcpl_238;
  assign and_dcpl_303 = and_dcpl_234 & and_dcpl_210;
  assign and_dcpl_304 = and_dcpl_257 & and_dcpl_100;
  assign and_dcpl_305 = and_dcpl_257 & and_dcpl_135;
  assign and_dcpl_306 = and_dcpl_234 & and_dcpl_100;
  assign and_dcpl_307 = and_dcpl_234 & and_dcpl_135;
  assign and_dcpl_308 = and_dcpl_173 & and_dcpl_238;
  assign and_dcpl_309 = and_dcpl_173 & and_dcpl_210;
  assign and_dcpl_310 = and_dcpl_276 & and_dcpl_238;
  assign and_dcpl_311 = and_dcpl_276 & and_dcpl_210;
  assign and_dcpl_312 = and_dcpl_173 & and_dcpl_100;
  assign and_dcpl_313 = and_dcpl_173 & and_dcpl_135;
  assign and_dcpl_314 = and_dcpl_276 & and_dcpl_100;
  assign and_dcpl_315 = and_dcpl_276 & and_dcpl_135;
  assign and_dcpl_316 = nor_315_cse & and_dcpl_28;
  assign and_dcpl_317 = and_dcpl_283 & and_dcpl_316;
  assign and_dcpl_318 = and_dcpl_283 & and_dcpl_114;
  assign and_dcpl_319 = and_dcpl_192 & and_dcpl_316;
  assign and_dcpl_320 = and_dcpl_192 & and_dcpl_114;
  assign and_dcpl_321 = and_dcpl_283 & and_dcpl_168;
  assign and_dcpl_322 = and_dcpl_283 & and_dcpl_259;
  assign and_dcpl_323 = and_dcpl_192 & and_dcpl_168;
  assign and_dcpl_324 = and_dcpl_192 & and_dcpl_259;
  assign and_dcpl_325 = and_dcpl_195 & and_dcpl_148;
  assign and_dcpl_328 = and_dcpl_234 & and_dcpl_108;
  assign and_dcpl_329 = and_dcpl_195 & and_dcpl_108;
  assign and_dcpl_332 = and_dcpl_189 & (~ (fsm_output[5]));
  assign and_dcpl_335 = and_dcpl_103 & and_882_cse & (~ (fsm_output[0]));
  assign and_dcpl_337 = and_dcpl_195 & and_dcpl_160;
  assign and_dcpl_342 = and_dcpl_192 & and_dcpl_194;
  assign and_dcpl_348 = and_dcpl_283 & and_dcpl_148;
  assign or_dcpl_166 = or_tmp_227 | or_dcpl_150;
  assign or_tmp_324 = (fsm_output[2:0]!=3'b100);
  assign or_492_nl = (fsm_output[2]) | (~ and_850_cse);
  assign mux_tmp_291 = MUX_s_1_2_2(or_492_nl, or_tmp_324, fsm_output[5]);
  assign and_dcpl_356 = (~ or_tmp_227) & and_dcpl_127;
  assign or_tmp_329 = (~ (fsm_output[2])) | (~ (fsm_output[0])) | (fsm_output[1])
      | (~ (fsm_output[7])) | (fsm_output[3]);
  assign and_dcpl_359 = and_dcpl_99 & (fsm_output[6]);
  assign and_dcpl_361 = (~ or_tmp_227) & and_dcpl_101;
  assign and_dcpl_366 = and_dcpl_361 & and_dcpl_114;
  assign and_dcpl_367 = and_dcpl_130 & and_dcpl_28;
  assign and_dcpl_368 = (~(or_tmp_227 | (~((fsm_output[1]) ^ (fsm_output[0])))))
      & and_dcpl_367;
  assign and_dcpl_373 = and_dcpl_356 & and_dcpl_259;
  assign and_dcpl_374 = and_dcpl_356 & and_dcpl_185;
  assign or_tmp_340 = (fsm_output[2]) | (~ (fsm_output[0])) | (~ (fsm_output[7]))
      | (fsm_output[3]);
  assign and_dcpl_378 = ~((fsm_output[2]) | (fsm_output[5]));
  assign and_dcpl_384 = nor_581_cse & and_dcpl_6;
  assign and_dcpl_386 = and_dcpl_283 & and_dcpl_194;
  assign and_dcpl_387 = and_dcpl_283 & and_dcpl_108;
  assign and_dcpl_388 = and_dcpl_361 & and_dcpl_259;
  assign nor_tmp_98 = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[4]) & (fsm_output[3]);
  assign and_dcpl_395 = and_dcpl_361 & and_dcpl_168;
  assign and_dcpl_396 = and_dcpl_172 & and_dcpl_101;
  assign and_dcpl_399 = (fsm_output[2]) & (fsm_output[6]);
  assign and_dcpl_403 = and_dcpl_172 & and_dcpl_127;
  assign and_dcpl_404 = and_dcpl_403 & and_dcpl_135;
  assign and_dcpl_405 = and_dcpl_396 & and_dcpl_100;
  assign and_dcpl_406 = and_dcpl_396 & and_dcpl_135;
  assign and_dcpl_407 = and_dcpl_356 & and_dcpl_316;
  assign or_dcpl_179 = (fsm_output[4]) | (~ (fsm_output[8])) | (fsm_output[7]);
  assign or_tmp_348 = (fsm_output[2:1]!=2'b01);
  assign or_tmp_349 = (fsm_output[2:1]!=2'b10);
  assign and_dcpl_419 = and_dcpl_128 & and_dcpl_114;
  assign not_tmp_260 = MUX_s_1_2_2(and_850_cse, (~ or_1328_cse), fsm_output[2]);
  assign or_tmp_354 = (fsm_output[1]) | (~ (fsm_output[4]));
  assign and_805_nl = (fsm_output[1]) & (fsm_output[4]);
  assign mux_328_itm = MUX_s_1_2_2(and_805_nl, (fsm_output[1]), fsm_output[0]);
  assign and_dcpl_440 = and_dcpl_356 & and_dcpl_108;
  assign and_dcpl_445 = and_dcpl_396 & and_dcpl_210;
  assign and_dcpl_446 = and_dcpl_403 & and_dcpl_100;
  assign and_dcpl_447 = and_dcpl_157 & and_dcpl_100;
  assign and_dcpl_450 = and_dcpl_262 & and_dcpl_259;
  assign and_dcpl_454 = and_dcpl_232 & (fsm_output[8]) & and_dcpl_101;
  assign or_tmp_373 = (fsm_output[6]) | (fsm_output[8]) | (fsm_output[7]) | (fsm_output[0])
      | (fsm_output[4]);
  assign or_582_nl = (~ (fsm_output[1])) | (~ (fsm_output[7])) | (fsm_output[8])
      | or_dcpl_109;
  assign or_580_nl = (~ (fsm_output[1])) | (fsm_output[7]) | (~ (fsm_output[8]))
      | (fsm_output[4]) | (fsm_output[3]);
  assign mux_tmp_356 = MUX_s_1_2_2(or_582_nl, or_580_nl, fsm_output[0]);
  assign nor_tmp_109 = (fsm_output[8]) & (fsm_output[4]);
  assign and_dcpl_458 = (fsm_output[3]) & (~ (fsm_output[7]));
  assign nor_343_nl = ~((fsm_output[2]) | (~((fsm_output[0]) & (fsm_output[8]) &
      (fsm_output[4]))));
  assign nor_344_nl = ~((~ (fsm_output[2])) | (fsm_output[0]) | (fsm_output[8]) |
      (fsm_output[4]));
  assign mux_370_nl = MUX_s_1_2_2(nor_343_nl, nor_344_nl, fsm_output[5]);
  assign and_dcpl_460 = mux_370_nl & and_dcpl_458 & (fsm_output[1]) & (~ (fsm_output[6]));
  assign and_dcpl_461 = and_dcpl_361 & and_dcpl_316;
  assign and_dcpl_468 = and_dcpl_458 & (~ (fsm_output[2]));
  assign nor_345_nl = ~((fsm_output[0]) | (fsm_output[1]) | (~((fsm_output[4]) &
      (fsm_output[8]))));
  assign nor_346_nl = ~((~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[8])
      | (fsm_output[4]));
  assign not_tmp_296 = MUX_s_1_2_2(nor_345_nl, nor_346_nl, fsm_output[5]);
  assign and_dcpl_474 = and_dcpl_361 & and_dcpl_108;
  assign or_tmp_449 = ~((~((fsm_output[5]) & (fsm_output[8]))) & (fsm_output[6]));
  assign mux_tmp_402 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[8]), fsm_output[5]);
  assign mux_tmp_405 = MUX_s_1_2_2((~ or_80_cse), or_1217_cse, fsm_output[5]);
  assign and_dcpl_477 = and_dcpl_99 & (~ (fsm_output[6]));
  assign and_dcpl_494 = not_tmp_296 & and_dcpl_458 & (~((fsm_output[2]) | (fsm_output[6])));
  assign nor_348_nl = ~((fsm_output[2]) | (fsm_output[1]) | (~ (fsm_output[7])) |
      (fsm_output[8]));
  assign nor_350_nl = ~((fsm_output[1]) | (fsm_output[7]) | (fsm_output[8]));
  assign mux_425_nl = MUX_s_1_2_2(nor_428_cse, nor_350_nl, fsm_output[2]);
  assign mux_426_nl = MUX_s_1_2_2(nor_348_nl, mux_425_nl, fsm_output[6]);
  assign nor_351_nl = ~((~ (fsm_output[6])) | (fsm_output[2]) | (~ (fsm_output[1]))
      | (fsm_output[7]) | (~ (fsm_output[8])));
  assign mux_427_nl = MUX_s_1_2_2(mux_426_nl, nor_351_nl, fsm_output[5]);
  assign and_dcpl_496 = mux_427_nl & nor_581_cse & (~ (fsm_output[0]));
  assign and_dcpl_497 = and_dcpl_157 & and_dcpl_316;
  assign nor_352_nl = ~((fsm_output[6]) | (fsm_output[1]) | (fsm_output[7]) | (fsm_output[4])
      | (fsm_output[3]));
  assign and_797_nl = (fsm_output[6]) & (fsm_output[1]) & (fsm_output[3]) & (fsm_output[4])
      & (fsm_output[7]);
  assign mux_457_nl = MUX_s_1_2_2(nor_352_nl, and_797_nl, fsm_output[5]);
  assign and_dcpl_500 = mux_457_nl & (~ (fsm_output[8])) & (fsm_output[0]) & (fsm_output[2]);
  assign or_tmp_496 = (fsm_output[8]) | (fsm_output[3]);
  assign mux_tmp_458 = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[8]);
  assign or_tmp_497 = (fsm_output[7]) | mux_tmp_458;
  assign or_tmp_499 = (fsm_output[6:4]!=3'b011);
  assign or_tmp_500 = ~((fsm_output[4]) & (fsm_output[0]) & (fsm_output[5]) & (~
      (fsm_output[6])));
  assign or_tmp_502 = (fsm_output[4]) | (fsm_output[0]) | (fsm_output[5]) | (~ (fsm_output[6]));
  assign or_tmp_511 = (fsm_output[6:4]!=3'b100);
  assign and_dcpl_505 = and_dcpl_262 & and_dcpl_194;
  assign or_tmp_523 = (fsm_output[8:6]!=3'b000);
  assign and_dcpl_514 = and_dcpl_173 & and_dcpl_126;
  assign nor_tmp_140 = (fsm_output[7:5]==3'b111);
  assign and_dcpl_530 = and_dcpl_173 & and_dcpl_185;
  assign nor_354_nl = ~((~ (fsm_output[2])) | (fsm_output[7]));
  assign mux_579_nl = MUX_s_1_2_2(nor_398_cse, nor_354_nl, fsm_output[6]);
  assign and_dcpl_545 = mux_579_nl & nor_581_cse & nor_439_cse & (~((fsm_output[0])
      | (fsm_output[5])));
  assign mux_tmp_584 = MUX_s_1_2_2((~ (fsm_output[1])), (fsm_output[1]), fsm_output[0]);
  assign or_tmp_646 = (fsm_output[0]) | (fsm_output[3]);
  assign nor_tmp_145 = (fsm_output[0]) & (fsm_output[3]);
  assign xor_dcpl_4 = (fsm_output[8]) ^ (fsm_output[1]);
  assign and_dcpl_553 = nor_581_cse & (~ (fsm_output[7])) & xor_dcpl_4;
  assign and_dcpl_556 = and_dcpl_128 & and_dcpl_259;
  assign mux_tmp_606 = MUX_s_1_2_2((~ (fsm_output[8])), (fsm_output[8]), fsm_output[6]);
  assign or_tmp_676 = (~ (fsm_output[4])) | (~ (fsm_output[6])) | (fsm_output[8]);
  assign or_tmp_707 = (fsm_output[7:4]!=4'b1001);
  assign or_tmp_712 = (fsm_output[8:4]!=5'b01000);
  assign or_tmp_726 = (fsm_output[1]) | (fsm_output[8]);
  assign mux_tmp_665 = MUX_s_1_2_2((~ (fsm_output[8])), (fsm_output[8]), fsm_output[7]);
  assign or_1320_nl = (fsm_output[6]) | (fsm_output[2]) | (fsm_output[3]);
  assign nand_143_nl = ~((fsm_output[6]) & (fsm_output[2]) & (fsm_output[3]));
  assign mux_678_nl = MUX_s_1_2_2(or_1320_nl, nand_143_nl, fsm_output[5]);
  assign and_dcpl_581 = (~(mux_678_nl | (fsm_output[4]))) & and_dcpl_19 & (fsm_output[1:0]==2'b01);
  assign and_dcpl_583 = and_dcpl_19 & (fsm_output[1:0]==2'b10);
  assign or_tmp_766 = ~((fsm_output[6]) & (fsm_output[2]) & (fsm_output[4]) & (~
      (fsm_output[3])));
  assign or_970_nl = (fsm_output[6]) | (fsm_output[2]) | (fsm_output[4]) | (~ (fsm_output[3]));
  assign mux_679_nl = MUX_s_1_2_2(or_970_nl, or_tmp_766, fsm_output[5]);
  assign and_dcpl_584 = (~ mux_679_nl) & and_dcpl_583;
  assign mux_680_nl = MUX_s_1_2_2(nor_414_cse, and_850_cse, fsm_output[6]);
  assign and_dcpl_587 = mux_680_nl & and_929_cse & and_dcpl_19 & and_dcpl_378;
  assign and_dcpl_588 = and_dcpl_262 & and_dcpl_168;
  assign or_dcpl_202 = LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2 | (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign mux_tmp_681 = MUX_s_1_2_2((fsm_output[2]), or_1326_cse, fsm_output[0]);
  assign and_dcpl_606 = and_dcpl_19 & (~ (fsm_output[6]));
  assign and_dcpl_612 = nor_581_cse & (fsm_output[2]) & and_dcpl_28 & (((fsm_output[0])
      & (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1)) | (fsm_output[1])) & and_dcpl_6;
  assign nor_tmp_171 = (fsm_output[4:1]==4'b1111);
  assign or_tmp_831 = (fsm_output[5]) | mux_716_cse;
  assign mux_tmp_728 = MUX_s_1_2_2(mux_716_cse, or_454_cse, fsm_output[5]);
  assign or_tmp_849 = (~((fsm_output[5:4]!=2'b01))) | (fsm_output[8:7]!=2'b01);
  assign or_dcpl_205 = ~(LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp & (z_out_37[4]));
  assign not_tmp_460 = ~((fsm_output[7]) & (fsm_output[2]));
  assign or_tmp_874 = (fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[6]));
  assign nor_tmp_182 = (fsm_output[5]) & (fsm_output[7]);
  assign and_dcpl_630 = (~ or_tmp_227) & or_1328_cse & and_dcpl_367;
  assign or_tmp_907 = (fsm_output[4:1]!=4'b0000);
  assign or_tmp_911 = ~((fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[4])) &
      (fsm_output[3]));
  assign mux_tmp_808 = MUX_s_1_2_2((fsm_output[4]), or_616_cse, and_855_cse);
  assign or_dcpl_210 = or_dcpl_205 | (~((z_out_22[4]) & (z_out_36[4])));
  assign not_tmp_504 = ~(or_369_cse & (fsm_output[7]) & (fsm_output[4]) & (fsm_output[3]));
  assign or_tmp_927 = (fsm_output[6]) | (~ nor_tmp_182);
  assign not_tmp_512 = ~(or_369_cse & (fsm_output[4:3]==2'b11));
  assign or_tmp_943 = (fsm_output[1]) | (fsm_output[5]) | (fsm_output[6]);
  assign and_dcpl_640 = and_dcpl_192 & and_dcpl_108;
  assign mux_tmp_848 = MUX_s_1_2_2(and_929_cse, (fsm_output[4]), or_1326_cse);
  assign or_tmp_976 = (fsm_output[2]) | and_850_cse | (fsm_output[4:3]!=2'b00);
  assign mux_874_nl = MUX_s_1_2_2(mux_tmp_238, (~ or_tmp_976), fsm_output[5]);
  assign and_dcpl_655 = mux_874_nl & and_dcpl_152;
  assign or_tmp_979 = (fsm_output[4:2]!=3'b001);
  assign mux_897_nl = MUX_s_1_2_2(nor_581_cse, or_tmp_976, fsm_output[5]);
  assign and_dcpl_659 = (~ mux_897_nl) & and_dcpl_152;
  assign and_dcpl_661 = and_dcpl_234 & and_dcpl_168;
  assign and_dcpl_662 = and_dcpl_234 & and_dcpl_259;
  assign not_tmp_552 = ~((fsm_output[6]) & (fsm_output[2]) & (fsm_output[5]));
  assign mux_946_itm = MUX_s_1_2_2(or_dcpl_109, or_616_cse, fsm_output[5]);
  assign mux_955_nl = MUX_s_1_2_2(or_705_cse, (fsm_output[6]), fsm_output[5]);
  assign or_810_nl = (fsm_output[6:4]!=3'b001);
  assign mux_tmp_956 = MUX_s_1_2_2(mux_955_nl, or_810_nl, fsm_output[3]);
  assign or_tmp_1058 = (fsm_output[3]) | mux_967_cse;
  assign or_1324_nl = (fsm_output[6]) | (fsm_output[1]) | (fsm_output[8]);
  assign nand_157_nl = ~((fsm_output[6]) & (fsm_output[1]) & (fsm_output[8]));
  assign mux_209_nl = MUX_s_1_2_2(or_1324_nl, nand_157_nl, fsm_output[5]);
  assign exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2_mx0c2 = (~(mux_209_nl |
      (fsm_output[3]))) & and_dcpl_1 & nor_315_cse;
  assign or_675_nl = (fsm_output[4]) | (fsm_output[2]) | (~ (fsm_output[0])) | (fsm_output[1])
      | (fsm_output[5]) | (fsm_output[8]);
  assign nand_185_nl = ~((fsm_output[0]) & (fsm_output[1]) & (fsm_output[5]) & (~
      (fsm_output[8])));
  assign or_673_nl = (fsm_output[1]) | (~ (fsm_output[5])) | (fsm_output[8]);
  assign mux_438_nl = MUX_s_1_2_2(nand_185_nl, or_673_nl, fsm_output[2]);
  assign or_671_nl = (fsm_output[5]) | (~ (fsm_output[8]));
  assign mux_436_nl = MUX_s_1_2_2((~ (fsm_output[8])), or_tmp_68, fsm_output[1]);
  assign mux_437_nl = MUX_s_1_2_2(or_671_nl, mux_436_nl, fsm_output[0]);
  assign or_672_nl = (fsm_output[2]) | mux_437_nl;
  assign mux_439_nl = MUX_s_1_2_2(mux_438_nl, or_672_nl, fsm_output[4]);
  assign mux_440_nl = MUX_s_1_2_2(or_675_nl, mux_439_nl, fsm_output[3]);
  assign mux_432_nl = MUX_s_1_2_2(or_tmp_68, nor_419_cse, fsm_output[1]);
  assign mux_431_nl = MUX_s_1_2_2(or_tmp_68, and_878_cse, fsm_output[1]);
  assign mux_433_nl = MUX_s_1_2_2(mux_432_nl, mux_431_nl, fsm_output[0]);
  assign and_889_nl = ((fsm_output[1]) | (fsm_output[5])) & (fsm_output[8]);
  assign or_667_nl = (LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp
      & (z_out_37[4]) & (z_out_22[4]) & (z_out_36[4]) & LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp
      & (~ (fsm_output[1])) & (~ (fsm_output[5]))) | (fsm_output[8]);
  assign mux_430_nl = MUX_s_1_2_2(and_889_nl, or_667_nl, fsm_output[0]);
  assign mux_434_nl = MUX_s_1_2_2(mux_433_nl, mux_430_nl, fsm_output[2]);
  assign mux_435_nl = MUX_s_1_2_2(mux_434_nl, (fsm_output[8]), or_616_cse);
  assign mux_441_nl = MUX_s_1_2_2(mux_440_nl, mux_435_nl, fsm_output[6]);
  assign or_662_nl = and_850_cse | (fsm_output[5]) | (fsm_output[8]);
  assign or_661_nl = nor_414_cse | (fsm_output[5]) | (fsm_output[8]);
  assign mux_428_nl = MUX_s_1_2_2(or_662_nl, or_661_nl, fsm_output[2]);
  assign or_663_nl = (fsm_output[4]) | mux_428_nl;
  assign or_659_nl = (fsm_output[4]) | (~ (fsm_output[2])) | (~ (fsm_output[1]))
      | (fsm_output[5]) | (fsm_output[8]);
  assign mux_429_nl = MUX_s_1_2_2(or_663_nl, or_659_nl, fsm_output[3]);
  assign or_664_nl = (fsm_output[6]) | mux_429_nl;
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c5 = MUX_s_1_2_2(mux_441_nl,
      or_664_nl, fsm_output[7]);
  assign or_718_nl = (~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[7]))
      | (fsm_output[4]) | (~ (fsm_output[3]));
  assign or_716_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[4]) | (fsm_output[3]);
  assign mux_491_nl = MUX_s_1_2_2(or_718_nl, or_716_nl, fsm_output[2]);
  assign or_1335_nl = (fsm_output[6]) | mux_491_nl;
  assign or_1336_nl = (~ (fsm_output[6])) | (~ (fsm_output[2])) | (fsm_output[0])
      | (~((fsm_output[1]) & (fsm_output[7]) & (fsm_output[4]) & (fsm_output[3])));
  assign mux_492_nl = MUX_s_1_2_2(or_1335_nl, or_1336_nl, fsm_output[5]);
  assign attention_sqrt_1_for_i_4_0_sva_mx0c3 = ~(mux_492_nl | (fsm_output[8]));
  assign attention_sqrt_1_guess_sva_29_0_mx0c0 = and_dcpl_356 & and_dcpl_160;
  assign attention_sqrt_1_guess_sva_29_0_mx0c2 = and_dcpl_173 & and_dcpl_316;
  assign attention_sqrt_1_guess_sva_29_0_mx0c3 = and_dcpl_276 & and_dcpl_185;
  assign mux_531_nl = MUX_s_1_2_2(or_tmp_207, or_tmp_76, fsm_output[0]);
  assign nor_453_nl = ~((fsm_output[6]) | (fsm_output[2]) | mux_531_nl);
  assign nor_454_nl = ~((~ (fsm_output[6])) | (~ (fsm_output[2])) | (fsm_output[0])
      | (~ (fsm_output[4])) | (fsm_output[3]));
  assign mux_532_nl = MUX_s_1_2_2(nor_453_nl, nor_454_nl, fsm_output[5]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1
      = mux_532_nl & and_dcpl_19 & (fsm_output[1]);
  assign or_774_nl = (fsm_output[2:0]!=3'b000) | or_dcpl_109;
  assign mux_533_nl = MUX_s_1_2_2(or_774_nl, mux_tmp_283, fsm_output[6]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2
      = (~ mux_533_nl) & and_dcpl_19 & (~ (fsm_output[5]));
  assign nor_455_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[0])) | (fsm_output[1])
      | (fsm_output[7]) | (~ (fsm_output[8])) | (fsm_output[4]) | (fsm_output[3]));
  assign nor_456_nl = ~((fsm_output[2]) | mux_tmp_356);
  assign mux_534_nl = MUX_s_1_2_2(nor_455_nl, nor_456_nl, fsm_output[5]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c5
      = mux_534_nl & (fsm_output[6]);
  assign or_1340_nl = (~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[3]));
  assign or_1341_nl = (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[3]);
  assign mux_548_nl = MUX_s_1_2_2(or_1340_nl, or_1341_nl, fsm_output[2]);
  assign GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c4
      = (~(mux_548_nl | (fsm_output[4]))) & and_dcpl_6 & and_dcpl_28;
  assign nand_202_nl = ~((fsm_output[0]) & (fsm_output[4]) & (fsm_output[3]));
  assign mux_553_nl = MUX_s_1_2_2(nand_202_nl, or_dcpl_156, fsm_output[6]);
  assign mux_550_nl = MUX_s_1_2_2((fsm_output[4]), or_616_cse, fsm_output[1]);
  assign mux_551_nl = MUX_s_1_2_2((~ mux_550_nl), or_616_cse, fsm_output[0]);
  assign mux_549_nl = MUX_s_1_2_2(nor_581_cse, or_616_cse, fsm_output[0]);
  assign mux_552_nl = MUX_s_1_2_2(mux_551_nl, mux_549_nl, fsm_output[2]);
  assign or_801_nl = (fsm_output[6]) | mux_552_nl;
  assign mux_554_nl = MUX_s_1_2_2(mux_553_nl, or_801_nl, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c7
      = (~ mux_554_nl) & and_dcpl_19;
  assign GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c9
      = and_dcpl_247 & (fsm_output[7]) & ((fsm_output[4]) ^ (fsm_output[0])) & (fsm_output[2:1]==2'b10)
      & and_dcpl_28;
  assign GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c10
      = and_dcpl_232 & and_dcpl_19 & and_dcpl_266;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c0 = and_dcpl_104 & and_dcpl_210;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c2 = and_dcpl_161 & and_dcpl_194;
  assign nor_486_nl = ~((fsm_output[2]) | (fsm_output[0]) | (~((fsm_output[1]) &
      (fsm_output[8]) & (fsm_output[4]))));
  assign nor_487_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[0])) | (fsm_output[1])
      | (fsm_output[8]) | (fsm_output[4]));
  assign mux_620_nl = MUX_s_1_2_2(nor_486_nl, nor_487_nl, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c0 = mux_620_nl & and_dcpl_458 & (~
      (fsm_output[6]));
  assign nor_630_nl = ~((~ (fsm_output[6])) | (fsm_output[2]) | (fsm_output[4]) |
      (fsm_output[3]));
  assign nor_631_nl = ~((fsm_output[6]) | nor_581_cse);
  assign mux_621_nl = MUX_s_1_2_2(nor_630_nl, nor_631_nl, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c2 = mux_621_nl & and_dcpl_19 & and_850_cse;
  assign nor_496_nl = ~((~ (fsm_output[6])) | (fsm_output[2]) | (fsm_output[1]) |
      (fsm_output[8]) | (fsm_output[4]) | (fsm_output[3]));
  assign nor_497_nl = ~((fsm_output[6]) | (~((fsm_output[2]) & (fsm_output[1]) &
      (fsm_output[8]) & (fsm_output[4]) & (fsm_output[3]))));
  assign mux_653_nl = MUX_s_1_2_2(nor_496_nl, nor_497_nl, fsm_output[5]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c0 = mux_653_nl & and_dcpl_144;
  assign nand_211_nl = ~((fsm_output[2]) & (fsm_output[6]));
  assign mux_655_nl = MUX_s_1_2_2(nand_211_nl, or_614_cse, or_tmp_726);
  assign or_952_nl = (fsm_output[3]) | mux_655_nl;
  assign or_949_nl = (fsm_output[3]) | (~ (fsm_output[1])) | (~ (fsm_output[8]))
      | (fsm_output[2]) | (~ (fsm_output[6]));
  assign mux_656_nl = MUX_s_1_2_2(or_952_nl, or_949_nl, fsm_output[5]);
  assign or_947_nl = (fsm_output[5]) | (fsm_output[3]) | (fsm_output[1]) | (fsm_output[8])
      | (fsm_output[2]) | (fsm_output[6]);
  assign mux_657_nl = MUX_s_1_2_2(mux_656_nl, or_947_nl, fsm_output[7]);
  assign nor_499_nl = ~((fsm_output[4]) | mux_657_nl);
  assign and_918_nl = (fsm_output[1]) & (fsm_output[8]) & (fsm_output[2]) & (~ (fsm_output[6]));
  assign nor_498_nl = ~((fsm_output[1]) | (fsm_output[8]) | (fsm_output[2]) | (fsm_output[6]));
  assign mux_654_nl = MUX_s_1_2_2(and_918_nl, nor_498_nl, fsm_output[3]);
  assign and_919_nl = (~((~ (fsm_output[4])) | (fsm_output[7]) | (~ (fsm_output[5]))))
      & mux_654_nl;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c1 = MUX_s_1_2_2(nor_499_nl, and_919_nl,
      fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0 = and_929_cse & (~ (fsm_output[7]))
      & xor_dcpl_4 & and_dcpl_238;
  assign nand_216_nl = ~((fsm_output[0]) & (fsm_output[1]) & (fsm_output[8]));
  assign or_1348_nl = nor_414_cse | (fsm_output[8]);
  assign mux_692_nl = MUX_s_1_2_2(nand_216_nl, or_1348_nl, fsm_output[2]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c1 = (~(mux_692_nl | (fsm_output[3])))
      & and_dcpl_1 & and_dcpl_28;
  assign mux_715_nl = MUX_s_1_2_2(or_dcpl_109, mux_tmp_238, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx0c2 = (~ mux_715_nl) & and_dcpl_606;
  assign mux_721_nl = MUX_s_1_2_2(or_dcpl_109, nor_tmp_171, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_mx0c2 = (~ mux_721_nl) &
      and_dcpl_606;
  assign nor_520_nl = ~((~((~ (fsm_output[2])) | CACHE_UPDATE_LOOP_1_and_cse)) |
      (fsm_output[0]) | (~ (fsm_output[7])) | (fsm_output[4]) | (fsm_output[5]));
  assign nor_521_nl = ~((~ (fsm_output[0])) | (~ CACHE_UPDATE_LOOP_1_and_cse) | (~
      (fsm_output[7])) | (fsm_output[4]) | (fsm_output[5]));
  assign nor_522_nl = ~((~ (fsm_output[0])) | (~ (z_out_37[3])) | (~ (fsm_output[7]))
      | (fsm_output[4]) | (fsm_output[5]));
  assign mux_723_nl = MUX_s_1_2_2(nor_521_nl, nor_522_nl, fsm_output[2]);
  assign mux_724_nl = MUX_s_1_2_2(nor_520_nl, mux_723_nl, fsm_output[3]);
  assign nor_519_nl = ~((fsm_output[7]) | (fsm_output[4]) | (fsm_output[5]));
  assign and_931_nl = (fsm_output[7]) & (fsm_output[4]) & (fsm_output[5]);
  assign mux_722_nl = MUX_s_1_2_2(nor_519_nl, and_931_nl, fsm_output[0]);
  assign nor_523_nl = ~((fsm_output[3]) | (~((fsm_output[2]) & mux_722_nl)));
  assign mux_725_nl = MUX_s_1_2_2(mux_724_nl, nor_523_nl, fsm_output[6]);
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c0 = mux_725_nl & nor_439_cse;
  assign or_1062_nl = (~ (fsm_output[2])) | CACHE_UPDATE_LOOP_1_and_cse | (fsm_output[6:4]!=3'b000);
  assign or_1061_nl = (fsm_output[2]) | (~ (fsm_output[4])) | (fsm_output[5]) | (fsm_output[6]);
  assign mux_751_nl = MUX_s_1_2_2(or_1062_nl, or_1061_nl, fsm_output[1]);
  assign nor_531_nl = ~((fsm_output[3]) | mux_751_nl);
  assign or_1350_nl = CACHE_UPDATE_LOOP_1_and_cse | (fsm_output[6:5]!=2'b00);
  assign mux_749_nl = MUX_s_1_2_2(or_1350_nl, nand_158_cse, fsm_output[4]);
  assign or_1058_nl = (z_out_37[3]) | (fsm_output[6:4]!=3'b000);
  assign mux_750_nl = MUX_s_1_2_2(mux_749_nl, or_1058_nl, fsm_output[2]);
  assign nor_532_nl = ~((~ (fsm_output[3])) | (fsm_output[1]) | mux_750_nl);
  assign mux_752_nl = MUX_s_1_2_2(nor_531_nl, nor_532_nl, fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c3 = mux_752_nl & and_dcpl_19;
  assign or_1076_nl = (~ (fsm_output[7])) | (fsm_output[2]);
  assign or_1075_nl = (fsm_output[7]) | (~ (fsm_output[2]));
  assign mux_756_nl = MUX_s_1_2_2(or_1076_nl, or_1075_nl, fsm_output[6]);
  assign nor_533_nl = ~((fsm_output[0]) | mux_756_nl);
  assign nor_534_nl = ~((~ (fsm_output[0])) | (fsm_output[6]) | not_tmp_460);
  assign mux_757_nl = MUX_s_1_2_2(nor_533_nl, nor_534_nl, fsm_output[3]);
  assign nor_535_nl = ~((fsm_output[3]) | (fsm_output[0]) | (~ (fsm_output[6])) |
      (~ (fsm_output[7])) | (fsm_output[2]));
  assign mux_758_nl = MUX_s_1_2_2(mux_757_nl, nor_535_nl, fsm_output[4]);
  assign and_935_nl = (fsm_output[3]) & (fsm_output[0]) & (fsm_output[6]) & (fsm_output[7])
      & (~ (fsm_output[2]));
  assign nor_536_nl = ~((fsm_output[6]) | (~ (fsm_output[7])) | (fsm_output[2]));
  assign nor_537_nl = ~((fsm_output[6]) | not_tmp_460);
  assign mux_753_nl = MUX_s_1_2_2(nor_536_nl, nor_537_nl, fsm_output[0]);
  assign nor_538_nl = ~((fsm_output[0]) | (~ (fsm_output[6])) | (~ (fsm_output[7]))
      | (fsm_output[2]));
  assign mux_754_nl = MUX_s_1_2_2(mux_753_nl, nor_538_nl, fsm_output[3]);
  assign mux_755_nl = MUX_s_1_2_2(and_935_nl, mux_754_nl, fsm_output[4]);
  assign mux_759_nl = MUX_s_1_2_2(mux_758_nl, mux_755_nl, fsm_output[1]);
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0 = mux_759_nl & nor_419_cse;
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c4 = and_dcpl_233 & (~((fsm_output[1])
      ^ (fsm_output[6]))) & (fsm_output[7]) & (fsm_output[0]) & and_dcpl_378;
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5 = and_dcpl_103 & and_dcpl_204 & and_882_cse
      & (~((fsm_output[0]) ^ (fsm_output[5])));
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c6 = and_dcpl_195 & and_dcpl_259;
  assign or_1098_nl = (fsm_output[6:2]!=5'b10001);
  assign mux_779_nl = MUX_s_1_2_2(or_1328_cse, and_850_cse, fsm_output[4]);
  assign nor_544_nl = ~((fsm_output[1:0]!=2'b01));
  assign mux_778_nl = MUX_s_1_2_2(nor_544_nl, and_850_cse, fsm_output[4]);
  assign mux_780_nl = MUX_s_1_2_2((~ mux_779_nl), mux_778_nl, fsm_output[2]);
  assign or_1095_nl = (fsm_output[4]) | (fsm_output[0]) | (fsm_output[1]);
  assign mux_777_nl = MUX_s_1_2_2((fsm_output[4]), or_1095_nl, fsm_output[2]);
  assign mux_781_nl = MUX_s_1_2_2(mux_780_nl, mux_777_nl, fsm_output[3]);
  assign nor_545_nl = ~((fsm_output[5]) | mux_781_nl);
  assign and_942_nl = (fsm_output[4]) & mux_797_cse;
  assign and_943_nl = (fsm_output[4]) & or_1328_cse;
  assign mux_774_nl = MUX_s_1_2_2(and_942_nl, and_943_nl, fsm_output[2]);
  assign nor_547_nl = ~((~((fsm_output[4]) | (fsm_output[0]))) | (fsm_output[1]));
  assign nor_548_nl = ~((fsm_output[4]) | (fsm_output[0]) | (~ (fsm_output[1])));
  assign mux_772_nl = MUX_s_1_2_2(nor_547_nl, nor_548_nl, fsm_output[2]);
  assign mux_775_nl = MUX_s_1_2_2(mux_774_nl, mux_772_nl, fsm_output[3]);
  assign or_1089_nl = (fsm_output[2]) | (fsm_output[4]) | nor_83_cse;
  assign mux_771_nl = MUX_s_1_2_2((fsm_output[4]), or_1089_nl, fsm_output[3]);
  assign mux_776_nl = MUX_s_1_2_2(mux_775_nl, mux_771_nl, fsm_output[5]);
  assign mux_782_nl = MUX_s_1_2_2(nor_545_nl, mux_776_nl, fsm_output[6]);
  assign mux_783_nl = MUX_s_1_2_2(or_1098_nl, mux_782_nl, fsm_output[7]);
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c7 = mux_783_nl | (fsm_output[8]);
  assign mux_809_nl = MUX_s_1_2_2(or_dcpl_109, mux_tmp_808, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_mx1c2 = (~ mux_809_nl)
      & and_dcpl_606;
  assign and_nl = (fsm_output[6]) & (~ mux_tmp_238);
  assign mux_868_nl = MUX_s_1_2_2(and_dcpl_102, mux_tmp_260, or_369_cse);
  assign nor_632_nl = ~((fsm_output[6]) | (~ mux_868_nl));
  assign mux_869_nl = MUX_s_1_2_2(and_nl, nor_632_nl, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_mx0c1 = mux_869_nl & and_dcpl_19;
  assign mux_881_nl = MUX_s_1_2_2(and_745_cse, (fsm_output[2]), fsm_output[3]);
  assign mux_882_nl = MUX_s_1_2_2((~ or_1283_cse), mux_881_nl, fsm_output[0]);
  assign and_692_nl = (fsm_output[5]) & mux_882_nl;
  assign mux_879_nl = MUX_s_1_2_2(or_1283_cse, (fsm_output[2]), fsm_output[3]);
  assign mux_880_nl = MUX_s_1_2_2(and_929_cse, mux_879_nl, fsm_output[5]);
  assign mux_883_nl = MUX_s_1_2_2(and_692_nl, mux_880_nl, fsm_output[1]);
  assign or_1204_nl = (fsm_output[2]) | (fsm_output[4]);
  assign mux_876_nl = MUX_s_1_2_2(or_1204_nl, or_tmp_979, fsm_output[0]);
  assign or_1203_nl = (~ (fsm_output[0])) | (fsm_output[3]) | (fsm_output[2]) | (~
      (fsm_output[4]));
  assign mux_877_nl = MUX_s_1_2_2(mux_876_nl, or_1203_nl, fsm_output[5]);
  assign or_1200_nl = (fsm_output[0]) | (fsm_output[3]) | (fsm_output[2]) | (~ (fsm_output[4]));
  assign mux_875_nl = MUX_s_1_2_2(or_tmp_979, or_1200_nl, fsm_output[5]);
  assign mux_878_nl = MUX_s_1_2_2(mux_877_nl, mux_875_nl, fsm_output[1]);
  assign mux_884_nl = MUX_s_1_2_2(mux_883_nl, (~ mux_878_nl), fsm_output[6]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0c1 = mux_884_nl & and_dcpl_19;
  assign mux_902_nl = MUX_s_1_2_2(or_tmp_207, or_616_cse, or_369_cse);
  assign mux_903_nl = MUX_s_1_2_2((~ and_944_cse), mux_902_nl, fsm_output[6]);
  assign mux_899_nl = MUX_s_1_2_2((~ mux_tmp_260), or_tmp_76, or_1328_cse);
  assign mux_900_nl = MUX_s_1_2_2(mux_899_nl, (fsm_output[3]), fsm_output[2]);
  assign mux_898_nl = MUX_s_1_2_2(or_tmp_313, or_tmp_911, fsm_output[2]);
  assign mux_901_nl = MUX_s_1_2_2(mux_900_nl, mux_898_nl, fsm_output[6]);
  assign mux_904_nl = MUX_s_1_2_2(mux_903_nl, mux_901_nl, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_mx0c1 = (~ mux_904_nl) & and_dcpl_19;
  assign nor_588_nl = ~(CACHE_UPDATE_LOOP_1_and_cse | (fsm_output[6]) | (~ (fsm_output[2]))
      | (fsm_output[5]));
  assign nor_589_nl = ~((z_out_35[3]) | not_tmp_552);
  assign mux_927_nl = MUX_s_1_2_2(nor_588_nl, nor_589_nl, fsm_output[3]);
  assign nor_590_nl = ~((fsm_output[3]) | (z_out_35[3]) | (~ (fsm_output[6])) | (fsm_output[2])
      | (fsm_output[5]));
  assign mux_928_nl = MUX_s_1_2_2(mux_927_nl, nor_590_nl, fsm_output[4]);
  assign nor_591_nl = ~((fsm_output[4:3]!=2'b10) | CACHE_UPDATE_LOOP_1_and_cse |
      (fsm_output[6]) | (fsm_output[2]) | (fsm_output[5]));
  assign mux_929_nl = MUX_s_1_2_2(mux_928_nl, nor_591_nl, fsm_output[1]);
  assign nor_592_nl = ~((~ (fsm_output[3])) | (fsm_output[6]) | (fsm_output[2]) |
      (fsm_output[5]));
  assign nor_593_nl = ~((fsm_output[3]) | not_tmp_552);
  assign mux_925_nl = MUX_s_1_2_2(nor_592_nl, nor_593_nl, fsm_output[4]);
  assign nor_594_nl = ~((~ (fsm_output[3])) | (z_out_35[3]) | (~ (fsm_output[6]))
      | (fsm_output[2]) | (fsm_output[5]));
  assign nor_595_nl = ~((fsm_output[3]) | (z_out_35[3]) | (fsm_output[6]) | (~ (fsm_output[2]))
      | (fsm_output[5]));
  assign mux_924_nl = MUX_s_1_2_2(nor_594_nl, nor_595_nl, fsm_output[4]);
  assign mux_926_nl = MUX_s_1_2_2(mux_925_nl, mux_924_nl, fsm_output[1]);
  assign mux_930_nl = MUX_s_1_2_2(mux_929_nl, mux_926_nl, fsm_output[0]);
  assign GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1 = mux_930_nl & and_dcpl_19;
  assign nor_380_nl = ~((fsm_output[6]) | (fsm_output[1]) | (fsm_output[7]) | (~
      (fsm_output[8])));
  assign nor_381_nl = ~((~ (fsm_output[6])) | (fsm_output[0]) | (~ (fsm_output[1]))
      | (~ (fsm_output[7])) | (fsm_output[8]));
  assign mux_274_nl = MUX_s_1_2_2(nor_380_nl, nor_381_nl, fsm_output[5]);
  assign and_254_ssc = mux_274_nl & and_929_cse & (~ (fsm_output[2]));
  assign and_255_ssc = and_dcpl_111 & and_dcpl_194;
  assign and_257_ssc = and_dcpl_161 & and_dcpl_238;
  assign ATTN_2D_LOOP_3_or_cse = and_257_ssc | and_dcpl_240 | and_dcpl_241 | and_dcpl_211;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse = and_dcpl_275 | and_dcpl_277 | and_dcpl_278
      | and_dcpl_279;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse = and_dcpl_281 | and_dcpl_282 |
      and_dcpl_284 | and_dcpl_285;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse = and_dcpl_292 | and_dcpl_321 |
      and_dcpl_322 | and_dcpl_323 | and_dcpl_324;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse = and_dcpl_299 | and_dcpl_300 |
      and_dcpl_301 | and_dcpl_302;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse = and_dcpl_304 | and_dcpl_305 |
      and_dcpl_306 | and_dcpl_307 | and_dcpl_308;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse = and_dcpl_310 | and_dcpl_311 |
      and_dcpl_312 | and_dcpl_313;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_cse = and_dcpl_315 | and_dcpl_317 |
      and_dcpl_318 | and_dcpl_319;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_57_cse = and_dcpl_293 | and_dcpl_294 |
      and_dcpl_295 | and_dcpl_296 | and_dcpl_297;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_38_cse = and_dcpl_277 | and_dcpl_295 |
      and_dcpl_311;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_39_cse = and_dcpl_289 | and_dcpl_306 |
      and_dcpl_323;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_41_cse = and_dcpl_275 | and_dcpl_285 |
      and_dcpl_294 | and_dcpl_302 | and_dcpl_310 | and_dcpl_319;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_43_cse = and_dcpl_281 | and_dcpl_290 |
      and_dcpl_299 | and_dcpl_307 | and_dcpl_315 | and_dcpl_324;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_48_cse = and_dcpl_279 | and_dcpl_284 |
      and_dcpl_288 | and_dcpl_297 | and_dcpl_301 | and_dcpl_305 | and_dcpl_313 |
      and_dcpl_318 | and_dcpl_322;
  assign and_461_ssc = not_tmp_260 & and_dcpl_102 & and_dcpl_138;
  assign and_462_ssc = and_dcpl_157 & and_dcpl_135;
  assign and_463_ssc = and_dcpl_396 & and_dcpl_238;
  assign for_for_or_cse = and_463_ssc | and_dcpl_445 | and_dcpl_446 | and_dcpl_404;
  assign mux_330_nl = MUX_s_1_2_2((~ mux_328_itm), or_tmp_354, fsm_output[2]);
  assign mux_327_nl = MUX_s_1_2_2(or_tmp_354, (fsm_output[1]), fsm_output[0]);
  assign mux_329_nl = MUX_s_1_2_2((~ mux_328_itm), mux_327_nl, fsm_output[2]);
  assign and_868_nl = (SF_LOOP_3_acc_5_psp_sva_8_0[0]) & SF_LOOP_3_acc_5_psp_sva_9
      & (SF_LOOP_3_acc_5_psp_sva_8_0[8:1]==8'b11111111);
  assign mux_331_nl = MUX_s_1_2_2(mux_330_nl, mux_329_nl, and_868_nl);
  assign SF_LOOP_3_SF_LOOP_3_or_31_nl = mux_331_nl | (~ (fsm_output[3])) | (fsm_output[8])
      | (fsm_output[7]) | (fsm_output[6]) | (~ (fsm_output[5]));
  assign input_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_31_nl};
  assign or_1329_nl = (fsm_output[2]) | (~ (fsm_output[0])) | (fsm_output[3]);
  assign or_1330_nl = (~ (fsm_output[2])) | (fsm_output[0]) | (~ (fsm_output[3]));
  assign mux_326_nl = MUX_s_1_2_2(or_1329_nl, or_1330_nl, fsm_output[5]);
  assign for_for_nand_nl = ~((~(mux_326_nl | (fsm_output[4]))) & and_dcpl_6 & (~((fsm_output[1])
      | (fsm_output[6]))));
  assign input_rsci_we_d = {1'b1 , for_for_nand_nl};
  assign mux_322_nl = MUX_s_1_2_2(or_tmp_349, or_tmp_348, fsm_output[5]);
  assign mux_320_nl = MUX_s_1_2_2((~ (fsm_output[1])), (fsm_output[1]), fsm_output[2]);
  assign mux_321_nl = MUX_s_1_2_2(mux_320_nl, or_tmp_348, fsm_output[5]);
  assign mux_323_nl = MUX_s_1_2_2(mux_322_nl, mux_321_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign SF_LOOP_3_SF_LOOP_3_or_29_nl = mux_323_nl | (fsm_output[3]) | or_dcpl_179
      | (~((fsm_output[0]) & (fsm_output[6])));
  assign output_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_29_nl};
  assign mux_318_nl = MUX_s_1_2_2((~ (fsm_output[0])), (fsm_output[0]), fsm_output[2]);
  assign or_528_nl = (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1) | (fsm_output[5]);
  assign mux_319_nl = MUX_s_1_2_2(mux_318_nl, or_dcpl_133, or_528_nl);
  assign SF_LOOP_3_SF_LOOP_3_or_28_nl = mux_319_nl | (fsm_output[3]) | or_dcpl_179
      | (fsm_output[1]) | (~ (fsm_output[6]));
  assign output_rsci_we_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_28_nl};
  assign mux_316_cse = MUX_s_1_2_2(z_out_55_0, (~ z_out_55_0), z_out_55_1);
  assign and_2251_nl = (fsm_output[0]) & mux_316_cse;
  assign mux_317_nl = MUX_s_1_2_2(and_2251_nl, mux_316_cse, fsm_output[1]);
  assign QUANTIZE_ACTIVATION_LOOP_5_nand_1_nl = ~(mux_317_nl & and_dcpl_384 & and_dcpl_399
      & (~ (fsm_output[5])) & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d = {1'b1 , QUANTIZE_ACTIVATION_LOOP_5_nand_1_nl};
  assign nor_386_nl = ~((~ (fsm_output[6])) | (fsm_output[2]) | (fsm_output[0]) |
      (fsm_output[1]) | (fsm_output[4]) | (fsm_output[3]));
  assign nor_387_nl = ~((fsm_output[6]) | not_tmp_215);
  assign mux_312_nl = MUX_s_1_2_2(nor_386_nl, nor_387_nl, fsm_output[5]);
  assign QUANTIZE_ACTIVATION_LOOP_5_nand_nl = ~(mux_312_nl & and_dcpl_6);
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d = {1'b1 , QUANTIZE_ACTIVATION_LOOP_5_nand_nl};
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_24_rmff};
  assign nor_384_nl = ~((fsm_output[2]) | (~ (fsm_output[0])) | (fsm_output[4]) |
      (fsm_output[3]));
  assign mux_308_nl = MUX_s_1_2_2(nor_384_nl, nor_tmp_98, fsm_output[5]);
  assign or_518_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (fsm_output[3]);
  assign mux_306_nl = MUX_s_1_2_2(or_518_nl, or_dcpl_156, fsm_output[2]);
  assign mux_307_nl = MUX_s_1_2_2((~ mux_306_nl), nor_tmp_98, fsm_output[5]);
  assign mux_309_nl = MUX_s_1_2_2(mux_308_nl, mux_307_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign SF_LOOP_3_SF_LOOP_3_or_25_nl = (~ mux_309_nl) | or_629_cse | nand_170_cse;
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_we_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_25_nl};
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_24_rmff};
  assign mux_299_nl = MUX_s_1_2_2((~ and_850_cse), or_tmp_324, fsm_output[5]);
  assign mux_300_nl = MUX_s_1_2_2(mux_tmp_291, mux_299_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign SF_LOOP_3_SF_LOOP_3_or_23_nl = mux_300_nl | or_dcpl_166;
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_we_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_23_nl};
  assign or_500_nl = (fsm_output[2]) | (fsm_output[0]) | (fsm_output[1]) | (fsm_output[7])
      | (~ (fsm_output[3]));
  assign mux_295_nl = MUX_s_1_2_2(or_tmp_329, or_500_nl, fsm_output[6]);
  assign or_497_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[7]) | (~ (fsm_output[3]));
  assign or_495_nl = (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[7]) | (fsm_output[3]);
  assign mux_293_nl = MUX_s_1_2_2(or_497_nl, or_495_nl, fsm_output[2]);
  assign mux_294_nl = MUX_s_1_2_2(or_tmp_329, mux_293_nl, fsm_output[6]);
  assign mux_296_nl = MUX_s_1_2_2(mux_295_nl, mux_294_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign SF_LOOP_3_SF_LOOP_3_or_22_nl = mux_296_nl | or_586_cse | (fsm_output[5]);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_22_nl};
  assign mux_289_nl = MUX_s_1_2_2((~ and_850_cse), or_1327_cse, fsm_output[2]);
  assign mux_290_nl = MUX_s_1_2_2(mux_289_nl, or_tmp_324, fsm_output[5]);
  assign mux_292_nl = MUX_s_1_2_2(mux_tmp_291, mux_290_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2);
  assign SF_LOOP_3_SF_LOOP_3_or_21_nl = mux_292_nl | or_dcpl_166;
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_we_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_21_nl};
  assign attention_5_1_384_384_8_48_q_proj_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_20_rmff};
  assign attention_5_1_384_384_8_48_q_proj_rsci_we_d = {1'b1 , (~ and_dcpl_342)};
  assign attention_5_1_384_384_8_48_k_proj_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_20_rmff};
  assign attention_5_1_384_384_8_48_k_proj_rsci_we_d = {1'b1 , (~ and_dcpl_342)};
  assign RESHAPE_2D_TO_3D_LOOP_3_2_nand_nl = ~(and_dcpl_335 & and_dcpl_332 & reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1
      & (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd==2'b10));
  assign attention_5_1_384_384_8_48_v_proj_rsci_re_d = {1'b1 , RESHAPE_2D_TO_3D_LOOP_3_2_nand_nl};
  assign attention_5_1_384_384_8_48_v_proj_rsci_we_d = {1'b1 , (~ and_dcpl_197)};
  assign attention_5_1_384_384_8_48_q_embed_rsci_re_d = {1'b1 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_nand_rmff};
  assign attention_5_1_384_384_8_48_q_embed_rsci_we_d = {1'b1 , (~ and_dcpl_329)};
  assign APPLY_ROTARY_POS_EMB_LOOP_6_nand_nl = ~(and_dcpl_335 & and_dcpl_332 & (attention_sqrt_1_for_i_4_0_sva_2_0==3'b101));
  assign attention_5_1_384_384_8_48_k_embed_rsci_re_d = {1'b1 , APPLY_ROTARY_POS_EMB_LOOP_6_nand_nl};
  assign attention_5_1_384_384_8_48_k_embed_rsci_we_d = {1'b1 , (~ and_dcpl_329)};
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d = {1'b1 , (~ and_dcpl_328)};
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d = {1'b1 , (~ and_dcpl_325)};
  assign CACHE_UPDATE_LOOP_3_1_nand_nl = ~((~ mux_tmp_277) & and_dcpl_19 & and_893_cse);
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d = {1'b1 , CACHE_UPDATE_LOOP_3_1_nand_nl};
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d = {1'b1 , (~ and_dcpl_325)};
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d = {1'b1 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_nand_rmff};
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d = {1'b1 , (~ and_dcpl_272)};
  assign mux_279_nl = MUX_s_1_2_2(and_dcpl_232, (fsm_output[4]), fsm_output[1]);
  assign nand_168_nl = ~((fsm_output[0]) & mux_279_nl);
  assign mux_280_nl = MUX_s_1_2_2(nand_168_nl, mux_tmp_278, fsm_output[2]);
  assign mux_281_nl = MUX_s_1_2_2(mux_280_nl, mux_tmp_277, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_nand_1_nl = ~((~ mux_281_nl) & and_dcpl_176);
  assign attention_5_1_384_384_8_48_attn_weights_rsci_re_d = {1'b1 , GEMM_3D_FLOAT_LOOP_4_nand_1_nl};
  assign or_469_nl = (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[4]);
  assign mux_275_nl = MUX_s_1_2_2(or_1327_cse, or_469_nl, fsm_output[2]);
  assign or_468_nl = (fsm_output[2]) | (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[4]);
  assign mux_276_nl = MUX_s_1_2_2(mux_275_nl, or_468_nl, fsm_output[5]);
  assign GEMM_3D_FLOAT_LOOP_4_nand_nl = ~((~ mux_276_nl) & and_dcpl_247 & (fsm_output[7:6]==2'b11));
  assign attention_5_1_384_384_8_48_attn_weights_rsci_we_d = {1'b1 , GEMM_3D_FLOAT_LOOP_4_nand_nl};
  assign attention_5_1_384_384_8_48_attn_output_rsci_re_d = {1'b1 , (~ and_dcpl_245)};
  assign SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_nand_nl = ~(and_dcpl_234 & and_dcpl_243);
  assign attention_5_1_384_384_8_48_attn_output_rsci_we_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_nand_nl};
  assign nand_167_nl = ~((SF_LOOP_3_acc_5_psp_sva_8_0==9'b111111111) & SF_LOOP_3_acc_5_psp_sva_9
      & (fsm_output[8:6]==3'b100));
  assign mux_268_nl = MUX_s_1_2_2(or_455_cse, or_454_cse, fsm_output[6]);
  assign mux_269_nl = MUX_s_1_2_2(nand_167_nl, mux_268_nl, fsm_output[5]);
  assign mux_270_nl = MUX_s_1_2_2(or_412_cse, mux_269_nl, fsm_output[1]);
  assign or_453_nl = (fsm_output[8:5]!=4'b1001);
  assign mux_271_nl = MUX_s_1_2_2(mux_270_nl, or_453_nl, fsm_output[0]);
  assign SF_LOOP_3_SF_LOOP_3_or_5_nl = mux_271_nl | or_dcpl_109 | (fsm_output[2]);
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d = {1'b1 , SF_LOOP_3_SF_LOOP_3_or_5_nl};
  assign nor_375_nl = ~((fsm_output[6]) | (fsm_output[2]) | (fsm_output[1]) | (fsm_output[7])
      | (~ nor_tmp_95));
  assign nor_376_nl = ~((~ (fsm_output[6])) | (~ (fsm_output[2])) | (~ (fsm_output[1]))
      | (~ (fsm_output[7])) | (fsm_output[8]) | (fsm_output[3]));
  assign mux_267_nl = MUX_s_1_2_2(nor_375_nl, nor_376_nl, fsm_output[5]);
  assign ATTN_2D_LOOP_3_nand_nl = ~(mux_267_nl & (fsm_output[4]) & (fsm_output[0]));
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d = {1'b1 , ATTN_2D_LOOP_3_nand_nl};
  assign QUANTIZE_ACTIVATION_LOOP_5_1_nand_1_nl = ~(and_dcpl_208 & and_dcpl_205 &
      (z_out_55_0 ^ z_out_55_1) & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d = {1'b1 , QUANTIZE_ACTIVATION_LOOP_5_1_nand_1_nl};
  assign xor_cse = and_850_cse ^ (fsm_output[2]);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_nand_nl = ~(xor_cse & and_929_cse & and_dcpl_79
      & and_dcpl_98);
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d = {1'b1 , QUANTIZE_ACTIVATION_LOOP_5_1_nand_nl};
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d = {1'b1 , (~ and_dcpl_196)};
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d = {1'b1 , APPLY_ROTARY_POS_EMB_LOOP_3_nand_1_rmff};
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d = {1'b1 , (~ and_dcpl_196)};
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d = {1'b1 , APPLY_ROTARY_POS_EMB_LOOP_3_nand_1_rmff};
  assign input_rsci_data_in_d = MUX_v_40_2_2(({{10{strm_in_rsci_idat_mxwt[29]}},
      strm_in_rsci_idat_mxwt}), (z_out_10[67:28]), and_dcpl_447);
  assign for_for_mux1h_1_nl = MUX1HOT_v_3_3_2((reg_SF_LOOP_3_acc_38_1_ftd_2[8:6]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:6]), attention_sqrt_1_for_i_4_0_sva_2_0,
      {and_dcpl_440 , and_461_ssc , for_for_or_cse});
  assign for_for_not_1_nl = ~ and_462_ssc;
  assign for_for_and_1_nl = MUX_v_3_2_2(3'b000, for_for_mux1h_1_nl, for_for_not_1_nl);
  assign for_for_mux1h_5_nl = MUX1HOT_v_4_3_2((reg_SF_LOOP_3_acc_38_1_ftd_2[5:2]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[5:2]), APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt,
      {and_dcpl_440 , and_461_ssc , for_for_or_cse});
  assign for_for_not_2_nl = ~ and_462_ssc;
  assign for_for_and_2_nl = MUX_v_4_2_2(4'b0000, for_for_mux1h_5_nl, for_for_not_2_nl);
  assign for_for_mux1h_6_nl = MUX1HOT_v_2_4_2((reg_SF_LOOP_3_acc_38_1_ftd_2[1:0]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[1:0]), 2'b10, 2'b01, {and_dcpl_440
      , and_461_ssc , and_dcpl_445 , and_dcpl_446});
  assign for_for_nor_nl = ~(and_462_ssc | and_dcpl_404);
  assign for_for_and_3_nl = MUX_v_2_2_2(2'b00, for_for_mux1h_6_nl, for_for_nor_nl);
  assign for_for_or_2_nl = MUX_v_2_2_2(for_for_and_3_nl, 2'b11, and_463_ssc);
  assign input_rsci_addr_d = {for_for_and_1_nl , for_for_and_2_nl , for_for_or_2_nl};
  assign INIT_2D_MEM_LOOP_2_3_mux_nl = MUX_v_24_2_2((z_out_56[23:0]), (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[39:16]),
      and_447_ssc);
  assign not_2250_nl = ~ and_dcpl_419;
  assign INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_and_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      INIT_2D_MEM_LOOP_2_3_mux_nl, not_2250_nl);
  assign INIT_2D_MEM_LOOP_2_3_mux_1_nl = MUX_v_16_2_2((output_rsci_data_out_d[15:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[15:0]),
      and_447_ssc);
  assign not_2251_nl = ~ and_dcpl_419;
  assign INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_and_1_nl = MUX_v_16_2_2(16'b0000000000000000,
      INIT_2D_MEM_LOOP_2_3_mux_1_nl, not_2251_nl);
  assign output_rsci_data_in_d = {INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_and_nl
      , INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_and_1_nl};
  assign mux_325_nl = MUX_s_1_2_2(or_tmp_349, (fsm_output[2]), fsm_output[5]);
  assign INIT_2D_MEM_LOOP_2_3_or_nl = (not_tmp_260 & nor_581_cse & and_dcpl_79 &
      and_dcpl_28) | ((~ mux_325_nl) & nor_581_cse & and_dcpl_79 & (fsm_output[0])
      & (fsm_output[6]));
  assign output_rsci_addr_d = MUX_v_9_2_2(SF_LOOP_3_acc_45_itm_8_0, reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3,
      INIT_2D_MEM_LOOP_2_3_or_nl);
  assign QUANTIZE_ACTIVATION_LOOP_5_or_3_nl = (QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17
      & and_dcpl_404) | (QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17
      & and_dcpl_405);
  assign QUANTIZE_ACTIVATION_LOOP_5_or_4_nl = ((~((~ QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_404)
      | ((~((~ QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_405);
  assign QUANTIZE_ACTIVATION_LOOP_5_and_7_nl = (~ z_out_53_40) & QUANTIZE_ACTIVATION_LOOP_5_or_5_m1c;
  assign QUANTIZE_ACTIVATION_LOOP_5_and_8_nl = z_out_53_40 & QUANTIZE_ACTIVATION_LOOP_5_or_5_m1c;
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d = MUX1HOT_v_8_6_2(8'b10000000,
      8'b01111111, (z_out_8[7:0]), (z_out_50[7:0]), ({reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1 , reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2}),
      ({reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd , reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1
      , reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2}), {QUANTIZE_ACTIVATION_LOOP_5_or_3_nl
      , QUANTIZE_ACTIVATION_LOOP_5_or_4_nl , QUANTIZE_ACTIVATION_LOOP_5_and_7_nl
      , QUANTIZE_ACTIVATION_LOOP_5_and_8_nl , and_dcpl_406 , and_dcpl_407});
  assign QUANTIZE_ACTIVATION_LOOP_5_or_6_cse = and_dcpl_404 | and_dcpl_405 | and_dcpl_406
      | and_dcpl_407 | and_dcpl_395;
  assign QUANTIZE_ACTIVATION_LOOP_5_mux1h_4_nl = MUX1HOT_v_3_3_2(attention_sqrt_1_for_i_4_0_sva_2_0,
      ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}),
      ({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1}),
      {QUANTIZE_ACTIVATION_LOOP_5_or_6_cse , and_dcpl_373 , and_dcpl_388});
  assign QUANTIZE_ACTIVATION_LOOP_5_mux1h_7_nl = MUX1HOT_v_4_3_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt,
      GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva, APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      {QUANTIZE_ACTIVATION_LOOP_5_or_6_cse , and_dcpl_373 , and_dcpl_388});
  assign QUANTIZE_ACTIVATION_LOOP_5_mux1h_9_nl = MUX1HOT_v_2_5_2(2'b01, 2'b10, LINEAR_FORWARD_NO_MUL_LOOP_5_l_2_0_lpi_3_dfm_1_0_1,
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1, reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      {and_dcpl_404 , and_dcpl_406 , and_dcpl_373 , and_dcpl_395 , and_dcpl_388});
  assign not_2240_nl = ~ and_dcpl_405;
  assign QUANTIZE_ACTIVATION_LOOP_5_and_nl = MUX_v_2_2_2(2'b00, QUANTIZE_ACTIVATION_LOOP_5_mux1h_9_nl,
      not_2240_nl);
  assign QUANTIZE_ACTIVATION_LOOP_5_or_2_nl = MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_and_nl,
      2'b11, and_dcpl_407);
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d = {QUANTIZE_ACTIVATION_LOOP_5_mux1h_4_nl
      , QUANTIZE_ACTIVATION_LOOP_5_mux1h_7_nl , QUANTIZE_ACTIVATION_LOOP_5_or_2_nl};
  assign and_416_itm = and_dcpl_396 & and_dcpl_126;
  assign INIT_2D_MEM_LOOP_2_2_mux_4_nl = MUX_v_24_2_2((z_out_56[23:0]), (rms_norm_384_div_cmp_z[39:16]),
      and_416_itm);
  assign INIT_2D_MEM_LOOP_2_2_mux_7_nl = MUX_v_16_2_2((attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[15:0]),
      (rms_norm_384_div_cmp_z[15:0]), and_416_itm);
  assign not_2249_nl = ~ and_dcpl_366;
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d = MUX_v_40_2_2(40'b0000000000000000000000000000000000000000,
      ({INIT_2D_MEM_LOOP_2_2_mux_4_nl , INIT_2D_MEM_LOOP_2_2_mux_7_nl}), not_2249_nl);
  assign nor_385_nl = ~((fsm_output[2]) | (fsm_output[0]) | (fsm_output[1]) | (fsm_output[4]));
  assign and_867_nl = (fsm_output[2]) & (fsm_output[0]) & (fsm_output[1]) & (fsm_output[4]);
  assign mux_311_nl = MUX_s_1_2_2(nor_385_nl, and_867_nl, fsm_output[5]);
  assign INIT_2D_MEM_LOOP_2_or_cse = and_dcpl_368 | (mux_311_nl & and_dcpl_247 &
      (fsm_output[7:6]==2'b01));
  assign INIT_2D_MEM_LOOP_2_mux1h_2_nl = MUX1HOT_v_4_3_2((SF_LOOP_3_acc_45_itm_8_0[8:5]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:5]), z_out_23, {and_dcpl_366
      , INIT_2D_MEM_LOOP_2_or_cse , and_dcpl_387});
  assign INIT_2D_MEM_LOOP_2_mux1h_5_nl = MUX1HOT_s_1_3_2((SF_LOOP_3_acc_45_itm_8_0[4]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[4]), (z_out_14[0]), {and_dcpl_366
      , INIT_2D_MEM_LOOP_2_or_cse , and_dcpl_387});
  assign INIT_2D_MEM_LOOP_2_mux1h_7_nl = MUX1HOT_v_4_3_2((SF_LOOP_3_acc_45_itm_8_0[3:0]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[3:0]), ({reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2}), {and_dcpl_366 , INIT_2D_MEM_LOOP_2_or_cse
      , and_dcpl_387});
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d = {INIT_2D_MEM_LOOP_2_mux1h_2_nl
      , INIT_2D_MEM_LOOP_2_mux1h_5_nl , INIT_2D_MEM_LOOP_2_mux1h_7_nl};
  assign INIT_2D_MEM_LOOP_2_2_mux_2_nl = MUX_v_24_2_2((z_out_56[23:0]), (rms_norm_384_div_cmp_z[39:16]),
      and_dcpl_374);
  assign not_2247_nl = ~ and_dcpl_366;
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_2_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      INIT_2D_MEM_LOOP_2_2_mux_2_nl, not_2247_nl);
  assign INIT_2D_MEM_LOOP_2_2_mux_3_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[0]),
      (rms_norm_384_div_cmp_z[15]), and_dcpl_374);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_3_nl = INIT_2D_MEM_LOOP_2_2_mux_3_nl
      & (~ and_dcpl_366);
  assign INIT_2D_MEM_LOOP_2_2_mux_6_nl = MUX_v_15_2_2(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
      (rms_norm_384_div_cmp_z[14:0]), and_dcpl_374);
  assign not_2268_nl = ~ and_dcpl_366;
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_6_nl = MUX_v_15_2_2(15'b000000000000000,
      INIT_2D_MEM_LOOP_2_2_mux_6_nl, not_2268_nl);
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d = {INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_2_nl
      , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_3_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_6_nl};
  assign INIT_2D_MEM_LOOP_2_1_mux1h_3_nl = MUX1HOT_v_4_3_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:5]),
      (SF_LOOP_3_acc_45_itm_8_0[8:5]), z_out_26, {and_dcpl_366 , INIT_2D_MEM_LOOP_2_1_or_ssc
      , and_dcpl_387});
  assign INIT_2D_MEM_LOOP_2_1_mux1h_7_nl = MUX1HOT_s_1_3_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[4]),
      (SF_LOOP_3_acc_45_itm_8_0[4]), (z_out_18[0]), {and_dcpl_366 , INIT_2D_MEM_LOOP_2_1_or_ssc
      , and_dcpl_387});
  assign INIT_2D_MEM_LOOP_2_1_mux1h_8_nl = MUX1HOT_v_4_3_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[3:0]),
      (SF_LOOP_3_acc_45_itm_8_0[3:0]), ({reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1}),
      {and_dcpl_366 , INIT_2D_MEM_LOOP_2_1_or_ssc , and_dcpl_387});
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d = {INIT_2D_MEM_LOOP_2_1_mux1h_3_nl
      , INIT_2D_MEM_LOOP_2_1_mux1h_7_nl , INIT_2D_MEM_LOOP_2_1_mux1h_8_nl};
  assign INIT_2D_MEM_LOOP_2_2_mux_nl = MUX_v_24_2_2((z_out_56[23:0]), (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[39:16]),
      and_dcpl_374);
  assign not_2245_nl = ~ and_dcpl_366;
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      INIT_2D_MEM_LOOP_2_2_mux_nl, not_2245_nl);
  assign INIT_2D_MEM_LOOP_2_2_mux_1_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[15]),
      and_dcpl_374);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_1_nl = INIT_2D_MEM_LOOP_2_2_mux_1_nl
      & (~ and_dcpl_366);
  assign INIT_2D_MEM_LOOP_2_2_mux_5_nl = MUX_v_15_2_2(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[14:0]),
      and_dcpl_374);
  assign not_2267_nl = ~ and_dcpl_366;
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_5_nl = MUX_v_15_2_2(15'b000000000000000,
      INIT_2D_MEM_LOOP_2_2_mux_5_nl, not_2267_nl);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d = {INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_nl
      , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_1_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_and_5_nl};
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_nl = MUX_v_4_2_2((reg_SF_LOOP_3_acc_38_1_ftd_2[8:5]),
      z_out_26, and_dcpl_348);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_1_nl = MUX_s_1_2_2((reg_SF_LOOP_3_acc_38_1_ftd_2[4]),
      (z_out_18[0]), and_dcpl_348);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_2_nl = MUX_v_4_2_2((reg_SF_LOOP_3_acc_38_1_ftd_2[3:0]),
      ({reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1 , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2}),
      and_dcpl_348);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d = {INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_nl
      , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_1_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_2_nl};
  assign attention_5_1_384_384_8_48_q_proj_rsci_data_in_d = attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[39:0];
  assign RESHAPE_2D_TO_3D_LOOP_3_mux1h_1_nl = MUX1HOT_v_3_4_2((GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[3:1]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[4:2]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2,
      (z_out_23[3:1]), {and_dcpl_342 , and_dcpl_348 , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_mux1h_5_nl = MUX1HOT_s_1_4_2((GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[1]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1,
      (z_out_23[0]), {and_dcpl_342 , and_dcpl_348 , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_mux1h_3_nl = MUX1HOT_s_1_4_2((GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[0]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0,
      (z_out_14[0]), {and_dcpl_342 , and_dcpl_348 , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_or_nl = and_dcpl_342 | and_dcpl_196;
  assign RESHAPE_2D_TO_3D_LOOP_3_mux1h_4_nl = MUX1HOT_s_1_3_2((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1]),
      (attention_sqrt_1_for_i_4_0_sva_4_3[0]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      {RESHAPE_2D_TO_3D_LOOP_3_or_nl , and_dcpl_348 , and_dcpl_197});
  assign RESHAPE_2D_TO_3D_LOOP_3_RESHAPE_2D_TO_3D_LOOP_3_mux_nl = MUX_v_3_2_2(({(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[0])
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2}), attention_sqrt_1_for_i_4_0_sva_2_0,
      RESHAPE_2D_TO_3D_LOOP_3_1_or_cse);
  assign attention_5_1_384_384_8_48_q_proj_rsci_addr_d = {RESHAPE_2D_TO_3D_LOOP_3_mux1h_1_nl
      , RESHAPE_2D_TO_3D_LOOP_3_mux1h_5_nl , RESHAPE_2D_TO_3D_LOOP_3_mux1h_3_nl ,
      RESHAPE_2D_TO_3D_LOOP_3_mux1h_4_nl , RESHAPE_2D_TO_3D_LOOP_3_RESHAPE_2D_TO_3D_LOOP_3_mux_nl};
  assign attention_5_1_384_384_8_48_k_proj_rsci_data_in_d = attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[39:0];
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_1_nl = MUX1HOT_v_3_4_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[3:1]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[4:2]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2,
      (z_out_23[3:1]), {and_dcpl_342 , and_dcpl_348 , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_6_nl = MUX1HOT_s_1_4_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[1]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1,
      (z_out_23[0]), {and_dcpl_342 , and_dcpl_348 , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_3_nl = MUX1HOT_s_1_4_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[0]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0,
      (z_out_14[0]), {and_dcpl_342 , and_dcpl_348 , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_nl = MUX1HOT_s_1_4_2((reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd[1]),
      (attention_sqrt_1_for_i_4_0_sva_4_3[0]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1]), {and_dcpl_342 , and_dcpl_348
      , and_dcpl_197 , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_5_nl = MUX1HOT_s_1_3_2((reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd[0]),
      (attention_sqrt_1_for_i_4_0_sva_2_0[2]), (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[0]),
      {and_dcpl_342 , RESHAPE_2D_TO_3D_LOOP_3_1_or_cse , and_dcpl_196});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_nl = MUX1HOT_v_2_3_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1,
      (attention_sqrt_1_for_i_4_0_sva_2_0[1:0]), reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      {and_dcpl_342 , RESHAPE_2D_TO_3D_LOOP_3_1_or_cse , and_dcpl_196});
  assign attention_5_1_384_384_8_48_k_proj_rsci_addr_d = {RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_1_nl
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_6_nl , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_3_nl
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_nl , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_5_nl
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_nl};
  assign attention_5_1_384_384_8_48_v_proj_rsci_data_in_d = attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[39:0];
  assign RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_mux_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      z_out_26, and_dcpl_337);
  assign RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_mux_1_nl = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_18[0]), and_dcpl_337);
  assign attention_5_1_384_384_8_48_v_proj_rsci_addr_d = {RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_mux_nl
      , RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_mux_1_nl , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1
      , reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2};
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_nl = $signed((apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d[39:0]))
      * $signed(({reg_SF_LOOP_3_acc_38_1_ftd_1 , reg_SF_LOOP_3_acc_38_1_ftd_2}));
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_nl[55:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl = (z_out_10[55:0]) + APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_nl;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl[55:0];
  assign attention_5_1_384_384_8_48_q_embed_rsci_data_in_d = readslicef_56_40_16(APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl = and_dcpl_275 | and_dcpl_277 | and_dcpl_278
      | and_dcpl_279 | and_dcpl_280 | and_dcpl_281 | and_dcpl_282 | and_dcpl_284
      | and_dcpl_285 | and_dcpl_286 | and_dcpl_287 | and_dcpl_288 | and_dcpl_289
      | and_dcpl_290 | and_dcpl_291;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_5_nl = and_dcpl_293 | and_dcpl_294 | and_dcpl_295
      | and_dcpl_296 | and_dcpl_297 | and_dcpl_298 | and_dcpl_299 | and_dcpl_300
      | and_dcpl_301 | and_dcpl_302 | and_dcpl_303 | and_dcpl_304 | and_dcpl_305
      | and_dcpl_306 | and_dcpl_307 | and_dcpl_308;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_4_nl = MUX1HOT_v_4_5_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[4:1]), (GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva[4:1]),
      GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt, CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0, {and_dcpl_329
      , and_dcpl_274 , APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl , APPLY_ROTARY_POS_EMB_LOOP_6_or_4_cse
      , APPLY_ROTARY_POS_EMB_LOOP_6_or_5_nl});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_6_nl = and_dcpl_275 | and_dcpl_277 | and_dcpl_278
      | and_dcpl_279 | and_dcpl_280 | and_dcpl_281 | and_dcpl_282 | and_dcpl_284
      | and_dcpl_285 | and_dcpl_286 | and_dcpl_287 | and_dcpl_288 | and_dcpl_289
      | and_dcpl_290 | and_dcpl_291 | and_dcpl_293 | and_dcpl_294 | and_dcpl_295
      | and_dcpl_296 | and_dcpl_297 | and_dcpl_298 | and_dcpl_299 | and_dcpl_300
      | and_dcpl_301 | and_dcpl_302 | and_dcpl_303 | and_dcpl_304 | and_dcpl_305
      | and_dcpl_306 | and_dcpl_307 | and_dcpl_308;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_16_nl = MUX1HOT_s_1_4_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[0]), (GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva[0]),
      (~ (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0])), {and_dcpl_329 , and_dcpl_274
      , APPLY_ROTARY_POS_EMB_LOOP_6_or_6_nl , APPLY_ROTARY_POS_EMB_LOOP_6_or_4_cse});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_nl = ((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1])
      & (~(and_dcpl_284 | and_dcpl_285 | and_dcpl_286 | and_dcpl_287 | and_dcpl_288
      | and_dcpl_289 | and_dcpl_290 | and_dcpl_291 | and_dcpl_292 | and_dcpl_301
      | and_dcpl_302 | and_dcpl_303 | and_dcpl_304 | and_dcpl_305 | and_dcpl_306
      | and_dcpl_307 | and_dcpl_308 | and_dcpl_318 | and_dcpl_319 | and_dcpl_320
      | and_dcpl_321 | and_dcpl_322 | and_dcpl_323 | and_dcpl_324))) | and_dcpl_274
      | and_dcpl_275 | and_dcpl_277 | and_dcpl_278 | and_dcpl_279 | and_dcpl_280
      | and_dcpl_281 | and_dcpl_282 | and_dcpl_293 | and_dcpl_294 | and_dcpl_295
      | and_dcpl_296 | and_dcpl_297 | and_dcpl_298 | and_dcpl_299 | and_dcpl_300
      | and_dcpl_309 | and_dcpl_310 | and_dcpl_311 | and_dcpl_312 | and_dcpl_313
      | and_dcpl_314 | and_dcpl_315 | and_dcpl_317;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_1_nl = ((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[0])
      & (~(and_dcpl_279 | and_dcpl_280 | and_dcpl_281 | and_dcpl_282 | and_dcpl_288
      | and_dcpl_289 | and_dcpl_290 | and_dcpl_291 | and_dcpl_292 | and_dcpl_297
      | and_dcpl_298 | and_dcpl_299 | and_dcpl_300 | and_dcpl_305 | and_dcpl_306
      | and_dcpl_307 | and_dcpl_308 | and_dcpl_313 | and_dcpl_314 | and_dcpl_315
      | and_dcpl_317 | and_dcpl_322 | and_dcpl_323 | and_dcpl_324))) | and_dcpl_274
      | and_dcpl_275 | and_dcpl_277 | and_dcpl_278 | and_dcpl_284 | and_dcpl_285
      | and_dcpl_286 | and_dcpl_287 | and_dcpl_293 | and_dcpl_294 | and_dcpl_295
      | and_dcpl_296 | and_dcpl_301 | and_dcpl_302 | and_dcpl_303 | and_dcpl_304
      | and_dcpl_309 | and_dcpl_310 | and_dcpl_311 | and_dcpl_312 | and_dcpl_318
      | and_dcpl_319 | and_dcpl_320 | and_dcpl_321;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_2_nl = ((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2[1])
      & (~(and_dcpl_277 | and_dcpl_278 | and_dcpl_281 | and_dcpl_282 | and_dcpl_286
      | and_dcpl_287 | and_dcpl_290 | and_dcpl_291 | and_dcpl_292 | and_dcpl_295
      | and_dcpl_296 | and_dcpl_299 | and_dcpl_300 | and_dcpl_303 | and_dcpl_304
      | and_dcpl_307 | and_dcpl_308 | and_dcpl_311 | and_dcpl_312 | and_dcpl_315
      | and_dcpl_317 | and_dcpl_320 | and_dcpl_321 | and_dcpl_324))) | and_dcpl_274
      | and_dcpl_275 | and_dcpl_279 | and_dcpl_280 | and_dcpl_284 | and_dcpl_285
      | and_dcpl_288 | and_dcpl_289 | and_dcpl_293 | and_dcpl_294 | and_dcpl_297
      | and_dcpl_298 | and_dcpl_301 | and_dcpl_302 | and_dcpl_305 | and_dcpl_306
      | and_dcpl_309 | and_dcpl_310 | and_dcpl_313 | and_dcpl_314 | and_dcpl_318
      | and_dcpl_319 | and_dcpl_322 | and_dcpl_323;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl = ((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2[0])
      & (~(and_dcpl_275 | and_dcpl_278 | and_dcpl_280 | and_dcpl_282 | and_dcpl_285
      | and_dcpl_287 | and_dcpl_289 | and_dcpl_291 | and_dcpl_292 | and_dcpl_294
      | and_dcpl_296 | and_dcpl_298 | and_dcpl_300 | and_dcpl_302 | and_dcpl_304
      | and_dcpl_306 | and_dcpl_308 | and_dcpl_310 | and_dcpl_312 | and_dcpl_314
      | and_dcpl_317 | and_dcpl_319 | and_dcpl_321 | and_dcpl_323))) | and_dcpl_274
      | and_dcpl_277 | and_dcpl_279 | and_dcpl_281 | and_dcpl_284 | and_dcpl_286
      | and_dcpl_288 | and_dcpl_290 | and_dcpl_293 | and_dcpl_295 | and_dcpl_297
      | and_dcpl_299 | and_dcpl_301 | and_dcpl_303 | and_dcpl_305 | and_dcpl_307
      | and_dcpl_309 | and_dcpl_311 | and_dcpl_313 | and_dcpl_315 | and_dcpl_318
      | and_dcpl_320 | and_dcpl_322 | and_dcpl_324;
  assign attention_5_1_384_384_8_48_q_embed_rsci_addr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_4_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_16_nl , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_1_nl , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_2_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl};
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_nl = $signed((apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d[39:0]))
      * $signed(({reg_SF_LOOP_3_acc_38_1_ftd_1 , reg_SF_LOOP_3_acc_38_1_ftd_2}));
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_nl[55:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl = (z_out_11[55:0]) + APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_nl;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl[55:0];
  assign attention_5_1_384_384_8_48_k_embed_rsci_data_in_d = readslicef_56_40_16(APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      z_out_23, and_dcpl_337);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_1_nl = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_15[0]), and_dcpl_337);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl = MUX_v_2_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1,
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd, and_dcpl_337);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_3_nl = MUX_v_2_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1, and_dcpl_337);
  assign attention_5_1_384_384_8_48_k_embed_rsci_addr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_1_nl , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_3_nl};
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nand_nl = ~((attention_sqrt_1_for_i_4_0_sva_2_0==3'b101));
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d = MUX_v_40_2_2((attention_5_1_384_384_8_48_k_embed_rsci_data_out_d[39:0]),
      ({reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1}),
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nand_nl);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      z_out_16, and_dcpl_328);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_1_nl = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2[0]),
      (z_out_32[2]), and_dcpl_328);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_4_nl = MUX_v_2_2_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0,
      (z_out_32[1:0]), and_dcpl_328);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_2_nl = MUX_s_1_2_2(CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_0,
      (z_out_27[0]), and_dcpl_328);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_3_nl = MUX_v_2_2_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd,
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1, and_dcpl_328);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_5_nl = MUX_v_2_2_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1,
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2, and_dcpl_328);
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d = {CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_nl
      , CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_1_nl , CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_4_nl
      , CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_2_nl , CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_3_nl
      , CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_mux_5_nl};
  assign CACHE_UPDATE_LOOP_3_1_mux_1_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_v_proj_rsci_data_out_d[39]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_nand_ssc);
  assign CACHE_UPDATE_LOOP_3_1_mux_2_nl = MUX_v_24_2_2((attention_5_1_384_384_8_48_v_proj_rsci_data_out_d[38:15]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
      CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_nand_ssc);
  assign CACHE_UPDATE_LOOP_3_1_mux_3_nl = MUX_v_15_2_2((attention_5_1_384_384_8_48_v_proj_rsci_data_out_d[14:0]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
      CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_nand_ssc);
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d = {CACHE_UPDATE_LOOP_3_1_mux_1_nl
      , CACHE_UPDATE_LOOP_3_1_mux_2_nl , CACHE_UPDATE_LOOP_3_1_mux_3_nl};
  assign CACHE_UPDATE_LOOP_3_1_or_1_ssc = and_dcpl_263 | and_dcpl_264 | and_dcpl_265
      | and_dcpl_267 | and_dcpl_268 | and_dcpl_269;
  assign CACHE_UPDATE_LOOP_3_1_mux1h_1_nl = MUX1HOT_v_4_7_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt,
      (z_out_36[3:0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[6:3]), GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp,
      GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp, GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp, GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp,
      {and_dcpl_325 , and_dcpl_263 , and_dcpl_264 , and_dcpl_265 , and_dcpl_267 ,
      and_dcpl_268 , and_dcpl_269});
  assign CACHE_UPDATE_LOOP_3_1_mux1h_3_nl = MUX1HOT_s_1_7_2((APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2[0]),
      (z_out_17[2]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[2]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[1]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt[2]), (APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2[1]),
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[2]), {and_dcpl_325 , and_dcpl_263 , and_dcpl_264
      , and_dcpl_265 , and_dcpl_267 , and_dcpl_268 , and_dcpl_269});
  assign CACHE_UPDATE_LOOP_3_1_mux1h_7_nl = MUX1HOT_s_1_7_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1,
      (z_out_17[1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[1]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt[1]), (APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2[0]),
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[1]), {and_dcpl_325 , and_dcpl_263 , and_dcpl_264
      , and_dcpl_265 , and_dcpl_267 , and_dcpl_268 , and_dcpl_269});
  assign CACHE_UPDATE_LOOP_3_1_mux1h_5_nl = MUX1HOT_s_1_7_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0,
      (z_out_17[0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0[1]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt[0]), APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1,
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[0]), {and_dcpl_325 , and_dcpl_263 , and_dcpl_264
      , and_dcpl_265 , and_dcpl_267 , and_dcpl_268 , and_dcpl_269});
  assign CACHE_UPDATE_LOOP_3_1_or_nl = and_dcpl_264 | and_dcpl_267 | and_dcpl_269;
  assign CACHE_UPDATE_LOOP_3_1_mux1h_4_nl = MUX1HOT_s_1_5_2((CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0[0]),
      (z_out_27[0]), (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0[0]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0, {and_dcpl_325 , and_dcpl_263
      , CACHE_UPDATE_LOOP_3_1_or_nl , and_dcpl_265 , and_dcpl_268});
  assign CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_nl = MUX_v_2_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1,
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd, CACHE_UPDATE_LOOP_3_1_or_1_ssc);
  assign CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_2_nl = MUX_v_2_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1, CACHE_UPDATE_LOOP_3_1_or_1_ssc);
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d = {CACHE_UPDATE_LOOP_3_1_mux1h_1_nl
      , CACHE_UPDATE_LOOP_3_1_mux1h_3_nl , CACHE_UPDATE_LOOP_3_1_mux1h_7_nl , CACHE_UPDATE_LOOP_3_1_mux1h_5_nl
      , CACHE_UPDATE_LOOP_3_1_mux1h_4_nl , CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_nl
      , CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_2_nl};
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d = attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d[39:0];
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_10_itm = and_dcpl_287 | and_dcpl_288 |
      and_dcpl_289 | and_dcpl_290 | and_dcpl_291;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_1_nl = MUX1HOT_s_1_17_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3]),
      (z_out_35[3]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[3]), (GEMM_3D_FLOAT_LOOP_4_acc_252_psp[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva[6]), (GEMM_3D_FLOAT_LOOP_4_acc_251_psp[3]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp[3]), (reg_GEMM_3D_FLOAT_LOOP_4_acc_96_cse[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_248_psp[3]), (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1]),
      (GEMM_3D_FLOAT_LOOP_4_acc_247_psp[3]), (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_246_psp[3]), (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_245_psp[3]), (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2[2]),
      (GEMM_3D_FLOAT_LOOP_4_acc_244_psp[3]), {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse
      , and_dcpl_280 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse , and_dcpl_286 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_57_cse , and_dcpl_298 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse
      , and_dcpl_303 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse , and_dcpl_309 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse
      , and_dcpl_314 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_cse , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_and_nl = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_1_nl
      & (~(and_dcpl_287 | and_dcpl_288 | and_dcpl_289 | and_dcpl_290 | and_dcpl_291));
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_3_nl = MUX1HOT_v_2_18_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[2:1]),
      (z_out_35[2:1]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[2:1]), (GEMM_3D_FLOAT_LOOP_4_acc_252_psp[2:1]),
      (GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva[5:4]), (GEMM_3D_FLOAT_LOOP_4_acc_251_psp[2:1]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp[2:1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_acc_96_cse[2:1]), (GEMM_3D_FLOAT_LOOP_4_acc_248_psp[2:1]),
      ({(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[0]) , (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2[1])}),
      (GEMM_3D_FLOAT_LOOP_4_acc_247_psp[2:1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[2:1]),
      (GEMM_3D_FLOAT_LOOP_4_acc_246_psp[2:1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[2:1]),
      (GEMM_3D_FLOAT_LOOP_4_acc_245_psp[2:1]), (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2[1:0]),
      (GEMM_3D_FLOAT_LOOP_4_acc_244_psp[2:1]), {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse
      , and_dcpl_280 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse , and_dcpl_286 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_10_itm
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_57_cse
      , and_dcpl_298 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse , and_dcpl_303 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse
      , and_dcpl_309 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse , and_dcpl_314 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_cse
      , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_12_nl = MUX1HOT_s_1_18_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_35[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[0]), (GEMM_3D_FLOAT_LOOP_4_acc_252_psp[0]),
      (GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva[3]), (GEMM_3D_FLOAT_LOOP_4_acc_251_psp[0]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp[0]),
      (reg_GEMM_3D_FLOAT_LOOP_4_acc_96_cse[0]), (GEMM_3D_FLOAT_LOOP_4_acc_248_psp[0]),
      (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2[0]), (GEMM_3D_FLOAT_LOOP_4_acc_247_psp[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[0]), (GEMM_3D_FLOAT_LOOP_4_acc_246_psp[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[0]), (GEMM_3D_FLOAT_LOOP_4_acc_245_psp[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0[1]), (GEMM_3D_FLOAT_LOOP_4_acc_244_psp[0]),
      {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse , and_dcpl_280
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse , and_dcpl_286 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_10_itm
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_57_cse
      , and_dcpl_298 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse , and_dcpl_303 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse
      , and_dcpl_309 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse , and_dcpl_314 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_cse
      , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_19_nl = and_dcpl_287 | and_dcpl_288 |
      and_dcpl_289 | and_dcpl_290 | and_dcpl_291 | and_dcpl_294 | and_dcpl_295 |
      and_dcpl_296 | and_dcpl_297;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_4_nl = MUX1HOT_s_1_18_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[6]),
      (z_out_29[6]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0[1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[5]),
      (GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva[2]), (GEMM_3D_FLOAT_LOOP_4_acc_250_sdt_2_0[2]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2]), (GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp[2]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0[6]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[5]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp[2]), (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd[2]),
      (CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_1[0]), (reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd[2]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp[2]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0[5]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0[0]), (GEMM_3D_FLOAT_LOOP_4_acc_243_sdt_2_0[2]),
      {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse , and_dcpl_280
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse , and_dcpl_286 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_19_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse , and_dcpl_293 , and_dcpl_298 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse
      , and_dcpl_303 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse , and_dcpl_309 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse
      , and_dcpl_314 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_cse , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_27_nl = and_dcpl_287 | and_dcpl_288 |
      and_dcpl_289 | and_dcpl_290 | and_dcpl_291 | and_dcpl_294 | and_dcpl_295 |
      and_dcpl_296 | and_dcpl_297 | and_dcpl_315 | and_dcpl_317 | and_dcpl_318 |
      and_dcpl_319;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_5_nl = MUX1HOT_s_1_17_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[5]),
      (z_out_29[5]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0[0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[4]),
      (GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva[1]), (GEMM_3D_FLOAT_LOOP_4_acc_250_sdt_2_0[1]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp[1]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0[5]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[4]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp[1]), (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd[1]),
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_0, (reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd[1]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp[1]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0[4]),
      (GEMM_3D_FLOAT_LOOP_4_acc_243_sdt_2_0[1]), {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_cse
      , and_dcpl_280 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse , and_dcpl_286 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_27_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse , and_dcpl_293 , and_dcpl_298 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse
      , and_dcpl_303 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_cse , and_dcpl_309 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse
      , and_dcpl_314 , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_32_nl = and_dcpl_275 | and_dcpl_277 |
      and_dcpl_278 | and_dcpl_279 | and_dcpl_287 | and_dcpl_288 | and_dcpl_289 |
      and_dcpl_290 | and_dcpl_291 | and_dcpl_294 | and_dcpl_295 | and_dcpl_296 |
      and_dcpl_297 | and_dcpl_304 | and_dcpl_305 | and_dcpl_306 | and_dcpl_307 |
      and_dcpl_308 | and_dcpl_315 | and_dcpl_317 | and_dcpl_318 | and_dcpl_319;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_6_nl = MUX1HOT_s_1_15_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[4]),
      (z_out_29[4]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva[0]), (GEMM_3D_FLOAT_LOOP_4_acc_250_sdt_2_0[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp[0]), (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0[4]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[3]), (GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp[0]),
      (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd[0]), (reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp[0]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_243_sdt_2_0[0]), {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_32_nl
      , and_dcpl_280 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_1_cse , and_dcpl_286 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_2_cse
      , and_dcpl_293 , and_dcpl_298 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_cse , and_dcpl_303
      , and_dcpl_309 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_cse , and_dcpl_314 , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_7_nl = MUX1HOT_s_1_9_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva[3]), (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[2]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1, (CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0[2]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[2]), (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1[1]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0[2]), (GEMM_3D_FLOAT_LOOP_4_acc_185_sdt[1]),
      {and_dcpl_272 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_38_cse , and_dcpl_280 , and_dcpl_286
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_39_cse , and_dcpl_298 , and_dcpl_303 ,
      and_dcpl_314 , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_37_nl = (TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_7_nl
      & (~(and_dcpl_278 | and_dcpl_279 | and_dcpl_284 | and_dcpl_291 | and_dcpl_292
      | and_dcpl_296 | and_dcpl_297 | and_dcpl_301 | and_dcpl_308 | and_dcpl_312
      | and_dcpl_313 | and_dcpl_318 | and_dcpl_285 | and_dcpl_290 | and_dcpl_302
      | and_dcpl_307 | and_dcpl_319 | and_dcpl_324))) | and_dcpl_274 | and_dcpl_282
      | and_dcpl_287 | and_dcpl_288 | and_dcpl_293 | and_dcpl_300 | and_dcpl_304
      | and_dcpl_305 | and_dcpl_309 | and_dcpl_317 | and_dcpl_321 | and_dcpl_322
      | and_dcpl_275 | and_dcpl_281 | and_dcpl_294 | and_dcpl_299 | and_dcpl_310
      | and_dcpl_315;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_8_nl = MUX1HOT_s_1_11_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[2]),
      (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1[1]), (GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva[2]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[1]), (attention_sqrt_1_for_i_4_0_sva_2_0[2]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1, (CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0[1]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[1]), (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0[1]), (GEMM_3D_FLOAT_LOOP_4_acc_185_sdt[1]),
      {and_dcpl_272 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_41_cse , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_38_cse
      , and_dcpl_280 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_43_cse , and_dcpl_286 ,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_39_cse , and_dcpl_298 , and_dcpl_303 , and_dcpl_314
      , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_40_nl = (TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_8_nl
      & (~(and_dcpl_279 | and_dcpl_282 | and_dcpl_288 | and_dcpl_291 | and_dcpl_292
      | and_dcpl_297 | and_dcpl_300 | and_dcpl_305 | and_dcpl_308 | and_dcpl_313
      | and_dcpl_317 | and_dcpl_322))) | and_dcpl_274 | and_dcpl_278 | and_dcpl_284
      | and_dcpl_287 | and_dcpl_293 | and_dcpl_296 | and_dcpl_301 | and_dcpl_304
      | and_dcpl_309 | and_dcpl_312 | and_dcpl_318 | and_dcpl_321;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_47_nl = and_dcpl_278 | and_dcpl_282 |
      and_dcpl_287 | and_dcpl_291 | and_dcpl_292 | and_dcpl_296 | and_dcpl_300 |
      and_dcpl_304 | and_dcpl_308 | and_dcpl_312 | and_dcpl_317 | and_dcpl_321;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_9_nl = MUX1HOT_s_1_16_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[1]),
      (z_out_29[1]), (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1[0]), (GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva[1]),
      (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1]), (LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0[1]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm[0]), (attention_sqrt_1_for_i_4_0_sva_2_0[1]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1, (CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0[1]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[0]),
      (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2[1]), (reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2[1]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0[0]), (GEMM_3D_FLOAT_LOOP_4_acc_185_sdt[1]),
      {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_41_cse , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_38_cse
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_47_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_48_cse
      , and_dcpl_280 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_43_cse , and_dcpl_286 ,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_39_cse , and_dcpl_293 , and_dcpl_298 , and_dcpl_303
      , and_dcpl_309 , and_dcpl_314 , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_51_nl = and_dcpl_275 | and_dcpl_278 |
      and_dcpl_280 | and_dcpl_282 | and_dcpl_285 | and_dcpl_287 | and_dcpl_289 |
      and_dcpl_291 | and_dcpl_292 | and_dcpl_294 | and_dcpl_296 | and_dcpl_298 |
      and_dcpl_300 | and_dcpl_302 | and_dcpl_304 | and_dcpl_306 | and_dcpl_308 |
      and_dcpl_310 | and_dcpl_312 | and_dcpl_314 | and_dcpl_317 | and_dcpl_319 |
      and_dcpl_321 | and_dcpl_323;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_10_nl = MUX1HOT_s_1_11_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[0]),
      (z_out_29[0]), (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[0]), (GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0[0]), (attention_sqrt_1_for_i_4_0_sva_2_0[0]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0, (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0[0]),
      (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2[0]), (reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2[0]),
      (GEMM_3D_FLOAT_LOOP_4_acc_185_sdt[0]), {and_dcpl_272 , and_dcpl_274 , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_51_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_38_cse , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_48_cse
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_43_cse , and_dcpl_286 , and_dcpl_293 ,
      and_dcpl_303 , and_dcpl_309 , and_dcpl_320});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_55_nl = and_dcpl_274 | and_dcpl_275 |
      and_dcpl_277 | and_dcpl_278 | and_dcpl_279 | and_dcpl_280 | and_dcpl_281 |
      and_dcpl_282 | and_dcpl_284 | and_dcpl_285 | and_dcpl_286 | and_dcpl_287 |
      and_dcpl_288 | and_dcpl_289 | and_dcpl_290 | and_dcpl_291 | and_dcpl_292 |
      and_dcpl_293 | and_dcpl_294 | and_dcpl_295 | and_dcpl_296 | and_dcpl_297 |
      and_dcpl_298 | and_dcpl_299 | and_dcpl_300 | and_dcpl_301 | and_dcpl_302 |
      and_dcpl_303 | and_dcpl_304 | and_dcpl_305 | and_dcpl_306 | and_dcpl_307 |
      and_dcpl_308 | and_dcpl_309 | and_dcpl_310 | and_dcpl_311 | and_dcpl_312 |
      and_dcpl_313 | and_dcpl_314 | and_dcpl_315 | and_dcpl_317 | and_dcpl_318 |
      and_dcpl_319 | and_dcpl_320 | and_dcpl_321 | and_dcpl_322 | and_dcpl_323 |
      and_dcpl_324;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux_nl = MUX_s_1_2_2((attention_sqrt_1_for_i_4_0_sva_2_0[0]),
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1, TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_55_nl);
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d = {TRANSPOSE_LAST_TWO_DIMS_LOOP_3_and_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_3_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_12_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_4_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_5_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_6_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_37_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_40_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_9_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_10_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux_nl};
  assign nl_SF_LOOP_3_acc_8_nl = z_out + ({reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
      , 1'b0 , ({{1{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd})
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32:17])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[6:5])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21])
      , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[12]))
      , 1'b0 , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[3]))
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[9:8])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[4:3])});
  assign SF_LOOP_3_acc_8_nl = nl_SF_LOOP_3_acc_8_nl[37:0];
  assign and_289_nl = and_dcpl_262 & and_dcpl_114;
  assign and_290_nl = and_dcpl_195 & and_dcpl_266;
  assign attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d = MUX1HOT_v_40_4_2(z_out_59,
      (signext_40_38(SF_LOOP_3_acc_8_nl)), (z_out_11[55:16]), (SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z[39:0]),
      {and_289_nl , and_dcpl_256 , and_dcpl_261 , and_290_nl});
  assign GEMM_3D_FLOAT_LOOP_4_or_7_itm = and_dcpl_265 | and_dcpl_267;
  assign GEMM_3D_FLOAT_LOOP_4_or_21_cse = and_274_ssc | and_dcpl_260;
  assign mux1h_6_nl = MUX1HOT_v_3_7_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[3:1]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3:1]), (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[4:2]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2, (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[3:1]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[3:1]), (z_out_26[3:1]), {GEMM_3D_FLOAT_LOOP_4_or_5_cse
      , and_dcpl_256 , GEMM_3D_FLOAT_LOOP_4_or_6_cse , and_dcpl_264 , GEMM_3D_FLOAT_LOOP_4_or_7_itm
      , GEMM_3D_FLOAT_LOOP_4_or_8_cse , GEMM_3D_FLOAT_LOOP_4_or_21_cse});
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_35_nl = MUX1HOT_s_1_7_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[0]),
      (z_out_26[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]), (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[1]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0[1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[0]), {GEMM_3D_FLOAT_LOOP_4_or_5_cse
      , GEMM_3D_FLOAT_LOOP_4_or_21_cse , and_dcpl_256 , GEMM_3D_FLOAT_LOOP_4_or_6_cse
      , and_dcpl_264 , GEMM_3D_FLOAT_LOOP_4_or_7_itm , GEMM_3D_FLOAT_LOOP_4_or_8_cse});
  assign GEMM_3D_FLOAT_LOOP_4_or_11_nl = and_dcpl_264 | and_dcpl_265 | and_dcpl_267;
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_24_nl = MUX1HOT_s_1_7_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_18[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[0]), (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[0]),
      (z_out_18[0]), (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0[0]), (~ (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0])),
      {GEMM_3D_FLOAT_LOOP_4_or_5_cse , and_274_ssc , and_dcpl_256 , GEMM_3D_FLOAT_LOOP_4_or_6_cse
      , and_dcpl_260 , GEMM_3D_FLOAT_LOOP_4_or_11_nl , GEMM_3D_FLOAT_LOOP_4_or_8_cse});
  assign GEMM_3D_FLOAT_LOOP_4_or_13_nl = and_dcpl_260 | and_dcpl_261;
  assign GEMM_3D_FLOAT_LOOP_4_mux_nl = MUX_s_1_2_2(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      (attention_sqrt_1_for_i_4_0_sva_2_0[0]), GEMM_3D_FLOAT_LOOP_4_or_13_nl);
  assign GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_or_nl = (GEMM_3D_FLOAT_LOOP_4_mux_nl
      & (~(and_277_ssc | and_dcpl_264 | and_dcpl_267 | and_dcpl_269))) | and_dcpl_263
      | and_dcpl_265 | and_dcpl_268;
  assign attention_5_1_384_384_8_48_attn_weights_rsci_addr_d = {mux1h_6_nl , GEMM_3D_FLOAT_LOOP_4_mux1h_35_nl
      , GEMM_3D_FLOAT_LOOP_4_mux1h_24_nl , GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_or_nl};
  assign nl_attention_5_1_384_384_8_48_attn_output_rsci_data_in_d = z_out_61 + (z_out_58[39:0]);
  assign attention_5_1_384_384_8_48_attn_output_rsci_data_in_d = nl_attention_5_1_384_384_8_48_attn_output_rsci_data_in_d[39:0];
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_1_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      z_out_23, and_dcpl_245);
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_2_nl = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_14[0]), and_dcpl_245);
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_3_nl = MUX_v_2_2_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd,
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1, and_dcpl_245);
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_5_nl = MUX_v_2_2_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1,
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2, and_dcpl_245);
  assign attention_5_1_384_384_8_48_attn_output_rsci_addr_d = {GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_1_nl
      , GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_2_nl , GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_3_nl
      , GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_5_nl};
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d = MUX_v_40_2_2((attention_5_1_384_384_8_48_attn_output_rsci_data_out_d[39:0]),
      RMS_NORM_LOOP_2_2_mul_itm_71_32_1, and_dcpl_242);
  assign ATTN_2D_LOOP_3_mux1h_1_nl = MUX1HOT_v_3_3_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[3:1]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:6]), attention_sqrt_1_for_i_4_0_sva_2_0,
      {and_dcpl_235 , and_254_ssc , ATTN_2D_LOOP_3_or_cse});
  assign ATTN_2D_LOOP_3_not_1_nl = ~ and_255_ssc;
  assign ATTN_2D_LOOP_3_and_nl = MUX_v_3_2_2(3'b000, ATTN_2D_LOOP_3_mux1h_1_nl, ATTN_2D_LOOP_3_not_1_nl);
  assign ATTN_2D_LOOP_3_mux1h_4_nl = MUX1HOT_s_1_3_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[0]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[5]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3]),
      {and_dcpl_235 , and_254_ssc , ATTN_2D_LOOP_3_or_cse});
  assign ATTN_2D_LOOP_3_and_1_nl = ATTN_2D_LOOP_3_mux1h_4_nl & (~ and_255_ssc);
  assign ATTN_2D_LOOP_3_mux1h_6_nl = MUX1HOT_s_1_3_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[4]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[2]),
      {and_dcpl_235 , and_254_ssc , ATTN_2D_LOOP_3_or_cse});
  assign ATTN_2D_LOOP_3_and_3_nl = ATTN_2D_LOOP_3_mux1h_6_nl & (~ and_255_ssc);
  assign ATTN_2D_LOOP_3_mux1h_7_nl = MUX1HOT_v_2_3_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1,
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[3:2]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[1:0]),
      {and_dcpl_235 , and_254_ssc , ATTN_2D_LOOP_3_or_cse});
  assign ATTN_2D_LOOP_3_not_3_nl = ~ and_255_ssc;
  assign ATTN_2D_LOOP_3_and_4_nl = MUX_v_2_2_2(2'b00, ATTN_2D_LOOP_3_mux1h_7_nl,
      ATTN_2D_LOOP_3_not_3_nl);
  assign ATTN_2D_LOOP_3_mux1h_5_nl = MUX1HOT_v_2_4_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[1:0]), 2'b10, 2'b01, {and_dcpl_235
      , and_254_ssc , and_dcpl_240 , and_dcpl_241});
  assign ATTN_2D_LOOP_3_nor_nl = ~(and_255_ssc | and_dcpl_211);
  assign ATTN_2D_LOOP_3_and_2_nl = MUX_v_2_2_2(2'b00, ATTN_2D_LOOP_3_mux1h_5_nl,
      ATTN_2D_LOOP_3_nor_nl);
  assign ATTN_2D_LOOP_3_or_2_nl = MUX_v_2_2_2(ATTN_2D_LOOP_3_and_2_nl, 2'b11, and_257_ssc);
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d = {ATTN_2D_LOOP_3_and_nl
      , ATTN_2D_LOOP_3_and_1_nl , ATTN_2D_LOOP_3_and_3_nl , ATTN_2D_LOOP_3_and_4_nl
      , ATTN_2D_LOOP_3_or_2_nl};
  assign QUANTIZE_ACTIVATION_LOOP_5_1_or_nl = (QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17
      & and_dcpl_211) | (QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17
      & and_dcpl_212);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_or_1_nl = ((~((~ QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_211)
      | ((~((~ QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs_mx1)
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) & and_dcpl_212);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_and_8_nl = (~ z_out_53_40) & QUANTIZE_ACTIVATION_LOOP_5_1_or_2_m1c;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_and_9_nl = z_out_53_40 & QUANTIZE_ACTIVATION_LOOP_5_1_or_2_m1c;
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d = MUX1HOT_v_8_6_2(8'b10000000,
      8'b01111111, (z_out_8[7:0]), (z_out_50[7:0]), ({reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1 , reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2}),
      ({reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd , reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1
      , reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2}), {QUANTIZE_ACTIVATION_LOOP_5_1_or_nl
      , QUANTIZE_ACTIVATION_LOOP_5_1_or_1_nl , QUANTIZE_ACTIVATION_LOOP_5_1_and_8_nl
      , QUANTIZE_ACTIVATION_LOOP_5_1_and_9_nl , and_dcpl_213 , and_dcpl_214});
  assign QUANTIZE_ACTIVATION_LOOP_5_1_QUANTIZE_ACTIVATION_LOOP_5_1_or_nl = ((LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1[1])
      & (~(and_dcpl_211 | and_dcpl_212))) | and_dcpl_213 | and_dcpl_214;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_QUANTIZE_ACTIVATION_LOOP_5_1_or_1_nl = ((LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1[0])
      & (~(and_dcpl_212 | and_dcpl_213))) | and_dcpl_211 | and_dcpl_214;
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d = {attention_sqrt_1_for_i_4_0_sva_2_0
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt , QUANTIZE_ACTIVATION_LOOP_5_1_QUANTIZE_ACTIVATION_LOOP_5_1_or_nl
      , QUANTIZE_ACTIVATION_LOOP_5_1_QUANTIZE_ACTIVATION_LOOP_5_1_or_1_nl};
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl =  -(attention_5_1_384_384_8_48_q_proj_rsci_data_out_d[39:0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl[39:0];
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d = MUX_v_40_2_2((attention_5_1_384_384_8_48_q_proj_rsci_data_out_d[39:0]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl, and_dcpl_198);
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d = {APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_3_1
      , APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_0 , APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_17_rmff
      , APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_16_rmff , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_2
      , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1_0};
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl =  -(attention_5_1_384_384_8_48_k_proj_rsci_data_out_d[39:0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl[39:0];
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d = MUX_v_40_2_2((attention_5_1_384_384_8_48_k_proj_rsci_data_out_d[39:0]),
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl, and_dcpl_198);
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d = {APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_3_1
      , APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_1_rmff_0 , APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_17_rmff
      , APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_16_rmff , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_2
      , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1_0};
  assign and_995_cse = (fsm_output[8:6]==3'b011) & nor_525_cse & (fsm_output[3:0]==4'b1110);
  assign and_dcpl_728 = (fsm_output[8:6]==3'b011) & nor_525_cse & (fsm_output[3:0]==4'b1101);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_nl
      = ~((operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1[1]) & (~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3])));
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_30_nl = conv_s2s_8_9(operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3)
      + conv_u2s_8_9({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[12]))})
      + conv_u2s_1_9(operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_30_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_30_nl[8:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl = conv_u2s_10_11({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14]))})
      + conv_s2s_9_11(operator_40_24_true_AC_TRN_AC_WRAP_acc_30_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl[10:0];
  assign nl_exs_tmp_1_12_0 = conv_u2s_12_13({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16]))})
      + conv_s2s_11_13(operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl);
  assign exs_tmp_1_12_0 = nl_exs_tmp_1_12_0[12:0];
  assign and_dcpl_749 = (fsm_output[8:6]==3'b011);
  assign and_1055_cse = nor_609_cse & nor_525_cse & not_tmp_21 & and_dcpl_99;
  assign and_dcpl_763 = and_dcpl_749 & (fsm_output[5]) & (fsm_output[4]) & (fsm_output[3])
      & (fsm_output[1]) & and_dcpl_99;
  assign and_1076_cse = nor_609_cse & nor_525_cse & (fsm_output[3:0]==4'b0011);
  assign and_dcpl_787 = (~ (fsm_output[8])) & (fsm_output[7]) & (fsm_output[6]) &
      (fsm_output[5]) & (fsm_output[4]) & (fsm_output[3]) & (~ (fsm_output[1])) &
      and_dcpl_125;
  assign and_dcpl_790 = (fsm_output[3:0]==4'b0011);
  assign and_dcpl_795 = and_dcpl_6 & (~ (fsm_output[6])) & nor_525_cse & and_dcpl_790;
  assign and_dcpl_800 = and_dcpl_6 & (fsm_output[6]) & nor_525_cse & not_tmp_21 &
      and_dcpl_125;
  assign and_dcpl_804 = (fsm_output[8:6]==3'b101) & nor_525_cse & and_dcpl_790;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_nor_6_cse = ~(and_dcpl_787 | and_dcpl_795);
  assign nl_exu_tmp_5_6_0 = ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd ,
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1 , GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva})
      + conv_u2u_2_7(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:7]);
  assign exu_tmp_5_6_0 = nl_exu_tmp_5_6_0[6:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_nor_11_cse = ~(and_dcpl_787 | (and_dcpl_6
      & (~ (fsm_output[6])) & nor_525_cse & (fsm_output[3:0]==4'b0011)));
  assign and_dcpl_829 = (fsm_output[5:4]==2'b11);
  assign and_dcpl_855 = and_dcpl_749 & (fsm_output[5:4]==2'b11);
  assign and_dcpl_856 = and_dcpl_855 & (fsm_output[3]) & (~ (fsm_output[1])) & and_dcpl_125;
  assign and_1159_cse = and_dcpl_749 & (~ (fsm_output[5])) & (fsm_output[4]) & (~
      (fsm_output[3])) & (fsm_output[1]) & and_dcpl_99;
  assign and_dcpl_874 = (fsm_output[8:6]==3'b101) & nor_525_cse & not_tmp_21 & and_dcpl_125;
  assign and_dcpl_877 = and_dcpl_855 & (fsm_output[3]) & (fsm_output[1]) & and_dcpl_99;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_nand_nl
      = ~((reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1[1]) & (~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3])));
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_nl = conv_s2s_8_9({reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1 , reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2})
      + conv_u2s_8_9({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[12]))})
      + conv_u2s_1_9(operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_nand_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_nl[8:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl = conv_u2s_10_11({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14]))})
      + conv_s2s_9_11(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl[10:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl = conv_u2s_12_13({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16]))})
      + conv_s2s_11_13(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl[12:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl = conv_u2s_14_15({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18]))})
      + conv_s2s_13_15(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl[14:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_nl = conv_u2s_16_17({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20]))})
      + conv_s2s_15_17(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_nl[16:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl = conv_u2s_18_19({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]))})
      + conv_s2s_17_19(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl[18:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl = conv_u2s_20_21({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]))})
      + conv_s2s_19_21(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl[20:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl = conv_u2s_22_23({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26]))})
      + conv_s2s_21_23(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl[22:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_nl = conv_u2s_24_25({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28]))})
      + conv_s2s_23_25(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_nl[24:0];
  assign nl_exs_tmp_4_26_0 = conv_u2s_26_27({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30]))})
      + conv_s2s_25_27(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_nl);
  assign exs_tmp_4_26_0 = nl_exs_tmp_4_26_0[26:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc = and_1055_cse | and_dcpl_877;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse = ~(and_1055_cse | and_dcpl_877);
  assign and_dcpl_880 = (fsm_output[3]) & (fsm_output[1]) & and_dcpl_107;
  assign and_dcpl_884 = and_dcpl_176 & (fsm_output[5:4]==2'b11);
  assign and_dcpl_885 = and_dcpl_884 & and_dcpl_880;
  assign and_dcpl_887 = (fsm_output[3]) & (~ (fsm_output[1]));
  assign and_dcpl_889 = (fsm_output[5:4]==2'b01);
  assign and_dcpl_893 = and_dcpl_79 & (~ (fsm_output[6])) & and_dcpl_889 & and_dcpl_887
      & nor_315_cse;
  assign and_dcpl_897 = and_dcpl_6 & (fsm_output[6:4]==3'b010);
  assign and_dcpl_898 = and_dcpl_897 & and_dcpl_880;
  assign and_dcpl_901 = and_dcpl_897 & and_dcpl_887 & and_dcpl_99;
  assign and_dcpl_902 = (~ (fsm_output[3])) & (fsm_output[1]);
  assign and_dcpl_905 = and_dcpl_176 & and_dcpl_889 & and_dcpl_902 & and_dcpl_99;
  assign nor_687_nl = ~((fsm_output[1]) | (~ (fsm_output[8])));
  assign nor_688_nl = ~((~ (fsm_output[1])) | (fsm_output[8]));
  assign mux_981_nl = MUX_s_1_2_2(nor_687_nl, nor_688_nl, fsm_output[2]);
  assign and_1208_cse = mux_981_nl & nor_450_cse & nor_525_cse & (fsm_output[3])
      & (fsm_output[0]);
  assign and_dcpl_914 = (fsm_output[6:3]==4'b0111);
  assign and_1214_cse = xor_cse & and_dcpl_6 & and_dcpl_914;
  assign and_1216_cse = (or_1328_cse ^ (fsm_output[2])) & and_dcpl_79 & and_dcpl_914;
  assign and_dcpl_922 = and_dcpl_19 & (~ (fsm_output[6])) & nor_525_cse & and_dcpl_880;
  assign and_dcpl_924 = and_dcpl_884 & and_dcpl_902 & and_dcpl_107;
  assign and_dcpl_932 = nor_609_cse & nor_525_cse & not_tmp_21 & and_dcpl_107;
  assign and_dcpl_939 = and_dcpl_19 & (fsm_output[6:4]==3'b101);
  assign and_dcpl_940 = and_dcpl_939 & and_dcpl_887 & nor_315_cse;
  assign and_dcpl_944 = and_dcpl_939 & (fsm_output[3:0]==4'b0111);
  assign and_dcpl_946 = and_dcpl_939 & and_dcpl_887 & and_dcpl_107;
  assign nor_696_cse = ~((fsm_output[6:5]!=2'b01));
  assign mux_982_nl = MUX_s_1_2_2((fsm_output[6]), (~ (fsm_output[6])), fsm_output[5]);
  assign mux_983_nl = MUX_s_1_2_2(mux_982_nl, nor_696_cse, fsm_output[4]);
  assign nor_697_nl = ~(nor_525_cse | (fsm_output[6]));
  assign mux_984_nl = MUX_s_1_2_2(mux_983_nl, nor_697_nl, and_615_cse);
  assign and_dcpl_947 = mux_984_nl & and_dcpl_19;
  assign nor_698_nl = ~((fsm_output[4:3]!=2'b10));
  assign nor_699_nl = ~((fsm_output[0]) | (~ (fsm_output[1])) | (~ (fsm_output[3]))
      | (fsm_output[4]));
  assign mux_985_nl = MUX_s_1_2_2(nor_698_nl, nor_699_nl, fsm_output[2]);
  assign and_dcpl_950 = mux_985_nl & and_dcpl_19 & (fsm_output[6:5]==2'b11);
  assign and_dcpl_955 = and_dcpl_19 & (~ (fsm_output[6])) & nor_525_cse & (fsm_output[3])
      & (fsm_output[1]) & and_dcpl_107;
  assign and_dcpl_962 = nor_609_cse & (fsm_output[5:4]==2'b10);
  assign and_dcpl_963 = and_dcpl_962 & and_dcpl_887 & and_dcpl_99;
  assign and_dcpl_969 = (fsm_output[8:4]==5'b10001);
  assign and_dcpl_970 = and_dcpl_969 & and_dcpl_887 & and_dcpl_107;
  assign nor_702_nl = ~((fsm_output[0]) | (~ (fsm_output[1])) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (~ (fsm_output[8])));
  assign nor_703_nl = ~((~ (fsm_output[0])) | (fsm_output[1]) | (fsm_output[4]) |
      (~ (fsm_output[5])) | (fsm_output[8]));
  assign mux_986_nl = MUX_s_1_2_2(nor_702_nl, nor_703_nl, fsm_output[2]);
  assign and_dcpl_973 = mux_986_nl & nor_450_cse & (fsm_output[3]);
  assign and_dcpl_976 = and_dcpl_962 & and_747_cse & and_dcpl_99;
  assign and_dcpl_978 = and_dcpl_969 & and_747_cse & and_dcpl_107;
  assign and_dcpl_1000 = and_dcpl_606 & nor_525_cse;
  assign and_1298_cse = and_dcpl_1000 & (fsm_output[3:0]==4'b1110);
  assign and_dcpl_1006 = and_dcpl_606 & (fsm_output[5:4]==2'b01);
  assign and_1304_cse = and_dcpl_1006 & (fsm_output[3:0]==4'b0011);
  assign nor_707_cse = ~((fsm_output[1]) | (fsm_output[3]) | (fsm_output[4]) | (fsm_output[5])
      | (fsm_output[6]));
  assign nor_706_cse = ~((~ (fsm_output[1])) | (~ (fsm_output[3])) | (fsm_output[4])
      | (fsm_output[5]) | (fsm_output[6]));
  assign mux_987_nl = MUX_s_1_2_2(nor_706_cse, nor_707_cse, fsm_output[0]);
  assign nor_708_nl = ~((fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[3]) |
      nand_242_cse);
  assign mux_988_nl = MUX_s_1_2_2(mux_987_nl, nor_708_nl, fsm_output[2]);
  assign and_1305_cse = mux_988_nl & and_dcpl_19;
  assign and_1312_cse = and_dcpl_19 & (fsm_output[6:4]==3'b110) & and_dcpl_887 &
      and_dcpl_125;
  assign and_1315_cse = and_dcpl_1000 & not_tmp_21 & and_dcpl_125;
  assign and_1318_cse = and_dcpl_1006 & and_dcpl_887 & nor_315_cse;
  assign and_dcpl_1029 = and_dcpl_19 & (fsm_output[6:4]==3'b110) & and_dcpl_887 &
      (fsm_output[0]) & (fsm_output[2]);
  assign and_1333_cse = and_dcpl_606 & nor_525_cse & (fsm_output[3:0]==4'b1110);
  assign and_1338_cse = and_dcpl_606 & (fsm_output[5:4]==2'b01) & and_dcpl_887 &
      nor_315_cse;
  assign and_dcpl_1057 = and_dcpl_887 & (fsm_output[0]) & (fsm_output[2]);
  assign and_1358_cse = and_dcpl_176 & (fsm_output[5:4]==2'b10) & and_dcpl_1057;
  assign and_1360_cse = and_dcpl_176 & nor_525_cse & and_dcpl_1057;
  assign and_dcpl_1070 = and_dcpl_887 & nor_315_cse;
  assign and_dcpl_1075 = and_dcpl_606 & (fsm_output[5:4]==2'b01) & and_dcpl_1070;
  assign and_dcpl_1079 = and_dcpl_6 & (fsm_output[6]) & nor_525_cse;
  assign and_dcpl_1080 = and_dcpl_1079 & and_dcpl_1070;
  assign and_dcpl_1083 = not_tmp_21 & and_dcpl_125;
  assign and_dcpl_1084 = and_dcpl_1079 & and_dcpl_1083;
  assign and_1388_cse = and_dcpl_606 & nor_525_cse & and_dcpl_1083;
  assign or_nl = (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[3]) | (fsm_output[4])
      | (fsm_output[5]) | (fsm_output[6]) | (fsm_output[7]);
  assign or_1544_nl = (fsm_output[0]) | (fsm_output[1]) | (~((fsm_output[7:3]==5'b11111)));
  assign mux_989_nl = MUX_s_1_2_2(or_nl, or_1544_nl, fsm_output[2]);
  assign nor_721_cse = ~(mux_989_nl | (fsm_output[8]));
  assign nand_258_cse = ~((fsm_output[3]) & (fsm_output[5]) & (fsm_output[6]));
  assign or_1545_nl = (fsm_output[3]) | (fsm_output[5]) | (fsm_output[6]);
  assign mux_990_nl = MUX_s_1_2_2(or_1545_nl, nand_258_cse, fsm_output[2]);
  assign nor_723_cse = ~(mux_990_nl | (fsm_output[8]));
  assign and_dcpl_1097 = nor_723_cse & (fsm_output[7]) & (~ (fsm_output[4])) & (~
      (fsm_output[1])) & (fsm_output[0]);
  assign mux_991_cse = MUX_s_1_2_2(and_747_cse, not_tmp_21, fsm_output[0]);
  assign and_dcpl_1103 = mux_991_cse & and_dcpl_19 & and_dcpl & (~ (fsm_output[4]))
      & (fsm_output[2]);
  assign nor_727_nl = ~((fsm_output[1]) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[6]));
  assign and_2253_nl = (fsm_output[1]) & (fsm_output[4]) & (fsm_output[6]);
  assign mux_992_nl = MUX_s_1_2_2(nor_727_nl, and_2253_nl, fsm_output[0]);
  assign nor_728_nl = ~((fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[3])) |
      (fsm_output[4]) | (~ (fsm_output[6])));
  assign mux_993_cse = MUX_s_1_2_2(mux_992_nl, nor_728_nl, fsm_output[2]);
  assign and_dcpl_1105 = mux_993_cse & and_dcpl_19 & (~ (fsm_output[5]));
  assign and_dcpl_1112 = and_dcpl_19 & (fsm_output[6:4]==3'b101) & not_tmp_21 & (fsm_output[0])
      & (fsm_output[2]);
  assign and_1417_cse = (fsm_output[7]) & (~ (fsm_output[8])) & (~ (fsm_output[6]))
      & (~ (fsm_output[5])) & (fsm_output[4]) & (fsm_output[3]) & (~ (fsm_output[1]))
      & nor_315_cse;
  assign and_1425_cse = (fsm_output[8:6]==3'b101) & nor_525_cse & (fsm_output[3:0]==4'b0011);
  assign and_dcpl_1136 = and_dcpl_6 & (fsm_output[6]) & nor_525_cse & not_tmp_21
      & (fsm_output[0]) & (fsm_output[2]);
  assign not_tmp_753 = ~((fsm_output[8]) & (fsm_output[6]));
  assign or_1421_nl = (fsm_output[7]) | (~ (fsm_output[0])) | (fsm_output[4]) | (fsm_output[8])
      | (fsm_output[6]);
  assign or_1418_nl = (~ (fsm_output[8])) | (fsm_output[6]);
  assign mux_997_nl = MUX_s_1_2_2(or_1217_cse, or_1418_nl, fsm_output[4]);
  assign or_1420_nl = (fsm_output[7]) | (fsm_output[0]) | mux_997_nl;
  assign mux_998_nl = MUX_s_1_2_2(or_1421_nl, or_1420_nl, fsm_output[3]);
  assign or_1416_nl = (fsm_output[3]) | (fsm_output[7]) | (~ (fsm_output[0])) | (fsm_output[4])
      | not_tmp_753;
  assign mux_999_nl = MUX_s_1_2_2(mux_998_nl, or_1416_nl, fsm_output[2]);
  assign nor_737_nl = ~((fsm_output[5]) | mux_999_nl);
  assign or_1413_nl = (fsm_output[7]) | (~ (fsm_output[0])) | (fsm_output[4]) | not_tmp_753;
  assign or_1411_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (fsm_output[8]) | (fsm_output[6]);
  assign or_1410_nl = (fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[8]) | (~
      (fsm_output[6]));
  assign mux_995_nl = MUX_s_1_2_2(or_1411_nl, or_1410_nl, fsm_output[7]);
  assign mux_996_nl = MUX_s_1_2_2(or_1413_nl, mux_995_nl, fsm_output[3]);
  assign nor_738_nl = ~((~ (fsm_output[5])) | (fsm_output[2]) | mux_996_nl);
  assign not_tmp_754 = MUX_s_1_2_2(nor_737_nl, nor_738_nl, fsm_output[1]);
  assign and_1441_cse = and_dcpl_19 & (fsm_output[6]) & nor_525_cse & and_dcpl_887
      & and_dcpl_125;
  assign and_1447_cse = and_dcpl_19 & (fsm_output[6:4]==3'b001) & and_dcpl_887 &
      nor_315_cse;
  assign RMS_NORM_LOOP_1_1_nor_1_cse = ~(not_tmp_754 | and_dcpl_800);
  assign and_dcpl_1178 = and_dcpl_6 & (fsm_output[6]) & nor_525_cse & and_dcpl_1083;
  assign and_dcpl_1186 = and_dcpl_19 & (fsm_output[6:4]==3'b111) & and_dcpl_887 &
      (fsm_output[0]) & (fsm_output[2]);
  assign nand_263_nl = ~((fsm_output[8]) & (fsm_output[1]));
  assign mux_1002_nl = MUX_s_1_2_2(nand_263_nl, or_tmp_726, fsm_output[2]);
  assign or_1549_nl = (fsm_output[4]) | (~ (fsm_output[0])) | (~ (fsm_output[6]))
      | (fsm_output[5]) | mux_1002_nl;
  assign mux_1001_nl = MUX_s_1_2_2((~ (fsm_output[1])), (fsm_output[1]), fsm_output[8]);
  assign or_1550_nl = (~ (fsm_output[4])) | (fsm_output[0]) | (fsm_output[6]) | (~
      (fsm_output[5])) | (fsm_output[2]) | mux_1001_nl;
  assign mux_1003_nl = MUX_s_1_2_2(or_1549_nl, or_1550_nl, fsm_output[3]);
  assign and_dcpl_1201 = ~(mux_1003_nl | (fsm_output[7]));
  assign and_dcpl_1206 = and_dcpl_1000 & and_747_cse & (~ (fsm_output[0])) & (fsm_output[2]);
  assign and_dcpl_1208 = and_dcpl_1000 & and_747_cse & nor_315_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_nor_3_cse = ~(and_dcpl_1186 | and_1076_cse);
  assign and_dcpl_1238 = ~((fsm_output[8]) | (fsm_output[6]) | (fsm_output[5]));
  assign and_dcpl_1239 = and_dcpl_1238 & (fsm_output[7]) & (fsm_output[4]);
  assign and_dcpl_1240 = and_dcpl_1239 & (fsm_output[3:0]==4'b0011);
  assign and_dcpl_1245 = (fsm_output[7]) & (~ (fsm_output[4]));
  assign and_dcpl_1249 = (~ (fsm_output[8])) & (fsm_output[6]) & (~ (fsm_output[5]))
      & and_dcpl_1245 & and_dcpl_887 & (fsm_output[0]) & (fsm_output[2]);
  assign and_dcpl_1254 = and_dcpl_1238 & and_dcpl_1245 & (fsm_output[3:0]==4'b1110);
  assign and_dcpl_1257 = and_dcpl_1239 & and_dcpl_887 & nor_315_cse;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_60_cse = and_dcpl_1240 | and_dcpl_1254;
  assign and_1562_cse = and_dcpl_19 & (fsm_output[6]) & nor_525_cse & and_dcpl_887
      & (fsm_output[0]) & (fsm_output[2]);
  assign SF_LOOP_3_or_9_cse = and_1333_cse | and_1304_cse;
  assign and_dcpl_1291 = mux_993_cse & nor_419_cse & (fsm_output[7]);
  assign and_dcpl_1295 = nor_723_cse & and_dcpl_1245 & (fsm_output[1:0]==2'b01);
  assign nor_775_cse = ~((fsm_output[8]) | (fsm_output[6]));
  assign and_dcpl_1301 = mux_991_cse & nor_775_cse & (~ (fsm_output[5])) & (fsm_output[7])
      & (~ (fsm_output[4])) & (fsm_output[2]);
  assign and_dcpl_1306 = (fsm_output[8:4]==5'b01101) & not_tmp_21 & and_dcpl_125;
  assign or_tmp_1137 = (fsm_output[4]) | (~ (fsm_output[6])) | (~ (fsm_output[8]))
      | (fsm_output[7]);
  assign or_1449_nl = (fsm_output[4]) | (~ (fsm_output[6])) | (fsm_output[8]) | (fsm_output[7]);
  assign mux_1014_nl = MUX_s_1_2_2(or_tmp_1137, or_1449_nl, fsm_output[1]);
  assign or_1448_nl = (~ (fsm_output[4])) | (fsm_output[6]) | (fsm_output[8]) | (~
      (fsm_output[7]));
  assign mux_1013_nl = MUX_s_1_2_2(or_1448_nl, or_tmp_1137, fsm_output[1]);
  assign mux_1015_nl = MUX_s_1_2_2(mux_1014_nl, mux_1013_nl, fsm_output[0]);
  assign or_1445_nl = (~ (fsm_output[1])) | (~ (fsm_output[4])) | (fsm_output[6])
      | (fsm_output[8]) | (~ (fsm_output[7]));
  assign or_1441_nl = (fsm_output[8:6]!=3'b011);
  assign mux_1011_nl = MUX_s_1_2_2(or_tmp_55, or_1441_nl, fsm_output[4]);
  assign or_1443_nl = (fsm_output[1]) | mux_1011_nl;
  assign mux_1012_nl = MUX_s_1_2_2(or_1445_nl, or_1443_nl, fsm_output[0]);
  assign mux_1016_nl = MUX_s_1_2_2(mux_1015_nl, mux_1012_nl, fsm_output[2]);
  assign nor_779_cse = ~(mux_1016_nl | (fsm_output[5]) | (fsm_output[3]));
  assign nor_784_nl = ~((fsm_output[1]) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[6]) | (~ (fsm_output[7])));
  assign nor_785_nl = ~((fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[6]) |
      (~ (fsm_output[7])));
  assign and_754_nl = (fsm_output[4]) & (fsm_output[6]) & (fsm_output[7]);
  assign mux_1019_nl = MUX_s_1_2_2(nor_785_nl, and_754_nl, fsm_output[1]);
  assign mux_1020_nl = MUX_s_1_2_2(nor_784_nl, mux_1019_nl, fsm_output[0]);
  assign nor_786_nl = ~((fsm_output[1]) | (~ (fsm_output[3])) | (fsm_output[4]) |
      nand_164_cse);
  assign nor_787_nl = ~((fsm_output[1]) | (fsm_output[3]) | (fsm_output[4]) | (~
      (fsm_output[6])) | (fsm_output[7]));
  assign mux_1018_nl = MUX_s_1_2_2(nor_786_nl, nor_787_nl, fsm_output[0]);
  assign mux_1021_nl = MUX_s_1_2_2(mux_1020_nl, mux_1018_nl, fsm_output[2]);
  assign and_dcpl_1337 = mux_1021_nl & nor_419_cse;
  assign and_dcpl_1344 = nor_419_cse & (fsm_output[7]) & (~((fsm_output[6]) | (fsm_output[4])))
      & (fsm_output[3]) & (fsm_output[1]) & (~ (fsm_output[0])) & (fsm_output[2]);
  assign nor_789_nl = ~((fsm_output[5]) | (~ (fsm_output[6])) | (fsm_output[8]));
  assign nor_790_nl = ~((fsm_output[5]) | (fsm_output[6]) | (~ (fsm_output[8])));
  assign mux_1023_nl = MUX_s_1_2_2(nor_789_nl, nor_790_nl, fsm_output[4]);
  assign and_2257_nl = (~((fsm_output[1]) | (~ (fsm_output[3])))) & mux_1023_nl;
  assign nor_791_nl = ~((fsm_output[3]) | (fsm_output[4]) | (fsm_output[5]) | (fsm_output[6])
      | (fsm_output[8]));
  assign nor_792_nl = ~((~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[5]))
      | (fsm_output[6]) | (fsm_output[8]));
  assign mux_1022_nl = MUX_s_1_2_2(nor_791_nl, nor_792_nl, fsm_output[1]);
  assign mux_1024_nl = MUX_s_1_2_2(and_2257_nl, mux_1022_nl, fsm_output[0]);
  assign and_dcpl_1346 = mux_1024_nl & (~((fsm_output[7]) | (fsm_output[2])));
  assign nor_811_nl = ~((fsm_output[1]) | (~ (fsm_output[4])) | (fsm_output[5]) |
      (~ (fsm_output[8])));
  assign nor_812_nl = ~((~ (fsm_output[1])) | (fsm_output[4]) | (~ (fsm_output[5]))
      | (fsm_output[8]));
  assign mux_1052_nl = MUX_s_1_2_2(nor_811_nl, nor_812_nl, fsm_output[0]);
  assign and_dcpl_1385 = mux_1052_nl & nor_450_cse & (fsm_output[3:2]==2'b10);
  assign and_dcpl_1388 = (fsm_output[3]) & (~ (fsm_output[1])) & nor_315_cse;
  assign and_dcpl_1392 = (fsm_output[8:6]==3'b001) & nor_525_cse;
  assign and_dcpl_1393 = and_dcpl_1392 & and_dcpl_1388;
  assign and_dcpl_1398 = nor_775_cse & (fsm_output[7]);
  assign and_dcpl_1400 = and_dcpl_1398 & nor_525_cse & (fsm_output[3:0]==4'b1110);
  assign and_dcpl_1402 = and_dcpl_1398 & (fsm_output[5:4]==2'b01);
  assign and_dcpl_1403 = and_dcpl_1402 & and_dcpl_1388;
  assign and_dcpl_1407 = and_dcpl_1392 & not_tmp_21 & (fsm_output[0]) & (fsm_output[2]);
  assign and_dcpl_1411 = and_dcpl_1402 & (fsm_output[3:0]==4'b0011);
  assign and_dcpl_1440 = nor_775_cse & (fsm_output[7]) & (~ (fsm_output[5])) & (fsm_output[4])
      & and_dcpl_887 & nor_315_cse;
  assign or_tmp_1208 = (fsm_output[6]) | (fsm_output[5]) | (fsm_output[2]);
  assign nor_tmp_241 = (fsm_output[6]) & (fsm_output[5]) & (fsm_output[2]);
  assign and_dcpl_1468 = (~ (fsm_output[8])) & (fsm_output[6]);
  assign and_dcpl_1471 = and_dcpl_1468 & (~ (fsm_output[7])) & nor_525_cse & not_tmp_21
      & and_dcpl_125;
  assign and_dcpl_1476 = and_dcpl_1468 & (fsm_output[7]) & (fsm_output[5]) & (~ (fsm_output[4]))
      & and_dcpl_887 & and_dcpl_125;
  assign nor_832_nl = ~((~ (fsm_output[1])) | (fsm_output[3]) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (fsm_output[6]));
  assign mux_1061_nl = MUX_s_1_2_2(and_dcpl, and_893_cse, fsm_output[4]);
  assign nor_833_nl = ~((fsm_output[1]) | (~((fsm_output[3]) & mux_1061_nl)));
  assign mux_1062_nl = MUX_s_1_2_2(nor_832_nl, nor_833_nl, fsm_output[0]);
  assign nor_835_nl = ~((fsm_output[1]) | (~ (fsm_output[3])) | (fsm_output[4]) |
      (fsm_output[5]) | (fsm_output[6]));
  assign mux_1060_nl = MUX_s_1_2_2(nor_707_cse, nor_835_nl, fsm_output[0]);
  assign mux_1063_nl = MUX_s_1_2_2(mux_1062_nl, mux_1060_nl, fsm_output[2]);
  assign and_dcpl_1498 = mux_1063_nl & and_dcpl_19;
  assign and_dcpl_1557 = and_dcpl_6 & (fsm_output[6]) & nor_525_cse & (fsm_output[3])
      & (~ (fsm_output[1])) & nor_315_cse;
  assign and_dcpl_1572 = (fsm_output[8:6]==3'b001) & nor_525_cse & (fsm_output[3])
      & (~ (fsm_output[1])) & nor_315_cse;
  assign mux_1064_nl = MUX_s_1_2_2(and_864_cse, nor_439_cse, fsm_output[2]);
  assign and_1914_cse = mux_1064_nl & nor_450_cse & (fsm_output[5]) & (fsm_output[4])
      & (fsm_output[3]) & (~ (fsm_output[0]));
  assign and_dcpl_1685 = (fsm_output[8:6]==3'b100) & and_dcpl_889 & (fsm_output[3:0]==4'b1001);
  assign and_dcpl_1698 = (fsm_output[8:6]==3'b011) & and_dcpl_889 & not_tmp_21 &
      (~ (fsm_output[0])) & (fsm_output[2]);
  assign and_dcpl_1721 = and_dcpl_6 & (fsm_output[6:0]==7'b0101111);
  assign and_dcpl_1729 = and_dcpl_79 & (fsm_output[6:0]==7'b0011100);
  assign attention_max_attn_fixed_t_or_cse_1 = and_1214_cse | and_1216_cse;
  assign and_dcpl_1760 = and_dcpl_1079 & not_tmp_21 & and_dcpl_125;
  assign and_dcpl_1764 = and_dcpl_1079 & and_dcpl_902 & (~ (fsm_output[0])) & (fsm_output[2]);
  assign and_dcpl_1766 = and_dcpl_1079 & and_dcpl_902 & and_dcpl_125;
  assign and_dcpl_1772 = (fsm_output[8:6]==3'b101) & nor_525_cse & and_dcpl_902 &
      (fsm_output[0]) & (~ (fsm_output[2]));
  assign and_dcpl_1775 = not_tmp_21 & and_dcpl_99;
  assign and_dcpl_1780 = nor_609_cse & nor_525_cse & and_dcpl_1775;
  assign and_dcpl_1787 = and_dcpl_1468 & (fsm_output[7]) & (fsm_output[5]) & (fsm_output[4])
      & (fsm_output[3]) & (fsm_output[1]) & and_dcpl_99;
  assign and_dcpl_1793 = and_dcpl_1468 & nor_552_cse & nor_581_cse & (fsm_output[0])
      & (fsm_output[2]);
  assign and_dcpl_1797 = (fsm_output[8:6]==3'b101) & nor_525_cse & and_dcpl_1775;
  assign and_dcpl_1802 = and_dcpl_1468 & (~ (fsm_output[7])) & nor_525_cse & (~ (fsm_output[3]))
      & (fsm_output[1]) & and_dcpl_99;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_1_cse
      = reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
      & (~(and_dcpl_1780 | and_dcpl_1787 | and_dcpl_1797 | and_dcpl_1802));
  assign operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse = ~(and_dcpl_1780 | and_dcpl_1787);
  assign and_dcpl_1823 = and_dcpl_1468 & (fsm_output[7]);
  assign and_dcpl_1825 = and_dcpl_1823 & (fsm_output[5:4]==2'b01) & and_dcpl_902
      & (fsm_output[0]) & (fsm_output[2]);
  assign and_dcpl_1832 = and_dcpl_1468 & (~ (fsm_output[7])) & nor_525_cse & (fsm_output[3])
      & (~ (fsm_output[1])) & nor_315_cse;
  assign and_dcpl_1837 = and_dcpl_1823 & (fsm_output[5:4]==2'b11) & and_dcpl_902
      & (fsm_output[0]) & (~ (fsm_output[2]));
  assign nl_exs_tmp_40_54_10 = conv_s2u_44_45({(~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      , 4'b0001}) + conv_s2u_41_45(z_out_41_52_8[42:2]);
  assign exs_tmp_40_54_10 = nl_exs_tmp_40_54_10[44:0];
  assign and_dcpl_1840 = not_tmp_21 & and_dcpl_107;
  assign and_dcpl_1852 = and_dcpl_606 & (fsm_output[5:4]==2'b10);
  assign and_dcpl_1853 = and_dcpl_1852 & and_dcpl_1070;
  assign and_dcpl_1855 = and_dcpl_176 & nor_525_cse;
  assign and_dcpl_1857 = and_dcpl_887 & and_dcpl_107;
  assign and_dcpl_1869 = and_dcpl_606 & and_dcpl_829 & and_dcpl_1857;
  assign and_dcpl_1870 = and_dcpl_1855 & and_dcpl_1857;
  assign and_dcpl_1884 = and_dcpl_749 & nor_525_cse & (fsm_output[3:0]==4'b1001);
  assign and_dcpl_1901 = and_dcpl_749 & nor_525_cse & (fsm_output[3]) & (~ (fsm_output[1]))
      & and_dcpl_107;
  assign mux_1072_nl = MUX_s_1_2_2(or_645_cse, or_709_cse, fsm_output[4]);
  assign mux_1073_nl = MUX_s_1_2_2(mux_1072_nl, or_tmp_499, fsm_output[3]);
  assign mux_1071_nl = MUX_s_1_2_2(or_645_cse, or_709_cse, or_616_cse);
  assign mux_1074_nl = MUX_s_1_2_2(mux_1073_nl, mux_1071_nl, fsm_output[2]);
  assign and_dcpl_1910 = (~ mux_1074_nl) & (~ (fsm_output[8])) & (fsm_output[7])
      & (~ (fsm_output[1])) & (fsm_output[0]);
  assign and_dcpl_1917 = and_dcpl_1468 & (fsm_output[7]) & (fsm_output[5]) & (fsm_output[4])
      & (~ (fsm_output[3])) & and_dcpl_107;
  assign and_dcpl_1923 = and_dcpl_1468 & (fsm_output[7]) & nor_525_cse & (fsm_output[3])
      & (~ (fsm_output[1])) & and_dcpl_107;
  assign nor_886_nl = ~((fsm_output[0]) | (~ (fsm_output[4])) | (fsm_output[5]) |
      (fsm_output[6]));
  assign nor_887_nl = ~((~ (fsm_output[0])) | (fsm_output[4]) | nand_158_cse);
  assign mux_1034_nl = MUX_s_1_2_2(nor_886_nl, nor_887_nl, fsm_output[2]);
  assign and_1675_ssc = mux_1034_nl & and_dcpl_19 & (fsm_output[3]) & (~ (fsm_output[1]));
  assign nor_890_nl = ~((fsm_output[6:3]!=4'b0000));
  assign nor_891_nl = ~((fsm_output[6:3]!=4'b0010));
  assign mux_1037_nl = MUX_s_1_2_2(nor_890_nl, nor_891_nl, fsm_output[1]);
  assign mux_1038_nl = MUX_s_1_2_2(nor_706_cse, mux_1037_nl, fsm_output[0]);
  assign and_2262_nl = (fsm_output[6:4]==3'b111);
  assign nor_888_nl = ~((fsm_output[6:4]!=3'b000));
  assign mux_1035_nl = MUX_s_1_2_2(and_2262_nl, nor_888_nl, fsm_output[3]);
  assign and_2263_nl = (fsm_output[1]) & mux_1035_nl;
  assign mux_1036_nl = MUX_s_1_2_2(and_2263_nl, nor_707_cse, fsm_output[0]);
  assign mux_1039_nl = MUX_s_1_2_2(mux_1038_nl, mux_1036_nl, fsm_output[2]);
  assign and_1676_ssc = mux_1039_nl & and_dcpl_19;
  assign SF_LOOP_3_or_11_cse = and_dcpl_1291 | and_dcpl_1295 | and_dcpl_1301 | and_dcpl_1306;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse = and_dcpl_800 | and_dcpl_804;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_nor_5_itm = ~(and_dcpl_800 | and_dcpl_804);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_1_cse
      = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[17])
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_5_itm;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_7_cse
      = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[19])
      & (~ and_dcpl_800);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_45_cse = and_dcpl_1186 | and_1076_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_2_cse_1
      = (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21])
      & and_995_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_1_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      and_dcpl_1793);
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_17_cse = operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_1_nl
      & (~(and_dcpl_1797 | and_dcpl_1802));
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse = and_dcpl_1780 | and_dcpl_1787;
  assign for_for_nor_3_cse = ~(and_dcpl_1346 | and_1562_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse = CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm
      & and_1914_cse;
  assign CACHE_UPDATE_LOOP_3_1_or_6_cse_1 = and_1305_cse | and_1315_cse;
  assign or_dcpl = and_dcpl_292 | (and_dcpl_262 & and_dcpl_316) | and_dcpl_440 |
      and_dcpl_261 | (and_dcpl_276 & and_dcpl_243);
  assign nl_SF_LOOP_3_acc_55_nl = conv_s2s_30_31(z_out_49) + conv_u2s_28_31({SF_LOOP_3_acc_53_itm_27_24
      , SF_LOOP_3_acc_53_itm_23_15 , SF_LOOP_3_acc_53_itm_14_9 , SF_LOOP_3_acc_53_itm_8_0});
  assign SF_LOOP_3_acc_55_nl = nl_SF_LOOP_3_acc_55_nl[30:0];
  assign nl_SF_LOOP_3_acc_56_itm = conv_u2s_33_35({(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20:15])
      , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20]))
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21]))
      , 1'b0 , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[12]))
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[6:5])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[13:10])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[11:8])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[2])})
      + conv_s2s_31_35(SF_LOOP_3_acc_55_nl);
  assign SF_LOOP_3_acc_56_itm = nl_SF_LOOP_3_acc_56_itm[34:0];
  assign nl_SF_LOOP_3_acc_73_nl = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12]))})
      + ({2'b11 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34]))})
      + 3'b001;
  assign SF_LOOP_3_acc_73_nl = nl_SF_LOOP_3_acc_73_nl[2:0];
  assign nl_SF_LOOP_3_acc_76_nl = conv_u2u_4_5({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22]))
      , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])) , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]))})
      + conv_u2u_4_5({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35]))
      , 1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]))})
      + 5'b00001;
  assign SF_LOOP_3_acc_76_nl = nl_SF_LOOP_3_acc_76_nl[4:0];
  assign nl_SF_LOOP_3_acc_80_nl = conv_u2u_9_10({z_out_25 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[12]))
      , SF_LOOP_3_acc_73_nl , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[33]))})
      + conv_u2u_9_10({SF_LOOP_3_acc_76_nl , 2'b11 , (SF_LOOP_3_acc_77_sdt_1[2:1])})
      + 10'b0000000001;
  assign SF_LOOP_3_acc_80_nl = nl_SF_LOOP_3_acc_80_nl[9:0];
  assign nl_SF_LOOP_3_acc_74_nl = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:31]))})
      + ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]))})
      + 3'b001;
  assign SF_LOOP_3_acc_74_nl = nl_SF_LOOP_3_acc_74_nl[2:0];
  assign nl_SF_LOOP_3_acc_75_nl = ({2'b11 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12]))})
      + ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30]))});
  assign SF_LOOP_3_acc_75_nl = nl_SF_LOOP_3_acc_75_nl[3:0];
  assign nl_SF_LOOP_3_acc_78_nl = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[4:3]))})
      + ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14]))})
      + 3'b001;
  assign SF_LOOP_3_acc_78_nl = nl_SF_LOOP_3_acc_78_nl[2:0];
  assign nl_SF_LOOP_3_acc_79_nl = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33]))})
      + ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]))});
  assign SF_LOOP_3_acc_79_nl = nl_SF_LOOP_3_acc_79_nl[2:0];
  assign nl_SF_LOOP_3_acc_81_nl = ({1'b1 , SF_LOOP_3_acc_74_nl , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[30]))
      , SF_LOOP_3_acc_75_nl}) + ({2'b11 , SF_LOOP_3_acc_78_nl , 1'b1 , SF_LOOP_3_acc_79_nl});
  assign SF_LOOP_3_acc_81_nl = nl_SF_LOOP_3_acc_81_nl[8:0];
  assign nl_SF_LOOP_3_acc_68_nl = conv_u2u_13_14({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[4:3])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[4:3]) , 1'b0
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33]) , 1'b0 ,
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19]) , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14])})
      + conv_u2u_13_14({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]) ,
      1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[2]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39]) , 1'b0
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5])});
  assign SF_LOOP_3_acc_68_nl = nl_SF_LOOP_3_acc_68_nl[13:0];
  assign nl_SF_LOOP_3_acc_69_nl = conv_u2u_5_6({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[2]))
      , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14])) , (~
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]))}) + conv_u2u_5_6({(~
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5])) , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25]))
      , 1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26]))})
      + 6'b000001;
  assign SF_LOOP_3_acc_69_nl = nl_SF_LOOP_3_acc_69_nl[5:0];
  assign nl_SF_LOOP_3_acc_70_nl = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30]))})
      + ({2'b11 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]))})
      + 4'b0001;
  assign SF_LOOP_3_acc_70_nl = nl_SF_LOOP_3_acc_70_nl[3:0];
  assign nl_SF_LOOP_3_acc_71_nl = ({1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]))
      , 1'b1}) + ({2'b11 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14]))});
  assign SF_LOOP_3_acc_71_nl = nl_SF_LOOP_3_acc_71_nl[3:0];
  assign nl_SF_LOOP_3_acc_62_nl = conv_u2u_9_10({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[16])
      , (signext_8_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[18]))})
      + conv_u2u_9_10({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[27])
      , (signext_5_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[27])});
  assign SF_LOOP_3_acc_62_nl = nl_SF_LOOP_3_acc_62_nl[9:0];
  assign nl_SF_LOOP_3_acc_64_nl = conv_u2u_6_7({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36])})
      + conv_u2u_3_7({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33])});
  assign SF_LOOP_3_acc_64_nl = nl_SF_LOOP_3_acc_64_nl[6:0];
  assign nl_SF_LOOP_3_acc_66_nl = conv_u2u_13_14(signext_13_11({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[16])
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28]))
      , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28]))
      , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28]))}))
      + conv_u2u_10_14({SF_LOOP_3_acc_64_nl , (z_out_26[2:0])}) + conv_u2u_1_14(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36]);
  assign SF_LOOP_3_acc_66_nl = nl_SF_LOOP_3_acc_66_nl[13:0];
  assign nl_SF_LOOP_3_acc_12_nl = conv_u2u_16_17({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14])
      , (signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19]))
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8])})
      + conv_u2u_16_17({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19])
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[4:3]) , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17]))
      , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17]))})
      + conv_u2u_1_17(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39]);
  assign SF_LOOP_3_acc_12_nl = nl_SF_LOOP_3_acc_12_nl[16:0];
  assign nl_SF_LOOP_3_acc_32_itm = conv_u2u_20_22({SF_LOOP_3_acc_80_nl , (SF_LOOP_3_acc_77_sdt_1[0])
      , SF_LOOP_3_acc_81_nl}) + conv_u2u_19_22({z_out_24 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17])
      , SF_LOOP_3_acc_68_nl}) + conv_u2u_19_22({SF_LOOP_3_acc_69_nl , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[25]))
      , 2'b11 , SF_LOOP_3_acc_70_nl , SF_LOOP_3_acc_71_nl , 2'b00}) + conv_u2u_18_22({z_out_27
      , (z_out_20[7:0]) , z_out_34}) + conv_u2u_18_22({SF_LOOP_3_acc_62_nl , (z_out_29[7:0])})
      + conv_u2u_17_22({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[2]) , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]) ,
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25])}) + conv_u2u_17_22({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[34:33])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22]) , 1'b0
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]) , 1'b0 , (signext_5_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22]) , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[16]))})
      + conv_u2u_18_22({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8]))
      , 1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]))
      , 3'b111 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14]))
      , 1'b1 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]))
      , 3'b000}) + conv_u2u_18_22({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30]))
      , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14])) , 3'b111
      , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6])) , 3'b111
      , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30])) , 2'b00})
      + conv_u2u_18_22({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[32:30]) , 1'b0 ,
      (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5])) ,
      1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[27]) , 1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[2])}) + conv_u2u_17_22({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8]) , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17]) , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22]))
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19]) , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])
      , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[27]))})
      + conv_u2u_16_22({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[27]) , SF_LOOP_3_acc_66_nl})
      + conv_u2u_17_22(SF_LOOP_3_acc_12_nl) + conv_u2u_17_22(signext_17_16({(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29])
      , 3'b000 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]))
      , 1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]))
      , 1'b0 , (signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[29])}));
  assign SF_LOOP_3_acc_32_itm = nl_SF_LOOP_3_acc_32_itm[21:0];
  assign RMS_NORM_LOOP_1_2_or_itm = and_dcpl_885 | and_1216_cse;
  assign RMS_NORM_LOOP_1_2_or_1_itm = and_dcpl_893 | and_dcpl_898 | and_dcpl_924;
  assign RMS_NORM_LOOP_1_2_or_2_itm = and_dcpl_901 | and_1214_cse;
  assign RMS_NORM_LOOP_1_2_nor_seb = ~(and_dcpl_893 | and_dcpl_898);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_18_itm = and_dcpl_1201 | and_dcpl_1208;
  assign SF_LOOP_3_or_4_itm = nor_779_cse | and_1333_cse | and_1304_cse;
  assign SF_LOOP_3_or_13_itm = and_1318_cse | and_1358_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_itm = and_dcpl_1337 | and_dcpl_1344;
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39 <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & and_dcpl_105 ) begin
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39 <= RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux1h_nl
          & (~(RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1 | RMS_NORM_LOOP_2_2_and_5_ssc_1));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_15 <= 24'b000000000000000000000000;
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_14_0 <= 15'b000000000000000;
    end
    else if ( QUANTIZE_ACTIVATION_LOOP_1_max_val_and_1_ssc ) begin
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_15 <= MUX1HOT_v_24_4_2((input_rsci_data_out_d[38:15]),
          (z_out_12[38:15]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
          (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[38:15]), {RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1
          , RMS_NORM_LOOP_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_5_ssc_1 , and_19_cse});
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_14_0 <= MUX1HOT_v_15_4_2((input_rsci_data_out_d[14:0]),
          (z_out_12[14:0]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
          (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[14:0]), {RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1
          , RMS_NORM_LOOP_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_5_ssc_1 , and_19_cse});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_111 | or_dcpl_106 | or_dcpl_104)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_46_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_111 | or_dcpl_115 | (~ (fsm_output[5]))
        | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_44_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_111 | or_dcpl_115 | or_dcpl_104)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_46_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_110 | or_601_cse | or_dcpl_106 | (~ (fsm_output[5]))
        | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_44_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39 <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & and_dcpl_112 ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39 <= RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux1h_nl
          & (~(RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1 | RMS_NORM_LOOP_2_2_and_5_ssc_1));
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15 <= 24'b000000000000000000000000;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_14_0 <= 15'b000000000000000;
    end
    else if ( QUANTIZE_ACTIVATION_LOOP_1_1_max_val_and_1_ssc ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15 <= MUX1HOT_v_24_4_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[38:15]),
          (z_out_12[38:15]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
          (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[38:15]), {RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1
          , RMS_NORM_LOOP_2_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_5_ssc_1 , and_19_cse});
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_14_0 <= MUX1HOT_v_15_4_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[14:0]),
          (z_out_12[14:0]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
          (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[14:0]), {RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1
          , RMS_NORM_LOOP_2_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_5_ssc_1 , and_19_cse});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_130 | or_113_cse | (fsm_output[6]) |
        or_dcpl_104)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_4_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_46_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_130 | or_dcpl_134 | (~ (fsm_output[5]))
        | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_2_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_44_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_130 | or_dcpl_134 | or_dcpl_104)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_3_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_46_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_dcpl_129 | or_607_cse | or_dcpl_106 | (~ (fsm_output[5]))
        | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= z_out_44_17;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2 <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & ((LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & mux_208_nl)
        | exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2_mx0c2) ) begin
      exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2 <= MUX_s_1_2_2((z_out_19[2]),
          reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd, exitL_exit_LINEAR_FORWARD_NO_MUL_LOOP_5_3_lpi_2_mx0c2);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      strm_out_rsci_idat_31_2 <= 30'b000000000000000000000000000000;
    end
    else if ( input_rsc_en_d_1 & (~(or_616_cse | (~ (fsm_output[8])) | or_607_cse
        | or_dcpl_105 | nand_158_cse)) ) begin
      strm_out_rsci_idat_31_2 <= output_rsci_data_out_d[29:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd <= 1'b0;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1 <= 1'b0;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_15 <= 15'b000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_14_0 <= 15'b000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39 <= 1'b0;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30 <= 9'b000000000;
      rms_norm_384_div_cmp_b_0 <= 1'b0;
      rms_norm_384_div_cmp_b_4_1 <= 4'b0000;
      rms_norm_384_div_cmp_b_15 <= 1'b0;
      rms_norm_384_div_cmp_b_14_5 <= 10'b0000000000;
      rms_norm_384_div_cmp_b_19_16 <= 4'b0000;
      rms_norm_384_div_cmp_b_60 <= 1'b0;
      rms_norm_384_div_cmp_b_59_39 <= 21'b000000000000000000000;
      rms_norm_384_div_cmp_b_38_20 <= 19'b0000000000000000000;
      rms_norm_384_div_cmp_a_71 <= 1'b0;
      rms_norm_384_div_cmp_a_70_47 <= 24'b000000000000000000000000;
      rms_norm_384_div_cmp_a_46_32 <= 15'b000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_1_0
          <= 2'b00;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_15
          <= 1'b0;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_14_2
          <= 13'b0000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_17_16
          <= 2'b00;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_58
          <= 2'b00;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_57_39
          <= 19'b0000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_18
          <= 21'b000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71
          <= 1'b0;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_70_68
          <= 3'b000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_67_47
          <= 21'b000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_46_32
          <= 15'b000000000000000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55 <= 1'b0;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_31 <= 24'b000000000000000000000000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_30_16 <= 15'b000000000000000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39 <= 1'b0;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_36 <= 3'b000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_35_15 <= 21'b000000000000000000000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_14_0 <= 15'b000000000000000;
      reg_strm_out_rsci_iswt0_cse <= 1'b0;
      reg_strm_in_rsci_iswt0_cse <= 1'b0;
      SF_LOOP_3_acc_38_itm_18 <= 1'b0;
      reg_SF_LOOP_3_acc_38_1_ftd <= 1'b0;
      reg_SF_LOOP_3_acc_38_1_ftd_1 <= 8'b00000000;
      reg_SF_LOOP_3_acc_38_1_ftd_2 <= 9'b000000000;
      attention_round_1_qr_39_16_3_lpi_3_dfm_23_20 <= 4'b0000;
      SF_LOOP_3_acc_5_psp_sva_21 <= 1'b0;
      SF_LOOP_3_acc_5_psp_sva_19_17 <= 3'b000;
      SF_LOOP_3_acc_5_psp_sva_9 <= 1'b0;
      LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2 <= 1'b0;
      SF_LOOP_3_acc_45_itm_13_9 <= 5'b00000;
      SF_LOOP_3_acc_45_itm_8_0 <= 9'b000000000;
      SF_LOOP_3_acc_53_itm_27_24 <= 4'b0000;
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd <= 2'b00;
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1 <= 2'b00;
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2 <= 2'b00;
      CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4 <= 2'b00;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd <= 2'b00;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1 <= 2'b00;
      SF_LOOP_3_acc_53_itm_14_9 <= 6'b000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_60 <= 1'b0;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_59_57 <= 3'b000;
      attention_exp_exp_half_mul_3_cse_sva <= 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
      INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm <= 1'b0;
    end
    else if ( input_rsc_en_d_1 ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd <= mux_220_ssc;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1 <= ~ mux_220_ssc;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_15 <= MUX1HOT_v_15_5_2((attention_sqrt_1_guess_sva_29_0[29:15]),
          (attention_abs_qif_acc_pmx_lpi_1_dfm_mx0_30_1[29:15]), (z_out_51_40_1[29:15]),
          (attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_15[14:0]),
          (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[14:0]),
          {not_tmp_199 , attention_sqrt_1_guess_or_1_cse , attention_sqrt_1_guess_or_2_cse
          , and_dcpl_136 , and_dcpl_142});
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_14_0 <= MUX1HOT_v_15_5_2((attention_sqrt_1_guess_sva_29_0[14:0]),
          (attention_abs_qif_acc_pmx_lpi_1_dfm_mx0_30_1[14:0]), (z_out_51_40_1[14:0]),
          attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_14_0,
          reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
          {not_tmp_199 , attention_sqrt_1_guess_or_1_cse , attention_sqrt_1_guess_or_2_cse
          , and_dcpl_136 , and_dcpl_142});
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39 <= operator_40_24_true_AC_TRN_AC_WRAP_mux1h_nl
          & mux_234_seb;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30 <= MUX_v_9_2_2(9'b000000000,
          operator_40_24_true_AC_TRN_AC_WRAP_mux1h_2_nl, mux_234_seb);
      rms_norm_384_div_cmp_b_0 <= rms_norm_384_mux1h_2_nl & (~(mux_246_nl | (fsm_output[7])));
      rms_norm_384_div_cmp_b_4_1 <= MUX1HOT_v_4_4_2((z_out_51_40_1[4:1]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[4:1]),
          (operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0[4:1]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[3:0]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_b_15 <= MUX1HOT_s_1_4_2((z_out_51_40_1[15]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[0]),
          (operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0[15]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[10]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_b_14_5 <= MUX1HOT_v_10_4_2((z_out_51_40_1[14:5]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[14:5]),
          (operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0[14:5]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[9:0]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_b_19_16 <= MUX1HOT_v_4_4_2((z_out_51_40_1[19:16]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[4:1]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0[3:0]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[14:11]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_b_60 <= MUX1HOT_s_1_4_2((z_out_51_40_1[39]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
          LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_40, (LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp[40]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_b_59_39 <= MUX1HOT_v_21_4_2((signext_21_1(z_out_51_40_1[39])),
          ({{20{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
          reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[39:19]), (LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp[39:19]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_b_38_20 <= MUX1HOT_v_19_4_2((z_out_51_40_1[38:20]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23:5]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[18:0]), (LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp[18:0]),
          {and_dcpl_149 , and_dcpl_151 , and_dcpl_153 , and_dcpl_155});
      rms_norm_384_div_cmp_a_71 <= rms_norm_384_mux1h_17_nl & (~ and_173_ssc);
      rms_norm_384_div_cmp_a_70_47 <= MUX_v_24_2_2(24'b000000000000000000000000,
          rms_norm_384_mux1h_21_nl, rms_norm_384_not_1_nl);
      rms_norm_384_div_cmp_a_46_32 <= MUX1HOT_v_15_4_2(15'b000000000000001, (attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[14:0]),
          reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
          (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[14:0]), {and_173_ssc , and_dcpl_158 ,
          and_dcpl_159 , and_dcpl_155});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_1_0
          <= MUX1HOT_v_2_4_2((QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[1:0]), (attention_max_attn_fixed_t_1_conc_psp_mx0w12_14_0[1:0]),
          (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[1:0]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[1:0]), {and_dcpl_153 , and_dcpl_162
          , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_15
          <= MUX1HOT_s_1_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_12_sdt_15_0[13]),
          (attention_max_attn_fixed_t_1_conc_psp_mx0w12_38_15[0]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[0]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[15]), {and_dcpl_153 , and_dcpl_162
          , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_14_2
          <= MUX1HOT_v_13_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_12_sdt_15_0[12:0]),
          (attention_max_attn_fixed_t_1_conc_psp_mx0w12_14_0[14:2]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[14:2]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[14:2]), {and_dcpl_153 ,
          and_dcpl_162 , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_17_16
          <= MUX1HOT_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_12_sdt_15_0[15:14]),
          (attention_max_attn_fixed_t_1_conc_psp_mx0w12_38_15[2:1]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[2:1]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[1:0]), {and_dcpl_153 ,
          and_dcpl_162 , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_58
          <= MUX1HOT_v_2_4_2(LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_41_40, ({{1{attention_max_attn_fixed_t_1_conc_psp_mx0w12_39}},
          attention_max_attn_fixed_t_1_conc_psp_mx0w12_39}), ({{1{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
          reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}),
          LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_41_40, {and_dcpl_153 , and_dcpl_162
          , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_57_39
          <= MUX1HOT_v_19_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0[39:21]),
          ({{18{attention_max_attn_fixed_t_1_conc_psp_mx0w12_39}}, attention_max_attn_fixed_t_1_conc_psp_mx0w12_39}),
          ({{18{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
          reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0[39:21]), {and_dcpl_153
          , and_dcpl_162 , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_18
          <= MUX1HOT_v_21_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0[20:0]),
          (attention_max_attn_fixed_t_1_conc_psp_mx0w12_38_15[23:3]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23:3]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0[20:0]), {and_dcpl_153 ,
          and_dcpl_162 , and_dcpl_165 , and_dcpl_167});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71
          <= LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_9_nl & (~ or_436_ssc);
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_70_68
          <= MUX_v_3_2_2(3'b000, LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_13_nl, LINEAR_FORWARD_NO_MUL_LOOP_2_2_not_4_nl);
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_67_47
          <= MUX_v_21_2_2(21'b000000000000000000000, LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_16_nl,
          LINEAR_FORWARD_NO_MUL_LOOP_2_2_not_2_nl);
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_46_32
          <= MUX1HOT_v_15_5_2((attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[14:0]),
          (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14:0]),
          15'b000000001111111, (output_rsci_data_out_d[14:0]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
          {and_dcpl_158 , and_dcpl_159 , or_436_ssc , and_dcpl_169 , and_188_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55 <= SOFTMAX_LOOP_5_mux_nl & (~
          and_197_ssc);
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_31 <= MUX1HOT_v_24_3_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:15]),
          reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
          24'b000000000000000000000010, {and_192_nl , and_195_ssc , and_197_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_30_16 <= MUX_v_15_2_2(15'b000000000000000,
          SOFTMAX_LOOP_5_mux_1_nl, SOFTMAX_LOOP_5_not_1_nl);
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39 <= MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
          (z_out_51_40_1[39]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
          {and_198_ssc , and_dcpl_183 , and_202_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_36 <= MUX1HOT_v_3_3_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2:0]),
          (z_out_51_40_1[38:36]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23:21]),
          {and_198_ssc , and_dcpl_183 , and_202_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_35_15 <= MUX1HOT_v_21_3_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35:15]),
          (z_out_51_40_1[35:15]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20:0]),
          {and_198_ssc , and_dcpl_183 , and_202_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_14_0 <= MUX1HOT_v_15_3_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[14:0]),
          (z_out_51_40_1[14:0]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
          {and_198_ssc , and_dcpl_183 , and_202_ssc});
      reg_strm_out_rsci_iswt0_cse <= and_dcpl_128 & and_dcpl_185;
      reg_strm_in_rsci_iswt0_cse <= ~(or_dcpl_156 | (fsm_output[2]) | (fsm_output[6])
          | or_629_cse | (fsm_output[5]) | ((fsm_output[1]) & CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm));
      SF_LOOP_3_acc_38_itm_18 <= MUX_s_1_2_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt[18]),
          (SF_LOOP_3_acc_38_sdt[18]), and_dcpl_450);
      reg_SF_LOOP_3_acc_38_1_ftd <= MUX1HOT_s_1_4_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt[17]),
          (operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[17]), (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm[17]),
          (SF_LOOP_3_acc_38_sdt[17]), {and_dcpl_474 , SF_LOOP_3_and_itm , and_dcpl_514
          , and_dcpl_450});
      reg_SF_LOOP_3_acc_38_1_ftd_1 <= MUX1HOT_v_8_5_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt[16:9]),
          (operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[16:9]), (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm[16:9]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm[16:9]),
          (SF_LOOP_3_acc_38_sdt[16:9]), {and_dcpl_474 , SF_LOOP_3_and_itm , and_dcpl_514
          , and_dcpl_196 , and_dcpl_450});
      reg_SF_LOOP_3_acc_38_1_ftd_2 <= MUX1HOT_v_9_6_2(for_for_j_and_1_nl, (operator_40_24_true_AC_TRN_AC_WRAP_acc_40_sdt[8:0]),
          (operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[8:0]), (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_itm[8:0]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm[8:0]),
          (SF_LOOP_3_acc_38_sdt[8:0]), {(~ mux_396_nl) , and_dcpl_474 , SF_LOOP_3_and_itm
          , and_dcpl_514 , and_dcpl_196 , and_dcpl_450});
      attention_round_1_qr_39_16_3_lpi_3_dfm_23_20 <= MUX_v_4_2_2((z_out_50[23:20]),
          (z_out_8[23:20]), attention_round_1_qelse_or_16_cse);
      SF_LOOP_3_acc_5_psp_sva_21 <= z_out_2[21];
      SF_LOOP_3_acc_5_psp_sva_19_17 <= z_out_2[19:17];
      SF_LOOP_3_acc_5_psp_sva_9 <= MUX_s_1_2_2(operator_40_24_true_AC_TRN_AC_WRAP_or_nl,
          (z_out_2[9]), and_dcpl_450);
      LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2 <= QUANTIZE_ACTIVATION_LOOP_2_mux1h_nl
          & (~ and_dcpl_545);
      SF_LOOP_3_acc_45_itm_13_9 <= SF_LOOP_3_acc_45_sdt[13:9];
      SF_LOOP_3_acc_45_itm_8_0 <= MUX_v_9_2_2(LINEAR_FORWARD_NO_MUL_LOOP_2_1_j_asn_SF_LOOP_3_acc_45_itm_1_8_RMS_NORM_LOOP_2_and_nl,
          (SF_LOOP_3_acc_45_sdt[8:0]), and_dcpl_450);
      SF_LOOP_3_acc_53_itm_27_24 <= SF_LOOP_3_acc_86_sdt[12:9];
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd <= MUX_v_2_2_2(2'b00, APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_6_nl,
          nand_245_itm);
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1 <= MUX_v_2_2_2(2'b00, APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_8_nl,
          nand_245_itm);
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2 <= MUX_v_2_2_2(2'b00, mux1h_4_nl,
          nand_245_itm);
      CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4 <= MUX_v_2_2_2(2'b00, CACHE_UPDATE_LOOP_3_k_mux1h_5_nl,
          nand_246_seb);
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd <= MUX_v_2_2_2(2'b00, CACHE_UPDATE_LOOP_3_k_mux1h_10_nl,
          nand_246_seb);
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1 <= MUX_v_2_2_2(2'b00, mux1h_5_nl, nand_246_seb);
      SF_LOOP_3_acc_53_itm_14_9 <= SF_LOOP_3_acc_87_sdt[14:9];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_60 <= z_out_58[60];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_59_57 <= MUX_v_3_2_2((attention_exp_exp_half_mul_4_cse_sva_1[59:57]),
          (z_out_58[59:57]), and_dcpl_662);
      attention_exp_exp_half_mul_3_cse_sva <= z_out_11[79:0];
      INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm <= INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_tmp;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_mdf_sva <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (~(or_tmp_227 | or_607_cse | or_dcpl_114 | (fsm_output[6:5]!=2'b10)
        | (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1))) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_mdf_sva <= LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd
          <= 4'b0000;
      reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1
          <= 36'b000000000000000000000000000000000000;
    end
    else if ( GEMM_3D_FLOAT_LOOP_4_and_ssc ) begin
      reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd
          <= MUX_v_4_2_2(4'b0000, mux1h_1_nl, GEMM_3D_FLOAT_LOOP_4_nand_3_itm);
      reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1
          <= MUX_v_36_2_2(36'b000000000000000000000000000000000000, mux1h_2_nl, GEMM_3D_FLOAT_LOOP_4_nand_3_itm);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd <= 3'b000;
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1 <= 5'b00000;
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2 <= 3'b000;
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3 <= 9'b000000000;
    end
    else if ( attention_round_1_qelse_and_3_ssc ) begin
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd <= MUX1HOT_v_3_4_2((z_out_8[19:17]),
          (z_out_50[19:17]), (SF_LOOP_3_acc_47_itm[19:17]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[19:17]),
          {attention_round_1_qelse_or_16_cse , attention_round_1_qelse_or_9_cse ,
          and_dcpl_450 , and_dcpl_661});
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1 <= MUX1HOT_v_5_5_2((z_out_8[16:12]),
          (z_out_50[16:12]), (APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm[16:12]),
          (SF_LOOP_3_acc_47_itm[16:12]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[16:12]),
          {attention_round_1_qelse_or_16_cse , attention_round_1_qelse_or_9_cse ,
          and_dcpl_196 , and_dcpl_450 , and_dcpl_661});
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2 <= MUX1HOT_v_3_6_2((z_out_7[11:9]),
          (z_out_8[11:9]), (z_out_50[11:9]), (APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm[11:9]),
          (SF_LOOP_3_acc_47_itm[11:9]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[11:9]),
          {and_dcpl_474 , attention_round_1_qelse_or_16_cse , attention_round_1_qelse_or_9_cse
          , and_dcpl_196 , and_dcpl_450 , and_dcpl_661});
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3 <= MUX1HOT_v_9_7_2(for_for_j_and_nl,
          (z_out_7[8:0]), (z_out_8[8:0]), (z_out_50[8:0]), (APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm[8:0]),
          (SF_LOOP_3_acc_47_itm[8:0]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[8:0]),
          {(~ mux_422_nl) , and_dcpl_474 , attention_round_1_qelse_or_16_cse , attention_round_1_qelse_or_9_cse
          , and_dcpl_196 , and_dcpl_450 , and_dcpl_661});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (((~((~((z_out_19[2]) & (z_out_22[4]))) | (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1)
        | (z_out_31[2]))) & mux_456_nl) | and_dcpl_440 | and_dcpl_494 | and_dcpl_445
        | and_dcpl_366 | and_dcpl_496 | CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c5
        | and_dcpl_497 | and_dcpl_387 | and_dcpl_348 | and_dcpl_337 | and_dcpl_240)
        ) begin
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm <= ~((~((for_for_mux1h_4_nl
          & (~ and_dcpl_118)) | and_dcpl_496)) | CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c5);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_sqrt_1_for_i_4_0_sva_4_3 <= 2'b00;
      attention_sqrt_1_for_i_4_0_sva_2_0 <= 3'b000;
    end
    else if ( attention_sqrt_1_for_i_and_ssc ) begin
      attention_sqrt_1_for_i_4_0_sva_4_3 <= MUX_v_2_2_2(2'b00, attention_sqrt_for_i_attention_sqrt_for_i_mux_nl,
          attention_sqrt_1_for_i_not_2_nl);
      attention_sqrt_1_for_i_4_0_sva_2_0 <= MUX_v_3_2_2(3'b000, mux1h_nl, nor_629_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_abs_4_qif_acc_pmx_lpi_1_dfm <= 31'b0000000000000000000000000000000;
    end
    else if ( input_rsc_en_d_1 & mux_516_nl ) begin
      attention_abs_4_qif_acc_pmx_lpi_1_dfm <= MUX1HOT_v_31_3_2(z_out_57, (z_out_9[30:0]),
          operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_nl, {attention_abs_qif_or_nl
          , attention_abs_qif_or_1_nl , and_dcpl_514});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_sqrt_1_guess_sva_29_0 <= 30'b000000000000000000000000000000;
    end
    else if ( input_rsc_en_d_1 & (attention_sqrt_1_guess_sva_29_0_mx0c0 | and_dcpl_147
        | attention_sqrt_1_guess_sva_29_0_mx0c2 | attention_sqrt_1_guess_sva_29_0_mx0c3)
        ) begin
      attention_sqrt_1_guess_sva_29_0 <= MUX1HOT_v_30_3_2(attention_abs_qif_acc_pmx_lpi_1_dfm_mx0_30_1,
          (z_out_51_40_1[29:0]), (readslicef_78_30_48(operator_40_24_true_AC_TRN_AC_WRAP_acc_nl)),
          {attention_sqrt_guess_or_nl , and_dcpl_147 , attention_sqrt_1_guess_sva_29_0_mx0c2});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_acc_5_psp_sva_8_0 <= 9'b000000000;
      SF_LOOP_3_acc_53_itm_8_0 <= 9'b000000000;
    end
    else if ( SF_LOOP_3_and_4_cse ) begin
      SF_LOOP_3_acc_5_psp_sva_8_0 <= MUX1HOT_v_9_3_2(operator_40_24_true_AC_TRN_AC_WRAP_or_1_nl,
          z_out_29, (z_out_2[8:0]), {(~ mux_530_nl) , and_545_nl , and_dcpl_450});
      SF_LOOP_3_acc_53_itm_8_0 <= MUX_v_9_2_2(z_out_20, (SF_LOOP_3_acc_87_sdt[8:0]),
          and_dcpl_450);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & (and_dcpl_500 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1
        | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2
        | and_dcpl_260 | and_dcpl_263 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c5
        | and_dcpl_530) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm <= MUX1HOT_s_1_4_2((readslicef_4_1_3(attention_sqrt_for_acc_3_nl)),
          (z_out_31[2]), z_out_30_2, operator_40_24_true_AC_TRN_AC_WRAP_or_mx0w6,
          {and_dcpl_500 , attention_sqrt_for_or_nl , attention_sqrt_for_or_1_nl ,
          and_dcpl_530});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
          <= 1'b0;
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1
          <= 24'b000000000000000000000000;
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2
          <= 15'b000000000000000;
    end
    else if ( GEMM_3D_FLOAT_LOOP_4_1_and_ssc ) begin
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
          <= MUX1HOT_s_1_12_2((z_out_51_40_1[39]), (z_out_10[67]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39,
          (attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[39]), (attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[39]),
          (CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_sdt[39]), (z_out_11[55]),
          (GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8[39]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39]),
          (RMS_NORM_LOOP_2_2_mul_itm_71_32_1[39]), attention_max_attn_fixed_t_1_conc_psp_mx0w12_39,
          (output_rsci_data_out_d[39]), {and_dcpl_147 , and_dcpl_447 , and_dcpl_136
          , GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c4
          , and_dcpl_388 , and_dcpl_337 , GEMM_3D_FLOAT_LOOP_4_1_or_13_cse , and_dcpl_324
          , GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c9
          , and_dcpl_242 , and_dcpl_162 , and_dcpl_169});
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1
          <= MUX1HOT_v_24_13_2((z_out_51_40_1[38:15]), (z_out_10[66:43]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_15,
          (z_out_10[54:31]), (attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[38:15]),
          (attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[38:15]), (CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_sdt[38:15]),
          (z_out_11[54:31]), (GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8[38:15]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:15]),
          (RMS_NORM_LOOP_2_2_mul_itm_71_32_1[38:15]), attention_max_attn_fixed_t_1_conc_psp_mx0w12_38_15,
          (output_rsci_data_out_d[38:15]), {and_dcpl_147 , and_dcpl_447 , and_dcpl_136
          , attention_round_1_qelse_or_8_cse , GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c4
          , and_dcpl_388 , and_dcpl_337 , GEMM_3D_FLOAT_LOOP_4_1_or_13_cse , and_dcpl_324
          , GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c9
          , and_dcpl_242 , and_dcpl_162 , and_dcpl_169});
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2
          <= MUX1HOT_v_15_12_2((z_out_51_40_1[14:0]), (z_out_10[42:28]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_14_0,
          (attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[14:0]), (attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[14:0]),
          (CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_sdt[14:0]), (z_out_11[30:16]),
          (GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8[14:0]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[14:0]),
          (RMS_NORM_LOOP_2_2_mul_itm_71_32_1[14:0]), attention_max_attn_fixed_t_1_conc_psp_mx0w12_14_0,
          (output_rsci_data_out_d[14:0]), {and_dcpl_147 , and_dcpl_447 , and_dcpl_136
          , GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c4
          , and_dcpl_388 , and_dcpl_337 , GEMM_3D_FLOAT_LOOP_4_1_or_13_cse , and_dcpl_324
          , GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_itm_mx0c9
          , and_dcpl_242 , and_dcpl_162 , and_dcpl_169});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & mux_588_nl ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 <= (RMS_NORM_LOOP_2_mux1h_nl & (~(mux_590_nl
          & and_dcpl_132 & and_dcpl_171 & and_dcpl))) | and_dcpl_496;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_acc_53_itm_23_15 <= 9'b000000000;
    end
    else if ( input_rsc_en_d_1 & (mux_613_nl | (fsm_output[7])) ) begin
      SF_LOOP_3_acc_53_itm_23_15 <= MUX1HOT_v_9_3_2(z_out_20, z_out_32, (SF_LOOP_3_acc_86_sdt[8:0]),
          {SF_LOOP_3_SF_LOOP_3_nor_nl , and_dcpl_497 , and_dcpl_450});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_52 <= 1'b0;
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0 <= 52'b0000000000000000000000000000000000000000000000000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_52 <= MUX1HOT_s_1_3_2((LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1[52]),
          (z_out_10[52]), (z_out_41_52_8[44]), {and_dcpl_497 , LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_mx0c2
          , and_dcpl_556});
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0 <= MUX1HOT_v_52_3_2((LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1[51:0]),
          ({(z_out_41_52_8[43:0]) , (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1[1:0])
          , (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt[5:0])}), (z_out_10[51:0]), {nor_911_nl
          , and_dcpl_556 , or_1563_tmp});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs <= 1'b0;
    end
    else if ( input_rsc_en_d_1 & ((LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & (mux_619_nl
        | (fsm_output[7]))) | and_dcpl_447 | and_dcpl_496 | and_dcpl_242) ) begin
      QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs <= QUANTIZE_ACTIVATION_LOOP_2_if_mux1h_nl
          & (~ and_dcpl_496);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_acc_193_itm <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_en_d_1 & (GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c0 | and_dcpl_158
        | GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c2 | and_dcpl_264) ) begin
      GEMM_3D_FLOAT_LOOP_4_acc_193_itm <= MUX1HOT_v_40_4_2(z_out_12, (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[39:0]),
          GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8, (z_out_11[55:16]), {GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c0
          , and_dcpl_158 , GEMM_3D_FLOAT_LOOP_4_acc_193_itm_mx0c2 , and_dcpl_264});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt <= 4'b0000;
    end
    else if ( input_rsc_en_d_1 & ((APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl & mux_677_nl)
        | APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c0 | APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c1
        | and_dcpl_581 | and_dcpl_348 | and_dcpl_584 | and_dcpl_337 | and_dcpl_328
        | and_dcpl_587 | and_dcpl_588 | and_dcpl_260 | and_dcpl_530) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt <= MUX_v_4_2_2(4'b0000, ({APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_11_nl
          , APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_17_nl , APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_18_nl}),
          nor_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_en_d_1 & (~ mux_691_nl) ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva <= MUX1HOT_v_40_4_2(operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z,
          z_out_59, (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39:0]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[39:0]),
          {and_612_nl , and_dcpl_293 , operator_40_24_true_AC_TRN_AC_WRAP_1_or_nl
          , and_622_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2 <= 3'b000;
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1 <= 1'b0;
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0 <= 1'b0;
    end
    else if ( APPLY_ROTARY_POS_EMB_LOOP_3_and_ssc ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2 <= MUX1HOT_v_3_4_2((z_out_22[4:2]),
          (z_out_23[3:1]), (z_out_32[4:2]), (GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5[4:2]),
          {APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0 , and_dcpl_348 , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse
          , and_dcpl_263});
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1 <= MUX1HOT_s_1_5_2((z_out_22[1]),
          z_out_55_1, (z_out_23[0]), (z_out_32[1]), (GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5[1]),
          {APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0 , APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c1
          , and_dcpl_348 , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse , and_dcpl_263});
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0 <= MUX1HOT_s_1_5_2((z_out_22[0]),
          z_out_55_0, (z_out_14[0]), (z_out_32[0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5[0]),
          {APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0 , APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c1
          , and_dcpl_348 , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd <= 4'b0000;
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1 <= 2'b00;
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2 <= 2'b00;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_and_ssc ) begin
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd <= MUX1HOT_v_4_7_2(4'b1000,
          4'b0111, (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[7:4]), (attention_round_qr_39_16_lpi_3_dfm_mx0w0[7:4]),
          reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd, (z_out_20[7:4]), LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_7_4,
          {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_itm , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_1_itm
          , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_12_itm , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_13_itm
          , and_dcpl_395 , and_dcpl_274 , and_dcpl_118});
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1 <= MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_nl,
          2'b11, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_1_itm);
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2 <= MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_15_nl,
          2'b11, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_1_itm);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd <= 4'b0000;
      reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1 <= 2'b00;
      reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2 <= 2'b00;
    end
    else if ( GEMM_3D_FLOAT_LOOP_4_and_2_ssc ) begin
      reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd <= MUX1HOT_v_4_7_2(4'b1000, 4'b0111,
          (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[7:4]), (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm[7:4]),
          reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd, (GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2[7:4]),
          (operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3[7:4]), {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_3_itm
          , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_4_itm , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_5_itm
          , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_20_itm , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_21_itm
          , and_dcpl_274 , and_dcpl_530});
      reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1 <= MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_23_nl,
          2'b11, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_4_itm);
      reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2 <= MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_24_nl,
          2'b11, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_4_itm);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_7 <= 1'b0;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_7 <= LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_7;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0 <= 7'b0000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_ssc & ((~ LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx0c2)
        | LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_1_rgt) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_6_0 <= MUX_v_7_2_2(LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0,
          GEMM_3D_FLOAT_LOOP_4_acc_192_nl, LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_and_1_rgt);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0 <= 2'b00;
    end
    else if ( input_rsc_en_d_1 & ((LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & mux_720_nl)
        | and_dcpl_274) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_1_0 <= MUX1HOT_v_2_3_2((z_out_20[1:0]),
          GEMM_3D_FLOAT_LOOP_4_acc_17_nl, (z_out_19[1:0]), {and_dcpl_373 , and_dcpl_274
          , and_dcpl_118});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_7 <= 1'b0;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_7 <= LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_7;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0 <= 7'b0000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_ssc & ((~ LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_mx0c2)
        | LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_3_rgt) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0 <= MUX_v_7_2_2(LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0,
          z_out_34, LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_3_rgt);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd <= 1'b0;
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1 <= 2'b00;
    end
    else if ( APPLY_ROTARY_POS_EMB_LOOP_1_i_and_5_ssc ) begin
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd <= APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_5_nl
          & (~ APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c0);
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1 <= MUX_v_2_2_2(2'b00, APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_8_nl,
          APPLY_ROTARY_POS_EMB_LOOP_1_i_not_2_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd <= 2'b00;
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 <= 1'b0;
    end
    else if ( CACHE_UPDATE_LOOP_2_1_j_and_ssc ) begin
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd <= ~(MUX_v_2_2_2(APPLY_ROTARY_POS_EMB_LOOP_1_i_nand_nl,
          2'b11, CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0));
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 <= ~((~(APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_9_nl
          | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c7)) | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva <= 4'b0000;
    end
    else if ( input_rsc_en_d_1 & ((LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & (~(mux_789_nl
        & (~ (fsm_output[8]))))) | and_dcpl_545 | and_dcpl_387 | and_dcpl_274 | and_dcpl_263)
        ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva <= MUX_v_4_2_2(4'b0000, APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_12_nl,
          nor_908_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp <= 4'b0000;
    end
    else if ( input_rsc_en_d_1 & ((~(or_dcpl_202 | (~(mux_798_nl | (fsm_output[8])))))
        | and_dcpl_545 | and_dcpl_581 | and_dcpl_348 | and_dcpl_584 | and_dcpl_337
        | and_dcpl_587 | and_dcpl_588 | and_dcpl_260) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp <= MUX_v_4_2_2(4'b0000, APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_15_nl,
          not_2256_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2 <= 3'b000;
    end
    else if ( APPLY_ROTARY_POS_EMB_LOOP_3_and_1_ssc ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_4_2 <= MUX1HOT_v_3_3_2((APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[4:2]),
          (z_out_22[4:2]), (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[4:2]), {and_dcpl_348
          , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0 <= 2'b00;
    end
    else if ( APPLY_ROTARY_POS_EMB_LOOP_3_and_1_ssc & (~ and_dcpl_612) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_1_0 <= MUX1HOT_v_2_4_2((z_out_19[1:0]),
          (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva_2[1:0]), (z_out_22[1:0]), (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[1:0]),
          {and_dcpl_630 , and_dcpl_348 , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse
          , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2 <= 4'b0000;
    end
    else if ( input_rsc_en_d_1 & (~ and_667_ssc) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2 <= MUX1HOT_v_4_4_2((CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[5:2]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[5:2]), (GEMM_3D_FLOAT_LOOP_4_acc_34_sdt[5:2]),
          (GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5[5:2]), {and_dcpl_387 , and_668_ssc
          , and_dcpl_274 , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0 <= 2'b00;
    end
    else if ( input_rsc_en_d_1 & (~ and_dcpl_612) & (~ and_667_ssc) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0 <= MUX1HOT_v_2_5_2((z_out_21[1:0]),
          (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[1:0]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[1:0]),
          (GEMM_3D_FLOAT_LOOP_4_acc_34_sdt[1:0]), (GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5[1:0]),
          {and_dcpl_630 , and_dcpl_387 , and_668_ssc , and_dcpl_274 , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_7 <= 1'b0;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_1_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_7 <= MUX_s_1_2_2((LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_sdt[7]),
          LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_7, and_dcpl_25);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0 <= 7'b0000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_1_ssc & ((~ LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_mx1c2)
        | LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_5_rgt) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0 <= MUX1HOT_v_7_3_2((LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_sdt[6:0]),
          LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_6_0, GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1,
          {LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_nor_1_nl
          , LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_10_nl , LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_5_rgt});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0 <= 3'b000;
    end
    else if ( input_rsc_en_d_1 & (and_dcpl_373 | and_dcpl_337 | and_dcpl_274 | and_dcpl_588)
        ) begin
      CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0 <= MUX1HOT_v_3_4_2(z_out_27, attention_sqrt_1_for_i_4_0_sva_2_0,
          z_out_28, z_out_19, {CACHE_UPDATE_LOOP_3_1_qif_and_1_nl , CACHE_UPDATE_LOOP_3_1_qif_and_2_nl
          , CACHE_UPDATE_LOOP_3_1_qif_or_1_nl , and_dcpl_274});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_1 <= 2'b00;
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_0 <= 1'b0;
    end
    else if ( CACHE_UPDATE_LOOP_3_qif_and_ssc ) begin
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_1 <= MUX1HOT_v_2_3_2((z_out_28[2:1]),
          reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd, (z_out_27[2:1]), {CACHE_UPDATE_LOOP_3_qif_CACHE_UPDATE_LOOP_3_qif_nor_ssc
          , CACHE_UPDATE_LOOP_3_qif_and_2_ssc , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse});
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_0 <= MUX1HOT_s_1_3_2((z_out_28[0]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
          (z_out_27[0]), {CACHE_UPDATE_LOOP_3_qif_CACHE_UPDATE_LOOP_3_qif_nor_ssc
          , CACHE_UPDATE_LOOP_3_qif_and_2_ssc , LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_or_cse});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva <= 4'b0000;
    end
    else if ( input_rsc_en_d_1 & (and_dcpl_373 | and_dcpl_387 | and_dcpl_274 | and_dcpl_263)
        ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva <= MUX1HOT_v_4_4_2(LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_1_nl,
          z_out_23, GEMM_3D_FLOAT_LOOP_4_acc_241_nl, GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3,
          {and_dcpl_373 , and_dcpl_387 , and_dcpl_274 , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm <= 7'b0000000;
    end
    else if ( input_rsc_en_d_1 & (and_dcpl_373 | and_dcpl_274 | and_dcpl_263) ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm <= MUX1HOT_v_7_3_2(LINEAR_FORWARD_NO_MUL_LOOP_5_1_weight_val_lshift_itm,
          GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1, z_out_39, {and_dcpl_373 , and_dcpl_274
          , and_dcpl_263});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_acc_185_sdt <= 7'b0000000;
    end
    else if ( input_rsc_en_d_1 & (mux_830_nl | (fsm_output[8])) ) begin
      GEMM_3D_FLOAT_LOOP_4_acc_185_sdt <= MUX_v_7_2_2(LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_lshift_itm,
          GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2, and_dcpl_274);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_4 <= 2'b00;
    end
    else if ( input_rsc_en_d_1 & (~ and_688_ssc) ) begin
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_4 <= MUX_v_2_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[5:4]),
          (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[5:4]), and_dcpl_337);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0 <= 4'b0000;
    end
    else if ( input_rsc_en_d_1 & (mux_822_nl | (fsm_output[8])) & (~ and_688_ssc)
        ) begin
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0 <= MUX1HOT_v_4_5_2(LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_2_nl,
          (z_out_31[3:0]), z_out_14, (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[3:0]),
          (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[3:0]), {and_dcpl_373 , and_dcpl_274
          , and_dcpl_263 , and_dcpl_387 , and_dcpl_337});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp <= 41'b00000000000000000000000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_12_sdt_15_0 <= 16'b0000000000000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_and_cse ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp <= nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp[40:0];
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_12_sdt_15_0 <= z_out_58[15:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_41_40 <= 2'b00;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_41_40 <= z_out_40[41:40];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0 <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_ssc & ((~ LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_mx0c1)
        | and_dcpl_285 | and_dcpl_309) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0 <= MUX_v_40_2_2((z_out_40[39:0]),
          z_out_59, LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_2_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_41_40 <= 2'b00;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_1_and_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_41_40 <= MUX_v_2_2_2((LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0[41:40]),
          (z_out_40[41:40]), and_dcpl_556);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0 <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_1_and_ssc & (~(mux_953_nl & LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0c1))
        ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0 <= MUX1HOT_v_40_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0w0[39:0]),
          GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8, z_out_62, (z_out_40[39:0]), {and_dcpl_497
          , and_710_nl , LINEAR_FORWARD_NO_MUL_LOOP_2_1_or_2_nl , and_dcpl_556});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_42_41 <= 2'b00;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_ssc ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_42_41 <= z_out_9[42:41];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_40 <= 1'b0;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_ssc & (~ and_dcpl_655) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_40 <= MUX_s_1_2_2((LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt[40]),
          (z_out_9[40]), LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_7_cse);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0 <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_ssc & (~(and_dcpl_655 | ((~ mux_966_nl)
        & LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_mx0c1))) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0 <= MUX1HOT_v_40_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_14_sdt[39:0]),
          z_out_61, (attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d[39:0]),
          (z_out_9[39:0]), {LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_2_cse , LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_5_nl
          , and_dcpl_265 , LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_7_cse});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0 <= 57'b000000000000000000000000000000000000000000000000000000000;
    end
    else if ( input_rsc_en_d_1 & (~ and_dcpl_655) ) begin
      operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0 <= MUX1HOT_v_57_3_2(LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_11_sdt_1,
          (attention_exp_exp_half_mul_4_cse_sva_1[56:0]), (z_out_58[56:0]), {LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_2_cse
          , and_dcpl_661 , and_dcpl_662});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 <= 3'b000;
    end
    else if ( input_rsc_en_d_1 & ((mux_923_nl & and_dcpl_19) | GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1)
        ) begin
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 <= MUX_v_3_2_2(3'b000, (z_out_35[2:0]),
          GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva <= 5'b00000;
    end
    else if ( input_rsc_en_d_1 & (~(mux_940_nl & and_dcpl_606)) ) begin
      GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva <= MUX_v_5_2_2(attention_sqrt_for_i_4_0_sva_1_mx0w0,
          GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5, and_dcpl_274);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_acc_244_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_243_sdt_2_0 <= 3'b000;
      GEMM_3D_FLOAT_LOOP_4_acc_245_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_246_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_247_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_248_psp <= 4'b0000;
      reg_GEMM_3D_FLOAT_LOOP_4_acc_96_cse <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_251_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_acc_250_sdt_2_0 <= 3'b000;
      GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva <= 7'b0000000;
      GEMM_3D_FLOAT_LOOP_4_acc_252_psp <= 4'b0000;
    end
    else if ( GEMM_3D_FLOAT_LOOP_4_and_5_cse ) begin
      GEMM_3D_FLOAT_LOOP_4_acc_244_psp <= nl_GEMM_3D_FLOAT_LOOP_4_acc_244_psp[3:0];
      GEMM_3D_FLOAT_LOOP_4_acc_243_sdt_2_0 <= z_out_25[2:0];
      GEMM_3D_FLOAT_LOOP_4_acc_245_psp <= nl_GEMM_3D_FLOAT_LOOP_4_acc_245_psp[3:0];
      GEMM_3D_FLOAT_LOOP_4_acc_40_cse_sva <= z_out_16;
      GEMM_3D_FLOAT_LOOP_4_acc_246_psp <= z_out_36[3:0];
      GEMM_3D_FLOAT_LOOP_4_acc_247_psp <= nl_GEMM_3D_FLOAT_LOOP_4_acc_247_psp[3:0];
      GEMM_3D_FLOAT_LOOP_4_acc_248_psp <= nl_GEMM_3D_FLOAT_LOOP_4_acc_248_psp[3:0];
      reg_GEMM_3D_FLOAT_LOOP_4_acc_96_cse <= z_out_17;
      GEMM_3D_FLOAT_LOOP_4_acc_251_psp <= nl_GEMM_3D_FLOAT_LOOP_4_acc_251_psp[3:0];
      GEMM_3D_FLOAT_LOOP_4_acc_250_sdt_2_0 <= z_out_15[2:0];
      GEMM_3D_FLOAT_LOOP_4_acc_21_cse_sva <= z_out_39;
      GEMM_3D_FLOAT_LOOP_4_acc_252_psp <= z_out_33;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp <= 4'b0000;
      GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp <= 4'b0000;
    end
    else if ( GEMM_3D_FLOAT_LOOP_4_1_and_4_cse ) begin
      GEMM_3D_FLOAT_LOOP_4_1_acc_34_sdt <= MUX_v_4_2_2(GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva_mx0w3,
          z_out_23, and_dcpl_263);
      GEMM_3D_FLOAT_LOOP_4_1_acc_41_psp <= MUX_v_4_2_2(z_out_14, z_out_35, and_dcpl_263);
      GEMM_3D_FLOAT_LOOP_4_1_acc_42_psp <= MUX_v_4_2_2(z_out_24, (z_out_37[3:0]),
          and_dcpl_263);
      GEMM_3D_FLOAT_LOOP_4_1_acc_43_psp <= MUX_v_4_2_2(z_out_23, z_out_33, and_dcpl_263);
      GEMM_3D_FLOAT_LOOP_4_1_acc_45_psp <= MUX_v_4_2_2((z_out_37[3:0]), z_out_16,
          and_dcpl_263);
    end
  end
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux1h_nl = MUX1HOT_s_1_3_2((z_out_12[39]),
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39, (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[39]),
      {RMS_NORM_LOOP_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_1_ssc_1 , and_19_cse});
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux1h_nl = MUX1HOT_s_1_3_2((z_out_12[39]),
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39, (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[39]),
      {RMS_NORM_LOOP_2_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_1_ssc_1 , and_19_cse});
  assign mux_205_nl = MUX_s_1_2_2((~ or_tmp_227), (fsm_output[8]), fsm_output[7]);
  assign mux_206_nl = MUX_s_1_2_2(mux_205_nl, and_849_cse, or_369_cse);
  assign mux_203_nl = MUX_s_1_2_2(and_tmp_16, (fsm_output[8]), or_368_cse);
  assign or_366_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[7]);
  assign mux_202_nl = MUX_s_1_2_2(and_tmp_16, (fsm_output[8]), or_366_nl);
  assign mux_204_nl = MUX_s_1_2_2(mux_203_nl, mux_202_nl, fsm_output[2]);
  assign mux_207_nl = MUX_s_1_2_2(mux_206_nl, mux_204_nl, fsm_output[6]);
  assign and_851_nl = ((fsm_output[7:6]!=2'b00)) & (fsm_output[8]);
  assign mux_208_nl = MUX_s_1_2_2(mux_207_nl, and_851_nl, fsm_output[5]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_nl = MUX1HOT_s_1_4_2(SF_LOOP_3_acc_5_psp_sva_9,
      (z_out_51_40_1[39]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39,
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      {not_tmp_199 , and_dcpl_147 , and_dcpl_136 , and_dcpl_142});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_2_nl = MUX1HOT_v_9_4_2(SF_LOOP_3_acc_5_psp_sva_8_0,
      (z_out_51_40_1[38:30]), (attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_15[23:15]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23:15]),
      {not_tmp_199 , and_dcpl_147 , and_dcpl_136 , and_dcpl_142});
  assign rms_norm_384_mux1h_2_nl = MUX1HOT_s_1_3_2((z_out_51_40_1[0]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[0]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0[0]), {and_dcpl_149 , and_dcpl_151
      , and_dcpl_153});
  assign and_862_nl = (fsm_output[0]) & (fsm_output[1]) & (fsm_output[2]) & (~ (fsm_output[8]));
  assign mux_244_nl = MUX_s_1_2_2(and_862_nl, nor_372_cse, fsm_output[6]);
  assign nand_14_nl = ~((fsm_output[3]) & mux_244_nl);
  assign mux_240_nl = MUX_s_1_2_2((fsm_output[8]), (~ (fsm_output[8])), fsm_output[2]);
  assign or_422_nl = (fsm_output[2]) | (fsm_output[8]);
  assign mux_241_nl = MUX_s_1_2_2(mux_240_nl, or_422_nl, or_1327_cse);
  assign mux_242_nl = MUX_s_1_2_2((fsm_output[8]), mux_241_nl, fsm_output[6]);
  assign or_420_nl = (fsm_output[6]) | (fsm_output[1]) | (fsm_output[2]) | (fsm_output[8]);
  assign mux_243_nl = MUX_s_1_2_2(mux_242_nl, or_420_nl, fsm_output[3]);
  assign mux_245_nl = MUX_s_1_2_2(nand_14_nl, mux_243_nl, fsm_output[5]);
  assign or_419_nl = (fsm_output[5]) | (fsm_output[8]);
  assign mux_246_nl = MUX_s_1_2_2(mux_245_nl, or_419_nl, fsm_output[4]);
  assign rms_norm_384_mux1h_17_nl = MUX1HOT_s_1_3_2((attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[39]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[39]), {and_dcpl_158 , and_dcpl_159 , and_dcpl_155});
  assign rms_norm_384_mux1h_21_nl = MUX1HOT_v_24_3_2((attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d[38:15]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
      (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[38:15]), {and_dcpl_158 , and_dcpl_159 , and_dcpl_155});
  assign rms_norm_384_not_1_nl = ~ and_173_ssc;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_9_nl = MUX1HOT_s_1_4_2((attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[39]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (output_rsci_data_out_d[39]), reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      {and_dcpl_158 , and_dcpl_159 , and_dcpl_169 , and_188_ssc});
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_13_nl = MUX1HOT_v_3_4_2((attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[38:36]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2:0]),
      (output_rsci_data_out_d[38:36]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23:21]),
      {and_dcpl_158 , and_dcpl_159 , and_dcpl_169 , and_188_ssc});
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_not_4_nl = ~ or_436_ssc;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_16_nl = MUX1HOT_v_21_4_2((attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[35:15]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35:15]),
      (output_rsci_data_out_d[35:15]), (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20:0]),
      {and_dcpl_158 , and_dcpl_159 , and_dcpl_169 , and_188_ssc});
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_not_2_nl = ~ or_436_ssc;
  assign SOFTMAX_LOOP_5_mux_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      and_195_ssc);
  assign and_192_nl = and_dcpl_173 & and_dcpl_168;
  assign SOFTMAX_LOOP_5_mux_1_nl = MUX_v_15_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[14:0]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
      and_195_ssc);
  assign SOFTMAX_LOOP_5_not_1_nl = ~ and_197_ssc;
  assign nl_INIT_2D_MEM_LOOP_2_2_acc_nl = reg_SF_LOOP_3_acc_38_1_ftd_2 + 9'b111111111;
  assign INIT_2D_MEM_LOOP_2_2_acc_nl = nl_INIT_2D_MEM_LOOP_2_2_acc_nl[8:0];
  assign for_for_j_or_nl = and_dcpl_440 | (not_tmp_296 & and_dcpl_468 & (~ (fsm_output[6]))
      & RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nand_tmp);
  assign nor_411_nl = ~((~ (fsm_output[1])) | (fsm_output[0]) | (fsm_output[6]));
  assign nor_412_nl = ~(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm | (~ (fsm_output[6])));
  assign mux_381_nl = MUX_s_1_2_2(nor_412_nl, (fsm_output[6]), or_1328_cse);
  assign mux_382_nl = MUX_s_1_2_2(nor_411_nl, mux_381_nl, fsm_output[2]);
  assign mux_383_nl = MUX_s_1_2_2(mux_382_nl, (fsm_output[6]), or_616_cse);
  assign nand_18_nl = ~((fsm_output[2]) & (~(and_850_cse | (fsm_output[6]))));
  assign mux_380_nl = MUX_s_1_2_2(or_614_cse, nand_18_nl, fsm_output[3]);
  assign nor_415_nl = ~((fsm_output[4]) | mux_380_nl);
  assign mux_384_nl = MUX_s_1_2_2(mux_383_nl, nor_415_nl, fsm_output[5]);
  assign nor_416_nl = ~((fsm_output[5:2]!=4'b0110) | nor_414_cse | (fsm_output[6]));
  assign mux_385_nl = MUX_s_1_2_2(mux_384_nl, nor_416_nl, fsm_output[8]);
  assign and_487_nl = mux_385_nl & (~ (fsm_output[7]));
  assign and_494_nl = not_tmp_296 & and_dcpl_468 & (~((fsm_output[6]) | RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nand_tmp));
  assign for_for_j_mux1h_1_nl = MUX1HOT_v_9_6_2(z_out_29, reg_SF_LOOP_3_acc_38_1_ftd_2,
      9'b000000001, 9'b101111111, INIT_2D_MEM_LOOP_2_2_acc_nl, SF_LOOP_3_acc_5_psp_sva_8_0,
      {for_for_j_or_nl , and_487_nl , and_494_nl , and_dcpl_461 , and_dcpl_366 ,
      and_dcpl_386});
  assign mux_375_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[1]);
  assign mux_376_nl = MUX_s_1_2_2(mux_375_nl, or_607_cse, fsm_output[0]);
  assign or_608_nl = (fsm_output[4:2]!=3'b000) | mux_376_nl;
  assign mux_374_nl = MUX_s_1_2_2(or_604_cse, or_368_cse, fsm_output[2]);
  assign or_605_nl = (fsm_output[4:3]!=2'b01) | mux_374_nl;
  assign mux_377_nl = MUX_s_1_2_2(or_608_nl, or_605_nl, fsm_output[5]);
  assign or_600_nl = (~((fsm_output[0]) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm)
      | (fsm_output[1]))) | (fsm_output[7]);
  assign mux_371_nl = MUX_s_1_2_2(or_601_cse, or_600_nl, fsm_output[2]);
  assign mux_372_nl = MUX_s_1_2_2(mux_371_nl, (fsm_output[7]), or_616_cse);
  assign or_597_nl = (fsm_output[3]) | (fsm_output[4]) | (fsm_output[2]) | (fsm_output[7]);
  assign mux_373_nl = MUX_s_1_2_2(mux_372_nl, or_597_nl, fsm_output[5]);
  assign mux_378_nl = MUX_s_1_2_2(mux_377_nl, mux_373_nl, fsm_output[6]);
  assign mux_379_nl = MUX_s_1_2_2(mux_378_nl, or_1363_cse, fsm_output[8]);
  assign INIT_2D_MEM_LOOP_2_2_not_nl = ~ mux_379_nl;
  assign for_for_j_and_1_nl = MUX_v_9_2_2(9'b000000000, for_for_j_mux1h_1_nl, INIT_2D_MEM_LOOP_2_2_not_nl);
  assign or_633_nl = and_882_cse | (fsm_output[8]);
  assign or_632_nl = (fsm_output[1]) | (fsm_output[7]) | (fsm_output[8]);
  assign mux_391_nl = MUX_s_1_2_2(or_633_nl, or_632_nl, fsm_output[0]);
  assign or_631_nl = (~ (fsm_output[1])) | (fsm_output[7]) | (fsm_output[8]);
  assign mux_392_nl = MUX_s_1_2_2(mux_391_nl, or_631_nl, fsm_output[6]);
  assign mux_393_nl = MUX_s_1_2_2(mux_392_nl, or_tmp_55, fsm_output[3]);
  assign mux_389_nl = MUX_s_1_2_2(or_455_cse, or_629_cse, fsm_output[6]);
  assign mux_390_nl = MUX_s_1_2_2(or_tmp_55, mux_389_nl, fsm_output[3]);
  assign mux_394_nl = MUX_s_1_2_2(mux_393_nl, mux_390_nl, fsm_output[4]);
  assign or_627_nl = (fsm_output[6]) | (~ (fsm_output[0])) | (~ (fsm_output[1]))
      | (fsm_output[7]) | (fsm_output[8]);
  assign mux_388_nl = MUX_s_1_2_2(or_tmp_55, or_627_nl, fsm_output[3]);
  assign or_628_nl = (fsm_output[4]) | mux_388_nl;
  assign mux_395_nl = MUX_s_1_2_2(mux_394_nl, or_628_nl, fsm_output[5]);
  assign or_625_nl = (fsm_output[4]) | (~ (fsm_output[3])) | (fsm_output[6]) | and_850_cse
      | (fsm_output[8:7]!=2'b00);
  assign mux_387_nl = MUX_s_1_2_2(or_tmp_55, or_625_nl, fsm_output[5]);
  assign mux_396_nl = MUX_s_1_2_2(mux_395_nl, mux_387_nl, fsm_output[2]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_nl = MUX_s_1_2_2(SF_LOOP_3_acc_5_psp_sva_9,
      (z_out_51_40_1[39]), and_dcpl_147);
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_nl = (operator_40_24_true_AC_TRN_AC_WRAP_mux_nl
      & (~ and_dcpl_460) & (~ mux_502_itm)) | and_528_seb;
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_and_nl = (~ z_out_30_2) & RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nand_tmp;
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_3_nl = LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp
      & exit_LINEAR_FORWARD_NO_MUL_LOOP_4_lpi_3_dfm_2;
  assign RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_or_nl = (~ (z_out_17[2]))
      | LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1;
  assign mux_582_nl = MUX_s_1_2_2(or_601_cse, or_607_cse, fsm_output[0]);
  assign nor_465_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[8])) | (fsm_output[5])
      | (~ (fsm_output[3])) | (fsm_output[6]) | mux_582_nl);
  assign nand_203_nl = ~((fsm_output[1]) & (fsm_output[7]));
  assign or_829_nl = (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[7]);
  assign mux_580_nl = MUX_s_1_2_2(nand_203_nl, or_829_nl, fsm_output[6]);
  assign or_830_nl = (fsm_output[3]) | mux_580_nl;
  assign or_828_nl = (~ (fsm_output[3])) | (fsm_output[6]) | (fsm_output[1]) | (fsm_output[7]);
  assign mux_581_nl = MUX_s_1_2_2(or_830_nl, or_828_nl, fsm_output[5]);
  assign nor_466_nl = ~((fsm_output[4]) | (fsm_output[8]) | mux_581_nl);
  assign mux_583_nl = MUX_s_1_2_2(nor_465_nl, nor_466_nl, fsm_output[2]);
  assign QUANTIZE_ACTIVATION_LOOP_2_mux1h_nl = MUX1HOT_s_1_5_2(RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_and_nl,
      LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_3_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2,
      LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1, RESHAPE_2D_TO_3D_LOOP_3_2_RESHAPE_2D_TO_3D_LOOP_3_2_or_nl,
      {and_dcpl_494 , and_dcpl_373 , mux_583_nl , and_dcpl_388 , and_dcpl_348});
  assign nl_INIT_2D_MEM_LOOP_2_acc_nl = SF_LOOP_3_acc_45_itm_8_0 + 9'b111111111;
  assign INIT_2D_MEM_LOOP_2_acc_nl = nl_INIT_2D_MEM_LOOP_2_acc_nl[8:0];
  assign nor_469_nl = ~((fsm_output[0]) | (~ and_864_cse));
  assign or_857_nl = (fsm_output[1]) | (~(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm
      | (fsm_output[8])));
  assign mux_593_nl = MUX_s_1_2_2(or_857_nl, or_tmp_266, fsm_output[0]);
  assign mux_594_nl = MUX_s_1_2_2(nor_469_nl, mux_593_nl, fsm_output[2]);
  assign nand_206_nl = ~((fsm_output[6]) & ((fsm_output[3]) | mux_594_nl));
  assign mux_592_nl = MUX_s_1_2_2((~ and_864_cse), or_tmp_266, fsm_output[0]);
  assign nor_475_nl = ~((fsm_output[6]) | (~((fsm_output[3:2]!=2'b10) | mux_592_nl)));
  assign mux_595_nl = MUX_s_1_2_2(nand_206_nl, nor_475_nl, fsm_output[4]);
  assign or_850_nl = (~ (fsm_output[3])) | (~ (fsm_output[2])) | (fsm_output[1])
      | (fsm_output[8]);
  assign or_849_nl = (fsm_output[3:2]!=2'b00) | and_864_cse;
  assign mux_591_nl = MUX_s_1_2_2(or_850_nl, or_849_nl, fsm_output[6]);
  assign or_1343_nl = (fsm_output[4]) | mux_591_nl;
  assign mux_596_nl = MUX_s_1_2_2(mux_595_nl, or_1343_nl, fsm_output[5]);
  assign nor_474_nl = ~(mux_596_nl | (fsm_output[7]));
  assign and_576_nl = and_dcpl_553 & and_dcpl_316;
  assign and_577_nl = and_dcpl_553 & and_dcpl_114;
  assign RMS_NORM_LOOP_2_mux1h_1_nl = MUX1HOT_v_9_6_2(z_out_32, SF_LOOP_3_acc_45_itm_8_0,
      9'b101111111, INIT_2D_MEM_LOOP_2_acc_nl, SF_LOOP_3_acc_53_itm_23_15, z_out_20,
      {and_dcpl_494 , nor_474_nl , and_576_nl , and_577_nl , and_dcpl_386 , and_dcpl_556});
  assign nor_614_nl = ~((~((fsm_output[3]) & (fsm_output[4]) & (fsm_output[8]) &
      (~ (fsm_output[2])))) | and_850_cse);
  assign mux_602_nl = MUX_s_1_2_2((~ and_850_cse), (fsm_output[1]), fsm_output[2]);
  assign nor_615_nl = ~((~ (fsm_output[3])) | (fsm_output[4]) | (fsm_output[8]) |
      mux_602_nl);
  assign mux_603_nl = MUX_s_1_2_2(nor_614_nl, nor_615_nl, fsm_output[5]);
  assign or_867_nl = (fsm_output[1:0]!=2'b00) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign mux_599_nl = MUX_s_1_2_2((fsm_output[1]), or_867_nl, fsm_output[2]);
  assign mux_598_nl = MUX_s_1_2_2((~ and_850_cse), or_1328_cse, fsm_output[2]);
  assign mux_600_nl = MUX_s_1_2_2(mux_599_nl, mux_598_nl, fsm_output[8]);
  assign or_1364_nl = (fsm_output[4:3]!=2'b00) | mux_600_nl;
  assign mux_597_nl = MUX_s_1_2_2((fsm_output[2]), or_1326_cse, fsm_output[8]);
  assign nor_616_nl = ~((fsm_output[4:3]!=2'b00) | mux_597_nl);
  assign mux_601_nl = MUX_s_1_2_2(or_1364_nl, nor_616_nl, fsm_output[5]);
  assign mux_604_nl = MUX_s_1_2_2(mux_603_nl, mux_601_nl, fsm_output[6]);
  assign nor_617_nl = ~((fsm_output[6]) | (fsm_output[5]) | (fsm_output[3]) | (fsm_output[4])
      | (fsm_output[8]) | (fsm_output[2]) | (fsm_output[0]) | (fsm_output[1]));
  assign mux_605_nl = MUX_s_1_2_2(mux_604_nl, nor_617_nl, fsm_output[7]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_j_asn_SF_LOOP_3_acc_45_itm_1_8_RMS_NORM_LOOP_2_and_nl
      = MUX_v_9_2_2(9'b000000000, RMS_NORM_LOOP_2_mux1h_1_nl, mux_605_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_6_nl = MUX1HOT_v_2_7_2(CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_4,
      CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4, (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[3:2]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[5:4]), reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd,
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[5:4]), (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[5:4]),
      {and_dcpl_640 , and_dcpl_505 , and_677_itm , and_dcpl_328 , and_678_itm , and_dcpl_263
      , and_dcpl_530});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_or_nl = and_678_itm | APPLY_ROTARY_POS_EMB_LOOP_6_k_and_8_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_8_nl = MUX1HOT_v_2_8_2((CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[3:2]),
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd, (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[1:0]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[3:2]), reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1,
      (GEMM_3D_FLOAT_LOOP_4_acc_242_sdt[3:2]), (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[3:2]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[3:2]), {and_dcpl_640 , and_dcpl_505
      , and_677_itm , and_dcpl_328 , APPLY_ROTARY_POS_EMB_LOOP_6_k_or_nl , APPLY_ROTARY_POS_EMB_LOOP_6_k_and_7_cse
      , and_dcpl_263 , and_dcpl_530});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_and_2_nl = and_dcpl_368 & (~ or_1566_tmp);
  assign or_1576_nl = APPLY_ROTARY_POS_EMB_LOOP_6_k_and_8_cse | or_1566_tmp;
  assign mux1h_4_nl = MUX1HOT_v_2_9_2(LINEAR_FORWARD_NO_MUL_LOOP_5_2_l_2_0_lpi_3_dfm_1_0_1,
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[1:0]), reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1,
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0, (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[1:0]),
      (GEMM_3D_FLOAT_LOOP_4_acc_242_sdt[1:0]), reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[1:0]), (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[1:0]),
      {APPLY_ROTARY_POS_EMB_LOOP_6_k_and_2_nl , and_dcpl_640 , and_dcpl_505 , and_677_itm
      , and_dcpl_328 , APPLY_ROTARY_POS_EMB_LOOP_6_k_and_7_cse , or_1576_nl , and_dcpl_263
      , and_dcpl_530});
  assign CACHE_UPDATE_LOOP_3_k_mux1h_5_nl = MUX1HOT_v_2_5_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[3:2]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[5:4]), CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4,
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_4, reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd,
      {and_dcpl_640 , and_dcpl_348 , and_682_itm , and_683_itm , and_684_itm});
  assign CACHE_UPDATE_LOOP_3_k_mux1h_10_nl = MUX1HOT_v_2_5_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2[1:0]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[3:2]), reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd,
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[3:2]), reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1,
      {and_dcpl_640 , and_dcpl_348 , and_682_itm , and_683_itm , and_684_itm});
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_22_nl = conv_u2u_1_2(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1])
      + 2'b01;
  assign GEMM_3D_FLOAT_LOOP_4_acc_22_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_22_nl[1:0];
  assign or_1575_nl = (~ not_tmp_512) | (fsm_output[5]);
  assign nor_910_nl = ~(or_tmp_907 | (fsm_output[5]));
  assign mux_nl = MUX_s_1_2_2(or_1575_nl, nor_910_nl, fsm_output[6]);
  assign or_1569_nl = (mux_nl & and_dcpl_19) | and_682_itm;
  assign mux1h_5_nl = MUX1HOT_v_2_8_2(LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_dfm_1_0_1,
      GEMM_3D_FLOAT_LOOP_4_acc_22_nl, operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1,
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0, (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[1:0]),
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0[1:0]), reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_2,
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1, {and_dcpl_373 , and_dcpl_274 , and_dcpl_530
      , and_dcpl_640 , and_dcpl_348 , and_683_itm , and_684_itm , or_1569_nl});
  assign mux1h_1_nl = MUX1HOT_v_4_8_2((rms_norm_384_div_cmp_z[39:36]), (attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[39:36]),
      (CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm[39:36]), (z_out_61[39:36]),
      (z_out_11[55:52]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39:36]),
      (SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z[39:36]), (z_out_59[39:36]), {and_2271_cse
      , and_dcpl_158 , and_dcpl_337 , and_dcpl_284 , and_dcpl_293 , and_dcpl_265
      , and_2277_cse , or_dcpl});
  assign mux1h_2_nl = MUX1HOT_v_36_9_2((rms_norm_384_div_cmp_z[35:0]), (attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d[35:0]),
      (CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm[35:0]), (z_out_61[35:0]),
      (z_out_11[51:16]), (z_out[35:0]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35:0]),
      (SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z[35:0]), (z_out_59[35:0]), {and_2271_cse
      , and_dcpl_158 , and_dcpl_337 , and_dcpl_284 , and_dcpl_293 , and_dcpl_450
      , and_dcpl_265 , and_2277_cse , or_dcpl});
  assign nl_INIT_2D_MEM_LOOP_2_1_acc_nl = reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3
      + 9'b111111111;
  assign INIT_2D_MEM_LOOP_2_1_acc_nl = nl_INIT_2D_MEM_LOOP_2_1_acc_nl[8:0];
  assign or_1332_nl = (fsm_output[6]) | (~ (fsm_output[0])) | (fsm_output[1]) | (fsm_output[7])
      | (fsm_output[8]) | (fsm_output[4]) | (fsm_output[3]);
  assign nand_179_nl = ~((fsm_output[6]) & (~ mux_tmp_356));
  assign mux_357_nl = MUX_s_1_2_2(or_1332_nl, nand_179_nl, fsm_output[5]);
  assign nor_407_nl = ~(mux_357_nl | (fsm_output[2]));
  assign or_593_nl = (fsm_output[5]) | (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[8])
      | (fsm_output[4]);
  assign or_592_nl = (fsm_output[1:0]!=2'b00) | (~ nor_tmp_109);
  assign or_590_nl = (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[8])
      | (fsm_output[4]);
  assign mux_365_nl = MUX_s_1_2_2(or_592_nl, or_590_nl, fsm_output[5]);
  assign mux_366_nl = MUX_s_1_2_2(or_593_nl, mux_365_nl, fsm_output[3]);
  assign nor_408_nl = ~(((fsm_output[0]) & (fsm_output[1]) & (fsm_output[8])) | (fsm_output[4]));
  assign mux_362_nl = MUX_s_1_2_2(nor_tmp_109, (fsm_output[8]), or_1328_cse);
  assign mux_363_nl = MUX_s_1_2_2(nor_408_nl, mux_362_nl, fsm_output[5]);
  assign mux_364_nl = MUX_s_1_2_2(mux_363_nl, and_878_cse, fsm_output[3]);
  assign mux_367_nl = MUX_s_1_2_2(mux_366_nl, mux_364_nl, fsm_output[6]);
  assign nor_409_nl = ~((fsm_output[1:0]!=2'b00) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm)
      | (fsm_output[8]) | (fsm_output[4]));
  assign mux_359_nl = MUX_s_1_2_2(nor_tmp_109, (fsm_output[8]), fsm_output[1]);
  assign mux_360_nl = MUX_s_1_2_2(nor_409_nl, mux_359_nl, fsm_output[5]);
  assign mux_358_nl = MUX_s_1_2_2((fsm_output[8]), or_586_cse, and_850_cse);
  assign and_477_nl = (fsm_output[5]) & mux_358_nl;
  assign mux_361_nl = MUX_s_1_2_2(mux_360_nl, and_477_nl, fsm_output[3]);
  assign nand_17_nl = ~((fsm_output[6]) & (~ mux_361_nl));
  assign mux_368_nl = MUX_s_1_2_2(mux_367_nl, nand_17_nl, fsm_output[2]);
  assign nand_181_nl = ~((~ (fsm_output[2])) & (fsm_output[6]) & (fsm_output[3])
      & (fsm_output[5]) & (fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[8]))
      & (fsm_output[4]));
  assign mux_369_nl = MUX_s_1_2_2(mux_368_nl, nand_181_nl, fsm_output[7]);
  assign and_486_nl = and_dcpl_117 & nor_315_cse & (fsm_output[6:5]==2'b11) & APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  assign for_for_j_mux1h_nl = MUX1HOT_v_9_8_2(z_out_20, reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3,
      SF_LOOP_3_acc_53_itm_23_15, 9'b101111111, INIT_2D_MEM_LOOP_2_1_acc_nl, SF_LOOP_3_acc_53_itm_8_0,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7, SF_LOOP_3_acc_45_itm_8_0,
      {nor_407_nl , (~ mux_369_nl) , and_dcpl_460 , and_dcpl_461 , and_dcpl_366 ,
      and_dcpl_386 , and_dcpl_328 , and_486_nl});
  assign or_578_nl = (~ (fsm_output[6])) | (~ (fsm_output[8])) | (fsm_output[7])
      | (fsm_output[0]) | (fsm_output[4]);
  assign mux_353_nl = MUX_s_1_2_2(or_tmp_373, or_578_nl, fsm_output[1]);
  assign or_577_nl = (~ (fsm_output[6])) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm)
      | (fsm_output[8]) | (fsm_output[7]) | (fsm_output[0]) | (fsm_output[4]);
  assign or_576_nl = (fsm_output[6]) | (~ (fsm_output[8])) | (fsm_output[7]) | (~((fsm_output[0])
      & (fsm_output[4])));
  assign mux_352_nl = MUX_s_1_2_2(or_577_nl, or_576_nl, fsm_output[1]);
  assign mux_354_nl = MUX_s_1_2_2(mux_353_nl, mux_352_nl, fsm_output[2]);
  assign or_1359_nl = (fsm_output[3]) | mux_354_nl;
  assign or_1360_nl = (fsm_output[2:1]!=2'b01) | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm
      | (~ (fsm_output[6])) | (~ (fsm_output[8])) | (fsm_output[7]) | (fsm_output[0])
      | (fsm_output[4]);
  assign or_572_nl = (~ (fsm_output[6])) | (fsm_output[8]) | (~((fsm_output[7]) &
      (fsm_output[0]) & (fsm_output[4])));
  assign mux_350_nl = MUX_s_1_2_2(or_572_nl, or_tmp_373, fsm_output[1]);
  assign or_1361_nl = (fsm_output[2]) | mux_350_nl;
  assign mux_351_nl = MUX_s_1_2_2(or_1360_nl, or_1361_nl, fsm_output[3]);
  assign mux_355_nl = MUX_s_1_2_2(or_1359_nl, mux_351_nl, fsm_output[5]);
  assign for_for_j_and_nl = MUX_v_9_2_2(9'b000000000, for_for_j_mux1h_nl, mux_355_nl);
  assign mux_416_nl = MUX_s_1_2_2((~ or_80_cse), (fsm_output[6]), fsm_output[5]);
  assign or_651_nl = nor_419_cse | (fsm_output[6]);
  assign mux_417_nl = MUX_s_1_2_2(mux_416_nl, or_651_nl, fsm_output[1]);
  assign mux_414_nl = MUX_s_1_2_2(or_80_cse, or_1217_cse, fsm_output[5]);
  assign mux_415_nl = MUX_s_1_2_2((~ mux_414_nl), (fsm_output[6]), fsm_output[1]);
  assign mux_418_nl = MUX_s_1_2_2(mux_417_nl, mux_415_nl, fsm_output[0]);
  assign mux_419_nl = MUX_s_1_2_2((~ mux_418_nl), or_tmp_449, fsm_output[4]);
  assign mux_412_nl = MUX_s_1_2_2(or_tmp_449, mux_tmp_402, fsm_output[1]);
  assign mux_410_nl = MUX_s_1_2_2(mux_tmp_405, or_tmp_449, fsm_output[1]);
  assign mux_409_nl = MUX_s_1_2_2(or_tmp_449, mux_tmp_405, fsm_output[1]);
  assign mux_411_nl = MUX_s_1_2_2(mux_410_nl, mux_409_nl, fsm_output[0]);
  assign mux_413_nl = MUX_s_1_2_2(mux_412_nl, mux_411_nl, fsm_output[4]);
  assign mux_420_nl = MUX_s_1_2_2(mux_419_nl, mux_413_nl, fsm_output[3]);
  assign nand_183_nl = ~((~((fsm_output[1]) & (fsm_output[5]) & (fsm_output[8])))
      & (fsm_output[6]));
  assign mux_406_nl = MUX_s_1_2_2(or_tmp_449, mux_tmp_405, and_850_cse);
  assign mux_407_nl = MUX_s_1_2_2(nand_183_nl, mux_406_nl, fsm_output[4]);
  assign mux_403_nl = MUX_s_1_2_2(or_tmp_449, mux_tmp_402, nor_83_cse);
  assign mux_401_nl = MUX_s_1_2_2(or_tmp_449, or_645_cse, and_850_cse);
  assign mux_404_nl = MUX_s_1_2_2(mux_403_nl, mux_401_nl, fsm_output[4]);
  assign mux_408_nl = MUX_s_1_2_2(mux_407_nl, mux_404_nl, fsm_output[3]);
  assign mux_421_nl = MUX_s_1_2_2(mux_420_nl, mux_408_nl, fsm_output[2]);
  assign or_643_nl = (fsm_output[0]) | (fsm_output[1]) | (fsm_output[5]) | (fsm_output[8])
      | (fsm_output[6]);
  assign or_642_nl = (~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[5])
      | (fsm_output[8]) | (fsm_output[6]);
  assign mux_399_nl = MUX_s_1_2_2(or_643_nl, or_642_nl, fsm_output[4]);
  assign nand_19_nl = ~((fsm_output[4]) & (~(nor_414_cse | (~ (fsm_output[5])) |
      (fsm_output[8]) | (~ (fsm_output[6])))));
  assign mux_400_nl = MUX_s_1_2_2(mux_399_nl, nand_19_nl, fsm_output[3]);
  assign or_644_nl = (fsm_output[2]) | mux_400_nl;
  assign mux_422_nl = MUX_s_1_2_2(mux_421_nl, or_644_nl, fsm_output[7]);
  assign INIT_2D_MEM_LOOP_2_and_1_nl = INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_tmp
      & (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3==9'b000000000) & (reg_SF_LOOP_3_acc_38_1_ftd_2==9'b000000000);
  assign for_for_or_3_nl = and_dcpl_440 | and_dcpl_387 | and_dcpl_337;
  assign for_for_or_6_nl = and_dcpl_494 | and_dcpl_348;
  assign for_for_mux1h_4_nl = MUX1HOT_s_1_5_2(for_for_for_for_nor_tmp, (~ (z_out_31[2])),
      z_out_53_40, INIT_2D_MEM_LOOP_2_and_1_nl, LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp,
      {for_for_or_3_nl , for_for_or_6_nl , attention_round_1_qelse_or_8_cse , and_dcpl_366
      , and_dcpl_497});
  assign or_690_nl = (fsm_output[3]) | (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[8])
      | (~ (fsm_output[7]));
  assign nand_21_nl = ~((fsm_output[3]) & (~(nor_414_cse | (fsm_output[8:7]!=2'b00))));
  assign mux_453_nl = MUX_s_1_2_2(or_690_nl, nand_21_nl, fsm_output[6]);
  assign nor_429_nl = ~((fsm_output[1]) | (~ (fsm_output[8])) | (fsm_output[7]));
  assign mux_451_nl = MUX_s_1_2_2(nor_428_cse, nor_429_nl, fsm_output[0]);
  assign nand_20_nl = ~((fsm_output[3]) & mux_451_nl);
  assign mux_452_nl = MUX_s_1_2_2(nand_20_nl, or_629_cse, fsm_output[6]);
  assign mux_454_nl = MUX_s_1_2_2(mux_453_nl, mux_452_nl, fsm_output[4]);
  assign mux_455_nl = MUX_s_1_2_2(mux_454_nl, or_tmp_55, fsm_output[5]);
  assign or_684_nl = (~((~ (fsm_output[3])) | (fsm_output[0]))) | (~ (fsm_output[1]))
      | (fsm_output[8]) | (~ (fsm_output[7]));
  assign or_680_nl = (LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp
      & (z_out_37[4]) & (z_out_22[4]) & (z_out_36[4]) & LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp
      & (~ (fsm_output[1]))) | (fsm_output[8:7]!=2'b00);
  assign mux_446_nl = MUX_s_1_2_2(mux_445_cse, or_680_nl, fsm_output[0]);
  assign mux_447_nl = MUX_s_1_2_2(mux_446_nl, or_629_cse, fsm_output[3]);
  assign mux_448_nl = MUX_s_1_2_2(or_684_nl, mux_447_nl, fsm_output[6]);
  assign mux_449_nl = MUX_s_1_2_2(mux_448_nl, or_tmp_55, fsm_output[4]);
  assign or_678_nl = (~ (fsm_output[3])) | (fsm_output[1]) | (fsm_output[8]) | (fsm_output[7]);
  assign mux_443_nl = MUX_s_1_2_2(or_678_nl, or_629_cse, fsm_output[6]);
  assign mux_444_nl = MUX_s_1_2_2(mux_443_nl, or_tmp_55, fsm_output[4]);
  assign mux_450_nl = MUX_s_1_2_2(mux_449_nl, mux_444_nl, fsm_output[5]);
  assign mux_456_nl = MUX_s_1_2_2(mux_455_nl, mux_450_nl, fsm_output[2]);
  assign attention_sqrt_for_i_attention_sqrt_for_i_mux_nl = MUX_v_2_2_2((attention_sqrt_for_i_4_0_sva_1_mx0w0[4:3]),
      (GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva[4:3]), and_dcpl_505);
  assign attention_sqrt_1_for_i_not_2_nl = ~ attention_sqrt_1_for_i_4_0_sva_mx0c3;
  assign nor_156_nl = ~((fsm_output[2]) | (~ (fsm_output[0])));
  assign mux_646_nl = MUX_s_1_2_2(or_tmp_726, or_935_cse, nor_156_nl);
  assign and_725_nl = (fsm_output[4]) & (~ mux_646_nl);
  assign nor_217_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[1])) | (fsm_output[8]));
  assign mux_645_nl = MUX_s_1_2_2(nor_217_nl, nor_372_cse, fsm_output[4]);
  assign mux_647_nl = MUX_s_1_2_2(and_725_nl, mux_645_nl, fsm_output[3]);
  assign nand_38_nl = ~((fsm_output[7]) & mux_647_nl);
  assign nand_61_nl = ~((fsm_output[4:3]==2'b11) & ((fsm_output[2]) | (fsm_output[1])
      | (fsm_output[8])));
  assign mux_644_nl = MUX_s_1_2_2(nand_61_nl, (fsm_output[8]), fsm_output[7]);
  assign mux_648_nl = MUX_s_1_2_2(nand_38_nl, mux_644_nl, fsm_output[5]);
  assign nand_62_nl = ~((~((z_out_22[4]) & (z_out_19[2]) & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1))
      & (fsm_output[8]));
  assign mux_640_nl = MUX_s_1_2_2((fsm_output[8]), nand_62_nl, fsm_output[1]);
  assign mux_641_nl = MUX_s_1_2_2(or_tmp_726, mux_640_nl, fsm_output[0]);
  assign or_926_nl = (~(LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2 | (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1)))
      | (fsm_output[8]);
  assign mux_638_nl = MUX_s_1_2_2((~ (fsm_output[8])), or_926_nl, fsm_output[1]);
  assign mux_639_nl = MUX_s_1_2_2(mux_638_nl, (fsm_output[8]), fsm_output[0]);
  assign mux_642_nl = MUX_s_1_2_2(mux_641_nl, mux_639_nl, fsm_output[2]);
  assign or_929_nl = (fsm_output[4:3]!=2'b00) | mux_642_nl;
  assign or_924_nl = and_863_cse | (fsm_output[8]);
  assign nand_36_nl = ~((fsm_output[2]) & (~(nor_414_cse | (fsm_output[8]))));
  assign mux_636_nl = MUX_s_1_2_2(or_924_nl, nand_36_nl, fsm_output[4]);
  assign or_921_nl = (~ (fsm_output[4])) | (fsm_output[2]) | (fsm_output[0]) | (fsm_output[1])
      | (fsm_output[8]);
  assign mux_637_nl = MUX_s_1_2_2(mux_636_nl, or_921_nl, fsm_output[3]);
  assign mux_643_nl = MUX_s_1_2_2(or_929_nl, mux_637_nl, fsm_output[7]);
  assign or_930_nl = (fsm_output[5]) | mux_643_nl;
  assign mux_649_nl = MUX_s_1_2_2(mux_648_nl, or_930_nl, fsm_output[6]);
  assign nor_492_nl = ~((~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[7]))
      | (fsm_output[8]) | (~ (fsm_output[4])));
  assign nor_493_nl = ~((fsm_output[0]) | (~ (fsm_output[1])) | (~ (fsm_output[7]))
      | (fsm_output[8]) | (~ (fsm_output[4])));
  assign mux_651_nl = MUX_s_1_2_2(nor_492_nl, nor_493_nl, fsm_output[2]);
  assign or_937_nl = (fsm_output[7]) | (fsm_output[8]) | (fsm_output[4]);
  assign mux_650_nl = MUX_s_1_2_2(or_dcpl_179, or_937_nl, fsm_output[1]);
  assign nor_494_nl = ~((fsm_output[2]) | (fsm_output[0]) | mux_650_nl);
  assign mux_652_nl = MUX_s_1_2_2(mux_651_nl, nor_494_nl, fsm_output[6]);
  assign SF_LOOP_3_or_1_nl = (mux_652_nl & (~((fsm_output[3]) | (fsm_output[5]))))
      | (and_dcpl_208 & and_dcpl_205 & (z_out_19[2]) & (z_out_22[4]) & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1);
  assign mux_486_nl = MUX_s_1_2_2(or_tmp_511, or_tmp_502, fsm_output[1]);
  assign mux_485_nl = MUX_s_1_2_2(or_tmp_500, or_tmp_499, fsm_output[1]);
  assign mux_487_nl = MUX_s_1_2_2(mux_486_nl, mux_485_nl, fsm_output[3]);
  assign mux_482_nl = MUX_s_1_2_2(and_893_cse, (fsm_output[6]), fsm_output[4]);
  assign or_713_nl = (fsm_output[5:4]!=2'b00);
  assign mux_480_nl = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), or_713_nl);
  assign mux_483_nl = MUX_s_1_2_2(mux_482_nl, mux_480_nl, fsm_output[1]);
  assign mux_479_nl = MUX_s_1_2_2(or_709_cse, and_893_cse, fsm_output[4]);
  assign mux_484_nl = MUX_s_1_2_2(mux_483_nl, mux_479_nl, fsm_output[3]);
  assign mux_488_nl = MUX_s_1_2_2(mux_487_nl, mux_484_nl, fsm_output[7]);
  assign mux_477_nl = MUX_s_1_2_2(or_tmp_511, or_tmp_499, fsm_output[3]);
  assign mux_471_nl = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[5]);
  assign mux_474_nl = MUX_s_1_2_2(mux_471_nl, and_893_cse, fsm_output[4]);
  assign or_708_nl = (~((fsm_output[1]) | (fsm_output[4]) | (fsm_output[5]))) | (fsm_output[6]);
  assign mux_476_nl = MUX_s_1_2_2(mux_474_nl, or_708_nl, fsm_output[3]);
  assign mux_478_nl = MUX_s_1_2_2(mux_477_nl, mux_476_nl, fsm_output[7]);
  assign mux_489_nl = MUX_s_1_2_2(mux_488_nl, mux_478_nl, fsm_output[2]);
  assign mux_468_nl = MUX_s_1_2_2(or_tmp_502, or_705_cse, fsm_output[1]);
  assign mux_469_nl = MUX_s_1_2_2(mux_468_nl, or_tmp_499, fsm_output[3]);
  assign or_706_nl = (fsm_output[7]) | mux_469_nl;
  assign mux_466_nl = MUX_s_1_2_2(or_tmp_502, or_tmp_500, fsm_output[1]);
  assign mux_467_nl = MUX_s_1_2_2(mux_466_nl, or_tmp_499, fsm_output[3]);
  assign or_703_nl = (fsm_output[7]) | mux_467_nl;
  assign mux_470_nl = MUX_s_1_2_2(or_706_nl, or_703_nl, fsm_output[2]);
  assign mux_490_nl = MUX_s_1_2_2(mux_489_nl, mux_470_nl, fsm_output[8]);
  assign and_595_nl = and_dcpl_101 & (~ (fsm_output[0])) & and_dcpl_399 & (~ LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2)
      & LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1 & (~ mux_490_nl);
  assign and_596_nl = and_dcpl_276 & and_dcpl_316;
  assign mux1h_nl = MUX1HOT_v_3_7_2((attention_sqrt_for_i_4_0_sva_1_mx0w0[2:0]),
      attention_sqrt_1_for_i_4_0_sva_2_0, z_out_27, CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0,
      z_out_21, ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}),
      (GEMM_3D_FLOAT_LOOP_4_mul_sdt_15_sva[2:0]), {and_dcpl_500 , (~ mux_649_nl)
      , SF_LOOP_3_or_1_nl , and_595_nl , and_dcpl_274 , and_596_nl , and_dcpl_505});
  assign mux_975_nl = MUX_s_1_2_2((fsm_output[4]), (~ (fsm_output[4])), fsm_output[7]);
  assign or_1378_nl = (fsm_output[8]) | (~ (fsm_output[6])) | (fsm_output[5]) | mux_975_nl;
  assign mux_976_nl = MUX_s_1_2_2(or_tmp_712, or_1378_nl, fsm_output[2]);
  assign or_1375_nl = (~ (fsm_output[6])) | (fsm_output[7]) | (fsm_output[4]);
  assign mux_974_nl = MUX_s_1_2_2(or_tmp_707, or_1375_nl, fsm_output[8]);
  assign or_1376_nl = (fsm_output[2]) | mux_974_nl;
  assign mux_977_nl = MUX_s_1_2_2(mux_976_nl, or_1376_nl, fsm_output[1]);
  assign or_1374_nl = (fsm_output[7:4]!=4'b0011);
  assign mux_973_nl = MUX_s_1_2_2(or_tmp_707, or_1374_nl, fsm_output[8]);
  assign nand_249_nl = ~((fsm_output[2:1]==2'b11) & (~ mux_973_nl));
  assign mux_978_nl = MUX_s_1_2_2(mux_977_nl, nand_249_nl, fsm_output[0]);
  assign or_1371_nl = (fsm_output[8:4]!=5'b00011);
  assign mux_972_nl = MUX_s_1_2_2(or_1371_nl, or_tmp_712, fsm_output[2]);
  assign or_1372_nl = (fsm_output[1:0]!=2'b01) | mux_972_nl;
  assign mux_979_nl = MUX_s_1_2_2(mux_978_nl, or_1372_nl, fsm_output[3]);
  assign nor_629_nl = ~((~ mux_979_nl) | attention_sqrt_1_for_i_4_0_sva_mx0c3);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_nl = conv_u2s_30_31({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34]))})
      + conv_s2s_29_31(z_out_9[28:0]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_nl[30:0];
  assign attention_abs_qif_or_nl = (and_dcpl_356 & and_dcpl_477 & (~ (fsm_output[5]))
      & (z_out_9[31])) | (and_dcpl_276 & and_dcpl_359 & (fsm_output[5]) & (z_out_9[31]));
  assign attention_abs_qif_or_1_nl = (and_dcpl_356 & and_dcpl_477 & (~((fsm_output[5])
      | (z_out_9[31])))) | (and_dcpl_276 & and_dcpl_359 & (fsm_output[5]) & (~ (z_out_9[31])));
  assign nand_194_nl = ~((fsm_output[2]) & (~(nor_414_cse | (fsm_output[7:4]!=4'b0000))));
  assign mux_210_nl = MUX_s_1_2_2(or_1325_cse, nand_160_cse, fsm_output[4]);
  assign mux_514_nl = MUX_s_1_2_2(or_tmp_230, mux_210_nl, and_863_cse);
  assign mux_515_nl = MUX_s_1_2_2(nand_194_nl, mux_514_nl, fsm_output[3]);
  assign or_746_nl = (fsm_output[2]) | (fsm_output[1]) | (fsm_output[4]) | (fsm_output[5])
      | (fsm_output[6]) | (fsm_output[7]);
  assign mux_512_nl = MUX_s_1_2_2(or_tmp_230, or_746_nl, fsm_output[3]);
  assign mux_516_nl = MUX_s_1_2_2(mux_515_nl, mux_512_nl, fsm_output[8]);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl = conv_s2s_77_78({operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_60
      , operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_59_57 , operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0
      , (attention_exp_exp_half_mul_3_cse_sva[19:4])}) + conv_s2s_77_78(z_out_11[99:23]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_nl[77:0];
  assign attention_sqrt_guess_or_nl = attention_sqrt_1_guess_sva_29_0_mx0c0 | attention_sqrt_1_guess_sva_29_0_mx0c3;
  assign or_742_nl = (fsm_output[4]) | (~((or_1328_cse & (fsm_output[2])) | (fsm_output[8])))
      | (fsm_output[7:5]!=3'b000);
  assign mux_506_nl = MUX_s_1_2_2(or_1325_cse, or_tmp_523, fsm_output[2]);
  assign mux_507_nl = MUX_s_1_2_2(mux_506_nl, or_722_cse, fsm_output[1]);
  assign mux_504_nl = MUX_s_1_2_2(or_722_cse, or_tmp_523, fsm_output[2]);
  assign or_735_nl = (fsm_output[2]) | (fsm_output[8]) | (fsm_output[6]) | (fsm_output[7]);
  assign mux_505_nl = MUX_s_1_2_2(mux_504_nl, or_735_nl, fsm_output[1]);
  assign mux_508_nl = MUX_s_1_2_2(mux_507_nl, mux_505_nl, fsm_output[0]);
  assign or_734_nl = (fsm_output[2]) | (~ (fsm_output[8])) | (fsm_output[5]) | (fsm_output[6])
      | (fsm_output[7]);
  assign or_733_nl = (~ (fsm_output[2])) | (fsm_output[8]) | nand_160_cse;
  assign mux_503_nl = MUX_s_1_2_2(or_734_nl, or_733_nl, and_850_cse);
  assign mux_509_nl = MUX_s_1_2_2(mux_508_nl, mux_503_nl, fsm_output[4]);
  assign mux_510_nl = MUX_s_1_2_2(or_742_nl, mux_509_nl, fsm_output[3]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_1_nl = MUX1HOT_v_9_3_2(SF_LOOP_3_acc_5_psp_sva_8_0,
      (z_out_51_40_1[38:30]), SF_LOOP_3_acc_45_itm_8_0, {(~ mux_510_nl) , and_dcpl_147
      , and_dcpl_460});
  assign not_2244_nl = ~ mux_502_itm;
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_1_nl = MUX_v_9_2_2(9'b000000000,
      operator_40_24_true_AC_TRN_AC_WRAP_mux1h_1_nl, not_2244_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_1_nl = MUX_v_9_2_2(operator_40_24_true_AC_TRN_AC_WRAP_and_1_nl,
      9'b111111111, and_528_seb);
  assign mux_528_nl = MUX_s_1_2_2(or_tmp_230, or_tmp_46, fsm_output[1]);
  assign nand_197_nl = ~((fsm_output[3]) & (~ mux_528_nl));
  assign mux_524_nl = MUX_s_1_2_2(nor_450_cse, nor_tmp_140, fsm_output[4]);
  assign nor_451_nl = ~((fsm_output[7:5]!=3'b000));
  assign mux_523_nl = MUX_s_1_2_2(nor_451_nl, nor_tmp_140, fsm_output[4]);
  assign mux_525_nl = MUX_s_1_2_2(mux_524_nl, mux_523_nl, fsm_output[0]);
  assign mux_526_nl = MUX_s_1_2_2(or_tmp_46, (~ mux_525_nl), fsm_output[1]);
  assign mux_527_nl = MUX_s_1_2_2(or_tmp_230, mux_526_nl, fsm_output[3]);
  assign mux_529_nl = MUX_s_1_2_2(nand_197_nl, mux_527_nl, fsm_output[2]);
  assign or_764_nl = (~((~ (fsm_output[1])) | (fsm_output[4]))) | (fsm_output[7:5]!=3'b000);
  assign mux_521_nl = MUX_s_1_2_2(or_tmp_230, or_764_nl, fsm_output[3]);
  assign or_762_nl = (fsm_output[3]) | (nand_175_cse & (fsm_output[4])) | (fsm_output[7:5]!=3'b000);
  assign mux_522_nl = MUX_s_1_2_2(mux_521_nl, or_762_nl, fsm_output[2]);
  assign mux_530_nl = MUX_s_1_2_2(mux_529_nl, mux_522_nl, fsm_output[8]);
  assign and_545_nl = and_dcpl_152 & (or_616_cse | (fsm_output[5]));
  assign nl_attention_sqrt_for_acc_3_nl = conv_u2s_3_4(attention_sqrt_for_i_4_0_sva_1_mx0w0[4:2])
      + 4'b1011;
  assign attention_sqrt_for_acc_3_nl = nl_attention_sqrt_for_acc_3_nl[3:0];
  assign attention_sqrt_for_or_nl = APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1
      | and_dcpl_260 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c5;
  assign attention_sqrt_for_or_1_nl = APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2
      | and_dcpl_263;
  assign mux_589_nl = MUX_s_1_2_2(or_tmp_266, or_935_cse, fsm_output[0]);
  assign and_568_nl = (~ mux_589_nl) & nor_581_cse & and_dcpl_367;
  assign RMS_NORM_LOOP_2_mux1h_nl = MUX1HOT_s_1_3_2(RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nand_tmp,
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm, LINEAR_FORWARD_NO_MUL_LOOP_3_stage_0_2,
      {and_dcpl_494 , and_568_nl , and_dcpl_505});
  assign mux_590_nl = MUX_s_1_2_2(nor_tmp_145, (~ or_tmp_646), fsm_output[2]);
  assign or_845_nl = (fsm_output[3]) | (fsm_output[7]) | (~((fsm_output[6]) & (fsm_output[0])
      & (fsm_output[1])));
  assign or_843_nl = (~ (fsm_output[3])) | (fsm_output[7]) | (fsm_output[6]) | mux_tmp_584;
  assign mux_587_nl = MUX_s_1_2_2(or_845_nl, or_843_nl, fsm_output[4]);
  assign or_1366_nl = (~ (fsm_output[8])) | (fsm_output[5]) | mux_587_nl;
  assign nand_30_nl = ~((fsm_output[6]) & (~ mux_tmp_584));
  assign or_838_nl = (fsm_output[6]) | mux_tmp_584;
  assign mux_585_nl = MUX_s_1_2_2(nand_30_nl, or_838_nl, fsm_output[7]);
  assign or_839_nl = (fsm_output[4:3]!=2'b00) | mux_585_nl;
  assign or_836_nl = (fsm_output[4]) | (~ (fsm_output[3])) | (fsm_output[7]) | (fsm_output[6])
      | (fsm_output[1]);
  assign mux_586_nl = MUX_s_1_2_2(or_839_nl, or_836_nl, fsm_output[5]);
  assign or_1367_nl = (fsm_output[8]) | mux_586_nl;
  assign mux_588_nl = MUX_s_1_2_2(or_1366_nl, or_1367_nl, fsm_output[2]);
  assign SF_LOOP_3_SF_LOOP_3_nor_nl = ~(and_dcpl_497 | and_dcpl_450);
  assign mux_608_nl = MUX_s_1_2_2(or_1217_cse, mux_tmp_606, fsm_output[4]);
  assign mux_609_nl = MUX_s_1_2_2(or_tmp_676, mux_608_nl, fsm_output[1]);
  assign nor_148_nl = ~((fsm_output[1]) | (~ (fsm_output[4])));
  assign mux_607_nl = MUX_s_1_2_2(or_1217_cse, mux_tmp_606, nor_148_nl);
  assign mux_610_nl = MUX_s_1_2_2(mux_609_nl, mux_607_nl, fsm_output[0]);
  assign mux_611_nl = MUX_s_1_2_2(mux_610_nl, or_1217_cse, fsm_output[2]);
  assign mux_612_nl = MUX_s_1_2_2(or_tmp_676, mux_611_nl, fsm_output[3]);
  assign or_875_nl = (~((~((fsm_output[4:1]!=4'b0110))) | (fsm_output[6]))) | (fsm_output[8]);
  assign mux_613_nl = MUX_s_1_2_2(mux_612_nl, or_875_nl, fsm_output[5]);
  assign nor_911_nl = ~(and_dcpl_556 | or_1563_tmp);
  assign QUANTIZE_ACTIVATION_LOOP_2_attention_abs_2_nand_nl = ~((z_out_12[39]) &
      (z_out_10[67]));
  assign attention_abs_2_mux_2_nl = MUX_v_39_2_2((z_out_10[66:28]), (z_out_12[38:0]),
      z_out_10[67]);
  assign nl_QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl = conv_s2u_40_41({QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39
      , QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_15 , QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_14_0})
      + conv_s2u_40_41({QUANTIZE_ACTIVATION_LOOP_2_attention_abs_2_nand_nl , (~ attention_abs_2_mux_2_nl)})
      + 41'b00000000000000000000000000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl = nl_QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl[40:0];
  assign QUANTIZE_ACTIVATION_LOOP_2_if_mux1h_nl = MUX1HOT_s_1_4_2((readslicef_41_1_40(QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl)),
      lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_sva_dfm_mx1w0, (z_out_51_40_1[39]),
      lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_3_sva_dfm_mx2w0, {and_dcpl_447 , and_dcpl_373
      , and_dcpl_242 , and_dcpl_118});
  assign or_889_nl = (fsm_output[0]) | (~ (fsm_output[8]));
  assign mux_618_nl = MUX_s_1_2_2(or_889_nl, (fsm_output[8]), fsm_output[1]);
  assign or_1344_nl = (~ (fsm_output[6])) | (fsm_output[5]) | (~ (fsm_output[2]))
      | (fsm_output[4]) | mux_618_nl;
  assign or_886_nl = (fsm_output[2]) | (~ (fsm_output[4])) | (~ (fsm_output[1]))
      | (fsm_output[0]) | (~ (fsm_output[8]));
  assign or_884_nl = (~ (fsm_output[2])) | (fsm_output[4]) | (fsm_output[1]) | (~
      (fsm_output[0])) | (fsm_output[8]);
  assign mux_617_nl = MUX_s_1_2_2(or_886_nl, or_884_nl, fsm_output[5]);
  assign or_1345_nl = (fsm_output[6]) | mux_617_nl;
  assign mux_619_nl = MUX_s_1_2_2(or_1344_nl, or_1345_nl, fsm_output[3]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_11_nl = MUX1HOT_v_2_8_2((APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_4_2[1:0]),
      (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[3:2]), (z_out_18[3:2]), (z_out_14[3:2]),
      (z_out_26[3:2]), (operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[3:2]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3:2]),
      (z_out_22[3:2]), {APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c0 , and_dcpl_395
      , APPLY_ROTARY_POS_EMB_LOOP_6_or_9_cse , APPLY_ROTARY_POS_EMB_LOOP_6_or_10_itm
      , and_dcpl_588 , and_dcpl_530 , APPLY_ROTARY_POS_EMB_LOOP_6_and_12_itm , APPLY_ROTARY_POS_EMB_LOOP_6_and_13_itm});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_17_nl = MUX1HOT_s_1_8_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_1,
      (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[1]), (z_out_18[1]), (z_out_14[1]), (z_out_26[1]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[1]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[1]),
      (z_out_22[1]), {APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c0 , and_dcpl_395
      , APPLY_ROTARY_POS_EMB_LOOP_6_or_9_cse , APPLY_ROTARY_POS_EMB_LOOP_6_or_10_itm
      , and_dcpl_588 , and_dcpl_530 , APPLY_ROTARY_POS_EMB_LOOP_6_and_12_itm , APPLY_ROTARY_POS_EMB_LOOP_6_and_13_itm});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_18_nl = MUX1HOT_s_1_8_2(APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_0,
      (GEMM_3D_FLOAT_LOOP_4_1_acc_28_cse_sva[0]), (z_out_18[0]), (z_out_14[0]), (z_out_26[0]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_22[0]), {APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c0 , and_dcpl_395
      , APPLY_ROTARY_POS_EMB_LOOP_6_or_9_cse , APPLY_ROTARY_POS_EMB_LOOP_6_or_10_itm
      , and_dcpl_588 , and_dcpl_530 , APPLY_ROTARY_POS_EMB_LOOP_6_and_12_itm , APPLY_ROTARY_POS_EMB_LOOP_6_and_13_itm});
  assign nor_nl = ~((and_dcpl_118 & (~ lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_3_sva_dfm_mx2w0))
      | APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt_mx0c1);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl = MUX_s_1_2_2((~ or_dcpl_202), LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1,
      and_dcpl_118);
  assign nand_40_nl = ~((fsm_output[4]) & nor_501_cse);
  assign mux_672_nl = MUX_s_1_2_2(mux_tmp_665, and_849_cse, fsm_output[1]);
  assign and_921_nl = or_607_cse & (fsm_output[8]);
  assign mux_673_nl = MUX_s_1_2_2(mux_672_nl, and_921_nl, fsm_output[2]);
  assign mux_674_nl = MUX_s_1_2_2(or_454_cse, mux_673_nl, fsm_output[4]);
  assign mux_675_nl = MUX_s_1_2_2(nand_40_nl, mux_674_nl, fsm_output[5]);
  assign mux_676_nl = MUX_s_1_2_2(or_966_cse, mux_675_nl, fsm_output[3]);
  assign mux_666_nl = MUX_s_1_2_2(mux_tmp_665, or_454_cse, fsm_output[1]);
  assign mux_667_nl = MUX_s_1_2_2(mux_666_nl, (fsm_output[8]), fsm_output[0]);
  assign mux_668_nl = MUX_s_1_2_2(or_454_cse, mux_667_nl, fsm_output[2]);
  assign nand_213_nl = ~((fsm_output[2]) & (fsm_output[1]) & (fsm_output[7]) & (~
      (fsm_output[8])));
  assign mux_669_nl = MUX_s_1_2_2(mux_668_nl, nand_213_nl, fsm_output[4]);
  assign or_961_nl = (fsm_output[2]) | and_850_cse | (fsm_output[8:7]!=2'b01);
  assign mux_664_nl = MUX_s_1_2_2(or_454_cse, or_961_nl, fsm_output[4]);
  assign mux_670_nl = MUX_s_1_2_2(mux_669_nl, mux_664_nl, fsm_output[5]);
  assign or_959_nl = (~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[7]))
      | (fsm_output[8]);
  assign mux_661_nl = MUX_s_1_2_2(or_1017_cse, or_959_nl, fsm_output[2]);
  assign mux_660_nl = MUX_s_1_2_2(or_1017_cse, or_454_cse, fsm_output[2]);
  assign mux_662_nl = MUX_s_1_2_2(mux_661_nl, mux_660_nl, fsm_output[4]);
  assign or_954_nl = (~ (fsm_output[1])) | (~ (fsm_output[7])) | (fsm_output[8]);
  assign mux_659_nl = MUX_s_1_2_2(or_955_cse, or_954_nl, fsm_output[2]);
  assign or_956_nl = (fsm_output[4]) | mux_659_nl;
  assign mux_663_nl = MUX_s_1_2_2(mux_662_nl, or_956_nl, fsm_output[5]);
  assign mux_671_nl = MUX_s_1_2_2(mux_670_nl, mux_663_nl, fsm_output[3]);
  assign mux_677_nl = MUX_s_1_2_2(mux_676_nl, mux_671_nl, fsm_output[6]);
  assign and_612_nl = and_dcpl_403 & and_dcpl_210;
  assign operator_40_24_true_AC_TRN_AC_WRAP_1_or_nl = (and_dcpl_234 & and_dcpl_316)
      | (and_dcpl_257 & and_dcpl_359 & (z_out_51_40_1[39]) & (~ (fsm_output[5])));
  assign and_622_nl = and_dcpl_454 & and_dcpl_135;
  assign or_1347_nl = (fsm_output[6]) | ((fsm_output[5:3]==3'b111) & or_1326_cse);
  assign nor_504_nl = ~((fsm_output[3:0]!=4'b0000));
  assign and_616_nl = (fsm_output[3]) & or_1326_cse;
  assign mux_687_nl = MUX_s_1_2_2(nor_504_nl, and_616_nl, fsm_output[5]);
  assign mux_688_nl = MUX_s_1_2_2(mux_687_nl, (fsm_output[5]), fsm_output[4]);
  assign nor_505_nl = ~((fsm_output[5]) | and_615_cse);
  assign and_614_nl = (fsm_output[2]) & ((~ (z_out_51_40_1[39])) | (fsm_output[1]));
  assign mux_684_nl = MUX_s_1_2_2(and_614_nl, or_1326_cse, fsm_output[0]);
  assign mux_685_nl = MUX_s_1_2_2((~ mux_684_nl), mux_tmp_681, fsm_output[3]);
  assign nor_506_nl = ~((fsm_output[5]) | mux_685_nl);
  assign mux_686_nl = MUX_s_1_2_2(nor_505_nl, nor_506_nl, fsm_output[4]);
  assign mux_689_nl = MUX_s_1_2_2(mux_688_nl, mux_686_nl, fsm_output[6]);
  assign mux_690_nl = MUX_s_1_2_2(or_1347_nl, mux_689_nl, fsm_output[7]);
  assign nand_214_nl = ~((fsm_output[5:3]==3'b111));
  assign and_613_nl = (fsm_output[5]) & ((fsm_output[3]) | mux_tmp_681);
  assign mux_682_nl = MUX_s_1_2_2(and_613_nl, (fsm_output[5]), fsm_output[4]);
  assign mux_683_nl = MUX_s_1_2_2(nand_214_nl, mux_682_nl, fsm_output[6]);
  assign nor_507_nl = ~((fsm_output[7]) | mux_683_nl);
  assign mux_691_nl = MUX_s_1_2_2(mux_690_nl, nor_507_nl, fsm_output[8]);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_6_nl = MUX1HOT_v_2_4_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[3:2]),
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[3:2]), reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1,
      LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_3_2, {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_12_itm
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_13_itm , and_dcpl_395
      , and_dcpl_118});
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_nl = ~(MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_6_nl,
      2'b11, and_dcpl_274));
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_nl
      = ~(MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_nl,
      2'b11, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_itm));
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_7_nl = MUX1HOT_v_2_5_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[1:0]),
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[1:0]), reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2,
      (z_out_20[1:0]), LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_1_0, {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_12_itm
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_13_itm , and_dcpl_395
      , and_dcpl_274 , and_dcpl_118});
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_1_nl = ~ QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_itm;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_15_nl = MUX_v_2_2_2(2'b00,
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_7_nl, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_1_nl);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_8_nl = MUX1HOT_v_2_5_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[3:2]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm[3:2]),
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_1, (GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2[3:2]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3[3:2]), {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_5_itm
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_20_itm , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_21_itm
      , and_dcpl_274 , and_dcpl_530});
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_nl = ~ QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_3_itm;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_23_nl = MUX_v_2_2_2(2'b00,
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_8_nl, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_nl);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_9_nl = MUX1HOT_v_2_5_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[1:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm[1:0]),
      reg_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_ftd_2, (GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2[1:0]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_28_mx0w3[1:0]), {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_5_itm
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_20_itm , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_21_itm
      , and_dcpl_274 , and_dcpl_530});
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_2_nl = ~ QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_or_3_itm;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_24_nl = MUX_v_2_2_2(2'b00,
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux1h_9_nl, QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_not_2_nl);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_192_nl = ({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 4'b0000}) + conv_u2u_4_7({2'b11 , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd}) +
      7'b0000001;
  assign GEMM_3D_FLOAT_LOOP_4_acc_192_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_192_nl[6:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_17_nl = reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd
      + 2'b01;
  assign GEMM_3D_FLOAT_LOOP_4_acc_17_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_17_nl[1:0];
  assign nand_43_nl = ~((fsm_output[4:3]==2'b11) & nor_501_cse);
  assign mux_719_nl = MUX_s_1_2_2(nand_43_nl, or_454_cse, fsm_output[5]);
  assign or_1023_nl = (fsm_output[0]) | mux_716_cse;
  assign mux_717_nl = MUX_s_1_2_2(or_1023_nl, or_629_cse, fsm_output[1]);
  assign mux_718_nl = MUX_s_1_2_2(or_454_cse, mux_717_nl, fsm_output[2]);
  assign or_1025_nl = (fsm_output[5:3]!=3'b000) | mux_718_nl;
  assign mux_720_nl = MUX_s_1_2_2(mux_719_nl, or_1025_nl, fsm_output[6]);
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_and_nl = (~ LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1)
      & and_dcpl_118;
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_and_4_nl = LINEAR_FORWARD_NO_MUL_LOOP_3_3_stage_0_1
      & and_dcpl_118;
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_5_nl = MUX1HOT_s_1_8_2((z_out_32[2]),
      (z_out_37[2]), (z_out_28[2]), (z_out_21[2]), (z_out_27[2]), (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2]),
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd, (z_out_19[2]), {and_dcpl_373
      , APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c3 , and_dcpl_587 , and_dcpl_450
      , and_dcpl_260 , and_dcpl_530 , APPLY_ROTARY_POS_EMB_LOOP_1_i_and_nl , APPLY_ROTARY_POS_EMB_LOOP_1_i_and_4_nl});
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_8_nl = MUX1HOT_v_2_6_2((z_out_32[1:0]),
      (z_out_37[1:0]), (z_out_28[1:0]), (z_out_21[1:0]), (z_out_27[1:0]), (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[1:0]),
      {and_dcpl_373 , APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c3 , and_dcpl_587
      , and_dcpl_450 , and_dcpl_260 , and_dcpl_530});
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_not_2_nl = ~ APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_mx0c0;
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_6_nl = MUX1HOT_v_2_4_2(CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_1,
      (z_out_28[2:1]), ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd , (reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1[1])}),
      (CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0[2:1]), {and_dcpl_388 , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c4
      , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5 , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c6});
  assign CACHE_UPDATE_LOOP_2_1_j_not_nl = ~ CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c7;
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_nand_nl = ~(MUX_v_2_2_2(2'b00, APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_6_nl,
      CACHE_UPDATE_LOOP_2_1_j_not_nl));
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_mux1h_9_nl = MUX1HOT_s_1_5_2(CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_0,
      (z_out_21[0]), (z_out_28[0]), (reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1[0]),
      (CACHE_UPDATE_LOOP_3_1_qif_acc_3_ncse_2_0[0]), {and_dcpl_388 , and_dcpl_348
      , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c4 , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5
      , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c6});
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_240_nl = conv_u2u_1_4(z_out_24[3]) + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign GEMM_3D_FLOAT_LOOP_4_acc_240_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_240_nl[3:0];
  assign APPLY_ROTARY_POS_EMB_LOOP_6_and_14_nl = (~ LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp)
      & and_dcpl_373;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_and_15_nl = LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp
      & and_dcpl_373;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_12_nl = MUX1HOT_v_4_5_2(GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva,
      (z_out_36[3:0]), z_out_14, GEMM_3D_FLOAT_LOOP_4_acc_240_nl, (z_out_31[3:0]),
      {APPLY_ROTARY_POS_EMB_LOOP_6_and_14_nl , APPLY_ROTARY_POS_EMB_LOOP_6_and_15_nl
      , and_dcpl_387 , and_dcpl_274 , and_dcpl_263});
  assign nor_908_nl = ~(((~ lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_sva_dfm_mx1w0)
      & and_dcpl_373) | and_dcpl_545);
  assign and_947_nl = (and_944_cse | (fsm_output[5])) & (fsm_output[7]);
  assign and_948_nl = ((fsm_output[3]) | (fsm_output[5])) & (fsm_output[7]);
  assign nor_553_nl = ~((fsm_output[5]) | (~ (fsm_output[7])));
  assign mux_785_nl = MUX_s_1_2_2(nor_tmp_182, nor_553_nl, fsm_output[3]);
  assign mux_786_nl = MUX_s_1_2_2(and_948_nl, mux_785_nl, fsm_output[2]);
  assign mux_787_nl = MUX_s_1_2_2(nor_tmp_182, mux_786_nl, fsm_output[4]);
  assign mux_788_nl = MUX_s_1_2_2(and_947_nl, mux_787_nl, or_1328_cse);
  assign mux_784_nl = MUX_s_1_2_2(nor_552_cse, nor_tmp_182, fsm_output[3]);
  assign nor_554_nl = ~((~ (fsm_output[1])) | (fsm_output[4]) | (~((fsm_output[2])
      & mux_784_nl)));
  assign mux_789_nl = MUX_s_1_2_2(mux_788_nl, nor_554_nl, fsm_output[6]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_15_nl = MUX1HOT_v_4_5_2(CACHE_UPDATE_LOOP_3_k_5_0_sva_1_3_0,
      z_out_26, z_out_23, z_out_16, z_out_18, {and_dcpl_388 , APPLY_ROTARY_POS_EMB_LOOP_6_or_9_cse
      , and_dcpl_584 , and_dcpl_337 , and_dcpl_588});
  assign not_2256_nl = ~ and_dcpl_545;
  assign nand_46_nl = ~((~((fsm_output[6:2]!=5'b10001))) & mux_797_cse);
  assign nor_555_nl = ~((fsm_output[5]) | ((fsm_output[4:3]==2'b11) & or_369_cse));
  assign and_951_nl = (fsm_output[4]) & (~((fsm_output[2:1]==2'b11)));
  assign mux_792_nl = MUX_s_1_2_2(or_1328_cse, or_1327_cse, fsm_output[2]);
  assign nor_556_nl = ~((fsm_output[2]) | (~ or_1328_cse));
  assign mux_793_nl = MUX_s_1_2_2(mux_792_nl, nor_556_nl, fsm_output[4]);
  assign mux_794_nl = MUX_s_1_2_2(and_951_nl, mux_793_nl, fsm_output[3]);
  assign and_659_nl = (fsm_output[4]) & ((fsm_output[2]) | and_850_cse);
  assign mux_790_nl = MUX_s_1_2_2((fsm_output[1]), (~ (fsm_output[1])), fsm_output[2]);
  assign or_1107_nl = (fsm_output[4]) | mux_790_nl;
  assign mux_791_nl = MUX_s_1_2_2(and_659_nl, or_1107_nl, fsm_output[3]);
  assign mux_795_nl = MUX_s_1_2_2(mux_794_nl, mux_791_nl, fsm_output[5]);
  assign mux_796_nl = MUX_s_1_2_2(nor_555_nl, mux_795_nl, fsm_output[6]);
  assign mux_798_nl = MUX_s_1_2_2(nand_46_nl, mux_796_nl, fsm_output[7]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_nor_1_nl
      = ~(and_dcpl_25 | LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_5_rgt);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_10_nl = and_dcpl_25 & (~ LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_5_rgt);
  assign CACHE_UPDATE_LOOP_3_1_qif_and_1_nl = (~ or_dcpl_210) & and_dcpl_373;
  assign CACHE_UPDATE_LOOP_3_1_qif_and_2_nl = or_dcpl_210 & and_dcpl_373;
  assign CACHE_UPDATE_LOOP_3_1_qif_or_1_nl = and_dcpl_337 | and_dcpl_588;
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_mux_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt,
      (z_out_22[3:0]), LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_1_nl = MUX_v_4_2_2(4'b0000,
      LINEAR_FORWARD_NO_MUL_LOOP_4_1_ki_mux_nl, lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_sva_dfm_mx1w0);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_241_nl = conv_u2u_1_4(z_out_27[2]) + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign GEMM_3D_FLOAT_LOOP_4_acc_241_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_241_nl[3:0];
  assign or_1155_nl = and_850_cse | (~ (fsm_output[7])) | (fsm_output[4]) | (fsm_output[3]);
  assign or_1154_nl = (fsm_output[0]) | (~ (fsm_output[1])) | (fsm_output[7]) | (fsm_output[4])
      | (fsm_output[3]);
  assign mux_828_nl = MUX_s_1_2_2(or_1155_nl, or_1154_nl, fsm_output[2]);
  assign mux_829_nl = MUX_s_1_2_2(not_tmp_504, mux_828_nl, fsm_output[6]);
  assign or_1153_nl = (fsm_output[7:6]!=2'b10);
  assign mux_830_nl = MUX_s_1_2_2(mux_829_nl, or_1153_nl, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_mux_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp,
      (z_out_37[3:0]), LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_LINEAR_FORWARD_NO_MUL_LOOP_4_and_2_nl = MUX_v_4_2_2(4'b0000,
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_mux_nl, lfst_exit_LINEAR_FORWARD_NO_MUL_LOOP_4_sva_dfm_mx1w0);
  assign mux_818_nl = MUX_s_1_2_2(nor_tmp_182, nor_552_cse, fsm_output[6]);
  assign mux_819_nl = MUX_s_1_2_2(mux_818_nl, (~ or_tmp_927), fsm_output[0]);
  assign mux_820_nl = MUX_s_1_2_2(mux_819_nl, nor_tmp_182, fsm_output[3]);
  assign mux_821_nl = MUX_s_1_2_2(or_tmp_927, (~ mux_820_nl), and_855_cse);
  assign or_1141_nl = (~ (fsm_output[0])) | (fsm_output[6]) | (~ (fsm_output[7]))
      | (fsm_output[5]);
  assign mux_816_nl = MUX_s_1_2_2((~ nor_tmp_182), or_1141_nl, fsm_output[3]);
  assign or_1139_nl = (fsm_output[7:5]!=3'b100);
  assign mux_815_nl = MUX_s_1_2_2(or_tmp_927, or_1139_nl, fsm_output[3]);
  assign mux_817_nl = MUX_s_1_2_2(mux_816_nl, mux_815_nl, or_1326_cse);
  assign mux_822_nl = MUX_s_1_2_2(mux_821_nl, mux_817_nl, fsm_output[4]);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_acc_13_psp  = conv_s2u_38_41(LINEAR_FORWARD_NO_MUL_LOOP_2_acc_12_sdt_mx0w1[52:15])
      + conv_s2u_40_41(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_2_nl = and_dcpl_285 | and_dcpl_309;
  assign and_710_nl = (~ mux_946_itm) & (~((fsm_output[0]) | (fsm_output[6]))) &
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0c1;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_1_or_2_nl = (and_dcpl_171 & and_dcpl_125 &
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_mx0c1) | and_dcpl_268;
  assign nor_597_nl = ~((~ (fsm_output[5])) | (fsm_output[0]) | (fsm_output[2]) |
      (~ (fsm_output[4])));
  assign mux_950_nl = MUX_s_1_2_2(and_745_cse, or_1283_cse, fsm_output[0]);
  assign and_711_nl = (fsm_output[5]) & mux_950_nl;
  assign mux_949_nl = MUX_s_1_2_2(and_971_cse, (fsm_output[2]), fsm_output[5]);
  assign mux_951_nl = MUX_s_1_2_2(and_711_nl, mux_949_nl, fsm_output[3]);
  assign mux_952_nl = MUX_s_1_2_2(nor_597_nl, mux_951_nl, fsm_output[1]);
  assign nor_598_nl = ~((fsm_output[5]) | (fsm_output[0]) | (fsm_output[2]) | (fsm_output[4]));
  assign or_1280_nl = (~ (fsm_output[2])) | (fsm_output[4]);
  assign or_1279_nl = (fsm_output[0]) | (fsm_output[2]) | (~ (fsm_output[4]));
  assign mux_947_nl = MUX_s_1_2_2(or_1280_nl, or_1279_nl, fsm_output[5]);
  assign nor_599_nl = ~((fsm_output[3]) | mux_947_nl);
  assign mux_948_nl = MUX_s_1_2_2(nor_598_nl, nor_599_nl, fsm_output[1]);
  assign mux_953_nl = MUX_s_1_2_2(mux_952_nl, mux_948_nl, fsm_output[6]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_or_5_nl = ((~ mux_946_itm) & nor_414_cse
      & and_dcpl_189 & LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_mx0c1) | ((~(mux_967_cse
      | or_tmp_496)) & and_dcpl_171 & and_dcpl_107);
  assign mux_962_nl = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[6]);
  assign nand_241_nl = ~((fsm_output[5]) & mux_962_nl);
  assign mux_963_nl = MUX_s_1_2_2(nand_241_nl, mux_967_cse, fsm_output[3]);
  assign or_1293_nl = (fsm_output[3]) | nand_242_cse;
  assign mux_964_nl = MUX_s_1_2_2(mux_963_nl, or_1293_nl, fsm_output[0]);
  assign mux_961_nl = MUX_s_1_2_2(or_tmp_1058, mux_tmp_956, fsm_output[0]);
  assign mux_965_nl = MUX_s_1_2_2(mux_964_nl, mux_961_nl, fsm_output[2]);
  assign mux_958_nl = MUX_s_1_2_2(or_705_cse, (~ (fsm_output[4])), fsm_output[5]);
  assign or_1292_nl = (fsm_output[3]) | mux_958_nl;
  assign mux_959_nl = MUX_s_1_2_2(or_1292_nl, or_tmp_1058, fsm_output[0]);
  assign mux_960_nl = MUX_s_1_2_2(mux_959_nl, mux_tmp_956, fsm_output[2]);
  assign mux_966_nl = MUX_s_1_2_2(mux_965_nl, mux_960_nl, fsm_output[1]);
  assign nor_582_nl = ~((~ (z_out_35[3])) | (fsm_output[4:3]!=2'b10));
  assign mux_919_nl = MUX_s_1_2_2(nor_581_cse, nor_582_nl, fsm_output[6]);
  assign nor_583_nl = ~((fsm_output[6]) | (~ CACHE_UPDATE_LOOP_1_and_cse) | (fsm_output[4:3]!=2'b00));
  assign mux_920_nl = MUX_s_1_2_2(mux_919_nl, nor_583_nl, fsm_output[2]);
  assign nor_584_nl = ~((fsm_output[2]) | (fsm_output[6]) | (~ CACHE_UPDATE_LOOP_1_and_cse)
      | (fsm_output[4:3]!=2'b10));
  assign mux_921_nl = MUX_s_1_2_2(mux_920_nl, nor_584_nl, fsm_output[1]);
  assign nor_585_nl = ~((~ (fsm_output[2])) | (fsm_output[6]) | (~ (fsm_output[3]))
      | (fsm_output[4]));
  assign and_969_nl = (fsm_output[6]) & (z_out_35[3]) & (fsm_output[4:3]==2'b01);
  assign nor_586_nl = ~((fsm_output[6]) | (~ (z_out_35[3])) | (fsm_output[4:3]!=2'b10));
  assign mux_917_nl = MUX_s_1_2_2(and_969_nl, nor_586_nl, fsm_output[2]);
  assign mux_918_nl = MUX_s_1_2_2(nor_585_nl, mux_917_nl, fsm_output[1]);
  assign mux_922_nl = MUX_s_1_2_2(mux_921_nl, mux_918_nl, fsm_output[0]);
  assign nor_587_nl = ~((fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[2])) |
      (~ (fsm_output[6])) | (~ (z_out_35[3])) | (fsm_output[4:3]!=2'b01));
  assign mux_923_nl = MUX_s_1_2_2(mux_922_nl, nor_587_nl, fsm_output[5]);
  assign mux_938_nl = MUX_s_1_2_2(and_929_cse, mux_tmp_260, fsm_output[1]);
  assign mux_939_nl = MUX_s_1_2_2(nor_tmp_88, mux_938_nl, fsm_output[2]);
  assign mux_940_nl = MUX_s_1_2_2(mux_939_nl, (~ and_929_cse), fsm_output[5]);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_244_psp  = conv_u2u_1_4(z_out_25[3]) + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_245_psp  = conv_u2u_1_4(z_out_34[6]) + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_247_psp  = conv_u2u_1_4(GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_mx0w2[7])
      + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_248_psp  = conv_u2u_1_4(GEMM_3D_FLOAT_LOOP_4_acc_191_sdt_1[6])
      + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_251_psp  = conv_u2u_1_4(z_out_15[3]) + conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0);
  assign SF_LOOP_3_mux_70_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35:34]),
      and_995_cse);
  assign SF_LOOP_3_mux_71_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      ({{1{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}),
      and_995_cse);
  assign SF_LOOP_3_mux_72_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21:20]),
      and_995_cse);
  assign SF_LOOP_3_SF_LOOP_3_and_10_nl = MUX_v_4_2_2(4'b0000, (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19:16]),
      and_995_cse);
  assign SF_LOOP_3_mux_73_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[15]),
      and_995_cse);
  assign SF_LOOP_3_SF_LOOP_3_and_11_nl = (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[37])
      & (~ and_995_cse);
  assign SF_LOOP_3_SF_LOOP_3_and_12_nl = reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
      & and_995_cse;
  assign SF_LOOP_3_mux_74_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20])),
      and_995_cse);
  assign SF_LOOP_3_mux_75_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[11:10]),
      and_995_cse);
  assign SF_LOOP_3_mux_76_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[15:14]),
      and_995_cse);
  assign SF_LOOP_3_mux_77_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[13:12]),
      and_995_cse);
  assign SF_LOOP_3_SF_LOOP_3_and_13_nl = MUX_v_8_2_2(8'b00000000, (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[11:4]),
      and_995_cse);
  assign SF_LOOP_3_mux_78_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[3:2]),
      and_995_cse);
  assign SF_LOOP_3_mux_79_nl = MUX_v_2_2_2(2'b01, (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[1:0]),
      and_995_cse);
  assign not_3341_nl = ~ and_995_cse;
  assign SF_LOOP_3_SF_LOOP_3_or_38_nl = MUX_v_8_2_2((SF_LOOP_3_acc_56_itm[34:27]),
      8'b11111111, not_3341_nl);
  assign SF_LOOP_3_mux_80_nl = MUX_v_2_2_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      (SF_LOOP_3_acc_56_itm[26:25]), and_995_cse);
  assign not_3342_nl = ~ and_995_cse;
  assign SF_LOOP_3_SF_LOOP_3_or_39_nl = MUX_v_2_2_2((SF_LOOP_3_acc_56_itm[24:23]),
      2'b11, not_3342_nl);
  assign SF_LOOP_3_mux_81_nl = MUX_v_2_2_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      (SF_LOOP_3_acc_56_itm[22:21]), and_995_cse);
  assign not_3343_nl = ~ and_995_cse;
  assign SF_LOOP_3_SF_LOOP_3_or_40_nl = MUX_v_10_2_2((SF_LOOP_3_acc_56_itm[20:11]),
      10'b1111111111, not_3343_nl);
  assign SF_LOOP_3_mux_82_nl = MUX_v_2_2_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      (SF_LOOP_3_acc_56_itm[10:9]), and_995_cse);
  assign SF_LOOP_3_mux_83_nl = MUX_v_2_2_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      (SF_LOOP_3_acc_56_itm[8:7]), and_995_cse);
  assign SF_LOOP_3_SF_LOOP_3_or_41_nl = (SF_LOOP_3_acc_56_itm[6]) | (~ and_995_cse);
  assign SF_LOOP_3_mux_84_nl = MUX_v_2_2_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      (SF_LOOP_3_acc_56_itm[5:4]), and_995_cse);
  assign not_3345_nl = ~ and_995_cse;
  assign SF_LOOP_3_SF_LOOP_3_or_42_nl = MUX_v_2_2_2((SF_LOOP_3_acc_56_itm[3:2]),
      2'b11, not_3345_nl);
  assign SF_LOOP_3_mux_85_nl = MUX_v_2_2_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      (SF_LOOP_3_acc_56_itm[1:0]), and_995_cse);
  assign nl_z_out = conv_u2u_36_38({SF_LOOP_3_mux_70_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_2_cse_1
      , SF_LOOP_3_mux_71_nl , SF_LOOP_3_mux_72_nl , SF_LOOP_3_SF_LOOP_3_and_10_nl
      , SF_LOOP_3_mux_73_nl , SF_LOOP_3_SF_LOOP_3_and_11_nl , SF_LOOP_3_SF_LOOP_3_and_12_nl
      , 1'b0 , SF_LOOP_3_mux_74_nl , SF_LOOP_3_mux_75_nl , 1'b0 , SF_LOOP_3_mux_76_nl
      , SF_LOOP_3_mux_77_nl , SF_LOOP_3_SF_LOOP_3_and_13_nl , SF_LOOP_3_mux_78_nl
      , SF_LOOP_3_mux_79_nl}) + conv_s2u_35_38({SF_LOOP_3_SF_LOOP_3_or_38_nl , SF_LOOP_3_mux_80_nl
      , SF_LOOP_3_SF_LOOP_3_or_39_nl , SF_LOOP_3_mux_81_nl , SF_LOOP_3_SF_LOOP_3_or_40_nl
      , SF_LOOP_3_mux_82_nl , SF_LOOP_3_mux_83_nl , SF_LOOP_3_SF_LOOP_3_or_41_nl
      , SF_LOOP_3_mux_84_nl , SF_LOOP_3_SF_LOOP_3_or_42_nl , SF_LOOP_3_mux_85_nl});
  assign z_out = nl_z_out[37:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_18_nl
      = MUX_v_8_2_2(8'b00000000, (SF_LOOP_3_acc_32_itm[21:14]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_126_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]),
      (SF_LOOP_3_acc_32_itm[13]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_19_nl
      = (SF_LOOP_3_acc_32_itm[12]) & and_dcpl_728;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_127_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]),
      (SF_LOOP_3_acc_32_itm[11]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_20_nl
      = (SF_LOOP_3_acc_32_itm[10]) & and_dcpl_728;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_128_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]),
      (SF_LOOP_3_acc_32_itm[9]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_21_nl
      = (SF_LOOP_3_acc_32_itm[8]) & and_dcpl_728;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_129_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]),
      (SF_LOOP_3_acc_32_itm[7]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_22_nl
      = (SF_LOOP_3_acc_32_itm[6]) & and_dcpl_728;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_130_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]),
      (SF_LOOP_3_acc_32_itm[5]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_23_nl
      = (SF_LOOP_3_acc_32_itm[4]) & and_dcpl_728;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_131_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[22]),
      (SF_LOOP_3_acc_32_itm[3]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_24_nl
      = (SF_LOOP_3_acc_32_itm[2]) & and_dcpl_728;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_132_nl = MUX_v_2_2_2((signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18])),
      (SF_LOOP_3_acc_32_itm[1:0]), and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_133_nl = MUX_v_21_2_2((signext_21_12(exs_tmp_1_12_0[12:1])),
      21'b100000000000000001100, and_dcpl_728);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_134_nl = MUX_s_1_2_2((exs_tmp_1_12_0[0]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[22]), and_dcpl_728);
  assign nl_z_out_2 = ({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_18_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_126_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_19_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_127_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_20_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_128_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_21_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_129_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_22_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_130_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_23_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_131_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_24_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_132_nl}) + ({operator_40_24_true_AC_TRN_AC_WRAP_mux_133_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_134_nl});
  assign z_out_2 = nl_z_out_2[21:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_99_nl = conv_u2s_20_21({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]))})
      + conv_s2s_19_21({SF_LOOP_3_acc_38_itm_18 , reg_SF_LOOP_3_acc_38_1_ftd , reg_SF_LOOP_3_acc_38_1_ftd_1
      , reg_SF_LOOP_3_acc_38_1_ftd_2});
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_99_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_99_nl[20:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_98_nl = conv_u2s_22_23({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[26]))})
      + conv_s2s_21_23(operator_40_24_true_AC_TRN_AC_WRAP_acc_99_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_98_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_98_nl[22:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_97_nl = conv_u2s_24_25({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28]))})
      + conv_s2s_23_25(operator_40_24_true_AC_TRN_AC_WRAP_acc_98_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_97_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_97_nl[24:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_96_nl = conv_u2s_26_27({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30]))})
      + conv_s2s_25_27(operator_40_24_true_AC_TRN_AC_WRAP_acc_97_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_96_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_96_nl[26:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_95_nl = conv_u2s_28_29({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32]))})
      + conv_s2s_27_29(operator_40_24_true_AC_TRN_AC_WRAP_acc_96_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_95_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_95_nl[28:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_94_nl = conv_u2s_30_31({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[2])
      , 1'b0 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34]))})
      + conv_s2s_29_31(operator_40_24_true_AC_TRN_AC_WRAP_acc_95_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_94_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_94_nl[30:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_12_nl = MUX1HOT_v_31_3_2((signext_31_23(z_out_10[39:17])),
      operator_40_24_true_AC_TRN_AC_WRAP_acc_94_nl, attention_abs_4_qif_acc_pmx_lpi_1_dfm,
      {and_1159_cse , and_1055_cse , and_dcpl_763});
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_2_nl = and_1055_cse | and_dcpl_763;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_2_nl
      = MUX_v_30_2_2((signext_30_21({z_out_31 , (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[15:0])})),
      z_out_56, operator_40_24_true_AC_TRN_AC_WRAP_or_2_nl);
  assign nl_z_out_4 = conv_s2u_31_32(operator_40_24_true_AC_TRN_AC_WRAP_mux1h_12_nl)
      + conv_s2u_30_32(operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_2_nl);
  assign z_out_4 = nl_z_out_4[31:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux_20_nl = MUX_s_1_2_2((~ reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd),
      (~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2])), and_1076_cse);
  assign nl_acc_5_nl = conv_u2u_8_9({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[15])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[15])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[15])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[15])
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux_20_nl}) + conv_s2u_7_9({z_out_22
      , 1'b1});
  assign acc_5_nl = nl_acc_5_nl[8:0];
  assign z_out_5 = readslicef_9_8_1(acc_5_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_13_nl
      = (attention_sqrt_1_for_i_4_0_sva_2_0[2]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_6_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_13_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[17]),
      (attention_sqrt_1_for_i_4_0_sva_2_0[1]), operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_14_nl
      = (attention_sqrt_1_for_i_4_0_sva_2_0[0]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_6_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_14_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[17]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3]), operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_15_nl
      = (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[2]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_6_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_15_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[17]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[1]), operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_16_nl
      = (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_6_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_39_nl = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3])
      & (~ (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1[1])) & APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_18_nl = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3])
      & (~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_4_psp_sva_1[1])) & operator_40_24_true_AC_TRN_AC_WRAP_or_mx0w6;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux_21_nl = MUX_s_1_2_2(operator_40_24_true_AC_TRN_AC_WRAP_2_and_39_nl,
      operator_40_24_true_AC_TRN_AC_WRAP_and_18_nl, and_dcpl_795);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_38_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux_21_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_5_itm;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_3_nl
      = (z_out_5[7]) & (~ operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_mux_4_nl = MUX_v_2_2_2((SF_LOOP_3_acc_45_itm_8_0[8:7]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:7]), and_1425_cse);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_nl = ({attention_sqrt_1_for_i_4_0_sva_2_0
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt}) + conv_u2u_2_7(LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_mux_4_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_nl[6:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_16_nl
      = MUX_v_7_2_2((z_out_5[6:0]), LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_nl,
      operator_40_24_true_AC_TRN_AC_WRAP_2_or_36_cse);
  assign nl_acc_6_nl = conv_u2u_10_11({operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_1_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_13_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_13_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_14_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_14_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_15_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_15_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_16_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_1_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_38_nl}) + conv_s2u_9_11({operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_3_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_16_nl
      , 1'b1});
  assign acc_6_nl = nl_acc_6_nl[10:0];
  assign z_out_6 = readslicef_11_10_1(acc_6_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_17_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[19]),
      (exu_tmp_5_6_0[6]), and_dcpl_800);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_17_nl
      = (exu_tmp_5_6_0[5]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_11_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_18_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[19]),
      (exu_tmp_5_6_0[4]), and_dcpl_800);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_18_nl
      = (exu_tmp_5_6_0[3]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_11_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_19_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[19]),
      (exu_tmp_5_6_0[2]), and_dcpl_800);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_19_nl
      = (exu_tmp_5_6_0[1]) & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_11_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_20_nl
      = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[19]),
      (exu_tmp_5_6_0[0]), and_dcpl_800);
  assign not_3348_nl = ~ and_dcpl_800;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_4_nl
      = MUX_v_2_2_2(2'b00, (z_out_6[9:8]), not_3348_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_21_nl
      = MUX_v_3_2_2((z_out_6[7:5]), ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}), and_dcpl_800);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_22_nl
      = MUX_v_4_2_2((z_out_6[4:1]), GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva, and_dcpl_800);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_5_nl
      = (z_out_6[0]) & (~ and_dcpl_800);
  assign nl_z_out_7 = conv_u2u_11_12({operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_7_cse
      , 1'b0 , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_7_cse
      , 1'b0 , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_17_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_17_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_18_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_18_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_19_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_19_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_20_nl})
      + conv_s2u_10_12({operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_4_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_21_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_mux_22_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_5_nl});
  assign z_out_7 = nl_z_out_7[11:0];
  assign nl_z_out_8 = (z_out_10[55:32]) + conv_s2u_1_24(~ (z_out_10[31]));
  assign z_out_8 = nl_z_out_8[23:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_89_nl = MUX1HOT_v_14_3_2((attention_exp_exp_half_mul_4_cse_sva_1[59:46]),
      (signext_14_4(z_out_4[31:28])), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:26])),
      {and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign not_3350_nl = ~ and_dcpl_856;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_40_nl = MUX_v_14_2_2(14'b00000000000000,
      operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_89_nl, not_3350_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_90_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[45]), (z_out_4[27]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[25])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_91_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[44]),
      (z_out_4[26]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[24])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_41_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_91_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_92_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[43]), (z_out_4[25]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[23])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_93_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[42]),
      (z_out_4[24]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[22])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_42_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_93_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_94_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[41]), (z_out_4[23]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[21])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_95_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[40]),
      (z_out_4[22]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[20])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_43_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_95_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_96_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[39]), (z_out_4[21]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[19])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_97_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[38]),
      (z_out_4[20]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[18])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_44_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_97_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_98_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[37]), (z_out_4[19]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[17])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_99_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[36]),
      (z_out_4[18]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[16])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_45_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_99_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_100_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[35]), (z_out_4[17]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[15])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_101_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[34]),
      (z_out_4[16]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[14])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_46_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_101_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_102_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[33]), (z_out_4[15]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[13])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_103_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[32]),
      (z_out_4[14]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[12])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_47_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_103_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_104_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[31]), (z_out_4[13]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[11])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_105_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[30]),
      (z_out_4[12]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[10])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_48_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_105_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_106_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[29]), (z_out_4[11]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[9])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_107_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[28]),
      (z_out_4[10]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[8])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_49_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_107_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_108_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[27]), (z_out_4[9]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[7])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_109_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[26]),
      (z_out_4[8]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[6])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_50_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_109_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_110_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[25]), (z_out_4[7]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[5])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_111_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[24]),
      (z_out_4[6]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[4])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_51_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_111_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_112_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[23]), (z_out_4[5]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[3])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_113_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[22]),
      (z_out_4[4]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[2])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_52_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_113_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_114_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0]),
      (attention_exp_exp_half_mul_4_cse_sva_1[21]), (z_out_4[3]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[1])),
      {and_dcpl_856 , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc
      , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_115_nl = MUX1HOT_s_1_3_2((attention_exp_exp_half_mul_4_cse_sva_1[20]),
      (z_out_4[2]), (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[0])), {and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_53_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_115_nl
      & (~ and_dcpl_856);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_116_nl = MUX1HOT_v_2_4_2((signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])),
      (attention_exp_exp_half_mul_4_cse_sva_1[19:18]), (z_out_4[1:0]), 2'b01, {and_dcpl_856
      , and_1159_cse , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_117_nl = MUX1HOT_v_9_4_2((signext_9_1(exs_tmp_4_26_0[26])),
      (z_out_4[23:15]), (signext_9_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3])),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[39:31]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_118_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[26]),
      (z_out_4[14]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[30]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_54_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_118_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_119_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[26]),
      (z_out_4[13]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[29]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_120_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[26]),
      (z_out_4[12]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[28]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_55_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_120_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_121_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[26]),
      (z_out_4[11]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[27]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_122_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[26]),
      (z_out_4[10]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[26]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_56_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_122_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_123_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[25]),
      (z_out_4[9]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[25]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_124_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[24]),
      (z_out_4[8]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[24]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_57_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_124_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_125_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[23]),
      (z_out_4[7]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[23]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_126_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[22]),
      (z_out_4[6]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[22]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_58_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_126_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_127_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[21]),
      (z_out_4[5]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[21]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_128_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[20]),
      (z_out_4[4]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[20]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_59_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_128_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_129_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[19]),
      (z_out_4[3]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[19]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_130_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[18]),
      (z_out_4[2]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[18]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_60_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_130_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_131_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[17]),
      (z_out_4[1]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[17]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_132_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[16]),
      (z_out_4[0]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[16]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_61_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_132_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_133_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[15]),
      (z_out_10[16]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[15]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_134_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[14]),
      (z_out_10[15]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[14]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_62_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_134_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_135_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[13]),
      (z_out_10[14]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[13]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_136_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[12]),
      (z_out_10[13]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[12]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_63_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_136_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_137_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[11]),
      (z_out_10[12]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[11]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_138_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[10]),
      (z_out_10[11]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[10]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_64_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_138_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_139_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[9]),
      (z_out_10[10]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[9]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_140_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[8]),
      (z_out_10[9]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[8]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_65_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_140_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_141_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[7]),
      (z_out_10[8]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[7]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_142_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[6]),
      (z_out_10[7]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[6]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_66_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_142_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_143_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[5]),
      (z_out_10[6]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[5]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_144_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[4]),
      (z_out_10[5]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[4]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_67_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_144_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_145_nl = MUX1HOT_s_1_4_2((exs_tmp_4_26_0[3]),
      (z_out_10[4]), (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[3]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[3]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_146_nl = MUX1HOT_s_1_3_2((exs_tmp_4_26_0[2]),
      (z_out_10[3]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[2]), {and_dcpl_856
      , and_1159_cse , and_dcpl_874});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_68_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_146_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_14_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_147_nl = MUX1HOT_v_2_4_2((exs_tmp_4_26_0[1:0]),
      (z_out_10[2:1]), (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_11_itm[1:0]), {and_dcpl_856 , and_1159_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_4_ssc , and_dcpl_874});
  assign nl_z_out_9 = conv_s2u_42_43({operator_40_24_true_AC_TRN_AC_WRAP_2_and_40_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_90_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_41_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_92_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_42_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_94_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_43_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_96_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_44_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_98_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_45_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_100_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_46_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_102_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_47_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_104_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_48_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_106_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_49_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_108_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_50_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_110_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_51_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_112_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_52_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_114_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_53_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_116_nl}) + conv_s2u_40_43({operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_117_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_54_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_119_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_55_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_121_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_56_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_123_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_57_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_125_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_58_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_127_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_59_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_129_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_60_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_131_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_61_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_133_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_62_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_135_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_63_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_137_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_64_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_139_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_65_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_141_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_66_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_143_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_67_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_145_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_68_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_147_nl});
  assign z_out_9 = nl_z_out_9[42:0];
  assign RMS_NORM_LOOP_1_2_mux1h_8_nl = MUX1HOT_v_9_5_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[39:31]),
      ({reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd
      , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35:31])}),
      (input_rsci_data_out_d[39:31]), (signext_9_1(SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[19])),
      (attention_5_1_384_384_8_48_q_proj_rsci_data_out_d[39:31]), {RMS_NORM_LOOP_1_2_or_itm
      , RMS_NORM_LOOP_1_2_or_1_itm , RMS_NORM_LOOP_1_2_or_2_itm , and_dcpl_905 ,
      and_dcpl_922});
  assign not_3364_nl = ~ and_1208_cse;
  assign RMS_NORM_LOOP_1_2_and_5_nl = MUX_v_9_2_2(9'b000000000, RMS_NORM_LOOP_1_2_mux1h_8_nl,
      not_3364_nl);
  assign RMS_NORM_LOOP_1_2_mux1h_9_nl = MUX1HOT_v_31_6_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[30:0]),
      (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[30:0]),
      (input_rsci_data_out_d[30:0]), ({{11{SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[19]}},
      SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1}), attention_abs_4_qif_acc_pmx_lpi_1_dfm,
      (attention_5_1_384_384_8_48_q_proj_rsci_data_out_d[30:0]), {RMS_NORM_LOOP_1_2_or_itm
      , RMS_NORM_LOOP_1_2_or_1_itm , RMS_NORM_LOOP_1_2_or_2_itm , and_dcpl_905 ,
      and_1208_cse , and_dcpl_922});
  assign RMS_NORM_LOOP_1_2_mux1h_10_nl = MUX1HOT_v_35_7_2((signext_35_23(attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[39:17])),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[51:17]), (signext_35_3(SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[19:17])),
      ({{34{reg_SF_LOOP_3_acc_38_1_ftd}}, reg_SF_LOOP_3_acc_38_1_ftd}), (signext_35_23(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:17])),
      (signext_35_1(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1[4])), (signext_35_23(LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[39:17])),
      {and_dcpl_885 , and_dcpl_901 , and_dcpl_905 , and_1208_cse , attention_max_attn_fixed_t_or_cse_1
      , and_dcpl_922 , and_dcpl_924});
  assign RMS_NORM_LOOP_1_2_and_6_nl = MUX_v_35_2_2(35'b00000000000000000000000000000000000,
      RMS_NORM_LOOP_1_2_mux1h_10_nl, RMS_NORM_LOOP_1_2_nor_seb);
  assign RMS_NORM_LOOP_1_2_mux1h_11_nl = MUX1HOT_s_1_7_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[16]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[16]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[16]),
      (reg_SF_LOOP_3_acc_38_1_ftd_1[7]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[16]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1[4]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[16]),
      {and_dcpl_885 , and_dcpl_901 , and_dcpl_905 , and_1208_cse , attention_max_attn_fixed_t_or_cse_1
      , and_dcpl_922 , and_dcpl_924});
  assign RMS_NORM_LOOP_1_2_and_7_nl = RMS_NORM_LOOP_1_2_mux1h_11_nl & RMS_NORM_LOOP_1_2_nor_seb;
  assign RMS_NORM_LOOP_1_2_mux1h_12_nl = MUX1HOT_v_3_7_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[15:13]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[15:13]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[15:13]),
      (reg_SF_LOOP_3_acc_38_1_ftd_1[6:4]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[15:13]),
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1[3:1]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[15:13]),
      {and_dcpl_885 , and_dcpl_901 , and_dcpl_905 , and_1208_cse , attention_max_attn_fixed_t_or_cse_1
      , and_dcpl_922 , and_dcpl_924});
  assign RMS_NORM_LOOP_1_2_and_8_nl = MUX_v_3_2_2(3'b000, RMS_NORM_LOOP_1_2_mux1h_12_nl,
      RMS_NORM_LOOP_1_2_nor_seb);
  assign RMS_NORM_LOOP_1_2_mux1h_13_nl = MUX1HOT_s_1_8_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[12]),
      (RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm[12]), (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[12]),
      (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[12]), (reg_SF_LOOP_3_acc_38_1_ftd_1[3]),
      (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[12]), (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[12]), {and_dcpl_885 , and_dcpl_893
      , and_dcpl_901 , and_dcpl_905 , and_1208_cse , attention_max_attn_fixed_t_or_cse_1
      , and_dcpl_922 , and_dcpl_924});
  assign RMS_NORM_LOOP_1_2_and_9_nl = RMS_NORM_LOOP_1_2_mux1h_13_nl & (~ and_dcpl_898);
  assign RMS_NORM_LOOP_1_2_mux1h_14_nl = MUX1HOT_v_3_9_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[11:9]),
      (RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm[11:9]), (RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm[11:9]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[11:9]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[11:9]),
      (reg_SF_LOOP_3_acc_38_1_ftd_1[2:0]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[11:9]),
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2, (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[11:9]),
      {and_dcpl_885 , and_dcpl_893 , and_dcpl_898 , and_dcpl_901 , and_dcpl_905 ,
      and_1208_cse , attention_max_attn_fixed_t_or_cse_1 , and_dcpl_922 , and_dcpl_924});
  assign RMS_NORM_LOOP_1_2_mux1h_15_nl = MUX1HOT_v_9_9_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[8:0]),
      (RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm[8:0]), (RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm[8:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_8_sdt_51_0[8:0]), (SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[8:0]),
      reg_SF_LOOP_3_acc_38_1_ftd_2, (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[8:0]),
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3, (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[8:0]),
      {and_dcpl_885 , and_dcpl_893 , and_dcpl_898 , and_dcpl_901 , and_dcpl_905 ,
      and_1208_cse , attention_max_attn_fixed_t_or_cse_1 , and_dcpl_922 , and_dcpl_924});
  assign nl_z_out_10 = $signed(({RMS_NORM_LOOP_1_2_and_5_nl , RMS_NORM_LOOP_1_2_mux1h_9_nl}))
      * $signed(({RMS_NORM_LOOP_1_2_and_6_nl , RMS_NORM_LOOP_1_2_and_7_nl , RMS_NORM_LOOP_1_2_and_8_nl
      , RMS_NORM_LOOP_1_2_and_9_nl , RMS_NORM_LOOP_1_2_mux1h_14_nl , RMS_NORM_LOOP_1_2_mux1h_15_nl}));
  assign z_out_10 = nl_z_out_10[67:0];
  assign RMS_NORM_LOOP_1_1_or_10_nl = and_dcpl_940 | and_dcpl_944;
  assign RMS_NORM_LOOP_1_1_mux1h_10_nl = MUX1HOT_v_40_6_2(({{10{strm_in_rsci_idat_mxwt[29]}},
      strm_in_rsci_idat_mxwt}), (signext_40_20({reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd
      , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1 , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2
      , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3})), ({{10{attention_sqrt_1_guess_sva_29_0[29]}},
      attention_sqrt_1_guess_sva_29_0}), (attention_5_1_384_384_8_48_q_embed_rsci_data_out_d[39:0]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39:0]), (attention_5_1_384_384_8_48_k_proj_rsci_data_out_d[39:0]),
      {and_dcpl_932 , RMS_NORM_LOOP_1_1_or_10_nl , and_dcpl_946 , and_dcpl_947 ,
      and_dcpl_950 , and_dcpl_955});
  assign RMS_NORM_LOOP_1_1_mux1h_11_nl = MUX1HOT_v_80_7_2(({{50{strm_in_rsci_idat_mxwt[29]}},
      strm_in_rsci_idat_mxwt}), attention_exp_exp_half_mul_3_cse_sva, (signext_80_60({operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_59_57
      , operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0})), ({{50{attention_sqrt_1_guess_sva_29_0[29]}},
      attention_sqrt_1_guess_sva_29_0}), (signext_80_40(attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d[39:0])),
      (signext_80_40(attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d[39:0])),
      (signext_80_17({reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1 , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2
      , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3})), {and_dcpl_932 , and_dcpl_940
      , and_dcpl_944 , and_dcpl_946 , and_dcpl_947 , and_dcpl_950 , and_dcpl_955});
  assign nl_z_out_11 = $signed(RMS_NORM_LOOP_1_1_mux1h_10_nl) * $signed(RMS_NORM_LOOP_1_1_mux1h_11_nl);
  assign z_out_11 = nl_z_out_11[99:0];
  assign attention_abs_2_qif_mux1h_2_nl = MUX1HOT_v_24_5_2((~ (z_out_10[66:43])),
      (~ (RMS_NORM_LOOP_2_2_mul_itm_71_32_1[38:15])), (~ reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1),
      (~ (input_rsci_data_out_d[38:15])), (~ (attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[38:15])),
      {and_dcpl_963 , and_dcpl_970 , and_dcpl_973 , and_dcpl_976 , and_dcpl_978});
  assign attention_abs_2_qif_mux1h_3_nl = MUX1HOT_v_15_5_2((~ (z_out_10[42:28])),
      (~ (RMS_NORM_LOOP_2_2_mul_itm_71_32_1[14:0])), (~ reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2),
      (~ (input_rsci_data_out_d[14:0])), (~ (attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d[14:0])),
      {and_dcpl_963 , and_dcpl_970 , and_dcpl_973 , and_dcpl_976 , and_dcpl_978});
  assign nl_z_out_12 = conv_u2u_39_40({attention_abs_2_qif_mux1h_2_nl , attention_abs_2_qif_mux1h_3_nl})
      + 40'b0000000000000000000000000000000000000001;
  assign z_out_12 = nl_z_out_12[39:0];
  assign CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_3_nl = MUX_v_3_2_2(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}),
      CACHE_UPDATE_LOOP_3_1_or_6_cse_1);
  assign CACHE_UPDATE_LOOP_3_1_or_7_nl = (~(and_1298_cse | and_1304_cse | and_1305_cse
      | and_1315_cse | and_1318_cse)) | and_1312_cse;
  assign CACHE_UPDATE_LOOP_3_1_mux1h_9_nl = MUX1HOT_s_1_4_2((z_out_32[4]), (TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7[8]),
      (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd[1]), (z_out_21[2]), {and_1298_cse
      , and_1304_cse , and_1305_cse , and_1315_cse});
  assign CACHE_UPDATE_LOOP_3_1_or_8_nl = CACHE_UPDATE_LOOP_3_1_mux1h_9_nl | and_1312_cse
      | and_1318_cse;
  assign CACHE_UPDATE_LOOP_3_1_mux1h_10_nl = MUX1HOT_s_1_5_2((z_out_32[3]), (TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w7[7]),
      (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd[0]), (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[1]),
      (z_out_21[1]), {and_1298_cse , and_1304_cse , and_1305_cse , and_1312_cse ,
      and_1315_cse});
  assign CACHE_UPDATE_LOOP_3_1_or_9_nl = CACHE_UPDATE_LOOP_3_1_mux1h_10_nl | and_1318_cse;
  assign nl_acc_12_nl = conv_u2u_4_5({CACHE_UPDATE_LOOP_3_1_CACHE_UPDATE_LOOP_3_1_mux_3_nl
      , CACHE_UPDATE_LOOP_3_1_or_7_nl}) + conv_u2u_3_5({CACHE_UPDATE_LOOP_3_1_or_8_nl
      , CACHE_UPDATE_LOOP_3_1_or_9_nl , 1'b1});
  assign acc_12_nl = nl_acc_12_nl[4:0];
  assign z_out_14 = readslicef_5_4_1(acc_12_nl);
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_6_nl = MUX_v_3_2_2(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}),
      and_1333_cse);
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_and_2_nl = (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[1])
      & (~(and_dcpl_1029 | and_1338_cse));
  assign GEMM_3D_FLOAT_LOOP_4_1_mux1h_30_nl = MUX1HOT_s_1_3_2((CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[1]),
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[0]), (z_out_32[4]), {and_dcpl_1029 , and_1333_cse
      , and_1338_cse});
  assign nl_z_out_15 = conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mux_6_nl)
      + conv_u2u_2_4({GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_and_2_nl , GEMM_3D_FLOAT_LOOP_4_1_mux1h_30_nl});
  assign z_out_15 = nl_z_out_15[3:0];
  assign CACHE_UPDATE_LOOP_3_or_4_nl = and_1358_cse | and_1304_cse;
  assign CACHE_UPDATE_LOOP_3_mux1h_7_nl = MUX1HOT_v_3_3_2(({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}), GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      (signext_3_1(z_out_2[21])), {and_1333_cse , CACHE_UPDATE_LOOP_3_or_4_nl , and_1360_cse});
  assign CACHE_UPDATE_LOOP_3_or_3_nl = MUX_v_3_2_2(CACHE_UPDATE_LOOP_3_mux1h_7_nl,
      3'b111, and_1318_cse);
  assign CACHE_UPDATE_LOOP_3_mux1h_8_nl = MUX1HOT_v_2_5_2((z_out_22[4:3]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd,
      (GEMM_3D_FLOAT_LOOP_4_1_acc_36_sdt_mx0w5[5:4]), (z_out_2[19:18]), (z_out_32[4:3]),
      {and_1333_cse , and_1318_cse , and_1358_cse , and_1360_cse , and_1304_cse});
  assign nl_z_out_16 = conv_u2u_3_4(CACHE_UPDATE_LOOP_3_or_3_nl) + conv_u2u_2_4(CACHE_UPDATE_LOOP_3_mux1h_8_nl);
  assign z_out_16 = nl_z_out_16[3:0];
  assign GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_or_2_nl = (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2])
      | and_dcpl_1080 | and_dcpl_1084 | and_1388_cse;
  assign GEMM_3D_FLOAT_LOOP_4_or_25_nl = and_dcpl_1075 | and_1312_cse;
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_42_nl = MUX1HOT_v_2_4_2((GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[1:0]),
      (z_out_32[8:7]), (z_out_32[2:1]), (attention_sqrt_for_i_4_0_sva_1_mx0w0[4:3]),
      {GEMM_3D_FLOAT_LOOP_4_or_25_nl , and_dcpl_1080 , and_dcpl_1084 , and_1388_cse});
  assign or_1577_nl = and_1388_cse | and_dcpl_1084 | and_dcpl_1080 | and_dcpl_1075;
  assign mux_1087_nl = MUX_v_2_2_2((z_out_27[2:1]), 2'b01, or_1577_nl);
  assign nl_z_out_17 = conv_u2u_3_4({GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_or_2_nl
      , GEMM_3D_FLOAT_LOOP_4_mux1h_42_nl}) + conv_u2u_2_4(mux_1087_nl);
  assign z_out_17 = nl_z_out_17[3:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_22_nl = and_dcpl_1097 | and_dcpl_1103
      | and_dcpl_1105 | and_dcpl_1112;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_4_nl
      = MUX_v_3_2_2(z_out_19, GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0, operator_40_24_true_AC_TRN_AC_WRAP_or_22_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nor_2_nl
      = ~((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[0])
      | and_dcpl_1097 | and_dcpl_1103 | and_dcpl_1105 | and_dcpl_1112);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_104_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[9])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[10]))
      + conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_104_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_104_nl[1:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_33_nl = MUX1HOT_v_2_5_2(operator_40_24_true_AC_TRN_AC_WRAP_acc_104_nl,
      CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4, reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd,
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd, (attention_sqrt_1_for_i_4_0_sva_2_0[2:1]),
      {nor_721_cse , and_dcpl_1097 , and_dcpl_1103 , and_dcpl_1105 , and_dcpl_1112});
  assign nl_acc_16_nl = conv_u2u_4_5({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_4_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nor_2_nl})
      + conv_u2u_3_5({operator_40_24_true_AC_TRN_AC_WRAP_mux1h_33_nl , 1'b1});
  assign acc_16_nl = nl_acc_16_nl[4:0];
  assign z_out_18 = readslicef_5_4_1(acc_16_nl);
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_43_nl = MUX1HOT_s_1_3_2((LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1[1]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm[1]), (LINEAR_FORWARD_NO_MUL_LOOP_5_2_l_2_0_lpi_3_dfm_1_0_1[1]),
      {and_1425_cse , nor_721_cse , and_dcpl_1136});
  assign GEMM_3D_FLOAT_LOOP_4_or_26_nl = GEMM_3D_FLOAT_LOOP_4_mux1h_43_nl | and_1417_cse;
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_44_nl = MUX1HOT_s_1_4_2((reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1]),
      (LINEAR_FORWARD_NO_MUL_LOOP_5_3_l_2_0_lpi_3_dfm_1_0_1[0]), (operator_40_24_true_AC_TRN_AC_WRAP_acc_56_itm[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_5_2_l_2_0_lpi_3_dfm_1_0_1[0]), {and_1417_cse ,
      and_1425_cse , nor_721_cse , and_dcpl_1136});
  assign GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_nor_1_nl = ~((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[32])
      | and_1417_cse | and_1425_cse | and_dcpl_1136);
  assign GEMM_3D_FLOAT_LOOP_4_or_27_nl = (~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[8]))
      | and_1417_cse | and_1425_cse | and_dcpl_1136;
  assign nl_acc_17_nl = conv_u2u_3_4({GEMM_3D_FLOAT_LOOP_4_or_26_nl , GEMM_3D_FLOAT_LOOP_4_mux1h_44_nl
      , GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_nor_1_nl}) + conv_u2u_2_4({GEMM_3D_FLOAT_LOOP_4_or_27_nl
      , 1'b1});
  assign acc_17_nl = nl_acc_17_nl[3:0];
  assign z_out_19 = readslicef_4_3_1(acc_17_nl);
  assign RMS_NORM_LOOP_1_1_nor_5_nl = ~(and_1441_cse | and_1447_cse | and_dcpl_800);
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_5_nl = MUX_v_2_2_2(2'b00, (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:7]),
      RMS_NORM_LOOP_1_1_nor_5_nl);
  assign RMS_NORM_LOOP_1_1_mux1h_12_nl = MUX1HOT_v_4_3_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[6:3]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8]), 4'b1011, {not_tmp_754
      , and_1441_cse , and_1447_cse});
  assign not_3368_nl = ~ and_dcpl_800;
  assign RMS_NORM_LOOP_1_1_and_2_nl = MUX_v_4_2_2(4'b0000, RMS_NORM_LOOP_1_1_mux1h_12_nl,
      not_3368_nl);
  assign RMS_NORM_LOOP_1_1_mux_6_nl = MUX_s_1_2_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[2]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[36]), and_1441_cse);
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_or_1_nl = (RMS_NORM_LOOP_1_1_mux_6_nl
      & (~ and_dcpl_800)) | and_1447_cse;
  assign RMS_NORM_LOOP_1_1_mux1h_13_nl = MUX1HOT_v_2_4_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[1:0]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd,
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_l_2_0_lpi_3_dfm_1_0_1, {not_tmp_754 , and_1441_cse
      , and_1447_cse , and_dcpl_800});
  assign RMS_NORM_LOOP_1_1_or_11_nl = (~(not_tmp_754 | and_1441_cse | and_dcpl_800))
      | and_1447_cse;
  assign RMS_NORM_LOOP_1_1_mux_7_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]), and_1447_cse);
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_6_nl = MUX_v_2_2_2(2'b00, RMS_NORM_LOOP_1_1_mux_7_nl,
      RMS_NORM_LOOP_1_1_nor_1_cse);
  assign RMS_NORM_LOOP_1_1_mux_8_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[2]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]), and_1447_cse);
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_7_nl = RMS_NORM_LOOP_1_1_mux_8_nl
      & RMS_NORM_LOOP_1_1_nor_1_cse;
  assign RMS_NORM_LOOP_1_1_nor_7_nl = ~(not_tmp_754 | and_dcpl_800 | and_1447_cse);
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_8_nl = MUX_v_2_2_2(2'b00, (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[15:14]),
      RMS_NORM_LOOP_1_1_nor_7_nl);
  assign RMS_NORM_LOOP_1_1_mux_9_nl = MUX_v_2_2_2(2'b01, (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[16])),
      and_1441_cse);
  assign not_3370_nl = ~ and_1447_cse;
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_9_nl = MUX_v_2_2_2(2'b00, RMS_NORM_LOOP_1_1_mux_9_nl,
      not_3370_nl);
  assign nl_acc_18_nl = ({RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_5_nl , RMS_NORM_LOOP_1_1_and_2_nl
      , RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_or_1_nl , RMS_NORM_LOOP_1_1_mux1h_13_nl
      , RMS_NORM_LOOP_1_1_or_11_nl}) + conv_u2u_8_10({RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_6_nl
      , RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_7_nl , RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_8_nl
      , RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_and_9_nl , 1'b1});
  assign acc_18_nl = nl_acc_18_nl[9:0];
  assign z_out_20 = readslicef_10_9_1(acc_18_nl);
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_45_nl = MUX1HOT_s_1_4_2((reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1]),
      (~ (z_out_2[17])), (attention_sqrt_1_for_i_4_0_sva_4_3[1]), (LINEAR_FORWARD_NO_MUL_LOOP_5_l_2_0_lpi_3_dfm_1_0_1[1]),
      {and_1338_cse , and_1441_cse , and_1388_cse , and_dcpl_1178});
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_46_nl = MUX1HOT_s_1_4_2((reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[0]),
      (~ (z_out_2[21])), (attention_sqrt_1_for_i_4_0_sva_4_3[0]), (LINEAR_FORWARD_NO_MUL_LOOP_5_l_2_0_lpi_3_dfm_1_0_1[0]),
      {and_1338_cse , and_1441_cse , and_1388_cse , and_dcpl_1178});
  assign GEMM_3D_FLOAT_LOOP_4_or_28_nl = (~((z_out_2[20]) | and_dcpl_1178)) | and_1338_cse
      | and_1388_cse;
  assign nl_z_out_21 = conv_u2u_2_3({GEMM_3D_FLOAT_LOOP_4_mux1h_45_nl , GEMM_3D_FLOAT_LOOP_4_mux1h_46_nl})
      + conv_u2u_2_3({GEMM_3D_FLOAT_LOOP_4_or_28_nl , 1'b1});
  assign z_out_21 = nl_z_out_21[2:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_20_nl
      = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[13])
      & (~(and_1338_cse | and_dcpl_1201 | and_dcpl_1206 | and_dcpl_1208));
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_148_nl = MUX1HOT_s_1_3_2((GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3]), (z_out_25[3]), {and_1338_cse ,
      and_dcpl_1201 , and_dcpl_1206});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_49_nl = (operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_148_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_3_cse) | and_dcpl_1208;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_149_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[13]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[1]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[2]),
      (z_out_25[2]), {operator_40_24_true_AC_TRN_AC_WRAP_2_or_45_cse , and_1338_cse
      , and_dcpl_1201 , and_dcpl_1206});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_50_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_149_nl
      | and_dcpl_1208;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_150_nl = MUX1HOT_s_1_3_2((GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[1]), (z_out_25[1]), {and_1338_cse ,
      and_dcpl_1201 , and_dcpl_1206});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_51_nl = (operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_150_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_2_nor_3_cse) | and_dcpl_1208;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_151_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[13]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]), (z_out_25[0]), (reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd[1]),
      {operator_40_24_true_AC_TRN_AC_WRAP_2_or_45_cse , and_dcpl_1201 , and_dcpl_1206
      , and_dcpl_1208});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_71_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_151_nl
      & (~ and_1338_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux_22_nl = MUX_s_1_2_2((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_psp_sva_1[3]), and_1076_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_52_nl = (operator_40_24_true_AC_TRN_AC_WRAP_2_mux_22_nl
      & (~(and_dcpl_1201 | and_dcpl_1206 | and_dcpl_1208))) | and_1338_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux_23_nl = MUX_v_2_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[3:2]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[3:2]), and_1076_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_nor_31_nl = ~(and_1338_cse | and_dcpl_1206);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_73_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux_23_nl
      & (signext_2_1(operator_40_24_true_AC_TRN_AC_WRAP_2_nor_31_nl)) & (signext_2_1(~
      operator_40_24_true_AC_TRN_AC_WRAP_2_or_18_itm));
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_152_nl = MUX1HOT_s_1_3_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[1]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[1]), (z_out_27[2]), {and_dcpl_1186
      , and_1076_cse , and_dcpl_1206});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_and_74_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_152_nl
      & (~ and_1338_cse) & (~ operator_40_24_true_AC_TRN_AC_WRAP_2_or_18_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_153_nl = MUX1HOT_s_1_4_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_25_mx0w12[0]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2]),
      (z_out_27[1]), {and_dcpl_1186 , and_1076_cse , and_1338_cse , and_dcpl_1206});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_or_53_nl = operator_40_24_true_AC_TRN_AC_WRAP_2_mux1h_153_nl
      | operator_40_24_true_AC_TRN_AC_WRAP_2_or_18_itm;
  assign nl_acc_20_nl = conv_u2u_6_7({operator_40_24_true_AC_TRN_AC_WRAP_2_operator_40_24_true_AC_TRN_AC_WRAP_2_and_20_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_49_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_or_50_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_51_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_and_71_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_or_52_nl}) + conv_s2u_5_7({operator_40_24_true_AC_TRN_AC_WRAP_2_and_73_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_2_and_74_nl , operator_40_24_true_AC_TRN_AC_WRAP_2_or_53_nl
      , 1'b1});
  assign acc_20_nl = nl_acc_20_nl[6:0];
  assign z_out_22 = readslicef_7_6_1(acc_20_nl);
  assign mux_1088_nl = MUX_v_2_2_2((z_out_15[3:2]), (z_out_14[3:2]), CACHE_UPDATE_LOOP_3_1_or_6_cse_1);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_or_12_nl = mux_1088_nl | ({{1{and_1312_cse}},
      and_1312_cse}) | ({{1{and_1338_cse}}, and_1338_cse});
  assign APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_24_nl = MUX1HOT_s_1_3_2((z_out_14[1]),
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[1]), (z_out_15[1]), {CACHE_UPDATE_LOOP_3_1_or_6_cse_1
      , and_1312_cse , and_1298_cse});
  assign APPLY_ROTARY_POS_EMB_LOOP_3_or_13_nl = APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_24_nl
      | and_1338_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_or_14_nl = and_1338_cse | and_1312_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_5_nl = MUX_v_3_2_2(({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}), GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      APPLY_ROTARY_POS_EMB_LOOP_3_or_14_nl);
  assign nl_z_out_23 = conv_u2u_3_4({APPLY_ROTARY_POS_EMB_LOOP_3_or_12_nl , APPLY_ROTARY_POS_EMB_LOOP_3_or_13_nl})
      + conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_5_nl);
  assign z_out_23 = nl_z_out_23[3:0];
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_15_nl = MUX1HOT_v_2_4_2((GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]),
      (z_out_28[2:1]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13:12]),
      2'b10, {TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_60_cse , nor_721_cse , and_dcpl_1249
      , and_dcpl_1257});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_16_nl = MUX1HOT_s_1_3_2((GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]),
      (z_out_28[0]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17]),
      {TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_60_cse , nor_721_cse , and_dcpl_1249});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_61_nl = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_16_nl
      | and_dcpl_1257;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_and_4_nl = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1])
      & (~(and_dcpl_1240 | and_dcpl_1249 | and_dcpl_1254 | and_dcpl_1257));
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_17_nl = MUX1HOT_v_2_5_2(reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd,
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm[2:1]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]),
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd, (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]),
      {and_dcpl_1240 , nor_721_cse , and_dcpl_1249 , and_dcpl_1254 , and_dcpl_1257});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_18_nl = MUX1HOT_s_1_5_2((reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd_1[1]),
      (operator_40_24_true_AC_TRN_AC_WRAP_acc_82_itm[0]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[2]),
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1, (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]),
      {and_dcpl_1240 , nor_721_cse , and_dcpl_1249 , and_dcpl_1254 , and_dcpl_1257});
  assign nl_acc_22_nl = conv_u2u_4_5({TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_15_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_61_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_and_4_nl})
      + conv_u2u_4_5({TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_17_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_18_nl
      , 1'b1});
  assign acc_22_nl = nl_acc_22_nl[4:0];
  assign z_out_24 = readslicef_5_4_1(acc_22_nl);
  assign SF_LOOP_3_mux1h_31_nl = MUX1HOT_s_1_4_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[17])),
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd, (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2]),
      (GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2[6]), {and_1562_cse , and_1333_cse ,
      and_1304_cse , and_1318_cse});
  assign SF_LOOP_3_mux1h_32_nl = MUX1HOT_v_2_4_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[38:37])),
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1, (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[1:0]),
      (signext_2_1(GEMM_3D_FLOAT_LOOP_4_acc_185_sdt_mx0w2[4])), {and_1562_cse , and_1333_cse
      , and_1304_cse , and_1318_cse});
  assign SF_LOOP_3_or_15_nl = (~(and_1333_cse | and_1304_cse | and_1318_cse)) | and_1562_cse;
  assign SF_LOOP_3_mux1h_33_nl = MUX1HOT_s_1_3_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19])),
      (attention_sqrt_1_for_i_4_0_sva_2_0[2]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2]),
      {and_1562_cse , SF_LOOP_3_or_9_cse , and_1318_cse});
  assign SF_LOOP_3_mux1h_34_nl = MUX1HOT_s_1_3_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[28])),
      (attention_sqrt_1_for_i_4_0_sva_2_0[1]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[1]),
      {and_1562_cse , SF_LOOP_3_or_9_cse , and_1318_cse});
  assign SF_LOOP_3_mux1h_35_nl = MUX1HOT_s_1_3_2((~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[13])),
      (attention_sqrt_1_for_i_4_0_sva_2_0[0]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]),
      {and_1562_cse , SF_LOOP_3_or_9_cse , and_1318_cse});
  assign nl_acc_23_nl = conv_u2u_4_5({SF_LOOP_3_mux1h_31_nl , SF_LOOP_3_mux1h_32_nl
      , SF_LOOP_3_or_15_nl}) + conv_u2u_4_5({SF_LOOP_3_mux1h_33_nl , SF_LOOP_3_mux1h_34_nl
      , SF_LOOP_3_mux1h_35_nl , 1'b1});
  assign acc_23_nl = nl_acc_23_nl[4:0];
  assign z_out_25 = readslicef_5_4_1(acc_23_nl);
  assign SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_and_2_nl = (z_out_18[3]) & SF_LOOP_3_or_11_cse;
  assign SF_LOOP_3_SF_LOOP_3_mux_6_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[7:6]),
      (z_out_18[2:1]), SF_LOOP_3_or_11_cse);
  assign SF_LOOP_3_and_10_nl = (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[35])
      & (~(and_dcpl_1291 | and_dcpl_1295 | and_dcpl_1301 | and_dcpl_1306));
  assign SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_and_3_nl = (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2])
      & SF_LOOP_3_or_11_cse;
  assign SF_LOOP_3_SF_LOOP_3_mux_7_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[4:3]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[1:0]), SF_LOOP_3_or_11_cse);
  assign nl_acc_24_nl = conv_u2u_4_5({SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_and_2_nl , SF_LOOP_3_SF_LOOP_3_mux_6_nl
      , SF_LOOP_3_and_10_nl}) + conv_u2u_4_5({SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_and_3_nl
      , SF_LOOP_3_SF_LOOP_3_mux_7_nl , 1'b1});
  assign acc_24_nl = nl_acc_24_nl[4:0];
  assign z_out_26 = readslicef_5_4_1(acc_24_nl);
  assign SF_LOOP_3_SF_LOOP_3_and_14_nl = (attention_sqrt_1_for_i_4_0_sva_2_0[2])
      & SF_LOOP_3_or_4_itm & (~ SF_LOOP_3_or_13_itm);
  assign SF_LOOP_3_mux_86_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[1:0]),
      (attention_sqrt_1_for_i_4_0_sva_2_0[1:0]), SF_LOOP_3_or_4_itm);
  assign SF_LOOP_3_SF_LOOP_3_or_43_nl = MUX_v_2_2_2(SF_LOOP_3_mux_86_nl, 2'b11, SF_LOOP_3_or_13_itm);
  assign SF_LOOP_3_or_16_nl = and_1333_cse | and_1358_cse;
  assign SF_LOOP_3_mux1h_36_nl = MUX1HOT_v_2_5_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[4:3]),
      2'b01, CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4, (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]),
      reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd, {and_1360_cse , nor_779_cse ,
      SF_LOOP_3_or_16_nl , and_1318_cse , and_1304_cse});
  assign nl_z_out_27 = ({SF_LOOP_3_SF_LOOP_3_and_14_nl , SF_LOOP_3_SF_LOOP_3_or_43_nl})
      + conv_u2u_2_3(SF_LOOP_3_mux1h_36_nl);
  assign z_out_27 = nl_z_out_27[2:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_25_nl
      = (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1]) & operator_40_24_true_AC_TRN_AC_WRAP_or_itm;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_105_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[15])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[16]))
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[28]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_105_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_105_nl[1:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_136_nl = MUX_v_2_2_2(operator_40_24_true_AC_TRN_AC_WRAP_acc_105_nl,
      ({(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[0]) , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1}),
      operator_40_24_true_AC_TRN_AC_WRAP_or_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nor_3_nl
      = ~((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[34])
      | and_dcpl_1337 | and_dcpl_1344);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_106_nl = conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[17])
      + conv_u2u_1_2(~ (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[18]))
      + conv_u2u_1_2(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_106_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_106_nl[1:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_34_nl = MUX1HOT_v_2_3_2(operator_40_24_true_AC_TRN_AC_WRAP_acc_106_nl,
      2'b01, reg_APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_1_ftd, {nor_721_cse , and_dcpl_1337
      , and_dcpl_1344});
  assign nl_acc_26_nl = ({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_25_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_136_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nor_3_nl})
      + conv_u2u_3_4({operator_40_24_true_AC_TRN_AC_WRAP_mux1h_34_nl , 1'b1});
  assign acc_26_nl = nl_acc_26_nl[3:0];
  assign z_out_28 = readslicef_4_3_1(acc_26_nl);
  assign for_for_nor_5_nl = ~(and_1562_cse | and_1447_cse);
  assign for_for_for_for_and_6_nl = MUX_v_2_2_2(2'b00, (reg_SF_LOOP_3_acc_38_1_ftd_2[8:7]),
      for_for_nor_5_nl);
  assign for_for_mux1h_10_nl = MUX1HOT_v_2_3_2((reg_SF_LOOP_3_acc_38_1_ftd_2[6:5]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21:20]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]),
      {and_dcpl_1346 , and_1562_cse , and_1447_cse});
  assign for_for_mux_5_nl = MUX_s_1_2_2((reg_SF_LOOP_3_acc_38_1_ftd_2[4]), (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]),
      and_1447_cse);
  assign for_for_for_for_and_7_nl = for_for_mux_5_nl & (~ and_1562_cse);
  assign for_for_mux_6_nl = MUX_v_2_2_2((reg_SF_LOOP_3_acc_38_1_ftd_2[3:2]), (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25]),
      and_1562_cse);
  assign not_3376_nl = ~ and_1447_cse;
  assign for_for_for_for_and_8_nl = MUX_v_2_2_2(2'b00, for_for_mux_6_nl, not_3376_nl);
  assign for_for_mux_7_nl = MUX_v_2_2_2((reg_SF_LOOP_3_acc_38_1_ftd_2[1:0]), (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[19])),
      and_1562_cse);
  assign not_3377_nl = ~ and_1447_cse;
  assign for_for_for_for_and_9_nl = MUX_v_2_2_2(2'b00, for_for_mux_7_nl, not_3377_nl);
  assign for_for_or_8_nl = for_for_nor_3_cse | and_1447_cse;
  assign for_for_mux_8_nl = MUX_v_4_2_2((signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[18])),
      4'b1011, and_1447_cse);
  assign not_3378_nl = ~ and_dcpl_1346;
  assign for_for_for_for_and_10_nl = MUX_v_4_2_2(4'b0000, for_for_mux_8_nl, not_3378_nl);
  assign for_for_for_for_and_11_nl = (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1]) & for_for_nor_3_cse;
  assign for_for_mux_9_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[18]),
      (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[0]), and_1447_cse);
  assign for_for_for_for_or_1_nl = for_for_mux_9_nl | and_dcpl_1346;
  assign nl_acc_27_nl = ({for_for_for_for_and_6_nl , for_for_mux1h_10_nl , for_for_for_for_and_7_nl
      , for_for_for_for_and_8_nl , for_for_for_for_and_9_nl , for_for_or_8_nl}) +
      conv_u2u_7_10({for_for_for_for_and_10_nl , for_for_for_for_and_11_nl , for_for_for_for_or_1_nl
      , 1'b1});
  assign acc_27_nl = nl_acc_27_nl[9:0];
  assign z_out_29 = readslicef_10_9_1(acc_27_nl);
  assign nor_913_nl = ~((~ (fsm_output[0])) | (fsm_output[1]) | (fsm_output[3]) |
      (fsm_output[5]) | (fsm_output[6]));
  assign nor_914_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[3])) | (fsm_output[5])
      | (fsm_output[6]));
  assign nor_915_nl = ~((fsm_output[1]) | nand_258_cse);
  assign mux_1091_nl = MUX_s_1_2_2(nor_914_nl, nor_915_nl, fsm_output[0]);
  assign mux_1090_nl = MUX_s_1_2_2(nor_913_nl, mux_1091_nl, fsm_output[2]);
  assign and_2309_nl = mux_1090_nl & (~ (fsm_output[8])) & (fsm_output[7]) & (~ (fsm_output[4]));
  assign LINEAR_FORWARD_NO_MUL_LOOP_3_2_mux1h_2_nl = MUX1HOT_v_2_3_2((z_out_28[2:1]),
      (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_mx0w8[5:4]), (z_out_29[8:7]), {and_dcpl_1337
      , and_2309_nl , and_dcpl_1346});
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_3_2_acc_nl = ({1'b1 , LINEAR_FORWARD_NO_MUL_LOOP_3_2_mux1h_2_nl})
      + 3'b001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_3_2_acc_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_3_2_acc_nl[2:0];
  assign z_out_30_2 = readslicef_3_1_2(LINEAR_FORWARD_NO_MUL_LOOP_3_2_acc_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_5_nl = MUX_v_2_2_2((SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[19:18]),
      (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[4:3]), and_1675_ssc);
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_3_nl = and_1676_ssc | not_tmp_754
      | nor_779_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_or_1_nl
      = MUX_v_2_2_2(operator_40_24_true_AC_TRN_AC_WRAP_mux_5_nl, 2'b11, operator_40_24_true_AC_TRN_AC_WRAP_or_3_nl);
  assign and_2310_nl = and_dcpl_19 & (fsm_output[6:0]==7'b1010110);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_13_nl = MUX1HOT_v_2_5_2((SOFTMAX_LOOP_4_x_lpi_3_dfm_1_20_1_mx0w1[17:16]),
      (GEMM_3D_FLOAT_LOOP_4_1_mul_sdt_1_sva_mx0w5[2:1]), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_3[5:4]),
      (z_out_20[8:7]), (z_out_27[2:1]), {and_2310_nl , and_1675_ssc , and_1676_ssc
      , not_tmp_754 , nor_779_cse});
  assign nl_z_out_31 = conv_s2u_4_5({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_or_1_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_13_nl}) + 5'b00001;
  assign z_out_31 = nl_z_out_31[4:0];
  assign RMS_NORM_LOOP_2_mux1h_5_nl = MUX1HOT_v_5_3_2((SF_LOOP_3_acc_5_psp_sva_8_0[8:4]),
      (SF_LOOP_3_acc_45_itm_8_0[8:4]), ({{4{reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd}},
      reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd}), {and_dcpl_1385 , and_dcpl_1393
      , and_dcpl_1407});
  assign RMS_NORM_LOOP_2_nor_2_nl = ~(and_dcpl_1400 | and_dcpl_1403 | and_dcpl_1411);
  assign RMS_NORM_LOOP_2_and_9_nl = MUX_v_5_2_2(5'b00000, RMS_NORM_LOOP_2_mux1h_5_nl,
      RMS_NORM_LOOP_2_nor_2_nl);
  assign RMS_NORM_LOOP_2_mux1h_6_nl = MUX1HOT_v_4_5_2((SF_LOOP_3_acc_5_psp_sva_8_0[3:0]),
      (SF_LOOP_3_acc_45_itm_8_0[3:0]), z_out_24, (signext_4_3({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1})), z_out_25, {and_dcpl_1385
      , and_dcpl_1393 , and_dcpl_1400 , and_dcpl_1407 , and_dcpl_1411});
  assign RMS_NORM_LOOP_2_or_3_nl = MUX_v_4_2_2(RMS_NORM_LOOP_2_mux1h_6_nl, 4'b1111,
      and_dcpl_1403);
  assign RMS_NORM_LOOP_2_or_4_nl = and_dcpl_1385 | and_dcpl_1393 | and_dcpl_1407;
  assign RMS_NORM_LOOP_2_mux1h_7_nl = MUX1HOT_v_2_4_2(2'b01, (z_out_28[2:1]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd,
      (z_out_27[2:1]), {RMS_NORM_LOOP_2_or_4_nl , and_dcpl_1400 , and_dcpl_1403 ,
      and_dcpl_1411});
  assign nl_z_out_32 = ({RMS_NORM_LOOP_2_and_9_nl , RMS_NORM_LOOP_2_or_3_nl}) + conv_u2u_2_9(RMS_NORM_LOOP_2_mux1h_7_nl);
  assign z_out_32 = nl_z_out_32[8:0];
  assign and_2311_nl = (fsm_output==9'b011101101);
  assign GEMM_3D_FLOAT_LOOP_4_mux_26_nl = MUX_s_1_2_2((GEMM_3D_FLOAT_LOOP_4_acc_183_sdt_mx0w1[6]),
      (z_out_23[3]), and_2311_nl);
  assign nl_z_out_33 = conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0) + conv_u2u_1_4(GEMM_3D_FLOAT_LOOP_4_mux_26_nl);
  assign z_out_33 = nl_z_out_33[3:0];
  assign SF_LOOP_3_mux_87_nl = MUX_v_4_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[11:8]),
      4'b1001, and_dcpl_1440);
  assign SF_LOOP_3_SF_LOOP_3_or_44_nl = (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[21])
      | and_dcpl_1440;
  assign SF_LOOP_3_mux_88_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[20]),
      (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd[1]), and_dcpl_1440);
  assign SF_LOOP_3_or_17_nl = (~((fsm_output[8:6]==3'b011) & nor_525_cse & and_dcpl_887
      & (fsm_output[0]) & (fsm_output[2]))) | and_dcpl_1440;
  assign SF_LOOP_3_mux_89_nl = MUX_v_2_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[26:25]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]), and_dcpl_1440);
  assign SF_LOOP_3_SF_LOOP_3_and_15_nl = (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0])
      & and_dcpl_1440;
  assign SF_LOOP_3_SF_LOOP_3_and_16_nl = (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[5])
      & (~ and_dcpl_1440);
  assign not_3392_nl = ~ and_dcpl_1440;
  assign SF_LOOP_3_SF_LOOP_3_and_17_nl = MUX_v_2_2_2(2'b00, (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[24:23]),
      not_3392_nl);
  assign nl_acc_32_nl = conv_u2u_7_8({SF_LOOP_3_mux_87_nl , SF_LOOP_3_SF_LOOP_3_or_44_nl
      , SF_LOOP_3_mux_88_nl , SF_LOOP_3_or_17_nl}) + conv_u2u_7_8({SF_LOOP_3_mux_89_nl
      , SF_LOOP_3_SF_LOOP_3_and_15_nl , SF_LOOP_3_SF_LOOP_3_and_16_nl , SF_LOOP_3_SF_LOOP_3_and_17_nl
      , 1'b1});
  assign acc_32_nl = nl_acc_32_nl[7:0];
  assign z_out_34 = readslicef_8_7_1(acc_32_nl);
  assign GEMM_3D_FLOAT_LOOP_4_1_mux_7_nl = MUX_s_1_2_2((z_out_14[3]), (z_out_29[7]),
      and_1447_cse);
  assign nor_917_nl = ~((fsm_output[1]) | (fsm_output[0]) | (fsm_output[6]) | (fsm_output[5])
      | (~ (fsm_output[2])));
  assign mux_1095_nl = MUX_s_1_2_2(nor_tmp_241, (~ or_tmp_1208), fsm_output[0]);
  assign nor_918_nl = ~((~ (fsm_output[0])) | (~ (fsm_output[6])) | (fsm_output[5])
      | (fsm_output[2]));
  assign mux_1094_nl = MUX_s_1_2_2(mux_1095_nl, nor_918_nl, fsm_output[1]);
  assign mux_1093_nl = MUX_s_1_2_2(nor_917_nl, mux_1094_nl, fsm_output[3]);
  assign nor_920_nl = ~((~ (fsm_output[6])) | (fsm_output[5]) | (fsm_output[2]));
  assign mux_1097_nl = MUX_s_1_2_2(nor_920_nl, nor_tmp_241, fsm_output[0]);
  assign or_1580_nl = (fsm_output[6]) | (fsm_output[5]) | (~ (fsm_output[2]));
  assign mux_1098_nl = MUX_s_1_2_2(or_tmp_1208, or_1580_nl, fsm_output[0]);
  assign mux_1096_nl = MUX_s_1_2_2((~ mux_1097_nl), mux_1098_nl, fsm_output[1]);
  assign nor_919_nl = ~((fsm_output[3]) | mux_1096_nl);
  assign mux_1092_nl = MUX_s_1_2_2(mux_1093_nl, nor_919_nl, fsm_output[4]);
  assign GEMM_3D_FLOAT_LOOP_4_1_or_19_nl = GEMM_3D_FLOAT_LOOP_4_1_mux_7_nl | (mux_1092_nl
      & and_dcpl_19);
  assign nl_z_out_35 = conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0) + conv_u2u_1_4(GEMM_3D_FLOAT_LOOP_4_1_or_19_nl);
  assign z_out_35 = nl_z_out_35[3:0];
  assign GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_and_2_nl = (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[3])
      & (~(and_dcpl_1440 | and_dcpl_1476));
  assign GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mux_8_nl = MUX_v_3_2_2(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      (GEMM_3D_FLOAT_LOOP_4_1_acc_23_cse_sva[2:0]), and_dcpl_1471);
  assign GEMM_3D_FLOAT_LOOP_4_mux_27_nl = MUX_s_1_2_2((z_out_20[7]), (z_out_17[3]),
      and_dcpl_1476);
  assign GEMM_3D_FLOAT_LOOP_4_or_29_nl = GEMM_3D_FLOAT_LOOP_4_mux_27_nl | and_dcpl_1471;
  assign nl_z_out_36 = conv_u2u_4_5({GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_and_2_nl
      , GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mux_8_nl}) + conv_u2u_1_5(GEMM_3D_FLOAT_LOOP_4_or_29_nl);
  assign z_out_36 = nl_z_out_36[4:0];
  assign GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_and_3_nl = (APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[3])
      & (~(and_1312_cse | and_1447_cse | and_dcpl_1498));
  assign GEMM_3D_FLOAT_LOOP_4_1_or_20_nl = and_1312_cse | and_1447_cse;
  assign GEMM_3D_FLOAT_LOOP_4_1_mux1h_31_nl = MUX1HOT_v_3_3_2(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp[2:0]), ({reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0_ftd_1}), {GEMM_3D_FLOAT_LOOP_4_1_or_20_nl
      , and_dcpl_800 , and_dcpl_1498});
  assign GEMM_3D_FLOAT_LOOP_4_1_mux_8_nl = MUX_s_1_2_2((GEMM_3D_FLOAT_LOOP_4_1_acc_33_sdt_mx0w5[4]),
      (z_out_14[3]), and_1447_cse);
  assign GEMM_3D_FLOAT_LOOP_4_1_or_21_nl = GEMM_3D_FLOAT_LOOP_4_1_mux_8_nl | and_dcpl_800
      | and_dcpl_1498;
  assign nl_z_out_37 = conv_u2u_4_5({GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_and_3_nl
      , GEMM_3D_FLOAT_LOOP_4_1_mux1h_31_nl}) + conv_u2u_1_5(GEMM_3D_FLOAT_LOOP_4_1_or_21_nl);
  assign z_out_37 = nl_z_out_37[4:0];
  assign GEMM_3D_FLOAT_LOOP_4_1_or_22_nl = (CACHE_UPDATE_LOOP_3_k_5_0_sva_5_4[1])
      | and_1417_cse;
  assign nl_acc_37_nl = conv_u2u_7_8({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 , 3'b000
      , GEMM_3D_FLOAT_LOOP_4_1_or_22_nl}) + conv_u2u_4_8({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , 1'b1});
  assign acc_37_nl = nl_acc_37_nl[7:0];
  assign z_out_39 = readslicef_8_7_1(acc_37_nl);
  assign and_2314_nl = (fsm_output[8:6]==3'b101) & nor_525_cse & not_tmp_21 & (fsm_output[0])
      & (fsm_output[2]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux_3_nl = MUX_v_41_2_2((z_out_58[56:16]),
      (z_out_9[42:2]), and_2314_nl);
  assign nl_z_out_40 = ({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva , 2'b01}) + conv_s2u_41_42(LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux_3_nl);
  assign z_out_40 = nl_z_out_40[41:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_13_nl = MUX_v_40_2_2(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva,
      (signext_40_37(~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:3]))), and_dcpl_1557);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_14_nl = MUX_v_3_2_2(3'b001, (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[2:0])),
      and_dcpl_1557);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_15_nl = MUX_v_2_2_2((z_out_42_49_8[41:40]),
      (signext_2_1(z_out_42_49_8[39])), and_dcpl_1557);
  assign nl_z_out_41_52_8 = ({LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_13_nl , LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_14_nl
      , 1'b0 , and_dcpl_1557}) + conv_s2u_42_45({LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_15_nl
      , (z_out_42_49_8[39:0])});
  assign z_out_41_52_8 = nl_z_out_41_52_8[44:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_14_nl = (~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      + conv_s2s_38_40(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:2]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_14_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_14_nl[39:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_17_nl = MUX_v_40_2_2((~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva),
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_14_nl, and_dcpl_1557);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt = ({QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva
      , 3'b001}) + conv_s2u_40_43(LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_17_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt[42:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1 = conv_s2u_40_41(QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva)
      + conv_s2u_37_41(LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt[42:6]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1 = nl_LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1[40:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_16_nl = MUX_v_40_2_2((~ QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva),
      (signext_40_38(~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:2]))), and_dcpl_1572);
  assign QUANTIZE_ACTIVATION_LOOP_1_scale_not_101_nl = ~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[1:0]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_3_LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_nl =
      MUX_v_2_2_2(2'b00, QUANTIZE_ACTIVATION_LOOP_1_scale_not_101_nl, and_dcpl_1572);
  assign nl_z_out_42_49_8 = ({LINEAR_FORWARD_NO_MUL_LOOP_2_3_mux_16_nl , LINEAR_FORWARD_NO_MUL_LOOP_2_3_LINEAR_FORWARD_NO_MUL_LOOP_2_3_and_1_nl})
      + conv_s2u_39_42(LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1[40:2]);
  assign z_out_42_49_8 = nl_z_out_42_49_8[41:0];
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl =  -conv_s2s_17_18(attention_round_qelse_mux_2_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl[17:0];
  assign z_out_44_17 = readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_5_nl = MUX_v_4_2_2(attention_round_1_qr_39_16_3_lpi_3_dfm_23_20,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[23:20]), QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_6_nl = MUX_v_3_2_2(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[19:17]), QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_nl = MUX_v_5_2_2(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[16:12]), QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_8_nl = MUX_v_3_2_2(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[11:9]), QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_9_nl = MUX_v_2_2_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:7]),
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[8:7]), QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_16_cse);
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl = conv_s2u_17_18({QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_5_nl
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_6_nl , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_nl
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_8_nl , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_9_nl})
      + 18'b000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl[17:0];
  assign z_out_45_17 = readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl);
  assign attention_round_qelse_mux_13_nl = MUX_v_4_2_2(attention_round_1_qr_39_16_3_lpi_3_dfm_23_20,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[23:20]), CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_8_nl = MUX_v_4_2_2((~
      attention_round_1_qr_39_16_3_lpi_3_dfm_23_20), (~ attention_round_qelse_mux_13_nl),
      and_1914_cse);
  assign attention_round_qelse_mux_14_nl = MUX_v_3_2_2(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[19:17]), CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_9_nl = MUX_v_3_2_2((~
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd), (~ attention_round_qelse_mux_14_nl),
      and_1914_cse);
  assign attention_round_qelse_mux_15_nl = MUX_v_5_2_2(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[16:12]), CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_10_nl = MUX_v_5_2_2((~
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1), (~ attention_round_qelse_mux_15_nl),
      and_1914_cse);
  assign attention_round_qelse_mux_16_nl = MUX_v_3_2_2(reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2,
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[11:9]), CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_11_nl = MUX_v_3_2_2((~
      reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2), (~ attention_round_qelse_mux_16_nl),
      and_1914_cse);
  assign attention_round_qelse_mux_17_nl = MUX_v_2_2_2((reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:7]),
      (attention_round_qr_39_16_lpi_3_dfm_mx0w0[8:7]), CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_12_nl = MUX_v_2_2_2((~
      (reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3[8:7])), (~ attention_round_qelse_mux_17_nl),
      and_1914_cse);
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_1_nl = conv_s2u_17_18({QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_8_nl
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_9_nl , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_10_nl
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_11_nl , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_mux_12_nl})
      + 18'b000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_1_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_1_nl[17:0];
  assign z_out_46_17 = readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_1_nl);
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl = conv_s2u_17_18(attention_round_qelse_mux_2_cse)
      + 18'b000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl[17:0];
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_cse_17 = readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_26_nl
      = MUX_v_6_2_2(6'b000000, (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[13:8]),
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_27_nl
      = (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24])
      & (~ and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_28_nl
      = (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[17])
      & and_995_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_137_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[16]),
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_29_nl
      = (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[15])
      & and_995_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_138_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_139_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21]),
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_140_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[17]),
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_30_nl
      = (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[16])
      & and_995_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_141_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[15]),
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_142_nl = MUX_s_1_2_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[24]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[3]),
      and_995_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_31_nl
      = (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[3])
      & and_995_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_143_nl = MUX_v_2_2_2((signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[20])),
      (SF_LOOP_3_acc_5_psp_sva_19_17[2:1]), and_995_cse);
  assign SF_LOOP_3_SF_LOOP_3_nand_2_nl = ~((SF_LOOP_3_acc_7_psp_sva_1[17]) & (~ reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd));
  assign nl_SF_LOOP_3_acc_93_nl = conv_u2u_23_24({(~ (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19:15]))
      , 1'b1 , (~ (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[17:15]))
      , 1'b1 , (~ (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[9:8]))
      , 1'b1 , (~ (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[6:5]))
      , 1'b1 , (~ (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19:15]))
      , 1'b1 , (~ SF_LOOP_3_acc_5_psp_sva_21)}) + conv_u2u_1_24(SF_LOOP_3_SF_LOOP_3_nand_2_nl)
      + conv_u2u_21_24({reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
      , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[13]))
      , ({{1{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd})
      , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[13]))
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19:18])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19:18])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[0])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[14])
      , 1'b0 , (signext_3_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20]))
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[11:10])})
      + conv_u2u_1_24(~ (SF_LOOP_3_acc_90_psp_1[14])) + conv_u2u_20_24({reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd
      , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_1 , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2
      , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3}) + conv_u2u_1_24(SF_LOOP_3_acc_90_psp_1[13])
      + conv_u2u_19_24({(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21:20])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[9:8])
      , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[14]))
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[11:10])
      , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[4]))
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20])
      , ({{1{reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd}},
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd})
      , 1'b0 , (signext_3_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[13]))})
      + conv_u2u_14_24({SF_LOOP_3_acc_45_itm_13_9 , SF_LOOP_3_acc_45_itm_8_0}) +
      conv_u2u_1_24(SF_LOOP_3_acc_5_psp_sva_19_17[0]);
  assign SF_LOOP_3_acc_93_nl = nl_SF_LOOP_3_acc_93_nl[23:0];
  assign SF_LOOP_3_and_11_nl = reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd
      & (~ (SF_LOOP_3_acc_7_psp_sva_1[17])) & ((SF_LOOP_3_acc_7_psp_sva_1[16:0]!=17'b00000000000000000));
  assign nl_SF_LOOP_3_acc_92_nl = ({24'b101110111111111111101001 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[5])})
      + conv_u2s_24_25(SF_LOOP_3_acc_93_nl) + conv_u2s_1_25(SF_LOOP_3_and_11_nl);
  assign SF_LOOP_3_acc_92_nl = nl_SF_LOOP_3_acc_92_nl[24:0];
  assign nl_SF_LOOP_3_acc_91_nl = conv_u2s_27_28({(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[14:10])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19:18])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[6:5])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[7])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[2:0])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[14])
      , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[9:8])
      , 1'b0 , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[1]))
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2[5])
      , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[12]))})
      + conv_s2s_25_28(SF_LOOP_3_acc_92_nl);
  assign SF_LOOP_3_acc_91_nl = nl_SF_LOOP_3_acc_91_nl[27:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_144_nl = MUX_v_28_2_2((signext_28_15(z_out_2[14:0])),
      SF_LOOP_3_acc_91_nl, and_995_cse);
  assign nl_z_out_49 = conv_u2u_28_30(signext_28_25({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_2_cse_1
      , 1'b0 , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_26_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_2_cse_1
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_27_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_28_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_137_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_29_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_138_nl , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_2_cse_1
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_139_nl , 1'b0 , operator_40_24_true_AC_TRN_AC_WRAP_mux_140_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_30_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_141_nl , 1'b0 , operator_40_24_true_AC_TRN_AC_WRAP_mux_142_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_31_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux_143_nl})) + conv_s2u_28_30(operator_40_24_true_AC_TRN_AC_WRAP_mux_144_nl);
  assign z_out_49 = nl_z_out_49[29:0];
  assign nl_z_out_50 = conv_u2u_23_24(z_out_10[54:32]) + conv_u2u_1_24(z_out_10[31]);
  assign z_out_50 = nl_z_out_50[23:0];
  assign QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_8_nl = MUX1HOT_s_1_3_2(QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39,
      SF_LOOP_3_acc_5_psp_sva_9, (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39]), {and_dcpl_1685
      , and_1208_cse , and_dcpl_1698});
  assign QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_9_nl = MUX1HOT_v_9_3_2((QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15[23:15]),
      SF_LOOP_3_acc_5_psp_sva_8_0, (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[38:30]),
      {and_dcpl_1685 , and_1208_cse , and_dcpl_1698});
  assign QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_10_nl = MUX1HOT_v_15_3_2((QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15[14:0]),
      (attention_sqrt_1_guess_sva_29_0[29:15]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[29:15]),
      {and_dcpl_1685 , and_1208_cse , and_dcpl_1698});
  assign QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_11_nl = MUX1HOT_v_15_3_2(QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_14_0,
      (attention_sqrt_1_guess_sva_29_0[14:0]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[14:0]),
      {and_dcpl_1685 , and_1208_cse , and_dcpl_1698});
  assign QUANTIZE_ACTIVATION_LOOP_2_1_if_or_3_nl = (~ and_1208_cse) | and_dcpl_1685
      | and_dcpl_1698;
  assign QUANTIZE_ACTIVATION_LOOP_2_1_attention_abs_6_nand_1_nl = ~((z_out_12[39])
      & (RMS_NORM_LOOP_2_2_mul_itm_71_32_1[39]));
  assign attention_abs_6_mux_3_nl = MUX_v_39_2_2((RMS_NORM_LOOP_2_2_mul_itm_71_32_1[38:0]),
      (z_out_12[38:0]), RMS_NORM_LOOP_2_2_mul_itm_71_32_1[39]);
  assign QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_12_nl = MUX1HOT_v_40_3_2(({QUANTIZE_ACTIVATION_LOOP_2_1_attention_abs_6_nand_1_nl
      , (~ attention_abs_6_mux_3_nl)}), (z_out_10[39:0]), (~ (attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39:0])),
      {and_dcpl_1685 , and_1208_cse , and_dcpl_1698});
  assign nl_acc_49_nl = conv_s2u_41_42({QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_8_nl
      , QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_9_nl , QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_10_nl
      , QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_11_nl , QUANTIZE_ACTIVATION_LOOP_2_1_if_or_3_nl})
      + conv_s2u_41_42({QUANTIZE_ACTIVATION_LOOP_2_1_if_mux1h_12_nl , 1'b1});
  assign acc_49_nl = nl_acc_49_nl[41:0];
  assign z_out_51_40_1 = readslicef_42_40_2(acc_49_nl);
  assign attention_max_attn_fixed_t_mux1h_3_nl = MUX1HOT_s_1_3_2((~ QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39),
      (~ QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39), (~ (z_out_10[55])), {and_dcpl_1721
      , and_dcpl_1729 , attention_max_attn_fixed_t_or_cse_1});
  assign attention_max_attn_fixed_t_mux1h_4_nl = MUX1HOT_v_24_3_2((~ QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_15),
      (~ QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_15), (~ (z_out_10[54:31])),
      {and_dcpl_1721 , and_dcpl_1729 , attention_max_attn_fixed_t_or_cse_1});
  assign attention_max_attn_fixed_t_mux1h_5_nl = MUX1HOT_v_15_3_2((~ QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_14_0),
      (~ QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_14_0), (~ (z_out_10[30:16])),
      {and_dcpl_1721 , and_dcpl_1729 , attention_max_attn_fixed_t_or_cse_1});
  assign nl_attention_max_attn_fixed_t_acc_nl = conv_s2u_40_41({attention_max_attn_fixed_t_mux1h_3_nl
      , attention_max_attn_fixed_t_mux1h_4_nl , attention_max_attn_fixed_t_mux1h_5_nl})
      + 41'b00000000000000000000000000000000000000001;
  assign attention_max_attn_fixed_t_acc_nl = nl_attention_max_attn_fixed_t_acc_nl[40:0];
  assign z_out_53_40 = readslicef_41_1_40(attention_max_attn_fixed_t_acc_nl);
  always @(LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_7 or reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd
      or LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_7 or LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_7_4
      or and_dcpl_1760 or and_dcpl_1764 or and_dcpl_1766 or and_dcpl_1772 or LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0
      or LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0 or reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1
      or LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_3_2 or reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2
      or LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_1_0 or LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_itm
      or GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm or GEMM_3D_FLOAT_LOOP_4_acc_185_sdt or
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_itm)
  begin : mgc_div_8_7_0_4_b0_line_26
    // Interconnect Declarations
    reg [7:0] divmod6448_2_diff_1;
    reg [7:0] divmod6448_2_diff_2;
    reg [7:0] divmod6448_2_diff_3;
    reg [7:0] divmod6448_2_diff_4;
    reg [7:0] divmod6448_2_diff_5;
    reg [7:0] divmod6448_2_diff_6;
    reg [7:0] divmod6448_2_diff_7;
    reg divmod6448_2_lbuf_13_7;
    reg divmod6448_2_lbuf_12_6;
    reg divmod6448_2_lbuf_12_7;
    reg divmod6448_2_lbuf_11_5;
    reg divmod6448_2_lbuf_11_6;
    reg divmod6448_2_lbuf_11_7;
    reg divmod6448_2_lbuf_10_4;
    reg divmod6448_2_lbuf_10_5;
    reg divmod6448_2_lbuf_10_6;
    reg divmod6448_2_lbuf_10_7;
    reg divmod6448_2_lbuf_9_3;
    reg divmod6448_2_lbuf_9_4;
    reg divmod6448_2_lbuf_9_5;
    reg divmod6448_2_lbuf_9_6;
    reg divmod6448_2_lbuf_9_7;
    reg divmod6448_2_lbuf_8_2;
    reg divmod6448_2_lbuf_8_3;
    reg divmod6448_2_lbuf_8_4;
    reg divmod6448_2_lbuf_8_5;
    reg divmod6448_2_lbuf_8_6;
    reg divmod6448_2_lbuf_8_7;
    reg divmod6448_2_lbuf_7;
    reg divmod6448_2_lbuf_7_1;
    reg divmod6448_2_lbuf_7_2;
    reg divmod6448_2_lbuf_7_3;
    reg divmod6448_2_lbuf_7_4;
    reg divmod6448_2_lbuf_7_5;
    reg divmod6448_2_lbuf_7_6;
    reg [2:0] divmod6448_2_lbuf_6_4;
    reg [1:0] divmod6448_2_lbuf_3_2;
    reg [1:0] divmod6448_2_lbuf_1_0;
    reg [6:0] LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse;

    reg[7:0] divmod6448_2_loop951_8_acc_1_nl;
    reg[9:0] nl_divmod6448_2_loop951_8_acc_1_nl;
    divmod6448_2_lbuf_3_2 = MUX1HOT_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0[3:2]),
        reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_1, (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[3:2]),
        LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_3_2, {and_dcpl_1760 ,
        and_dcpl_1764 , and_dcpl_1766 , and_dcpl_1772});
    divmod6448_2_lbuf_6_4 = MUX1HOT_v_3_4_2((LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0[6:4]),
        (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd[2:0]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[6:4]),
        (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_7_4[2:0]), {and_dcpl_1760
        , and_dcpl_1764 , and_dcpl_1766 , and_dcpl_1772});
    divmod6448_2_lbuf_1_0 = MUX1HOT_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_6_0[1:0]),
        reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd_2, (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_6_0[1:0]),
        LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_1_0, {and_dcpl_1760 ,
        and_dcpl_1764 , and_dcpl_1766 , and_dcpl_1772});
    divmod6448_2_lbuf_7_6 = MUX1HOT_s_1_4_2(LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_lpi_3_mx1_7,
        (reg_GEMM_3D_FLOAT_LOOP_4_acc_190_sdt_ftd[3]), LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_lpi_3_dfm_7,
        (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_lpi_3_mx2_7_4[3]), {and_dcpl_1760
        , and_dcpl_1764 , and_dcpl_1766 , and_dcpl_1772});
    LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse = MUX1HOT_v_7_4_2(LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_lshift_itm,
        GEMM_3D_FLOAT_LOOP_4_1_acc_20_itm, GEMM_3D_FLOAT_LOOP_4_acc_185_sdt, LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_lshift_itm,
        {and_dcpl_1760 , and_dcpl_1764 , and_dcpl_1766 , and_dcpl_1772});
    divmod6448_2_diff_1 = conv_u2u_1_8(divmod6448_2_lbuf_7_6) + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)})
        + 8'b00000001;
    if ( divmod6448_2_diff_1[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_7_6 = divmod6448_2_diff_1[0];
    end
    divmod6448_2_lbuf_8_2 = divmod6448_2_lbuf_7_6;
    divmod6448_2_lbuf_7 = divmod6448_2_lbuf_6_4[2];
    divmod6448_2_diff_2 = conv_u2u_2_8({divmod6448_2_lbuf_7_6 , (divmod6448_2_lbuf_6_4[2])})
        + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)}) + 8'b00000001;
    if ( divmod6448_2_diff_2[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_8_2 = divmod6448_2_diff_2[1];
      divmod6448_2_lbuf_7 = divmod6448_2_diff_2[0];
    end
    divmod6448_2_lbuf_9_3 = divmod6448_2_lbuf_8_2;
    divmod6448_2_lbuf_8_3 = divmod6448_2_lbuf_7;
    divmod6448_2_lbuf_7_1 = divmod6448_2_lbuf_6_4[1];
    divmod6448_2_diff_3 = conv_u2u_3_8({divmod6448_2_lbuf_8_2 , divmod6448_2_lbuf_7
        , (divmod6448_2_lbuf_6_4[1])}) + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)})
        + 8'b00000001;
    if ( divmod6448_2_diff_3[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_9_3 = divmod6448_2_diff_3[2];
      divmod6448_2_lbuf_8_3 = divmod6448_2_diff_3[1];
      divmod6448_2_lbuf_7_1 = divmod6448_2_diff_3[0];
    end
    divmod6448_2_lbuf_10_4 = divmod6448_2_lbuf_9_3;
    divmod6448_2_lbuf_9_4 = divmod6448_2_lbuf_8_3;
    divmod6448_2_lbuf_8_4 = divmod6448_2_lbuf_7_1;
    divmod6448_2_lbuf_7_2 = divmod6448_2_lbuf_6_4[0];
    divmod6448_2_diff_4 = conv_u2u_4_8({divmod6448_2_lbuf_9_3 , divmod6448_2_lbuf_8_3
        , divmod6448_2_lbuf_7_1 , (divmod6448_2_lbuf_6_4[0])}) + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)})
        + 8'b00000001;
    if ( divmod6448_2_diff_4[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_10_4 = divmod6448_2_diff_4[3];
      divmod6448_2_lbuf_9_4 = divmod6448_2_diff_4[2];
      divmod6448_2_lbuf_8_4 = divmod6448_2_diff_4[1];
      divmod6448_2_lbuf_7_2 = divmod6448_2_diff_4[0];
    end
    divmod6448_2_lbuf_11_5 = divmod6448_2_lbuf_10_4;
    divmod6448_2_lbuf_10_5 = divmod6448_2_lbuf_9_4;
    divmod6448_2_lbuf_9_5 = divmod6448_2_lbuf_8_4;
    divmod6448_2_lbuf_8_5 = divmod6448_2_lbuf_7_2;
    divmod6448_2_lbuf_7_3 = divmod6448_2_lbuf_3_2[1];
    divmod6448_2_diff_5 = conv_u2u_5_8({divmod6448_2_lbuf_10_4 , divmod6448_2_lbuf_9_4
        , divmod6448_2_lbuf_8_4 , divmod6448_2_lbuf_7_2 , (divmod6448_2_lbuf_3_2[1])})
        + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)}) + 8'b00000001;
    if ( divmod6448_2_diff_5[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_10_5 = divmod6448_2_diff_5[3];
      divmod6448_2_lbuf_11_5 = divmod6448_2_diff_5[4];
      divmod6448_2_lbuf_9_5 = divmod6448_2_diff_5[2];
      divmod6448_2_lbuf_8_5 = divmod6448_2_diff_5[1];
      divmod6448_2_lbuf_7_3 = divmod6448_2_diff_5[0];
    end
    divmod6448_2_lbuf_12_6 = divmod6448_2_lbuf_11_5;
    divmod6448_2_lbuf_11_6 = divmod6448_2_lbuf_10_5;
    divmod6448_2_lbuf_10_6 = divmod6448_2_lbuf_9_5;
    divmod6448_2_lbuf_9_6 = divmod6448_2_lbuf_8_5;
    divmod6448_2_lbuf_8_6 = divmod6448_2_lbuf_7_3;
    divmod6448_2_lbuf_7_4 = divmod6448_2_lbuf_3_2[0];
    divmod6448_2_diff_6 = conv_u2u_6_8({divmod6448_2_lbuf_11_5 , divmod6448_2_lbuf_10_5
        , divmod6448_2_lbuf_9_5 , divmod6448_2_lbuf_8_5 , divmod6448_2_lbuf_7_3 ,
        (divmod6448_2_lbuf_3_2[0])}) + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)})
        + 8'b00000001;
    if ( divmod6448_2_diff_6[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_10_6 = divmod6448_2_diff_6[3];
      divmod6448_2_lbuf_11_6 = divmod6448_2_diff_6[4];
      divmod6448_2_lbuf_9_6 = divmod6448_2_diff_6[2];
      divmod6448_2_lbuf_12_6 = divmod6448_2_diff_6[5];
      divmod6448_2_lbuf_8_6 = divmod6448_2_diff_6[1];
      divmod6448_2_lbuf_7_4 = divmod6448_2_diff_6[0];
    end
    divmod6448_2_lbuf_13_7 = divmod6448_2_lbuf_12_6;
    divmod6448_2_lbuf_12_7 = divmod6448_2_lbuf_11_6;
    divmod6448_2_lbuf_11_7 = divmod6448_2_lbuf_10_6;
    divmod6448_2_lbuf_10_7 = divmod6448_2_lbuf_9_6;
    divmod6448_2_lbuf_9_7 = divmod6448_2_lbuf_8_6;
    divmod6448_2_lbuf_8_7 = divmod6448_2_lbuf_7_4;
    divmod6448_2_lbuf_7_5 = divmod6448_2_lbuf_1_0[1];
    divmod6448_2_diff_7 = conv_u2u_7_8({divmod6448_2_lbuf_12_6 , divmod6448_2_lbuf_11_6
        , divmod6448_2_lbuf_10_6 , divmod6448_2_lbuf_9_6 , divmod6448_2_lbuf_8_6
        , divmod6448_2_lbuf_7_4 , (divmod6448_2_lbuf_1_0[1])}) + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)})
        + 8'b00000001;
    if ( divmod6448_2_diff_7[7] ) begin
    end
    else begin
      divmod6448_2_lbuf_10_7 = divmod6448_2_diff_7[3];
      divmod6448_2_lbuf_11_7 = divmod6448_2_diff_7[4];
      divmod6448_2_lbuf_9_7 = divmod6448_2_diff_7[2];
      divmod6448_2_lbuf_12_7 = divmod6448_2_diff_7[5];
      divmod6448_2_lbuf_8_7 = divmod6448_2_diff_7[1];
      divmod6448_2_lbuf_13_7 = divmod6448_2_diff_7[6];
      divmod6448_2_lbuf_7_5 = divmod6448_2_diff_7[0];
    end
    nl_divmod6448_2_loop951_8_acc_1_nl = ({divmod6448_2_lbuf_13_7 , divmod6448_2_lbuf_12_7
        , divmod6448_2_lbuf_11_7 , divmod6448_2_lbuf_10_7 , divmod6448_2_lbuf_9_7
        , divmod6448_2_lbuf_8_7 , divmod6448_2_lbuf_7_5 , (divmod6448_2_lbuf_1_0[0])})
        + ({1'b1 , (~ LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_mux1h_1_cse)}) + 8'b00000001;
    divmod6448_2_loop951_8_acc_1_nl = nl_divmod6448_2_loop951_8_acc_1_nl[7:0];
    z_out_55_0 = ~ (readslicef_8_1_7(divmod6448_2_loop951_8_acc_1_nl));
    z_out_55_1 = ~ (divmod6448_2_diff_7[7]);
  end

  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_35_nl = MUX1HOT_s_1_3_2(reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      (output_rsci_data_out_d[39]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[39]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_19_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_35_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_36_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[23]),
      (output_rsci_data_out_d[38]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[38]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_37_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[22]),
      (output_rsci_data_out_d[37]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[37]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_20_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_37_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_38_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[21]),
      (output_rsci_data_out_d[36]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[36]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_39_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[20]),
      (output_rsci_data_out_d[35]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[35]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_21_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_39_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_40_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[19]),
      (output_rsci_data_out_d[34]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[34]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_41_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[18]),
      (output_rsci_data_out_d[33]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[33]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_22_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_41_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_42_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[17]),
      (output_rsci_data_out_d[32]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[32]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_43_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[16]),
      (output_rsci_data_out_d[31]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[31]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_23_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_43_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_44_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[15]),
      (output_rsci_data_out_d[30]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[30]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_45_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[14]),
      (output_rsci_data_out_d[29]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[29]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_24_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_45_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_46_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[13]),
      (output_rsci_data_out_d[28]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[28]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_47_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[12]),
      (output_rsci_data_out_d[27]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[27]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_25_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_47_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_48_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[11]),
      (output_rsci_data_out_d[26]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[26]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_49_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[10]),
      (output_rsci_data_out_d[25]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[25]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_26_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_49_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_50_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[9]),
      (output_rsci_data_out_d[24]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[24]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_51_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[8]),
      (output_rsci_data_out_d[23]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[23]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_27_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_51_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_52_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[7]),
      (output_rsci_data_out_d[22]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[22]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_53_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[6]),
      (output_rsci_data_out_d[21]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[21]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_28_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_53_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_54_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[5]),
      (output_rsci_data_out_d[20]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[20]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_55_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[4]),
      (output_rsci_data_out_d[19]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[19]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_29_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_55_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_56_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[3]),
      (output_rsci_data_out_d[18]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[18]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_57_nl = MUX1HOT_s_1_3_2((reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[2]),
      (output_rsci_data_out_d[17]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[17]),
      {and_dcpl_1793 , and_dcpl_1797 , and_dcpl_1802});
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_30_nl = operator_40_24_true_AC_TRN_AC_WRAP_mux1h_57_nl
      & operator_40_24_true_AC_TRN_AC_WRAP_nor_13_cse;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_58_nl = MUX1HOT_s_1_4_2((reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd[1]),
      (reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1[1]),
      (output_rsci_data_out_d[16]), (attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d[16]),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , and_dcpl_1793 , and_dcpl_1797
      , and_dcpl_1802});
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_103_nl = conv_u2s_13_14({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[21])})
      + conv_s2s_12_14({reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_2 , reg_attention_round_1_qr_39_16_3_lpi_3_dfm_1_ftd_3});
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_103_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_103_nl[13:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_102_nl = conv_u2s_15_16({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[23])})
      + conv_s2s_14_16(operator_40_24_true_AC_TRN_AC_WRAP_acc_103_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_102_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_102_nl[15:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_101_nl = conv_u2s_17_18({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[25])})
      + conv_s2s_16_18(operator_40_24_true_AC_TRN_AC_WRAP_acc_102_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_101_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_101_nl[17:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_100_nl = conv_u2s_19_20({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])})
      + conv_s2s_18_20(operator_40_24_true_AC_TRN_AC_WRAP_acc_101_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_100_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_100_nl[19:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_54_nl = conv_u2s_19_20({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[27])})
      + conv_s2s_18_20({reg_SF_LOOP_3_acc_38_1_ftd , reg_SF_LOOP_3_acc_38_1_ftd_1
      , reg_SF_LOOP_3_acc_38_1_ftd_2});
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_54_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_54_nl[19:0];
  assign and_2308_nl = (fsm_output==9'b011111110);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_135_nl = MUX_v_20_2_2(operator_40_24_true_AC_TRN_AC_WRAP_acc_100_nl,
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_54_nl, and_2308_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_114_nl = conv_s2u_20_28(operator_40_24_true_AC_TRN_AC_WRAP_mux_135_nl)
      + conv_u2u_21_28({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])})
      + conv_u2u_23_28({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[29])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])})
      + conv_u2u_25_28({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[31])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])})
      + conv_u2u_27_28({(reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[33])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1[35])});
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_114_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_114_nl[27:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl =  -(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d[7:0]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl[7:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux_3_nl = MUX_v_8_2_2((attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d[7:0]),
      LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_1_cse_1);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_7_nl =
      MUX_v_8_2_2(8'b00000000, LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux_3_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_2_exs_2_0);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl =  -(attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d[7:0]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl[7:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_mux_8_nl = MUX_v_8_2_2((attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d[7:0]),
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_1_cse_1);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_LINEAR_FORWARD_NO_MUL_LOOP_5_3_and_6_nl =
      MUX_v_8_2_2(8'b00000000, LINEAR_FORWARD_NO_MUL_LOOP_5_3_mux_8_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_2_exs_2_0);
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_23_nl = and_dcpl_1793 | and_dcpl_1802;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_59_nl = MUX1HOT_v_28_3_2(operator_40_24_true_AC_TRN_AC_WRAP_acc_114_nl,
      (signext_28_8(LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_7_nl)),
      (signext_28_8(LINEAR_FORWARD_NO_MUL_LOOP_5_3_LINEAR_FORWARD_NO_MUL_LOOP_5_3_and_6_nl)),
      {operator_40_24_true_AC_TRN_AC_WRAP_or_10_cse , operator_40_24_true_AC_TRN_AC_WRAP_or_23_nl
      , and_dcpl_1797});
  assign nl_z_out_56 = conv_u2u_29_30({operator_40_24_true_AC_TRN_AC_WRAP_and_17_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_1_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_and_17_cse , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_1_cse
      , operator_40_24_true_AC_TRN_AC_WRAP_and_17_cse , operator_40_24_true_AC_TRN_AC_WRAP_and_19_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_36_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_20_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_38_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_21_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_40_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_22_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_42_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_23_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_44_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_24_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_46_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_25_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_48_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_26_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_50_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_27_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_52_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_28_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_54_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_29_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_56_nl , operator_40_24_true_AC_TRN_AC_WRAP_and_30_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_58_nl}) + conv_s2u_28_30(operator_40_24_true_AC_TRN_AC_WRAP_mux1h_59_nl);
  assign z_out_56 = nl_z_out_56[29:0];
  assign nl_z_out_57 = (~ (z_out_9[30:0])) + 31'b0000000000000000000000000000001;
  assign z_out_57 = nl_z_out_57[30:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_6_nl = MUX_v_20_2_2((z_out_11[79:60]),
      (signext_20_16(~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39:24]))), and_dcpl_1832);
  assign not_3405_nl = ~ and_dcpl_1837;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_4_nl
      = MUX_v_20_2_2(20'b00000000000000000000, operator_40_24_true_AC_TRN_AC_WRAP_mux_6_nl,
      not_3405_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_14_nl = MUX1HOT_v_24_3_2((z_out_11[59:36]),
      (~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[23:0])), (z_out_10[55:32]), {and_dcpl_1825
      , and_dcpl_1832 , and_dcpl_1837});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_15_nl = MUX1HOT_v_16_3_2((z_out_11[35:20]),
      16'b0100000000000000, (z_out_10[31:16]), {and_dcpl_1825 , and_dcpl_1832 , and_dcpl_1837});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_7_nl = MUX_v_2_2_2(LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_42_41,
      (signext_2_1(exs_tmp_40_54_10[44])), and_dcpl_1832);
  assign not_3406_nl = ~ and_dcpl_1837;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_5_nl
      = MUX_v_2_2_2(2'b00, operator_40_24_true_AC_TRN_AC_WRAP_mux_7_nl, not_3406_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_8_nl = MUX_s_1_2_2(LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_40,
      (exs_tmp_40_54_10[44]), and_dcpl_1832);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_6_nl
      = operator_40_24_true_AC_TRN_AC_WRAP_mux_8_nl & (~ and_dcpl_1837);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_9_nl = MUX_v_16_2_2((LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[39:24]),
      (signext_16_15(exs_tmp_40_54_10[44:30])), and_dcpl_1832);
  assign not_3408_nl = ~ and_dcpl_1837;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_7_nl
      = MUX_v_16_2_2(16'b0000000000000000, operator_40_24_true_AC_TRN_AC_WRAP_mux_9_nl,
      not_3408_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_16_nl = MUX1HOT_v_24_3_2((LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[23:0]),
      (exs_tmp_40_54_10[29:6]), (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[39:16]), {and_dcpl_1825
      , and_dcpl_1832 , and_dcpl_1837});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_17_nl = MUX1HOT_v_6_3_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0[17:12]),
      (exs_tmp_40_54_10[5:0]), (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[15:10]), {and_dcpl_1825
      , and_dcpl_1832 , and_dcpl_1837});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_18_nl = MUX1HOT_v_10_3_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_8_psp_56_0[11:2]),
      ({(z_out_41_52_8[1:0]) , (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt_1[1:0]) ,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_sdt[5:0])}), (GEMM_3D_FLOAT_LOOP_4_acc_193_itm[9:0]),
      {and_dcpl_1825 , and_dcpl_1832 , and_dcpl_1837});
  assign nl_z_out_58 = conv_s2u_60_61({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_4_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_14_nl , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_15_nl})
      + conv_s2u_59_61({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_5_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_6_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_and_7_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_16_nl , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_17_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_mux1h_18_nl});
  assign z_out_58 = nl_z_out_58[60:0];
  assign RMS_NORM_LOOP_1_1_or_12_nl = and_dcpl_1853 | and_dcpl_1869 | and_dcpl_1870;
  assign RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mux_1_nl = MUX_v_40_2_2(({reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1}),
      z_out_61, RMS_NORM_LOOP_1_1_or_12_nl);
  assign RMS_NORM_LOOP_1_1_or_13_nl = (nor_609_cse & nor_525_cse & and_dcpl_1840)
      | (and_dcpl_1855 & and_dcpl_1070) | (and_dcpl_176 & (fsm_output[5:4]==2'b01)
      & and_dcpl_1857);
  assign RMS_NORM_LOOP_1_1_or_14_nl = and_dcpl_1853 | (and_dcpl_1852 & and_dcpl_1840)
      | and_dcpl_1869;
  assign and_2319_nl = and_dcpl_176 & and_dcpl_829 & (fsm_output[3]) & (fsm_output[1])
      & and_dcpl_107;
  assign and_2320_nl = and_dcpl_1852 & and_dcpl_1857;
  assign RMS_NORM_LOOP_1_1_mux1h_14_nl = MUX1HOT_v_40_5_2((z_out_11[55:16]), LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0,
      (z_out_10[55:16]), LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0, QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva,
      {RMS_NORM_LOOP_1_1_or_13_nl , RMS_NORM_LOOP_1_1_or_14_nl , and_2319_nl , and_2320_nl
      , and_dcpl_1870});
  assign nl_z_out_59 = RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mux_1_nl + RMS_NORM_LOOP_1_1_mux1h_14_nl;
  assign z_out_59 = nl_z_out_59[39:0];
  assign SOFTMAX_LOOP_4_x_mux_4_nl = MUX_v_40_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d[39:0]),
      ({reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd
      , reg_GEMM_3D_FLOAT_LOOP_4_17_slc_GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mul_55_16_ftd_1}),
      and_dcpl_1884);
  assign SOFTMAX_LOOP_4_x_SOFTMAX_LOOP_4_x_nand_1_nl = ~(and_dcpl_1884 & (~(and_dcpl_749
      & (fsm_output[5:0]==6'b010110))));
  assign SOFTMAX_LOOP_4_x_mux_5_nl = MUX_s_1_2_2((~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39])),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      and_dcpl_1884);
  assign SOFTMAX_LOOP_4_x_mux_6_nl = MUX_v_24_2_2((~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[38:15])),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
      and_dcpl_1884);
  assign SOFTMAX_LOOP_4_x_mux_7_nl = MUX_v_15_2_2((~ (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[14:0])),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
      and_dcpl_1884);
  assign nl_acc_57_nl = ({SOFTMAX_LOOP_4_x_mux_4_nl , SOFTMAX_LOOP_4_x_SOFTMAX_LOOP_4_x_nand_1_nl})
      + ({SOFTMAX_LOOP_4_x_mux_5_nl , SOFTMAX_LOOP_4_x_mux_6_nl , SOFTMAX_LOOP_4_x_mux_7_nl
      , 1'b1});
  assign acc_57_nl = nl_acc_57_nl[40:0];
  assign z_out_60 = readslicef_41_40_1(acc_57_nl);
  assign nor_921_nl = ~((fsm_output[6:5]!=2'b10));
  assign mux_1100_nl = MUX_s_1_2_2(nor_921_nl, nor_696_cse, fsm_output[4]);
  assign nor_923_nl = ~((fsm_output[6:4]!=3'b011));
  assign mux_1099_nl = MUX_s_1_2_2(mux_1100_nl, nor_923_nl, fsm_output[3]);
  assign GEMM_3D_FLOAT_LOOP_4_or_30_nl = (mux_1099_nl & (fsm_output[7]) & nor_439_cse
      & and_dcpl_107) | and_dcpl_1901 | (and_dcpl_749 & (fsm_output[5]) & (fsm_output[4])
      & (~ (fsm_output[3])) & (fsm_output[1]) & and_dcpl_107);
  assign GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mux_9_nl = MUX_v_40_2_2(GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8,
      z_out_62, GEMM_3D_FLOAT_LOOP_4_or_30_nl);
  assign GEMM_3D_FLOAT_LOOP_4_mux_28_nl = MUX_v_40_2_2(LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0,
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_acc_13_psp_39_0, and_dcpl_1901);
  assign nl_z_out_61 = GEMM_3D_FLOAT_LOOP_4_GEMM_3D_FLOAT_LOOP_4_mux_9_nl + GEMM_3D_FLOAT_LOOP_4_mux_28_nl;
  assign z_out_61 = nl_z_out_61[39:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_255_nl = z_out_60 + LINEAR_FORWARD_NO_MUL_LOOP_2_1_acc_13_sdt_39_0;
  assign GEMM_3D_FLOAT_LOOP_4_acc_255_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_255_nl[39:0];
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_47_nl = MUX1HOT_v_40_3_2(GEMM_3D_FLOAT_LOOP_4_acc_212_mx0w8,
      (z_out_11[55:16]), GEMM_3D_FLOAT_LOOP_4_acc_255_nl, {and_dcpl_1910 , and_dcpl_1917
      , and_dcpl_1923});
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_48_nl = MUX1HOT_s_1_3_2((GEMM_3D_FLOAT_LOOP_4_acc_193_itm[39]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[39]), {and_dcpl_1910 , and_dcpl_1917
      , and_dcpl_1923});
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_49_nl = MUX1HOT_v_24_3_2((GEMM_3D_FLOAT_LOOP_4_acc_193_itm[38:15]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_1,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[38:15]), {and_dcpl_1910 , and_dcpl_1917
      , and_dcpl_1923});
  assign GEMM_3D_FLOAT_LOOP_4_mux1h_50_nl = MUX1HOT_v_15_3_2((GEMM_3D_FLOAT_LOOP_4_acc_193_itm[14:0]),
      reg_GEMM_3D_FLOAT_LOOP_4_1_4_slc_GEMM_3D_FLOAT_LOOP_4_1_GEMM_3D_FLOAT_LOOP_4_1_mul_55_16_ftd_2,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_3_acc_12_sdt_39_0[14:0]), {and_dcpl_1910 , and_dcpl_1917
      , and_dcpl_1923});
  assign nl_z_out_62 = GEMM_3D_FLOAT_LOOP_4_mux1h_47_nl + ({GEMM_3D_FLOAT_LOOP_4_mux1h_48_nl
      , GEMM_3D_FLOAT_LOOP_4_mux1h_49_nl , GEMM_3D_FLOAT_LOOP_4_mux1h_50_nl});
  assign z_out_62 = nl_z_out_62[39:0];

  function automatic  MUX1HOT_s_1_11_2;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [10:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    MUX1HOT_s_1_11_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_12_2;
    input  input_11;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [11:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    result = result | (input_11 & sel[11]);
    MUX1HOT_s_1_12_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_15_2;
    input  input_14;
    input  input_13;
    input  input_12;
    input  input_11;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [14:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    result = result | (input_11 & sel[11]);
    result = result | (input_12 & sel[12]);
    result = result | (input_13 & sel[13]);
    result = result | (input_14 & sel[14]);
    MUX1HOT_s_1_15_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_16_2;
    input  input_15;
    input  input_14;
    input  input_13;
    input  input_12;
    input  input_11;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [15:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    result = result | (input_11 & sel[11]);
    result = result | (input_12 & sel[12]);
    result = result | (input_13 & sel[13]);
    result = result | (input_14 & sel[14]);
    result = result | (input_15 & sel[15]);
    MUX1HOT_s_1_16_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_17_2;
    input  input_16;
    input  input_15;
    input  input_14;
    input  input_13;
    input  input_12;
    input  input_11;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [16:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    result = result | (input_11 & sel[11]);
    result = result | (input_12 & sel[12]);
    result = result | (input_13 & sel[13]);
    result = result | (input_14 & sel[14]);
    result = result | (input_15 & sel[15]);
    result = result | (input_16 & sel[16]);
    MUX1HOT_s_1_17_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_18_2;
    input  input_17;
    input  input_16;
    input  input_15;
    input  input_14;
    input  input_13;
    input  input_12;
    input  input_11;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [17:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    result = result | (input_11 & sel[11]);
    result = result | (input_12 & sel[12]);
    result = result | (input_13 & sel[13]);
    result = result | (input_14 & sel[14]);
    result = result | (input_15 & sel[15]);
    result = result | (input_16 & sel[16]);
    result = result | (input_17 & sel[17]);
    MUX1HOT_s_1_18_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_4_2;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [3:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_5_2;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [4:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    MUX1HOT_s_1_5_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_7_2;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [6:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    MUX1HOT_s_1_7_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_8_2;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [7:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    MUX1HOT_s_1_8_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_9_2;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [8:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    MUX1HOT_s_1_9_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_3_2;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [2:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | (input_1 & {10{sel[1]}});
    result = result | (input_2 & {10{sel[2]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function automatic [9:0] MUX1HOT_v_10_4_2;
    input [9:0] input_3;
    input [9:0] input_2;
    input [9:0] input_1;
    input [9:0] input_0;
    input [3:0] sel;
    reg [9:0] result;
  begin
    result = input_0 & {10{sel[0]}};
    result = result | (input_1 & {10{sel[1]}});
    result = result | (input_2 & {10{sel[2]}});
    result = result | (input_3 & {10{sel[3]}});
    MUX1HOT_v_10_4_2 = result;
  end
  endfunction


  function automatic [12:0] MUX1HOT_v_13_4_2;
    input [12:0] input_3;
    input [12:0] input_2;
    input [12:0] input_1;
    input [12:0] input_0;
    input [3:0] sel;
    reg [12:0] result;
  begin
    result = input_0 & {13{sel[0]}};
    result = result | (input_1 & {13{sel[1]}});
    result = result | (input_2 & {13{sel[2]}});
    result = result | (input_3 & {13{sel[3]}});
    MUX1HOT_v_13_4_2 = result;
  end
  endfunction


  function automatic [13:0] MUX1HOT_v_14_3_2;
    input [13:0] input_2;
    input [13:0] input_1;
    input [13:0] input_0;
    input [2:0] sel;
    reg [13:0] result;
  begin
    result = input_0 & {14{sel[0]}};
    result = result | (input_1 & {14{sel[1]}});
    result = result | (input_2 & {14{sel[2]}});
    MUX1HOT_v_14_3_2 = result;
  end
  endfunction


  function automatic [14:0] MUX1HOT_v_15_12_2;
    input [14:0] input_11;
    input [14:0] input_10;
    input [14:0] input_9;
    input [14:0] input_8;
    input [14:0] input_7;
    input [14:0] input_6;
    input [14:0] input_5;
    input [14:0] input_4;
    input [14:0] input_3;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [11:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | (input_1 & {15{sel[1]}});
    result = result | (input_2 & {15{sel[2]}});
    result = result | (input_3 & {15{sel[3]}});
    result = result | (input_4 & {15{sel[4]}});
    result = result | (input_5 & {15{sel[5]}});
    result = result | (input_6 & {15{sel[6]}});
    result = result | (input_7 & {15{sel[7]}});
    result = result | (input_8 & {15{sel[8]}});
    result = result | (input_9 & {15{sel[9]}});
    result = result | (input_10 & {15{sel[10]}});
    result = result | (input_11 & {15{sel[11]}});
    MUX1HOT_v_15_12_2 = result;
  end
  endfunction


  function automatic [14:0] MUX1HOT_v_15_3_2;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [2:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | (input_1 & {15{sel[1]}});
    result = result | (input_2 & {15{sel[2]}});
    MUX1HOT_v_15_3_2 = result;
  end
  endfunction


  function automatic [14:0] MUX1HOT_v_15_4_2;
    input [14:0] input_3;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [3:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | (input_1 & {15{sel[1]}});
    result = result | (input_2 & {15{sel[2]}});
    result = result | (input_3 & {15{sel[3]}});
    MUX1HOT_v_15_4_2 = result;
  end
  endfunction


  function automatic [14:0] MUX1HOT_v_15_5_2;
    input [14:0] input_4;
    input [14:0] input_3;
    input [14:0] input_2;
    input [14:0] input_1;
    input [14:0] input_0;
    input [4:0] sel;
    reg [14:0] result;
  begin
    result = input_0 & {15{sel[0]}};
    result = result | (input_1 & {15{sel[1]}});
    result = result | (input_2 & {15{sel[2]}});
    result = result | (input_3 & {15{sel[3]}});
    result = result | (input_4 & {15{sel[4]}});
    MUX1HOT_v_15_5_2 = result;
  end
  endfunction


  function automatic [15:0] MUX1HOT_v_16_3_2;
    input [15:0] input_2;
    input [15:0] input_1;
    input [15:0] input_0;
    input [2:0] sel;
    reg [15:0] result;
  begin
    result = input_0 & {16{sel[0]}};
    result = result | (input_1 & {16{sel[1]}});
    result = result | (input_2 & {16{sel[2]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function automatic [18:0] MUX1HOT_v_19_4_2;
    input [18:0] input_3;
    input [18:0] input_2;
    input [18:0] input_1;
    input [18:0] input_0;
    input [3:0] sel;
    reg [18:0] result;
  begin
    result = input_0 & {19{sel[0]}};
    result = result | (input_1 & {19{sel[1]}});
    result = result | (input_2 & {19{sel[2]}});
    result = result | (input_3 & {19{sel[3]}});
    MUX1HOT_v_19_4_2 = result;
  end
  endfunction


  function automatic [19:0] MUX1HOT_v_20_3_2;
    input [19:0] input_2;
    input [19:0] input_1;
    input [19:0] input_0;
    input [2:0] sel;
    reg [19:0] result;
  begin
    result = input_0 & {20{sel[0]}};
    result = result | (input_1 & {20{sel[1]}});
    result = result | (input_2 & {20{sel[2]}});
    MUX1HOT_v_20_3_2 = result;
  end
  endfunction


  function automatic [20:0] MUX1HOT_v_21_3_2;
    input [20:0] input_2;
    input [20:0] input_1;
    input [20:0] input_0;
    input [2:0] sel;
    reg [20:0] result;
  begin
    result = input_0 & {21{sel[0]}};
    result = result | (input_1 & {21{sel[1]}});
    result = result | (input_2 & {21{sel[2]}});
    MUX1HOT_v_21_3_2 = result;
  end
  endfunction


  function automatic [20:0] MUX1HOT_v_21_4_2;
    input [20:0] input_3;
    input [20:0] input_2;
    input [20:0] input_1;
    input [20:0] input_0;
    input [3:0] sel;
    reg [20:0] result;
  begin
    result = input_0 & {21{sel[0]}};
    result = result | (input_1 & {21{sel[1]}});
    result = result | (input_2 & {21{sel[2]}});
    result = result | (input_3 & {21{sel[3]}});
    MUX1HOT_v_21_4_2 = result;
  end
  endfunction


  function automatic [23:0] MUX1HOT_v_24_13_2;
    input [23:0] input_12;
    input [23:0] input_11;
    input [23:0] input_10;
    input [23:0] input_9;
    input [23:0] input_8;
    input [23:0] input_7;
    input [23:0] input_6;
    input [23:0] input_5;
    input [23:0] input_4;
    input [23:0] input_3;
    input [23:0] input_2;
    input [23:0] input_1;
    input [23:0] input_0;
    input [12:0] sel;
    reg [23:0] result;
  begin
    result = input_0 & {24{sel[0]}};
    result = result | (input_1 & {24{sel[1]}});
    result = result | (input_2 & {24{sel[2]}});
    result = result | (input_3 & {24{sel[3]}});
    result = result | (input_4 & {24{sel[4]}});
    result = result | (input_5 & {24{sel[5]}});
    result = result | (input_6 & {24{sel[6]}});
    result = result | (input_7 & {24{sel[7]}});
    result = result | (input_8 & {24{sel[8]}});
    result = result | (input_9 & {24{sel[9]}});
    result = result | (input_10 & {24{sel[10]}});
    result = result | (input_11 & {24{sel[11]}});
    result = result | (input_12 & {24{sel[12]}});
    MUX1HOT_v_24_13_2 = result;
  end
  endfunction


  function automatic [23:0] MUX1HOT_v_24_3_2;
    input [23:0] input_2;
    input [23:0] input_1;
    input [23:0] input_0;
    input [2:0] sel;
    reg [23:0] result;
  begin
    result = input_0 & {24{sel[0]}};
    result = result | (input_1 & {24{sel[1]}});
    result = result | (input_2 & {24{sel[2]}});
    MUX1HOT_v_24_3_2 = result;
  end
  endfunction


  function automatic [23:0] MUX1HOT_v_24_4_2;
    input [23:0] input_3;
    input [23:0] input_2;
    input [23:0] input_1;
    input [23:0] input_0;
    input [3:0] sel;
    reg [23:0] result;
  begin
    result = input_0 & {24{sel[0]}};
    result = result | (input_1 & {24{sel[1]}});
    result = result | (input_2 & {24{sel[2]}});
    result = result | (input_3 & {24{sel[3]}});
    MUX1HOT_v_24_4_2 = result;
  end
  endfunction


  function automatic [23:0] MUX1HOT_v_24_5_2;
    input [23:0] input_4;
    input [23:0] input_3;
    input [23:0] input_2;
    input [23:0] input_1;
    input [23:0] input_0;
    input [4:0] sel;
    reg [23:0] result;
  begin
    result = input_0 & {24{sel[0]}};
    result = result | (input_1 & {24{sel[1]}});
    result = result | (input_2 & {24{sel[2]}});
    result = result | (input_3 & {24{sel[3]}});
    result = result | (input_4 & {24{sel[4]}});
    MUX1HOT_v_24_5_2 = result;
  end
  endfunction


  function automatic [27:0] MUX1HOT_v_28_3_2;
    input [27:0] input_2;
    input [27:0] input_1;
    input [27:0] input_0;
    input [2:0] sel;
    reg [27:0] result;
  begin
    result = input_0 & {28{sel[0]}};
    result = result | (input_1 & {28{sel[1]}});
    result = result | (input_2 & {28{sel[2]}});
    MUX1HOT_v_28_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_18_2;
    input [1:0] input_17;
    input [1:0] input_16;
    input [1:0] input_15;
    input [1:0] input_14;
    input [1:0] input_13;
    input [1:0] input_12;
    input [1:0] input_11;
    input [1:0] input_10;
    input [1:0] input_9;
    input [1:0] input_8;
    input [1:0] input_7;
    input [1:0] input_6;
    input [1:0] input_5;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [17:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    result = result | (input_5 & {2{sel[5]}});
    result = result | (input_6 & {2{sel[6]}});
    result = result | (input_7 & {2{sel[7]}});
    result = result | (input_8 & {2{sel[8]}});
    result = result | (input_9 & {2{sel[9]}});
    result = result | (input_10 & {2{sel[10]}});
    result = result | (input_11 & {2{sel[11]}});
    result = result | (input_12 & {2{sel[12]}});
    result = result | (input_13 & {2{sel[13]}});
    result = result | (input_14 & {2{sel[14]}});
    result = result | (input_15 & {2{sel[15]}});
    result = result | (input_16 & {2{sel[16]}});
    result = result | (input_17 & {2{sel[17]}});
    MUX1HOT_v_2_18_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_5_2;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [4:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    MUX1HOT_v_2_5_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_6_2;
    input [1:0] input_5;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [5:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    result = result | (input_5 & {2{sel[5]}});
    MUX1HOT_v_2_6_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_7_2;
    input [1:0] input_6;
    input [1:0] input_5;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [6:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    result = result | (input_5 & {2{sel[5]}});
    result = result | (input_6 & {2{sel[6]}});
    MUX1HOT_v_2_7_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_8_2;
    input [1:0] input_7;
    input [1:0] input_6;
    input [1:0] input_5;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [7:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    result = result | (input_5 & {2{sel[5]}});
    result = result | (input_6 & {2{sel[6]}});
    result = result | (input_7 & {2{sel[7]}});
    MUX1HOT_v_2_8_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_9_2;
    input [1:0] input_8;
    input [1:0] input_7;
    input [1:0] input_6;
    input [1:0] input_5;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [8:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    result = result | (input_5 & {2{sel[5]}});
    result = result | (input_6 & {2{sel[6]}});
    result = result | (input_7 & {2{sel[7]}});
    result = result | (input_8 & {2{sel[8]}});
    MUX1HOT_v_2_9_2 = result;
  end
  endfunction


  function automatic [29:0] MUX1HOT_v_30_3_2;
    input [29:0] input_2;
    input [29:0] input_1;
    input [29:0] input_0;
    input [2:0] sel;
    reg [29:0] result;
  begin
    result = input_0 & {30{sel[0]}};
    result = result | (input_1 & {30{sel[1]}});
    result = result | (input_2 & {30{sel[2]}});
    MUX1HOT_v_30_3_2 = result;
  end
  endfunction


  function automatic [30:0] MUX1HOT_v_31_3_2;
    input [30:0] input_2;
    input [30:0] input_1;
    input [30:0] input_0;
    input [2:0] sel;
    reg [30:0] result;
  begin
    result = input_0 & {31{sel[0]}};
    result = result | (input_1 & {31{sel[1]}});
    result = result | (input_2 & {31{sel[2]}});
    MUX1HOT_v_31_3_2 = result;
  end
  endfunction


  function automatic [30:0] MUX1HOT_v_31_6_2;
    input [30:0] input_5;
    input [30:0] input_4;
    input [30:0] input_3;
    input [30:0] input_2;
    input [30:0] input_1;
    input [30:0] input_0;
    input [5:0] sel;
    reg [30:0] result;
  begin
    result = input_0 & {31{sel[0]}};
    result = result | (input_1 & {31{sel[1]}});
    result = result | (input_2 & {31{sel[2]}});
    result = result | (input_3 & {31{sel[3]}});
    result = result | (input_4 & {31{sel[4]}});
    result = result | (input_5 & {31{sel[5]}});
    MUX1HOT_v_31_6_2 = result;
  end
  endfunction


  function automatic [34:0] MUX1HOT_v_35_7_2;
    input [34:0] input_6;
    input [34:0] input_5;
    input [34:0] input_4;
    input [34:0] input_3;
    input [34:0] input_2;
    input [34:0] input_1;
    input [34:0] input_0;
    input [6:0] sel;
    reg [34:0] result;
  begin
    result = input_0 & {35{sel[0]}};
    result = result | (input_1 & {35{sel[1]}});
    result = result | (input_2 & {35{sel[2]}});
    result = result | (input_3 & {35{sel[3]}});
    result = result | (input_4 & {35{sel[4]}});
    result = result | (input_5 & {35{sel[5]}});
    result = result | (input_6 & {35{sel[6]}});
    MUX1HOT_v_35_7_2 = result;
  end
  endfunction


  function automatic [35:0] MUX1HOT_v_36_9_2;
    input [35:0] input_8;
    input [35:0] input_7;
    input [35:0] input_6;
    input [35:0] input_5;
    input [35:0] input_4;
    input [35:0] input_3;
    input [35:0] input_2;
    input [35:0] input_1;
    input [35:0] input_0;
    input [8:0] sel;
    reg [35:0] result;
  begin
    result = input_0 & {36{sel[0]}};
    result = result | (input_1 & {36{sel[1]}});
    result = result | (input_2 & {36{sel[2]}});
    result = result | (input_3 & {36{sel[3]}});
    result = result | (input_4 & {36{sel[4]}});
    result = result | (input_5 & {36{sel[5]}});
    result = result | (input_6 & {36{sel[6]}});
    result = result | (input_7 & {36{sel[7]}});
    result = result | (input_8 & {36{sel[8]}});
    MUX1HOT_v_36_9_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_4_2;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [3:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_6_2;
    input [2:0] input_5;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [5:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    result = result | (input_5 & {3{sel[5]}});
    MUX1HOT_v_3_6_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_7_2;
    input [2:0] input_6;
    input [2:0] input_5;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [6:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    result = result | (input_5 & {3{sel[5]}});
    result = result | (input_6 & {3{sel[6]}});
    MUX1HOT_v_3_7_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_9_2;
    input [2:0] input_8;
    input [2:0] input_7;
    input [2:0] input_6;
    input [2:0] input_5;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [8:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    result = result | (input_5 & {3{sel[5]}});
    result = result | (input_6 & {3{sel[6]}});
    result = result | (input_7 & {3{sel[7]}});
    result = result | (input_8 & {3{sel[8]}});
    MUX1HOT_v_3_9_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_3_2;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [2:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    MUX1HOT_v_40_3_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_4_2;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [3:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    MUX1HOT_v_40_4_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_5_2;
    input [39:0] input_4;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [4:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    result = result | (input_4 & {40{sel[4]}});
    MUX1HOT_v_40_5_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_6_2;
    input [39:0] input_5;
    input [39:0] input_4;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [5:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    result = result | (input_4 & {40{sel[4]}});
    result = result | (input_5 & {40{sel[5]}});
    MUX1HOT_v_40_6_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_4_2;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [3:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    result = result | (input_3 & {4{sel[3]}});
    MUX1HOT_v_4_4_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_5_2;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [4:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    result = result | (input_3 & {4{sel[3]}});
    result = result | (input_4 & {4{sel[4]}});
    MUX1HOT_v_4_5_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_7_2;
    input [3:0] input_6;
    input [3:0] input_5;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [6:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    result = result | (input_3 & {4{sel[3]}});
    result = result | (input_4 & {4{sel[4]}});
    result = result | (input_5 & {4{sel[5]}});
    result = result | (input_6 & {4{sel[6]}});
    MUX1HOT_v_4_7_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_8_2;
    input [3:0] input_7;
    input [3:0] input_6;
    input [3:0] input_5;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [7:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    result = result | (input_3 & {4{sel[3]}});
    result = result | (input_4 & {4{sel[4]}});
    result = result | (input_5 & {4{sel[5]}});
    result = result | (input_6 & {4{sel[6]}});
    result = result | (input_7 & {4{sel[7]}});
    MUX1HOT_v_4_8_2 = result;
  end
  endfunction


  function automatic [51:0] MUX1HOT_v_52_3_2;
    input [51:0] input_2;
    input [51:0] input_1;
    input [51:0] input_0;
    input [2:0] sel;
    reg [51:0] result;
  begin
    result = input_0 & {52{sel[0]}};
    result = result | (input_1 & {52{sel[1]}});
    result = result | (input_2 & {52{sel[2]}});
    MUX1HOT_v_52_3_2 = result;
  end
  endfunction


  function automatic [56:0] MUX1HOT_v_57_3_2;
    input [56:0] input_2;
    input [56:0] input_1;
    input [56:0] input_0;
    input [2:0] sel;
    reg [56:0] result;
  begin
    result = input_0 & {57{sel[0]}};
    result = result | (input_1 & {57{sel[1]}});
    result = result | (input_2 & {57{sel[2]}});
    MUX1HOT_v_57_3_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_3_2;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [2:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | (input_1 & {5{sel[1]}});
    result = result | (input_2 & {5{sel[2]}});
    MUX1HOT_v_5_3_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_5_2;
    input [4:0] input_4;
    input [4:0] input_3;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [4:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | (input_1 & {5{sel[1]}});
    result = result | (input_2 & {5{sel[2]}});
    result = result | (input_3 & {5{sel[3]}});
    result = result | (input_4 & {5{sel[4]}});
    MUX1HOT_v_5_5_2 = result;
  end
  endfunction


  function automatic [5:0] MUX1HOT_v_6_3_2;
    input [5:0] input_2;
    input [5:0] input_1;
    input [5:0] input_0;
    input [2:0] sel;
    reg [5:0] result;
  begin
    result = input_0 & {6{sel[0]}};
    result = result | (input_1 & {6{sel[1]}});
    result = result | (input_2 & {6{sel[2]}});
    MUX1HOT_v_6_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_4_2;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [3:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    result = result | (input_3 & {7{sel[3]}});
    MUX1HOT_v_7_4_2 = result;
  end
  endfunction


  function automatic [79:0] MUX1HOT_v_80_7_2;
    input [79:0] input_6;
    input [79:0] input_5;
    input [79:0] input_4;
    input [79:0] input_3;
    input [79:0] input_2;
    input [79:0] input_1;
    input [79:0] input_0;
    input [6:0] sel;
    reg [79:0] result;
  begin
    result = input_0 & {80{sel[0]}};
    result = result | (input_1 & {80{sel[1]}});
    result = result | (input_2 & {80{sel[2]}});
    result = result | (input_3 & {80{sel[3]}});
    result = result | (input_4 & {80{sel[4]}});
    result = result | (input_5 & {80{sel[5]}});
    result = result | (input_6 & {80{sel[6]}});
    MUX1HOT_v_80_7_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_5_2;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [4:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    result = result | (input_3 & {8{sel[3]}});
    result = result | (input_4 & {8{sel[4]}});
    MUX1HOT_v_8_5_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_6_2;
    input [7:0] input_5;
    input [7:0] input_4;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [5:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    result = result | (input_3 & {8{sel[3]}});
    result = result | (input_4 & {8{sel[4]}});
    result = result | (input_5 & {8{sel[5]}});
    MUX1HOT_v_8_6_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_3_2;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [2:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_4_2;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [3:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    MUX1HOT_v_9_4_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_5_2;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [4:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    MUX1HOT_v_9_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_6_2;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [5:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    result = result | (input_5 & {9{sel[5]}});
    MUX1HOT_v_9_6_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_7_2;
    input [8:0] input_6;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [6:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    result = result | (input_5 & {9{sel[5]}});
    result = result | (input_6 & {9{sel[6]}});
    MUX1HOT_v_9_7_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_8_2;
    input [8:0] input_7;
    input [8:0] input_6;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [7:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    result = result | (input_5 & {9{sel[5]}});
    result = result | (input_6 & {9{sel[6]}});
    result = result | (input_7 & {9{sel[7]}});
    MUX1HOT_v_9_8_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_9_2;
    input [8:0] input_8;
    input [8:0] input_7;
    input [8:0] input_6;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [8:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    result = result | (input_5 & {9{sel[5]}});
    result = result | (input_6 & {9{sel[6]}});
    result = result | (input_7 & {9{sel[7]}});
    result = result | (input_8 & {9{sel[8]}});
    MUX1HOT_v_9_9_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input  sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [14:0] MUX_v_15_2_2;
    input [14:0] input_0;
    input [14:0] input_1;
    input  sel;
    reg [14:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_15_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [16:0] MUX_v_17_2_2;
    input [16:0] input_0;
    input [16:0] input_1;
    input  sel;
    reg [16:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_17_2_2 = result;
  end
  endfunction


  function automatic [19:0] MUX_v_20_2_2;
    input [19:0] input_0;
    input [19:0] input_1;
    input  sel;
    reg [19:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_20_2_2 = result;
  end
  endfunction


  function automatic [20:0] MUX_v_21_2_2;
    input [20:0] input_0;
    input [20:0] input_1;
    input  sel;
    reg [20:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_21_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [27:0] MUX_v_28_2_2;
    input [27:0] input_0;
    input [27:0] input_1;
    input  sel;
    reg [27:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_28_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input  sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [34:0] MUX_v_35_2_2;
    input [34:0] input_0;
    input [34:0] input_1;
    input  sel;
    reg [34:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_35_2_2 = result;
  end
  endfunction


  function automatic [35:0] MUX_v_36_2_2;
    input [35:0] input_0;
    input [35:0] input_1;
    input  sel;
    reg [35:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_36_2_2 = result;
  end
  endfunction


  function automatic [38:0] MUX_v_39_2_2;
    input [38:0] input_0;
    input [38:0] input_1;
    input  sel;
    reg [38:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_39_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [39:0] MUX_v_40_2_2;
    input [39:0] input_0;
    input [39:0] input_1;
    input  sel;
    reg [39:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_40_2_2 = result;
  end
  endfunction


  function automatic [40:0] MUX_v_41_2_2;
    input [40:0] input_0;
    input [40:0] input_1;
    input  sel;
    reg [40:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_41_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input  sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_2_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input  sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [8:0] readslicef_10_9_1;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_10_9_1 = tmp[8:0];
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_18_1_17;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 17;
    readslicef_18_1_17 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_24_1_23;
    input [23:0] vector;
    reg [23:0] tmp;
  begin
    tmp = vector >> 23;
    readslicef_24_1_23 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_41_1_40;
    input [40:0] vector;
    reg [40:0] tmp;
  begin
    tmp = vector >> 40;
    readslicef_41_1_40 = tmp[0:0];
  end
  endfunction


  function automatic [39:0] readslicef_41_40_1;
    input [40:0] vector;
    reg [40:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_41_40_1 = tmp[39:0];
  end
  endfunction


  function automatic [39:0] readslicef_42_40_2;
    input [41:0] vector;
    reg [41:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_42_40_2 = tmp[39:0];
  end
  endfunction


  function automatic [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function automatic [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function automatic [39:0] readslicef_56_40_16;
    input [55:0] vector;
    reg [55:0] tmp;
  begin
    tmp = vector >> 16;
    readslicef_56_40_16 = tmp[39:0];
  end
  endfunction


  function automatic [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function automatic [39:0] readslicef_72_40_32;
    input [71:0] vector;
    reg [71:0] tmp;
  begin
    tmp = vector >> 32;
    readslicef_72_40_32 = tmp[39:0];
  end
  endfunction


  function automatic [29:0] readslicef_78_30_48;
    input [77:0] vector;
    reg [77:0] tmp;
  begin
    tmp = vector >> 48;
    readslicef_78_30_48 = tmp[29:0];
  end
  endfunction


  function automatic [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function automatic [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function automatic [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function automatic [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function automatic [11:0] signext_12_11;
    input [10:0] vector;
  begin
    signext_12_11= {{1{vector[10]}}, vector};
  end
  endfunction


  function automatic [12:0] signext_13_11;
    input [10:0] vector;
  begin
    signext_13_11= {{2{vector[10]}}, vector};
  end
  endfunction


  function automatic [13:0] signext_14_11;
    input [10:0] vector;
  begin
    signext_14_11= {{3{vector[10]}}, vector};
  end
  endfunction


  function automatic [13:0] signext_14_4;
    input [3:0] vector;
  begin
    signext_14_4= {{10{vector[3]}}, vector};
  end
  endfunction


  function automatic [15:0] signext_16_15;
    input [14:0] vector;
  begin
    signext_16_15= {{1{vector[14]}}, vector};
  end
  endfunction


  function automatic [16:0] signext_17_16;
    input [15:0] vector;
  begin
    signext_17_16= {{1{vector[15]}}, vector};
  end
  endfunction


  function automatic [18:0] signext_19_18;
    input [17:0] vector;
  begin
    signext_19_18= {{1{vector[17]}}, vector};
  end
  endfunction


  function automatic [19:0] signext_20_16;
    input [15:0] vector;
  begin
    signext_20_16= {{4{vector[15]}}, vector};
  end
  endfunction


  function automatic [20:0] signext_21_1;
    input  vector;
  begin
    signext_21_1= {{20{vector}}, vector};
  end
  endfunction


  function automatic [20:0] signext_21_12;
    input [11:0] vector;
  begin
    signext_21_12= {{9{vector[11]}}, vector};
  end
  endfunction


  function automatic [27:0] signext_28_15;
    input [14:0] vector;
  begin
    signext_28_15= {{13{vector[14]}}, vector};
  end
  endfunction


  function automatic [27:0] signext_28_25;
    input [24:0] vector;
  begin
    signext_28_25= {{3{vector[24]}}, vector};
  end
  endfunction


  function automatic [27:0] signext_28_8;
    input [7:0] vector;
  begin
    signext_28_8= {{20{vector[7]}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [29:0] signext_30_21;
    input [20:0] vector;
  begin
    signext_30_21= {{9{vector[20]}}, vector};
  end
  endfunction


  function automatic [30:0] signext_31_23;
    input [22:0] vector;
  begin
    signext_31_23= {{8{vector[22]}}, vector};
  end
  endfunction


  function automatic [34:0] signext_35_1;
    input  vector;
  begin
    signext_35_1= {{34{vector}}, vector};
  end
  endfunction


  function automatic [34:0] signext_35_23;
    input [22:0] vector;
  begin
    signext_35_23= {{12{vector[22]}}, vector};
  end
  endfunction


  function automatic [34:0] signext_35_3;
    input [2:0] vector;
  begin
    signext_35_3= {{32{vector[2]}}, vector};
  end
  endfunction


  function automatic [38:0] signext_39_33;
    input [32:0] vector;
  begin
    signext_39_33= {{6{vector[32]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_1;
    input  vector;
  begin
    signext_3_1= {{2{vector}}, vector};
  end
  endfunction


  function automatic [39:0] signext_40_20;
    input [19:0] vector;
  begin
    signext_40_20= {{20{vector[19]}}, vector};
  end
  endfunction


  function automatic [39:0] signext_40_37;
    input [36:0] vector;
  begin
    signext_40_37= {{3{vector[36]}}, vector};
  end
  endfunction


  function automatic [39:0] signext_40_38;
    input [37:0] vector;
  begin
    signext_40_38= {{2{vector[37]}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input  vector;
  begin
    signext_4_1= {{3{vector}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_3;
    input [2:0] vector;
  begin
    signext_4_3= {{1{vector[2]}}, vector};
  end
  endfunction


  function automatic [4:0] signext_5_1;
    input  vector;
  begin
    signext_5_1= {{4{vector}}, vector};
  end
  endfunction


  function automatic [79:0] signext_80_17;
    input [16:0] vector;
  begin
    signext_80_17= {{63{vector[16]}}, vector};
  end
  endfunction


  function automatic [79:0] signext_80_40;
    input [39:0] vector;
  begin
    signext_80_40= {{40{vector[39]}}, vector};
  end
  endfunction


  function automatic [79:0] signext_80_60;
    input [59:0] vector;
  begin
    signext_80_60= {{20{vector[59]}}, vector};
  end
  endfunction


  function automatic [7:0] signext_8_1;
    input  vector;
  begin
    signext_8_1= {{7{vector}}, vector};
  end
  endfunction


  function automatic [7:0] signext_8_7;
    input [6:0] vector;
  begin
    signext_8_7= {{1{vector[6]}}, vector};
  end
  endfunction


  function automatic [8:0] signext_9_1;
    input  vector;
  begin
    signext_9_1= {{8{vector}}, vector};
  end
  endfunction


  function automatic [2:0] conv_s2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function automatic [3:0] conv_s2s_2_4 ;
    input [1:0]  vector ;
  begin
    conv_s2s_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_s2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function automatic [4:0] conv_s2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function automatic [5:0] conv_s2s_4_6 ;
    input [3:0]  vector ;
  begin
    conv_s2s_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function automatic [7:0] conv_s2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_s2s_6_8 = {{2{vector[5]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_9 = {vector[7], vector};
  end
  endfunction


  function automatic [10:0] conv_s2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function automatic [12:0] conv_s2s_11_13 ;
    input [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_s2s_12_14 ;
    input [11:0]  vector ;
  begin
    conv_s2s_12_14 = {{2{vector[11]}}, vector};
  end
  endfunction


  function automatic [14:0] conv_s2s_13_15 ;
    input [12:0]  vector ;
  begin
    conv_s2s_13_15 = {{2{vector[12]}}, vector};
  end
  endfunction


  function automatic [15:0] conv_s2s_14_16 ;
    input [13:0]  vector ;
  begin
    conv_s2s_14_16 = {{2{vector[13]}}, vector};
  end
  endfunction


  function automatic [16:0] conv_s2s_15_17 ;
    input [14:0]  vector ;
  begin
    conv_s2s_15_17 = {{2{vector[14]}}, vector};
  end
  endfunction


  function automatic [17:0] conv_s2s_16_18 ;
    input [15:0]  vector ;
  begin
    conv_s2s_16_18 = {{2{vector[15]}}, vector};
  end
  endfunction


  function automatic [17:0] conv_s2s_17_18 ;
    input [16:0]  vector ;
  begin
    conv_s2s_17_18 = {vector[16], vector};
  end
  endfunction


  function automatic [18:0] conv_s2s_17_19 ;
    input [16:0]  vector ;
  begin
    conv_s2s_17_19 = {{2{vector[16]}}, vector};
  end
  endfunction


  function automatic [19:0] conv_s2s_18_20 ;
    input [17:0]  vector ;
  begin
    conv_s2s_18_20 = {{2{vector[17]}}, vector};
  end
  endfunction


  function automatic [20:0] conv_s2s_19_21 ;
    input [18:0]  vector ;
  begin
    conv_s2s_19_21 = {{2{vector[18]}}, vector};
  end
  endfunction


  function automatic [22:0] conv_s2s_21_23 ;
    input [20:0]  vector ;
  begin
    conv_s2s_21_23 = {{2{vector[20]}}, vector};
  end
  endfunction


  function automatic [24:0] conv_s2s_23_25 ;
    input [22:0]  vector ;
  begin
    conv_s2s_23_25 = {{2{vector[22]}}, vector};
  end
  endfunction


  function automatic [26:0] conv_s2s_25_27 ;
    input [24:0]  vector ;
  begin
    conv_s2s_25_27 = {{2{vector[24]}}, vector};
  end
  endfunction


  function automatic [27:0] conv_s2s_25_28 ;
    input [24:0]  vector ;
  begin
    conv_s2s_25_28 = {{3{vector[24]}}, vector};
  end
  endfunction


  function automatic [28:0] conv_s2s_27_29 ;
    input [26:0]  vector ;
  begin
    conv_s2s_27_29 = {{2{vector[26]}}, vector};
  end
  endfunction


  function automatic [30:0] conv_s2s_29_31 ;
    input [28:0]  vector ;
  begin
    conv_s2s_29_31 = {{2{vector[28]}}, vector};
  end
  endfunction


  function automatic [30:0] conv_s2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_s2s_30_31 = {vector[29], vector};
  end
  endfunction


  function automatic [34:0] conv_s2s_31_35 ;
    input [30:0]  vector ;
  begin
    conv_s2s_31_35 = {{4{vector[30]}}, vector};
  end
  endfunction


  function automatic [39:0] conv_s2s_36_40 ;
    input [35:0]  vector ;
  begin
    conv_s2s_36_40 = {{4{vector[35]}}, vector};
  end
  endfunction


  function automatic [39:0] conv_s2s_37_40 ;
    input [36:0]  vector ;
  begin
    conv_s2s_37_40 = {{3{vector[36]}}, vector};
  end
  endfunction


  function automatic [39:0] conv_s2s_38_40 ;
    input [37:0]  vector ;
  begin
    conv_s2s_38_40 = {{2{vector[37]}}, vector};
  end
  endfunction


  function automatic [40:0] conv_s2s_40_41 ;
    input [39:0]  vector ;
  begin
    conv_s2s_40_41 = {vector[39], vector};
  end
  endfunction


  function automatic [41:0] conv_s2s_40_42 ;
    input [39:0]  vector ;
  begin
    conv_s2s_40_42 = {{2{vector[39]}}, vector};
  end
  endfunction


  function automatic [48:0] conv_s2s_40_49 ;
    input [39:0]  vector ;
  begin
    conv_s2s_40_49 = {{9{vector[39]}}, vector};
  end
  endfunction


  function automatic [46:0] conv_s2s_42_47 ;
    input [41:0]  vector ;
  begin
    conv_s2s_42_47 = {{5{vector[41]}}, vector};
  end
  endfunction


  function automatic [48:0] conv_s2s_43_49 ;
    input [42:0]  vector ;
  begin
    conv_s2s_43_49 = {{6{vector[42]}}, vector};
  end
  endfunction


  function automatic [46:0] conv_s2s_44_47 ;
    input [43:0]  vector ;
  begin
    conv_s2s_44_47 = {{3{vector[43]}}, vector};
  end
  endfunction


  function automatic [48:0] conv_s2s_45_49 ;
    input [44:0]  vector ;
  begin
    conv_s2s_45_49 = {{4{vector[44]}}, vector};
  end
  endfunction


  function automatic [48:0] conv_s2s_47_49 ;
    input [46:0]  vector ;
  begin
    conv_s2s_47_49 = {{2{vector[46]}}, vector};
  end
  endfunction


  function automatic [56:0] conv_s2s_47_57 ;
    input [46:0]  vector ;
  begin
    conv_s2s_47_57 = {{10{vector[46]}}, vector};
  end
  endfunction


  function automatic [50:0] conv_s2s_49_51 ;
    input [48:0]  vector ;
  begin
    conv_s2s_49_51 = {{2{vector[48]}}, vector};
  end
  endfunction


  function automatic [56:0] conv_s2s_49_57 ;
    input [48:0]  vector ;
  begin
    conv_s2s_49_57 = {{8{vector[48]}}, vector};
  end
  endfunction


  function automatic [52:0] conv_s2s_51_53 ;
    input [50:0]  vector ;
  begin
    conv_s2s_51_53 = {{2{vector[50]}}, vector};
  end
  endfunction


  function automatic [56:0] conv_s2s_51_57 ;
    input [50:0]  vector ;
  begin
    conv_s2s_51_57 = {{6{vector[50]}}, vector};
  end
  endfunction


  function automatic [56:0] conv_s2s_53_57 ;
    input [52:0]  vector ;
  begin
    conv_s2s_53_57 = {{4{vector[52]}}, vector};
  end
  endfunction


  function automatic [56:0] conv_s2s_56_57 ;
    input [55:0]  vector ;
  begin
    conv_s2s_56_57 = {vector[55], vector};
  end
  endfunction


  function automatic [77:0] conv_s2s_77_78 ;
    input [76:0]  vector ;
  begin
    conv_s2s_77_78 = {vector[76], vector};
  end
  endfunction


  function automatic [23:0] conv_s2u_1_24 ;
    input [0:0]  vector ;
  begin
    conv_s2u_1_24 = {{23{vector[0]}}, vector};
  end
  endfunction


  function automatic [2:0] conv_s2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_3 = {vector[1], vector};
  end
  endfunction


  function automatic [3:0] conv_s2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_s2u_3_4 = {vector[2], vector};
  end
  endfunction


  function automatic [4:0] conv_s2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_5 = {vector[3], vector};
  end
  endfunction


  function automatic [6:0] conv_s2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_s2u_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_s2u_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function automatic [10:0] conv_s2u_9_11 ;
    input [8:0]  vector ;
  begin
    conv_s2u_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function automatic [11:0] conv_s2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_s2u_10_12 = {{2{vector[9]}}, vector};
  end
  endfunction


  function automatic [17:0] conv_s2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_s2u_17_18 = {vector[16], vector};
  end
  endfunction


  function automatic [27:0] conv_s2u_20_28 ;
    input [19:0]  vector ;
  begin
    conv_s2u_20_28 = {{8{vector[19]}}, vector};
  end
  endfunction


  function automatic [23:0] conv_s2u_23_24 ;
    input [22:0]  vector ;
  begin
    conv_s2u_23_24 = {vector[22], vector};
  end
  endfunction


  function automatic [29:0] conv_s2u_28_30 ;
    input [27:0]  vector ;
  begin
    conv_s2u_28_30 = {{2{vector[27]}}, vector};
  end
  endfunction


  function automatic [31:0] conv_s2u_30_32 ;
    input [29:0]  vector ;
  begin
    conv_s2u_30_32 = {{2{vector[29]}}, vector};
  end
  endfunction


  function automatic [31:0] conv_s2u_31_32 ;
    input [30:0]  vector ;
  begin
    conv_s2u_31_32 = {vector[30], vector};
  end
  endfunction


  function automatic [37:0] conv_s2u_35_38 ;
    input [34:0]  vector ;
  begin
    conv_s2u_35_38 = {{3{vector[34]}}, vector};
  end
  endfunction


  function automatic [40:0] conv_s2u_37_41 ;
    input [36:0]  vector ;
  begin
    conv_s2u_37_41 = {{4{vector[36]}}, vector};
  end
  endfunction


  function automatic [40:0] conv_s2u_38_41 ;
    input [37:0]  vector ;
  begin
    conv_s2u_38_41 = {{3{vector[37]}}, vector};
  end
  endfunction


  function automatic [41:0] conv_s2u_39_42 ;
    input [38:0]  vector ;
  begin
    conv_s2u_39_42 = {{3{vector[38]}}, vector};
  end
  endfunction


  function automatic [40:0] conv_s2u_40_41 ;
    input [39:0]  vector ;
  begin
    conv_s2u_40_41 = {vector[39], vector};
  end
  endfunction


  function automatic [42:0] conv_s2u_40_43 ;
    input [39:0]  vector ;
  begin
    conv_s2u_40_43 = {{3{vector[39]}}, vector};
  end
  endfunction


  function automatic [41:0] conv_s2u_41_42 ;
    input [40:0]  vector ;
  begin
    conv_s2u_41_42 = {vector[40], vector};
  end
  endfunction


  function automatic [44:0] conv_s2u_41_45 ;
    input [40:0]  vector ;
  begin
    conv_s2u_41_45 = {{4{vector[40]}}, vector};
  end
  endfunction


  function automatic [42:0] conv_s2u_42_43 ;
    input [41:0]  vector ;
  begin
    conv_s2u_42_43 = {vector[41], vector};
  end
  endfunction


  function automatic [44:0] conv_s2u_42_45 ;
    input [41:0]  vector ;
  begin
    conv_s2u_42_45 = {{3{vector[41]}}, vector};
  end
  endfunction


  function automatic [44:0] conv_s2u_44_45 ;
    input [43:0]  vector ;
  begin
    conv_s2u_44_45 = {vector[43], vector};
  end
  endfunction


  function automatic [60:0] conv_s2u_59_61 ;
    input [58:0]  vector ;
  begin
    conv_s2u_59_61 = {{2{vector[58]}}, vector};
  end
  endfunction


  function automatic [60:0] conv_s2u_60_61 ;
    input [59:0]  vector ;
  begin
    conv_s2u_60_61 = {vector[59], vector};
  end
  endfunction


  function automatic [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 =  {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_1_6 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_6 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_1_8 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_8 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_1_9 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_9 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2s_1_24 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_24 = {{23{1'b0}}, vector};
  end
  endfunction


  function automatic [24:0] conv_u2s_1_25 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_25 = {{24{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_3_6 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_6 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 =  {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 =  {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2s_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_14 =  {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2s_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2s_14_15 =  {1'b0, vector};
  end
  endfunction


  function automatic [15:0] conv_u2s_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2s_15_16 =  {1'b0, vector};
  end
  endfunction


  function automatic [16:0] conv_u2s_16_17 ;
    input [15:0]  vector ;
  begin
    conv_u2s_16_17 =  {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2s_17_18 ;
    input [16:0]  vector ;
  begin
    conv_u2s_17_18 =  {1'b0, vector};
  end
  endfunction


  function automatic [18:0] conv_u2s_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2s_18_19 =  {1'b0, vector};
  end
  endfunction


  function automatic [19:0] conv_u2s_19_20 ;
    input [18:0]  vector ;
  begin
    conv_u2s_19_20 =  {1'b0, vector};
  end
  endfunction


  function automatic [20:0] conv_u2s_20_21 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_21 =  {1'b0, vector};
  end
  endfunction


  function automatic [22:0] conv_u2s_22_23 ;
    input [21:0]  vector ;
  begin
    conv_u2s_22_23 =  {1'b0, vector};
  end
  endfunction


  function automatic [23:0] conv_u2s_23_24 ;
    input [22:0]  vector ;
  begin
    conv_u2s_23_24 =  {1'b0, vector};
  end
  endfunction


  function automatic [24:0] conv_u2s_24_25 ;
    input [23:0]  vector ;
  begin
    conv_u2s_24_25 =  {1'b0, vector};
  end
  endfunction


  function automatic [26:0] conv_u2s_26_27 ;
    input [25:0]  vector ;
  begin
    conv_u2s_26_27 =  {1'b0, vector};
  end
  endfunction


  function automatic [27:0] conv_u2s_27_28 ;
    input [26:0]  vector ;
  begin
    conv_u2s_27_28 =  {1'b0, vector};
  end
  endfunction


  function automatic [28:0] conv_u2s_28_29 ;
    input [27:0]  vector ;
  begin
    conv_u2s_28_29 =  {1'b0, vector};
  end
  endfunction


  function automatic [30:0] conv_u2s_28_31 ;
    input [27:0]  vector ;
  begin
    conv_u2s_28_31 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [30:0] conv_u2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_u2s_30_31 =  {1'b0, vector};
  end
  endfunction


  function automatic [34:0] conv_u2s_33_35 ;
    input [32:0]  vector ;
  begin
    conv_u2s_33_35 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_1_5 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_5 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_1_6 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_6 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_1_8 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_8 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_1_11 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_11 = {{10{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_1_14 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_14 = {{13{1'b0}}, vector};
  end
  endfunction


  function automatic [16:0] conv_u2u_1_17 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_17 = {{16{1'b0}}, vector};
  end
  endfunction


  function automatic [19:0] conv_u2u_1_20 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_20 = {{19{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2u_1_24 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_24 = {{23{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_2_6 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_6 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_2_7 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_7 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_2_8 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_8 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_9 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_3_6 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_6 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_3_7 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_7 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_3_8 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_8 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_4_7 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_7 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_4_8 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_8 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_4_14 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_14 = {{10{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_5_8 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_8 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_5_14 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_14 = {{9{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_6_9 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_9 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_7_10 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_10 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_8_10 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_10 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_8_14 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_14 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_10_14 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_14 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_11_14 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_14 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_15 = {1'b0, vector};
  end
  endfunction


  function automatic [23:0] conv_u2u_14_24 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_24 = {{10{1'b0}}, vector};
  end
  endfunction


  function automatic [16:0] conv_u2u_16_17 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_17 = {1'b0, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_16_22 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_22 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [18:0] conv_u2u_17_19 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_19 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_17_22 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_22 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [18:0] conv_u2u_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_19 = {1'b0, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_18_22 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_22 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [19:0] conv_u2u_19_20 ;
    input [18:0]  vector ;
  begin
    conv_u2u_19_20 = {1'b0, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_19_22 ;
    input [18:0]  vector ;
  begin
    conv_u2u_19_22 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2u_19_24 ;
    input [18:0]  vector ;
  begin
    conv_u2u_19_24 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [21:0] conv_u2u_20_22 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_22 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2u_20_24 ;
    input [19:0]  vector ;
  begin
    conv_u2u_20_24 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2u_21_24 ;
    input [20:0]  vector ;
  begin
    conv_u2u_21_24 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [27:0] conv_u2u_21_28 ;
    input [20:0]  vector ;
  begin
    conv_u2u_21_28 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2u_23_24 ;
    input [22:0]  vector ;
  begin
    conv_u2u_23_24 = {1'b0, vector};
  end
  endfunction


  function automatic [27:0] conv_u2u_23_28 ;
    input [22:0]  vector ;
  begin
    conv_u2u_23_28 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [27:0] conv_u2u_25_28 ;
    input [24:0]  vector ;
  begin
    conv_u2u_25_28 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [27:0] conv_u2u_27_28 ;
    input [26:0]  vector ;
  begin
    conv_u2u_27_28 = {1'b0, vector};
  end
  endfunction


  function automatic [29:0] conv_u2u_28_30 ;
    input [27:0]  vector ;
  begin
    conv_u2u_28_30 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [29:0] conv_u2u_29_30 ;
    input [28:0]  vector ;
  begin
    conv_u2u_29_30 = {1'b0, vector};
  end
  endfunction


  function automatic [37:0] conv_u2u_36_38 ;
    input [35:0]  vector ;
  begin
    conv_u2u_36_38 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [39:0] conv_u2u_39_40 ;
    input [38:0]  vector ;
  begin
    conv_u2u_39_40 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut
// ------------------------------------------------------------------


module dut (
  clk, en, rst, strm_in_rsc_dat, strm_in_rsc_vld, strm_in_rsc_rdy, strm_out_rsc_dat,
      strm_out_rsc_vld, strm_out_rsc_rdy
);
  input clk;
  input en;
  input rst;
  input [31:0] strm_in_rsc_dat;
  input strm_in_rsc_vld;
  output strm_in_rsc_rdy;
  output [31:0] strm_out_rsc_dat;
  output strm_out_rsc_vld;
  input strm_out_rsc_rdy;


  // Interconnect Declarations
  wire [39:0] input_rsci_data_in_d;
  wire [8:0] input_rsci_addr_d;
  wire [1:0] input_rsci_re_d;
  wire [1:0] input_rsci_we_d;
  wire [79:0] input_rsci_data_out_d;
  wire input_rsci_en_d;
  wire [39:0] output_rsci_data_in_d;
  wire [8:0] output_rsci_addr_d;
  wire [1:0] output_rsci_re_d;
  wire [1:0] output_rsci_we_d;
  wire [79:0] output_rsci_data_out_d;
  wire [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d;
  wire [15:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_re_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_re_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_re_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_re_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_re_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_re_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_q_proj_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_v_proj_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_q_embed_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_q_embed_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_q_embed_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_q_embed_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_q_embed_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_k_embed_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_k_embed_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_k_embed_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_k_embed_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_k_embed_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d;
  wire [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d;
  wire [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d;
  wire [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d;
  wire [5:0] attention_5_1_384_384_8_48_attn_weights_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_attn_weights_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_attn_weights_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_attn_output_rsci_data_out_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d;
  wire [79:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d;
  wire [7:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d;
  wire [1:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d;
  wire [1:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d;
  wire [15:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d;
  wire [79:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d;
  wire [79:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d;
  wire input_rsc_en;
  wire [79:0] input_rsc_data_out;
  wire [1:0] input_rsc_we;
  wire [1:0] input_rsc_re;
  wire [17:0] input_rsc_addr;
  wire [79:0] input_rsc_data_in;
  wire output_rsc_en;
  wire [79:0] output_rsc_data_out;
  wire [1:0] output_rsc_we;
  wire [1:0] output_rsc_re;
  wire [17:0] output_rsc_addr;
  wire [79:0] output_rsc_data_in;
  wire attention_5_1_384_384_8_48_quantized_hidden_states_rsc_en;
  wire [15:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_addr;
  wire [15:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_data_in;
  wire attention_5_1_384_384_8_48_q_proj_re_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_q_proj_re_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_re_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_re_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_q_proj_re_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_q_proj_re_rsc_data_in;
  wire attention_5_1_384_384_8_48_k_proj_re_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_re_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_re_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_re_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_k_proj_re_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_re_rsc_data_in;
  wire attention_5_1_384_384_8_48_v_proj_re_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_v_proj_re_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_re_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_re_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_v_proj_re_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_v_proj_re_rsc_data_in;
  wire attention_5_1_384_384_8_48_q_proj_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_q_proj_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_q_proj_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_q_proj_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_q_proj_rsc_data_in;
  wire attention_5_1_384_384_8_48_k_proj_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_k_proj_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_rsc_data_in;
  wire attention_5_1_384_384_8_48_v_proj_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_v_proj_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_v_proj_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_v_proj_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_v_proj_rsc_data_in;
  wire attention_5_1_384_384_8_48_q_embed_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_q_embed_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_q_embed_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_q_embed_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_q_embed_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_q_embed_rsc_data_in;
  wire attention_5_1_384_384_8_48_k_embed_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_k_embed_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_k_embed_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_k_embed_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_k_embed_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_k_embed_rsc_data_in;
  wire attention_5_1_384_384_8_48_k_cache_upd_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_re;
  wire [23:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_data_in;
  wire attention_5_1_384_384_8_48_v_cache_upd_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_re;
  wire [23:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_data_in;
  wire attention_5_1_384_384_8_48_k_proj_transposed_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_re;
  wire [23:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_data_in;
  wire attention_5_1_384_384_8_48_attn_weights_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_attn_weights_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_attn_weights_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_attn_weights_rsc_re;
  wire [11:0] attention_5_1_384_384_8_48_attn_weights_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_attn_weights_rsc_data_in;
  wire attention_5_1_384_384_8_48_attn_output_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_attn_output_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_attn_output_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_attn_output_rsc_data_in;
  wire attention_5_1_384_384_8_48_attn_output_2D_rsc_en;
  wire [79:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_addr;
  wire [79:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_data_in;
  wire attention_5_1_384_384_8_48_quantized_final_output_rsc_en;
  wire [15:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_data_out;
  wire [1:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_we;
  wire [1:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_re;
  wire [17:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_addr;
  wire [15:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_data_in;
  wire apply_rotary_pos_emb_1_8_48_rotated_q_rsc_en;
  wire [79:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_data_out;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_we;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_re;
  wire [17:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_addr;
  wire [79:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_data_in;
  wire apply_rotary_pos_emb_1_8_48_rotated_k_rsc_en;
  wire [79:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_data_out;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_we;
  wire [1:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_re;
  wire [17:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_addr;
  wire [79:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_data_in;


  // Interconnect Declarations for Component Instantiations 
  wire [79:0] nl_input_rsci_data_in_d;
  assign nl_input_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , input_rsci_data_in_d};
  wire [17:0] nl_input_rsci_addr_d;
  assign nl_input_rsci_addr_d = {9'b000000000 , input_rsci_addr_d};
  wire [79:0] nl_output_rsci_data_in_d;
  assign nl_output_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , output_rsci_data_in_d};
  wire [17:0] nl_output_rsci_addr_d;
  assign nl_output_rsci_addr_d = {9'b000000000 , output_rsci_addr_d};
  wire [15:0] nl_attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d = {8'b00000000
      , attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d = {9'b000000000
      , attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_q_proj_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_q_proj_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_q_proj_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_q_proj_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_q_proj_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_q_proj_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_k_proj_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_k_proj_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_k_proj_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_k_proj_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_k_proj_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_k_proj_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_v_proj_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_v_proj_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_v_proj_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_v_proj_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_v_proj_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_v_proj_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_q_embed_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_q_embed_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_q_embed_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_q_embed_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_q_embed_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_q_embed_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_k_embed_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_k_embed_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_k_embed_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_k_embed_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_k_embed_rsci_addr_d = {9'b000000000 , attention_5_1_384_384_8_48_k_embed_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d};
  wire [23:0] nl_attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d = {12'b000000000000
      , attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d};
  wire [23:0] nl_attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d = {12'b000000000000
      , attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d};
  wire [23:0] nl_attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d = {12'b000000000000
      , attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d};
  wire [11:0] nl_attention_5_1_384_384_8_48_attn_weights_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_attn_weights_rsci_addr_d = {6'b000000 , attention_5_1_384_384_8_48_attn_weights_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_attn_output_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_attn_output_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_attn_output_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_attn_output_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_attn_output_rsci_addr_d = {9'b000000000 ,
      attention_5_1_384_384_8_48_attn_output_rsci_addr_d};
  wire [79:0] nl_attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d = {9'b000000000
      , attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d};
  wire [15:0] nl_attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d;
  assign nl_attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d = {8'b00000000
      , attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d};
  wire [17:0] nl_attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d;
  assign nl_attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d = {9'b000000000
      , attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d};
  wire [79:0] nl_apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d;
  assign nl_apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d};
  wire [17:0] nl_apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d;
  assign nl_apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d = {9'b000000000 , apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d};
  wire [79:0] nl_apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d;
  assign nl_apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d = {40'b0000000000000000000000000000000000000000
      , apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d};
  wire [17:0] nl_apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d;
  assign nl_apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d = {9'b000000000 , apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d};
  ram_sync_dualRW_be #(.ram_id(32'sd3),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) input_rsc_comp (
      .data_in(input_rsc_data_in),
      .addr(input_rsc_addr),
      .re(input_rsc_re),
      .we(input_rsc_we),
      .data_out(input_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(input_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd4),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) output_rsc_comp (
      .data_in(output_rsc_data_in),
      .addr(output_rsc_addr),
      .re(output_rsc_re),
      .we(output_rsc_we),
      .data_out(output_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(output_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd5),
  .words(32'sd384),
  .width(32'sd8),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_quantized_hidden_states_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_addr),
      .re(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_re),
      .we(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_we),
      .data_out(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd6),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_q_proj_re_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_q_proj_re_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_q_proj_re_rsc_addr),
      .re(attention_5_1_384_384_8_48_q_proj_re_rsc_re),
      .we(attention_5_1_384_384_8_48_q_proj_re_rsc_we),
      .data_out(attention_5_1_384_384_8_48_q_proj_re_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_q_proj_re_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd7),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_k_proj_re_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_k_proj_re_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_k_proj_re_rsc_addr),
      .re(attention_5_1_384_384_8_48_k_proj_re_rsc_re),
      .we(attention_5_1_384_384_8_48_k_proj_re_rsc_we),
      .data_out(attention_5_1_384_384_8_48_k_proj_re_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_k_proj_re_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd8),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_v_proj_re_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_v_proj_re_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_v_proj_re_rsc_addr),
      .re(attention_5_1_384_384_8_48_v_proj_re_rsc_re),
      .we(attention_5_1_384_384_8_48_v_proj_re_rsc_we),
      .data_out(attention_5_1_384_384_8_48_v_proj_re_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_v_proj_re_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd9),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_q_proj_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_q_proj_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_q_proj_rsc_addr),
      .re(attention_5_1_384_384_8_48_q_proj_rsc_re),
      .we(attention_5_1_384_384_8_48_q_proj_rsc_we),
      .data_out(attention_5_1_384_384_8_48_q_proj_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_q_proj_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd10),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_k_proj_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_k_proj_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_k_proj_rsc_addr),
      .re(attention_5_1_384_384_8_48_k_proj_rsc_re),
      .we(attention_5_1_384_384_8_48_k_proj_rsc_we),
      .data_out(attention_5_1_384_384_8_48_k_proj_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_k_proj_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd11),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_v_proj_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_v_proj_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_v_proj_rsc_addr),
      .re(attention_5_1_384_384_8_48_v_proj_rsc_re),
      .we(attention_5_1_384_384_8_48_v_proj_rsc_we),
      .data_out(attention_5_1_384_384_8_48_v_proj_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_v_proj_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd12),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_q_embed_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_q_embed_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_q_embed_rsc_addr),
      .re(attention_5_1_384_384_8_48_q_embed_rsc_re),
      .we(attention_5_1_384_384_8_48_q_embed_rsc_we),
      .data_out(attention_5_1_384_384_8_48_q_embed_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_q_embed_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd13),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_k_embed_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_k_embed_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_k_embed_rsc_addr),
      .re(attention_5_1_384_384_8_48_k_embed_rsc_re),
      .we(attention_5_1_384_384_8_48_k_embed_rsc_we),
      .data_out(attention_5_1_384_384_8_48_k_embed_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_k_embed_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd14),
  .words(32'sd2304),
  .width(32'sd40),
  .addr_width(32'sd12),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_k_cache_upd_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_k_cache_upd_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_k_cache_upd_rsc_addr),
      .re(attention_5_1_384_384_8_48_k_cache_upd_rsc_re),
      .we(attention_5_1_384_384_8_48_k_cache_upd_rsc_we),
      .data_out(attention_5_1_384_384_8_48_k_cache_upd_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_k_cache_upd_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd15),
  .words(32'sd2304),
  .width(32'sd40),
  .addr_width(32'sd12),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_v_cache_upd_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_v_cache_upd_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_v_cache_upd_rsc_addr),
      .re(attention_5_1_384_384_8_48_v_cache_upd_rsc_re),
      .we(attention_5_1_384_384_8_48_v_cache_upd_rsc_we),
      .data_out(attention_5_1_384_384_8_48_v_cache_upd_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_v_cache_upd_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd16),
  .words(32'sd2304),
  .width(32'sd40),
  .addr_width(32'sd12),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_k_proj_transposed_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_k_proj_transposed_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_k_proj_transposed_rsc_addr),
      .re(attention_5_1_384_384_8_48_k_proj_transposed_rsc_re),
      .we(attention_5_1_384_384_8_48_k_proj_transposed_rsc_we),
      .data_out(attention_5_1_384_384_8_48_k_proj_transposed_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_k_proj_transposed_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd17),
  .words(32'sd48),
  .width(32'sd40),
  .addr_width(32'sd6),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_attn_weights_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_attn_weights_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_attn_weights_rsc_addr),
      .re(attention_5_1_384_384_8_48_attn_weights_rsc_re),
      .we(attention_5_1_384_384_8_48_attn_weights_rsc_we),
      .data_out(attention_5_1_384_384_8_48_attn_weights_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_attn_weights_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd18),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_attn_output_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_attn_output_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_attn_output_rsc_addr),
      .re(attention_5_1_384_384_8_48_attn_output_rsc_re),
      .we(attention_5_1_384_384_8_48_attn_output_rsc_we),
      .data_out(attention_5_1_384_384_8_48_attn_output_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_attn_output_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd19),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_attn_output_2D_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_attn_output_2D_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_attn_output_2D_rsc_addr),
      .re(attention_5_1_384_384_8_48_attn_output_2D_rsc_re),
      .we(attention_5_1_384_384_8_48_attn_output_2D_rsc_we),
      .data_out(attention_5_1_384_384_8_48_attn_output_2D_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_attn_output_2D_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd20),
  .words(32'sd384),
  .width(32'sd8),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) attention_5_1_384_384_8_48_quantized_final_output_rsc_comp
      (
      .data_in(attention_5_1_384_384_8_48_quantized_final_output_rsc_data_in),
      .addr(attention_5_1_384_384_8_48_quantized_final_output_rsc_addr),
      .re(attention_5_1_384_384_8_48_quantized_final_output_rsc_re),
      .we(attention_5_1_384_384_8_48_quantized_final_output_rsc_we),
      .data_out(attention_5_1_384_384_8_48_quantized_final_output_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(attention_5_1_384_384_8_48_quantized_final_output_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd21),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) apply_rotary_pos_emb_1_8_48_rotated_q_rsc_comp
      (
      .data_in(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_data_in),
      .addr(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_addr),
      .re(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_re),
      .we(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_we),
      .data_out(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_en)
    );
  ram_sync_dualRW_be #(.ram_id(32'sd22),
  .words(32'sd384),
  .width(32'sd40),
  .addr_width(32'sd9),
  .a_reset_active(32'sd0),
  .s_reset_active(32'sd1),
  .enable_active(32'sd1),
  .re_active(32'sd0),
  .we_active(32'sd0),
  .num_byte_enables(32'sd1),
  .clock_edge(32'sd1),
  .no_of_RAM_dualRW_readwrite_port(32'sd2)) apply_rotary_pos_emb_1_8_48_rotated_k_rsc_comp
      (
      .data_in(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_data_in),
      .addr(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_addr),
      .re(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_re),
      .we(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_we),
      .data_out(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_en)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_3_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      input_rsci (
      .en(input_rsc_en),
      .data_out(input_rsc_data_out),
      .we(input_rsc_we),
      .re(input_rsc_re),
      .addr(input_rsc_addr),
      .data_in(input_rsc_data_in),
      .data_in_d(nl_input_rsci_data_in_d[79:0]),
      .addr_d(nl_input_rsci_addr_d[17:0]),
      .re_d(input_rsci_re_d),
      .we_d(input_rsci_we_d),
      .data_out_d(input_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_4_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      output_rsci (
      .en(output_rsc_en),
      .data_out(output_rsc_data_out),
      .we(output_rsc_we),
      .re(output_rsc_re),
      .addr(output_rsc_addr),
      .data_in(output_rsc_data_in),
      .data_in_d(nl_output_rsci_data_in_d[79:0]),
      .addr_d(nl_output_rsci_addr_d[17:0]),
      .re_d(output_rsci_re_d),
      .we_d(output_rsci_we_d),
      .data_out_d(output_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_5_384_8_9_0_1_1_0_0_1_1_8_384_2_gen
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci (
      .en(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_en),
      .data_out(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_data_out),
      .we(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_we),
      .re(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_re),
      .addr(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d[15:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_6_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_q_proj_re_rsci (
      .en(attention_5_1_384_384_8_48_q_proj_re_rsc_en),
      .data_out(attention_5_1_384_384_8_48_q_proj_re_rsc_data_out),
      .we(attention_5_1_384_384_8_48_q_proj_re_rsc_we),
      .re(attention_5_1_384_384_8_48_q_proj_re_rsc_re),
      .addr(attention_5_1_384_384_8_48_q_proj_re_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_q_proj_re_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_q_proj_re_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_7_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_k_proj_re_rsci (
      .en(attention_5_1_384_384_8_48_k_proj_re_rsc_en),
      .data_out(attention_5_1_384_384_8_48_k_proj_re_rsc_data_out),
      .we(attention_5_1_384_384_8_48_k_proj_re_rsc_we),
      .re(attention_5_1_384_384_8_48_k_proj_re_rsc_re),
      .addr(attention_5_1_384_384_8_48_k_proj_re_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_k_proj_re_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_k_proj_re_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_k_proj_re_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_8_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_v_proj_re_rsci (
      .en(attention_5_1_384_384_8_48_v_proj_re_rsc_en),
      .data_out(attention_5_1_384_384_8_48_v_proj_re_rsc_data_out),
      .we(attention_5_1_384_384_8_48_v_proj_re_rsc_we),
      .re(attention_5_1_384_384_8_48_v_proj_re_rsc_re),
      .addr(attention_5_1_384_384_8_48_v_proj_re_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_v_proj_re_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_v_proj_re_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_v_proj_re_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_9_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_q_proj_rsci (
      .en(attention_5_1_384_384_8_48_q_proj_rsc_en),
      .data_out(attention_5_1_384_384_8_48_q_proj_rsc_data_out),
      .we(attention_5_1_384_384_8_48_q_proj_rsc_we),
      .re(attention_5_1_384_384_8_48_q_proj_rsc_re),
      .addr(attention_5_1_384_384_8_48_q_proj_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_q_proj_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_q_proj_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_q_proj_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_q_proj_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_q_proj_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_q_proj_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_10_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_k_proj_rsci (
      .en(attention_5_1_384_384_8_48_k_proj_rsc_en),
      .data_out(attention_5_1_384_384_8_48_k_proj_rsc_data_out),
      .we(attention_5_1_384_384_8_48_k_proj_rsc_we),
      .re(attention_5_1_384_384_8_48_k_proj_rsc_re),
      .addr(attention_5_1_384_384_8_48_k_proj_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_k_proj_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_k_proj_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_k_proj_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_k_proj_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_k_proj_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_k_proj_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_11_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_v_proj_rsci (
      .en(attention_5_1_384_384_8_48_v_proj_rsc_en),
      .data_out(attention_5_1_384_384_8_48_v_proj_rsc_data_out),
      .we(attention_5_1_384_384_8_48_v_proj_rsc_we),
      .re(attention_5_1_384_384_8_48_v_proj_rsc_re),
      .addr(attention_5_1_384_384_8_48_v_proj_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_v_proj_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_v_proj_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_v_proj_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_v_proj_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_v_proj_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_v_proj_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_12_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_q_embed_rsci (
      .en(attention_5_1_384_384_8_48_q_embed_rsc_en),
      .data_out(attention_5_1_384_384_8_48_q_embed_rsc_data_out),
      .we(attention_5_1_384_384_8_48_q_embed_rsc_we),
      .re(attention_5_1_384_384_8_48_q_embed_rsc_re),
      .addr(attention_5_1_384_384_8_48_q_embed_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_q_embed_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_q_embed_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_q_embed_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_q_embed_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_q_embed_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_q_embed_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_13_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_k_embed_rsci (
      .en(attention_5_1_384_384_8_48_k_embed_rsc_en),
      .data_out(attention_5_1_384_384_8_48_k_embed_rsc_data_out),
      .we(attention_5_1_384_384_8_48_k_embed_rsc_we),
      .re(attention_5_1_384_384_8_48_k_embed_rsc_re),
      .addr(attention_5_1_384_384_8_48_k_embed_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_k_embed_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_k_embed_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_k_embed_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_k_embed_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_k_embed_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_k_embed_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_14_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
      attention_5_1_384_384_8_48_k_cache_upd_rsci (
      .en(attention_5_1_384_384_8_48_k_cache_upd_rsc_en),
      .data_out(attention_5_1_384_384_8_48_k_cache_upd_rsc_data_out),
      .we(attention_5_1_384_384_8_48_k_cache_upd_rsc_we),
      .re(attention_5_1_384_384_8_48_k_cache_upd_rsc_re),
      .addr(attention_5_1_384_384_8_48_k_cache_upd_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_k_cache_upd_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d[23:0]),
      .re_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_15_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
      attention_5_1_384_384_8_48_v_cache_upd_rsci (
      .en(attention_5_1_384_384_8_48_v_cache_upd_rsc_en),
      .data_out(attention_5_1_384_384_8_48_v_cache_upd_rsc_data_out),
      .we(attention_5_1_384_384_8_48_v_cache_upd_rsc_we),
      .re(attention_5_1_384_384_8_48_v_cache_upd_rsc_re),
      .addr(attention_5_1_384_384_8_48_v_cache_upd_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_v_cache_upd_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d[23:0]),
      .re_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_16_2304_40_12_0_1_1_0_0_1_1_40_2304_2_gen
      attention_5_1_384_384_8_48_k_proj_transposed_rsci (
      .en(attention_5_1_384_384_8_48_k_proj_transposed_rsc_en),
      .data_out(attention_5_1_384_384_8_48_k_proj_transposed_rsc_data_out),
      .we(attention_5_1_384_384_8_48_k_proj_transposed_rsc_we),
      .re(attention_5_1_384_384_8_48_k_proj_transposed_rsc_re),
      .addr(attention_5_1_384_384_8_48_k_proj_transposed_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_k_proj_transposed_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d[23:0]),
      .re_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_17_48_40_6_0_1_1_0_0_1_1_40_48_2_gen
      attention_5_1_384_384_8_48_attn_weights_rsci (
      .en(attention_5_1_384_384_8_48_attn_weights_rsc_en),
      .data_out(attention_5_1_384_384_8_48_attn_weights_rsc_data_out),
      .we(attention_5_1_384_384_8_48_attn_weights_rsc_we),
      .re(attention_5_1_384_384_8_48_attn_weights_rsc_re),
      .addr(attention_5_1_384_384_8_48_attn_weights_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_attn_weights_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_attn_weights_rsci_addr_d[11:0]),
      .re_d(attention_5_1_384_384_8_48_attn_weights_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_attn_weights_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_18_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_attn_output_rsci (
      .en(attention_5_1_384_384_8_48_attn_output_rsc_en),
      .data_out(attention_5_1_384_384_8_48_attn_output_rsc_data_out),
      .we(attention_5_1_384_384_8_48_attn_output_rsc_we),
      .re(attention_5_1_384_384_8_48_attn_output_rsc_re),
      .addr(attention_5_1_384_384_8_48_attn_output_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_attn_output_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_attn_output_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_attn_output_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_attn_output_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_attn_output_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_attn_output_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_19_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      attention_5_1_384_384_8_48_attn_output_2D_rsci (
      .en(attention_5_1_384_384_8_48_attn_output_2D_rsc_en),
      .data_out(attention_5_1_384_384_8_48_attn_output_2D_rsc_data_out),
      .we(attention_5_1_384_384_8_48_attn_output_2D_rsc_we),
      .re(attention_5_1_384_384_8_48_attn_output_2D_rsc_re),
      .addr(attention_5_1_384_384_8_48_attn_output_2D_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_attn_output_2D_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d[79:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_20_384_8_9_0_1_1_0_0_1_1_8_384_2_gen
      attention_5_1_384_384_8_48_quantized_final_output_rsci (
      .en(attention_5_1_384_384_8_48_quantized_final_output_rsc_en),
      .data_out(attention_5_1_384_384_8_48_quantized_final_output_rsc_data_out),
      .we(attention_5_1_384_384_8_48_quantized_final_output_rsc_we),
      .re(attention_5_1_384_384_8_48_quantized_final_output_rsc_re),
      .addr(attention_5_1_384_384_8_48_quantized_final_output_rsc_addr),
      .data_in(attention_5_1_384_384_8_48_quantized_final_output_rsc_data_in),
      .data_in_d(nl_attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d[15:0]),
      .addr_d(nl_attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d[17:0]),
      .re_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d),
      .we_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d),
      .data_out_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_21_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci (
      .en(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_en),
      .data_out(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_data_out),
      .we(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_we),
      .re(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_re),
      .addr(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_addr),
      .data_in(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_data_in),
      .data_in_d(nl_apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d[79:0]),
      .addr_d(nl_apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d[17:0]),
      .re_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d),
      .we_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d),
      .data_out_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_ram_nangate_45nm_dualport_beh_RAM_dualRW_rwport_en_22_384_40_9_0_1_1_0_0_1_1_40_384_2_gen
      apply_rotary_pos_emb_1_8_48_rotated_k_rsci (
      .en(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_en),
      .data_out(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_data_out),
      .we(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_we),
      .re(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_re),
      .addr(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_addr),
      .data_in(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_data_in),
      .data_in_d(nl_apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d[79:0]),
      .addr_d(nl_apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d[17:0]),
      .re_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d),
      .we_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d),
      .data_out_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d),
      .en_d(input_rsci_en_d)
    );
  dut_core dut_core_inst (
      .clk(clk),
      .en(en),
      .rst(rst),
      .strm_in_rsc_dat(strm_in_rsc_dat),
      .strm_in_rsc_vld(strm_in_rsc_vld),
      .strm_in_rsc_rdy(strm_in_rsc_rdy),
      .strm_out_rsc_dat(strm_out_rsc_dat),
      .strm_out_rsc_vld(strm_out_rsc_vld),
      .strm_out_rsc_rdy(strm_out_rsc_rdy),
      .input_rsci_data_in_d(input_rsci_data_in_d),
      .input_rsci_addr_d(input_rsci_addr_d),
      .input_rsci_re_d(input_rsci_re_d),
      .input_rsci_we_d(input_rsci_we_d),
      .input_rsci_data_out_d(input_rsci_data_out_d),
      .input_rsci_en_d(input_rsci_en_d),
      .output_rsci_data_in_d(output_rsci_data_in_d),
      .output_rsci_addr_d(output_rsci_addr_d),
      .output_rsci_re_d(output_rsci_re_d),
      .output_rsci_we_d(output_rsci_we_d),
      .output_rsci_data_out_d(output_rsci_data_out_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_in_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_addr_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_data_out_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d(attention_5_1_384_384_8_48_q_proj_re_rsci_data_in_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d(attention_5_1_384_384_8_48_q_proj_re_rsci_addr_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_re_d(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_we_d(attention_5_1_384_384_8_48_q_proj_re_rsci_we_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d(attention_5_1_384_384_8_48_q_proj_re_rsci_data_out_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d(attention_5_1_384_384_8_48_k_proj_re_rsci_data_in_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d(attention_5_1_384_384_8_48_k_proj_re_rsci_addr_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_re_d(attention_5_1_384_384_8_48_k_proj_re_rsci_re_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_we_d(attention_5_1_384_384_8_48_k_proj_re_rsci_we_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d(attention_5_1_384_384_8_48_k_proj_re_rsci_data_out_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d(attention_5_1_384_384_8_48_v_proj_re_rsci_data_in_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d(attention_5_1_384_384_8_48_v_proj_re_rsci_addr_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_re_d(attention_5_1_384_384_8_48_v_proj_re_rsci_re_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_we_d(attention_5_1_384_384_8_48_v_proj_re_rsci_we_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d(attention_5_1_384_384_8_48_v_proj_re_rsci_data_out_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_data_in_d(attention_5_1_384_384_8_48_q_proj_rsci_data_in_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_addr_d(attention_5_1_384_384_8_48_q_proj_rsci_addr_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_re_d(attention_5_1_384_384_8_48_q_proj_rsci_re_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_we_d(attention_5_1_384_384_8_48_q_proj_rsci_we_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_data_out_d(attention_5_1_384_384_8_48_q_proj_rsci_data_out_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_data_in_d(attention_5_1_384_384_8_48_k_proj_rsci_data_in_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_addr_d(attention_5_1_384_384_8_48_k_proj_rsci_addr_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_re_d(attention_5_1_384_384_8_48_k_proj_rsci_re_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_we_d(attention_5_1_384_384_8_48_k_proj_rsci_we_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_data_out_d(attention_5_1_384_384_8_48_k_proj_rsci_data_out_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_data_in_d(attention_5_1_384_384_8_48_v_proj_rsci_data_in_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_addr_d(attention_5_1_384_384_8_48_v_proj_rsci_addr_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_re_d(attention_5_1_384_384_8_48_v_proj_rsci_re_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_we_d(attention_5_1_384_384_8_48_v_proj_rsci_we_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_data_out_d(attention_5_1_384_384_8_48_v_proj_rsci_data_out_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_data_in_d(attention_5_1_384_384_8_48_q_embed_rsci_data_in_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_addr_d(attention_5_1_384_384_8_48_q_embed_rsci_addr_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_re_d(attention_5_1_384_384_8_48_q_embed_rsci_re_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_we_d(attention_5_1_384_384_8_48_q_embed_rsci_we_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_data_out_d(attention_5_1_384_384_8_48_q_embed_rsci_data_out_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_data_in_d(attention_5_1_384_384_8_48_k_embed_rsci_data_in_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_addr_d(attention_5_1_384_384_8_48_k_embed_rsci_addr_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_re_d(attention_5_1_384_384_8_48_k_embed_rsci_re_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_we_d(attention_5_1_384_384_8_48_k_embed_rsci_we_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_data_out_d(attention_5_1_384_384_8_48_k_embed_rsci_data_out_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_data_in_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_addr_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_data_out_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_data_in_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_addr_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_we_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_data_out_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_in_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_addr_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_re_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_data_out_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d(attention_5_1_384_384_8_48_attn_weights_rsci_data_in_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_addr_d(attention_5_1_384_384_8_48_attn_weights_rsci_addr_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_re_d(attention_5_1_384_384_8_48_attn_weights_rsci_re_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_we_d(attention_5_1_384_384_8_48_attn_weights_rsci_we_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d(attention_5_1_384_384_8_48_attn_weights_rsci_data_out_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_data_in_d(attention_5_1_384_384_8_48_attn_output_rsci_data_in_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_addr_d(attention_5_1_384_384_8_48_attn_output_rsci_addr_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_re_d(attention_5_1_384_384_8_48_attn_output_rsci_re_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_we_d(attention_5_1_384_384_8_48_attn_output_rsci_we_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_data_out_d(attention_5_1_384_384_8_48_attn_output_rsci_data_out_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_data_in_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_addr_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_data_out_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_data_in_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_addr_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_data_out_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_in_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_addr_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_data_out_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_in_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_addr_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_re_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_we_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_data_out_d)
    );
endmodule



