// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2024.1_2/1117371 Production Release
//  HLS Date:       Fri Jun 28 23:58:31 PDT 2024
// 
//  Generated by:   dr655@ecelinux-16.ece.cornell.edu
//  Generated date: Thu Nov 28 23:23:32 2024
// ----------------------------------------------------------------------

// 
module dutmgc_rom_38_64_8_1 (addr, data_out
);
  input [5:0]addr ;
  output [7:0]data_out ;


  // Constants for ROM dimensions
  parameter n_width    = 8;
  parameter n_size     = 64;
  parameter n_numports = 1;
  parameter n_addr_w   = 6;
  parameter n_inreg    = 0;
  parameter n_outreg   = 0;

  // Declare storage for memory elements
  reg [7:0] mem [63:0];

  // Declare output registers
  reg [7:0] data_out_t;

  // Initialize ROM contents
  initial begin: rom_init_blk
    mem[0] <= 8'b00001010;
    mem[1] <= 8'b00100010;
    mem[2] <= 8'b01100101;
    mem[3] <= 8'b00010010;
    mem[4] <= 8'b00000001;
    mem[5] <= 8'b10101001;
    mem[6] <= 8'b00100001;
    mem[7] <= 8'b01011010;
    mem[8] <= 8'b01010001;
    mem[9] <= 8'b01000101;
    mem[10] <= 8'b00000101;
    mem[11] <= 8'b10010101;
    mem[12] <= 8'b10011010;
    mem[13] <= 8'b10001000;
    mem[14] <= 8'b01011001;
    mem[15] <= 8'b10001001;
    mem[16] <= 8'b10011010;
    mem[17] <= 8'b10101000;
    mem[18] <= 8'b10101010;
    mem[19] <= 8'b01100100;
    mem[20] <= 8'b01001010;
    mem[21] <= 8'b00000101;
    mem[22] <= 8'b01010110;
    mem[23] <= 8'b01010001;
    mem[24] <= 8'b10100110;
    mem[25] <= 8'b00101001;
    mem[26] <= 8'b01000001;
    mem[27] <= 8'b10011001;
    mem[28] <= 8'b00010101;
    mem[29] <= 8'b10101001;
    mem[30] <= 8'b01010110;
    mem[31] <= 8'b10100101;
    mem[32] <= 8'b10101001;
    mem[33] <= 8'b10000010;
    mem[34] <= 8'b00100101;
    mem[35] <= 8'b01010010;
    mem[36] <= 8'b10000010;
    mem[37] <= 8'b01010110;
    mem[38] <= 8'b10010010;
    mem[39] <= 8'b01001000;
    mem[40] <= 8'b10010100;
    mem[41] <= 8'b10010001;
    mem[42] <= 8'b01100101;
    mem[43] <= 8'b01010000;
    mem[44] <= 8'b01011010;
    mem[45] <= 8'b01100001;
    mem[46] <= 8'b01101010;
    mem[47] <= 8'b10100000;
    mem[48] <= 8'b10010000;
    mem[49] <= 8'b01010100;
    mem[50] <= 8'b01010000;
    mem[51] <= 8'b01010101;
    mem[52] <= 8'b01011000;
    mem[53] <= 8'b01001001;
    mem[54] <= 8'b01011001;
    mem[55] <= 8'b00000110;
    mem[56] <= 8'b10000100;
    mem[57] <= 8'b10100110;
    mem[58] <= 8'b10010101;
    mem[59] <= 8'b10000110;
    mem[60] <= 8'b00010110;
    mem[61] <= 8'b10101000;
    mem[62] <= 8'b10100010;
    mem[63] <= 8'b01001010;
  end


  // Combinational ROM read block
  always@(*)
  begin
    data_out_t <= mem[addr];
  end

  // Output register assignment
  assign data_out = data_out_t;

endmodule


