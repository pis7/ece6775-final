// ----------------------------------------------------------------------------
// User Testbench Interface Header
//
//    HLS version: 2024.1_2/1117371 Production Release
//       HLS date: Fri Jun 28 23:58:31 PDT 2024
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: as4329@ecelinux-16.ece.cornell.edu
// Generated date: Mon Dec 02 19:02:18 EST 2024
//
// ----------------------------------------------------------------------------

#ifndef CCS_TESTBENCH_H
#define CCS_TESTBENCH_H

#include <ac_fixed.h>
#include <ac_channel.h>
#include "mc_wait_ctrl.h"
#include <string.h>
#include <iostream>

class testbench
{
   public:
   int argc;
   char** argv;
   int main(); //CCS_MAIN
   static bool enable_idle_sync_mode;
   static unsigned short idle_sync_stable_cycles;
   static void set_enable_stalls(bool flag);
   static void reset_request();
   static bool _dut_inst;
   static bool dut_inst();
   static bool set_dut_inst( bool _inst );
   static bool strm_in_ignore;
   static bool strm_in_skip;
   static bool strm_in_skip_quiet;
   static bool strm_in_skip_once;
   static bool strm_in_skip_noerr;
   static int  strm_in_array_comp_first;
   static int  strm_in_array_comp_last;
   static mc_wait_ctrl strm_in_wait_ctrl;
   static bool strm_out_ignore;
   static bool strm_out_skip;
   static bool strm_out_skip_quiet;
   static bool strm_out_skip_once;
   static bool strm_out_skip_noerr;
   static int  strm_out_array_comp_first;
   static int  strm_out_array_comp_last;
   static bool strm_out_use_mask;
   static ac_fixed<32, 14, true, AC_TRN, AC_WRAP > strm_out_output_mask;
   static mc_wait_ctrl strm_out_wait_ctrl;
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   static void exec_dut(ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_in, ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_out);
   #endif
   explicit testbench(int _argc, const char* const *_argv)
      :argc(_argc), argv(const_cast<char**>(_argv))
   {
   }
   ~testbench()
   {
   }
   private:
   testbench() {}
};
extern void mc_testbench_reset_request();
extern bool mc_testbench_dut_inst();
extern bool mc_testbench_set_dut_inst( bool _inst );
extern void mc_testbench_wait_for_idle_sync();
extern void mc_testbench_strm_in_skip(bool v);
extern void mc_testbench_strm_out_skip(bool v);
#endif //CCS_TESTBENCH_H
