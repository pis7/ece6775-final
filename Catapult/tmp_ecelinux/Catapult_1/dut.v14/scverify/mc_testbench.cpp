// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 2024.1_2/1117371 Production Release
//       HLS date: Fri Jun 28 23:58:31 PDT 2024
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: as4329@ecelinux-16.ece.cornell.edu
// Generated date: Mon Dec 02 19:48:06 EST 2024
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

mc_testbench* mc_testbench::that;
bool testbench::enable_idle_sync_mode;
unsigned short testbench::idle_sync_stable_cycles;
void testbench::set_enable_stalls(bool flag) { mc_testbench::set_enable_stalls(flag); }
void testbench::reset_request() { mc_testbench::that->reset_request(); }
void mc_testbench_reset_request() { mc_testbench::that->reset_request(); }
bool testbench::_dut_inst = false;
bool testbench::dut_inst() { return _dut_inst; }
bool mc_testbench_dut_inst() { return testbench::dut_inst(); }
bool testbench::set_dut_inst( bool _inst ) { if(_dut_inst==false) _dut_inst=_inst; return _dut_inst; }
bool mc_testbench_set_dut_inst( bool _inst ) { return testbench::set_dut_inst(_inst); }
void mc_testbench_wait_for_idle_sync() { mc_testbench::wait_for_idle_sync(); }
bool testbench::strm_in_ignore;
void mc_testbench_strm_in_skip(bool v) { testbench::strm_in_skip = v; }
bool testbench::strm_in_skip;
bool testbench::strm_in_skip_quiet;
bool testbench::strm_in_skip_once;
bool testbench::strm_in_skip_noerr;
int  testbench::strm_in_array_comp_first;
int  testbench::strm_in_array_comp_last;
mc_wait_ctrl testbench::strm_in_wait_ctrl;
bool testbench::strm_out_ignore;
void mc_testbench_strm_out_skip(bool v) { testbench::strm_out_skip = v; }
bool testbench::strm_out_skip;
bool testbench::strm_out_skip_quiet;
bool testbench::strm_out_skip_once;
bool testbench::strm_out_skip_noerr;
int  testbench::strm_out_array_comp_first;
int  testbench::strm_out_array_comp_last;
bool testbench::strm_out_use_mask;
ac_fixed<32, 14, true, AC_TRN, AC_WRAP > testbench::strm_out_output_mask;
mc_wait_ctrl testbench::strm_out_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
extern "C++" void dut(ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_in, ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_out);
#endif
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
void testbench::exec_dut(ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_in, ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_out) {
   return mc_testbench::exec_dut(strm_in, strm_out);
}
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void mc_testbench::wait_for_idle_sync()
{
   if (testbench::enable_idle_sync_mode) {
      std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
      that->cpp_testbench_active.write(false);
      while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
      while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
      that->cpp_testbench_active.write(true);
      std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
   } else {
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void mc_testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: reset_request
// --------------------------------------------

void mc_testbench::reset_request()
{
   reset_request_event.notify(0,SC_NS);
}
// ============================================
// Function: capture_strm_in
// --------------------------------------------

void mc_testbench::capture_strm_in( ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > > &strm_in)
{
   static ac_fixed<32, 14, true, AC_TRN, AC_WRAP > strm_in_tmp;
   static int last_j_strm_in_in = 0;
   if (strm_in_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_strm_in && !testbench::strm_in_ignore)
   {
      if (!strm_in_pointer_set) {
         strm_in_pointer = &(strm_in);
         strm_in_pointer_set = true;
      } else if (strm_in_pointer != &(strm_in) && remaining_ccs_strm_in == 0) {
         std::ostringstream msg; msg.str("");
         msg << "Interface strm_in source switched to a different object in testbench with "
             << remaining_ccs_strm_in << " values remaining in input fifo. No data mismatch detected." <<" @ " << sc_time_stamp();
         SC_REPORT_INFO("User testbench", msg.str().c_str());
         strm_in_pointer = &(strm_in);
      } else if (strm_in_pointer != &(strm_in) && remaining_ccs_strm_in > 0 && remaining_ccs_strm_in != strm_in.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size()) {
         std::ostringstream msg; msg.str("");
         msg << "Interface strm_in source switched to a different object in testbench with "
             << remaining_ccs_strm_in << " values remaining in input fifo. Simulation mismatch likely. Check golden vs DUT comparison values for errors." <<" @ " << sc_time_stamp();
         SC_REPORT_WARNING("User testbench", msg.str().c_str());
         _channel_mismatch = true;
      }
      int cur_iter = strm_in_capture_count;
      ++strm_in_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_strm_in;
      while (ccs_scv_i < strm_in.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size()) {
         for (ccs_scv_j = last_j_strm_in_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < strm_in.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size()) {
               strm_in_tmp = strm_in.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_strm_in->put(strm_in_tmp);
            last_j_strm_in_in = 0;
            strm_in_capture_count += chan_factor;
         } else {
            last_j_strm_in_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("strm_in",testbench::strm_in_wait_ctrl,ccs_wait_ctrl_strm_in.operator->(),cur_iter,strm_in_capture_count,1);
   }
   testbench::strm_in_ignore = false;
}
// ============================================
// Function: capture_strm_out
// --------------------------------------------

void mc_testbench::capture_strm_out( ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > > &strm_out)
{
   static mc_golden_info< ac_fixed<32, 14, true, AC_TRN, AC_WRAP >, MaskPacket<1, 32> > strm_out_tmp(testbench::strm_out_ignore, false, strm_out_iteration_count);
   strm_out_tmp._ignore = testbench::strm_out_ignore;
   strm_out_tmp._iteration = strm_out_iteration_count;
   // BEGIN: testbench output_mask control for field_name strm_out
   if ( testbench::strm_out_use_mask ) {
      sc_lv<32> tmp_mask_lv;
      type_to_vector(testbench::strm_out_output_mask, 32, tmp_mask_lv);
      strm_out_tmp._use_mask = true;
      strm_out_tmp._packet._mask = tmp_mask_lv;
   }
   // END: testbench output_mask control for field_name strm_out
   static int last_j_strm_out_out = 0;
   if (_capture_strm_out)
   {
      int cur_iter = strm_out_capture_count;
      ++strm_out_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_strm_out_golden;
      while (ccs_scv_i < strm_out.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size()) {
         for (ccs_scv_j = last_j_strm_out_out; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < strm_out.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size()) {
               strm_out_tmp._data = strm_out.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            strm_out_golden.put(strm_out_tmp);
            last_j_strm_out_out = 0;
            strm_out_capture_count += chan_factor;
         } else {
            last_j_strm_out_out = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("strm_out",testbench::strm_out_wait_ctrl,ccs_wait_ctrl_strm_out.operator->(),cur_iter,strm_out_capture_count,1);
      testbench::strm_out_use_mask = false;
   }
   testbench::strm_out_ignore = false;
   testbench::strm_out_skip = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void mc_testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   ++period_counter;
   sc_time timeout = sc_time_stamp() - previous_timestamp;
   if (calculate_period && sc_time_stamp() > SC_ZERO_TIME && sc_time_stamp() != previous_timestamp && sc_time_stamp() != timeout) {
      average_period = (average_period + timeout) / 2;
   }
   previous_timestamp = sc_time_stamp();
   while (atleast_one_active_input) {
      if (_capture_strm_in && ccs_strm_in->used() == 0) return;
      that->cpp_testbench_active.write(false);
      if (average_period > SC_ZERO_TIME && sc_time_stamp() != timeout)
         wait(average_period * 10, ccs_strm_in->ok_to_put());
      else
         wait(ccs_strm_in->ok_to_put());
      that->cpp_testbench_active.write(true);
      if (timed_out()) {
         calculate_period = false;
         return;
      }
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void mc_testbench::capture_IN(ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_in, ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_out)
{
   that->capture_strm_in(strm_in);
   that->remaining_strm_out_golden =  strm_out.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size();
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void mc_testbench::capture_OUT(ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_in, ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_out)
{
   static bool ccs_strm_in_msg_once = true;
   that->remaining_ccs_strm_in =  strm_in.ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP > >::debug_size();
   if ((testbench::enable_idle_sync_mode || ccs_strm_in_msg_once) && that->remaining_ccs_strm_in != 0) {
      cout << "Warning: Testbench input channel 'strm_in' not empty. Remaining size: " << that->remaining_ccs_strm_in << endl;
      if (ccs_strm_in_msg_once) {
         cout << "All elements have been captured and passed to the RTL DUT, please do not remove data or delete/replace the channel." << endl;
         ccs_strm_in_msg_once = false;
      }
   }
   that->capture_strm_out(strm_out);
   static bool default_idle_sync_mode = ac_env::read_bool("SCVerify_IDLE_SYNCHRONIZATION_MODE",false);
   testbench::enable_idle_sync_mode = default_idle_sync_mode;
}
// ============================================
// Function: exec_dut
// --------------------------------------------

void mc_testbench::exec_dut(ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_in, ac_channel<ac_fixed<32, 14, true, AC_TRN, AC_WRAP> > &strm_out)
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   wait_for_idle_sync();
   capture_IN(strm_in, strm_out);
   dut(strm_in, strm_out);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(strm_in, strm_out);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void mc_testbench::start_of_simulation()
{
   set_enable_stalls(false);
   if (ac_env::read_int("SCVerify_AUTOWAIT", 0) != 0) { //explicitly 0 means off
      SC_REPORT_INFO(name(), "SCVerify AUTOWAIT is enabled for this simulation.");
   }
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void mc_testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Testbench exited early or ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void mc_testbench::check_results()
{
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   bool _has_capture_counts = false;
   std::ostringstream mctb_msg;
   
   if (!_capture_strm_out) {
      cout<<"'strm_out' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      _failed |= strm_out_comp->check_results(strm_out_capture_count,testbench::strm_out_skip_noerr);
      _has_capture_counts |= !!(strm_out_capture_count);
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (!_has_capture_counts) {
      cout<<"Error: Nothing to compare, all output capture counts are zero."<<endl;
      _failed = true;
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   mctb_msg.clear();
   if (_failed) mctb_msg << "Simulation FAILED";
   else         mctb_msg << "Simulation PASSED";
   mctb_msg << " @ " << sc_time_stamp();
   if (_channel_mismatch && _failed)
      mctb_msg << endl << "An input channel was switched before the input fifo was fully empty. Check your testbench.";
   SC_REPORT_INFO(this->name(), mctb_msg.str().c_str());
}
// ============================================
// Function: failed
// --------------------------------------------

bool mc_testbench::failed()
{
   return _failed;
}
// ============================================
// Function: set_failed
// --------------------------------------------

void mc_testbench::set_failed(bool fail)
{
   _failed = fail;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end

void mc_testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (strm_out_comp->get_compare_count() < strm_out_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   testbench_aw_event.notify(SC_ZERO_TIME);
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run

void mc_testbench::run() {
   testbench::enable_idle_sync_mode = false;
   testbench::idle_sync_stable_cycles = 1;
   _channel_mismatch = false;
   testbench::strm_in_ignore = false;
   testbench::strm_in_skip = false;
   testbench::strm_in_skip_quiet = false;
   testbench::strm_in_skip_once = false;
   testbench::strm_in_skip_noerr = false;
   testbench::strm_in_array_comp_first = -1;
   testbench::strm_in_array_comp_last = -1;
   testbench::strm_in_wait_ctrl.clear();
   strm_in_capture_count = 0;
   strm_in_iteration_count = 0;
   strm_in_pointer_set = false;
   testbench::strm_out_ignore = false;
   testbench::strm_out_skip = false;
   testbench::strm_out_skip_quiet = false;
   testbench::strm_out_skip_once = false;
   testbench::strm_out_skip_noerr = false;
   testbench::strm_out_array_comp_first = -1;
   testbench::strm_out_array_comp_last = -1;
   testbench::strm_out_use_mask = false;
   testbench::strm_out_output_mask = (ac_fixed<32, 14, true, AC_TRN, AC_WRAP >) ~0;
   testbench::strm_out_wait_ctrl.clear();
   strm_out_capture_count = 0;
   strm_out_iteration_count = 0;
   strm_out_pointer_set = false;
   testbench testbench_inst(sc_argc(), sc_argv());
   main_exit_code = testbench_inst.main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<strm_in_capture_count<<" values of strm_in"<<endl;
   cout<<"   captured "<<strm_out_capture_count<<" values of strm_out"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
