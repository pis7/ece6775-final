// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2024.1_2/1117371 Production Release
//  HLS Date:       Fri Jun 28 23:58:31 PDT 2024
// 
//  Generated by:   as4329@ecelinux-16.ece.cornell.edu
//  Generated date: Mon Dec  2 19:48:09 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_22_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_22_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_21_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_21_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_20_9_8_384_1_384_8_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_20_9_8_384_1_384_8_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [7:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [7:0] d;
  output [8:0] wadr;
  input clken_d;
  input [7:0] d_d;
  output [7:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_19_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_19_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_18_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_18_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_6_40_48_1_48_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_6_40_48_1_48_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [5:0] radr;
  output we;
  output [39:0] d;
  output [5:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [5:0] radr_d;
  input re_d;
  input [5:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_16_12_40_2304_1_2304_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_16_12_40_2304_1_2304_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [11:0] radr;
  output we;
  output [39:0] d;
  output [11:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [11:0] radr_d;
  input re_d;
  input [11:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_12_40_2304_1_2304_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_12_40_2304_1_2304_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [11:0] radr;
  output we;
  output [39:0] d;
  output [11:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [11:0] radr_d;
  input re_d;
  input [11:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_14_12_40_2304_1_2304_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_14_12_40_2304_1_2304_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [11:0] radr;
  output we;
  output [39:0] d;
  output [11:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [11:0] radr_d;
  input re_d;
  input [11:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_9_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_9_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_8_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_8_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_7_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_7_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_9_8_384_1_384_8_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_9_8_384_1_384_8_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [7:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [7:0] d;
  output [8:0] wadr;
  input clken_d;
  input [7:0] d_d;
  output [7:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_9_40_384_1_384_40_1_gen
// ------------------------------------------------------------------


module dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_9_40_384_1_384_40_1_gen (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [39:0] q;
  output re;
  output [8:0] radr;
  output we;
  output [39:0] d;
  output [8:0] wadr;
  input clken_d;
  input [39:0] d_d;
  output [39:0] q_d;
  input [8:0] radr_d;
  input re_d;
  input [8:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module dut_core_core_fsm (
  clk, rst, input_rsc_clken_d_1, fsm_output, for_for_C_2_tr0, compute_sqrt_for_C_15_tr0,
      RMS_NORM_LOOP_2_C_5_tr0, QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0, QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0,
      QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0, attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0,
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_5_tr0, LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0,
      LINEAR_FORWARD_NO_MUL_LOOP_3_C_0_tr0, LINEAR_FORWARD_NO_MUL_LOOP_2_C_65_tr0,
      RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0, RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0, RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0,
      RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0, APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0, APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0,
      CACHE_UPDATE_LOOP_3_C_2_tr0, CACHE_UPDATE_LOOP_2_C_0_tr0, CACHE_UPDATE_LOOP_1_C_0_tr0,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0, TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0, GEMM_3D_FLOAT_LOOP_4_C_4_tr0, GEMM_3D_FLOAT_LOOP_3_C_2_tr0,
      GEMM_3D_FLOAT_LOOP_1_C_0_tr0, SF_LOOP_3_C_12_tr0, SF_LOOP_1_C_0_tr0, SOFTMAX_LOOP_3_C_1_tr0,
      SOFTMAX_LOOP_4_C_4_tr0, SOFTMAX_LOOP_5_C_21_tr0, SOFTMAX_LOOP_1_C_2_tr0, GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0,
      GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0, GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0, ATTN_2D_LOOP_3_C_2_tr0,
      ATTN_2D_LOOP_2_C_0_tr0, RMS_NORM_LOOP_1_2_C_3_tr0, compute_sqrt_1_for_C_15_tr0,
      RMS_NORM_LOOP_2_2_C_5_tr0, QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0, QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0,
      QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0, output_vinit_C_1_tr0, LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0,
      LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0, LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0,
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0, for_1_for_C_2_tr0
);
  input clk;
  input rst;
  input input_rsc_clken_d_1;
  output [8:0] fsm_output;
  reg [8:0] fsm_output;
  input for_for_C_2_tr0;
  input compute_sqrt_for_C_15_tr0;
  input RMS_NORM_LOOP_2_C_5_tr0;
  input QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0;
  input QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0;
  input QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0;
  input attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_5_C_5_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_3_C_0_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_2_C_65_tr0;
  input RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0;
  input RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0;
  input RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0;
  input RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0;
  input APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0;
  input APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0;
  input CACHE_UPDATE_LOOP_3_C_2_tr0;
  input CACHE_UPDATE_LOOP_2_C_0_tr0;
  input CACHE_UPDATE_LOOP_1_C_0_tr0;
  input TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0;
  input TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0;
  input TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0;
  input GEMM_3D_FLOAT_LOOP_4_C_4_tr0;
  input GEMM_3D_FLOAT_LOOP_3_C_2_tr0;
  input GEMM_3D_FLOAT_LOOP_1_C_0_tr0;
  input SF_LOOP_3_C_12_tr0;
  input SF_LOOP_1_C_0_tr0;
  input SOFTMAX_LOOP_3_C_1_tr0;
  input SOFTMAX_LOOP_4_C_4_tr0;
  input SOFTMAX_LOOP_5_C_21_tr0;
  input SOFTMAX_LOOP_1_C_2_tr0;
  input GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0;
  input GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0;
  input GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0;
  input ATTN_2D_LOOP_3_C_2_tr0;
  input ATTN_2D_LOOP_2_C_0_tr0;
  input RMS_NORM_LOOP_1_2_C_3_tr0;
  input compute_sqrt_1_for_C_15_tr0;
  input RMS_NORM_LOOP_2_2_C_5_tr0;
  input QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0;
  input QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0;
  input QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0;
  input output_vinit_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0;
  input LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0;
  input for_1_for_C_2_tr0;


  // FSM State Type Declaration for dut_core_core_fsm_1
  parameter
    main_C_0 = 9'd0,
    for_for_C_0 = 9'd1,
    for_for_C_1 = 9'd2,
    for_for_C_2 = 9'd3,
    main_C_1 = 9'd4,
    main_C_2 = 9'd5,
    main_C_3 = 9'd6,
    main_C_4 = 9'd7,
    main_C_5 = 9'd8,
    main_C_6 = 9'd9,
    compute_sqrt_for_C_0 = 9'd10,
    compute_sqrt_for_C_1 = 9'd11,
    compute_sqrt_for_C_2 = 9'd12,
    compute_sqrt_for_C_3 = 9'd13,
    compute_sqrt_for_C_4 = 9'd14,
    compute_sqrt_for_C_5 = 9'd15,
    compute_sqrt_for_C_6 = 9'd16,
    compute_sqrt_for_C_7 = 9'd17,
    compute_sqrt_for_C_8 = 9'd18,
    compute_sqrt_for_C_9 = 9'd19,
    compute_sqrt_for_C_10 = 9'd20,
    compute_sqrt_for_C_11 = 9'd21,
    compute_sqrt_for_C_12 = 9'd22,
    compute_sqrt_for_C_13 = 9'd23,
    compute_sqrt_for_C_14 = 9'd24,
    compute_sqrt_for_C_15 = 9'd25,
    main_C_7 = 9'd26,
    main_C_8 = 9'd27,
    main_C_9 = 9'd28,
    main_C_10 = 9'd29,
    main_C_11 = 9'd30,
    main_C_12 = 9'd31,
    main_C_13 = 9'd32,
    main_C_14 = 9'd33,
    main_C_15 = 9'd34,
    main_C_16 = 9'd35,
    main_C_17 = 9'd36,
    main_C_18 = 9'd37,
    main_C_19 = 9'd38,
    main_C_20 = 9'd39,
    main_C_21 = 9'd40,
    main_C_22 = 9'd41,
    main_C_23 = 9'd42,
    main_C_24 = 9'd43,
    main_C_25 = 9'd44,
    main_C_26 = 9'd45,
    main_C_27 = 9'd46,
    main_C_28 = 9'd47,
    main_C_29 = 9'd48,
    main_C_30 = 9'd49,
    main_C_31 = 9'd50,
    main_C_32 = 9'd51,
    main_C_33 = 9'd52,
    main_C_34 = 9'd53,
    main_C_35 = 9'd54,
    main_C_36 = 9'd55,
    main_C_37 = 9'd56,
    main_C_38 = 9'd57,
    RMS_NORM_LOOP_2_C_0 = 9'd58,
    RMS_NORM_LOOP_2_C_1 = 9'd59,
    RMS_NORM_LOOP_2_C_2 = 9'd60,
    RMS_NORM_LOOP_2_C_3 = 9'd61,
    RMS_NORM_LOOP_2_C_4 = 9'd62,
    RMS_NORM_LOOP_2_C_5 = 9'd63,
    main_C_39 = 9'd64,
    main_C_40 = 9'd65,
    main_C_41 = 9'd66,
    main_C_42 = 9'd67,
    main_C_43 = 9'd68,
    main_C_44 = 9'd69,
    main_C_45 = 9'd70,
    main_C_46 = 9'd71,
    main_C_47 = 9'd72,
    main_C_48 = 9'd73,
    main_C_49 = 9'd74,
    main_C_50 = 9'd75,
    main_C_51 = 9'd76,
    main_C_52 = 9'd77,
    main_C_53 = 9'd78,
    QUANTIZE_ACTIVATION_LOOP_5_C_0 = 9'd79,
    QUANTIZE_ACTIVATION_LOOP_5_C_1 = 9'd80,
    QUANTIZE_ACTIVATION_LOOP_5_C_2 = 9'd81,
    QUANTIZE_ACTIVATION_LOOP_5_C_3 = 9'd82,
    QUANTIZE_ACTIVATION_LOOP_5_C_4 = 9'd83,
    QUANTIZE_ACTIVATION_LOOP_5_C_5 = 9'd84,
    QUANTIZE_ACTIVATION_LOOP_4_C_0 = 9'd85,
    QUANTIZE_ACTIVATION_LOOP_3_C_0 = 9'd86,
    attention_5_1_384_384_8_48_q_proj_re_vinit_C_0 = 9'd87,
    attention_5_1_384_384_8_48_q_proj_re_vinit_C_1 = 9'd88,
    LINEAR_FORWARD_NO_MUL_LOOP_4_C_0 = 9'd89,
    LINEAR_FORWARD_NO_MUL_LOOP_5_C_0 = 9'd90,
    LINEAR_FORWARD_NO_MUL_LOOP_5_C_1 = 9'd91,
    LINEAR_FORWARD_NO_MUL_LOOP_5_C_2 = 9'd92,
    LINEAR_FORWARD_NO_MUL_LOOP_5_C_3 = 9'd93,
    LINEAR_FORWARD_NO_MUL_LOOP_5_C_4 = 9'd94,
    LINEAR_FORWARD_NO_MUL_LOOP_5_C_5 = 9'd95,
    LINEAR_FORWARD_NO_MUL_LOOP_4_C_1 = 9'd96,
    LINEAR_FORWARD_NO_MUL_LOOP_3_C_0 = 9'd97,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_0 = 9'd98,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_1 = 9'd99,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_2 = 9'd100,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_3 = 9'd101,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_4 = 9'd102,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_5 = 9'd103,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_6 = 9'd104,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_7 = 9'd105,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_8 = 9'd106,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_9 = 9'd107,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_10 = 9'd108,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_11 = 9'd109,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_12 = 9'd110,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_13 = 9'd111,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_14 = 9'd112,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_15 = 9'd113,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_16 = 9'd114,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_17 = 9'd115,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_18 = 9'd116,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_19 = 9'd117,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_20 = 9'd118,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_21 = 9'd119,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_22 = 9'd120,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_23 = 9'd121,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_24 = 9'd122,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_25 = 9'd123,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_26 = 9'd124,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_27 = 9'd125,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_28 = 9'd126,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_29 = 9'd127,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_30 = 9'd128,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_31 = 9'd129,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_32 = 9'd130,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_33 = 9'd131,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_34 = 9'd132,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_35 = 9'd133,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_36 = 9'd134,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_37 = 9'd135,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_38 = 9'd136,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_39 = 9'd137,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_40 = 9'd138,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_41 = 9'd139,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_42 = 9'd140,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_43 = 9'd141,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_44 = 9'd142,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_45 = 9'd143,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_46 = 9'd144,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_47 = 9'd145,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_48 = 9'd146,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_49 = 9'd147,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_50 = 9'd148,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_51 = 9'd149,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_52 = 9'd150,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_53 = 9'd151,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_54 = 9'd152,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_55 = 9'd153,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_56 = 9'd154,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_57 = 9'd155,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_58 = 9'd156,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_59 = 9'd157,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_60 = 9'd158,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_61 = 9'd159,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_62 = 9'd160,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_63 = 9'd161,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_64 = 9'd162,
    LINEAR_FORWARD_NO_MUL_LOOP_2_C_65 = 9'd163,
    RESHAPE_2D_TO_3D_LOOP_3_C_0 = 9'd164,
    RESHAPE_2D_TO_3D_LOOP_3_C_1 = 9'd165,
    RESHAPE_2D_TO_3D_LOOP_3_C_2 = 9'd166,
    RESHAPE_2D_TO_3D_LOOP_2_C_0 = 9'd167,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_0 = 9'd168,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_1 = 9'd169,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_2 = 9'd170,
    RESHAPE_2D_TO_3D_LOOP_3_2_C_3 = 9'd171,
    RESHAPE_2D_TO_3D_LOOP_2_2_C_0 = 9'd172,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_0 = 9'd173,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_1 = 9'd174,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_2 = 9'd175,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_3 = 9'd176,
    APPLY_ROTARY_POS_EMB_LOOP_6_C_4 = 9'd177,
    APPLY_ROTARY_POS_EMB_LOOP_4_C_0 = 9'd178,
    CACHE_UPDATE_LOOP_3_C_0 = 9'd179,
    CACHE_UPDATE_LOOP_3_C_1 = 9'd180,
    CACHE_UPDATE_LOOP_3_C_2 = 9'd181,
    CACHE_UPDATE_LOOP_2_C_0 = 9'd182,
    CACHE_UPDATE_LOOP_1_C_0 = 9'd183,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0 = 9'd184,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_1 = 9'd185,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2 = 9'd186,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0 = 9'd187,
    TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0 = 9'd188,
    GEMM_3D_FLOAT_LOOP_3_C_0 = 9'd189,
    GEMM_3D_FLOAT_LOOP_3_C_1 = 9'd190,
    GEMM_3D_FLOAT_LOOP_4_C_0 = 9'd191,
    GEMM_3D_FLOAT_LOOP_4_C_1 = 9'd192,
    GEMM_3D_FLOAT_LOOP_4_C_2 = 9'd193,
    GEMM_3D_FLOAT_LOOP_4_C_3 = 9'd194,
    GEMM_3D_FLOAT_LOOP_4_C_4 = 9'd195,
    GEMM_3D_FLOAT_LOOP_3_C_2 = 9'd196,
    GEMM_3D_FLOAT_LOOP_1_C_0 = 9'd197,
    SF_LOOP_3_C_0 = 9'd198,
    SF_LOOP_3_C_1 = 9'd199,
    SF_LOOP_3_C_2 = 9'd200,
    SF_LOOP_3_C_3 = 9'd201,
    SF_LOOP_3_C_4 = 9'd202,
    SF_LOOP_3_C_5 = 9'd203,
    SF_LOOP_3_C_6 = 9'd204,
    SF_LOOP_3_C_7 = 9'd205,
    SF_LOOP_3_C_8 = 9'd206,
    SF_LOOP_3_C_9 = 9'd207,
    SF_LOOP_3_C_10 = 9'd208,
    SF_LOOP_3_C_11 = 9'd209,
    SF_LOOP_3_C_12 = 9'd210,
    SF_LOOP_1_C_0 = 9'd211,
    SOFTMAX_LOOP_1_C_0 = 9'd212,
    SOFTMAX_LOOP_1_C_1 = 9'd213,
    SOFTMAX_LOOP_3_C_0 = 9'd214,
    SOFTMAX_LOOP_3_C_1 = 9'd215,
    SOFTMAX_LOOP_4_C_0 = 9'd216,
    SOFTMAX_LOOP_4_C_1 = 9'd217,
    SOFTMAX_LOOP_4_C_2 = 9'd218,
    SOFTMAX_LOOP_4_C_3 = 9'd219,
    SOFTMAX_LOOP_4_C_4 = 9'd220,
    SOFTMAX_LOOP_5_C_0 = 9'd221,
    SOFTMAX_LOOP_5_C_1 = 9'd222,
    SOFTMAX_LOOP_5_C_2 = 9'd223,
    SOFTMAX_LOOP_5_C_3 = 9'd224,
    SOFTMAX_LOOP_5_C_4 = 9'd225,
    SOFTMAX_LOOP_5_C_5 = 9'd226,
    SOFTMAX_LOOP_5_C_6 = 9'd227,
    SOFTMAX_LOOP_5_C_7 = 9'd228,
    SOFTMAX_LOOP_5_C_8 = 9'd229,
    SOFTMAX_LOOP_5_C_9 = 9'd230,
    SOFTMAX_LOOP_5_C_10 = 9'd231,
    SOFTMAX_LOOP_5_C_11 = 9'd232,
    SOFTMAX_LOOP_5_C_12 = 9'd233,
    SOFTMAX_LOOP_5_C_13 = 9'd234,
    SOFTMAX_LOOP_5_C_14 = 9'd235,
    SOFTMAX_LOOP_5_C_15 = 9'd236,
    SOFTMAX_LOOP_5_C_16 = 9'd237,
    SOFTMAX_LOOP_5_C_17 = 9'd238,
    SOFTMAX_LOOP_5_C_18 = 9'd239,
    SOFTMAX_LOOP_5_C_19 = 9'd240,
    SOFTMAX_LOOP_5_C_20 = 9'd241,
    SOFTMAX_LOOP_5_C_21 = 9'd242,
    SOFTMAX_LOOP_1_C_2 = 9'd243,
    GEMM_3D_FLOAT_LOOP_3_1_C_0 = 9'd244,
    GEMM_3D_FLOAT_LOOP_3_1_C_1 = 9'd245,
    GEMM_3D_FLOAT_LOOP_4_1_C_0 = 9'd246,
    GEMM_3D_FLOAT_LOOP_4_1_C_1 = 9'd247,
    GEMM_3D_FLOAT_LOOP_4_1_C_2 = 9'd248,
    GEMM_3D_FLOAT_LOOP_4_1_C_3 = 9'd249,
    GEMM_3D_FLOAT_LOOP_4_1_C_4 = 9'd250,
    GEMM_3D_FLOAT_LOOP_3_1_C_2 = 9'd251,
    GEMM_3D_FLOAT_LOOP_1_1_C_0 = 9'd252,
    ATTN_2D_LOOP_3_C_0 = 9'd253,
    ATTN_2D_LOOP_3_C_1 = 9'd254,
    ATTN_2D_LOOP_3_C_2 = 9'd255,
    ATTN_2D_LOOP_2_C_0 = 9'd256,
    RMS_NORM_LOOP_1_2_C_0 = 9'd257,
    RMS_NORM_LOOP_1_2_C_1 = 9'd258,
    RMS_NORM_LOOP_1_2_C_2 = 9'd259,
    RMS_NORM_LOOP_1_2_C_3 = 9'd260,
    main_C_54 = 9'd261,
    main_C_55 = 9'd262,
    main_C_56 = 9'd263,
    main_C_57 = 9'd264,
    main_C_58 = 9'd265,
    main_C_59 = 9'd266,
    compute_sqrt_1_for_C_0 = 9'd267,
    compute_sqrt_1_for_C_1 = 9'd268,
    compute_sqrt_1_for_C_2 = 9'd269,
    compute_sqrt_1_for_C_3 = 9'd270,
    compute_sqrt_1_for_C_4 = 9'd271,
    compute_sqrt_1_for_C_5 = 9'd272,
    compute_sqrt_1_for_C_6 = 9'd273,
    compute_sqrt_1_for_C_7 = 9'd274,
    compute_sqrt_1_for_C_8 = 9'd275,
    compute_sqrt_1_for_C_9 = 9'd276,
    compute_sqrt_1_for_C_10 = 9'd277,
    compute_sqrt_1_for_C_11 = 9'd278,
    compute_sqrt_1_for_C_12 = 9'd279,
    compute_sqrt_1_for_C_13 = 9'd280,
    compute_sqrt_1_for_C_14 = 9'd281,
    compute_sqrt_1_for_C_15 = 9'd282,
    main_C_60 = 9'd283,
    main_C_61 = 9'd284,
    main_C_62 = 9'd285,
    main_C_63 = 9'd286,
    main_C_64 = 9'd287,
    main_C_65 = 9'd288,
    main_C_66 = 9'd289,
    main_C_67 = 9'd290,
    main_C_68 = 9'd291,
    main_C_69 = 9'd292,
    main_C_70 = 9'd293,
    main_C_71 = 9'd294,
    main_C_72 = 9'd295,
    main_C_73 = 9'd296,
    main_C_74 = 9'd297,
    main_C_75 = 9'd298,
    main_C_76 = 9'd299,
    main_C_77 = 9'd300,
    main_C_78 = 9'd301,
    RMS_NORM_LOOP_2_2_C_0 = 9'd302,
    RMS_NORM_LOOP_2_2_C_1 = 9'd303,
    RMS_NORM_LOOP_2_2_C_2 = 9'd304,
    RMS_NORM_LOOP_2_2_C_3 = 9'd305,
    RMS_NORM_LOOP_2_2_C_4 = 9'd306,
    RMS_NORM_LOOP_2_2_C_5 = 9'd307,
    main_C_79 = 9'd308,
    main_C_80 = 9'd309,
    main_C_81 = 9'd310,
    main_C_82 = 9'd311,
    main_C_83 = 9'd312,
    main_C_84 = 9'd313,
    main_C_85 = 9'd314,
    main_C_86 = 9'd315,
    main_C_87 = 9'd316,
    main_C_88 = 9'd317,
    main_C_89 = 9'd318,
    main_C_90 = 9'd319,
    main_C_91 = 9'd320,
    main_C_92 = 9'd321,
    main_C_93 = 9'd322,
    main_C_94 = 9'd323,
    main_C_95 = 9'd324,
    main_C_96 = 9'd325,
    main_C_97 = 9'd326,
    main_C_98 = 9'd327,
    main_C_99 = 9'd328,
    main_C_100 = 9'd329,
    main_C_101 = 9'd330,
    main_C_102 = 9'd331,
    main_C_103 = 9'd332,
    main_C_104 = 9'd333,
    main_C_105 = 9'd334,
    main_C_106 = 9'd335,
    main_C_107 = 9'd336,
    main_C_108 = 9'd337,
    main_C_109 = 9'd338,
    main_C_110 = 9'd339,
    QUANTIZE_ACTIVATION_LOOP_5_1_C_0 = 9'd340,
    QUANTIZE_ACTIVATION_LOOP_5_1_C_1 = 9'd341,
    QUANTIZE_ACTIVATION_LOOP_5_1_C_2 = 9'd342,
    QUANTIZE_ACTIVATION_LOOP_5_1_C_3 = 9'd343,
    QUANTIZE_ACTIVATION_LOOP_5_1_C_4 = 9'd344,
    QUANTIZE_ACTIVATION_LOOP_5_1_C_5 = 9'd345,
    QUANTIZE_ACTIVATION_LOOP_4_1_C_0 = 9'd346,
    QUANTIZE_ACTIVATION_LOOP_3_1_C_0 = 9'd347,
    output_vinit_C_0 = 9'd348,
    output_vinit_C_1 = 9'd349,
    LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_0 = 9'd350,
    LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_0 = 9'd351,
    LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_1 = 9'd352,
    LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_2 = 9'd353,
    LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3 = 9'd354,
    LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1 = 9'd355,
    LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0 = 9'd356,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_0 = 9'd357,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_1 = 9'd358,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_2 = 9'd359,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_3 = 9'd360,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_4 = 9'd361,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_5 = 9'd362,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_6 = 9'd363,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_7 = 9'd364,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_8 = 9'd365,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_9 = 9'd366,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_10 = 9'd367,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_11 = 9'd368,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_12 = 9'd369,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_13 = 9'd370,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_14 = 9'd371,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_15 = 9'd372,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_16 = 9'd373,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_17 = 9'd374,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_18 = 9'd375,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_19 = 9'd376,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_20 = 9'd377,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_21 = 9'd378,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_22 = 9'd379,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_23 = 9'd380,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_24 = 9'd381,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_25 = 9'd382,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_26 = 9'd383,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_27 = 9'd384,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_28 = 9'd385,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29 = 9'd386,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_30 = 9'd387,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_31 = 9'd388,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_32 = 9'd389,
    LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33 = 9'd390,
    for_1_for_C_0 = 9'd391,
    for_1_for_C_1 = 9'd392,
    for_1_for_C_2 = 9'd393;

  reg [8:0] state_var;
  reg [8:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : dut_core_core_fsm_1
    case (state_var)
      for_for_C_0 : begin
        fsm_output = 9'b000000001;
        state_var_NS = for_for_C_1;
      end
      for_for_C_1 : begin
        fsm_output = 9'b000000010;
        state_var_NS = for_for_C_2;
      end
      for_for_C_2 : begin
        fsm_output = 9'b000000011;
        if ( for_for_C_2_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = for_for_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 9'b000000100;
        state_var_NS = main_C_2;
      end
      main_C_2 : begin
        fsm_output = 9'b000000101;
        state_var_NS = main_C_3;
      end
      main_C_3 : begin
        fsm_output = 9'b000000110;
        state_var_NS = main_C_4;
      end
      main_C_4 : begin
        fsm_output = 9'b000000111;
        state_var_NS = main_C_5;
      end
      main_C_5 : begin
        fsm_output = 9'b000001000;
        state_var_NS = main_C_6;
      end
      main_C_6 : begin
        fsm_output = 9'b000001001;
        state_var_NS = compute_sqrt_for_C_0;
      end
      compute_sqrt_for_C_0 : begin
        fsm_output = 9'b000001010;
        state_var_NS = compute_sqrt_for_C_1;
      end
      compute_sqrt_for_C_1 : begin
        fsm_output = 9'b000001011;
        state_var_NS = compute_sqrt_for_C_2;
      end
      compute_sqrt_for_C_2 : begin
        fsm_output = 9'b000001100;
        state_var_NS = compute_sqrt_for_C_3;
      end
      compute_sqrt_for_C_3 : begin
        fsm_output = 9'b000001101;
        state_var_NS = compute_sqrt_for_C_4;
      end
      compute_sqrt_for_C_4 : begin
        fsm_output = 9'b000001110;
        state_var_NS = compute_sqrt_for_C_5;
      end
      compute_sqrt_for_C_5 : begin
        fsm_output = 9'b000001111;
        state_var_NS = compute_sqrt_for_C_6;
      end
      compute_sqrt_for_C_6 : begin
        fsm_output = 9'b000010000;
        state_var_NS = compute_sqrt_for_C_7;
      end
      compute_sqrt_for_C_7 : begin
        fsm_output = 9'b000010001;
        state_var_NS = compute_sqrt_for_C_8;
      end
      compute_sqrt_for_C_8 : begin
        fsm_output = 9'b000010010;
        state_var_NS = compute_sqrt_for_C_9;
      end
      compute_sqrt_for_C_9 : begin
        fsm_output = 9'b000010011;
        state_var_NS = compute_sqrt_for_C_10;
      end
      compute_sqrt_for_C_10 : begin
        fsm_output = 9'b000010100;
        state_var_NS = compute_sqrt_for_C_11;
      end
      compute_sqrt_for_C_11 : begin
        fsm_output = 9'b000010101;
        state_var_NS = compute_sqrt_for_C_12;
      end
      compute_sqrt_for_C_12 : begin
        fsm_output = 9'b000010110;
        state_var_NS = compute_sqrt_for_C_13;
      end
      compute_sqrt_for_C_13 : begin
        fsm_output = 9'b000010111;
        state_var_NS = compute_sqrt_for_C_14;
      end
      compute_sqrt_for_C_14 : begin
        fsm_output = 9'b000011000;
        state_var_NS = compute_sqrt_for_C_15;
      end
      compute_sqrt_for_C_15 : begin
        fsm_output = 9'b000011001;
        if ( compute_sqrt_for_C_15_tr0 ) begin
          state_var_NS = main_C_7;
        end
        else begin
          state_var_NS = compute_sqrt_for_C_0;
        end
      end
      main_C_7 : begin
        fsm_output = 9'b000011010;
        state_var_NS = main_C_8;
      end
      main_C_8 : begin
        fsm_output = 9'b000011011;
        state_var_NS = main_C_9;
      end
      main_C_9 : begin
        fsm_output = 9'b000011100;
        state_var_NS = main_C_10;
      end
      main_C_10 : begin
        fsm_output = 9'b000011101;
        state_var_NS = main_C_11;
      end
      main_C_11 : begin
        fsm_output = 9'b000011110;
        state_var_NS = main_C_12;
      end
      main_C_12 : begin
        fsm_output = 9'b000011111;
        state_var_NS = main_C_13;
      end
      main_C_13 : begin
        fsm_output = 9'b000100000;
        state_var_NS = main_C_14;
      end
      main_C_14 : begin
        fsm_output = 9'b000100001;
        state_var_NS = main_C_15;
      end
      main_C_15 : begin
        fsm_output = 9'b000100010;
        state_var_NS = main_C_16;
      end
      main_C_16 : begin
        fsm_output = 9'b000100011;
        state_var_NS = main_C_17;
      end
      main_C_17 : begin
        fsm_output = 9'b000100100;
        state_var_NS = main_C_18;
      end
      main_C_18 : begin
        fsm_output = 9'b000100101;
        state_var_NS = main_C_19;
      end
      main_C_19 : begin
        fsm_output = 9'b000100110;
        state_var_NS = main_C_20;
      end
      main_C_20 : begin
        fsm_output = 9'b000100111;
        state_var_NS = main_C_21;
      end
      main_C_21 : begin
        fsm_output = 9'b000101000;
        state_var_NS = main_C_22;
      end
      main_C_22 : begin
        fsm_output = 9'b000101001;
        state_var_NS = main_C_23;
      end
      main_C_23 : begin
        fsm_output = 9'b000101010;
        state_var_NS = main_C_24;
      end
      main_C_24 : begin
        fsm_output = 9'b000101011;
        state_var_NS = main_C_25;
      end
      main_C_25 : begin
        fsm_output = 9'b000101100;
        state_var_NS = main_C_26;
      end
      main_C_26 : begin
        fsm_output = 9'b000101101;
        state_var_NS = main_C_27;
      end
      main_C_27 : begin
        fsm_output = 9'b000101110;
        state_var_NS = main_C_28;
      end
      main_C_28 : begin
        fsm_output = 9'b000101111;
        state_var_NS = main_C_29;
      end
      main_C_29 : begin
        fsm_output = 9'b000110000;
        state_var_NS = main_C_30;
      end
      main_C_30 : begin
        fsm_output = 9'b000110001;
        state_var_NS = main_C_31;
      end
      main_C_31 : begin
        fsm_output = 9'b000110010;
        state_var_NS = main_C_32;
      end
      main_C_32 : begin
        fsm_output = 9'b000110011;
        state_var_NS = main_C_33;
      end
      main_C_33 : begin
        fsm_output = 9'b000110100;
        state_var_NS = main_C_34;
      end
      main_C_34 : begin
        fsm_output = 9'b000110101;
        state_var_NS = main_C_35;
      end
      main_C_35 : begin
        fsm_output = 9'b000110110;
        state_var_NS = main_C_36;
      end
      main_C_36 : begin
        fsm_output = 9'b000110111;
        state_var_NS = main_C_37;
      end
      main_C_37 : begin
        fsm_output = 9'b000111000;
        state_var_NS = main_C_38;
      end
      main_C_38 : begin
        fsm_output = 9'b000111001;
        state_var_NS = RMS_NORM_LOOP_2_C_0;
      end
      RMS_NORM_LOOP_2_C_0 : begin
        fsm_output = 9'b000111010;
        state_var_NS = RMS_NORM_LOOP_2_C_1;
      end
      RMS_NORM_LOOP_2_C_1 : begin
        fsm_output = 9'b000111011;
        state_var_NS = RMS_NORM_LOOP_2_C_2;
      end
      RMS_NORM_LOOP_2_C_2 : begin
        fsm_output = 9'b000111100;
        state_var_NS = RMS_NORM_LOOP_2_C_3;
      end
      RMS_NORM_LOOP_2_C_3 : begin
        fsm_output = 9'b000111101;
        state_var_NS = RMS_NORM_LOOP_2_C_4;
      end
      RMS_NORM_LOOP_2_C_4 : begin
        fsm_output = 9'b000111110;
        state_var_NS = RMS_NORM_LOOP_2_C_5;
      end
      RMS_NORM_LOOP_2_C_5 : begin
        fsm_output = 9'b000111111;
        if ( RMS_NORM_LOOP_2_C_5_tr0 ) begin
          state_var_NS = main_C_39;
        end
        else begin
          state_var_NS = RMS_NORM_LOOP_2_C_0;
        end
      end
      main_C_39 : begin
        fsm_output = 9'b001000000;
        state_var_NS = main_C_40;
      end
      main_C_40 : begin
        fsm_output = 9'b001000001;
        state_var_NS = main_C_41;
      end
      main_C_41 : begin
        fsm_output = 9'b001000010;
        state_var_NS = main_C_42;
      end
      main_C_42 : begin
        fsm_output = 9'b001000011;
        state_var_NS = main_C_43;
      end
      main_C_43 : begin
        fsm_output = 9'b001000100;
        state_var_NS = main_C_44;
      end
      main_C_44 : begin
        fsm_output = 9'b001000101;
        state_var_NS = main_C_45;
      end
      main_C_45 : begin
        fsm_output = 9'b001000110;
        state_var_NS = main_C_46;
      end
      main_C_46 : begin
        fsm_output = 9'b001000111;
        state_var_NS = main_C_47;
      end
      main_C_47 : begin
        fsm_output = 9'b001001000;
        state_var_NS = main_C_48;
      end
      main_C_48 : begin
        fsm_output = 9'b001001001;
        state_var_NS = main_C_49;
      end
      main_C_49 : begin
        fsm_output = 9'b001001010;
        state_var_NS = main_C_50;
      end
      main_C_50 : begin
        fsm_output = 9'b001001011;
        state_var_NS = main_C_51;
      end
      main_C_51 : begin
        fsm_output = 9'b001001100;
        state_var_NS = main_C_52;
      end
      main_C_52 : begin
        fsm_output = 9'b001001101;
        state_var_NS = main_C_53;
      end
      main_C_53 : begin
        fsm_output = 9'b001001110;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_0;
      end
      QUANTIZE_ACTIVATION_LOOP_5_C_0 : begin
        fsm_output = 9'b001001111;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_1;
      end
      QUANTIZE_ACTIVATION_LOOP_5_C_1 : begin
        fsm_output = 9'b001010000;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_2;
      end
      QUANTIZE_ACTIVATION_LOOP_5_C_2 : begin
        fsm_output = 9'b001010001;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_3;
      end
      QUANTIZE_ACTIVATION_LOOP_5_C_3 : begin
        fsm_output = 9'b001010010;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_4;
      end
      QUANTIZE_ACTIVATION_LOOP_5_C_4 : begin
        fsm_output = 9'b001010011;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_5;
      end
      QUANTIZE_ACTIVATION_LOOP_5_C_5 : begin
        fsm_output = 9'b001010100;
        if ( QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0 ) begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_0;
        end
      end
      QUANTIZE_ACTIVATION_LOOP_4_C_0 : begin
        fsm_output = 9'b001010101;
        if ( QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0 ) begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_3_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_0;
        end
      end
      QUANTIZE_ACTIVATION_LOOP_3_C_0 : begin
        fsm_output = 9'b001010110;
        if ( QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0 ) begin
          state_var_NS = attention_5_1_384_384_8_48_q_proj_re_vinit_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_C_0;
        end
      end
      attention_5_1_384_384_8_48_q_proj_re_vinit_C_0 : begin
        fsm_output = 9'b001010111;
        state_var_NS = attention_5_1_384_384_8_48_q_proj_re_vinit_C_1;
      end
      attention_5_1_384_384_8_48_q_proj_re_vinit_C_1 : begin
        fsm_output = 9'b001011000;
        if ( attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_C_0;
        end
        else begin
          state_var_NS = attention_5_1_384_384_8_48_q_proj_re_vinit_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_4_C_0 : begin
        fsm_output = 9'b001011001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_0;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_0 : begin
        fsm_output = 9'b001011010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_1 : begin
        fsm_output = 9'b001011011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_2;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_2 : begin
        fsm_output = 9'b001011100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_3;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_3 : begin
        fsm_output = 9'b001011101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_4;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_4 : begin
        fsm_output = 9'b001011110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_5;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_C_5 : begin
        fsm_output = 9'b001011111;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_5_C_5_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_C_1;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_4_C_1 : begin
        fsm_output = 9'b001100000;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_C_0 : begin
        fsm_output = 9'b001100001;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_3_C_0_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_0 : begin
        fsm_output = 9'b001100010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_1 : begin
        fsm_output = 9'b001100011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_2;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_2 : begin
        fsm_output = 9'b001100100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_3;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_3 : begin
        fsm_output = 9'b001100101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_4;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_4 : begin
        fsm_output = 9'b001100110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_5;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_5 : begin
        fsm_output = 9'b001100111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_6;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_6 : begin
        fsm_output = 9'b001101000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_7;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_7 : begin
        fsm_output = 9'b001101001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_8;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_8 : begin
        fsm_output = 9'b001101010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_9;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_9 : begin
        fsm_output = 9'b001101011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_10;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_10 : begin
        fsm_output = 9'b001101100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_11;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_11 : begin
        fsm_output = 9'b001101101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_12;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_12 : begin
        fsm_output = 9'b001101110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_13;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_13 : begin
        fsm_output = 9'b001101111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_14;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_14 : begin
        fsm_output = 9'b001110000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_15;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_15 : begin
        fsm_output = 9'b001110001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_16;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_16 : begin
        fsm_output = 9'b001110010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_17;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_17 : begin
        fsm_output = 9'b001110011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_18;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_18 : begin
        fsm_output = 9'b001110100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_19;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_19 : begin
        fsm_output = 9'b001110101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_20;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_20 : begin
        fsm_output = 9'b001110110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_21;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_21 : begin
        fsm_output = 9'b001110111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_22;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_22 : begin
        fsm_output = 9'b001111000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_23;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_23 : begin
        fsm_output = 9'b001111001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_24;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_24 : begin
        fsm_output = 9'b001111010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_25;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_25 : begin
        fsm_output = 9'b001111011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_26;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_26 : begin
        fsm_output = 9'b001111100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_27;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_27 : begin
        fsm_output = 9'b001111101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_28;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_28 : begin
        fsm_output = 9'b001111110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_29;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_29 : begin
        fsm_output = 9'b001111111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_30;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_30 : begin
        fsm_output = 9'b010000000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_31;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_31 : begin
        fsm_output = 9'b010000001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_32;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_32 : begin
        fsm_output = 9'b010000010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_33;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_33 : begin
        fsm_output = 9'b010000011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_34;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_34 : begin
        fsm_output = 9'b010000100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_35;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_35 : begin
        fsm_output = 9'b010000101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_36;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_36 : begin
        fsm_output = 9'b010000110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_37;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_37 : begin
        fsm_output = 9'b010000111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_38;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_38 : begin
        fsm_output = 9'b010001000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_39;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_39 : begin
        fsm_output = 9'b010001001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_40;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_40 : begin
        fsm_output = 9'b010001010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_41;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_41 : begin
        fsm_output = 9'b010001011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_42;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_42 : begin
        fsm_output = 9'b010001100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_43;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_43 : begin
        fsm_output = 9'b010001101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_44;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_44 : begin
        fsm_output = 9'b010001110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_45;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_45 : begin
        fsm_output = 9'b010001111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_46;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_46 : begin
        fsm_output = 9'b010010000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_47;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_47 : begin
        fsm_output = 9'b010010001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_48;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_48 : begin
        fsm_output = 9'b010010010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_49;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_49 : begin
        fsm_output = 9'b010010011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_50;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_50 : begin
        fsm_output = 9'b010010100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_51;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_51 : begin
        fsm_output = 9'b010010101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_52;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_52 : begin
        fsm_output = 9'b010010110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_53;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_53 : begin
        fsm_output = 9'b010010111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_54;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_54 : begin
        fsm_output = 9'b010011000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_55;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_55 : begin
        fsm_output = 9'b010011001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_56;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_56 : begin
        fsm_output = 9'b010011010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_57;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_57 : begin
        fsm_output = 9'b010011011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_58;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_58 : begin
        fsm_output = 9'b010011100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_59;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_59 : begin
        fsm_output = 9'b010011101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_60;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_60 : begin
        fsm_output = 9'b010011110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_61;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_61 : begin
        fsm_output = 9'b010011111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_62;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_62 : begin
        fsm_output = 9'b010100000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_63;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_63 : begin
        fsm_output = 9'b010100001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_64;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_64 : begin
        fsm_output = 9'b010100010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_C_65;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_C_65 : begin
        fsm_output = 9'b010100011;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_2_C_65_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_3_C_0 : begin
        fsm_output = 9'b010100100;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_1;
      end
      RESHAPE_2D_TO_3D_LOOP_3_C_1 : begin
        fsm_output = 9'b010100101;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_2;
      end
      RESHAPE_2D_TO_3D_LOOP_3_C_2 : begin
        fsm_output = 9'b010100110;
        if ( RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_2_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_2_C_0 : begin
        fsm_output = 9'b010100111;
        if ( RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_0 : begin
        fsm_output = 9'b010101000;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_1;
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_1 : begin
        fsm_output = 9'b010101001;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_2;
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_2 : begin
        fsm_output = 9'b010101010;
        state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_3;
      end
      RESHAPE_2D_TO_3D_LOOP_3_2_C_3 : begin
        fsm_output = 9'b010101011;
        if ( RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0 ) begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_2_2_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_0;
        end
      end
      RESHAPE_2D_TO_3D_LOOP_2_2_C_0 : begin
        fsm_output = 9'b010101100;
        if ( RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0 ) begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_0;
        end
        else begin
          state_var_NS = RESHAPE_2D_TO_3D_LOOP_3_2_C_0;
        end
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_0 : begin
        fsm_output = 9'b010101101;
        state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_1;
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_1 : begin
        fsm_output = 9'b010101110;
        state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_2;
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_2 : begin
        fsm_output = 9'b010101111;
        state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_3;
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_3 : begin
        fsm_output = 9'b010110000;
        state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_4;
      end
      APPLY_ROTARY_POS_EMB_LOOP_6_C_4 : begin
        fsm_output = 9'b010110001;
        if ( APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0 ) begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_4_C_0;
        end
        else begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_0;
        end
      end
      APPLY_ROTARY_POS_EMB_LOOP_4_C_0 : begin
        fsm_output = 9'b010110010;
        if ( APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0 ) begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
        else begin
          state_var_NS = APPLY_ROTARY_POS_EMB_LOOP_6_C_0;
        end
      end
      CACHE_UPDATE_LOOP_3_C_0 : begin
        fsm_output = 9'b010110011;
        state_var_NS = CACHE_UPDATE_LOOP_3_C_1;
      end
      CACHE_UPDATE_LOOP_3_C_1 : begin
        fsm_output = 9'b010110100;
        state_var_NS = CACHE_UPDATE_LOOP_3_C_2;
      end
      CACHE_UPDATE_LOOP_3_C_2 : begin
        fsm_output = 9'b010110101;
        if ( CACHE_UPDATE_LOOP_3_C_2_tr0 ) begin
          state_var_NS = CACHE_UPDATE_LOOP_2_C_0;
        end
        else begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
      end
      CACHE_UPDATE_LOOP_2_C_0 : begin
        fsm_output = 9'b010110110;
        if ( CACHE_UPDATE_LOOP_2_C_0_tr0 ) begin
          state_var_NS = CACHE_UPDATE_LOOP_1_C_0;
        end
        else begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
      end
      CACHE_UPDATE_LOOP_1_C_0 : begin
        fsm_output = 9'b010110111;
        if ( CACHE_UPDATE_LOOP_1_C_0_tr0 ) begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
        else begin
          state_var_NS = CACHE_UPDATE_LOOP_3_C_0;
        end
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0 : begin
        fsm_output = 9'b010111000;
        state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_1;
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_1 : begin
        fsm_output = 9'b010111001;
        state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2;
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2 : begin
        fsm_output = 9'b010111010;
        if ( TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0 ) begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0;
        end
        else begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0 : begin
        fsm_output = 9'b010111011;
        if ( TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0 ) begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0;
        end
        else begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
      end
      TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0 : begin
        fsm_output = 9'b010111100;
        if ( TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_0;
        end
        else begin
          state_var_NS = TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_3_C_0 : begin
        fsm_output = 9'b010111101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_1;
      end
      GEMM_3D_FLOAT_LOOP_3_C_1 : begin
        fsm_output = 9'b010111110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_C_0;
      end
      GEMM_3D_FLOAT_LOOP_4_C_0 : begin
        fsm_output = 9'b010111111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_C_1;
      end
      GEMM_3D_FLOAT_LOOP_4_C_1 : begin
        fsm_output = 9'b011000000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_C_2;
      end
      GEMM_3D_FLOAT_LOOP_4_C_2 : begin
        fsm_output = 9'b011000001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_C_3;
      end
      GEMM_3D_FLOAT_LOOP_4_C_3 : begin
        fsm_output = 9'b011000010;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_C_4;
      end
      GEMM_3D_FLOAT_LOOP_4_C_4 : begin
        fsm_output = 9'b011000011;
        if ( GEMM_3D_FLOAT_LOOP_4_C_4_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_2;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_4_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_3_C_2 : begin
        fsm_output = 9'b011000100;
        if ( GEMM_3D_FLOAT_LOOP_3_C_2_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_1_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_1_C_0 : begin
        fsm_output = 9'b011000101;
        if ( GEMM_3D_FLOAT_LOOP_1_C_0_tr0 ) begin
          state_var_NS = SF_LOOP_3_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_C_0;
        end
      end
      SF_LOOP_3_C_0 : begin
        fsm_output = 9'b011000110;
        state_var_NS = SF_LOOP_3_C_1;
      end
      SF_LOOP_3_C_1 : begin
        fsm_output = 9'b011000111;
        state_var_NS = SF_LOOP_3_C_2;
      end
      SF_LOOP_3_C_2 : begin
        fsm_output = 9'b011001000;
        state_var_NS = SF_LOOP_3_C_3;
      end
      SF_LOOP_3_C_3 : begin
        fsm_output = 9'b011001001;
        state_var_NS = SF_LOOP_3_C_4;
      end
      SF_LOOP_3_C_4 : begin
        fsm_output = 9'b011001010;
        state_var_NS = SF_LOOP_3_C_5;
      end
      SF_LOOP_3_C_5 : begin
        fsm_output = 9'b011001011;
        state_var_NS = SF_LOOP_3_C_6;
      end
      SF_LOOP_3_C_6 : begin
        fsm_output = 9'b011001100;
        state_var_NS = SF_LOOP_3_C_7;
      end
      SF_LOOP_3_C_7 : begin
        fsm_output = 9'b011001101;
        state_var_NS = SF_LOOP_3_C_8;
      end
      SF_LOOP_3_C_8 : begin
        fsm_output = 9'b011001110;
        state_var_NS = SF_LOOP_3_C_9;
      end
      SF_LOOP_3_C_9 : begin
        fsm_output = 9'b011001111;
        state_var_NS = SF_LOOP_3_C_10;
      end
      SF_LOOP_3_C_10 : begin
        fsm_output = 9'b011010000;
        state_var_NS = SF_LOOP_3_C_11;
      end
      SF_LOOP_3_C_11 : begin
        fsm_output = 9'b011010001;
        state_var_NS = SF_LOOP_3_C_12;
      end
      SF_LOOP_3_C_12 : begin
        fsm_output = 9'b011010010;
        if ( SF_LOOP_3_C_12_tr0 ) begin
          state_var_NS = SF_LOOP_1_C_0;
        end
        else begin
          state_var_NS = SF_LOOP_3_C_0;
        end
      end
      SF_LOOP_1_C_0 : begin
        fsm_output = 9'b011010011;
        if ( SF_LOOP_1_C_0_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_1_C_0;
        end
        else begin
          state_var_NS = SF_LOOP_3_C_0;
        end
      end
      SOFTMAX_LOOP_1_C_0 : begin
        fsm_output = 9'b011010100;
        state_var_NS = SOFTMAX_LOOP_1_C_1;
      end
      SOFTMAX_LOOP_1_C_1 : begin
        fsm_output = 9'b011010101;
        state_var_NS = SOFTMAX_LOOP_3_C_0;
      end
      SOFTMAX_LOOP_3_C_0 : begin
        fsm_output = 9'b011010110;
        state_var_NS = SOFTMAX_LOOP_3_C_1;
      end
      SOFTMAX_LOOP_3_C_1 : begin
        fsm_output = 9'b011010111;
        if ( SOFTMAX_LOOP_3_C_1_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_4_C_0;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_3_C_0;
        end
      end
      SOFTMAX_LOOP_4_C_0 : begin
        fsm_output = 9'b011011000;
        state_var_NS = SOFTMAX_LOOP_4_C_1;
      end
      SOFTMAX_LOOP_4_C_1 : begin
        fsm_output = 9'b011011001;
        state_var_NS = SOFTMAX_LOOP_4_C_2;
      end
      SOFTMAX_LOOP_4_C_2 : begin
        fsm_output = 9'b011011010;
        state_var_NS = SOFTMAX_LOOP_4_C_3;
      end
      SOFTMAX_LOOP_4_C_3 : begin
        fsm_output = 9'b011011011;
        state_var_NS = SOFTMAX_LOOP_4_C_4;
      end
      SOFTMAX_LOOP_4_C_4 : begin
        fsm_output = 9'b011011100;
        if ( SOFTMAX_LOOP_4_C_4_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_5_C_0;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_4_C_0;
        end
      end
      SOFTMAX_LOOP_5_C_0 : begin
        fsm_output = 9'b011011101;
        state_var_NS = SOFTMAX_LOOP_5_C_1;
      end
      SOFTMAX_LOOP_5_C_1 : begin
        fsm_output = 9'b011011110;
        state_var_NS = SOFTMAX_LOOP_5_C_2;
      end
      SOFTMAX_LOOP_5_C_2 : begin
        fsm_output = 9'b011011111;
        state_var_NS = SOFTMAX_LOOP_5_C_3;
      end
      SOFTMAX_LOOP_5_C_3 : begin
        fsm_output = 9'b011100000;
        state_var_NS = SOFTMAX_LOOP_5_C_4;
      end
      SOFTMAX_LOOP_5_C_4 : begin
        fsm_output = 9'b011100001;
        state_var_NS = SOFTMAX_LOOP_5_C_5;
      end
      SOFTMAX_LOOP_5_C_5 : begin
        fsm_output = 9'b011100010;
        state_var_NS = SOFTMAX_LOOP_5_C_6;
      end
      SOFTMAX_LOOP_5_C_6 : begin
        fsm_output = 9'b011100011;
        state_var_NS = SOFTMAX_LOOP_5_C_7;
      end
      SOFTMAX_LOOP_5_C_7 : begin
        fsm_output = 9'b011100100;
        state_var_NS = SOFTMAX_LOOP_5_C_8;
      end
      SOFTMAX_LOOP_5_C_8 : begin
        fsm_output = 9'b011100101;
        state_var_NS = SOFTMAX_LOOP_5_C_9;
      end
      SOFTMAX_LOOP_5_C_9 : begin
        fsm_output = 9'b011100110;
        state_var_NS = SOFTMAX_LOOP_5_C_10;
      end
      SOFTMAX_LOOP_5_C_10 : begin
        fsm_output = 9'b011100111;
        state_var_NS = SOFTMAX_LOOP_5_C_11;
      end
      SOFTMAX_LOOP_5_C_11 : begin
        fsm_output = 9'b011101000;
        state_var_NS = SOFTMAX_LOOP_5_C_12;
      end
      SOFTMAX_LOOP_5_C_12 : begin
        fsm_output = 9'b011101001;
        state_var_NS = SOFTMAX_LOOP_5_C_13;
      end
      SOFTMAX_LOOP_5_C_13 : begin
        fsm_output = 9'b011101010;
        state_var_NS = SOFTMAX_LOOP_5_C_14;
      end
      SOFTMAX_LOOP_5_C_14 : begin
        fsm_output = 9'b011101011;
        state_var_NS = SOFTMAX_LOOP_5_C_15;
      end
      SOFTMAX_LOOP_5_C_15 : begin
        fsm_output = 9'b011101100;
        state_var_NS = SOFTMAX_LOOP_5_C_16;
      end
      SOFTMAX_LOOP_5_C_16 : begin
        fsm_output = 9'b011101101;
        state_var_NS = SOFTMAX_LOOP_5_C_17;
      end
      SOFTMAX_LOOP_5_C_17 : begin
        fsm_output = 9'b011101110;
        state_var_NS = SOFTMAX_LOOP_5_C_18;
      end
      SOFTMAX_LOOP_5_C_18 : begin
        fsm_output = 9'b011101111;
        state_var_NS = SOFTMAX_LOOP_5_C_19;
      end
      SOFTMAX_LOOP_5_C_19 : begin
        fsm_output = 9'b011110000;
        state_var_NS = SOFTMAX_LOOP_5_C_20;
      end
      SOFTMAX_LOOP_5_C_20 : begin
        fsm_output = 9'b011110001;
        state_var_NS = SOFTMAX_LOOP_5_C_21;
      end
      SOFTMAX_LOOP_5_C_21 : begin
        fsm_output = 9'b011110010;
        if ( SOFTMAX_LOOP_5_C_21_tr0 ) begin
          state_var_NS = SOFTMAX_LOOP_1_C_2;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_5_C_0;
        end
      end
      SOFTMAX_LOOP_1_C_2 : begin
        fsm_output = 9'b011110011;
        if ( SOFTMAX_LOOP_1_C_2_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_0;
        end
        else begin
          state_var_NS = SOFTMAX_LOOP_1_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_0 : begin
        fsm_output = 9'b011110100;
        state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_1;
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_1 : begin
        fsm_output = 9'b011110101;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_1_C_0;
      end
      GEMM_3D_FLOAT_LOOP_4_1_C_0 : begin
        fsm_output = 9'b011110110;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_1_C_1;
      end
      GEMM_3D_FLOAT_LOOP_4_1_C_1 : begin
        fsm_output = 9'b011110111;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_1_C_2;
      end
      GEMM_3D_FLOAT_LOOP_4_1_C_2 : begin
        fsm_output = 9'b011111000;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_1_C_3;
      end
      GEMM_3D_FLOAT_LOOP_4_1_C_3 : begin
        fsm_output = 9'b011111001;
        state_var_NS = GEMM_3D_FLOAT_LOOP_4_1_C_4;
      end
      GEMM_3D_FLOAT_LOOP_4_1_C_4 : begin
        fsm_output = 9'b011111010;
        if ( GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_2;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_4_1_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_3_1_C_2 : begin
        fsm_output = 9'b011111011;
        if ( GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0 ) begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_1_1_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_0;
        end
      end
      GEMM_3D_FLOAT_LOOP_1_1_C_0 : begin
        fsm_output = 9'b011111100;
        if ( GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0 ) begin
          state_var_NS = ATTN_2D_LOOP_3_C_0;
        end
        else begin
          state_var_NS = GEMM_3D_FLOAT_LOOP_3_1_C_0;
        end
      end
      ATTN_2D_LOOP_3_C_0 : begin
        fsm_output = 9'b011111101;
        state_var_NS = ATTN_2D_LOOP_3_C_1;
      end
      ATTN_2D_LOOP_3_C_1 : begin
        fsm_output = 9'b011111110;
        state_var_NS = ATTN_2D_LOOP_3_C_2;
      end
      ATTN_2D_LOOP_3_C_2 : begin
        fsm_output = 9'b011111111;
        if ( ATTN_2D_LOOP_3_C_2_tr0 ) begin
          state_var_NS = ATTN_2D_LOOP_2_C_0;
        end
        else begin
          state_var_NS = ATTN_2D_LOOP_3_C_0;
        end
      end
      ATTN_2D_LOOP_2_C_0 : begin
        fsm_output = 9'b100000000;
        if ( ATTN_2D_LOOP_2_C_0_tr0 ) begin
          state_var_NS = RMS_NORM_LOOP_1_2_C_0;
        end
        else begin
          state_var_NS = ATTN_2D_LOOP_3_C_0;
        end
      end
      RMS_NORM_LOOP_1_2_C_0 : begin
        fsm_output = 9'b100000001;
        state_var_NS = RMS_NORM_LOOP_1_2_C_1;
      end
      RMS_NORM_LOOP_1_2_C_1 : begin
        fsm_output = 9'b100000010;
        state_var_NS = RMS_NORM_LOOP_1_2_C_2;
      end
      RMS_NORM_LOOP_1_2_C_2 : begin
        fsm_output = 9'b100000011;
        state_var_NS = RMS_NORM_LOOP_1_2_C_3;
      end
      RMS_NORM_LOOP_1_2_C_3 : begin
        fsm_output = 9'b100000100;
        if ( RMS_NORM_LOOP_1_2_C_3_tr0 ) begin
          state_var_NS = main_C_54;
        end
        else begin
          state_var_NS = RMS_NORM_LOOP_1_2_C_0;
        end
      end
      main_C_54 : begin
        fsm_output = 9'b100000101;
        state_var_NS = main_C_55;
      end
      main_C_55 : begin
        fsm_output = 9'b100000110;
        state_var_NS = main_C_56;
      end
      main_C_56 : begin
        fsm_output = 9'b100000111;
        state_var_NS = main_C_57;
      end
      main_C_57 : begin
        fsm_output = 9'b100001000;
        state_var_NS = main_C_58;
      end
      main_C_58 : begin
        fsm_output = 9'b100001001;
        state_var_NS = main_C_59;
      end
      main_C_59 : begin
        fsm_output = 9'b100001010;
        state_var_NS = compute_sqrt_1_for_C_0;
      end
      compute_sqrt_1_for_C_0 : begin
        fsm_output = 9'b100001011;
        state_var_NS = compute_sqrt_1_for_C_1;
      end
      compute_sqrt_1_for_C_1 : begin
        fsm_output = 9'b100001100;
        state_var_NS = compute_sqrt_1_for_C_2;
      end
      compute_sqrt_1_for_C_2 : begin
        fsm_output = 9'b100001101;
        state_var_NS = compute_sqrt_1_for_C_3;
      end
      compute_sqrt_1_for_C_3 : begin
        fsm_output = 9'b100001110;
        state_var_NS = compute_sqrt_1_for_C_4;
      end
      compute_sqrt_1_for_C_4 : begin
        fsm_output = 9'b100001111;
        state_var_NS = compute_sqrt_1_for_C_5;
      end
      compute_sqrt_1_for_C_5 : begin
        fsm_output = 9'b100010000;
        state_var_NS = compute_sqrt_1_for_C_6;
      end
      compute_sqrt_1_for_C_6 : begin
        fsm_output = 9'b100010001;
        state_var_NS = compute_sqrt_1_for_C_7;
      end
      compute_sqrt_1_for_C_7 : begin
        fsm_output = 9'b100010010;
        state_var_NS = compute_sqrt_1_for_C_8;
      end
      compute_sqrt_1_for_C_8 : begin
        fsm_output = 9'b100010011;
        state_var_NS = compute_sqrt_1_for_C_9;
      end
      compute_sqrt_1_for_C_9 : begin
        fsm_output = 9'b100010100;
        state_var_NS = compute_sqrt_1_for_C_10;
      end
      compute_sqrt_1_for_C_10 : begin
        fsm_output = 9'b100010101;
        state_var_NS = compute_sqrt_1_for_C_11;
      end
      compute_sqrt_1_for_C_11 : begin
        fsm_output = 9'b100010110;
        state_var_NS = compute_sqrt_1_for_C_12;
      end
      compute_sqrt_1_for_C_12 : begin
        fsm_output = 9'b100010111;
        state_var_NS = compute_sqrt_1_for_C_13;
      end
      compute_sqrt_1_for_C_13 : begin
        fsm_output = 9'b100011000;
        state_var_NS = compute_sqrt_1_for_C_14;
      end
      compute_sqrt_1_for_C_14 : begin
        fsm_output = 9'b100011001;
        state_var_NS = compute_sqrt_1_for_C_15;
      end
      compute_sqrt_1_for_C_15 : begin
        fsm_output = 9'b100011010;
        if ( compute_sqrt_1_for_C_15_tr0 ) begin
          state_var_NS = main_C_60;
        end
        else begin
          state_var_NS = compute_sqrt_1_for_C_0;
        end
      end
      main_C_60 : begin
        fsm_output = 9'b100011011;
        state_var_NS = main_C_61;
      end
      main_C_61 : begin
        fsm_output = 9'b100011100;
        state_var_NS = main_C_62;
      end
      main_C_62 : begin
        fsm_output = 9'b100011101;
        state_var_NS = main_C_63;
      end
      main_C_63 : begin
        fsm_output = 9'b100011110;
        state_var_NS = main_C_64;
      end
      main_C_64 : begin
        fsm_output = 9'b100011111;
        state_var_NS = main_C_65;
      end
      main_C_65 : begin
        fsm_output = 9'b100100000;
        state_var_NS = main_C_66;
      end
      main_C_66 : begin
        fsm_output = 9'b100100001;
        state_var_NS = main_C_67;
      end
      main_C_67 : begin
        fsm_output = 9'b100100010;
        state_var_NS = main_C_68;
      end
      main_C_68 : begin
        fsm_output = 9'b100100011;
        state_var_NS = main_C_69;
      end
      main_C_69 : begin
        fsm_output = 9'b100100100;
        state_var_NS = main_C_70;
      end
      main_C_70 : begin
        fsm_output = 9'b100100101;
        state_var_NS = main_C_71;
      end
      main_C_71 : begin
        fsm_output = 9'b100100110;
        state_var_NS = main_C_72;
      end
      main_C_72 : begin
        fsm_output = 9'b100100111;
        state_var_NS = main_C_73;
      end
      main_C_73 : begin
        fsm_output = 9'b100101000;
        state_var_NS = main_C_74;
      end
      main_C_74 : begin
        fsm_output = 9'b100101001;
        state_var_NS = main_C_75;
      end
      main_C_75 : begin
        fsm_output = 9'b100101010;
        state_var_NS = main_C_76;
      end
      main_C_76 : begin
        fsm_output = 9'b100101011;
        state_var_NS = main_C_77;
      end
      main_C_77 : begin
        fsm_output = 9'b100101100;
        state_var_NS = main_C_78;
      end
      main_C_78 : begin
        fsm_output = 9'b100101101;
        state_var_NS = RMS_NORM_LOOP_2_2_C_0;
      end
      RMS_NORM_LOOP_2_2_C_0 : begin
        fsm_output = 9'b100101110;
        state_var_NS = RMS_NORM_LOOP_2_2_C_1;
      end
      RMS_NORM_LOOP_2_2_C_1 : begin
        fsm_output = 9'b100101111;
        state_var_NS = RMS_NORM_LOOP_2_2_C_2;
      end
      RMS_NORM_LOOP_2_2_C_2 : begin
        fsm_output = 9'b100110000;
        state_var_NS = RMS_NORM_LOOP_2_2_C_3;
      end
      RMS_NORM_LOOP_2_2_C_3 : begin
        fsm_output = 9'b100110001;
        state_var_NS = RMS_NORM_LOOP_2_2_C_4;
      end
      RMS_NORM_LOOP_2_2_C_4 : begin
        fsm_output = 9'b100110010;
        state_var_NS = RMS_NORM_LOOP_2_2_C_5;
      end
      RMS_NORM_LOOP_2_2_C_5 : begin
        fsm_output = 9'b100110011;
        if ( RMS_NORM_LOOP_2_2_C_5_tr0 ) begin
          state_var_NS = main_C_79;
        end
        else begin
          state_var_NS = RMS_NORM_LOOP_2_2_C_0;
        end
      end
      main_C_79 : begin
        fsm_output = 9'b100110100;
        state_var_NS = main_C_80;
      end
      main_C_80 : begin
        fsm_output = 9'b100110101;
        state_var_NS = main_C_81;
      end
      main_C_81 : begin
        fsm_output = 9'b100110110;
        state_var_NS = main_C_82;
      end
      main_C_82 : begin
        fsm_output = 9'b100110111;
        state_var_NS = main_C_83;
      end
      main_C_83 : begin
        fsm_output = 9'b100111000;
        state_var_NS = main_C_84;
      end
      main_C_84 : begin
        fsm_output = 9'b100111001;
        state_var_NS = main_C_85;
      end
      main_C_85 : begin
        fsm_output = 9'b100111010;
        state_var_NS = main_C_86;
      end
      main_C_86 : begin
        fsm_output = 9'b100111011;
        state_var_NS = main_C_87;
      end
      main_C_87 : begin
        fsm_output = 9'b100111100;
        state_var_NS = main_C_88;
      end
      main_C_88 : begin
        fsm_output = 9'b100111101;
        state_var_NS = main_C_89;
      end
      main_C_89 : begin
        fsm_output = 9'b100111110;
        state_var_NS = main_C_90;
      end
      main_C_90 : begin
        fsm_output = 9'b100111111;
        state_var_NS = main_C_91;
      end
      main_C_91 : begin
        fsm_output = 9'b101000000;
        state_var_NS = main_C_92;
      end
      main_C_92 : begin
        fsm_output = 9'b101000001;
        state_var_NS = main_C_93;
      end
      main_C_93 : begin
        fsm_output = 9'b101000010;
        state_var_NS = main_C_94;
      end
      main_C_94 : begin
        fsm_output = 9'b101000011;
        state_var_NS = main_C_95;
      end
      main_C_95 : begin
        fsm_output = 9'b101000100;
        state_var_NS = main_C_96;
      end
      main_C_96 : begin
        fsm_output = 9'b101000101;
        state_var_NS = main_C_97;
      end
      main_C_97 : begin
        fsm_output = 9'b101000110;
        state_var_NS = main_C_98;
      end
      main_C_98 : begin
        fsm_output = 9'b101000111;
        state_var_NS = main_C_99;
      end
      main_C_99 : begin
        fsm_output = 9'b101001000;
        state_var_NS = main_C_100;
      end
      main_C_100 : begin
        fsm_output = 9'b101001001;
        state_var_NS = main_C_101;
      end
      main_C_101 : begin
        fsm_output = 9'b101001010;
        state_var_NS = main_C_102;
      end
      main_C_102 : begin
        fsm_output = 9'b101001011;
        state_var_NS = main_C_103;
      end
      main_C_103 : begin
        fsm_output = 9'b101001100;
        state_var_NS = main_C_104;
      end
      main_C_104 : begin
        fsm_output = 9'b101001101;
        state_var_NS = main_C_105;
      end
      main_C_105 : begin
        fsm_output = 9'b101001110;
        state_var_NS = main_C_106;
      end
      main_C_106 : begin
        fsm_output = 9'b101001111;
        state_var_NS = main_C_107;
      end
      main_C_107 : begin
        fsm_output = 9'b101010000;
        state_var_NS = main_C_108;
      end
      main_C_108 : begin
        fsm_output = 9'b101010001;
        state_var_NS = main_C_109;
      end
      main_C_109 : begin
        fsm_output = 9'b101010010;
        state_var_NS = main_C_110;
      end
      main_C_110 : begin
        fsm_output = 9'b101010011;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_0;
      end
      QUANTIZE_ACTIVATION_LOOP_5_1_C_0 : begin
        fsm_output = 9'b101010100;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_1;
      end
      QUANTIZE_ACTIVATION_LOOP_5_1_C_1 : begin
        fsm_output = 9'b101010101;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_2;
      end
      QUANTIZE_ACTIVATION_LOOP_5_1_C_2 : begin
        fsm_output = 9'b101010110;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_3;
      end
      QUANTIZE_ACTIVATION_LOOP_5_1_C_3 : begin
        fsm_output = 9'b101010111;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_4;
      end
      QUANTIZE_ACTIVATION_LOOP_5_1_C_4 : begin
        fsm_output = 9'b101011000;
        state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_5;
      end
      QUANTIZE_ACTIVATION_LOOP_5_1_C_5 : begin
        fsm_output = 9'b101011001;
        if ( QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0 ) begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_4_1_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_0;
        end
      end
      QUANTIZE_ACTIVATION_LOOP_4_1_C_0 : begin
        fsm_output = 9'b101011010;
        if ( QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0 ) begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_3_1_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_0;
        end
      end
      QUANTIZE_ACTIVATION_LOOP_3_1_C_0 : begin
        fsm_output = 9'b101011011;
        if ( QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0 ) begin
          state_var_NS = output_vinit_C_0;
        end
        else begin
          state_var_NS = QUANTIZE_ACTIVATION_LOOP_5_1_C_0;
        end
      end
      output_vinit_C_0 : begin
        fsm_output = 9'b101011100;
        state_var_NS = output_vinit_C_1;
      end
      output_vinit_C_1 : begin
        fsm_output = 9'b101011101;
        if ( output_vinit_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_0;
        end
        else begin
          state_var_NS = output_vinit_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_0 : begin
        fsm_output = 9'b101011110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_0;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_0 : begin
        fsm_output = 9'b101011111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_1 : begin
        fsm_output = 9'b101100000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_2;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_2 : begin
        fsm_output = 9'b101100001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3 : begin
        fsm_output = 9'b101100010;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1 : begin
        fsm_output = 9'b101100011;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0 : begin
        fsm_output = 9'b101100100;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0 ) begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_0;
        end
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_0 : begin
        fsm_output = 9'b101100101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_1;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_1 : begin
        fsm_output = 9'b101100110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_2;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_2 : begin
        fsm_output = 9'b101100111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_3;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_3 : begin
        fsm_output = 9'b101101000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_4;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_4 : begin
        fsm_output = 9'b101101001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_5;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_5 : begin
        fsm_output = 9'b101101010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_6;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_6 : begin
        fsm_output = 9'b101101011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_7;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_7 : begin
        fsm_output = 9'b101101100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_8;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_8 : begin
        fsm_output = 9'b101101101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_9;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_9 : begin
        fsm_output = 9'b101101110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_10;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_10 : begin
        fsm_output = 9'b101101111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_11;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_11 : begin
        fsm_output = 9'b101110000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_12;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_12 : begin
        fsm_output = 9'b101110001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_13;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_13 : begin
        fsm_output = 9'b101110010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_14;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_14 : begin
        fsm_output = 9'b101110011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_15;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_15 : begin
        fsm_output = 9'b101110100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_16;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_16 : begin
        fsm_output = 9'b101110101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_17;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_17 : begin
        fsm_output = 9'b101110110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_18;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_18 : begin
        fsm_output = 9'b101110111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_19;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_19 : begin
        fsm_output = 9'b101111000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_20;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_20 : begin
        fsm_output = 9'b101111001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_21;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_21 : begin
        fsm_output = 9'b101111010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_22;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_22 : begin
        fsm_output = 9'b101111011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_23;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_23 : begin
        fsm_output = 9'b101111100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_24;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_24 : begin
        fsm_output = 9'b101111101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_25;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_25 : begin
        fsm_output = 9'b101111110;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_26;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_26 : begin
        fsm_output = 9'b101111111;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_27;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_27 : begin
        fsm_output = 9'b110000000;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_28;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_28 : begin
        fsm_output = 9'b110000001;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_29 : begin
        fsm_output = 9'b110000010;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_30;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_30 : begin
        fsm_output = 9'b110000011;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_31;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_31 : begin
        fsm_output = 9'b110000100;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_32;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_32 : begin
        fsm_output = 9'b110000101;
        state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33;
      end
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33 : begin
        fsm_output = 9'b110000110;
        if ( LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0 ) begin
          state_var_NS = for_1_for_C_0;
        end
        else begin
          state_var_NS = LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_0;
        end
      end
      for_1_for_C_0 : begin
        fsm_output = 9'b110000111;
        state_var_NS = for_1_for_C_1;
      end
      for_1_for_C_1 : begin
        fsm_output = 9'b110001000;
        state_var_NS = for_1_for_C_2;
      end
      for_1_for_C_2 : begin
        fsm_output = 9'b110001001;
        if ( for_1_for_C_2_tr0 ) begin
          state_var_NS = main_C_0;
        end
        else begin
          state_var_NS = for_1_for_C_0;
        end
      end
      // main_C_0
      default : begin
        fsm_output = 9'b000000000;
        state_var_NS = for_for_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( input_rsc_clken_d_1 ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_wait_dp
// ------------------------------------------------------------------


module dut_core_wait_dp (
  clk, rst, rms_norm_384_div_cmp_z, core_wen1, rms_norm_384_div_cmp_z_oreg
);
  input clk;
  input rst;
  input [71:0] rms_norm_384_div_cmp_z;
  input core_wen1;
  output [39:0] rms_norm_384_div_cmp_z_oreg;


  // Interconnect Declarations
  reg [39:0] rms_norm_384_div_cmp_z_oreg_pconst_39_0;


  // Interconnect Declarations for Component Instantiations 
  assign rms_norm_384_div_cmp_z_oreg = rms_norm_384_div_cmp_z_oreg_pconst_39_0;
  always @(posedge clk) begin
    if ( rst ) begin
      rms_norm_384_div_cmp_z_oreg_pconst_39_0 <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( core_wen1 ) begin
      rms_norm_384_div_cmp_z_oreg_pconst_39_0 <= rms_norm_384_div_cmp_z[39:0];
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_staller
// ------------------------------------------------------------------


module dut_core_staller (
  en, core_wen1, strm_in_rsci_wen_comp, strm_out_rsci_wen_comp, input_rsc_clken_d_1
);
  input en;
  output core_wen1;
  input strm_in_rsci_wen_comp;
  input strm_out_rsci_wen_comp;
  output input_rsc_clken_d_1;



  // Interconnect Declarations for Component Instantiations 
  assign input_rsc_clken_d_1 = core_wen1 & en;
  assign core_wen1 = strm_in_rsci_wen_comp & strm_out_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_out_rsci_strm_out_wait_ctrl
// ------------------------------------------------------------------


module dut_core_strm_out_rsci_strm_out_wait_ctrl (
  strm_out_rsci_iswt0, strm_out_rsci_biwt, strm_out_rsci_irdy
);
  input strm_out_rsci_iswt0;
  output strm_out_rsci_biwt;
  input strm_out_rsci_irdy;



  // Interconnect Declarations for Component Instantiations 
  assign strm_out_rsci_biwt = strm_out_rsci_iswt0 & strm_out_rsci_irdy;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_in_rsci_strm_in_wait_ctrl
// ------------------------------------------------------------------


module dut_core_strm_in_rsci_strm_in_wait_ctrl (
  strm_in_rsci_iswt0, strm_in_rsci_biwt, strm_in_rsci_ivld
);
  input strm_in_rsci_iswt0;
  output strm_in_rsci_biwt;
  input strm_in_rsci_ivld;



  // Interconnect Declarations for Component Instantiations 
  assign strm_in_rsci_biwt = strm_in_rsci_iswt0 & strm_in_rsci_ivld;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_out_rsci
// ------------------------------------------------------------------


module dut_core_strm_out_rsci (
  strm_out_rsc_dat, strm_out_rsc_vld, strm_out_rsc_rdy, strm_out_rsci_oswt, strm_out_rsci_wen_comp,
      strm_out_rsci_idat
);
  output [31:0] strm_out_rsc_dat;
  output strm_out_rsc_vld;
  input strm_out_rsc_rdy;
  input strm_out_rsci_oswt;
  output strm_out_rsci_wen_comp;
  input [31:0] strm_out_rsci_idat;


  // Interconnect Declarations
  wire strm_out_rsci_biwt;
  wire strm_out_rsci_irdy;


  // Interconnect Declarations for Component Instantiations 
  wire [31:0] nl_strm_out_rsci_idat;
  assign nl_strm_out_rsci_idat = {(strm_out_rsci_idat[31:2]) , 2'b00};
  ccs_out_wait_v1 #(.rscid(32'sd2),
  .width(32'sd32)) strm_out_rsci (
      .irdy(strm_out_rsci_irdy),
      .ivld(strm_out_rsci_oswt),
      .idat(nl_strm_out_rsci_idat[31:0]),
      .rdy(strm_out_rsc_rdy),
      .vld(strm_out_rsc_vld),
      .dat(strm_out_rsc_dat)
    );
  dut_core_strm_out_rsci_strm_out_wait_ctrl dut_core_strm_out_rsci_strm_out_wait_ctrl_inst
      (
      .strm_out_rsci_iswt0(strm_out_rsci_oswt),
      .strm_out_rsci_biwt(strm_out_rsci_biwt),
      .strm_out_rsci_irdy(strm_out_rsci_irdy)
    );
  assign strm_out_rsci_wen_comp = (~ strm_out_rsci_oswt) | strm_out_rsci_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core_strm_in_rsci
// ------------------------------------------------------------------


module dut_core_strm_in_rsci (
  strm_in_rsc_dat, strm_in_rsc_vld, strm_in_rsc_rdy, strm_in_rsci_oswt, strm_in_rsci_wen_comp,
      strm_in_rsci_idat_mxwt
);
  input [31:0] strm_in_rsc_dat;
  input strm_in_rsc_vld;
  output strm_in_rsc_rdy;
  input strm_in_rsci_oswt;
  output strm_in_rsci_wen_comp;
  output [29:0] strm_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire strm_in_rsci_biwt;
  wire strm_in_rsci_ivld;
  wire [31:0] strm_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd1),
  .width(32'sd32)) strm_in_rsci (
      .rdy(strm_in_rsc_rdy),
      .vld(strm_in_rsc_vld),
      .dat(strm_in_rsc_dat),
      .irdy(strm_in_rsci_oswt),
      .ivld(strm_in_rsci_ivld),
      .idat(strm_in_rsci_idat)
    );
  dut_core_strm_in_rsci_strm_in_wait_ctrl dut_core_strm_in_rsci_strm_in_wait_ctrl_inst
      (
      .strm_in_rsci_iswt0(strm_in_rsci_oswt),
      .strm_in_rsci_biwt(strm_in_rsci_biwt),
      .strm_in_rsci_ivld(strm_in_rsci_ivld)
    );
  assign strm_in_rsci_idat_mxwt = strm_in_rsci_idat[31:2];
  assign strm_in_rsci_wen_comp = (~ strm_in_rsci_oswt) | strm_in_rsci_biwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut_core
// ------------------------------------------------------------------


module dut_core (
  clk, en, rst, strm_in_rsc_dat, strm_in_rsc_vld, strm_in_rsc_rdy, strm_out_rsc_dat,
      strm_out_rsc_vld, strm_out_rsc_rdy, input_rsci_clken_d, input_rsci_d_d, input_rsci_q_d,
      input_rsci_radr_d, input_rsci_wadr_d, output_rsci_d_d, output_rsci_q_d, output_rsci_radr_d,
      output_rsci_wadr_d, attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d, attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d, attention_5_1_384_384_8_48_q_proj_re_rsci_d_d,
      attention_5_1_384_384_8_48_q_proj_re_rsci_q_d, attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d,
      attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d, attention_5_1_384_384_8_48_k_proj_re_rsci_d_d,
      attention_5_1_384_384_8_48_k_proj_re_rsci_q_d, attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d,
      attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d, attention_5_1_384_384_8_48_v_proj_re_rsci_d_d,
      attention_5_1_384_384_8_48_v_proj_re_rsci_q_d, attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d,
      attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d, attention_5_1_384_384_8_48_q_proj_rsci_q_d,
      attention_5_1_384_384_8_48_q_proj_rsci_radr_d, attention_5_1_384_384_8_48_q_proj_rsci_wadr_d,
      attention_5_1_384_384_8_48_k_proj_rsci_q_d, attention_5_1_384_384_8_48_k_proj_rsci_radr_d,
      attention_5_1_384_384_8_48_k_proj_rsci_wadr_d, attention_5_1_384_384_8_48_v_proj_rsci_q_d,
      attention_5_1_384_384_8_48_v_proj_rsci_radr_d, attention_5_1_384_384_8_48_v_proj_rsci_wadr_d,
      attention_5_1_384_384_8_48_q_embed_rsci_d_d, attention_5_1_384_384_8_48_q_embed_rsci_q_d,
      attention_5_1_384_384_8_48_q_embed_rsci_radr_d, attention_5_1_384_384_8_48_q_embed_rsci_wadr_d,
      attention_5_1_384_384_8_48_k_embed_rsci_d_d, attention_5_1_384_384_8_48_k_embed_rsci_q_d,
      attention_5_1_384_384_8_48_k_embed_rsci_radr_d, attention_5_1_384_384_8_48_k_embed_rsci_wadr_d,
      attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d, attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d,
      attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d, attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d,
      attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d, attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d,
      attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d, attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d,
      attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d, attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d,
      attention_5_1_384_384_8_48_attn_weights_rsci_d_d, attention_5_1_384_384_8_48_attn_weights_rsci_q_d,
      attention_5_1_384_384_8_48_attn_weights_rsci_radr_d, attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d,
      attention_5_1_384_384_8_48_attn_output_rsci_d_d, attention_5_1_384_384_8_48_attn_output_rsci_q_d,
      attention_5_1_384_384_8_48_attn_output_rsci_radr_d, attention_5_1_384_384_8_48_attn_output_rsci_wadr_d,
      attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d, attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d,
      attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d, attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d,
      attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d, attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d,
      attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d, apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d,
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d, apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d,
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d, apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d,
      apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d, apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d,
      apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d, rms_norm_384_div_cmp_a,
      rms_norm_384_div_cmp_b, rms_norm_384_div_cmp_z, input_rsci_re_d_pff, input_rsci_we_d_pff,
      output_rsci_re_d_pff, output_rsci_we_d_pff, attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_pff,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_pff, attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_pff,
      attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_pff, attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_pff,
      attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_pff, attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_pff,
      attention_5_1_384_384_8_48_q_proj_rsci_re_d_pff, attention_5_1_384_384_8_48_q_proj_rsci_we_d_pff,
      attention_5_1_384_384_8_48_v_proj_rsci_re_d_pff, attention_5_1_384_384_8_48_v_proj_rsci_we_d_pff,
      attention_5_1_384_384_8_48_q_embed_rsci_re_d_pff, attention_5_1_384_384_8_48_q_embed_rsci_we_d_pff,
      attention_5_1_384_384_8_48_k_embed_rsci_re_d_pff, attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_pff,
      attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_pff, attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_pff,
      attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_pff, attention_5_1_384_384_8_48_attn_weights_rsci_re_d_pff,
      attention_5_1_384_384_8_48_attn_weights_rsci_we_d_pff, attention_5_1_384_384_8_48_attn_output_rsci_re_d_pff,
      attention_5_1_384_384_8_48_attn_output_rsci_we_d_pff, attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_pff,
      attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_pff, attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_pff,
      attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_pff, apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_pff,
      apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_pff
);
  input clk;
  input en;
  input rst;
  input [31:0] strm_in_rsc_dat;
  input strm_in_rsc_vld;
  output strm_in_rsc_rdy;
  output [31:0] strm_out_rsc_dat;
  output strm_out_rsc_vld;
  input strm_out_rsc_rdy;
  output input_rsci_clken_d;
  output [39:0] input_rsci_d_d;
  input [39:0] input_rsci_q_d;
  output [8:0] input_rsci_radr_d;
  output [8:0] input_rsci_wadr_d;
  output [39:0] output_rsci_d_d;
  input [39:0] output_rsci_q_d;
  output [8:0] output_rsci_radr_d;
  output [8:0] output_rsci_wadr_d;
  output [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d;
  input [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_q_proj_re_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_q_proj_re_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_k_proj_re_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_k_proj_re_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_v_proj_re_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_v_proj_re_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d;
  input [39:0] attention_5_1_384_384_8_48_q_proj_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_q_proj_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_q_proj_rsci_wadr_d;
  input [39:0] attention_5_1_384_384_8_48_k_proj_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_k_proj_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_k_proj_rsci_wadr_d;
  input [39:0] attention_5_1_384_384_8_48_v_proj_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_v_proj_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_v_proj_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_q_embed_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_q_embed_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_q_embed_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_q_embed_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_k_embed_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_k_embed_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_k_embed_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_k_embed_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d;
  output [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d;
  output [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d;
  output [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d;
  output [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d;
  input [39:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d;
  output [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d;
  output [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_attn_weights_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_attn_weights_rsci_q_d;
  output [5:0] attention_5_1_384_384_8_48_attn_weights_rsci_radr_d;
  output [5:0] attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_attn_output_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_attn_output_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_attn_output_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_attn_output_rsci_wadr_d;
  output [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d;
  input [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d;
  input [7:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d;
  output [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d;
  output [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d;
  output [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d;
  input [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d;
  output [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d;
  output [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d;
  output [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d;
  input [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d;
  output [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d;
  output [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d;
  output [71:0] rms_norm_384_div_cmp_a;
  output [60:0] rms_norm_384_div_cmp_b;
  input [71:0] rms_norm_384_div_cmp_z;
  output input_rsci_re_d_pff;
  output input_rsci_we_d_pff;
  output output_rsci_re_d_pff;
  output output_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_q_proj_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_q_proj_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_v_proj_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_v_proj_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_q_embed_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_q_embed_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_k_embed_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_attn_weights_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_attn_weights_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_attn_output_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_attn_output_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_pff;
  output attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_pff;
  output attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_pff;
  output apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_pff;
  output apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_pff;


  // Interconnect Declarations
  wire core_wen1;
  wire strm_in_rsci_wen_comp;
  wire [29:0] strm_in_rsci_idat_mxwt;
  wire strm_out_rsci_wen_comp;
  wire input_rsc_clken_d_1;
  wire [55:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z;
  wire [71:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z;
  wire [39:0] rms_norm_384_div_cmp_z_oreg;
  wire [39:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z;
  reg [29:0] strm_out_rsci_idat_31_2;
  reg [39:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71_32;
  reg [29:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_0;
  wire [8:0] fsm_output;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_mux_tmp;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp;
  wire [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_mux_tmp;
  wire or_tmp_5;
  wire mux_tmp_28;
  wire or_tmp_24;
  wire and_dcpl_12;
  wire or_tmp_26;
  wire not_tmp_35;
  wire or_tmp_30;
  wire or_tmp_32;
  wire and_dcpl_25;
  wire and_dcpl_29;
  wire and_dcpl_39;
  wire mux_tmp_125;
  wire mux_tmp_167;
  wire mux_tmp_171;
  wire nor_tmp_54;
  wire mux_tmp_237;
  wire or_tmp_197;
  wire mux_tmp_238;
  wire mux_tmp_239;
  wire and_dcpl_88;
  wire or_tmp_216;
  wire mux_tmp_259;
  wire or_tmp_229;
  wire and_dcpl_107;
  wire and_dcpl_109;
  wire and_dcpl_110;
  wire and_dcpl_111;
  wire and_dcpl_116;
  wire and_dcpl_117;
  wire and_dcpl_118;
  wire or_dcpl_89;
  wire or_dcpl_90;
  wire or_tmp_233;
  wire and_tmp_6;
  wire and_dcpl_120;
  wire and_dcpl_121;
  wire and_dcpl_122;
  wire or_dcpl_93;
  wire or_dcpl_96;
  wire or_dcpl_100;
  wire or_dcpl_101;
  wire mux_tmp_302;
  wire and_dcpl_126;
  wire and_dcpl_127;
  wire and_dcpl_128;
  wire and_dcpl_129;
  wire and_dcpl_131;
  wire and_dcpl_133;
  wire and_dcpl_134;
  wire and_dcpl_137;
  wire and_dcpl_138;
  wire and_dcpl_139;
  wire and_dcpl_140;
  wire and_dcpl_144;
  wire and_dcpl_146;
  wire and_dcpl_149;
  wire and_dcpl_152;
  wire and_dcpl_154;
  wire and_dcpl_156;
  wire and_dcpl_157;
  wire and_dcpl_158;
  wire and_dcpl_159;
  wire or_tmp_260;
  wire mux_tmp_332;
  wire mux_tmp_333;
  wire and_dcpl_160;
  wire and_dcpl_161;
  wire and_dcpl_162;
  wire and_dcpl_163;
  wire and_dcpl_164;
  wire or_tmp_276;
  wire mux_tmp_338;
  wire mux_tmp_340;
  wire and_dcpl_167;
  wire and_dcpl_169;
  wire and_dcpl_170;
  wire mux_tmp_344;
  wire mux_tmp_348;
  wire mux_tmp_350;
  wire and_dcpl_174;
  wire and_dcpl_175;
  wire and_dcpl_176;
  wire or_tmp_283;
  wire mux_tmp_356;
  wire mux_tmp_358;
  wire and_dcpl_182;
  wire not_tmp_240;
  wire or_dcpl_111;
  wire mux_tmp_373;
  wire and_dcpl_185;
  wire and_dcpl_186;
  wire and_dcpl_188;
  wire and_dcpl_189;
  wire and_dcpl_190;
  wire and_dcpl_196;
  wire and_dcpl_197;
  wire and_dcpl_201;
  wire and_dcpl_204;
  wire not_tmp_245;
  wire and_dcpl_208;
  wire and_dcpl_210;
  wire and_dcpl_211;
  wire and_dcpl_212;
  wire and_dcpl_213;
  wire and_dcpl_214;
  wire and_dcpl_215;
  wire and_dcpl_217;
  wire and_dcpl_218;
  wire or_tmp_314;
  wire or_tmp_315;
  wire and_dcpl_227;
  wire and_dcpl_228;
  wire or_dcpl_116;
  wire and_dcpl_233;
  wire and_dcpl_234;
  wire and_dcpl_238;
  wire and_dcpl_239;
  wire and_dcpl_240;
  wire and_dcpl_241;
  wire and_dcpl_242;
  wire and_dcpl_243;
  wire and_dcpl_245;
  wire and_dcpl_246;
  wire and_dcpl_247;
  wire and_dcpl_248;
  wire and_dcpl_253;
  wire and_dcpl_254;
  wire and_dcpl_257;
  wire and_dcpl_263;
  wire and_dcpl_270;
  wire and_dcpl_271;
  wire nor_tmp_104;
  wire and_dcpl_282;
  wire and_dcpl_284;
  wire and_dcpl_285;
  wire mux_tmp_401;
  wire or_tmp_353;
  wire mux_tmp_403;
  wire and_dcpl_289;
  wire and_dcpl_290;
  wire and_dcpl_291;
  wire or_tmp_355;
  wire and_dcpl_297;
  wire and_dcpl_298;
  wire and_dcpl_299;
  wire and_dcpl_303;
  wire and_dcpl_306;
  wire or_tmp_370;
  wire and_dcpl_311;
  wire mux_tmp_417;
  wire nand_tmp_21;
  wire mux_tmp_418;
  wire and_dcpl_316;
  wire and_dcpl_317;
  wire or_tmp_381;
  wire and_dcpl_331;
  wire and_dcpl_342;
  wire or_tmp_407;
  wire or_tmp_408;
  wire or_tmp_410;
  wire and_dcpl_349;
  wire and_dcpl_350;
  wire and_dcpl_351;
  wire and_dcpl_354;
  wire and_dcpl_355;
  wire and_dcpl_360;
  wire and_dcpl_361;
  wire and_dcpl_366;
  wire and_dcpl_368;
  wire and_dcpl_369;
  wire and_dcpl_370;
  wire not_tmp_327;
  wire and_dcpl_374;
  wire and_dcpl_379;
  wire and_dcpl_393;
  wire mux_tmp_528;
  wire or_tmp_510;
  wire mux_tmp_534;
  wire mux_tmp_542;
  wire mux_tmp_543;
  wire mux_tmp_545;
  wire or_tmp_547;
  wire and_dcpl_397;
  wire and_dcpl_398;
  wire and_dcpl_400;
  wire mux_tmp_579;
  wire and_dcpl_409;
  wire and_dcpl_431;
  wire and_dcpl_438;
  wire or_tmp_636;
  wire nor_tmp_151;
  wire mux_tmp_649;
  wire or_tmp_645;
  wire mux_tmp_662;
  wire nand_tmp_40;
  wire mux_tmp_665;
  wire mux_tmp_667;
  wire or_tmp_651;
  wire and_dcpl_445;
  wire or_dcpl_136;
  wire or_dcpl_137;
  wire or_dcpl_138;
  wire mux_tmp_685;
  wire or_tmp_705;
  wire or_tmp_727;
  wire or_tmp_729;
  wire or_tmp_748;
  wire and_dcpl_454;
  wire mux_tmp_790;
  wire not_tmp_429;
  wire mux_tmp_803;
  wire mux_tmp_805;
  wire and_dcpl_461;
  wire and_dcpl_462;
  wire or_tmp_841;
  wire or_tmp_859;
  wire and_dcpl_478;
  wire nand_tmp_58;
  wire or_tmp_895;
  wire and_dcpl_482;
  wire and_dcpl_488;
  wire and_dcpl_503;
  wire and_dcpl_512;
  wire or_tmp_936;
  wire or_tmp_937;
  wire mux_tmp_963;
  wire and_dcpl_518;
  wire or_tmp_953;
  wire nand_tmp_69;
  wire nand_tmp_70;
  wire or_tmp_955;
  wire or_tmp_958;
  wire and_dcpl_527;
  wire or_tmp_963;
  wire mux_tmp_991;
  wire or_dcpl_169;
  wire or_dcpl_181;
  wire or_dcpl_185;
  wire or_tmp_968;
  wire mux_tmp_996;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_3_cse;
  wire CACHE_UPDATE_LOOP_1_and_cse;
  reg CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  reg INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs;
  wire RMS_NORM_LOOP_2_2_and_2_m1c_1;
  reg QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs;
  wire [31:0] rms_norm_384_1_val_acc_psp_sva_1;
  wire [33:0] nl_rms_norm_384_1_val_acc_psp_sva_1;
  wire [3:0] GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2;
  wire [4:0] nl_GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2;
  wire [3:0] APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2;
  wire [4:0] nl_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2;
  reg APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  reg LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm;
  reg QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_17_svs;
  reg QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs;
  wire RMS_NORM_LOOP_2_and_2_m1c_1;
  reg QUANTIZE_ACTIVATION_LOOP_2_slc_40_1_svs;
  wire [31:0] rms_norm_384_val_acc_psp_sva_1;
  wire [33:0] nl_rms_norm_384_val_acc_psp_sva_1;
  reg [39:0] RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva;
  reg exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm;
  reg exit_QUANTIZE_ACTIVATION_LOOP_2_sva_dfm;
  reg [2:0] APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs;
  reg exit_APPLY_ROTARY_POS_EMB_LOOP_3_sva_dfm;
  reg [2:0] GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva;
  reg [39:0] RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva;
  reg QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_39;
  reg [38:0] QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_38_0;
  reg [52:0] RMS_NORM_LOOP_2_2_mul_1_itm;
  reg QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_39;
  reg [38:0] QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_38_0;
  reg [51:0] RMS_NORM_LOOP_2_mul_1_itm;
  reg [1:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs;
  wire and_187_ssc;
  wire and_188_ssc;
  reg [20:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_39;
  reg [38:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_0;
  wire and_160_ssc;
  wire nor_seb;
  reg operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39;
  reg [8:0] operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30;
  wire RMS_NORM_LOOP_2_2_and_ssc;
  reg RMS_NORM_LOOP_2_2_dfr_sva_9;
  reg [8:0] RMS_NORM_LOOP_2_2_dfr_sva_8_0;
  reg operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17;
  wire [18:0] SF_LOOP_3_acc_17_sdt;
  wire [19:0] nl_SF_LOOP_3_acc_17_sdt;
  reg [9:0] SF_LOOP_3_acc_17_itm_18_9;
  reg [8:0] SF_LOOP_3_acc_17_itm_8_0;
  wire SF_LOOP_3_and_11_ssc;
  wire SF_LOOP_3_and_12_ssc;
  wire SF_LOOP_3_and_14_ssc;
  wire SF_LOOP_3_and_4_ssc;
  wire QUANTIZE_ACTIVATION_LOOP_1_max_val_and_cse;
  wire QUANTIZE_ACTIVATION_LOOP_1_1_max_val_and_cse;
  wire nor_365_cse;
  wire and_694_cse;
  wire or_392_cse;
  reg reg_strm_out_rsci_iswt0_cse;
  reg reg_strm_in_rsci_iswt0_cse;
  wire or_353_cse;
  wire nor_366_cse;
  wire or_373_cse;
  wire or_381_cse;
  wire and_692_cse;
  wire nand_93_cse;
  wire or_21_cse;
  wire or_603_cse;
  wire nor_413_cse;
  wire or_609_cse;
  wire or_1205_cse;
  wire and_696_cse;
  wire or_791_cse;
  wire or_1215_cse;
  wire or_745_cse;
  wire nor_168_cse;
  wire or_802_cse;
  wire or_518_cse;
  wire or_734_cse;
  wire nand_200_cse;
  wire nor_179_cse;
  wire and_768_cse;
  wire nor_494_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_cse;
  wire nor_411_cse;
  wire nand_199_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_and_cse;
  wire SF_LOOP_3_and_2_cse;
  reg [5:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse;
  wire [8:0] nl_reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse;
  wire nand_184_cse;
  wire or_1158_cse;
  wire or_657_cse;
  wire or_55_cse;
  wire or_360_cse;
  wire or_350_cse;
  wire or_832_cse;
  wire and_578_cse;
  wire nor_566_cse;
  wire nor_239_cse;
  wire or_170_cse;
  wire or_231_cse;
  wire or_890_cse;
  wire or_310_cse;
  wire nor_392_cse;
  wire and_662_cse;
  wire or_216_cse;
  wire or_1027_cse;
  wire or_391_cse;
  wire or_1213_cse;
  wire and_74_cse;
  wire and_72_cse;
  wire or_1054_cse;
  wire mux_705_cse;
  wire or_15_cse;
  wire or_58_cse;
  wire or_367_cse;
  wire or_164_cse;
  wire or_733_cse;
  wire nand_258_cse;
  wire or_909_cse;
  wire or_913_cse;
  wire or_702_cse;
  wire or_129_cse;
  wire nand_88_cse;
  wire nand_89_cse;
  wire nor_238_cse;
  wire nand_224_cse;
  wire mux_185_cse;
  wire or_604_cse;
  wire nor_405_cse;
  wire nand_195_cse;
  wire nand_243_cse;
  wire nor_514_cse;
  wire or_992_cse;
  wire nor_126_cse;
  wire GEMM_3D_FLOAT_LOOP_3_or_3_cse;
  wire or_351_ssc;
  reg reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd;
  reg reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1;
  reg [39:0] reg_rms_norm_384_div_cmp_a_ftd;
  reg [3:0] CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_2;
  reg [1:0] CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0;
  reg [3:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2;
  reg [1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0;
  wire RESHAPE_2D_TO_3D_LOOP_3_2_and_ssc;
  wire [19:0] SF_LOOP_3_acc_26_sdt;
  wire [20:0] nl_SF_LOOP_3_acc_26_sdt;
  wire SF_LOOP_3_and_ssc;
  wire or_601_cse;
  wire nor_414_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_1_or_cse;
  wire or_833_cse;
  wire or_817_cse;
  wire or_354_cse;
  wire mux_257_cse;
  wire mux_688_cse;
  wire mux_684_cse;
  wire or_612_cse;
  wire mux_857_cse;
  wire RMS_NORM_LOOP_2_2_dfr_sva_mx0c0;
  wire mux_710_cse;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_9_rmff;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_rmff;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_1_rmff;
  wire and_350_ssc;
  wire for_for_and_seb;
  wire and_342_ssc;
  wire INIT_2D_MEM_LOOP_2_3_nor_seb;
  wire and_321_ssc;
  wire mux_415_seb;
  wire and_317_ssc;
  wire INIT_2D_MEM_LOOP_2_1_nor_seb;
  wire and_309_ssc;
  wire INIT_2D_MEM_LOOP_2_2_nor_seb;
  wire and_225_ssc;
  wire ATTN_2D_LOOP_3_and_seb;
  reg [8:0] INIT_2D_MEM_LOOP_2_2_acc_itm;
  wire [8:0] GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1;
  wire [9:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1;
  reg [2:0] GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0;
  reg [3:0] CACHE_UPDATE_LOOP_3_1_acc_18_psp_1;
  reg [2:0] RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0;
  reg [3:0] CACHE_UPDATE_LOOP_3_acc_18_psp_1;
  reg [4:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva;
  reg [2:0] CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0;
  wire [3:0] RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0;
  wire [4:0] nl_RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0;
  reg [5:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva;
  reg [3:0] RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1;
  reg [3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0;
  reg [3:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4;
  reg [3:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt;
  wire attention_5_1_384_384_8_48_attn_weights_rsci_radr_d_mx0c2;
  wire attention_5_1_384_384_8_48_attn_output_rsci_radr_d_mx0c1;
  reg [7:0] attention_round_qr_39_16_lpi_4_dfm_7_0;
  reg [55:0] APPLY_ROTARY_POS_EMB_LOOP_6_mul_3_itm;
  reg [55:0] APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm;
  wire signed [56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm;
  reg [55:0] APPLY_ROTARY_POS_EMB_LOOP_6_mul_8_itm;
  reg [55:0] APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_itm;
  reg [39:0] CACHE_UPDATE_LOOP_3_qr_sva_1;
  reg [39:0] CACHE_UPDATE_LOOP_3_1_qr_sva_1;
  reg [39:0] GEMM_3D_FLOAT_LOOP_4_1_asn_itm;
  reg [37:0] SF_LOOP_3_acc_58_itm;
  wire [38:0] nl_SF_LOOP_3_acc_58_itm;
  reg [7:0] attention_round_1_qr_39_16_lpi_4_dfm_7_0;
  reg [39:0] INIT_2D_MEM_LOOP_2_1_asn_psp;
  reg [39:0] INIT_2D_MEM_LOOP_2_2_asn_psp;
  wire and_193_itm;
  wire [16:0] APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm;
  wire and_382_itm;
  wire operator_40_24_true_AC_TRN_AC_WRAP_1_and_itm;
  wire [1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm;
  wire [2:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm;
  wire and_433_itm;
  wire and_434_itm;
  wire and_439_itm;
  wire and_440_itm;
  wire and_441_itm;
  wire [11:0] RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm;
  wire [16:0] APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm;
  wire [12:0] RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm;
  wire and_349_itm;
  wire and_461_itm;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_itm;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_itm;
  wire [4:0] SF_LOOP_3_acc_87_itm;
  wire [5:0] nl_SF_LOOP_3_acc_87_itm;
  wire and_548_itm;
  wire [39:0] CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm;
  wire [39:0] CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_itm;
  wire [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm;
  wire and_dcpl_550;
  wire and_dcpl_556;
  wire and_dcpl_559;
  wire and_dcpl_562;
  wire and_dcpl_563;
  wire and_dcpl_564;
  wire and_dcpl_566;
  wire and_dcpl_570;
  wire and_dcpl_573;
  wire [39:0] z_out;
  wire [8:0] z_out_1;
  wire [9:0] nl_z_out_1;
  wire and_dcpl_596;
  wire [8:0] z_out_2;
  wire [9:0] nl_z_out_2;
  wire [8:0] z_out_3;
  wire [9:0] nl_z_out_3;
  wire and_dcpl_613;
  wire and_dcpl_614;
  wire [17:0] z_out_4;
  wire signed [19:0] nl_z_out_4;
  wire and_dcpl_629;
  wire and_dcpl_634;
  wire and_dcpl_641;
  wire and_dcpl_646;
  wire and_dcpl_651;
  wire and_dcpl_656;
  wire and_dcpl_659;
  wire and_dcpl_663;
  wire and_dcpl_666;
  wire and_dcpl_671;
  wire [60:0] z_out_5;
  wire signed [79:0] nl_z_out_5;
  wire and_dcpl_679;
  wire [59:0] z_out_6;
  wire signed [60:0] nl_z_out_6;
  wire and_dcpl_704;
  wire [59:0] z_out_7;
  wire signed [60:0] nl_z_out_7;
  wire and_dcpl_717;
  wire and_dcpl_722;
  wire [2:0] z_out_8;
  wire and_dcpl_742;
  wire and_dcpl_749;
  wire and_dcpl_752;
  wire and_dcpl_755;
  wire and_dcpl_757;
  wire and_dcpl_761;
  wire and_dcpl_762;
  wire and_dcpl_763;
  wire and_dcpl_767;
  wire [4:0] z_out_10;
  wire and_dcpl_779;
  wire and_dcpl_786;
  wire [4:0] z_out_11;
  wire [5:0] nl_z_out_11;
  wire and_dcpl_789;
  wire and_dcpl_808;
  wire [3:0] z_out_12;
  wire [4:0] nl_z_out_12;
  wire [2:0] z_out_13;
  wire and_dcpl_832;
  wire and_dcpl_833;
  wire and_dcpl_837;
  wire and_dcpl_840;
  wire and_dcpl_846;
  wire [5:0] z_out_15;
  wire [5:0] z_out_17;
  wire [6:0] nl_z_out_17;
  wire and_dcpl_917;
  wire [71:0] z_out_19;
  wire signed [92:0] nl_z_out_19;
  wire and_dcpl_931;
  wire and_dcpl_942;
  wire [16:0] z_out_21;
  wire [17:0] nl_z_out_21;
  wire and_dcpl_953;
  wire [23:0] z_out_22;
  wire [24:0] nl_z_out_22;
  wire and_dcpl_964;
  wire [17:0] z_out_23;
  wire [55:0] z_out_25;
  wire signed [56:0] nl_z_out_25;
  wire [55:0] z_out_26;
  wire signed [56:0] nl_z_out_26;
  wire [55:0] z_out_27;
  wire signed [56:0] nl_z_out_27;
  wire and_dcpl_1069;
  wire and_dcpl_1087;
  wire [3:0] z_out_31;
  wire [4:0] nl_z_out_31;
  wire and_dcpl_1094;
  wire [3:0] z_out_32;
  wire [4:0] nl_z_out_32;
  wire [3:0] z_out_33;
  wire [4:0] nl_z_out_33;
  wire and_dcpl_1152;
  wire [3:0] z_out_35;
  wire [4:0] nl_z_out_35;
  wire [3:0] z_out_37;
  wire [4:0] nl_z_out_37;
  wire [3:0] z_out_38;
  wire [4:0] nl_z_out_38;
  wire and_dcpl_1208;
  reg [30:0] attention_abs_qif_acc_pmx_lpi_1_dfm;
  reg [39:0] attention_abs_3_qr_sva;
  reg [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva;
  reg [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva;
  reg [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva;
  reg [21:0] SF_LOOP_3_acc_5_psp_sva;
  wire [22:0] nl_SF_LOOP_3_acc_5_psp_sva;
  reg [39:0] softmax_1_8_6_sum_sva_1;
  wire [40:0] nl_softmax_1_8_6_sum_sva_1;
  reg [30:0] attention_abs_4_qif_acc_pmx_lpi_1_dfm;
  reg [39:0] attention_abs_7_qr_sva;
  reg [39:0] QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva;
  reg [7:0] LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva;
  reg [39:0] RMS_NORM_LOOP_1_1_slc_RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mul_55_16_itm;
  reg [59:0] LINEAR_FORWARD_NO_MUL_LOOP_2_mul_1_itm;
  reg [60:0] LINEAR_FORWARD_NO_MUL_LOOP_2_1_mul_1_itm;
  reg [59:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_mul_1_itm;
  reg [18:0] SF_LOOP_3_acc_16_itm;
  wire [19:0] nl_SF_LOOP_3_acc_16_itm;
  reg [18:0] SF_LOOP_3_acc_15_itm;
  wire [19:0] nl_SF_LOOP_3_acc_15_itm;
  reg [18:0] SF_LOOP_3_mul_17_itm;
  reg [19:0] SF_LOOP_3_acc_28_itm;
  wire [21:0] nl_SF_LOOP_3_acc_28_itm;
  reg [17:0] SF_LOOP_3_acc_35_itm;
  wire [18:0] nl_SF_LOOP_3_acc_35_itm;
  reg [30:0] SF_LOOP_3_mul_6_itm;
  reg [9:0] SF_LOOP_3_mul_7_itm;
  reg [6:0] SF_LOOP_3_acc_39_itm;
  wire [8:0] nl_SF_LOOP_3_acc_39_itm;
  reg [10:0] SF_LOOP_3_acc_40_itm;
  wire [12:0] nl_SF_LOOP_3_acc_40_itm;
  reg [18:0] SF_LOOP_3_acc_46_itm;
  wire [19:0] nl_SF_LOOP_3_acc_46_itm;
  reg [25:0] SF_LOOP_3_acc_50_itm;
  wire [26:0] nl_SF_LOOP_3_acc_50_itm;
  reg [31:0] SF_LOOP_3_acc_54_itm;
  wire [32:0] nl_SF_LOOP_3_acc_54_itm;
  reg [59:0] LINEAR_FORWARD_NO_MUL_LOOP_2_3_mul_1_itm;
  reg [8:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm;
  wire [10:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm;
  reg [16:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm;
  wire [17:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm;
  reg [24:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm;
  wire [25:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm;
  reg [30:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm;
  wire [31:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm;
  reg [7:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm;
  wire [9:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm;
  reg operator_40_24_true_AC_TRN_AC_WRAP_and_1_itm;
  reg [15:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm;
  wire [16:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm;
  reg [23:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm;
  wire [24:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm;
  reg [29:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm;
  wire [30:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm;
  reg [8:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm;
  wire [10:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm;
  reg [16:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm;
  wire [17:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm;
  reg [24:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm;
  wire [25:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm;
  reg [30:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm;
  wire [31:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm;
  reg [7:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm;
  wire [9:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm;
  reg [15:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm;
  wire [16:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm;
  reg [23:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm;
  wire [24:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm;
  reg [29:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm;
  wire [30:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm;
  reg QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39;
  reg [38:0] QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0;
  reg QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39;
  reg [38:0] QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0;
  reg [29:0] for_for_strm_in_tmp_sva_31_2;
  reg [29:0] compute_sqrt_guess_sva_29_0;
  reg [29:0] compute_sqrt_1_guess_sva_29_0;
  reg [3:0] SF_LOOP_3_acc_93_psp;
  wire [4:0] nl_SF_LOOP_3_acc_93_psp;
  reg [10:0] SF_LOOP_3_acc_96_psp;
  wire [11:0] nl_SF_LOOP_3_acc_96_psp;
  reg [19:0] SF_LOOP_3_acc_30_psp;
  wire [20:0] nl_SF_LOOP_3_acc_30_psp;
  wire QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39_mx0w2;
  wire [38:0] QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0_mx0w2;
  wire QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39_mx0w2;
  wire [38:0] QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0_mx0w2;
  wire [8:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5;
  wire [9:0] nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5;
  wire CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c6;
  wire [2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1;
  wire [4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1;
  wire [30:0] attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0;
  wire [31:0] nl_attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0;
  wire RMS_NORM_LOOP_2_2_dfr_sva_mx0c2;
  wire RMS_NORM_LOOP_2_2_dfr_sva_mx0c3;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c4;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c6;
  wire exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm_mx0w0;
  wire [39:0] attention_abs_2_mux_2;
  wire [40:0] nl_attention_abs_2_mux_2;
  wire [39:0] attention_abs_1_qr_sva_1;
  wire [40:0] nl_attention_abs_1_qr_sva_1;
  wire RMS_NORM_LOOP_2_and_4_ssc_1;
  wire RMS_NORM_LOOP_2_and_1_ssc_1;
  wire RMS_NORM_LOOP_2_and_6_ssc_1;
  wire RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1;
  wire RMS_NORM_LOOP_2_and_5_ssc_1;
  wire [2:0] LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2;
  wire [3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2;
  wire [2:0] QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3;
  wire [3:0] nl_QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3;
  wire [5:0] RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2;
  wire [6:0] nl_RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2;
  wire [2:0] SF_LOOP_3_acc_61_cse_mx0w4;
  wire [3:0] nl_SF_LOOP_3_acc_61_cse_mx0w4;
  wire [23:0] attention_round_qr_39_16_lpi_4_dfm_mx0w0;
  wire [24:0] nl_attention_round_qr_39_16_lpi_4_dfm_mx0w0;
  wire GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c0;
  wire GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1;
  wire GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c2;
  wire GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c3;
  wire [2:0] LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2;
  wire [3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c1;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c3;
  wire CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5;
  wire [2:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1;
  wire [3:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1;
  wire [3:0] SF_LOOP_3_acc_63_cse_mx0w6;
  wire [4:0] nl_SF_LOOP_3_acc_63_cse_mx0w6;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0;
  wire [5:0] RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2;
  wire [6:0] nl_RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2;
  wire [4:0] APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2;
  wire [5:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm_mx0c1;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_1_cse_1;
  wire [4:0] LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2;
  wire [5:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2;
  wire [4:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2;
  wire [5:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2;
  wire [5:0] CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1;
  wire [6:0] nl_CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1;
  wire [5:0] CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1;
  wire [6:0] nl_CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1;
  wire [1:0] SF_LOOP_3_acc_64_ncse_1;
  wire [2:0] nl_SF_LOOP_3_acc_64_ncse_1;
  wire [17:0] SF_LOOP_3_acc_11_itm_1;
  wire [18:0] nl_SF_LOOP_3_acc_11_itm_1;
  wire [16:0] SF_LOOP_3_mul_15_itm_1;
  wire [17:0] nl_SF_LOOP_3_mul_15_itm_1;
  wire [18:0] SF_LOOP_3_acc_6_psp_sva_1;
  wire [19:0] nl_SF_LOOP_3_acc_6_psp_sva_1;
  wire [17:0] SF_LOOP_3_acc_7_psp_sva_1;
  wire [18:0] nl_SF_LOOP_3_acc_7_psp_sva_1;
  wire [2:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1;
  wire [4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1;
  wire [30:0] attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0;
  wire [31:0] nl_attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0;
  wire [39:0] attention_abs_6_mux_2;
  wire [40:0] nl_attention_abs_6_mux_2;
  wire [39:0] attention_abs_5_qr_sva_1;
  wire [40:0] nl_attention_abs_5_qr_sva_1;
  wire RMS_NORM_LOOP_2_2_and_4_ssc_1;
  wire RMS_NORM_LOOP_2_2_and_1_ssc_1;
  wire RMS_NORM_LOOP_2_2_and_6_ssc_1;
  wire RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1;
  wire RMS_NORM_LOOP_2_2_and_5_ssc_1;
  wire [23:0] attention_round_1_qr_39_16_lpi_4_dfm_mx0w0;
  wire [24:0] nl_attention_round_1_qr_39_16_lpi_4_dfm_mx0w0;
  wire INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm_1;
  reg [1:0] SF_LOOP_3_acc_6_psp_sva_18_17;
  reg [2:0] SF_LOOP_3_acc_11_itm_17_15;
  reg [13:0] SF_LOOP_3_acc_11_itm_13_0;
  reg [1:0] SF_LOOP_3_mul_12_itm_16_15;
  reg [3:0] SF_LOOP_3_mul_12_itm_3_0;
  reg [6:0] SF_LOOP_3_mul_15_itm_16_10;
  reg [6:0] SF_LOOP_3_mul_15_itm_6_0;
  reg [1:0] SF_LOOP_3_mul_19_itm_12_11;
  reg [5:0] SF_LOOP_3_mul_19_itm_9_4;
  wire [29:0] attention_abs_qif_acc_pmx_lpi_1_dfm_mx1_30_1;
  wire attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39;
  wire [38:0] attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_0;
  wire attention_max_attn_fixed_t_1_conc_psp_mx0w11_39;
  wire [38:0] attention_max_attn_fixed_t_1_conc_psp_mx0w11_38_0;
  wire [16:0] attention_round_qr_39_16_lpi_4_dfm_mx1_23_7;
  wire [4:0] APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5;
  wire [5:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5;
  wire [29:0] attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx1_30_1;
  wire [16:0] attention_round_1_qr_39_16_lpi_4_dfm_mx1_23_7;
  wire [8:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7;
  wire [9:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7;
  reg [1:0] SF_LOOP_3_mul_sdt_sva_35_34;
  reg [15:0] SF_LOOP_3_mul_sdt_sva_32_17;
  reg [15:0] SF_LOOP_3_mul_sdt_sva_15_0;
  reg [1:0] SF_LOOP_3_mul_itm_10_9;
  reg [7:0] SF_LOOP_3_mul_itm_7_0;
  reg [1:0] SF_LOOP_3_mul_1_itm_12_11;
  reg [9:0] SF_LOOP_3_mul_1_itm_9_0;
  reg [1:0] SF_LOOP_3_mul_2_itm_18_17;
  reg [15:0] SF_LOOP_3_mul_2_itm_15_0;
  reg [1:0] SF_LOOP_3_mul_3_itm_21_20;
  reg [15:0] SF_LOOP_3_mul_3_itm_18_3;
  reg [1:0] SF_LOOP_3_mul_3_itm_1_0;
  reg [1:0] SF_LOOP_3_mul_4_itm_23_22;
  reg [15:0] SF_LOOP_3_mul_4_itm_20_5;
  reg [3:0] SF_LOOP_3_mul_4_itm_3_0;
  reg [1:0] SF_LOOP_3_mul_5_itm_31_30;
  reg [15:0] SF_LOOP_3_mul_5_itm_28_13;
  reg [11:0] SF_LOOP_3_mul_5_itm_11_0;
  reg [1:0] RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_4_3;
  reg [10:0] SF_LOOP_3_acc_26_itm_19_9;
  reg [8:0] SF_LOOP_3_acc_26_itm_8_0;
  wire [19:0] operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0;
  wire RMS_NORM_LOOP_1_1_or_ssc;
  reg reg_rms_norm_384_div_cmp_b_ftd_1;
  wire operator_40_24_true_AC_TRN_AC_WRAP_1_and_2_ssc;
  reg [7:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd;
  reg [8:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1;
  wire GEMM_3D_FLOAT_LOOP_3_and_ssc;
  reg reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd;
  reg [38:0] reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1;
  reg [3:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd;
  reg [2:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1;
  reg [3:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2;
  reg reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3;
  reg [2:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4;
  reg [8:0] reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_and_ssc;
  reg [2:0] reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd;
  wire operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_or_3_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_cse;
  wire or_1328_cse;
  wire or_1330_cse;
  wire nor_510_cse;
  wire xnor_cse;
  wire compute_sqrt_for_or_2_cse;
  wire or_589_cse;
  wire nor_287_cse;
  wire nor_632_cse;
  wire nand_78_cse;
  wire compute_sqrt_for_guess_inv_or_cse;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse;
  wire and_189_ssc;
  wire and_190_ssc;
  reg SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39;
  reg [38:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_0;
  wire and_181_ssc;
  wire and_182_ssc;
  reg SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55;
  reg [38:0] SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_16;
  wire [2:0] RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_3_1;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_0;
  wire [2:0] APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_4_2;
  reg [21:0] reg_rms_norm_384_div_cmp_b_ftd_59_38;
  reg [37:0] reg_rms_norm_384_div_cmp_b_ftd_37_0;
  wire and_1011_cse;
  wire and_1256_cse;
  wire and_1280_cse;
  wire mux_575_cse;
  wire mux_1056_cse;
  wire operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_cse;
  wire and_876_cse;
  wire and_894_cse;
  wire and_897_cse;
  wire and_1051_cse;
  wire and_1291_cse;
  wire mux_1008_cse;
  wire mux_1014_cse;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_nor_cse;
  wire [3:0] APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1;
  wire [4:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_or_2_cse;
  reg [4:0] operator_80_48_true_AC_TRN_AC_WRAP_operator_80_48_true_AC_TRN_AC_WRAP_slc_SOFTMAX_LOOP_4_sqr_56_1_itm_slc;
  reg [2:0] SF_LOOP_3_mul_12_itm_12_9_slc;
  reg [3:0] reg_attention_round_a_cse_slc;
  wire [5:0] SF_LOOP_3_acc_88_itm;
  wire [6:0] nl_SF_LOOP_3_acc_88_itm;
  wire and_533_itm;
  wire and_537_itm;
  wire nor_582_itm;
  wire and_542_itm;
  wire and_544_itm;
  wire CACHE_UPDATE_LOOP_3_k_nand_1_itm;
  wire RMS_NORM_LOOP_1_1_or_1_itm;
  wire compute_sqrt_for_guess_inv_or_2_itm;
  wire compute_sqrt_for_guess_inv_or_4_itm;
  wire compute_sqrt_for_guess_inv_or_3_itm;
  wire [39:0] compute_sqrt_1_for_acc_1_itm_40_1_1;
  wire [39:0] compute_sqrt_for_acc_1_itm_40_1_1;
  wire attention_max_attn_fixed_t_acc_itm_40_1;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_itm_17_1;
  wire attention_max_attn_fixed_t_1_acc_itm_40_1;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_itm_17_1;
  wire attention_round_1_acc_itm_40_1;
  wire SOFTMAX_LOOP_3_acc_3_itm_40_1;
  wire attention_round_acc_itm_40_1;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_2_cse_1;
  wire CACHE_UPDATE_LOOP_2_1_j_and_ssc;
  reg [1:0] reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd;
  reg reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1;
  reg reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd;
  reg reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1;
  wire CACHE_UPDATE_LOOP_3_k_and_ssc;
  reg reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd;
  wire compute_sqrt_for_guess_inv_nor_seb;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_and_3_cse;
  wire CACHE_UPDATE_LOOP_3_k_and_1_cse;
  wire and_766_cse;
  wire mux_730_cse;
  wire mux_732_cse;
  reg [1:0] reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1;
  wire APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_0;
  wire nor_580_seb;
  reg [1:0] reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1;
  reg reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0;
  wire or_1233_ssc;
  wire RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_2;
  wire [1:0] RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_1_0;
  wire [1:0] z_out_9_1_0;
  wire [23:0] z_out_14_23_0;
  wire [24:0] nl_z_out_14_23_0;
  wire [4:0] z_out_16_4_0;
  wire [5:0] nl_z_out_16_4_0;
  wire [51:0] z_out_20_67_16;
  wire z_out_28_2;
  wire z_out_29_2;
  wire z_out_30_2;
  wire [2:0] z_out_34_2_0;
  wire [3:0] nl_z_out_34_2_0;
  wire [2:0] z_out_36_2_0;
  wire [3:0] nl_z_out_36_2_0;
  wire and_1353_cse;
  wire and_1509_cse;
  wire nor_505_cse;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_m1c;
  wire or_1349_tmp;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux1h_1_tmp;

  wire mux_285_nl;
  wire or_1194_nl;
  wire nand_148_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl;
  wire mux_293_nl;
  wire mux_292_nl;
  wire mux_291_nl;
  wire mux_290_nl;
  wire mux_289_nl;
  wire mux_288_nl;
  wire mux_287_nl;
  wire and_659_nl;
  wire mux_286_nl;
  wire and_660_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_nl;
  wire mux_310_nl;
  wire mux_309_nl;
  wire mux_308_nl;
  wire mux_307_nl;
  wire and_134_nl;
  wire mux_306_nl;
  wire mux_305_nl;
  wire and_133_nl;
  wire or_348_nl;
  wire and_144_nl;
  wire mux_314_nl;
  wire mux_313_nl;
  wire mux_312_nl;
  wire mux_311_nl;
  wire or_352_nl;
  wire compute_sqrt_guess_and_1_nl;
  wire and_156_nl;
  wire mux_317_nl;
  wire compute_sqrt_guess_and_3_nl;
  wire mux_331_nl;
  wire mux_330_nl;
  wire mux_329_nl;
  wire mux_30_nl;
  wire or_39_nl;
  wire mux_327_nl;
  wire mux_296_nl;
  wire mux_294_nl;
  wire mux_326_nl;
  wire mux_325_nl;
  wire mux_324_nl;
  wire mux_323_nl;
  wire nand_18_nl;
  wire mux_322_nl;
  wire mux_321_nl;
  wire mux_320_nl;
  wire or_359_nl;
  wire mux_319_nl;
  wire mux_318_nl;
  wire or_358_nl;
  wire or_355_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux1h_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_2_nl;
  wire mux_337_nl;
  wire or_383_nl;
  wire mux_336_nl;
  wire mux_335_nl;
  wire or_379_nl;
  wire or_376_nl;
  wire mux_334_nl;
  wire and_174_nl;
  wire and_175_nl;
  wire mux_342_nl;
  wire mux_341_nl;
  wire mux_345_nl;
  wire nand_167_nl;
  wire mux_353_nl;
  wire mux_352_nl;
  wire GEMM_3D_FLOAT_LOOP_3_mux_nl;
  wire and_180_nl;
  wire mux_364_nl;
  wire mux_363_nl;
  wire mux_362_nl;
  wire mux_361_nl;
  wire mux_360_nl;
  wire mux_359_nl;
  wire mux_357_nl;
  wire mux_366_nl;
  wire mux_365_nl;
  wire or_398_nl;
  wire mux_368_nl;
  wire mux_367_nl;
  wire nand_169_nl;
  wire mux_370_nl;
  wire mux_369_nl;
  wire mux_372_nl;
  wire mux_374_nl;
  wire rms_norm_384_mux1h_7_nl;
  wire and_196_nl;
  wire mux_377_nl;
  wire or_410_nl;
  wire mux_384_nl;
  wire and_701_nl;
  wire mux_383_nl;
  wire nor_376_nl;
  wire nor_377_nl;
  wire nor_378_nl;
  wire mux_382_nl;
  wire or_423_nl;
  wire or_422_nl;
  wire mux_406_nl;
  wire mux_405_nl;
  wire or_482_nl;
  wire or_479_nl;
  wire mux_411_nl;
  wire mux_410_nl;
  wire or_492_nl;
  wire or_491_nl;
  wire and_nl;
  wire mux_414_nl;
  wire nor_390_nl;
  wire nor_391_nl;
  wire nor_574_nl;
  wire mux_430_nl;
  wire mux_429_nl;
  wire mux_434_nl;
  wire nor_397_nl;
  wire mux_433_nl;
  wire nor_398_nl;
  wire nor_399_nl;
  wire[39:0] rms_norm_384_variance_mux1h_nl;
  wire rms_norm_384_variance_or_nl;
  wire and_355_nl;
  wire and_356_nl;
  wire and_366_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_nand_nl;
  wire mux_466_nl;
  wire nor_406_nl;
  wire and_713_nl;
  wire mux_465_nl;
  wire mux_464_nl;
  wire mux_463_nl;
  wire mux_462_nl;
  wire mux_461_nl;
  wire or_550_nl;
  wire or_548_nl;
  wire or_546_nl;
  wire mux_460_nl;
  wire mux_459_nl;
  wire mux_458_nl;
  wire mux_457_nl;
  wire or_1208_nl;
  wire nand_188_nl;
  wire mux_456_nl;
  wire mux_455_nl;
  wire mux_454_nl;
  wire or_538_nl;
  wire mux_453_nl;
  wire mux_452_nl;
  wire or_537_nl;
  wire mux_451_nl;
  wire nand_22_nl;
  wire mux_450_nl;
  wire nor_404_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_2_mux1h_15_nl;
  wire[8:0] SF_LOOP_3_acc_82_nl;
  wire[9:0] nl_SF_LOOP_3_acc_82_nl;
  wire INIT_2D_MEM_LOOP_2_2_or_3_nl;
  wire and_369_nl;
  wire mux_479_nl;
  wire nor_418_nl;
  wire mux_478_nl;
  wire nor_419_nl;
  wire mux_477_nl;
  wire or_572_nl;
  wire or_1181_nl;
  wire nor_420_nl;
  wire INIT_2D_MEM_LOOP_2_2_nand_nl;
  wire mux_483_nl;
  wire mux_482_nl;
  wire mux_481_nl;
  wire and_720_nl;
  wire nor_424_nl;
  wire nor_425_nl;
  wire mux_480_nl;
  wire or_1211_nl;
  wire mux_476_nl;
  wire mux_475_nl;
  wire mux_474_nl;
  wire mux_473_nl;
  wire nor_412_nl;
  wire and_715_nl;
  wire and_716_nl;
  wire mux_472_nl;
  wire nor_409_nl;
  wire mux_471_nl;
  wire mux_470_nl;
  wire or_563_nl;
  wire mux_469_nl;
  wire mux_468_nl;
  wire nor_416_nl;
  wire mux_467_nl;
  wire nor_417_nl;
  wire mux_507_nl;
  wire or_608_nl;
  wire mux_517_nl;
  wire nor_429_nl;
  wire nor_430_nl;
  wire[8:0] for_for_j_and_nl;
  wire[8:0] for_for_j_mux1h_nl;
  wire for_for_j_or_nl;
  wire mux_505_nl;
  wire mux_504_nl;
  wire mux_503_nl;
  wire or_605_nl;
  wire mux_502_nl;
  wire mux_501_nl;
  wire mux_500_nl;
  wire nand_197_nl;
  wire mux_499_nl;
  wire or_599_nl;
  wire mux_498_nl;
  wire mux_497_nl;
  wire or_598_nl;
  wire or_595_nl;
  wire mux_496_nl;
  wire or_594_nl;
  wire INIT_2D_MEM_LOOP_2_not_1_nl;
  wire mux_495_nl;
  wire mux_494_nl;
  wire mux_493_nl;
  wire or_593_nl;
  wire mux_492_nl;
  wire mux_491_nl;
  wire nand_196_nl;
  wire mux_490_nl;
  wire mux_489_nl;
  wire mux_488_nl;
  wire mux_487_nl;
  wire nand_24_nl;
  wire mux_486_nl;
  wire or_588_nl;
  wire mux_485_nl;
  wire mux_516_nl;
  wire mux_515_nl;
  wire mux_514_nl;
  wire or_617_nl;
  wire mux_513_nl;
  wire or_616_nl;
  wire mux_512_nl;
  wire nand_25_nl;
  wire mux_511_nl;
  wire or_23_nl;
  wire mux_510_nl;
  wire mux_509_nl;
  wire mux_508_nl;
  wire nand_201_nl;
  wire for_for_for_for_nor_nl;
  wire INIT_2D_MEM_LOOP_2_and_1_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_nl;
  wire CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_nl;
  wire[3:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_82_nl;
  wire[5:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_82_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_62_nl;
  wire[4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_62_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_56_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_56_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_58_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_58_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl;
  wire[4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_60_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_60_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_78_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_78_nl;
  wire[2:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl;
  wire[4:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_72_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_72_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_54_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_54_nl;
  wire[1:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl;
  wire[3:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl;
  wire[5:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_27_nl;
  wire[7:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_27_nl;
  wire[3:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_25_nl;
  wire[5:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_25_nl;
  wire[7:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_28_nl;
  wire[9:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_28_nl;
  wire[13:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_35_nl;
  wire[14:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_35_nl;
  wire[11:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_33_nl;
  wire[12:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_33_nl;
  wire[9:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_31_nl;
  wire[11:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_31_nl;
  wire[14:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_36_nl;
  wire[15:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_36_nl;
  wire[12:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_34_nl;
  wire[13:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_34_nl;
  wire[10:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl;
  wire[11:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl;
  wire[21:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_43_nl;
  wire[22:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_43_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_41_nl;
  wire[20:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_41_nl;
  wire[17:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_39_nl;
  wire[18:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_39_nl;
  wire[22:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_44_nl;
  wire[23:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_44_nl;
  wire[20:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_42_nl;
  wire[21:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_42_nl;
  wire[18:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_40_nl;
  wire[19:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_40_nl;
  wire[28:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_50_nl;
  wire[29:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_50_nl;
  wire[26:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_48_nl;
  wire[27:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_48_nl;
  wire[27:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_49_nl;
  wire[28:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_49_nl;
  wire[25:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_47_nl;
  wire[26:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_47_nl;
  wire and_396_nl;
  wire[3:0] compute_sqrt_for_i_mux1h_nl;
  wire compute_sqrt_for_i_or_1_nl;
  wire mux_563_nl;
  wire nor_431_nl;
  wire mux_562_nl;
  wire or_663_nl;
  wire or_662_nl;
  wire nor_432_nl;
  wire mux_561_nl;
  wire or_659_nl;
  wire or_658_nl;
  wire compute_sqrt_for_i_or_nl;
  wire mux_573_nl;
  wire mux_572_nl;
  wire mux_571_nl;
  wire or_1325_nl;
  wire or_1326_nl;
  wire mux_570_nl;
  wire or_1327_nl;
  wire mux_569_nl;
  wire mux_568_nl;
  wire or_1329_nl;
  wire mux_567_nl;
  wire mux_566_nl;
  wire or_1331_nl;
  wire mux_565_nl;
  wire or_673_nl;
  wire or_672_nl;
  wire or_1332_nl;
  wire or_1333_nl;
  wire mux_564_nl;
  wire or_667_nl;
  wire mux_560_nl;
  wire mux_559_nl;
  wire mux_558_nl;
  wire mux_557_nl;
  wire mux_556_nl;
  wire nor_132_nl;
  wire mux_555_nl;
  wire mux_554_nl;
  wire mux_553_nl;
  wire mux_552_nl;
  wire mux_551_nl;
  wire mux_550_nl;
  wire mux_549_nl;
  wire mux_548_nl;
  wire mux_547_nl;
  wire mux_546_nl;
  wire mux_541_nl;
  wire mux_540_nl;
  wire mux_539_nl;
  wire mux_538_nl;
  wire mux_537_nl;
  wire mux_536_nl;
  wire or_650_nl;
  wire mux_535_nl;
  wire mux_532_nl;
  wire mux_531_nl;
  wire mux_530_nl;
  wire or_647_nl;
  wire mux_529_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_and_1_nl;
  wire[8:0] operator_40_24_true_AC_TRN_AC_WRAP_mux1h_1_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_and_2_nl;
  wire RMS_NORM_LOOP_2_2_not_5_nl;
  wire compute_sqrt_for_or_3_nl;
  wire compute_sqrt_for_or_4_nl;
  wire compute_sqrt_for_or_5_nl;
  wire mux_632_nl;
  wire nor_583_nl;
  wire nor_584_nl;
  wire mux_634_nl;
  wire nor_461_nl;
  wire mux_633_nl;
  wire nor_462_nl;
  wire nor_463_nl;
  wire mux_631_nl;
  wire mux_630_nl;
  wire mux_629_nl;
  wire mux_628_nl;
  wire and_738_nl;
  wire or_744_nl;
  wire mux_627_nl;
  wire mux_626_nl;
  wire nand_207_nl;
  wire or_742_nl;
  wire mux_625_nl;
  wire mux_624_nl;
  wire mux_623_nl;
  wire mux_622_nl;
  wire mux_621_nl;
  wire mux_620_nl;
  wire mux_619_nl;
  wire nand_34_nl;
  wire mux_618_nl;
  wire or_739_nl;
  wire or_738_nl;
  wire mux_617_nl;
  wire mux_616_nl;
  wire and_739_nl;
  wire mux_615_nl;
  wire mux_614_nl;
  wire or_735_nl;
  wire[8:0] RMS_NORM_LOOP_2_2_asn_SF_LOOP_3_acc_17_itm_1_8_RMS_NORM_LOOP_2_and_nl;
  wire[8:0] RMS_NORM_LOOP_2_mux1h_nl;
  wire RMS_NORM_LOOP_2_or_nl;
  wire mux_645_nl;
  wire nor_470_nl;
  wire nor_471_nl;
  wire and_448_nl;
  wire mux_643_nl;
  wire mux_642_nl;
  wire mux_641_nl;
  wire nand_38_nl;
  wire mux_640_nl;
  wire and_741_nl;
  wire and_742_nl;
  wire nand_37_nl;
  wire mux_639_nl;
  wire nand_210_nl;
  wire mux_638_nl;
  wire mux_637_nl;
  wire nand_36_nl;
  wire mux_636_nl;
  wire nand_35_nl;
  wire or_755_nl;
  wire mux_635_nl;
  wire or_754_nl;
  wire or_753_nl;
  wire and_453_nl;
  wire mux_644_nl;
  wire nor_468_nl;
  wire nor_469_nl;
  wire not_2160_nl;
  wire mux_661_nl;
  wire mux_660_nl;
  wire mux_659_nl;
  wire mux_658_nl;
  wire nand_212_nl;
  wire nand_213_nl;
  wire mux_657_nl;
  wire mux_656_nl;
  wire or_778_nl;
  wire mux_655_nl;
  wire mux_654_nl;
  wire nand_39_nl;
  wire mux_653_nl;
  wire nor_473_nl;
  wire mux_652_nl;
  wire mux_651_nl;
  wire or_775_nl;
  wire mux_650_nl;
  wire mux_648_nl;
  wire or_770_nl;
  wire mux_647_nl;
  wire mux_646_nl;
  wire or_769_nl;
  wire or_768_nl;
  wire or_767_nl;
  wire or_765_nl;
  wire mux_680_nl;
  wire mux_679_nl;
  wire mux_678_nl;
  wire mux_677_nl;
  wire mux_676_nl;
  wire mux_675_nl;
  wire mux_674_nl;
  wire mux_673_nl;
  wire mux_672_nl;
  wire mux_671_nl;
  wire or_789_nl;
  wire mux_670_nl;
  wire mux_669_nl;
  wire mux_668_nl;
  wire mux_666_nl;
  wire mux_664_nl;
  wire[19:0] SF_LOOP_3_acc_22_nl;
  wire[20:0] nl_SF_LOOP_3_acc_22_nl;
  wire[1:0] SF_LOOP_3_acc_60_nl;
  wire[2:0] nl_SF_LOOP_3_acc_60_nl;
  wire[9:0] SF_LOOP_3_acc_65_nl;
  wire[10:0] nl_SF_LOOP_3_acc_65_nl;
  wire[19:0] SF_LOOP_3_acc_24_nl;
  wire[20:0] nl_SF_LOOP_3_acc_24_nl;
  wire mux_694_nl;
  wire[1:0] SF_LOOP_3_acc_71_nl;
  wire[2:0] nl_SF_LOOP_3_acc_71_nl;
  wire[1:0] SF_LOOP_3_acc_72_nl;
  wire[2:0] nl_SF_LOOP_3_acc_72_nl;
  wire[2:0] SF_LOOP_3_acc_73_nl;
  wire[3:0] nl_SF_LOOP_3_acc_73_nl;
  wire[5:0] SF_LOOP_3_acc_74_nl;
  wire[6:0] nl_SF_LOOP_3_acc_74_nl;
  wire[3:0] SF_LOOP_3_acc_75_nl;
  wire[4:0] nl_SF_LOOP_3_acc_75_nl;
  wire[1:0] SF_LOOP_3_acc_76_nl;
  wire[2:0] nl_SF_LOOP_3_acc_76_nl;
  wire[1:0] SF_LOOP_3_acc_77_nl;
  wire[2:0] nl_SF_LOOP_3_acc_77_nl;
  wire[4:0] SF_LOOP_3_acc_78_nl;
  wire[5:0] nl_SF_LOOP_3_acc_78_nl;
  wire[4:0] SF_LOOP_3_acc_79_nl;
  wire[5:0] nl_SF_LOOP_3_acc_79_nl;
  wire mux_709_nl;
  wire mux_713_nl;
  wire mux_712_nl;
  wire mux_711_nl;
  wire mux_708_nl;
  wire mux_707_nl;
  wire mux_706_nl;
  wire or_814_nl;
  wire mux_704_nl;
  wire mux_703_nl;
  wire mux_702_nl;
  wire or_835_nl;
  wire mux_700_nl;
  wire mux_699_nl;
  wire mux_698_nl;
  wire mux_696_nl;
  wire mux_695_nl;
  wire mux_693_nl;
  wire mux_692_nl;
  wire mux_691_nl;
  wire mux_687_nl;
  wire mux_686_nl;
  wire mux_683_nl;
  wire mux_682_nl;
  wire or_19_nl;
  wire mux_681_nl;
  wire nor_157_nl;
  wire[40:0] QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl;
  wire[41:0] nl_QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_attention_abs_2_nand_nl;
  wire[38:0] attention_abs_2_mux_3_nl;
  wire or_848_nl;
  wire or_852_nl;
  wire[2:0] GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_4_nl;
  wire mux_733_nl;
  wire nor_487_nl;
  wire and_759_nl;
  wire mux_731_nl;
  wire nor_485_nl;
  wire nor_486_nl;
  wire mux_756_nl;
  wire mux_755_nl;
  wire nand_47_nl;
  wire mux_754_nl;
  wire mux_753_nl;
  wire mux_752_nl;
  wire mux_751_nl;
  wire mux_750_nl;
  wire or_879_nl;
  wire mux_749_nl;
  wire or_878_nl;
  wire nand_46_nl;
  wire mux_748_nl;
  wire mux_747_nl;
  wire mux_746_nl;
  wire nand_215_nl;
  wire mux_745_nl;
  wire mux_744_nl;
  wire mux_743_nl;
  wire nor_496_nl;
  wire nor_497_nl;
  wire mux_742_nl;
  wire mux_741_nl;
  wire nand_261_nl;
  wire mux_740_nl;
  wire nor_488_nl;
  wire nor_489_nl;
  wire or_nl;
  wire mux_739_nl;
  wire mux_738_nl;
  wire mux_737_nl;
  wire or_1231_nl;
  wire or_1232_nl;
  wire nand_262_nl;
  wire mux_736_nl;
  wire mux_735_nl;
  wire nand_214_nl;
  wire or_856_nl;
  wire mux_734_nl;
  wire or_855_nl;
  wire or_853_nl;
  wire mux_795_nl;
  wire mux_794_nl;
  wire mux_793_nl;
  wire nand_219_nl;
  wire mux_792_nl;
  wire or_917_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux1h_nl;
  wire[1:0] SF_LOOP_3_acc_70_nl;
  wire[2:0] nl_SF_LOOP_3_acc_70_nl;
  wire[1:0] SF_LOOP_3_acc_89_nl;
  wire[2:0] nl_SF_LOOP_3_acc_89_nl;
  wire nor_500_nl;
  wire mux_773_nl;
  wire mux_772_nl;
  wire mux_771_nl;
  wire mux_770_nl;
  wire mux_769_nl;
  wire mux_768_nl;
  wire mux_767_nl;
  wire or_895_nl;
  wire nand_49_nl;
  wire mux_766_nl;
  wire nor_498_nl;
  wire nor_499_nl;
  wire and_465_nl;
  wire mux_776_nl;
  wire mux_775_nl;
  wire nor_501_nl;
  wire nor_502_nl;
  wire mux_774_nl;
  wire nor_503_nl;
  wire nor_504_nl;
  wire nor_579_nl;
  wire mux_765_nl;
  wire mux_764_nl;
  wire mux_763_nl;
  wire mux_762_nl;
  wire mux_761_nl;
  wire nor_177_nl;
  wire mux_760_nl;
  wire or_889_nl;
  wire or_887_nl;
  wire or_886_nl;
  wire or_885_nl;
  wire mux_759_nl;
  wire mux_758_nl;
  wire or_884_nl;
  wire nand_48_nl;
  wire mux_757_nl;
  wire and_469_nl;
  wire mux_791_nl;
  wire mux_789_nl;
  wire nor_506_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_1_k_mux1h_1_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_1_acc_3_nl;
  wire[3:0] nl_QUANTIZE_ACTIVATION_LOOP_5_1_acc_3_nl;
  wire and_474_nl;
  wire mux_798_nl;
  wire mux_797_nl;
  wire nor_507_nl;
  wire nor_508_nl;
  wire and_473_nl;
  wire mux_796_nl;
  wire mux_826_nl;
  wire nor_515_nl;
  wire mux_825_nl;
  wire or_954_nl;
  wire mux_824_nl;
  wire or_952_nl;
  wire nand_223_nl;
  wire mux_823_nl;
  wire nor_516_nl;
  wire nor_517_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_1_i_nand_nl;
  wire mux_822_nl;
  wire nor_512_nl;
  wire mux_821_nl;
  wire or_1221_nl;
  wire nor_513_nl;
  wire mux_820_nl;
  wire mux_819_nl;
  wire nand_221_nl;
  wire mux_879_nl;
  wire nand_222_nl;
  wire mux_817_nl;
  wire mux_816_nl;
  wire mux_815_nl;
  wire or_934_nl;
  wire mux_814_nl;
  wire mux_813_nl;
  wire mux_812_nl;
  wire mux_811_nl;
  wire mux_810_nl;
  wire mux_809_nl;
  wire or_933_nl;
  wire mux_808_nl;
  wire mux_807_nl;
  wire mux_806_nl;
  wire nand_50_nl;
  wire mux_804_nl;
  wire mux_802_nl;
  wire mux_801_nl;
  wire or_928_nl;
  wire mux_800_nl;
  wire mux_799_nl;
  wire[3:0] LINEAR_FORWARD_NO_MUL_LOOP_4_ki_mux1h_2_nl;
  wire not_2161_nl;
  wire[2:0] GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_5_nl;
  wire GEMM_3D_FLOAT_LOOP_1_1_i_not_2_nl;
  wire[1:0] GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_6_nl;
  wire CACHE_UPDATE_LOOP_2_1_j_not_1_nl;
  wire GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_7_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_15_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_nl;
  wire not_2162_nl;
  wire mux_903_nl;
  wire nand_246_nl;
  wire mux_902_nl;
  wire mux_901_nl;
  wire mux_900_nl;
  wire mux_899_nl;
  wire mux_898_nl;
  wire mux_897_nl;
  wire mux_896_nl;
  wire mux_895_nl;
  wire mux_894_nl;
  wire mux_893_nl;
  wire nand_247_nl;
  wire mux_892_nl;
  wire or_1038_nl;
  wire mux_890_nl;
  wire mux_889_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_4_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux_1_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_1_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux1h_2_nl;
  wire[1:0] SF_LOOP_3_acc_83_nl;
  wire[2:0] nl_SF_LOOP_3_acc_83_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_2_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_3_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_4_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_5_nl;
  wire and_500_nl;
  wire mux_912_nl;
  wire or_1050_nl;
  wire and_501_nl;
  wire nor_581_nl;
  wire mux_910_nl;
  wire mux_909_nl;
  wire mux_908_nl;
  wire mux_907_nl;
  wire mux_905_nl;
  wire mux_904_nl;
  wire[1:0] SF_LOOP_3_acc_90_nl;
  wire[2:0] nl_SF_LOOP_3_acc_90_nl;
  wire[2:0] LINEAR_FORWARD_NO_MUL_LOOP_5_acc_2_nl;
  wire[3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_acc_2_nl;
  wire[2:0] SF_LOOP_3_acc_81_nl;
  wire[3:0] nl_SF_LOOP_3_acc_81_nl;
  wire mux_931_nl;
  wire mux_930_nl;
  wire mux_929_nl;
  wire[2:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_acc_2_nl;
  wire[3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_acc_2_nl;
  wire[2:0] SF_LOOP_3_acc_69_nl;
  wire[3:0] nl_SF_LOOP_3_acc_69_nl;
  wire[2:0] SF_LOOP_3_acc_91_nl;
  wire[3:0] nl_SF_LOOP_3_acc_91_nl;
  wire mux_928_nl;
  wire mux_927_nl;
  wire mux_926_nl;
  wire nor_546_nl;
  wire and_796_nl;
  wire and_797_nl;
  wire mux_925_nl;
  wire or_1066_nl;
  wire mux_924_nl;
  wire mux_923_nl;
  wire mux_922_nl;
  wire nor_547_nl;
  wire nor_548_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_mux_1_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_5_or_nl;
  wire and_527_nl;
  wire and_531_nl;
  wire mux_950_nl;
  wire or_1090_nl;
  wire mux_949_nl;
  wire nor_557_nl;
  wire mux_948_nl;
  wire nand_63_nl;
  wire mux_947_nl;
  wire and_805_nl;
  wire mux_946_nl;
  wire nor_558_nl;
  wire mux_945_nl;
  wire nand_61_nl;
  wire mux_944_nl;
  wire or_1085_nl;
  wire mux_961_nl;
  wire nor_565_nl;
  wire mux_960_nl;
  wire mux_959_nl;
  wire and_808_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_10_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_13_nl;
  wire mux_958_nl;
  wire mux_957_nl;
  wire mux_956_nl;
  wire or_1334_nl;
  wire or_1335_nl;
  wire mux_955_nl;
  wire nand_280_nl;
  wire mux_954_nl;
  wire or_1336_nl;
  wire or_1337_nl;
  wire mux_953_nl;
  wire mux_969_nl;
  wire and_810_nl;
  wire mux_968_nl;
  wire mux_967_nl;
  wire or_1109_nl;
  wire mux_966_nl;
  wire nor_567_nl;
  wire mux_965_nl;
  wire and_811_nl;
  wire mux_964_nl;
  wire mux_962_nl;
  wire mux_992_nl;
  wire mux_989_nl;
  wire or_1127_nl;
  wire mux_988_nl;
  wire mux_987_nl;
  wire mux_986_nl;
  wire or_1123_nl;
  wire mux_985_nl;
  wire mux_984_nl;
  wire mux_974_nl;
  wire nor_261_nl;
  wire nor_259_nl;
  wire mux_980_nl;
  wire mux_979_nl;
  wire mux_978_nl;
  wire mux_977_nl;
  wire mux_976_nl;
  wire or_1113_nl;
  wire mux_973_nl;
  wire mux_972_nl;
  wire nand_259_nl;
  wire nand_68_nl;
  wire mux_971_nl;
  wire mux_970_nl;
  wire mux_983_nl;
  wire mux_982_nl;
  wire or_1121_nl;
  wire mux_981_nl;
  wire or_1119_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_APPLY_ROTARY_POS_EMB_LOOP_6_k_mux_1_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_12_nl;
  wire[1:0] SOFTMAX_LOOP_2_and_nl;
  wire[1:0] SOFTMAX_LOOP_2_mux1h_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_15_nl;
  wire SOFTMAX_LOOP_2_and_1_nl;
  wire SOFTMAX_LOOP_2_mux1h_1_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_14_nl;
  wire[1:0] SOFTMAX_LOOP_2_and_2_nl;
  wire[1:0] SOFTMAX_LOOP_2_mux1h_2_nl;
  wire[3:0] SF_LOOP_3_acc_92_nl;
  wire[4:0] nl_SF_LOOP_3_acc_92_nl;
  wire mux_993_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_29_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_2_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_30_nl;
  wire[8:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_31_nl;
  wire[37:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_8_nl;
  wire not_2715_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_32_nl;
  wire[9:0] SF_LOOP_3_acc_102_nl;
  wire[10:0] nl_SF_LOOP_3_acc_102_nl;
  wire[7:0] SF_LOOP_3_acc_97_nl;
  wire[8:0] nl_SF_LOOP_3_acc_97_nl;
  wire[4:0] SF_LOOP_3_acc_98_nl;
  wire[5:0] nl_SF_LOOP_3_acc_98_nl;
  wire[19:0] SF_LOOP_3_acc_27_nl;
  wire[20:0] nl_SF_LOOP_3_acc_27_nl;
  wire[19:0] SF_LOOP_3_acc_21_nl;
  wire[20:0] nl_SF_LOOP_3_acc_21_nl;
  wire[7:0] SF_LOOP_3_acc_99_nl;
  wire[8:0] nl_SF_LOOP_3_acc_99_nl;
  wire[7:0] SF_LOOP_3_acc_100_nl;
  wire[8:0] nl_SF_LOOP_3_acc_100_nl;
  wire[20:0] SF_LOOP_3_acc_31_nl;
  wire[21:0] nl_SF_LOOP_3_acc_31_nl;
  wire[19:0] SF_LOOP_3_acc_29_nl;
  wire[21:0] nl_SF_LOOP_3_acc_29_nl;
  wire[5:0] SF_LOOP_3_acc_38_nl;
  wire[8:0] nl_SF_LOOP_3_acc_38_nl;
  wire[16:0] SF_LOOP_3_acc_44_nl;
  wire[17:0] nl_SF_LOOP_3_acc_44_nl;
  wire[3:0] SF_LOOP_3_acc_95_nl;
  wire[5:0] nl_SF_LOOP_3_acc_95_nl;
  wire SF_LOOP_3_and_1_nl;
  wire[14:0] SF_LOOP_3_acc_42_nl;
  wire[16:0] nl_SF_LOOP_3_acc_42_nl;
  wire[12:0] SF_LOOP_3_acc_41_nl;
  wire[14:0] nl_SF_LOOP_3_acc_41_nl;
  wire SF_LOOP_3_SF_LOOP_3_nand_nl;
  wire[23:0] SF_LOOP_3_acc_49_nl;
  wire[24:0] nl_SF_LOOP_3_acc_49_nl;
  wire[21:0] SF_LOOP_3_acc_48_nl;
  wire[22:0] nl_SF_LOOP_3_acc_48_nl;
  wire[20:0] SF_LOOP_3_acc_47_nl;
  wire[21:0] nl_SF_LOOP_3_acc_47_nl;
  wire[28:0] SF_LOOP_3_acc_53_nl;
  wire[29:0] nl_SF_LOOP_3_acc_53_nl;
  wire[27:0] SF_LOOP_3_acc_52_nl;
  wire[28:0] nl_SF_LOOP_3_acc_52_nl;
  wire[35:0] SF_LOOP_3_acc_57_nl;
  wire[36:0] nl_SF_LOOP_3_acc_57_nl;
  wire[33:0] SF_LOOP_3_acc_55_nl;
  wire[34:0] nl_SF_LOOP_3_acc_55_nl;
  wire mux_995_nl;
  wire mux_994_nl;
  wire[5:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_27_nl;
  wire[7:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_27_nl;
  wire[3:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_25_nl;
  wire[5:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_25_nl;
  wire[7:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_28_nl;
  wire[9:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_28_nl;
  wire[13:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl;
  wire[14:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl;
  wire[11:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_33_nl;
  wire[12:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_33_nl;
  wire[9:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_31_nl;
  wire[11:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_31_nl;
  wire[14:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl;
  wire[15:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl;
  wire[12:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl;
  wire[13:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl;
  wire[10:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl;
  wire[11:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl;
  wire[21:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_43_nl;
  wire[22:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_43_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_41_nl;
  wire[20:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_41_nl;
  wire[17:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_nl;
  wire[18:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_nl;
  wire[22:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl;
  wire[23:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl;
  wire[20:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl;
  wire[21:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl;
  wire[18:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl;
  wire[19:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl;
  wire[28:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_50_nl;
  wire[29:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_50_nl;
  wire[26:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_48_nl;
  wire[27:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_48_nl;
  wire[27:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_49_nl;
  wire[28:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_49_nl;
  wire[25:0] operator_40_24_true_AC_TRN_AC_WRAP_2_acc_47_nl;
  wire[26:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_47_nl;
  wire and_557_nl;
  wire[40:0] QUANTIZE_ACTIVATION_LOOP_2_1_acc_4_nl;
  wire[41:0] nl_QUANTIZE_ACTIVATION_LOOP_2_1_acc_4_nl;
  wire QUANTIZE_ACTIVATION_LOOP_2_1_attention_abs_6_nand_nl;
  wire[38:0] attention_abs_6_mux_3_nl;
  wire mux_1002_nl;
  wire mux_1001_nl;
  wire mux_1000_nl;
  wire mux_999_nl;
  wire mux_998_nl;
  wire mux_997_nl;
  wire mux_1003_nl;
  wire nor_571_nl;
  wire and_816_nl;
  wire RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux1h_nl;
  wire RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux1h_nl;
  wire[40:0] compute_sqrt_1_for_acc_1_nl;
  wire[41:0] nl_compute_sqrt_1_for_acc_1_nl;
  wire[3:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_22_nl;
  wire[4:0] nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_22_nl;
  wire[5:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl;
  wire[6:0] nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl;
  wire[40:0] compute_sqrt_for_acc_1_nl;
  wire[41:0] nl_compute_sqrt_for_acc_1_nl;
  wire[40:0] attention_max_attn_fixed_t_acc_nl;
  wire[41:0] nl_attention_max_attn_fixed_t_acc_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl;
  wire[4:0] CACHE_UPDATE_LOOP_3_qif_acc_4_nl;
  wire[5:0] nl_CACHE_UPDATE_LOOP_3_qif_acc_4_nl;
  wire[4:0] CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl;
  wire[5:0] nl_CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_4_acc_19_nl;
  wire[4:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_19_nl;
  wire[5:0] GEMM_3D_FLOAT_LOOP_4_acc_15_nl;
  wire[6:0] nl_GEMM_3D_FLOAT_LOOP_4_acc_15_nl;
  wire[16:0] SF_LOOP_3_mul_8_nl;
  wire[17:0] nl_SF_LOOP_3_mul_8_nl;
  wire[18:0] SF_LOOP_3_acc_34_nl;
  wire[19:0] nl_SF_LOOP_3_acc_34_nl;
  wire[17:0] SF_LOOP_3_acc_32_nl;
  wire[18:0] nl_SF_LOOP_3_acc_32_nl;
  wire[40:0] attention_max_attn_fixed_t_1_acc_nl;
  wire[41:0] nl_attention_max_attn_fixed_t_1_acc_nl;
  wire[17:0] QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl;
  wire[18:0] nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl;
  wire[6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_2_nl;
  wire[7:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_2_nl;
  wire[40:0] attention_round_1_acc_nl;
  wire[41:0] nl_attention_round_1_acc_nl;
  wire[40:0] SOFTMAX_LOOP_3_acc_3_nl;
  wire[41:0] nl_SOFTMAX_LOOP_3_acc_3_nl;
  wire[40:0] attention_round_acc_nl;
  wire[41:0] nl_attention_round_acc_nl;
  wire mux_316_nl;
  wire mux_315_nl;
  wire or_366_nl;
  wire mux_339_nl;
  wire mux_355_nl;
  wire mux_354_nl;
  wire and_666_nl;
  wire mux_376_nl;
  wire mux_375_nl;
  wire nor_347_nl;
  wire or_472_nl;
  wire or_476_nl;
  wire or_506_nl;
  wire or_505_nl;
  wire mux_506_nl;
  wire mux_518_nl;
  wire or_1199_nl;
  wire or_1200_nl;
  wire or_643_nl;
  wire or_642_nl;
  wire mux_40_nl;
  wire or_61_nl;
  wire nand_26_nl;
  wire mux_544_nl;
  wire or_656_nl;
  wire or_682_nl;
  wire mux_584_nl;
  wire mux_583_nl;
  wire mux_582_nl;
  wire and_678_nl;
  wire mux_581_nl;
  wire mux_580_nl;
  wire mux_578_nl;
  wire and_679_nl;
  wire mux_663_nl;
  wire or_786_nl;
  wire or_915_nl;
  wire mux_828_nl;
  wire or_957_nl;
  wire mux_827_nl;
  wire mux_906_nl;
  wire mux_952_nl;
  wire and_690_nl;
  wire mux_990_nl;
  wire mux_576_nl;
  wire and_733_nl;
  wire nor_442_nl;
  wire mux_577_nl;
  wire nor_443_nl;
  wire nor_444_nl;
  wire mux_598_nl;
  wire and_736_nl;
  wire mux_597_nl;
  wire nor_450_nl;
  wire nor_451_nl;
  wire nor_452_nl;
  wire mux_168_nl;
  wire mux_600_nl;
  wire nor_454_nl;
  wire nor_455_nl;
  wire mux_601_nl;
  wire nor_456_nl;
  wire nor_457_nl;
  wire mux_837_nl;
  wire mux_836_nl;
  wire or_1222_nl;
  wire nand_228_nl;
  wire mux_835_nl;
  wire nor_556_nl;
  wire nor_521_nl;
  wire or_1223_nl;
  wire mux_834_nl;
  wire or_969_nl;
  wire mux_833_nl;
  wire or_967_nl;
  wire or_965_nl;
  wire mux_838_nl;
  wire and_778_nl;
  wire nor_525_nl;
  wire mux_842_nl;
  wire nor_527_nl;
  wire mux_841_nl;
  wire nor_528_nl;
  wire mux_840_nl;
  wire nand_232_nl;
  wire mux_839_nl;
  wire or_980_nl;
  wire or_979_nl;
  wire mux_854_nl;
  wire mux_853_nl;
  wire mux_852_nl;
  wire nor_529_nl;
  wire mux_851_nl;
  wire mux_850_nl;
  wire nor_530_nl;
  wire mux_849_nl;
  wire mux_848_nl;
  wire mux_855_nl;
  wire mux_846_nl;
  wire mux_862_nl;
  wire mux_844_nl;
  wire mux_875_nl;
  wire nand_240_nl;
  wire mux_874_nl;
  wire or_1014_nl;
  wire mux_873_nl;
  wire mux_872_nl;
  wire or_1012_nl;
  wire or_1226_nl;
  wire mux_871_nl;
  wire nand_53_nl;
  wire mux_870_nl;
  wire nor_519_nl;
  wire nor_518_nl;
  wire mux_869_nl;
  wire or_1006_nl;
  wire mux_878_nl;
  wire nand_241_nl;
  wire mux_877_nl;
  wire nor_538_nl;
  wire nor_539_nl;
  wire nand_242_nl;
  wire mux_876_nl;
  wire nor_540_nl;
  wire nor_541_nl;
  wire mux_913_nl;
  wire mux_940_nl;
  wire mux_396_nl;
  wire nor_386_nl;
  wire nor_387_nl;
  wire and_352_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_2_and_3_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_5_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_and_5_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_6_nl;
  wire[1:0] INIT_2D_MEM_LOOP_2_2_and_6_nl;
  wire[1:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_7_nl;
  wire mux_431_nl;
  wire nor_393_nl;
  wire nor_394_nl;
  wire mux_432_nl;
  wire or_1207_nl;
  wire nand_186_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_1_and_2_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_3_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_6_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_7_nl;
  wire INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_8_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_9_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_10_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_1_and_3_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_4_nl;
  wire mux_424_nl;
  wire mux_423_nl;
  wire or_507_nl;
  wire and_336_nl;
  wire mux_427_nl;
  wire mux_426_nl;
  wire or_512_nl;
  wire mux_425_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_5_mux1h_1_nl;
  wire[3:0] QUANTIZE_ACTIVATION_LOOP_5_mux1h_3_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_5_mux1h_4_nl;
  wire mux_422_nl;
  wire mux_421_nl;
  wire mux_420_nl;
  wire mux_419_nl;
  wire mux_416_nl;
  wire or_504_nl;
  wire or_503_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_and_2_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_1_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_5_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_6_nl;
  wire INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_7_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_8_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_9_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_and_3_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_2_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_nl;
  wire INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_3_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_4_nl;
  wire mux_407_nl;
  wire or_485_nl;
  wire or_484_nl;
  wire mux_413_nl;
  wire mux_412_nl;
  wire or_497_nl;
  wire or_495_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_1_and_1_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_2_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_11_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_12_nl;
  wire INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_13_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_14_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_15_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_1_and_4_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_5_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_3_nl;
  wire INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_8_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_9_nl;
  wire and_314_nl;
  wire mux_409_nl;
  wire mux_408_nl;
  wire or_488_nl;
  wire or_487_nl;
  wire[23:0] INIT_2D_MEM_LOOP_2_2_and_2_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_2_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_11_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_12_nl;
  wire INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_13_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_14_nl;
  wire[8:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_15_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_2_and_7_nl;
  wire[15:0] INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_10_nl;
  wire[3:0] RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_nl;
  wire RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_3_nl;
  wire[3:0] RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_4_nl;
  wire mux_402_nl;
  wire or_473_nl;
  wire and_302_nl;
  wire mux_404_nl;
  wire or_475_nl;
  wire mux_400_nl;
  wire or_468_nl;
  wire[55:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl;
  wire[56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl;
  wire[55:0] APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl;
  wire[56:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl;
  wire and_278_nl;
  wire and_271_nl;
  wire[39:0] FIXED32_MIN_mux1h_1_nl;
  wire[37:0] SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_acc_nl;
  wire[38:0] nl_SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_acc_nl;
  wire FIXED32_MIN_or_nl;
  wire and_259_nl;
  wire nor_573_nl;
  wire mux_399_nl;
  wire or_462_nl;
  wire mux_398_nl;
  wire mux_397_nl;
  wire or_460_nl;
  wire or_458_nl;
  wire or_457_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_3_mux1h_4_nl;
  wire GEMM_3D_FLOAT_LOOP_3_or_nl;
  wire GEMM_3D_FLOAT_LOOP_3_mux1h_12_nl;
  wire GEMM_3D_FLOAT_LOOP_3_or_5_nl;
  wire GEMM_3D_FLOAT_LOOP_3_and_1_nl;
  wire GEMM_3D_FLOAT_LOOP_3_mux1h_13_nl;
  wire GEMM_3D_FLOAT_LOOP_3_or_1_nl;
  wire GEMM_3D_FLOAT_LOOP_3_or_2_nl;
  wire mux_392_nl;
  wire mux_391_nl;
  wire mux_390_nl;
  wire and_702_nl;
  wire nor_381_nl;
  wire nor_382_nl;
  wire mux_389_nl;
  wire mux_388_nl;
  wire and_703_nl;
  wire and_704_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_3_mux1h_2_nl;
  wire GEMM_3D_FLOAT_LOOP_3_mux1h_10_nl;
  wire GEMM_3D_FLOAT_LOOP_3_GEMM_3D_FLOAT_LOOP_3_mux_nl;
  wire mux_395_nl;
  wire nor_383_nl;
  wire mux_394_nl;
  wire mux_393_nl;
  wire nor_384_nl;
  wire and_706_nl;
  wire nor_385_nl;
  wire nor_572_nl;
  wire mux_387_nl;
  wire nor_379_nl;
  wire nor_380_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_nl;
  wire GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_1_nl;
  wire mux_385_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_nl;
  wire INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_1_nl;
  wire mux_386_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_and_nl;
  wire[2:0] INIT_2D_MEM_LOOP_2_mux1h_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_and_4_nl;
  wire[3:0] INIT_2D_MEM_LOOP_2_mux1h_6_nl;
  wire[1:0] INIT_2D_MEM_LOOP_2_and_5_nl;
  wire[1:0] INIT_2D_MEM_LOOP_2_mux1h_7_nl;
  wire mux_380_nl;
  wire mux_379_nl;
  wire nor_372_nl;
  wire nor_373_nl;
  wire mux_378_nl;
  wire or_414_nl;
  wire or_412_nl;
  wire nor_374_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_2_nl;
  wire GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_4_nl;
  wire[3:0] GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_5_nl;
  wire mux_381_nl;
  wire and_699_nl;
  wire nor_375_nl;
  wire[39:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl;
  wire[40:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl;
  wire[39:0] APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl;
  wire[40:0] nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl;
  wire mux_1015_nl;
  wire and_1498_nl;
  wire nor_613_nl;
  wire mux_1050_nl;
  wire mux_1053_nl;
  wire nor_690_nl;
  wire mux_1016_nl;
  wire nor_629_nl;
  wire nor_630_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_3_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_nor_3_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_5_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_6_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_2_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_nor_2_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_nl;
  wire QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_1_nl;
  wire mux_1010_nl;
  wire and_1497_nl;
  wire nor_605_nl;
  wire nand_296_nl;
  wire mux_1007_nl;
  wire nor_660_nl;
  wire nor_702_nl;
  wire nand_297_nl;
  wire mux_1006_nl;
  wire and_1510_nl;
  wire nor_662_nl;
  wire nor_705_nl;
  wire mux_1013_nl;
  wire nand_268_nl;
  wire or_1304_nl;
  wire nor_706_nl;
  wire[40:0] acc_nl;
  wire[41:0] nl_acc_nl;
  wire[23:0] RMS_NORM_LOOP_1_1_mux1h_5_nl;
  wire[23:0] operator_40_24_true_AC_TRN_AC_WRAP_acc_1_nl;
  wire[24:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_1_nl;
  wire[15:0] RMS_NORM_LOOP_1_1_mux1h_6_nl;
  wire RMS_NORM_LOOP_1_1_or_3_nl;
  wire RMS_NORM_LOOP_1_1_mux1h_7_nl;
  wire[2:0] RMS_NORM_LOOP_1_1_mux1h_8_nl;
  wire[35:0] RMS_NORM_LOOP_1_1_mux1h_9_nl;
  wire INIT_2D_MEM_LOOP_2_2_or_4_nl;
  wire[8:0] RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux_1_nl;
  wire RMS_NORM_LOOP_2_or_3_nl;
  wire INIT_2D_MEM_LOOP_2_1_nand_1_nl;
  wire[1:0] SF_LOOP_3_mux1h_10_nl;
  wire[6:0] SF_LOOP_3_mux1h_11_nl;
  wire[4:0] SF_LOOP_3_mux1h_12_nl;
  wire compute_sqrt_for_guess_inv_compute_sqrt_for_guess_inv_and_2_nl;
  wire compute_sqrt_for_guess_inv_mux_2_nl;
  wire[7:0] compute_sqrt_for_guess_inv_compute_sqrt_for_guess_inv_and_3_nl;
  wire[7:0] compute_sqrt_for_guess_inv_mux_3_nl;
  wire[28:0] compute_sqrt_for_guess_inv_and_6_nl;
  wire[28:0] compute_sqrt_for_guess_inv_mux1h_7_nl;
  wire not_2700_nl;
  wire[1:0] compute_sqrt_for_guess_inv_mux1h_8_nl;
  wire compute_sqrt_for_guess_inv_and_7_nl;
  wire compute_sqrt_for_guess_inv_mux1h_9_nl;
  wire[21:0] compute_sqrt_for_guess_inv_and_8_nl;
  wire[21:0] compute_sqrt_for_guess_inv_mux1h_10_nl;
  wire[4:0] compute_sqrt_for_guess_inv_and_9_nl;
  wire[4:0] compute_sqrt_for_guess_inv_mux1h_11_nl;
  wire[2:0] compute_sqrt_for_guess_inv_mux1h_12_nl;
  wire[8:0] compute_sqrt_for_guess_inv_mux1h_13_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_11_nl;
  wire[1:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_5_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_1_nl;
  wire[38:0] LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_6_nl;
  wire LINEAR_FORWARD_NO_MUL_LOOP_2_mux_3_nl;
  wire[38:0] LINEAR_FORWARD_NO_MUL_LOOP_2_mux_4_nl;
  wire[3:0] acc_4_nl;
  wire[4:0] nl_acc_4_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_or_5_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_3_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_4_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_5_nl;
  wire[2:0] acc_5_nl;
  wire[3:0] nl_acc_5_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_16_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_17_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_mux_18_nl;
  wire[5:0] acc_6_nl;
  wire[6:0] nl_acc_6_nl;
  wire[2:0] compute_sqrt_for_mux1h_4_nl;
  wire compute_sqrt_for_or_7_nl;
  wire compute_sqrt_for_mux1h_5_nl;
  wire compute_sqrt_for_and_3_nl;
  wire[2:0] compute_sqrt_for_mux1h_6_nl;
  wire compute_sqrt_for_or_8_nl;
  wire[3:0] SF_LOOP_3_mux1h_13_nl;
  wire[2:0] SF_LOOP_3_mux1h_14_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl;
  wire and_1523_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_3_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_or_7_nl;
  wire mux_1059_nl;
  wire nor_713_nl;
  wire mux_1060_nl;
  wire or_1348_nl;
  wire[3:0] acc_9_nl;
  wire[4:0] nl_acc_9_nl;
  wire and_1556_nl;
  wire[3:0] operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_3_nl;
  wire[19:0] operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_4_nl;
  wire[7:0] and_1528_nl;
  wire[7:0] mux1h_1_nl;
  wire[7:0] operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_4_nl;
  wire[7:0] operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_5_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl;
  wire[8:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_and_2_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_and_3_nl;
  wire operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_5_nl;
  wire[7:0] LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl;
  wire[8:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl;
  wire and_1557_nl;
  wire and_1558_nl;
  wire nor_714_nl;
  wire[6:0] acc_11_nl;
  wire[7:0] nl_acc_11_nl;
  wire RMS_NORM_LOOP_2_2_mux_6_nl;
  wire[38:0] RMS_NORM_LOOP_2_2_mux_7_nl;
  wire[39:0] RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_and_2_nl;
  wire RMS_NORM_LOOP_2_2_mux_8_nl;
  wire[2:0] RMS_NORM_LOOP_2_2_mux_9_nl;
  wire[8:0] RMS_NORM_LOOP_2_2_mux_10_nl;
  wire[67:0] mul_5_nl;
  wire signed [91:0] nl_mul_5_nl;
  wire RMS_NORM_LOOP_1_1_mux_36_nl;
  wire[38:0] RMS_NORM_LOOP_1_1_mux_37_nl;
  wire[51:0] RMS_NORM_LOOP_1_1_mux_38_nl;
  wire[1:0] SF_LOOP_3_mux_22_nl;
  wire[3:0] SF_LOOP_3_mux_23_nl;
  wire[1:0] SF_LOOP_3_mux_24_nl;
  wire[2:0] SF_LOOP_3_mux_25_nl;
  wire[1:0] SF_LOOP_3_mux_26_nl;
  wire[7:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_9_nl;
  wire not_2716_nl;
  wire[6:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_10_nl;
  wire not_2717_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_33_nl;
  wire[39:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_34_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_11_nl;
  wire[3:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_35_nl;
  wire not_2718_nl;
  wire APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_12_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_13_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_36_nl;
  wire not_2719_nl;
  wire[6:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_14_nl;
  wire[6:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_37_nl;
  wire not_2720_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl;
  wire[1:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_38_nl;
  wire[36:0] APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_15_nl;
  wire[36:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux_39_nl;
  wire not_2721_nl;
  wire[2:0] APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_20_nl;
  wire[7:0] SF_LOOP_3_SF_LOOP_3_and_4_nl;
  wire[7:0] SF_LOOP_3_mux_27_nl;
  wire not_2722_nl;
  wire[6:0] SF_LOOP_3_SF_LOOP_3_and_5_nl;
  wire[6:0] SF_LOOP_3_mux_28_nl;
  wire not_2723_nl;
  wire[1:0] SF_LOOP_3_mux1h_15_nl;
  wire SF_LOOP_3_SF_LOOP_3_and_6_nl;
  wire[34:0] SF_LOOP_3_SF_LOOP_3_and_7_nl;
  wire[34:0] SF_LOOP_3_mux_29_nl;
  wire not_2724_nl;
  wire[3:0] SF_LOOP_3_mux1h_16_nl;
  wire[2:0] for_for_acc_nl;
  wire[3:0] nl_for_for_acc_nl;
  wire[1:0] for_for_mux1h_7_nl;
  wire nor_715_nl;
  wire nor_716_nl;
  wire mux_1063_nl;
  wire nand_298_nl;
  wire mux_1064_nl;
  wire nor_718_nl;
  wire nor_719_nl;
  wire mux_1065_nl;
  wire or_1352_nl;
  wire nand_299_nl;
  wire mux_1066_nl;
  wire nor_720_nl;
  wire nor_721_nl;
  wire and_1537_nl;
  wire mux_1067_nl;
  wire mux_1068_nl;
  wire mux_1069_nl;
  wire mux_1070_nl;
  wire and_1538_nl;
  wire[2:0] QUANTIZE_ACTIVATION_LOOP_3_acc_nl;
  wire[3:0] nl_QUANTIZE_ACTIVATION_LOOP_3_acc_nl;
  wire[1:0] QUANTIZE_ACTIVATION_LOOP_3_mux1h_3_nl;
  wire mux_1071_nl;
  wire nor_723_nl;
  wire mux_1072_nl;
  wire and_1539_nl;
  wire mux_1073_nl;
  wire nor_724_nl;
  wire nor_725_nl;
  wire mux_1074_nl;
  wire nor_726_nl;
  wire nor_727_nl;
  wire and_1540_nl;
  wire mux_1075_nl;
  wire nor_728_nl;
  wire mux_1076_nl;
  wire nor_729_nl;
  wire and_1541_nl;
  wire and_1542_nl;
  wire[2:0] LINEAR_FORWARD_NO_MUL_LOOP_3_acc_nl;
  wire[3:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_3_acc_nl;
  wire[1:0] LINEAR_FORWARD_NO_MUL_LOOP_3_mux_3_nl;
  wire[2:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux_1_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_nl;
  wire[1:0] TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_7_nl;
  wire and_1543_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_nl;
  wire TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_1_mux1h_9_nl;
  wire and_1547_nl;
  wire and_1548_nl;
  wire and_1549_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_qif_mux_1_nl;
  wire and_1550_nl;
  wire[1:0] RESHAPE_2D_TO_3D_LOOP_3_mux1h_6_nl;
  wire and_1551_nl;
  wire mux_1077_nl;
  wire nor_730_nl;
  wire nor_731_nl;
  wire and_1552_nl;
  wire and_1553_nl;
  wire and_1554_nl;
  wire[1:0] CACHE_UPDATE_LOOP_3_1_qif_mux_1_nl;
  wire and_1555_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [55:0] nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a;
  assign nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a = {SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55
      , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_16 , 16'b0000000000000000};
  wire [39:0] nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b;
  assign nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b = {SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39
      , SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_0};
  wire [71:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a
      = {LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71_32
      , 32'b00000000000000000000000000000000};
  wire [59:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b
      = {LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_39
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_0};
  wire [39:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a = {1'b0, signext_39_33({reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd
      , 15'b000000000000000 , reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1
      , 16'b0000000000000000})};
  wire [39:0] nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b = {operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39
      , operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30 , operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_0};
  wire [9:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg_addr;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg_addr
      = {APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[4:0])};
  wire [9:0] nl_APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg_addr;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg_addr
      = {APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[4:0])};
  wire[8:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl;
  wire[9:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl;
  wire[6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl;
  wire[7:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl;
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl = ({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd
      , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 , APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4})
      + conv_u2u_2_7(SF_LOOP_3_acc_17_itm_8_0[8:7]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl[6:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl = conv_u2u_7_9(LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_1_nl)
      + conv_u2u_8_9({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4 , 1'b0});
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl[8:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg_addr
      = {LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_acc_nl , (SF_LOOP_3_acc_17_itm_8_0[6:0])};
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg_addr
      = {LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7
      , (INIT_2D_MEM_LOOP_2_2_acc_itm[6:0])};
  wire[8:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_nl;
  wire[9:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_nl;
  wire[6:0] LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_1_nl;
  wire[7:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_1_nl;
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_1_nl = ({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      , LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0}) + conv_u2u_2_7(reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[8:7]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_1_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_1_nl[6:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_nl = conv_u2u_7_9(LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_1_nl)
      + conv_u2u_8_9({GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 , LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0
      , 1'b0});
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_nl[8:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg_addr
      = {LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_acc_nl , (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[6:0])};
  wire[2:0] CACHE_UPDATE_LOOP_3_qif_acc_nl;
  wire[3:0] nl_CACHE_UPDATE_LOOP_3_qif_acc_nl;
  wire [10:0] nl_CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg_addr;
  assign nl_CACHE_UPDATE_LOOP_3_qif_acc_nl = conv_s2u_2_3(CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1[5:4])
      + APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0;
  assign CACHE_UPDATE_LOOP_3_qif_acc_nl = nl_CACHE_UPDATE_LOOP_3_qif_acc_nl[2:0];
  assign nl_CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg_addr = {CACHE_UPDATE_LOOP_3_qif_acc_nl
      , (CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1[3:0]) , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0])
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  wire[2:0] CACHE_UPDATE_LOOP_3_1_qif_acc_nl;
  wire[3:0] nl_CACHE_UPDATE_LOOP_3_1_qif_acc_nl;
  wire [10:0] nl_CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg_addr;
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_acc_nl = conv_s2u_2_3(CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1[5:4])
      + GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0;
  assign CACHE_UPDATE_LOOP_3_1_qif_acc_nl = nl_CACHE_UPDATE_LOOP_3_1_qif_acc_nl[2:0];
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg_addr = {CACHE_UPDATE_LOOP_3_1_qif_acc_nl
      , (CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1[3:0]) , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  wire [15:0] nl_LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg_addr;
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg_addr
      = {LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7
      , (INIT_2D_MEM_LOOP_2_2_acc_itm[6:0])};
  wire [31:0] nl_dut_core_strm_out_rsci_inst_strm_out_rsci_idat;
  assign nl_dut_core_strm_out_rsci_inst_strm_out_rsci_idat = {strm_out_rsci_idat_31_2
      , 2'b00};
  wire  nl_dut_core_core_fsm_inst_compute_sqrt_for_C_15_tr0;
  assign nl_dut_core_core_fsm_inst_compute_sqrt_for_C_15_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_2_C_5_tr0;
  assign nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_2_C_5_tr0 = exit_QUANTIZE_ACTIVATION_LOOP_2_sva_dfm
      & (~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm);
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[2];
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0 = z_out_16_4_0[4];
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0 = ~ z_out_29_2;
  wire  nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0;
  assign nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0 = (LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2[4])
      & (z_out_16_4_0[4]) & (LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2[4]);
  wire  nl_dut_core_core_fsm_inst_RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0;
  assign nl_dut_core_core_fsm_inst_RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0 = CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm
      & exit_APPLY_ROTARY_POS_EMB_LOOP_3_sva_dfm;
  wire  nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0;
  assign nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_CACHE_UPDATE_LOOP_2_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_CACHE_UPDATE_LOOP_2_C_0_tr0 = ~(z_out_29_2 | z_out_28_2);
  wire  nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0 = ~ z_out_28_2;
  wire  nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_4_C_4_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_4_C_4_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_C_2_tr0 = ~ z_out_28_2;
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_C_0_tr0 = GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_SF_LOOP_3_C_12_tr0;
  assign nl_dut_core_core_fsm_inst_SF_LOOP_3_C_12_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SF_LOOP_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_SF_LOOP_1_C_0_tr0 = GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_3_C_1_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_3_C_1_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_4_C_4_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_4_C_4_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_5_C_21_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_5_C_21_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_1_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_1_C_2_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0 = ~ z_out_28_2;
  wire  nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0 = GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_3_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_3_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_2_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_2_C_0_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3];
  wire  nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_1_2_C_3_tr0;
  assign nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_1_2_C_3_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_compute_sqrt_1_for_C_15_tr0;
  assign nl_dut_core_core_fsm_inst_compute_sqrt_1_for_C_15_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_2_2_C_5_tr0;
  assign nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_2_2_C_5_tr0 = (~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm)
      & exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm;
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[2];
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0 = z_out_16_4_0[4];
  wire  nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0 = ~ z_out_29_2;
  wire  nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0;
  assign nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0 = APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[2];
  wire  nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0;
  assign nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0 = z_out_16_4_0[4];
  wire  nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0;
  assign nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0 = ~ z_out_29_2;
  wire  nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0;
  assign nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  wire  nl_dut_core_core_fsm_inst_for_1_for_C_2_tr0;
  assign nl_dut_core_core_fsm_inst_for_1_for_C_2_tr0 = ~ APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm;
  mgc_div #(.width_a(32'sd56),
  .width_b(32'sd40),
  .signd(32'sd1)) SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp (
      .a(nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a[55:0]),
      .b(nl_SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b[39:0]),
      .z(SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z)
    );
  mgc_div #(.width_a(32'sd72),
  .width_b(32'sd60),
  .signd(32'sd1)) LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp
      (
      .a(nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a[71:0]),
      .b(nl_LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b[59:0]),
      .z(LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z)
    );
  mgc_div #(.width_a(32'sd40),
  .width_b(32'sd40),
  .signd(32'sd1)) operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp (
      .a(nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a[39:0]),
      .b(nl_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b[39:0]),
      .z(operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z)
    );
  dutmgc_rom_33_960_17_1  APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg
      (
      .addr(nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_rg_addr[9:0]),
      .data_out(APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm)
    );
  dutmgc_rom_34_384_12_1  RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_rg (
      .addr(INIT_2D_MEM_LOOP_2_2_acc_itm),
      .data_out(RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm)
    );
  dutmgc_rom_35_960_17_1  APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg
      (
      .addr(nl_APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_rg_addr[9:0]),
      .data_out(APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm)
    );
  dutmgc_rom_36_384_13_1  RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_rg (
      .addr(INIT_2D_MEM_LOOP_2_2_acc_itm),
      .data_out(RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm)
    );
  dutmgc_rom_37_36864_8_1  LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_itm)
    );
  dutmgc_rom_38_36864_8_1  LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm)
    );
  dutmgc_rom_39_36864_8_1  LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_itm)
    );
  dutmgc_rom_40_1920_40_1  CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg
      (
      .addr(nl_CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_rg_addr[10:0]),
      .data_out(CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm)
    );
  dutmgc_rom_41_1920_40_1  CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg
      (
      .addr(nl_CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_rg_addr[10:0]),
      .data_out(CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_itm)
    );
  dutmgc_rom_42_36864_8_1  LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg
      (
      .addr(nl_LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_rg_addr[15:0]),
      .data_out(LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm)
    );
  dut_core_strm_in_rsci dut_core_strm_in_rsci_inst (
      .strm_in_rsc_dat(strm_in_rsc_dat),
      .strm_in_rsc_vld(strm_in_rsc_vld),
      .strm_in_rsc_rdy(strm_in_rsc_rdy),
      .strm_in_rsci_oswt(reg_strm_in_rsci_iswt0_cse),
      .strm_in_rsci_wen_comp(strm_in_rsci_wen_comp),
      .strm_in_rsci_idat_mxwt(strm_in_rsci_idat_mxwt)
    );
  dut_core_strm_out_rsci dut_core_strm_out_rsci_inst (
      .strm_out_rsc_dat(strm_out_rsc_dat),
      .strm_out_rsc_vld(strm_out_rsc_vld),
      .strm_out_rsc_rdy(strm_out_rsc_rdy),
      .strm_out_rsci_oswt(reg_strm_out_rsci_iswt0_cse),
      .strm_out_rsci_wen_comp(strm_out_rsci_wen_comp),
      .strm_out_rsci_idat(nl_dut_core_strm_out_rsci_inst_strm_out_rsci_idat[31:0])
    );
  dut_core_staller dut_core_staller_inst (
      .en(en),
      .core_wen1(core_wen1),
      .strm_in_rsci_wen_comp(strm_in_rsci_wen_comp),
      .strm_out_rsci_wen_comp(strm_out_rsci_wen_comp),
      .input_rsc_clken_d_1(input_rsc_clken_d_1)
    );
  dut_core_wait_dp dut_core_wait_dp_inst (
      .clk(clk),
      .rst(rst),
      .rms_norm_384_div_cmp_z(rms_norm_384_div_cmp_z),
      .core_wen1(core_wen1),
      .rms_norm_384_div_cmp_z_oreg(rms_norm_384_div_cmp_z_oreg)
    );
  dut_core_core_fsm dut_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .input_rsc_clken_d_1(input_rsc_clken_d_1),
      .fsm_output(fsm_output),
      .for_for_C_2_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .compute_sqrt_for_C_15_tr0(nl_dut_core_core_fsm_inst_compute_sqrt_for_C_15_tr0),
      .RMS_NORM_LOOP_2_C_5_tr0(nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_2_C_5_tr0),
      .QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_5_C_5_tr0),
      .QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_C_0_tr0),
      .QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_C_0_tr0),
      .attention_5_1_384_384_8_48_q_proj_re_vinit_C_1_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .LINEAR_FORWARD_NO_MUL_LOOP_5_C_5_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0(nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_4_C_1_tr0),
      .LINEAR_FORWARD_NO_MUL_LOOP_3_C_0_tr0(LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp),
      .LINEAR_FORWARD_NO_MUL_LOOP_2_C_65_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .RESHAPE_2D_TO_3D_LOOP_3_C_2_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .RESHAPE_2D_TO_3D_LOOP_2_C_0_tr0(CACHE_UPDATE_LOOP_1_and_cse),
      .RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0(nl_dut_core_core_fsm_inst_RESHAPE_2D_TO_3D_LOOP_3_2_C_3_tr0),
      .RESHAPE_2D_TO_3D_LOOP_2_2_C_0_tr0(CACHE_UPDATE_LOOP_1_and_cse),
      .APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0(nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_6_C_4_tr0),
      .APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0(nl_dut_core_core_fsm_inst_APPLY_ROTARY_POS_EMB_LOOP_4_C_0_tr0),
      .CACHE_UPDATE_LOOP_3_C_2_tr0(CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm),
      .CACHE_UPDATE_LOOP_2_C_0_tr0(nl_dut_core_core_fsm_inst_CACHE_UPDATE_LOOP_2_C_0_tr0),
      .CACHE_UPDATE_LOOP_1_C_0_tr0(CACHE_UPDATE_LOOP_1_and_cse),
      .TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0(nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_C_2_tr0),
      .TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0(nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_2_C_0_tr0),
      .TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0(nl_dut_core_core_fsm_inst_TRANSPOSE_LAST_TWO_DIMS_LOOP_1_C_0_tr0),
      .GEMM_3D_FLOAT_LOOP_4_C_4_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_4_C_4_tr0),
      .GEMM_3D_FLOAT_LOOP_3_C_2_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_C_2_tr0),
      .GEMM_3D_FLOAT_LOOP_1_C_0_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_C_0_tr0),
      .SF_LOOP_3_C_12_tr0(nl_dut_core_core_fsm_inst_SF_LOOP_3_C_12_tr0),
      .SF_LOOP_1_C_0_tr0(nl_dut_core_core_fsm_inst_SF_LOOP_1_C_0_tr0),
      .SOFTMAX_LOOP_3_C_1_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_3_C_1_tr0),
      .SOFTMAX_LOOP_4_C_4_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_4_C_4_tr0),
      .SOFTMAX_LOOP_5_C_21_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_5_C_21_tr0),
      .SOFTMAX_LOOP_1_C_2_tr0(nl_dut_core_core_fsm_inst_SOFTMAX_LOOP_1_C_2_tr0),
      .GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_4_1_C_4_tr0),
      .GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_3_1_C_2_tr0),
      .GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0(nl_dut_core_core_fsm_inst_GEMM_3D_FLOAT_LOOP_1_1_C_0_tr0),
      .ATTN_2D_LOOP_3_C_2_tr0(nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_3_C_2_tr0),
      .ATTN_2D_LOOP_2_C_0_tr0(nl_dut_core_core_fsm_inst_ATTN_2D_LOOP_2_C_0_tr0),
      .RMS_NORM_LOOP_1_2_C_3_tr0(nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_1_2_C_3_tr0),
      .compute_sqrt_1_for_C_15_tr0(nl_dut_core_core_fsm_inst_compute_sqrt_1_for_C_15_tr0),
      .RMS_NORM_LOOP_2_2_C_5_tr0(nl_dut_core_core_fsm_inst_RMS_NORM_LOOP_2_2_C_5_tr0),
      .QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_5_1_C_5_tr0),
      .QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_4_1_C_0_tr0),
      .QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0(nl_dut_core_core_fsm_inst_QUANTIZE_ACTIVATION_LOOP_3_1_C_0_tr0),
      .output_vinit_C_1_tr0(INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm),
      .LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0(nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_5_3_C_3_tr0),
      .LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0(nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_4_3_C_1_tr0),
      .LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0(nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_3_3_C_0_tr0),
      .LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0(nl_dut_core_core_fsm_inst_LINEAR_FORWARD_NO_MUL_LOOP_2_3_C_33_tr0),
      .for_1_for_C_2_tr0(nl_dut_core_core_fsm_inst_for_1_for_C_2_tr0)
    );
  assign input_rsci_clken_d = input_rsc_clken_d_1;
  assign or_1194_nl = (fsm_output[5:1]!=5'b00000);
  assign nand_148_nl = ~((fsm_output[5:1]==5'b11111));
  assign mux_285_nl = MUX_s_1_2_2(or_1194_nl, nand_148_nl, fsm_output[0]);
  assign QUANTIZE_ACTIVATION_LOOP_1_max_val_and_cse = input_rsc_clken_d_1 & (~(mux_285_nl
      & and_dcpl_110));
  assign mux_289_nl = MUX_s_1_2_2(and_dcpl_109, or_tmp_233, fsm_output[8]);
  assign mux_290_nl = MUX_s_1_2_2(mux_289_nl, and_tmp_6, or_1158_cse);
  assign mux_288_nl = MUX_s_1_2_2(and_tmp_6, (fsm_output[8]), and_dcpl_117);
  assign mux_291_nl = MUX_s_1_2_2(mux_290_nl, mux_288_nl, or_392_cse);
  assign and_659_nl = or_392_cse & (fsm_output[5:4]==2'b11);
  assign mux_287_nl = MUX_s_1_2_2(and_tmp_6, (fsm_output[8]), and_659_nl);
  assign mux_292_nl = MUX_s_1_2_2(mux_291_nl, mux_287_nl, fsm_output[1]);
  assign and_660_nl = or_1205_cse & (fsm_output[5:4]==2'b11);
  assign mux_286_nl = MUX_s_1_2_2(and_tmp_6, (fsm_output[8]), and_660_nl);
  assign mux_293_nl = MUX_s_1_2_2(mux_292_nl, mux_286_nl, fsm_output[0]);
  assign QUANTIZE_ACTIVATION_LOOP_1_1_max_val_and_cse = input_rsc_clken_d_1 & mux_293_nl;
  assign nand_93_cse = ~((fsm_output[4]) & (fsm_output[8]));
  assign or_350_cse = (~ (fsm_output[8])) | (fsm_output[0]);
  assign and_134_nl = (fsm_output[4]) & or_350_cse;
  assign mux_307_nl = MUX_s_1_2_2(or_170_cse, and_134_nl, fsm_output[1]);
  assign mux_308_nl = MUX_s_1_2_2((~ (fsm_output[4])), mux_307_nl, fsm_output[3]);
  assign and_133_nl = (fsm_output[4]) & or_170_cse;
  assign mux_305_nl = MUX_s_1_2_2((fsm_output[4]), and_133_nl, fsm_output[1]);
  assign mux_306_nl = MUX_s_1_2_2((~ mux_305_nl), (fsm_output[4]), fsm_output[3]);
  assign mux_309_nl = MUX_s_1_2_2(mux_308_nl, mux_306_nl, fsm_output[2]);
  assign or_348_nl = (fsm_output[2]) | (~ (fsm_output[3])) | (fsm_output[1]) | (fsm_output[4])
      | (~((fsm_output[8]) & (fsm_output[0])));
  assign mux_310_nl = MUX_s_1_2_2(mux_309_nl, or_348_nl, fsm_output[7]);
  assign or_351_ssc = mux_310_nl | (fsm_output[6:5]!=2'b00);
  assign or_353_cse = (fsm_output[2:1]!=2'b00);
  assign and_692_cse = (fsm_output[1:0]==2'b11);
  assign or_354_cse = and_692_cse | (fsm_output[2]);
  assign or_39_nl = (fsm_output[4]) | (fsm_output[8]);
  assign mux_30_nl = MUX_s_1_2_2((~ (fsm_output[4])), or_39_nl, fsm_output[3]);
  assign mux_329_nl = MUX_s_1_2_2(mux_30_nl, mux_tmp_28, fsm_output[2]);
  assign mux_330_nl = MUX_s_1_2_2(mux_tmp_302, mux_329_nl, fsm_output[1]);
  assign mux_294_nl = MUX_s_1_2_2(nand_93_cse, (fsm_output[4]), fsm_output[3]);
  assign mux_296_nl = MUX_s_1_2_2(mux_tmp_28, mux_294_nl, fsm_output[2]);
  assign mux_327_nl = MUX_s_1_2_2(mux_tmp_302, mux_296_nl, fsm_output[1]);
  assign mux_331_nl = MUX_s_1_2_2(mux_330_nl, mux_327_nl, fsm_output[0]);
  assign and_160_ssc = (~ mux_331_nl) & and_dcpl_109 & (~ (fsm_output[5]));
  assign nor_365_cse = ~((~ (fsm_output[0])) | (~ (fsm_output[1])) | (fsm_output[8]));
  assign or_360_cse = (fsm_output[4]) | (~ (fsm_output[7]));
  assign mux_322_nl = MUX_s_1_2_2(or_231_cse, or_890_cse, fsm_output[8]);
  assign nand_18_nl = ~((fsm_output[1]) & (~ mux_322_nl));
  assign mux_320_nl = MUX_s_1_2_2(or_890_cse, or_360_cse, fsm_output[8]);
  assign mux_321_nl = MUX_s_1_2_2(mux_320_nl, or_231_cse, fsm_output[1]);
  assign mux_323_nl = MUX_s_1_2_2(nand_18_nl, mux_321_nl, fsm_output[0]);
  assign mux_324_nl = MUX_s_1_2_2(or_890_cse, mux_323_nl, fsm_output[3]);
  assign or_359_nl = (fsm_output[8]) | (fsm_output[4]) | (fsm_output[7]);
  assign mux_325_nl = MUX_s_1_2_2(mux_324_nl, or_359_nl, fsm_output[6]);
  assign or_358_nl = nor_365_cse | (~ (fsm_output[4])) | (fsm_output[7]);
  assign mux_318_nl = MUX_s_1_2_2(or_358_nl, or_231_cse, fsm_output[3]);
  assign or_355_nl = ((fsm_output[3]) & (fsm_output[1])) | (fsm_output[8]) | (fsm_output[4])
      | (fsm_output[7]);
  assign mux_319_nl = MUX_s_1_2_2(mux_318_nl, or_355_nl, fsm_output[6]);
  assign mux_326_nl = MUX_s_1_2_2(mux_325_nl, mux_319_nl, fsm_output[2]);
  assign nor_seb = ~(mux_326_nl | (fsm_output[5]));
  assign and_694_cse = (fsm_output[2:1]==2'b11);
  assign nor_366_cse = ~((~ (fsm_output[1])) | (fsm_output[8]));
  assign or_373_cse = (fsm_output[1]) | (~ (fsm_output[8]));
  assign or_381_cse = (fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[8]));
  assign or_1205_cse = (fsm_output[3:1]!=3'b000);
  assign nand_167_nl = ~((~(or_1205_cse & (fsm_output[4]))) & (fsm_output[5]));
  assign mux_345_nl = MUX_s_1_2_2(nand_167_nl, mux_tmp_344, fsm_output[0]);
  assign and_181_ssc = (~ mux_345_nl) & and_dcpl_169;
  assign mux_352_nl = MUX_s_1_2_2(mux_tmp_238, mux_tmp_348, fsm_output[1]);
  assign mux_353_nl = MUX_s_1_2_2(mux_352_nl, mux_tmp_350, fsm_output[0]);
  assign and_182_ssc = (~ mux_353_nl) & and_dcpl_121;
  assign or_392_cse = (fsm_output[3:2]!=2'b00);
  assign and_696_cse = (fsm_output[4:3]==2'b11);
  assign mux_361_nl = MUX_s_1_2_2(or_216_cse, or_tmp_283, and_696_cse);
  assign mux_360_nl = MUX_s_1_2_2(or_1027_cse, mux_tmp_356, fsm_output[3]);
  assign mux_362_nl = MUX_s_1_2_2(mux_361_nl, mux_360_nl, fsm_output[2]);
  assign mux_363_nl = MUX_s_1_2_2(mux_362_nl, mux_tmp_358, fsm_output[1]);
  assign mux_357_nl = MUX_s_1_2_2(or_1027_cse, mux_tmp_356, or_392_cse);
  assign mux_359_nl = MUX_s_1_2_2(mux_tmp_358, mux_357_nl, fsm_output[1]);
  assign mux_364_nl = MUX_s_1_2_2(mux_363_nl, mux_359_nl, fsm_output[0]);
  assign and_187_ssc = (~ mux_364_nl) & and_dcpl_88;
  assign or_398_nl = and_694_cse | (fsm_output[4:3]!=2'b00);
  assign mux_365_nl = MUX_s_1_2_2(or_tmp_260, or_310_cse, or_398_nl);
  assign mux_366_nl = MUX_s_1_2_2(mux_365_nl, mux_tmp_340, fsm_output[0]);
  assign and_188_ssc = (~ mux_366_nl) & (fsm_output[8]);
  assign nand_169_nl = ~((~(or_392_cse & (fsm_output[4]))) & (fsm_output[5]));
  assign mux_367_nl = MUX_s_1_2_2(nand_169_nl, mux_tmp_238, fsm_output[1]);
  assign mux_368_nl = MUX_s_1_2_2(mux_367_nl, mux_tmp_344, fsm_output[0]);
  assign and_189_ssc = (~ mux_368_nl) & and_dcpl_169;
  assign mux_369_nl = MUX_s_1_2_2(mux_tmp_238, mux_tmp_259, fsm_output[1]);
  assign mux_370_nl = MUX_s_1_2_2(mux_369_nl, mux_tmp_350, fsm_output[0]);
  assign and_190_ssc = (~ mux_370_nl) & and_dcpl_121;
  assign mux_374_nl = MUX_s_1_2_2(or_tmp_26, mux_tmp_373, or_353_cse);
  assign and_193_itm = (~ mux_374_nl) & and_dcpl_110;
  assign rms_norm_384_div_cmp_b = {reg_rms_norm_384_div_cmp_b_ftd_59_38 , reg_rms_norm_384_div_cmp_b_ftd_37_0
      , reg_rms_norm_384_div_cmp_b_ftd_1};
  assign rms_norm_384_div_cmp_a = {reg_rms_norm_384_div_cmp_a_ftd , 32'b00000000000000000000000000000000};
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_4_2 = MUX_v_3_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd,
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva[4:2]), and_dcpl_197);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1 = MUX_s_1_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd,
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva[1]), and_dcpl_197);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_0 = MUX_s_1_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1,
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva[0]), and_dcpl_197);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_1_rmff = MUX_s_1_2_2(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0]), and_dcpl_197);
  assign and_225_ssc = and_dcpl_204 & and_dcpl_175;
  assign nor_376_nl = ~((fsm_output[6]) | (fsm_output[7]) | (~((fsm_output[3]) &
      (fsm_output[1]) & (fsm_output[5]))));
  assign nor_377_nl = ~((~ (fsm_output[6])) | (fsm_output[7]) | (fsm_output[3]) |
      (fsm_output[1]) | (fsm_output[5]));
  assign mux_383_nl = MUX_s_1_2_2(nor_376_nl, nor_377_nl, fsm_output[4]);
  assign and_701_nl = (fsm_output[2]) & mux_383_nl;
  assign or_423_nl = (fsm_output[3]) | (fsm_output[1]) | (fsm_output[5]);
  assign or_422_nl = (~ (fsm_output[3])) | (fsm_output[1]) | (fsm_output[5]);
  assign mux_382_nl = MUX_s_1_2_2(or_423_nl, or_422_nl, fsm_output[7]);
  assign nor_378_nl = ~((fsm_output[2]) | (fsm_output[4]) | (fsm_output[6]) | mux_382_nl);
  assign mux_384_nl = MUX_s_1_2_2(and_701_nl, nor_378_nl, fsm_output[0]);
  assign ATTN_2D_LOOP_3_and_seb = mux_384_nl & (fsm_output[8]);
  assign and_72_cse = (GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva==3'b101);
  assign and_74_cse = (reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd==2'b10) & reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1;
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_3_1 = MUX1HOT_v_3_3_2((z_out_10[4:2]),
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd, (z_out_12[3:1]), {and_dcpl_284
      , and_dcpl_196 , and_dcpl_190});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_0 = MUX1HOT_s_1_3_2((z_out_10[1]),
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd, (z_out_12[0]), {and_dcpl_284
      , and_dcpl_196 , and_dcpl_190});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_9_rmff = MUX1HOT_s_1_3_2((z_out_10[0]),
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1, (z_out_31[0]), {and_dcpl_284
      , and_dcpl_196 , and_dcpl_190});
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_rmff = MUX1HOT_s_1_3_2((reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0]),
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1, (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3]),
      {and_dcpl_284 , and_dcpl_196 , and_dcpl_190});
  assign or_1233_ssc = and_dcpl_196 | and_dcpl_284;
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_2 = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[2]),
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0, or_1233_ssc);
  assign RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_1_0 = MUX_v_2_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[1:0]),
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1, or_1233_ssc);
  assign and_309_ssc = and_dcpl_299 & and_dcpl_248;
  assign or_482_nl = (~ (fsm_output[2])) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[8]) | (fsm_output[7]) | (~ (fsm_output[6]));
  assign mux_405_nl = MUX_s_1_2_2(or_482_nl, or_tmp_355, fsm_output[1]);
  assign or_479_nl = (fsm_output[1]) | (fsm_output[2]) | (~ (fsm_output[3])) | (fsm_output[4])
      | (~ (fsm_output[8])) | (~ (fsm_output[7])) | (fsm_output[6]);
  assign mux_406_nl = MUX_s_1_2_2(mux_405_nl, or_479_nl, fsm_output[0]);
  assign INIT_2D_MEM_LOOP_2_2_nor_seb = ~(mux_406_nl | (fsm_output[5]));
  assign and_317_ssc = and_dcpl_299 & and_dcpl_120;
  assign or_492_nl = (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[8]))
      | (~ (fsm_output[7])) | (fsm_output[6]);
  assign or_491_nl = (~ (fsm_output[3])) | (~ (fsm_output[4])) | (fsm_output[8])
      | (fsm_output[7]) | (~ (fsm_output[6]));
  assign mux_410_nl = MUX_s_1_2_2(or_492_nl, or_491_nl, fsm_output[2]);
  assign mux_411_nl = MUX_s_1_2_2(mux_410_nl, or_tmp_355, fsm_output[1]);
  assign INIT_2D_MEM_LOOP_2_1_nor_seb = ~(mux_411_nl | (fsm_output[5]) | (~ (fsm_output[0])));
  assign and_321_ssc = and_dcpl_189 & and_dcpl_248;
  assign nor_390_nl = ~((~ (fsm_output[5])) | (fsm_output[0]) | (~ (fsm_output[1]))
      | (fsm_output[8]));
  assign nor_391_nl = ~((fsm_output[5]) | (~ (fsm_output[0])) | (fsm_output[1]) |
      (~ (fsm_output[8])));
  assign mux_414_nl = MUX_s_1_2_2(nor_390_nl, nor_391_nl, fsm_output[3]);
  assign and_nl = (~((fsm_output[4]) | (fsm_output[6]) | (~ (fsm_output[7])))) &
      mux_414_nl;
  assign nor_574_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[6])) | (fsm_output[7])
      | (~ (fsm_output[3])) | (fsm_output[5]) | (fsm_output[0]) | (~ (fsm_output[1]))
      | (fsm_output[8]));
  assign mux_415_seb = MUX_s_1_2_2(and_nl, nor_574_nl, fsm_output[2]);
  assign nor_392_cse = ~((fsm_output[4:3]!=2'b00));
  assign or_518_cse = (fsm_output[3]) | (fsm_output[5]) | (~ (fsm_output[7])) | (fsm_output[6]);
  assign and_342_ssc = and_dcpl_131 & and_dcpl_282;
  assign mux_429_nl = MUX_s_1_2_2(or_310_cse, or_tmp_260, fsm_output[3]);
  assign mux_430_nl = MUX_s_1_2_2(mux_429_nl, or_518_cse, fsm_output[2]);
  assign INIT_2D_MEM_LOOP_2_3_nor_seb = ~(mux_430_nl | or_tmp_5 | or_1213_cse);
  assign and_350_ssc = and_dcpl_139 & and_dcpl_116;
  assign nor_397_nl = ~((~ (fsm_output[1])) | (fsm_output[2]) | (~ (fsm_output[4]))
      | (~ (fsm_output[5])) | (fsm_output[8]) | (fsm_output[7]) | (fsm_output[6]));
  assign nor_398_nl = ~((fsm_output[2]) | (fsm_output[4]) | (fsm_output[5]) | (~
      (fsm_output[8])) | (~ (fsm_output[7])) | (fsm_output[6]));
  assign nor_399_nl = ~((~ (fsm_output[2])) | (fsm_output[4]) | (fsm_output[5]) |
      (fsm_output[8]) | (fsm_output[7]) | (~ (fsm_output[6])));
  assign mux_433_nl = MUX_s_1_2_2(nor_398_nl, nor_399_nl, fsm_output[1]);
  assign mux_434_nl = MUX_s_1_2_2(nor_397_nl, mux_433_nl, fsm_output[0]);
  assign for_for_and_seb = mux_434_nl & (fsm_output[3]);
  assign nor_405_cse = ~((fsm_output[5]) | (fsm_output[0]) | (fsm_output[8]) | (fsm_output[2]));
  assign nor_413_cse = ~((fsm_output[0]) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm)
      | (fsm_output[1]));
  assign nor_411_cse = ~((fsm_output[0]) | (fsm_output[1]) | (fsm_output[8]));
  assign nor_414_cse = ~(nor_413_cse | (fsm_output[8]));
  assign or_21_cse = (fsm_output[8]) | (~ (fsm_output[4]));
  assign or_15_cse = (fsm_output[5]) | (fsm_output[8]);
  assign or_608_nl = (fsm_output[4:2]!=3'b000) | (~((fsm_output[1:0]!=2'b10))) |
      (fsm_output[8]);
  assign mux_507_nl = MUX_s_1_2_2((fsm_output[8]), or_608_nl, fsm_output[5]);
  assign or_609_cse = (fsm_output[6]) | mux_507_nl;
  assign nand_200_cse = ~((fsm_output[1]) & (fsm_output[8]));
  assign nand_199_cse = ~((fsm_output[1:0]==2'b11));
  assign nor_126_cse = ~((fsm_output[2]) | (~ (fsm_output[4])));
  assign or_612_cse = and_692_cse | (fsm_output[8]);
  assign or_603_cse = (fsm_output[1:0]!=2'b00);
  assign or_604_cse = (fsm_output[2:1]!=2'b01);
  assign nand_195_cse = ~((fsm_output[8]) & (fsm_output[2]));
  assign or_601_cse = (~ (fsm_output[8])) | (fsm_output[2]) | and_692_cse;
  assign or_589_cse = (fsm_output[8]) | (fsm_output[2]);
  assign nor_429_nl = ~((fsm_output[2:1]!=2'b00) | not_tmp_327);
  assign nor_430_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[2])) | (fsm_output[3])
      | (fsm_output[8]));
  assign mux_517_nl = MUX_s_1_2_2(nor_429_nl, nor_430_nl, fsm_output[0]);
  assign and_382_itm = mux_517_nl & and_dcpl_109 & and_dcpl_152;
  assign operator_40_24_true_AC_TRN_AC_WRAP_1_and_itm = (~ and_dcpl_350) & and_dcpl_374;
  assign operator_40_24_true_AC_TRN_AC_WRAP_1_and_2_ssc = input_rsc_clken_d_1 & (~
      and_dcpl_350);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_1_or_cse = ((CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0==2'b01))
      | LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_3_cse;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])) + 2'b01;
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm[1:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_cse
      = ~((z_out_9_1_0[1]) & (~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])));
  assign or_657_cse = (~ (fsm_output[6])) | (fsm_output[8]);
  assign or_1328_cse = (~ (fsm_output[6])) | (~ (fsm_output[3])) | (fsm_output[7])
      | (fsm_output[5]);
  assign or_1330_cse = (fsm_output[7:3]!=5'b10000);
  assign or_702_cse = (fsm_output[4]) | (~ (fsm_output[7])) | (fsm_output[8]);
  assign RMS_NORM_LOOP_2_2_and_ssc = input_rsc_clken_d_1 & (RMS_NORM_LOOP_2_2_dfr_sva_mx0c0
      | and_dcpl_154 | RMS_NORM_LOOP_2_2_dfr_sva_mx0c2 | RMS_NORM_LOOP_2_2_dfr_sva_mx0c3
      | and_dcpl_409 | and_dcpl_156);
  assign or_745_cse = (fsm_output[8:7]!=2'b01);
  assign or_734_cse = (~ (fsm_output[1])) | (~ (fsm_output[0])) | (fsm_output[8]);
  assign or_733_cse = (fsm_output[8:7]!=2'b00);
  assign and_433_itm = and_dcpl_118 & and_dcpl_239;
  assign and_434_itm = and_dcpl_139 & and_dcpl_167;
  assign nor_583_nl = ~((fsm_output[5:3]!=3'b011));
  assign nor_584_nl = ~((fsm_output[3]) | (~ mux_tmp_237));
  assign mux_632_nl = MUX_s_1_2_2(nor_583_nl, nor_584_nl, fsm_output[0]);
  assign and_439_itm = mux_632_nl & (fsm_output[6]) & and_dcpl_29 & and_694_cse;
  assign and_440_itm = and_dcpl_170 & and_dcpl_128;
  assign nor_461_nl = ~((fsm_output[6:1]!=6'b000001));
  assign nor_462_nl = ~((fsm_output[6:2]!=5'b10101));
  assign nor_463_nl = ~((fsm_output[6:2]!=5'b01011));
  assign mux_633_nl = MUX_s_1_2_2(nor_462_nl, nor_463_nl, fsm_output[1]);
  assign mux_634_nl = MUX_s_1_2_2(nor_461_nl, mux_633_nl, fsm_output[0]);
  assign and_441_itm = mux_634_nl & and_dcpl_88;
  assign and_738_nl = (fsm_output[3]) & (fsm_output[2]) & (fsm_output[8]);
  assign or_744_nl = (fsm_output[3]) | (fsm_output[2]) | (fsm_output[8]);
  assign mux_628_nl = MUX_s_1_2_2(and_738_nl, or_744_nl, fsm_output[7]);
  assign mux_629_nl = MUX_s_1_2_2(or_745_cse, mux_628_nl, fsm_output[5]);
  assign nand_207_nl = ~((fsm_output[3]) & ((fsm_output[2]) | ((fsm_output[1]) &
      or_350_cse)));
  assign mux_626_nl = MUX_s_1_2_2(nand_207_nl, (fsm_output[8]), fsm_output[7]);
  assign mux_623_nl = MUX_s_1_2_2(or_350_cse, or_170_cse, fsm_output[1]);
  assign mux_624_nl = MUX_s_1_2_2((~ (fsm_output[8])), mux_623_nl, fsm_output[2]);
  assign mux_625_nl = MUX_s_1_2_2(mux_624_nl, (fsm_output[8]), fsm_output[3]);
  assign or_742_nl = (fsm_output[7]) | (~ mux_625_nl);
  assign mux_627_nl = MUX_s_1_2_2(mux_626_nl, or_742_nl, fsm_output[5]);
  assign mux_630_nl = MUX_s_1_2_2(mux_629_nl, mux_627_nl, fsm_output[4]);
  assign or_739_nl = (fsm_output[0]) | (fsm_output[8]);
  assign mux_618_nl = MUX_s_1_2_2(or_170_cse, or_739_nl, fsm_output[1]);
  assign nand_34_nl = ~((fsm_output[2]) & (~ mux_618_nl));
  assign mux_619_nl = MUX_s_1_2_2(or_164_cse, nand_34_nl, fsm_output[3]);
  assign or_738_nl = (~ (fsm_output[3])) | (fsm_output[8]);
  assign mux_620_nl = MUX_s_1_2_2((~ mux_619_nl), or_738_nl, fsm_output[7]);
  assign mux_621_nl = MUX_s_1_2_2(mux_620_nl, (fsm_output[8]), fsm_output[5]);
  assign and_739_nl = or_1205_cse & (fsm_output[8]);
  assign or_735_nl = (~ (fsm_output[1])) | (fsm_output[0]) | (fsm_output[8]);
  assign mux_614_nl = MUX_s_1_2_2(or_735_nl, or_734_cse, fsm_output[2]);
  assign mux_615_nl = MUX_s_1_2_2(or_164_cse, mux_614_nl, fsm_output[3]);
  assign mux_616_nl = MUX_s_1_2_2(and_739_nl, mux_615_nl, fsm_output[7]);
  assign mux_617_nl = MUX_s_1_2_2(mux_616_nl, or_733_cse, fsm_output[5]);
  assign mux_622_nl = MUX_s_1_2_2(mux_621_nl, mux_617_nl, fsm_output[4]);
  assign mux_631_nl = MUX_s_1_2_2(mux_630_nl, mux_622_nl, fsm_output[6]);
  assign GEMM_3D_FLOAT_LOOP_3_and_ssc = input_rsc_clken_d_1 & mux_631_nl;
  assign nl_SF_LOOP_3_acc_17_sdt = conv_s2s_18_19({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35])
      , 1'b0 , (signext_5_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35])) , 2'b00
      , (signext_3_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35])) , 2'b00 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35]))
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35])}) + conv_u2s_18_19({(APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm[17:3])
      , 1'b0 , (APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm[1:0])});
  assign SF_LOOP_3_acc_17_sdt = nl_SF_LOOP_3_acc_17_sdt[18:0];
  assign or_791_cse = (fsm_output[8:6]!=3'b010);
  assign or_1213_cse = (fsm_output[1:0]!=2'b01);
  assign nl_SF_LOOP_3_acc_60_nl = conv_u2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[27])
      + conv_s2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28]);
  assign SF_LOOP_3_acc_60_nl = nl_SF_LOOP_3_acc_60_nl[1:0];
  assign nl_SF_LOOP_3_acc_65_nl = conv_u2u_9_10(signext_9_8({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[29])
      , 1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[29]))
      , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[29]))}))
      + conv_u2u_9_10({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]) , 1'b0
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]) , 2'b00 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]))
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36])});
  assign SF_LOOP_3_acc_65_nl = nl_SF_LOOP_3_acc_65_nl[9:0];
  assign nl_SF_LOOP_3_acc_22_nl = conv_s2s_18_20({SF_LOOP_3_acc_60_nl , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[27])
      , 2'b00 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28]) , SF_LOOP_3_acc_61_cse_mx0w4
      , SF_LOOP_3_acc_61_cse_mx0w4 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28])
      , SF_LOOP_3_acc_63_cse_mx0w6}) + conv_u2s_18_20({SF_LOOP_3_acc_64_ncse_1 ,
      (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[29]) , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]) , SF_LOOP_3_acc_65_nl
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[29]) , SF_LOOP_3_acc_64_ncse_1});
  assign SF_LOOP_3_acc_22_nl = nl_SF_LOOP_3_acc_22_nl[19:0];
  assign nl_SF_LOOP_3_acc_24_nl = conv_s2s_19_20(SF_LOOP_3_acc_15_itm) + conv_s2s_19_20(SF_LOOP_3_mul_17_itm);
  assign SF_LOOP_3_acc_24_nl = nl_SF_LOOP_3_acc_24_nl[19:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0 = MUX_v_20_2_2(SF_LOOP_3_acc_22_nl,
      SF_LOOP_3_acc_24_nl, and_dcpl_445);
  assign and_349_itm = and_dcpl_118 & and_dcpl_149;
  assign mux_694_nl = MUX_s_1_2_2(or_dcpl_100, or_dcpl_93, fsm_output[1]);
  assign and_461_itm = (~ mux_694_nl) & nor_tmp_54 & and_dcpl_133 & (~ (fsm_output[4]))
      & (fsm_output[0]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_or_3_cse = and_dcpl_317 | and_dcpl_298
      | (and_dcpl_290 & and_dcpl_188) | (and_dcpl_164 & and_dcpl_107);
  assign or_1215_cse = (fsm_output[4:3]!=2'b00);
  assign nor_168_cse = ~((fsm_output[4]) | (~ (fsm_output[8])));
  assign or_802_cse = (((fsm_output[1]) | (fsm_output[3]) | (fsm_output[4])) & (fsm_output[8]))
      | (fsm_output[7:6]!=2'b10);
  assign or_832_cse = (fsm_output[7:6]!=2'b01);
  assign mux_705_cse = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[7]);
  assign nl_SF_LOOP_3_acc_71_nl = conv_s2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5])
      + conv_s2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[17]);
  assign SF_LOOP_3_acc_71_nl = nl_SF_LOOP_3_acc_71_nl[1:0];
  assign nl_SF_LOOP_3_acc_72_nl = conv_u2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5])
      + conv_u2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[17]);
  assign SF_LOOP_3_acc_72_nl = nl_SF_LOOP_3_acc_72_nl[1:0];
  assign nl_SF_LOOP_3_acc_73_nl = conv_u2s_2_3(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5]))
      + conv_u2s_1_3(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[17]);
  assign SF_LOOP_3_acc_73_nl = nl_SF_LOOP_3_acc_73_nl[2:0];
  assign nl_SF_LOOP_3_acc_74_nl = conv_u2s_5_6(signext_5_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5]))
      + conv_u2s_2_6(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[17]));
  assign SF_LOOP_3_acc_74_nl = nl_SF_LOOP_3_acc_74_nl[5:0];
  assign nl_SF_LOOP_3_acc_75_nl = conv_u2s_3_4({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5])}) + conv_u2s_3_4(signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[17]));
  assign SF_LOOP_3_acc_75_nl = nl_SF_LOOP_3_acc_75_nl[3:0];
  assign nl_SF_LOOP_3_acc_76_nl = conv_s2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19])
      + conv_s2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22]);
  assign SF_LOOP_3_acc_76_nl = nl_SF_LOOP_3_acc_76_nl[1:0];
  assign nl_SF_LOOP_3_acc_77_nl = conv_u2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19])
      + conv_u2s_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22]);
  assign SF_LOOP_3_acc_77_nl = nl_SF_LOOP_3_acc_77_nl[1:0];
  assign nl_SF_LOOP_3_acc_78_nl = conv_u2s_4_5(signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19]))
      + conv_u2s_2_5(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22]));
  assign SF_LOOP_3_acc_78_nl = nl_SF_LOOP_3_acc_78_nl[4:0];
  assign nl_SF_LOOP_3_acc_79_nl = conv_u2s_4_5({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19])
      , 1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19]))})
      + conv_u2s_3_5({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22]) , 1'b0
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22])});
  assign SF_LOOP_3_acc_79_nl = nl_SF_LOOP_3_acc_79_nl[4:0];
  assign nl_SF_LOOP_3_acc_26_sdt = conv_s2s_19_20({SF_LOOP_3_acc_71_nl , SF_LOOP_3_acc_72_nl
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[17]) , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[5])
      , SF_LOOP_3_acc_73_nl , SF_LOOP_3_acc_74_nl , SF_LOOP_3_acc_75_nl}) + conv_s2s_19_20({SF_LOOP_3_acc_76_nl
      , SF_LOOP_3_acc_77_nl , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22])
      , 1'b0 , SF_LOOP_3_acc_78_nl , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[22])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19]) , SF_LOOP_3_acc_79_nl});
  assign SF_LOOP_3_acc_26_sdt = nl_SF_LOOP_3_acc_26_sdt[19:0];
  assign or_833_cse = nor_168_cse | (fsm_output[7:6]!=2'b01);
  assign or_817_cse = (or_1215_cse & (fsm_output[8])) | (fsm_output[7:6]!=2'b10);
  assign mux_709_nl = MUX_s_1_2_2(or_791_cse, mux_688_cse, fsm_output[4]);
  assign mux_710_cse = MUX_s_1_2_2(mux_709_nl, or_832_cse, fsm_output[3]);
  assign or_814_nl = (fsm_output[8]) | mux_705_cse;
  assign mux_706_nl = MUX_s_1_2_2(or_814_nl, mux_688_cse, fsm_output[4]);
  assign mux_707_nl = MUX_s_1_2_2(mux_706_nl, or_833_cse, fsm_output[0]);
  assign mux_708_nl = MUX_s_1_2_2(mux_707_nl, mux_684_cse, fsm_output[3]);
  assign mux_711_nl = MUX_s_1_2_2(mux_710_cse, mux_708_nl, fsm_output[1]);
  assign mux_712_nl = MUX_s_1_2_2(or_817_cse, mux_711_nl, fsm_output[5]);
  assign or_835_nl = (~((fsm_output[0]) | (fsm_output[4]) | (~ (fsm_output[8]))))
      | (fsm_output[7:6]!=2'b01);
  assign mux_702_nl = MUX_s_1_2_2(or_835_nl, mux_684_cse, fsm_output[3]);
  assign mux_696_nl = MUX_s_1_2_2((fsm_output[7]), or_832_cse, fsm_output[8]);
  assign mux_698_nl = MUX_s_1_2_2(mux_688_cse, mux_696_nl, fsm_output[4]);
  assign mux_695_nl = MUX_s_1_2_2(or_832_cse, (fsm_output[7]), nor_168_cse);
  assign mux_699_nl = MUX_s_1_2_2(mux_698_nl, mux_695_nl, fsm_output[0]);
  assign mux_700_nl = MUX_s_1_2_2(or_832_cse, mux_699_nl, fsm_output[3]);
  assign mux_703_nl = MUX_s_1_2_2(mux_702_nl, mux_700_nl, fsm_output[1]);
  assign mux_704_nl = MUX_s_1_2_2(or_802_cse, mux_703_nl, fsm_output[5]);
  assign mux_713_nl = MUX_s_1_2_2(mux_712_nl, mux_704_nl, fsm_output[2]);
  assign SF_LOOP_3_and_ssc = input_rsc_clken_d_1 & ((~ mux_713_nl) | and_dcpl_361);
  assign mux_688_cse = MUX_s_1_2_2(or_832_cse, (fsm_output[7]), fsm_output[8]);
  assign nor_494_cse = ~((fsm_output[1:0]!=2'b00));
  assign or_848_nl = (~ (fsm_output[3])) | (~ (fsm_output[0])) | (fsm_output[2]);
  assign mux_730_cse = MUX_s_1_2_2(or_tmp_705, or_848_nl, fsm_output[8]);
  assign or_852_nl = (fsm_output[3]) | (~ (fsm_output[0])) | (fsm_output[2]);
  assign mux_732_cse = MUX_s_1_2_2(or_852_nl, or_tmp_705, fsm_output[8]);
  assign nor_179_cse = ~((fsm_output[0]) | (~ (fsm_output[4])));
  assign or_890_cse = (~ (fsm_output[4])) | (fsm_output[7]);
  assign or_909_cse = (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[7]);
  assign or_913_cse = (fsm_output[8]) | (~ (fsm_output[4])) | (fsm_output[7]);
  assign nand_219_nl = ~((fsm_output[3]) & mux_tmp_167);
  assign mux_793_nl = MUX_s_1_2_2(or_tmp_547, nand_219_nl, fsm_output[2]);
  assign mux_794_nl = MUX_s_1_2_2((~ not_tmp_429), mux_793_nl, fsm_output[1]);
  assign or_917_nl = (~ (fsm_output[2])) | (~ (fsm_output[3])) | (fsm_output[4])
      | (fsm_output[6]);
  assign mux_792_nl = MUX_s_1_2_2(mux_tmp_790, or_917_nl, fsm_output[1]);
  assign mux_795_nl = MUX_s_1_2_2(mux_794_nl, mux_792_nl, fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_and_3_cse = input_rsc_clken_d_1 & (~((~ mux_795_nl)
      & and_dcpl_398));
  assign and_766_cse = (fsm_output[3:2]==2'b11) & mux_tmp_167;
  assign nor_505_cse = ~((fsm_output[1]) | mux_tmp_790);
  assign and_768_cse = (fsm_output[0]) & (fsm_output[4]);
  assign nor_510_cse = ~((fsm_output[4]) | (fsm_output[7]));
  assign nand_224_cse = ~((fsm_output[7]) & (fsm_output[2]));
  assign mux_857_cse = MUX_s_1_2_2(nor_238_cse, (fsm_output[7]), fsm_output[4]);
  assign or_1027_cse = (fsm_output[6:4]!=3'b100);
  assign nand_243_cse = ~((fsm_output[6:5]==2'b11));
  assign CACHE_UPDATE_LOOP_2_1_j_and_ssc = input_rsc_clken_d_1 & (CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0
      | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c1 | and_dcpl_284 | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c3
      | and_dcpl_246 | CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_cse = input_rsc_clken_d_1
      & (~(and_dcpl_137 & and_dcpl_133 & and_696_cse & or_353_cse));
  assign or_1054_cse = (fsm_output[7:4]!=4'b0101);
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1 = conv_u2u_3_4(z_out_35[3:1])
      + conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1 = nl_APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1[3:0];
  assign APPLY_ROTARY_POS_EMB_LOOP_3_and_ssc = input_rsc_clken_d_1 & (APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0
      | and_dcpl_284 | and_dcpl_488 | and_dcpl_361);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_or_2_cse = and_dcpl_488 | and_dcpl_361;
  assign nor_580_seb = ~(or_dcpl_90 | (~((fsm_output[3]) & (fsm_output[1]))) | ((fsm_output[2])
      & (~ (fsm_output[0]))));
  assign CACHE_UPDATE_LOOP_3_k_and_1_cse = input_rsc_clken_d_1 & (~(and_dcpl_129
      & (~ (fsm_output[3])) & and_dcpl_253 & and_dcpl_218 & ((fsm_output[4]) ^ (fsm_output[0]))));
  assign RESHAPE_2D_TO_3D_LOOP_3_2_and_ssc = input_rsc_clken_d_1 & (~(and_dcpl_189
      & and_dcpl_127 & not_tmp_240));
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_and_cse = input_rsc_clken_d_1 & (~(or_dcpl_89
      | or_tmp_197 | or_392_cse | or_dcpl_136));
  assign nor_566_cse = ~((fsm_output[3:2]!=2'b00));
  assign nand_258_cse = ~((fsm_output[3:2]==2'b11));
  assign nl_SF_LOOP_3_acc_88_itm = conv_u2u_5_6(signext_5_4({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19])
      , 1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19]))}))
      + conv_u2u_4_6(signext_4_3({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18])}));
  assign SF_LOOP_3_acc_88_itm = nl_SF_LOOP_3_acc_88_itm[5:0];
  assign nor_565_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[2])) | (fsm_output[3])
      | (fsm_output[4]) | (fsm_output[6]));
  assign and_808_nl = (fsm_output[3]) & (fsm_output[4]) & (fsm_output[6]);
  assign mux_959_nl = MUX_s_1_2_2((~ or_tmp_547), and_808_nl, fsm_output[2]);
  assign mux_960_nl = MUX_s_1_2_2(not_tmp_429, mux_959_nl, fsm_output[1]);
  assign mux_961_nl = MUX_s_1_2_2(nor_565_nl, mux_960_nl, fsm_output[0]);
  assign and_533_itm = mux_961_nl & and_dcpl_398;
  assign and_537_itm = and_dcpl_398 & ((fsm_output[6]) ^ (fsm_output[2])) & and_696_cse
      & and_692_cse;
  assign nl_SF_LOOP_3_acc_87_itm = conv_u2u_4_5(signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[19]))
      + conv_u2u_3_5(signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18]));
  assign SF_LOOP_3_acc_87_itm = nl_SF_LOOP_3_acc_87_itm[4:0];
  assign or_1127_nl = (fsm_output[2]) | mux_tmp_171;
  assign mux_989_nl = MUX_s_1_2_2(or_1127_nl, or_tmp_963, fsm_output[1]);
  assign mux_992_nl = MUX_s_1_2_2(mux_tmp_991, mux_989_nl, fsm_output[0]);
  assign and_548_itm = (~ mux_992_nl) & and_dcpl_527;
  assign or_1123_nl = (~ (fsm_output[3])) | (fsm_output[5]) | (~ (fsm_output[6]));
  assign mux_986_nl = MUX_s_1_2_2(nand_tmp_69, or_1123_nl, fsm_output[2]);
  assign mux_987_nl = MUX_s_1_2_2(mux_986_nl, or_tmp_955, fsm_output[1]);
  assign mux_984_nl = MUX_s_1_2_2(nand_tmp_69, or_tmp_953, fsm_output[2]);
  assign mux_985_nl = MUX_s_1_2_2(nand_tmp_70, mux_984_nl, fsm_output[1]);
  assign mux_988_nl = MUX_s_1_2_2(mux_987_nl, mux_985_nl, fsm_output[0]);
  assign nor_582_itm = ~(mux_988_nl | or_702_cse);
  assign nor_261_nl = ~((~ (fsm_output[1])) | (fsm_output[4]));
  assign nor_259_nl = ~((fsm_output[1]) | (~ (fsm_output[4])));
  assign mux_974_nl = MUX_s_1_2_2(nor_261_nl, nor_259_nl, fsm_output[0]);
  assign and_542_itm = mux_974_nl & and_dcpl_129 & and_dcpl_218 & and_dcpl_161;
  assign mux_979_nl = MUX_s_1_2_2(nand_tmp_69, or_tmp_955, fsm_output[1]);
  assign or_1113_nl = (fsm_output[3]) | mux_tmp_171;
  assign mux_976_nl = MUX_s_1_2_2(or_tmp_953, or_1113_nl, CACHE_UPDATE_LOOP_1_and_cse);
  assign mux_977_nl = MUX_s_1_2_2(nand_tmp_69, mux_976_nl, fsm_output[2]);
  assign mux_978_nl = MUX_s_1_2_2(nand_tmp_70, mux_977_nl, fsm_output[1]);
  assign mux_980_nl = MUX_s_1_2_2(mux_979_nl, mux_978_nl, fsm_output[0]);
  assign and_544_itm = (~ mux_980_nl) & and_dcpl_29 & (~ (fsm_output[4]));
  assign nand_259_nl = ~((fsm_output[4:2]==3'b111));
  assign mux_972_nl = MUX_s_1_2_2(nand_259_nl, or_tmp_24, fsm_output[1]);
  assign mux_970_nl = MUX_s_1_2_2((fsm_output[3]), or_tmp_24, CACHE_UPDATE_LOOP_1_and_cse);
  assign mux_971_nl = MUX_s_1_2_2(mux_tmp_28, (~ mux_970_nl), fsm_output[2]);
  assign nand_68_nl = ~((fsm_output[1]) & mux_971_nl);
  assign mux_973_nl = MUX_s_1_2_2(mux_972_nl, nand_68_nl, fsm_output[0]);
  assign CACHE_UPDATE_LOOP_3_k_nand_1_itm = ~((~ mux_973_nl) & and_dcpl_518);
  assign or_1121_nl = (fsm_output[4:2]!=3'b001);
  assign mux_982_nl = MUX_s_1_2_2(or_1121_nl, or_tmp_958, fsm_output[1]);
  assign or_1119_nl = (fsm_output[4:2]!=3'b100);
  assign mux_981_nl = MUX_s_1_2_2(or_tmp_958, or_1119_nl, fsm_output[1]);
  assign mux_983_nl = MUX_s_1_2_2(mux_982_nl, mux_981_nl, fsm_output[0]);
  assign CACHE_UPDATE_LOOP_3_k_and_ssc = input_rsc_clken_d_1 & (~((~ mux_983_nl)
      & and_dcpl_518));
  assign SF_LOOP_3_and_2_cse = input_rsc_clken_d_1 & (~(or_dcpl_169 | or_dcpl_93
      | nand_199_cse));
  assign SF_LOOP_3_and_4_ssc = input_rsc_clken_d_1 & (~(or_dcpl_169 | or_dcpl_101));
  assign SF_LOOP_3_and_11_ssc = input_rsc_clken_d_1 & (~(or_dcpl_169 | or_dcpl_116));
  assign SF_LOOP_3_and_12_ssc = input_rsc_clken_d_1 & (~(or_dcpl_169 | or_dcpl_137));
  assign SF_LOOP_3_and_14_ssc = input_rsc_clken_d_1 & (~(or_dcpl_169 | or_dcpl_100
      | nand_199_cse));
  assign or_1158_cse = (fsm_output[5:4]!=2'b00);
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux1h_nl = MUX1HOT_s_1_3_2((attention_abs_1_qr_sva_1[39]),
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39, (attention_abs_3_qr_sva[39]),
      {RMS_NORM_LOOP_2_and_4_ssc_1 , RMS_NORM_LOOP_2_and_1_ssc_1 , RMS_NORM_LOOP_2_and_6_ssc_1});
  assign QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39_mx0w2 = RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux1h_nl
      & (~(RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1 | RMS_NORM_LOOP_2_and_5_ssc_1));
  assign QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0_mx0w2 = MUX1HOT_v_39_5_2((input_rsci_q_d[38:0]),
      (attention_abs_1_qr_sva_1[38:0]), QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0,
      (RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[38:0]), (attention_abs_3_qr_sva[38:0]),
      {RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1 , RMS_NORM_LOOP_2_and_4_ssc_1 ,
      RMS_NORM_LOOP_2_and_1_ssc_1 , RMS_NORM_LOOP_2_and_5_ssc_1 , RMS_NORM_LOOP_2_and_6_ssc_1});
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux1h_nl = MUX1HOT_s_1_3_2((attention_abs_5_qr_sva_1[39]),
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39, (attention_abs_7_qr_sva[39]),
      {RMS_NORM_LOOP_2_2_and_4_ssc_1 , RMS_NORM_LOOP_2_2_and_1_ssc_1 , RMS_NORM_LOOP_2_2_and_6_ssc_1});
  assign QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39_mx0w2 = RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux1h_nl
      & (~(RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1 | RMS_NORM_LOOP_2_2_and_5_ssc_1));
  assign QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0_mx0w2 = MUX1HOT_v_39_5_2((attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d[38:0]),
      (attention_abs_5_qr_sva_1[38:0]), QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0,
      (RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[38:0]), (attention_abs_7_qr_sva[38:0]),
      {RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1 , RMS_NORM_LOOP_2_2_and_4_ssc_1
      , RMS_NORM_LOOP_2_2_and_1_ssc_1 , RMS_NORM_LOOP_2_2_and_5_ssc_1 , RMS_NORM_LOOP_2_2_and_6_ssc_1});
  assign nl_compute_sqrt_1_for_acc_1_nl = conv_s2s_40_41({RMS_NORM_LOOP_2_2_dfr_sva_9
      , RMS_NORM_LOOP_2_2_dfr_sva_8_0 , compute_sqrt_1_guess_sva_29_0}) + conv_s2s_40_41(RMS_NORM_LOOP_2_mul_1_itm[39:0]);
  assign compute_sqrt_1_for_acc_1_nl = nl_compute_sqrt_1_for_acc_1_nl[40:0];
  assign compute_sqrt_1_for_acc_1_itm_40_1_1 = readslicef_41_40_1(compute_sqrt_1_for_acc_1_nl);
  assign nand_184_cse = ~((RMS_NORM_LOOP_2_2_dfr_sva_8_0==9'b111111111) & RMS_NORM_LOOP_2_2_dfr_sva_9);
  assign nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_22_nl = conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0)
      + conv_u2u_3_4({reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1});
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_22_nl = nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_22_nl[3:0];
  assign nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl = ({reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1}) + conv_u2u_2_6(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl = nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl[5:0];
  assign nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5 = conv_u2u_8_9({TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_22_nl
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1
      , 1'b0}) + conv_u2u_6_9(TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_15_nl);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5 = nl_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5[8:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_3_cse
      = (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0==2'b10);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp = ~(z_out_30_2
      | z_out_28_2 | z_out_29_2);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp = (LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs==2'b10);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1 = conv_s2u_2_3(z_out_8[1:0])
      + conv_s2u_2_3(z_out_17[5:4]) + conv_u2u_1_3(~ (z_out_17[3]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1 = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2:0];
  assign nl_attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0 = (~ (rms_norm_384_val_acc_psp_sva_1[30:0]))
      + 31'b0000000000000000000000000000001;
  assign attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0 = nl_attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0[30:0];
  assign attention_abs_qif_acc_pmx_lpi_1_dfm_mx1_30_1 = MUX_v_30_2_2((rms_norm_384_val_acc_psp_sva_1[30:1]),
      (attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0[30:1]), rms_norm_384_val_acc_psp_sva_1[31]);
  assign nl_rms_norm_384_val_acc_psp_sva_1 = ({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]))}) + conv_s2s_31_32(operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm)
      + conv_s2s_30_32(operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm);
  assign rms_norm_384_val_acc_psp_sva_1 = nl_rms_norm_384_val_acc_psp_sva_1[31:0];
  assign nl_compute_sqrt_for_acc_1_nl = conv_s2s_40_41({RMS_NORM_LOOP_2_2_dfr_sva_9
      , RMS_NORM_LOOP_2_2_dfr_sva_8_0 , compute_sqrt_guess_sva_29_0}) + conv_s2s_40_41(RMS_NORM_LOOP_2_mul_1_itm[39:0]);
  assign compute_sqrt_for_acc_1_nl = nl_compute_sqrt_for_acc_1_nl[40:0];
  assign compute_sqrt_for_acc_1_itm_40_1_1 = readslicef_41_40_1(compute_sqrt_for_acc_1_nl);
  assign attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39 =
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_39 & attention_max_attn_fixed_t_acc_itm_40_1;
  assign attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_0
      = MUX_v_39_2_2(39'b000000000000000000000000000000000000000, QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_38_0,
      attention_max_attn_fixed_t_acc_itm_40_1);
  assign attention_max_attn_fixed_t_1_conc_psp_mx0w11_39 = QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_39
      & attention_max_attn_fixed_t_1_acc_itm_40_1;
  assign attention_max_attn_fixed_t_1_conc_psp_mx0w11_38_0 = MUX_v_39_2_2(39'b000000000000000000000000000000000000000,
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_38_0, attention_max_attn_fixed_t_1_acc_itm_40_1);
  assign exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm_mx0w0 = (~ z_out_29_2) & nand_184_cse;
  assign nl_attention_abs_2_mux_2 = conv_u2s_39_40(~ (RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[38:0]))
      + 40'b0000000000000000000000000000000000000001;
  assign attention_abs_2_mux_2 = nl_attention_abs_2_mux_2[39:0];
  assign nl_attention_abs_1_qr_sva_1 = conv_u2s_39_40(~ (input_rsci_q_d[38:0])) +
      40'b0000000000000000000000000000000000000001;
  assign attention_abs_1_qr_sva_1 = nl_attention_abs_1_qr_sva_1[39:0];
  assign RMS_NORM_LOOP_2_and_4_ssc_1 = (input_rsci_q_d[39]) & (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign RMS_NORM_LOOP_2_and_1_ssc_1 = (~ QUANTIZE_ACTIVATION_LOOP_2_slc_40_1_svs)
      & CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  assign RMS_NORM_LOOP_2_and_6_ssc_1 = (RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[39])
      & RMS_NORM_LOOP_2_and_2_m1c_1;
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_nor_ssc_1 = ~((input_rsci_q_d[39]) | CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign RMS_NORM_LOOP_2_and_5_ssc_1 = (~ (RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[39]))
      & RMS_NORM_LOOP_2_and_2_m1c_1;
  assign RMS_NORM_LOOP_2_and_2_m1c_1 = QUANTIZE_ACTIVATION_LOOP_2_slc_40_1_svs &
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  assign nl_attention_max_attn_fixed_t_acc_nl = conv_s2u_40_41({(~ QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_39)
      , (~ QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_38_0)}) + 41'b00000000000000000000000000000000000000001;
  assign attention_max_attn_fixed_t_acc_nl = nl_attention_max_attn_fixed_t_acc_nl[40:0];
  assign attention_max_attn_fixed_t_acc_itm_40_1 = readslicef_41_1_40(attention_max_attn_fixed_t_acc_nl);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2 = ({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd
      , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1}) + 3'b001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2 = nl_LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2[2:0];
  assign nl_QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3 = GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva
      + 3'b001;
  assign QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3 = nl_QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3[2:0];
  assign nor_287_cse = ~((~ (fsm_output[4])) | (fsm_output[6]));
  assign nl_RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2 = APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva
      + 6'b000001;
  assign RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2 = nl_RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2[5:0];
  assign nl_SF_LOOP_3_acc_61_cse_mx0w4 = conv_u2u_1_3(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[27])
      + conv_u2u_2_3(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28]));
  assign SF_LOOP_3_acc_61_cse_mx0w4 = nl_SF_LOOP_3_acc_61_cse_mx0w4[2:0];
  assign nl_attention_round_qr_39_16_lpi_4_dfm_mx0w0 = conv_u2s_23_24({(reg_attention_round_a_cse_slc[2:0])
      , (RMS_NORM_LOOP_2_mul_1_itm[51:32])}) + conv_u2s_1_24(RMS_NORM_LOOP_2_mul_1_itm[31]);
  assign attention_round_qr_39_16_lpi_4_dfm_mx0w0 = nl_attention_round_qr_39_16_lpi_4_dfm_mx0w0[23:0];
  assign attention_round_qr_39_16_lpi_4_dfm_mx1_23_7 = MUX_v_17_2_2((z_out_14_23_0[23:7]),
      (attention_round_qr_39_16_lpi_4_dfm_mx0w0[23:7]), attention_round_acc_itm_40_1);
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl = conv_s2u_17_18(attention_round_qr_39_16_lpi_4_dfm_mx1_23_7)
      + 18'b000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl[17:0];
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_itm_17_1 = readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_nl);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2 = GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0
      + 3'b001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2 = nl_LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2[2:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1 = conv_u2u_2_3(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1)
      + 3'b011;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1 = nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1[2:0];
  assign nl_SF_LOOP_3_acc_63_cse_mx0w6 = conv_u2u_2_4(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[27]))
      + conv_u2u_3_4(signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28]));
  assign SF_LOOP_3_acc_63_cse_mx0w6 = nl_SF_LOOP_3_acc_63_cse_mx0w6[3:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_mux_tmp = MUX_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva[1:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva[3:2]), (LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva[5:4]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva[7:6]), APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0);
  assign nl_RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2 = ({reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1}) + 6'b000001;
  assign RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2 = nl_RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[5:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_mux_tmp = MUX_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva[1:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva[3:2]), (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva[5:4]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva[7:6]), CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0);
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2 = ({reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1})
      + 5'b00001;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2 = nl_APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2[4:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_1_cse_1
      = (LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs==2'b10);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2 = conv_u2s_4_5(LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0)
      + 5'b00001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2 = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2[4:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2 = conv_u2s_4_5(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4)
      + 5'b00001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2 = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2[4:0];
  assign nl_RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0 = conv_u2u_3_4(z_out_35[3:1])
      + conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0);
  assign RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0 = nl_RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0[3:0];
  assign nl_GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2 = conv_u2s_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0)
      + 4'b0001;
  assign GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2 = nl_GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2 = conv_u2s_3_4(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0)
      + 4'b0001;
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2 = nl_APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3:0];
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5
      = conv_u2u_4_5({3'b111 , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[5])}) + 5'b00001;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5
      = nl_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_APPLY_ROTARY_POS_EMB_LOOP_6_cosval_conc_2_9_5[4:0];
  assign nl_CACHE_UPDATE_LOOP_3_qif_acc_4_nl = conv_s2s_4_5({1'b1 , (~ APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0)})
      + conv_u2s_4_5({GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva , 1'b1});
  assign CACHE_UPDATE_LOOP_3_qif_acc_4_nl = nl_CACHE_UPDATE_LOOP_3_qif_acc_4_nl[4:0];
  assign nl_CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1 = conv_s2s_5_6(CACHE_UPDATE_LOOP_3_qif_acc_4_nl)
      + conv_u2s_3_6(z_out_34_2_0);
  assign CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1 = nl_CACHE_UPDATE_LOOP_3_qif_acc_5_sdt_1[5:0];
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl = conv_s2s_4_5({1'b1 , (~ GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0)})
      + conv_u2s_4_5({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1
      , 1'b1});
  assign CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl = nl_CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl[4:0];
  assign nl_CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1 = conv_s2s_5_6(CACHE_UPDATE_LOOP_3_1_qif_acc_4_nl)
      + conv_u2s_3_6(z_out_36_2_0);
  assign CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1 = nl_CACHE_UPDATE_LOOP_3_1_qif_acc_5_sdt_1[5:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_19_nl = conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0)
      + conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[5:3]);
  assign GEMM_3D_FLOAT_LOOP_4_acc_19_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_19_nl[3:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_15_nl = APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva
      + conv_u2u_2_6(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd);
  assign GEMM_3D_FLOAT_LOOP_4_acc_15_nl = nl_GEMM_3D_FLOAT_LOOP_4_acc_15_nl[5:0];
  assign nl_GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1 = conv_u2u_8_9({GEMM_3D_FLOAT_LOOP_4_acc_19_nl
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[2:0]) , 1'b0}) + conv_u2u_6_9(GEMM_3D_FLOAT_LOOP_4_acc_15_nl);
  assign GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1 = nl_GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1[8:0];
  assign nl_SF_LOOP_3_acc_64_ncse_1 = conv_u2u_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[29])
      + conv_u2u_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]);
  assign SF_LOOP_3_acc_64_ncse_1 = nl_SF_LOOP_3_acc_64_ncse_1[1:0];
  assign nl_SF_LOOP_3_mul_8_nl = (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[4:3]) *
      16'b1000100100110001;
  assign SF_LOOP_3_mul_8_nl = nl_SF_LOOP_3_mul_8_nl[16:0];
  assign nl_SF_LOOP_3_acc_11_itm_1 = conv_s2s_17_18({reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd
      , 3'b000 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd , 3'b000 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd
      , 2'b00 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd , 2'b00 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd
      , 1'b0 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}) + conv_u2s_17_18(SF_LOOP_3_mul_8_nl);
  assign SF_LOOP_3_acc_11_itm_1 = nl_SF_LOOP_3_acc_11_itm_1[17:0];
  assign nl_SF_LOOP_3_mul_15_itm_1 = (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[34:33])
      * 16'b1001110000100111;
  assign SF_LOOP_3_mul_15_itm_1 = nl_SF_LOOP_3_mul_15_itm_1[16:0];
  assign nl_SF_LOOP_3_acc_32_nl = conv_u2u_17_18({SF_LOOP_3_mul_12_itm_16_15 , 2'b00
      , SF_LOOP_3_mul_19_itm_12_11 , 1'b0 , SF_LOOP_3_mul_19_itm_9_4 , 2'b00 , (SF_LOOP_3_mul_12_itm_3_0[1:0])})
      + conv_u2u_17_18(SF_LOOP_3_acc_5_psp_sva[16:0]);
  assign SF_LOOP_3_acc_32_nl = nl_SF_LOOP_3_acc_32_nl[17:0];
  assign nl_SF_LOOP_3_acc_34_nl = conv_u2s_18_19(SF_LOOP_3_acc_32_nl) + conv_s2s_18_19({(SF_LOOP_3_acc_5_psp_sva[17])
      , 1'b0 , (SF_LOOP_3_acc_5_psp_sva[17]) , 3'b000 , (SF_LOOP_3_acc_5_psp_sva[17])
      , 2'b00 , (SF_LOOP_3_acc_5_psp_sva[17]) , 2'b00 , (signext_2_1(SF_LOOP_3_acc_5_psp_sva[17]))
      , 3'b000 , (SF_LOOP_3_acc_5_psp_sva[17])});
  assign SF_LOOP_3_acc_34_nl = nl_SF_LOOP_3_acc_34_nl[18:0];
  assign nl_SF_LOOP_3_acc_6_psp_sva_1 = SF_LOOP_3_acc_34_nl + ({APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0
      , (SF_LOOP_3_acc_5_psp_sva[21:20]) , LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs
      , RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0 , RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1
      , (SF_LOOP_3_acc_5_psp_sva[20]) , (SF_LOOP_3_acc_5_psp_sva[20]) , SF_LOOP_3_acc_93_psp});
  assign SF_LOOP_3_acc_6_psp_sva_1 = nl_SF_LOOP_3_acc_6_psp_sva_1[18:0];
  assign nl_SF_LOOP_3_acc_7_psp_sva_1 = SF_LOOP_3_acc_35_itm + ({(SF_LOOP_3_acc_6_psp_sva_18_17[0])
      , 1'b0 , (SF_LOOP_3_acc_6_psp_sva_18_17[0]) , 3'b000 , (SF_LOOP_3_acc_6_psp_sva_18_17[0])
      , 2'b00 , (SF_LOOP_3_acc_6_psp_sva_18_17[0]) , 2'b00 , (signext_2_1(SF_LOOP_3_acc_6_psp_sva_18_17[0]))
      , 3'b000 , (SF_LOOP_3_acc_6_psp_sva_18_17[0])});
  assign SF_LOOP_3_acc_7_psp_sva_1 = nl_SF_LOOP_3_acc_7_psp_sva_1[17:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1 = conv_s2u_2_3(z_out_8[1:0])
      + conv_s2u_2_3(z_out_17[5:4]) + conv_u2u_1_3(~ (z_out_17[3]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1 = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1[2:0];
  assign nl_attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0 = (~ (rms_norm_384_1_val_acc_psp_sva_1[30:0]))
      + 31'b0000000000000000000000000000001;
  assign attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0 = nl_attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0[30:0];
  assign attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx1_30_1 = MUX_v_30_2_2((rms_norm_384_1_val_acc_psp_sva_1[30:1]),
      (attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0[30:1]), rms_norm_384_1_val_acc_psp_sva_1[31]);
  assign nl_rms_norm_384_1_val_acc_psp_sva_1 = ({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]))}) + conv_s2s_31_32(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm)
      + conv_s2s_30_32(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm);
  assign rms_norm_384_1_val_acc_psp_sva_1 = nl_rms_norm_384_1_val_acc_psp_sva_1[31:0];
  assign nl_attention_abs_6_mux_2 = conv_u2s_39_40(~ (RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[38:0]))
      + 40'b0000000000000000000000000000000000000001;
  assign attention_abs_6_mux_2 = nl_attention_abs_6_mux_2[39:0];
  assign nl_attention_abs_5_qr_sva_1 = conv_u2s_39_40(~ (attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d[38:0]))
      + 40'b0000000000000000000000000000000000000001;
  assign attention_abs_5_qr_sva_1 = nl_attention_abs_5_qr_sva_1[39:0];
  assign RMS_NORM_LOOP_2_2_and_4_ssc_1 = (attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d[39])
      & (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign RMS_NORM_LOOP_2_2_and_1_ssc_1 = (~ QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs)
      & CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  assign RMS_NORM_LOOP_2_2_and_6_ssc_1 = (RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[39])
      & RMS_NORM_LOOP_2_2_and_2_m1c_1;
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_nor_ssc_1 = ~((attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d[39])
      | CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign RMS_NORM_LOOP_2_2_and_5_ssc_1 = (~ (RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[39]))
      & RMS_NORM_LOOP_2_2_and_2_m1c_1;
  assign RMS_NORM_LOOP_2_2_and_2_m1c_1 = QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs
      & CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm;
  assign nl_attention_max_attn_fixed_t_1_acc_nl = conv_s2u_40_41({(~ QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_39)
      , (~ QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_38_0)}) + 41'b00000000000000000000000000000000000000001;
  assign attention_max_attn_fixed_t_1_acc_nl = nl_attention_max_attn_fixed_t_1_acc_nl[40:0];
  assign attention_max_attn_fixed_t_1_acc_itm_40_1 = readslicef_41_1_40(attention_max_attn_fixed_t_1_acc_nl);
  assign nl_attention_round_1_qr_39_16_lpi_4_dfm_mx0w0 = conv_u2s_23_24({(reg_attention_round_a_cse_slc[2:0])
      , (RMS_NORM_LOOP_2_mul_1_itm[51:32])}) + conv_u2s_1_24(RMS_NORM_LOOP_2_mul_1_itm[31]);
  assign attention_round_1_qr_39_16_lpi_4_dfm_mx0w0 = nl_attention_round_1_qr_39_16_lpi_4_dfm_mx0w0[23:0];
  assign attention_round_1_qr_39_16_lpi_4_dfm_mx1_23_7 = MUX_v_17_2_2((z_out_14_23_0[23:7]),
      (attention_round_1_qr_39_16_lpi_4_dfm_mx0w0[23:7]), attention_round_1_acc_itm_40_1);
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl = conv_s2u_17_18(attention_round_1_qr_39_16_lpi_4_dfm_mx1_23_7)
      + 18'b000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl[17:0];
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_itm_17_1 = readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_nl);
  assign INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm_1 = ~((SF_LOOP_3_acc_17_itm_8_0!=9'b000000000));
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_2_nl = ({GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt}) + conv_u2u_2_7(INIT_2D_MEM_LOOP_2_2_acc_itm[8:7]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_2_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_2_nl[6:0];
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7
      = conv_u2u_7_9(LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_acc_2_nl) + conv_u2u_8_9({GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt , 1'b0});
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7
      = nl_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_conc_2_15_7[8:0];
  assign nl_attention_round_1_acc_nl = conv_s2u_40_41({(~ reg_attention_round_a_cse_slc)
      , (~ (RMS_NORM_LOOP_2_mul_1_itm[51:16]))}) + 41'b00000000000000000000000000000000000000001;
  assign attention_round_1_acc_nl = nl_attention_round_1_acc_nl[40:0];
  assign attention_round_1_acc_itm_40_1 = readslicef_41_1_40(attention_round_1_acc_nl);
  assign nl_SOFTMAX_LOOP_3_acc_3_nl = conv_s2u_40_41(INIT_2D_MEM_LOOP_2_1_asn_psp)
      - conv_s2u_40_41(attention_5_1_384_384_8_48_attn_weights_rsci_q_d);
  assign SOFTMAX_LOOP_3_acc_3_nl = nl_SOFTMAX_LOOP_3_acc_3_nl[40:0];
  assign SOFTMAX_LOOP_3_acc_3_itm_40_1 = readslicef_41_1_40(SOFTMAX_LOOP_3_acc_3_nl);
  assign CACHE_UPDATE_LOOP_1_and_cse = (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3])
      & (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3]);
  assign nl_attention_round_acc_nl = conv_s2u_40_41({(~ reg_attention_round_a_cse_slc)
      , (~ (RMS_NORM_LOOP_2_mul_1_itm[51:16]))}) + 41'b00000000000000000000000000000000000000001;
  assign attention_round_acc_nl = nl_attention_round_acc_nl[40:0];
  assign attention_round_acc_itm_40_1 = readslicef_41_1_40(attention_round_acc_nl);
  assign or_tmp_5 = (~ (fsm_output[8])) | (fsm_output[4]);
  assign mux_tmp_28 = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[3]);
  assign or_tmp_24 = (fsm_output[4:3]!=2'b10);
  assign and_dcpl_12 = ~((fsm_output[8:7]!=2'b00));
  assign nand_78_cse = ~((fsm_output[4:3]==2'b11));
  assign or_tmp_26 = ~(nand_78_cse & (fsm_output[5]));
  assign not_tmp_35 = ~((fsm_output[7]) & (fsm_output[5]));
  assign or_tmp_30 = (fsm_output[7]) | (~ (fsm_output[5]));
  assign or_tmp_32 = (fsm_output[7]) | (fsm_output[5]);
  assign or_55_cse = (fsm_output[8:6]!=3'b011);
  assign or_58_cse = (fsm_output[8:5]!=4'b0010);
  assign and_dcpl_25 = (fsm_output[1:0]==2'b10);
  assign and_dcpl_29 = (fsm_output[8:7]==2'b01);
  assign and_dcpl_39 = (~ (fsm_output[8])) & (fsm_output[6]);
  assign or_129_cse = (fsm_output[4]) | (~ (fsm_output[7])) | (~ (fsm_output[6]))
      | (fsm_output[8]);
  assign nand_88_cse = ~((fsm_output[4]) & (fsm_output[7]) & (fsm_output[6]) & (~
      (fsm_output[8])));
  assign nand_89_cse = ~((fsm_output[6]) & (fsm_output[8]));
  assign mux_tmp_125 = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[4]);
  assign or_164_cse = (fsm_output[2]) | (fsm_output[1]) | (fsm_output[0]) | (fsm_output[8]);
  assign or_170_cse = (~ (fsm_output[0])) | (fsm_output[8]);
  assign mux_tmp_167 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[4]);
  assign mux_tmp_171 = MUX_s_1_2_2((~ (fsm_output[6])), (fsm_output[6]), fsm_output[5]);
  assign or_216_cse = (fsm_output[6:5]!=2'b10);
  assign mux_185_cse = MUX_s_1_2_2((~ (fsm_output[4])), (fsm_output[4]), fsm_output[7]);
  assign or_231_cse = (fsm_output[7]) | (fsm_output[4]);
  assign nor_tmp_54 = (fsm_output[7:6]==2'b11);
  assign nor_238_cse = ~((fsm_output[7:6]!=2'b10));
  assign mux_tmp_237 = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), fsm_output[4]);
  assign or_tmp_197 = (fsm_output[5:4]!=2'b10);
  assign and_578_cse = (fsm_output[3:2]==2'b11);
  assign mux_tmp_238 = MUX_s_1_2_2(or_tmp_197, mux_tmp_237, and_578_cse);
  assign mux_tmp_239 = MUX_s_1_2_2(or_tmp_197, mux_tmp_237, fsm_output[3]);
  assign and_dcpl_88 = (fsm_output[8:7]==2'b10);
  assign or_tmp_216 = (fsm_output[5:4]!=2'b01);
  assign mux_257_cse = MUX_s_1_2_2(or_tmp_197, or_tmp_216, fsm_output[3]);
  assign mux_tmp_259 = MUX_s_1_2_2(or_tmp_197, or_tmp_216, and_578_cse);
  assign nor_239_cse = ~((fsm_output[5:4]!=2'b00));
  assign or_tmp_229 = (fsm_output[7:6]!=2'b10);
  assign or_310_cse = (fsm_output[7:5]!=3'b011);
  assign and_dcpl_107 = nor_566_cse & nor_494_cse;
  assign and_dcpl_109 = ~((fsm_output[7:6]!=2'b00));
  assign and_dcpl_110 = and_dcpl_109 & (~ (fsm_output[8]));
  assign and_dcpl_111 = and_dcpl_110 & nor_239_cse;
  assign and_dcpl_116 = and_578_cse & and_692_cse;
  assign and_dcpl_117 = (fsm_output[5:4]==2'b11);
  assign and_dcpl_118 = and_dcpl_110 & and_dcpl_117;
  assign or_dcpl_89 = or_832_cse | (fsm_output[8]);
  assign or_dcpl_90 = or_dcpl_89 | or_tmp_216;
  assign or_tmp_233 = (fsm_output[7:6]!=2'b00);
  assign and_tmp_6 = (fsm_output[8]) & or_tmp_233;
  assign and_dcpl_120 = nor_566_cse & and_692_cse;
  assign and_dcpl_121 = and_dcpl_109 & (fsm_output[8]);
  assign and_dcpl_122 = and_dcpl_121 & and_dcpl_117;
  assign or_dcpl_93 = (fsm_output[3:2]!=2'b01);
  assign or_dcpl_96 = or_832_cse | (~ (fsm_output[8]));
  assign or_dcpl_100 = (fsm_output[3:2]!=2'b10);
  assign or_dcpl_101 = or_dcpl_100 | or_603_cse;
  assign mux_tmp_302 = MUX_s_1_2_2(or_tmp_24, mux_tmp_28, fsm_output[2]);
  assign and_dcpl_126 = (fsm_output[1:0]==2'b01);
  assign and_dcpl_127 = (fsm_output[3:2]==2'b10);
  assign and_dcpl_128 = and_dcpl_127 & and_dcpl_126;
  assign and_dcpl_129 = (fsm_output[7:6]==2'b10);
  assign and_dcpl_131 = and_dcpl_129 & (fsm_output[8]) & nor_239_cse;
  assign and_dcpl_133 = ~((fsm_output[8]) | (fsm_output[5]));
  assign and_dcpl_134 = and_dcpl_109 & and_dcpl_133;
  assign and_dcpl_137 = (fsm_output[7:6]==2'b01);
  assign and_dcpl_138 = and_dcpl_137 & (~ (fsm_output[8]));
  assign and_dcpl_139 = and_dcpl_138 & nor_239_cse;
  assign and_dcpl_140 = and_dcpl_139 & and_dcpl_107;
  assign and_662_cse = (fsm_output[3:1]==3'b111);
  assign mux_315_nl = MUX_s_1_2_2(nor_566_cse, and_578_cse, fsm_output[1]);
  assign mux_316_nl = MUX_s_1_2_2(mux_315_nl, and_662_cse, fsm_output[0]);
  assign and_dcpl_144 = (~ mux_316_nl) & (fsm_output[6]) & and_dcpl_12 & nor_239_cse;
  assign and_dcpl_146 = and_dcpl_109 & (fsm_output[8]) & (~ (fsm_output[5]));
  assign and_dcpl_149 = and_dcpl_127 & and_dcpl_25;
  assign and_dcpl_152 = (fsm_output[5:4]==2'b01);
  assign and_dcpl_154 = and_dcpl_110 & and_dcpl_152 & and_dcpl_128;
  assign and_dcpl_156 = and_dcpl_121 & and_dcpl_152 & and_dcpl_149;
  assign and_dcpl_157 = (fsm_output[5:4]==2'b10);
  assign and_dcpl_158 = and_dcpl_138 & and_dcpl_157;
  assign and_dcpl_159 = and_dcpl_158 & and_dcpl_120;
  assign or_tmp_260 = (fsm_output[7:5]!=3'b100);
  assign or_367_cse = (fsm_output[4:2]!=3'b000);
  assign mux_tmp_332 = MUX_s_1_2_2(or_tmp_260, or_310_cse, or_367_cse);
  assign or_366_nl = (~((fsm_output[4:2]!=3'b000))) | (fsm_output[7:5]!=3'b011);
  assign mux_tmp_333 = MUX_s_1_2_2(mux_tmp_332, or_366_nl, fsm_output[1]);
  assign and_dcpl_160 = ~(mux_tmp_333 | (fsm_output[8]));
  assign and_dcpl_161 = (fsm_output[3:2]==2'b01);
  assign and_dcpl_162 = and_dcpl_161 & and_dcpl_25;
  assign and_dcpl_163 = and_dcpl_137 & (fsm_output[8]);
  assign and_dcpl_164 = and_dcpl_163 & and_dcpl_157;
  assign or_tmp_276 = nor_392_cse | (fsm_output[7:5]!=3'b011);
  assign mux_tmp_338 = MUX_s_1_2_2(or_tmp_260, or_310_cse, or_1215_cse);
  assign mux_339_nl = MUX_s_1_2_2(mux_tmp_338, or_tmp_276, fsm_output[2]);
  assign mux_tmp_340 = MUX_s_1_2_2(mux_339_nl, mux_tmp_332, fsm_output[1]);
  assign and_dcpl_167 = and_578_cse & and_dcpl_25;
  assign and_dcpl_169 = nor_tmp_54 & (~ (fsm_output[8]));
  assign and_dcpl_170 = and_dcpl_169 & and_dcpl_152;
  assign mux_tmp_344 = MUX_s_1_2_2(or_tmp_197, mux_tmp_237, and_662_cse);
  assign mux_tmp_348 = MUX_s_1_2_2(mux_tmp_239, mux_257_cse, fsm_output[2]);
  assign mux_tmp_350 = MUX_s_1_2_2(mux_tmp_259, mux_tmp_348, fsm_output[1]);
  assign or_391_cse = (fsm_output[4:1]!=4'b0000);
  assign mux_354_nl = MUX_s_1_2_2(or_tmp_260, or_310_cse, or_391_cse);
  assign mux_355_nl = MUX_s_1_2_2(mux_tmp_333, mux_354_nl, fsm_output[0]);
  assign and_dcpl_174 = ~(mux_355_nl | (fsm_output[8]));
  assign and_dcpl_175 = and_dcpl_161 & nor_494_cse;
  assign and_dcpl_176 = and_dcpl_122 & and_dcpl_175;
  assign or_tmp_283 = (fsm_output[6:5]!=2'b01);
  assign mux_tmp_356 = MUX_s_1_2_2(or_216_cse, or_tmp_283, fsm_output[4]);
  assign and_666_nl = or_392_cse & (fsm_output[4]);
  assign mux_tmp_358 = MUX_s_1_2_2(or_216_cse, or_tmp_283, and_666_nl);
  assign and_dcpl_182 = and_dcpl_127 & nor_494_cse;
  assign not_tmp_240 = MUX_s_1_2_2((fsm_output[1]), (~ (fsm_output[1])), fsm_output[0]);
  assign or_dcpl_111 = or_tmp_233 | (fsm_output[8]);
  assign mux_tmp_373 = MUX_s_1_2_2((~ (fsm_output[5])), (fsm_output[5]), and_696_cse);
  assign and_dcpl_185 = and_dcpl_129 & (~ (fsm_output[8]));
  assign mux_375_nl = MUX_s_1_2_2((fsm_output[5]), (~ (fsm_output[5])), or_391_cse);
  assign nor_347_nl = ~((~((fsm_output[4:1]!=4'b0000))) | (fsm_output[5]));
  assign mux_376_nl = MUX_s_1_2_2(mux_375_nl, nor_347_nl, fsm_output[0]);
  assign and_dcpl_186 = mux_376_nl & and_dcpl_185;
  assign and_dcpl_188 = and_578_cse & and_dcpl_126;
  assign and_dcpl_189 = and_dcpl_185 & and_dcpl_157;
  assign and_dcpl_190 = and_dcpl_189 & and_dcpl_188;
  assign and_dcpl_196 = and_dcpl_189 & and_dcpl_128;
  assign and_dcpl_197 = and_dcpl_189 & and_dcpl_149;
  assign and_dcpl_201 = and_dcpl_152 & (fsm_output[3]);
  assign and_dcpl_204 = and_dcpl_163 & and_dcpl_152;
  assign not_tmp_245 = ~((fsm_output[1]) & (fsm_output[5]));
  assign and_dcpl_208 = and_dcpl_169 & and_dcpl_117;
  assign and_dcpl_210 = nor_566_cse & and_dcpl_126;
  assign and_dcpl_211 = and_dcpl_122 & and_dcpl_210;
  assign and_dcpl_212 = and_dcpl_121 & nor_239_cse;
  assign and_dcpl_213 = and_dcpl_212 & and_dcpl_210;
  assign and_dcpl_214 = and_dcpl_121 & and_dcpl_157;
  assign and_dcpl_215 = and_dcpl_214 & and_dcpl_167;
  assign and_dcpl_217 = (fsm_output[4]) & (fsm_output[2]);
  assign and_dcpl_218 = (~ (fsm_output[8])) & (fsm_output[5]);
  assign or_tmp_314 = (fsm_output[1]) | (~ (fsm_output[3]));
  assign or_tmp_315 = (~ (fsm_output[1])) | (fsm_output[3]);
  assign and_dcpl_227 = and_dcpl_208 & and_dcpl_128;
  assign and_dcpl_228 = and_dcpl_208 & and_dcpl_162;
  assign or_dcpl_116 = or_dcpl_100 | or_1213_cse;
  assign and_dcpl_233 = and_dcpl_185 & and_dcpl_117;
  assign and_dcpl_234 = and_dcpl_233 & and_dcpl_188;
  assign and_dcpl_238 = and_dcpl_170 & and_dcpl_210;
  assign and_dcpl_239 = and_dcpl_127 & and_692_cse;
  assign and_dcpl_240 = and_dcpl_170 & and_dcpl_239;
  assign and_dcpl_241 = and_dcpl_233 & and_dcpl_116;
  assign and_dcpl_242 = and_dcpl_169 & nor_239_cse;
  assign and_dcpl_243 = and_dcpl_242 & and_dcpl_162;
  assign and_dcpl_245 = and_dcpl_170 & and_dcpl_162;
  assign and_dcpl_246 = and_dcpl_170 & and_dcpl_182;
  assign and_dcpl_247 = and_dcpl_170 & and_dcpl_188;
  assign and_dcpl_248 = nor_566_cse & and_dcpl_25;
  assign and_dcpl_253 = (fsm_output[2:1]==2'b10);
  assign and_dcpl_254 = and_dcpl_253 & (~ (fsm_output[0]));
  assign and_dcpl_257 = and_dcpl_185 & and_dcpl_117 & (~ (fsm_output[3]));
  assign and_dcpl_263 = and_dcpl_233 & and_dcpl_182;
  assign and_dcpl_270 = (fsm_output[2:1]==2'b01);
  assign and_dcpl_271 = and_dcpl_270 & (fsm_output[0]);
  assign nor_tmp_104 = (fsm_output[0]) & (fsm_output[2]);
  assign and_dcpl_282 = and_dcpl_161 & and_dcpl_126;
  assign and_dcpl_284 = and_dcpl_189 & and_dcpl_182;
  assign and_dcpl_285 = ~((fsm_output[8]) | (fsm_output[2]));
  assign or_472_nl = (fsm_output[7:4]!=4'b0110);
  assign mux_tmp_401 = MUX_s_1_2_2(or_472_nl, or_1054_cse, fsm_output[3]);
  assign or_tmp_353 = ~((fsm_output[2]) & (fsm_output[3]) & (fsm_output[4]) & (~
      (fsm_output[7])) & (fsm_output[6]));
  assign or_476_nl = (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]) | (~ (fsm_output[7]))
      | (fsm_output[6]);
  assign mux_tmp_403 = MUX_s_1_2_2(or_tmp_353, or_476_nl, fsm_output[1]);
  assign and_dcpl_289 = and_dcpl_161 & and_692_cse;
  assign and_dcpl_290 = and_dcpl_138 & and_dcpl_152;
  assign and_dcpl_291 = and_dcpl_290 & and_dcpl_289;
  assign or_tmp_355 = (fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]) | (fsm_output[8])
      | (~ (fsm_output[7])) | (fsm_output[6]);
  assign and_dcpl_297 = and_578_cse & nor_494_cse;
  assign and_dcpl_298 = and_dcpl_290 & and_dcpl_297;
  assign and_dcpl_299 = and_dcpl_185 & nor_239_cse;
  assign and_dcpl_303 = and_dcpl_133 & (fsm_output[0]);
  assign and_dcpl_306 = and_dcpl_189 & and_dcpl_175;
  assign or_tmp_370 = (fsm_output[7:3]!=5'b10100);
  assign and_dcpl_311 = and_dcpl_290 & and_dcpl_167;
  assign or_506_nl = (~ (LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_mux_tmp[0])) |
      (fsm_output[2]);
  assign or_505_nl = (LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_mux_tmp[0]) | (fsm_output[2]);
  assign mux_tmp_417 = MUX_s_1_2_2(or_506_nl, or_505_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_mux_tmp[1]);
  assign nand_tmp_21 = ~((fsm_output[1]) & (~ mux_tmp_417));
  assign mux_tmp_418 = MUX_s_1_2_2((~ (fsm_output[2])), mux_tmp_417, fsm_output[1]);
  assign and_dcpl_316 = and_dcpl_290 & and_dcpl_149;
  assign and_dcpl_317 = and_dcpl_290 & and_dcpl_239;
  assign or_tmp_381 = (fsm_output[7:3]!=5'b01100);
  assign and_dcpl_331 = and_dcpl_131 & and_dcpl_289;
  assign and_dcpl_342 = and_dcpl_111 & and_dcpl_210;
  assign or_tmp_407 = (~ (fsm_output[5])) | (fsm_output[8]);
  assign or_tmp_408 = (fsm_output[8]) | (~ (fsm_output[2]));
  assign or_tmp_410 = (~ (fsm_output[5])) | (fsm_output[8]) | (~ (fsm_output[2]));
  assign and_dcpl_349 = (~ mux_257_cse) & and_dcpl_137 & and_dcpl_285 & and_692_cse;
  assign and_dcpl_350 = and_dcpl_189 & and_dcpl_167;
  assign and_dcpl_351 = and_dcpl_242 & and_dcpl_107;
  assign and_dcpl_354 = and_dcpl_170 & and_dcpl_297;
  assign and_dcpl_355 = and_dcpl_208 & and_dcpl_289;
  assign and_dcpl_360 = and_dcpl_290 & and_dcpl_162;
  assign and_dcpl_361 = and_dcpl_242 & and_dcpl_289;
  assign and_dcpl_366 = (fsm_output[5]) & (fsm_output[3]);
  assign mux_506_nl = MUX_s_1_2_2(or_21_cse, or_tmp_5, fsm_output[2]);
  assign and_dcpl_368 = (~ mux_506_nl) & and_dcpl_109;
  assign and_dcpl_369 = and_dcpl_368 & and_dcpl_366 & and_dcpl_25;
  assign and_dcpl_370 = and_dcpl_189 & and_dcpl_120;
  assign not_tmp_327 = ~((fsm_output[3]) & (fsm_output[8]));
  assign and_dcpl_374 = and_dcpl_189 & and_578_cse & not_tmp_240;
  assign or_1199_nl = (fsm_output[1]) | (~ (fsm_output[2])) | (fsm_output[4]);
  assign or_1200_nl = (~ (fsm_output[1])) | (fsm_output[2]) | (~ (fsm_output[4]));
  assign mux_518_nl = MUX_s_1_2_2(or_1199_nl, or_1200_nl, fsm_output[0]);
  assign and_dcpl_379 = (~(mux_518_nl | (fsm_output[6]))) & and_dcpl_29 & (fsm_output[5])
      & (~ (fsm_output[3]));
  assign xnor_cse = ~((fsm_output[8]) ^ (fsm_output[0]));
  assign and_dcpl_393 = nor_239_cse & (fsm_output[3]) & and_dcpl_270 & and_dcpl_109
      & xnor_cse;
  assign or_643_nl = (fsm_output[8]) | not_tmp_35;
  assign or_642_nl = ((fsm_output[8:7]==2'b11)) | (fsm_output[5]);
  assign mux_tmp_528 = MUX_s_1_2_2(or_643_nl, or_642_nl, fsm_output[6]);
  assign or_tmp_510 = (fsm_output[8]) | (~ or_tmp_30);
  assign mux_40_nl = MUX_s_1_2_2((fsm_output[5]), (~ (fsm_output[5])), fsm_output[7]);
  assign mux_tmp_534 = MUX_s_1_2_2(mux_40_nl, or_tmp_32, fsm_output[8]);
  assign mux_tmp_542 = MUX_s_1_2_2(not_tmp_35, or_tmp_32, or_657_cse);
  assign or_61_nl = ((fsm_output[6]) & (fsm_output[8])) | (fsm_output[7]) | (fsm_output[5]);
  assign mux_tmp_543 = MUX_s_1_2_2(or_61_nl, mux_tmp_542, fsm_output[2]);
  assign mux_544_nl = MUX_s_1_2_2((fsm_output[7]), (~ or_tmp_30), fsm_output[8]);
  assign nand_26_nl = ~((fsm_output[6]) & mux_544_nl);
  assign or_656_nl = (~ (fsm_output[6])) | (fsm_output[8]) | not_tmp_35;
  assign mux_tmp_545 = MUX_s_1_2_2(nand_26_nl, or_656_nl, fsm_output[2]);
  assign or_tmp_547 = (~ (fsm_output[3])) | (fsm_output[4]) | (fsm_output[6]);
  assign or_682_nl = (fsm_output[3]) | (~ mux_tmp_167);
  assign mux_575_cse = MUX_s_1_2_2(or_tmp_547, or_682_nl, fsm_output[2]);
  assign and_dcpl_397 = (~ mux_575_cse) & (fsm_output[7]) & and_dcpl_218 & nor_494_cse;
  assign and_dcpl_398 = and_dcpl_29 & (fsm_output[5]);
  assign and_dcpl_400 = and_dcpl_398 & mux_tmp_167 & and_dcpl_188;
  assign mux_tmp_579 = MUX_s_1_2_2(or_tmp_229, or_832_cse, fsm_output[5]);
  assign and_678_nl = or_367_cse & (fsm_output[5]);
  assign mux_582_nl = MUX_s_1_2_2(or_tmp_229, or_832_cse, and_678_nl);
  assign mux_580_nl = MUX_s_1_2_2(or_tmp_229, mux_705_cse, fsm_output[5]);
  assign mux_581_nl = MUX_s_1_2_2(mux_580_nl, mux_tmp_579, or_367_cse);
  assign mux_583_nl = MUX_s_1_2_2(mux_582_nl, mux_581_nl, fsm_output[1]);
  assign and_679_nl = or_391_cse & (fsm_output[5]);
  assign mux_578_nl = MUX_s_1_2_2(or_tmp_229, or_832_cse, and_679_nl);
  assign mux_584_nl = MUX_s_1_2_2(mux_583_nl, mux_578_nl, fsm_output[0]);
  assign and_dcpl_409 = ~(mux_584_nl | (fsm_output[8]));
  assign and_dcpl_431 = and_dcpl_366 & (fsm_output[1]);
  assign and_dcpl_438 = ~((fsm_output[7]) | (fsm_output[5]));
  assign or_tmp_636 = nor_239_cse | (fsm_output[8]);
  assign nor_tmp_151 = (fsm_output[5]) & (fsm_output[8]);
  assign mux_tmp_649 = MUX_s_1_2_2(or_tmp_407, nor_tmp_151, fsm_output[4]);
  assign or_tmp_645 = (fsm_output[8:6]!=3'b001);
  assign mux_tmp_662 = MUX_s_1_2_2(or_tmp_645, or_733_cse, fsm_output[5]);
  assign mux_663_nl = MUX_s_1_2_2(or_832_cse, or_tmp_233, fsm_output[8]);
  assign nand_tmp_40 = ~((fsm_output[5]) & (~ mux_663_nl));
  assign or_786_nl = (fsm_output[8:6]!=3'b110);
  assign mux_tmp_665 = MUX_s_1_2_2(or_786_nl, or_tmp_645, or_1158_cse);
  assign mux_tmp_667 = MUX_s_1_2_2(or_832_cse, or_733_cse, fsm_output[5]);
  assign or_tmp_651 = (fsm_output[8:5]!=4'b0011);
  assign and_dcpl_445 = and_dcpl_242 & and_dcpl_128;
  assign or_dcpl_136 = (fsm_output[1:0]!=2'b10);
  assign or_dcpl_137 = or_dcpl_100 | or_dcpl_136;
  assign or_dcpl_138 = or_dcpl_111 | (~ and_dcpl_117);
  assign mux_684_cse = MUX_s_1_2_2((fsm_output[7]), or_832_cse, or_21_cse);
  assign mux_tmp_685 = MUX_s_1_2_2(or_833_cse, mux_684_cse, fsm_output[3]);
  assign or_tmp_705 = (fsm_output[3]) | (fsm_output[0]) | (~ (fsm_output[2]));
  assign or_tmp_727 = (fsm_output[1]) | (fsm_output[8]);
  assign or_tmp_729 = ~((fsm_output[7]) & (fsm_output[2]) & (fsm_output[0]) & (fsm_output[1])
      & (~ (fsm_output[8])));
  assign or_tmp_748 = (fsm_output[3]) | (~ (fsm_output[4])) | (~ (fsm_output[8]))
      | (fsm_output[7]);
  assign and_dcpl_454 = and_dcpl_242 & and_dcpl_239;
  assign or_915_nl = (fsm_output[3]) | (fsm_output[4]) | (fsm_output[6]);
  assign mux_tmp_790 = MUX_s_1_2_2(or_tmp_547, or_915_nl, fsm_output[2]);
  assign not_tmp_429 = ~((fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[6]));
  assign mux_tmp_803 = MUX_s_1_2_2(or_745_cse, or_791_cse, fsm_output[4]);
  assign mux_tmp_805 = MUX_s_1_2_2(nand_89_cse, or_657_cse, fsm_output[7]);
  assign or_957_nl = (fsm_output[1]) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (fsm_output[7]) | (~ (fsm_output[6]));
  assign mux_827_nl = MUX_s_1_2_2(or_tmp_381, or_tmp_370, fsm_output[1]);
  assign mux_828_nl = MUX_s_1_2_2(or_957_nl, mux_827_nl, fsm_output[0]);
  assign and_dcpl_461 = (~ mux_828_nl) & and_dcpl_285;
  assign and_dcpl_462 = and_dcpl_158 & and_dcpl_107;
  assign or_tmp_841 = (~ (fsm_output[4])) | (fsm_output[6]) | (~ (fsm_output[7]));
  assign or_tmp_859 = (fsm_output[3]) | (~ (fsm_output[1])) | (~ (fsm_output[7]))
      | (fsm_output[2]);
  assign and_dcpl_478 = and_dcpl_290 & and_dcpl_116;
  assign mux_906_nl = MUX_s_1_2_2(or_745_cse, or_733_cse, fsm_output[4]);
  assign nand_tmp_58 = ~((fsm_output[3]) & (~ mux_906_nl));
  assign or_tmp_895 = (~ (fsm_output[3])) | (fsm_output[4]) | (fsm_output[8]) | (~
      (fsm_output[7]));
  assign and_dcpl_482 = and_dcpl_39 & (~ (fsm_output[5])) & (fsm_output[3]);
  assign and_dcpl_488 = and_dcpl_233 & and_dcpl_120;
  assign and_dcpl_503 = and_dcpl_189 & and_dcpl_239;
  assign and_690_nl = (and_692_cse | (fsm_output[4:2]!=3'b000)) & (fsm_output[5]);
  assign mux_952_nl = MUX_s_1_2_2(or_tmp_229, or_832_cse, and_690_nl);
  assign and_dcpl_512 = ~(mux_952_nl | (fsm_output[8]));
  assign or_tmp_936 = ~((fsm_output[8:5]==4'b0111));
  assign or_tmp_937 = (fsm_output[8:5]!=4'b0101);
  assign mux_tmp_963 = MUX_s_1_2_2((~ (fsm_output[3])), (fsm_output[3]), fsm_output[2]);
  assign and_dcpl_518 = and_dcpl_129 & and_dcpl_218;
  assign or_tmp_953 = (fsm_output[3]) | (fsm_output[5]) | (~ (fsm_output[6]));
  assign nand_tmp_69 = ~((fsm_output[3]) & (~ mux_tmp_171));
  assign nand_tmp_70 = (fsm_output[3:2]!=2'b10) | mux_tmp_171;
  assign or_tmp_955 = (fsm_output[2]) | (~ (fsm_output[3])) | (fsm_output[5]) | (~
      (fsm_output[6]));
  assign or_tmp_958 = (fsm_output[2]) | (~ and_696_cse);
  assign and_dcpl_527 = and_dcpl_29 & (fsm_output[4:3]==2'b01);
  assign or_tmp_963 = (fsm_output[2]) | (fsm_output[5]) | (~ (fsm_output[6]));
  assign mux_990_nl = MUX_s_1_2_2(mux_tmp_171, or_216_cse, fsm_output[2]);
  assign mux_tmp_991 = MUX_s_1_2_2(mux_990_nl, or_tmp_963, fsm_output[1]);
  assign or_dcpl_169 = (~ nor_tmp_54) | (fsm_output[8]) | or_1158_cse;
  assign or_dcpl_181 = or_tmp_233 | (~ (fsm_output[8]));
  assign or_dcpl_185 = or_dcpl_181 | (~ and_dcpl_117);
  assign or_tmp_968 = nor_239_cse | (fsm_output[7:6]!=2'b01);
  assign mux_tmp_996 = MUX_s_1_2_2(mux_tmp_579, or_310_cse, fsm_output[4]);
  assign attention_5_1_384_384_8_48_attn_output_rsci_radr_d_mx0c1 = and_dcpl_208
      & and_dcpl_188;
  assign attention_5_1_384_384_8_48_attn_weights_rsci_radr_d_mx0c2 = and_dcpl_170
      & and_dcpl_175;
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c6 = and_dcpl_158 & and_dcpl_248;
  assign and_733_nl = (fsm_output[1]) & (fsm_output[8]);
  assign nor_442_nl = ~((fsm_output[1]) | (fsm_output[8]));
  assign mux_576_nl = MUX_s_1_2_2(and_733_nl, nor_442_nl, fsm_output[0]);
  assign RMS_NORM_LOOP_2_2_dfr_sva_mx0c0 = mux_576_nl & and_dcpl_109 & nor_239_cse
      & and_dcpl_127;
  assign RMS_NORM_LOOP_2_2_dfr_sva_mx0c2 = and_dcpl_368 & and_dcpl_366 & and_dcpl_126;
  assign nor_443_nl = ~((fsm_output[3]) | (~ (fsm_output[8])));
  assign nor_444_nl = ~((~ (fsm_output[3])) | (fsm_output[8]));
  assign mux_577_nl = MUX_s_1_2_2(nor_443_nl, nor_444_nl, fsm_output[2]);
  assign RMS_NORM_LOOP_2_2_dfr_sva_mx0c3 = mux_577_nl & and_dcpl_109 & and_dcpl_117
      & and_692_cse;
  assign nor_450_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[4])) | (fsm_output[8])
      | (fsm_output[6]));
  assign nor_451_nl = ~((~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[8]))
      | (fsm_output[6]));
  assign mux_597_nl = MUX_s_1_2_2(nor_450_nl, nor_451_nl, fsm_output[2]);
  assign and_736_nl = (fsm_output[1]) & mux_597_nl;
  assign nor_452_nl = ~((fsm_output[4:1]!=4'b0010) | nand_89_cse);
  assign mux_598_nl = MUX_s_1_2_2(and_736_nl, nor_452_nl, fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1
      = mux_598_nl & (~ (fsm_output[7])) & (fsm_output[5]);
  assign mux_168_nl = MUX_s_1_2_2(mux_tmp_167, nor_287_cse, fsm_output[1]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2
      = mux_168_nl & and_dcpl_29 & and_dcpl_366 & nor_tmp_104;
  assign nor_454_nl = ~((~ (fsm_output[1])) | (fsm_output[3]) | (fsm_output[4]));
  assign nor_455_nl = ~((fsm_output[1]) | (~ and_696_cse));
  assign mux_600_nl = MUX_s_1_2_2(nor_454_nl, nor_455_nl, fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c4
      = mux_600_nl & (fsm_output[6]) & and_dcpl_29 & (~ (fsm_output[5])) & (fsm_output[2]);
  assign nor_456_nl = ~((fsm_output[2]) | (~ (fsm_output[3])) | (fsm_output[5]));
  assign nor_457_nl = ~((~ (fsm_output[2])) | (fsm_output[3]) | (~ (fsm_output[5])));
  assign mux_601_nl = MUX_s_1_2_2(nor_456_nl, nor_457_nl, fsm_output[1]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c6
      = mux_601_nl & (fsm_output[6]) & and_dcpl_29 & (fsm_output[4]) & (~ (fsm_output[0]));
  assign nor_514_cse = ~((~ CACHE_UPDATE_LOOP_1_and_cse) | (fsm_output[4]));
  assign or_1222_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (~ (fsm_output[2]))
      | (~ (fsm_output[6])) | (fsm_output[5]) | (~((GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3])
      & (fsm_output[7])));
  assign nor_556_nl = ~((fsm_output[7:5]!=3'b010));
  assign nor_521_nl = ~((fsm_output[6]) | not_tmp_35);
  assign mux_835_nl = MUX_s_1_2_2(nor_556_nl, nor_521_nl, fsm_output[2]);
  assign nand_228_nl = ~(nor_179_cse & mux_835_nl);
  assign mux_836_nl = MUX_s_1_2_2(or_1222_nl, nand_228_nl, fsm_output[3]);
  assign or_969_nl = (~ (fsm_output[4])) | (fsm_output[2]) | (fsm_output[6]) | not_tmp_35;
  assign or_967_nl = (~(CACHE_UPDATE_LOOP_1_and_cse | (~ (fsm_output[2])))) | (fsm_output[6])
      | not_tmp_35;
  assign or_965_nl = (fsm_output[2]) | (~((fsm_output[7:5]==3'b111)));
  assign mux_833_nl = MUX_s_1_2_2(or_967_nl, or_965_nl, fsm_output[4]);
  assign mux_834_nl = MUX_s_1_2_2(or_969_nl, mux_833_nl, fsm_output[0]);
  assign or_1223_nl = (fsm_output[3]) | mux_834_nl;
  assign mux_837_nl = MUX_s_1_2_2(mux_836_nl, or_1223_nl, fsm_output[1]);
  assign GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c0 = ~(mux_837_nl | (fsm_output[8]));
  assign and_778_nl = (fsm_output[1]) & (fsm_output[2]) & (fsm_output[4]) & (~ (fsm_output[5]))
      & (fsm_output[7]);
  assign nor_525_nl = ~((fsm_output[1]) | (fsm_output[2]) | (fsm_output[4]) | (~
      (fsm_output[5])) | (fsm_output[7]));
  assign mux_838_nl = MUX_s_1_2_2(and_778_nl, nor_525_nl, fsm_output[0]);
  assign GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1 = mux_838_nl & and_dcpl_39 &
      (~ (fsm_output[3]));
  assign mux_841_nl = MUX_s_1_2_2(or_tmp_283, nand_243_cse, fsm_output[4]);
  assign nor_527_nl = ~((fsm_output[3:1]!=3'b110) | mux_841_nl);
  assign nand_232_nl = ~((fsm_output[1]) & (fsm_output[4]) & (fsm_output[6]) & (~
      (fsm_output[5])));
  assign or_980_nl = (fsm_output[4]) | (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[3]) |
      (fsm_output[6:5]!=2'b10);
  assign or_979_nl = nor_514_cse | (fsm_output[6:5]!=2'b01);
  assign mux_839_nl = MUX_s_1_2_2(or_980_nl, or_979_nl, fsm_output[1]);
  assign mux_840_nl = MUX_s_1_2_2(nand_232_nl, mux_839_nl, fsm_output[2]);
  assign nor_528_nl = ~((fsm_output[3]) | mux_840_nl);
  assign mux_842_nl = MUX_s_1_2_2(nor_527_nl, nor_528_nl, fsm_output[0]);
  assign GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c2 = mux_842_nl & and_dcpl_29;
  assign or_992_cse = (fsm_output[2:1]!=2'b10);
  assign nor_529_nl = ~((fsm_output[4]) | (~ nor_tmp_54));
  assign mux_852_nl = MUX_s_1_2_2(nor_529_nl, nor_tmp_54, or_992_cse);
  assign nor_530_nl = ~((fsm_output[4]) | (~ (fsm_output[6])) | (fsm_output[7]));
  assign mux_849_nl = MUX_s_1_2_2((~ or_tmp_841), mux_857_cse, fsm_output[0]);
  assign mux_850_nl = MUX_s_1_2_2(nor_530_nl, mux_849_nl, fsm_output[1]);
  assign mux_851_nl = MUX_s_1_2_2(mux_850_nl, mux_857_cse, fsm_output[2]);
  assign mux_853_nl = MUX_s_1_2_2(mux_852_nl, mux_851_nl, fsm_output[5]);
  assign mux_855_nl = MUX_s_1_2_2((~ nor_tmp_54), or_832_cse, fsm_output[4]);
  assign mux_862_nl = MUX_s_1_2_2(nor_238_cse, nor_tmp_54, fsm_output[4]);
  assign mux_844_nl = MUX_s_1_2_2((~ mux_857_cse), or_tmp_841, or_603_cse);
  assign mux_846_nl = MUX_s_1_2_2((~ mux_862_nl), mux_844_nl, fsm_output[2]);
  assign mux_848_nl = MUX_s_1_2_2(mux_855_nl, mux_846_nl, fsm_output[5]);
  assign mux_854_nl = MUX_s_1_2_2((~ mux_853_nl), mux_848_nl, fsm_output[3]);
  assign GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c3 = mux_854_nl | (fsm_output[8]);
  assign mux_873_nl = MUX_s_1_2_2((fsm_output[2]), (~ (fsm_output[2])), fsm_output[7]);
  assign or_1014_nl = (~ (fsm_output[4])) | (~ (fsm_output[3])) | (fsm_output[1])
      | mux_873_nl;
  assign or_1012_nl = (fsm_output[3]) | (fsm_output[1]) | nand_224_cse;
  assign mux_872_nl = MUX_s_1_2_2(or_1012_nl, or_tmp_859, fsm_output[4]);
  assign mux_874_nl = MUX_s_1_2_2(or_1014_nl, mux_872_nl, fsm_output[0]);
  assign nand_240_nl = ~((fsm_output[6]) & (~ mux_874_nl));
  assign nor_519_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[7])) | (fsm_output[2]));
  assign nor_518_nl = ~((fsm_output[1]) | nand_224_cse);
  assign mux_870_nl = MUX_s_1_2_2(nor_519_nl, nor_518_nl, fsm_output[3]);
  assign nand_53_nl = ~((fsm_output[4]) & mux_870_nl);
  assign or_1006_nl = (fsm_output[3]) | (~((fsm_output[1]) & (fsm_output[7]) & (fsm_output[2])));
  assign mux_869_nl = MUX_s_1_2_2(or_tmp_859, or_1006_nl, fsm_output[4]);
  assign mux_871_nl = MUX_s_1_2_2(nand_53_nl, mux_869_nl, fsm_output[0]);
  assign or_1226_nl = (fsm_output[6]) | mux_871_nl;
  assign mux_875_nl = MUX_s_1_2_2(nand_240_nl, or_1226_nl, fsm_output[5]);
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0 = ~(mux_875_nl | (fsm_output[8]));
  assign nor_538_nl = ~((~ (fsm_output[5])) | (fsm_output[3]) | (~ (fsm_output[0]))
      | (fsm_output[2]));
  assign nor_539_nl = ~((fsm_output[5]) | (fsm_output[3]) | (fsm_output[0]) | (~
      (fsm_output[2])));
  assign mux_877_nl = MUX_s_1_2_2(nor_538_nl, nor_539_nl, fsm_output[7]);
  assign nand_241_nl = ~((~((fsm_output[4]) | (~ (fsm_output[6])))) & mux_877_nl);
  assign nor_540_nl = ~((fsm_output[0]) | (~ (fsm_output[2])));
  assign nor_541_nl = ~((~ (fsm_output[0])) | (fsm_output[2]));
  assign mux_876_nl = MUX_s_1_2_2(nor_540_nl, nor_541_nl, fsm_output[3]);
  assign nand_242_nl = ~((fsm_output[7:4]==4'b1011) & mux_876_nl);
  assign mux_878_nl = MUX_s_1_2_2(nand_241_nl, nand_242_nl, fsm_output[1]);
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c1 = ~(mux_878_nl | (fsm_output[8]));
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c3 = and_dcpl_170 & and_dcpl_248;
  assign CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5 = and_dcpl_208 & and_dcpl_248;
  assign mux_913_nl = MUX_s_1_2_2(and_dcpl_270, or_992_cse, fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0 = mux_913_nl & and_dcpl_137
      & and_dcpl_133 & and_696_cse;
  assign mux_940_nl = MUX_s_1_2_2(or_tmp_314, or_tmp_315, fsm_output[0]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm_mx0c1 = (~ mux_940_nl) & and_dcpl_129
      & and_dcpl_218 & (~ (fsm_output[4])) & (fsm_output[2]);
  assign nor_386_nl = ~((~ (fsm_output[1])) | (fsm_output[4]) | (fsm_output[5]));
  assign nor_387_nl = ~((fsm_output[1]) | (~ and_dcpl_117));
  assign mux_396_nl = MUX_s_1_2_2(nor_386_nl, nor_387_nl, fsm_output[0]);
  assign GEMM_3D_FLOAT_LOOP_3_or_3_cse = (mux_396_nl & (fsm_output[6]) & and_dcpl_29
      & nor_566_cse) | and_dcpl_240;
  assign and_352_nl = and_dcpl_118 & and_dcpl_188;
  assign input_rsci_d_d = MUX_v_40_2_2(({{10{strm_in_rsci_idat_mxwt[29]}}, strm_in_rsci_idat_mxwt}),
      RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva, and_352_nl);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_5_nl = MUX_v_3_2_2((INIT_2D_MEM_LOOP_2_2_acc_itm[8:6]),
      GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva, and_350_ssc);
  assign INIT_2D_MEM_LOOP_2_2_and_3_nl = MUX_v_3_2_2(3'b000, INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_5_nl,
      for_for_and_seb);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_6_nl = MUX_v_4_2_2((INIT_2D_MEM_LOOP_2_2_acc_itm[5:2]),
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt, and_350_ssc);
  assign INIT_2D_MEM_LOOP_2_2_and_5_nl = MUX_v_4_2_2(4'b0000, INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_6_nl,
      for_for_and_seb);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_7_nl = MUX_v_2_2_2((INIT_2D_MEM_LOOP_2_2_acc_itm[1:0]),
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0, and_350_ssc);
  assign INIT_2D_MEM_LOOP_2_2_and_6_nl = MUX_v_2_2_2(2'b00, INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_7_nl,
      for_for_and_seb);
  assign input_rsci_radr_d = {INIT_2D_MEM_LOOP_2_2_and_3_nl , INIT_2D_MEM_LOOP_2_2_and_5_nl
      , INIT_2D_MEM_LOOP_2_2_and_6_nl};
  assign nor_393_nl = ~((fsm_output[6:4]!=3'b011) | (nand_184_cse & (fsm_output[2])));
  assign nor_394_nl = ~((fsm_output[4]) | (fsm_output[5]) | (~((fsm_output[6]) &
      (fsm_output[2]))));
  assign mux_431_nl = MUX_s_1_2_2(nor_393_nl, nor_394_nl, fsm_output[0]);
  assign input_rsci_re_d_pff = mux_431_nl & and_dcpl_12 & (fsm_output[3]) & (fsm_output[1]);
  assign input_rsci_wadr_d = INIT_2D_MEM_LOOP_2_2_acc_itm;
  assign or_1207_nl = (fsm_output[5:3]!=3'b000);
  assign nand_186_nl = ~((fsm_output[5:3]==3'b111));
  assign mux_432_nl = MUX_s_1_2_2(or_1207_nl, nand_186_nl, fsm_output[2]);
  assign input_rsci_we_d_pff = (~(mux_432_nl | (fsm_output[6]))) & and_dcpl_12 &
      and_dcpl_126;
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_3_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[39:36]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_6_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[35:33]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_7_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[32:29]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_8_nl = MUX_s_1_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[28]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_9_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[27:25]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_10_nl = MUX_v_9_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[24:16]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_and_2_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      ({INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_3_nl , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_6_nl
      , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_7_nl , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_8_nl
      , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_9_nl , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_10_nl}),
      INIT_2D_MEM_LOOP_2_3_nor_seb);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_4_nl = MUX_v_16_2_2((INIT_2D_MEM_LOOP_2_1_asn_psp[15:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[15:0]),
      and_342_ssc);
  assign INIT_2D_MEM_LOOP_2_1_and_3_nl = MUX_v_16_2_2(16'b0000000000000000, INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_4_nl,
      INIT_2D_MEM_LOOP_2_3_nor_seb);
  assign output_rsci_d_d = {INIT_2D_MEM_LOOP_2_1_and_2_nl , INIT_2D_MEM_LOOP_2_1_and_3_nl};
  assign output_rsci_radr_d = MUX_v_9_2_2(INIT_2D_MEM_LOOP_2_2_acc_itm, SF_LOOP_3_acc_17_itm_8_0,
      and_dcpl_331);
  assign or_507_nl = (fsm_output[7:4]!=4'b1000);
  assign mux_423_nl = MUX_s_1_2_2(or_507_nl, or_1054_cse, fsm_output[3]);
  assign mux_424_nl = MUX_s_1_2_2(or_tmp_381, mux_423_nl, fsm_output[1]);
  assign output_rsci_re_d_pff = (~ mux_424_nl) & (fsm_output[8]) & (fsm_output[2])
      & (fsm_output[0]);
  assign mux_427_nl = MUX_s_1_2_2(or_310_cse, or_tmp_260, fsm_output[2]);
  assign and_336_nl = (~ mux_427_nl) & (fsm_output[8]) & nor_392_cse & and_dcpl_126;
  assign output_rsci_wadr_d = MUX_v_9_2_2(SF_LOOP_3_acc_17_itm_8_0, INIT_2D_MEM_LOOP_2_2_acc_itm,
      and_336_nl);
  assign or_512_nl = (fsm_output[7:2]!=6'b010111);
  assign mux_425_nl = MUX_s_1_2_2(or_tmp_381, or_1330_cse, fsm_output[2]);
  assign mux_426_nl = MUX_s_1_2_2(or_512_nl, mux_425_nl, fsm_output[0]);
  assign output_rsci_we_d_pff = (~ mux_426_nl) & (fsm_output[8]) & (~ (fsm_output[1]));
  assign QUANTIZE_ACTIVATION_LOOP_5_mux1h_1_nl = MUX1HOT_v_3_3_2(({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd
      , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1}), GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva,
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0, {and_dcpl_316 , and_dcpl_317 , and_dcpl_298});
  assign QUANTIZE_ACTIVATION_LOOP_5_mux1h_3_nl = MUX1HOT_v_4_3_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4,
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt, LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0,
      {and_dcpl_316 , and_dcpl_317 , and_dcpl_298});
  assign QUANTIZE_ACTIVATION_LOOP_5_mux1h_4_nl = MUX1HOT_v_2_3_2(CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0,
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0, ({reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1}), {and_dcpl_316 , and_dcpl_317
      , and_dcpl_298});
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d = {QUANTIZE_ACTIVATION_LOOP_5_mux1h_1_nl
      , QUANTIZE_ACTIVATION_LOOP_5_mux1h_3_nl , QUANTIZE_ACTIVATION_LOOP_5_mux1h_4_nl};
  assign mux_420_nl = MUX_s_1_2_2(nand_tmp_21, mux_tmp_418, LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs[1]);
  assign mux_419_nl = MUX_s_1_2_2(mux_tmp_418, nand_tmp_21, LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs[1]);
  assign mux_421_nl = MUX_s_1_2_2(mux_420_nl, mux_419_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs[0]);
  assign or_504_nl = (~ (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0[0])) | (fsm_output[2:1]!=2'b01);
  assign or_503_nl = (CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0[0]) | (fsm_output[2:1]!=2'b01);
  assign mux_416_nl = MUX_s_1_2_2(or_504_nl, or_503_nl, CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0[1]);
  assign mux_422_nl = MUX_s_1_2_2(mux_421_nl, mux_416_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_pff = (~ mux_422_nl)
      & and_dcpl_138 & and_dcpl_201;
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d = {GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt , APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0};
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_pff = and_dcpl_290
      & and_dcpl_120;
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_1_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd,
      (rms_norm_384_div_cmp_z_oreg[39:36]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_5_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1,
      (rms_norm_384_div_cmp_z_oreg[35:33]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_6_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2,
      (rms_norm_384_div_cmp_z_oreg[32:29]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_7_nl = MUX_s_1_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3,
      (rms_norm_384_div_cmp_z_oreg[28]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_8_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      (rms_norm_384_div_cmp_z_oreg[27:25]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_9_nl = MUX_v_9_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5,
      (rms_norm_384_div_cmp_z_oreg[24:16]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_and_2_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      ({INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_1_nl , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_5_nl
      , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_6_nl , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_7_nl
      , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_8_nl , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_9_nl}),
      mux_415_seb);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_2_nl = MUX_v_16_2_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15:0]),
      (rms_norm_384_div_cmp_z_oreg[15:0]), and_321_ssc);
  assign INIT_2D_MEM_LOOP_2_and_3_nl = MUX_v_16_2_2(16'b0000000000000000, INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_2_nl,
      mux_415_seb);
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_d_d = {INIT_2D_MEM_LOOP_2_and_2_nl
      , INIT_2D_MEM_LOOP_2_and_3_nl};
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_nl = MUX_v_4_2_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[8:5]),
      RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0, and_dcpl_306);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_3_nl = MUX_s_1_2_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[4]),
      (z_out_35[0]), and_dcpl_306);
  assign INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_4_nl = MUX_v_4_2_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[3:0]),
      ({(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0]) , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1}), and_dcpl_306);
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d = {INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_nl
      , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_3_nl , INIT_2D_MEM_LOOP_2_INIT_2D_MEM_LOOP_2_mux_4_nl};
  assign or_485_nl = (fsm_output[7:2]!=6'b101001);
  assign or_484_nl = (fsm_output[2]) | mux_tmp_401;
  assign mux_407_nl = MUX_s_1_2_2(or_485_nl, or_484_nl, fsm_output[1]);
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_pff = ~(mux_407_nl | (fsm_output[8])
      | (fsm_output[0]));
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d = reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1;
  assign or_497_nl = (fsm_output[7:3]!=5'b01011);
  assign mux_412_nl = MUX_s_1_2_2(or_tmp_370, or_497_nl, fsm_output[2]);
  assign or_495_nl = (fsm_output[7:2]!=6'b010101);
  assign mux_413_nl = MUX_s_1_2_2(mux_412_nl, or_495_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_pff = (~ mux_413_nl) & (~
      (fsm_output[8])) & (fsm_output[1]);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_2_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd,
      (rms_norm_384_div_cmp_z_oreg[39:36]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_11_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1,
      (rms_norm_384_div_cmp_z_oreg[35:33]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_12_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2,
      (rms_norm_384_div_cmp_z_oreg[32:29]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_13_nl = MUX_s_1_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3,
      (rms_norm_384_div_cmp_z_oreg[28]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_14_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      (rms_norm_384_div_cmp_z_oreg[27:25]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_15_nl = MUX_v_9_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5,
      (rms_norm_384_div_cmp_z_oreg[24:16]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_and_1_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      ({INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_2_nl , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_11_nl
      , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_12_nl , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_13_nl
      , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_14_nl , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_15_nl}),
      INIT_2D_MEM_LOOP_2_1_nor_seb);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_5_nl = MUX_v_16_2_2((INIT_2D_MEM_LOOP_2_1_asn_psp[15:0]),
      (rms_norm_384_div_cmp_z_oreg[15:0]), and_317_ssc);
  assign INIT_2D_MEM_LOOP_2_1_and_4_nl = MUX_v_16_2_2(16'b0000000000000000, INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_5_nl,
      INIT_2D_MEM_LOOP_2_1_nor_seb);
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_d_d = {INIT_2D_MEM_LOOP_2_1_and_1_nl
      , INIT_2D_MEM_LOOP_2_1_and_4_nl};
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_3_nl = MUX_v_4_2_2((INIT_2D_MEM_LOOP_2_2_acc_itm[8:5]),
      z_out_12, and_dcpl_306);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_8_nl = MUX_s_1_2_2((INIT_2D_MEM_LOOP_2_2_acc_itm[4]),
      (z_out_31[0]), and_dcpl_306);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_9_nl = MUX_v_4_2_2((INIT_2D_MEM_LOOP_2_2_acc_itm[3:0]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0]), and_dcpl_306);
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d = {INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_3_nl
      , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_8_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_9_nl};
  assign and_314_nl = (~ mux_tmp_403) & and_dcpl_303;
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d = MUX_v_9_2_2(SF_LOOP_3_acc_17_itm_8_0,
      INIT_2D_MEM_LOOP_2_2_acc_itm, and_314_nl);
  assign or_488_nl = (fsm_output[3]) | (fsm_output[4]) | (~ (fsm_output[7])) | (fsm_output[6]);
  assign or_487_nl = (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[7]) | (~
      (fsm_output[6]));
  assign mux_408_nl = MUX_s_1_2_2(or_488_nl, or_487_nl, fsm_output[2]);
  assign mux_409_nl = MUX_s_1_2_2(or_tmp_353, mux_408_nl, fsm_output[1]);
  assign attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_pff = (~ mux_409_nl) & and_dcpl_303;
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_2_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[39:36]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_11_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[35:33]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_12_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[32:29]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_13_nl = MUX_s_1_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[28]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_14_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[27:25]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_15_nl = MUX_v_9_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5,
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[24:16]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_and_2_nl = MUX_v_24_2_2(24'b000000000000000000000000,
      ({INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_2_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_11_nl
      , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_12_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_13_nl
      , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_14_nl , INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_15_nl}),
      INIT_2D_MEM_LOOP_2_2_nor_seb);
  assign INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_10_nl = MUX_v_16_2_2((INIT_2D_MEM_LOOP_2_2_asn_psp[15:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[15:0]),
      and_309_ssc);
  assign INIT_2D_MEM_LOOP_2_2_and_7_nl = MUX_v_16_2_2(16'b0000000000000000, INIT_2D_MEM_LOOP_2_2_INIT_2D_MEM_LOOP_2_2_mux_10_nl,
      INIT_2D_MEM_LOOP_2_2_nor_seb);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_d_d = {INIT_2D_MEM_LOOP_2_2_and_2_nl
      , INIT_2D_MEM_LOOP_2_2_and_7_nl};
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_nl = MUX_v_4_2_2((SF_LOOP_3_acc_17_itm_8_0[8:5]),
      z_out_12, and_dcpl_284);
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_3_nl = MUX_s_1_2_2((SF_LOOP_3_acc_17_itm_8_0[4]),
      (z_out_31[0]), and_dcpl_284);
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_4_nl = MUX_v_4_2_2((SF_LOOP_3_acc_17_itm_8_0[3:0]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0]), and_dcpl_284);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d = {RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_nl
      , RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_3_nl , RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_mux_4_nl};
  assign or_473_nl = (fsm_output[7:3]!=5'b10101);
  assign mux_402_nl = MUX_s_1_2_2(or_473_nl, mux_tmp_401, fsm_output[1]);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_pff = (~ mux_402_nl) & and_dcpl_285
      & (~ (fsm_output[0]));
  assign and_302_nl = (~ mux_tmp_403) & and_dcpl_133 & (~ (fsm_output[0]));
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d = MUX_v_9_2_2(INIT_2D_MEM_LOOP_2_2_acc_itm,
      SF_LOOP_3_acc_17_itm_8_0, and_302_nl);
  assign or_475_nl = (~ (fsm_output[1])) | (~ (fsm_output[2])) | (fsm_output[3])
      | (~ (fsm_output[4])) | (fsm_output[7]) | (~ (fsm_output[6]));
  assign mux_404_nl = MUX_s_1_2_2(mux_tmp_403, or_475_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_pff = (~ mux_404_nl) & and_dcpl_133;
  assign attention_5_1_384_384_8_48_q_proj_rsci_radr_d = {RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_3_1
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_0 , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_9_rmff
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_rmff , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_2
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_1_0};
  assign or_468_nl = (fsm_output[0]) | (~ (fsm_output[2]));
  assign mux_400_nl = MUX_s_1_2_2(or_468_nl, nor_tmp_104, LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm);
  assign attention_5_1_384_384_8_48_q_proj_rsci_re_d_pff = mux_400_nl & and_dcpl_129
      & and_dcpl_218 & (~ (fsm_output[4])) & (fsm_output[3]) & (~ (fsm_output[1]));
  assign attention_5_1_384_384_8_48_q_proj_rsci_wadr_d = {RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1
      , (LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0[0]) , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0])
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  assign attention_5_1_384_384_8_48_q_proj_rsci_we_d_pff = and_dcpl_189 & and_dcpl_282;
  assign attention_5_1_384_384_8_48_k_proj_rsci_radr_d = {RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_3_1
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_4_rmff_0 , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_9_rmff
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_7_rmff , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_2
      , RESHAPE_2D_TO_3D_LOOP_3_1_mux1h_8_rmff_1_0};
  assign attention_5_1_384_384_8_48_k_proj_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4
      , (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]) , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_v_proj_rsci_radr_d = {z_out_12 , (z_out_31[0])
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_v_proj_rsci_re_d_pff = and_dcpl_257 & and_dcpl_271
      & and_74_cse;
  assign attention_5_1_384_384_8_48_v_proj_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4
      , (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]) , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_v_proj_rsci_we_d_pff = and_dcpl_196;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl = APPLY_ROTARY_POS_EMB_LOOP_6_mul_3_itm
      + APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl[55:0];
  assign attention_5_1_384_384_8_48_q_embed_rsci_d_d = readslicef_56_40_16(APPLY_ROTARY_POS_EMB_LOOP_6_acc_7_nl);
  assign attention_5_1_384_384_8_48_q_embed_rsci_radr_d = {z_out_12 , (z_out_31[0])
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_q_embed_rsci_re_d_pff = and_dcpl_241;
  assign attention_5_1_384_384_8_48_q_embed_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4
      , (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]) , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_q_embed_rsci_we_d_pff = and_dcpl_233 & and_dcpl_107;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl = APPLY_ROTARY_POS_EMB_LOOP_6_mul_8_itm
      + APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_itm;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl[55:0];
  assign attention_5_1_384_384_8_48_k_embed_rsci_d_d = readslicef_56_40_16(APPLY_ROTARY_POS_EMB_LOOP_6_acc_14_nl);
  assign attention_5_1_384_384_8_48_k_embed_rsci_radr_d = {RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0
      , (z_out_35[0]) , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0]) , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  assign attention_5_1_384_384_8_48_k_embed_rsci_re_d_pff = and_dcpl_257 & and_dcpl_271
      & and_72_cse;
  assign attention_5_1_384_384_8_48_k_embed_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4
      , (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]) , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign and_278_nl = and_dcpl_257 & and_dcpl_254 & and_72_cse;
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d = MUX_v_40_2_2(CACHE_UPDATE_LOOP_3_qr_sva_1,
      attention_5_1_384_384_8_48_k_embed_rsci_q_d, and_278_nl);
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d = {z_out_33 , (z_out_10[2:0])
      , (z_out_36_2_0[0]) , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0]) , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_pff = and_dcpl_263;
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d = {CACHE_UPDATE_LOOP_3_acc_18_psp_1
      , (APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva[2:0]) , (CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0[0])
      , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[0]) , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  assign attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_pff = and_dcpl_233 & and_dcpl_175;
  assign and_271_nl = and_dcpl_257 & and_dcpl_254 & and_74_cse;
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d = MUX_v_40_2_2(CACHE_UPDATE_LOOP_3_1_qr_sva_1,
      attention_5_1_384_384_8_48_v_proj_rsci_q_d, and_271_nl);
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d = {z_out_32 , (z_out_10[2:0])
      , (z_out_34_2_0[0]) , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_pff = and_dcpl_228;
  assign attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d = {CACHE_UPDATE_LOOP_3_1_acc_18_psp_1
      , (reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd[0]) , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1 , (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[0])
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d = {z_out_32 , (GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1[6:0])
      , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1};
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt
      , (INIT_2D_MEM_LOOP_2_2_acc_itm[6:0]) , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1};
  assign attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_pff = and_dcpl_233
      & and_dcpl_128;
  assign nl_SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_acc_nl = SF_LOOP_3_acc_58_itm + ({reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd
      , 1'b0 , ({{1{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd})
      , 1'b0 , ({{1{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd})
      , 4'b0000 , ({{1{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd})
      , 2'b00 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd , 1'b0 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd
      , 1'b0 , ({{1{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd})
      , 1'b0 , ({{1{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd})
      , 2'b00 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd , 1'b0 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd
      , 3'b000 , ({{1{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd})
      , 1'b0 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd , 1'b0 , reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd});
  assign SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_acc_nl = nl_SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_acc_nl[37:0];
  assign FIXED32_MIN_or_nl = (and_dcpl_242 & and_dcpl_248) | and_dcpl_240;
  assign and_259_nl = and_dcpl_208 & and_dcpl_210;
  assign FIXED32_MIN_mux1h_1_nl = MUX1HOT_v_40_3_2(z_out, (signext_40_38(SF_LOOP_3_SF_LOOP_3_SF_LOOP_3_acc_nl)),
      (SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z[39:0]), {FIXED32_MIN_or_nl , and_dcpl_238
      , and_259_nl});
  assign or_462_nl = (~ (fsm_output[1])) | (fsm_output[3]) | (fsm_output[4]) | (fsm_output[5])
      | (fsm_output[8]) | (~ (fsm_output[6]));
  assign or_460_nl = (~ (fsm_output[4])) | (fsm_output[8]) | (~ (fsm_output[6]));
  assign or_458_nl = (fsm_output[4]) | (fsm_output[5]) | (~ (fsm_output[8])) | (fsm_output[6]);
  assign mux_397_nl = MUX_s_1_2_2(or_460_nl, or_458_nl, fsm_output[3]);
  assign or_457_nl = (~ (fsm_output[3])) | (~ (fsm_output[4])) | (fsm_output[5])
      | (fsm_output[8]) | (~ (fsm_output[6]));
  assign mux_398_nl = MUX_s_1_2_2(mux_397_nl, or_457_nl, fsm_output[1]);
  assign mux_399_nl = MUX_s_1_2_2(or_462_nl, mux_398_nl, fsm_output[0]);
  assign nor_573_nl = ~(mux_399_nl | (~ (fsm_output[7])) | (fsm_output[2]));
  assign attention_5_1_384_384_8_48_attn_weights_rsci_d_d = MUX_v_40_2_2(40'b0000000000000000000000000000000000000000,
      FIXED32_MIN_mux1h_1_nl, nor_573_nl);
  assign GEMM_3D_FLOAT_LOOP_3_or_nl = and_dcpl_243 | and_dcpl_245 | and_dcpl_246
      | and_dcpl_247 | and_dcpl_228;
  assign GEMM_3D_FLOAT_LOOP_3_mux1h_4_nl = MUX1HOT_v_4_3_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4,
      z_out_12, z_out_35, {and_dcpl_241 , GEMM_3D_FLOAT_LOOP_3_or_nl , attention_5_1_384_384_8_48_attn_weights_rsci_radr_d_mx0c2});
  assign GEMM_3D_FLOAT_LOOP_3_or_5_nl = and_dcpl_243 | and_dcpl_246 | and_dcpl_247
      | and_dcpl_228;
  assign GEMM_3D_FLOAT_LOOP_3_mux1h_12_nl = MUX1HOT_s_1_4_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_31[0]), (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[0]), (z_out_35[0]),
      {and_dcpl_241 , GEMM_3D_FLOAT_LOOP_3_or_5_nl , attention_5_1_384_384_8_48_attn_weights_rsci_radr_d_mx0c2
      , and_dcpl_245});
  assign GEMM_3D_FLOAT_LOOP_3_or_1_nl = and_dcpl_241 | and_dcpl_243 | and_dcpl_247;
  assign GEMM_3D_FLOAT_LOOP_3_or_2_nl = and_dcpl_246 | and_dcpl_228;
  assign GEMM_3D_FLOAT_LOOP_3_mux1h_13_nl = MUX1HOT_s_1_3_2(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[0]), (GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva[0]),
      {GEMM_3D_FLOAT_LOOP_3_or_1_nl , and_dcpl_245 , GEMM_3D_FLOAT_LOOP_3_or_2_nl});
  assign GEMM_3D_FLOAT_LOOP_3_and_1_nl = GEMM_3D_FLOAT_LOOP_3_mux1h_13_nl & (~ attention_5_1_384_384_8_48_attn_weights_rsci_radr_d_mx0c2);
  assign attention_5_1_384_384_8_48_attn_weights_rsci_radr_d = {GEMM_3D_FLOAT_LOOP_3_mux1h_4_nl
      , GEMM_3D_FLOAT_LOOP_3_mux1h_12_nl , GEMM_3D_FLOAT_LOOP_3_and_1_nl};
  assign and_702_nl = (fsm_output[6:3]==4'b1011);
  assign nor_381_nl = ~((fsm_output[6:3]!=4'b1010));
  assign mux_390_nl = MUX_s_1_2_2(and_702_nl, nor_381_nl, fsm_output[2]);
  assign mux_389_nl = MUX_s_1_2_2(or_216_cse, (~ (fsm_output[6])), fsm_output[4]);
  assign nor_382_nl = ~((fsm_output[3:2]!=2'b01) | mux_389_nl);
  assign mux_391_nl = MUX_s_1_2_2(mux_390_nl, nor_382_nl, fsm_output[1]);
  assign and_703_nl = (fsm_output[6:2]==5'b10111);
  assign and_704_nl = (fsm_output[6:2]==5'b01111);
  assign mux_388_nl = MUX_s_1_2_2(and_703_nl, and_704_nl, fsm_output[1]);
  assign mux_392_nl = MUX_s_1_2_2(mux_391_nl, mux_388_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_attn_weights_rsci_re_d_pff = mux_392_nl & and_dcpl_29;
  assign GEMM_3D_FLOAT_LOOP_3_mux1h_2_nl = MUX1HOT_v_4_3_2(z_out_12, APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4,
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt, {and_dcpl_234 , GEMM_3D_FLOAT_LOOP_3_or_3_cse
      , and_dcpl_238});
  assign GEMM_3D_FLOAT_LOOP_3_mux1h_10_nl = MUX1HOT_s_1_3_2((z_out_31[0]), (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0[0]), {and_dcpl_234 , GEMM_3D_FLOAT_LOOP_3_or_3_cse
      , and_dcpl_238});
  assign GEMM_3D_FLOAT_LOOP_3_GEMM_3D_FLOAT_LOOP_3_mux_nl = MUX_s_1_2_2(reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1,
      (GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva[0]), and_dcpl_240);
  assign attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d = {GEMM_3D_FLOAT_LOOP_3_mux1h_2_nl
      , GEMM_3D_FLOAT_LOOP_3_mux1h_10_nl , GEMM_3D_FLOAT_LOOP_3_GEMM_3D_FLOAT_LOOP_3_mux_nl};
  assign nor_383_nl = ~((fsm_output[6:1]!=6'b100001));
  assign nor_384_nl = ~((fsm_output[3]) | (~((fsm_output[4]) & (fsm_output[6]))));
  assign and_706_nl = (fsm_output[6:3]==4'b0111);
  assign mux_393_nl = MUX_s_1_2_2(nor_384_nl, and_706_nl, fsm_output[2]);
  assign nor_385_nl = ~((fsm_output[6:2]!=5'b10110));
  assign mux_394_nl = MUX_s_1_2_2(mux_393_nl, nor_385_nl, fsm_output[1]);
  assign mux_395_nl = MUX_s_1_2_2(nor_383_nl, mux_394_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_attn_weights_rsci_we_d_pff = mux_395_nl & and_dcpl_29;
  assign nor_379_nl = ~((fsm_output[5]) | (~ (fsm_output[8])) | (fsm_output[6]));
  assign nor_380_nl = ~((~ (fsm_output[5])) | (fsm_output[8]) | (~ (fsm_output[6])));
  assign mux_387_nl = MUX_s_1_2_2(nor_379_nl, nor_380_nl, fsm_output[4]);
  assign nor_572_nl = ~((~(mux_387_nl & (fsm_output[7]))) | or_dcpl_116);
  assign attention_5_1_384_384_8_48_attn_output_rsci_d_d = MUX_v_40_2_2(40'b0000000000000000000000000000000000000000,
      z_out, nor_572_nl);
  assign GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4,
      z_out_12, attention_5_1_384_384_8_48_attn_output_rsci_radr_d_mx0c1);
  assign GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_1_nl = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (z_out_31[0]), attention_5_1_384_384_8_48_attn_output_rsci_radr_d_mx0c1);
  assign attention_5_1_384_384_8_48_attn_output_rsci_radr_d = {GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_nl
      , GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_1_nl , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign mux_385_nl = MUX_s_1_2_2(or_tmp_315, or_tmp_314, fsm_output[0]);
  assign attention_5_1_384_384_8_48_attn_output_rsci_re_d_pff = (~ mux_385_nl) &
      nor_tmp_54 & and_dcpl_218 & and_dcpl_217;
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_nl = MUX_v_4_2_2(z_out_12,
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4, and_dcpl_227);
  assign INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_1_nl = MUX_s_1_2_2((z_out_31[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]), and_dcpl_227);
  assign attention_5_1_384_384_8_48_attn_output_rsci_wadr_d = {INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_nl
      , INIT_2D_MEM_LOOP_2_1_INIT_2D_MEM_LOOP_2_1_mux_1_nl , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign mux_386_nl = MUX_s_1_2_2(or_dcpl_93, or_dcpl_100, fsm_output[0]);
  assign attention_5_1_384_384_8_48_attn_output_rsci_we_d_pff = (~ mux_386_nl) &
      nor_tmp_54 & and_dcpl_218 & (fsm_output[4]) & (~ (fsm_output[1]));
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d = MUX_v_40_2_2(attention_5_1_384_384_8_48_attn_output_rsci_q_d,
      RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva, and_dcpl_211);
  assign INIT_2D_MEM_LOOP_2_mux1h_nl = MUX1HOT_v_3_3_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[8:6]),
      (INIT_2D_MEM_LOOP_2_2_acc_itm[8:6]), GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva, {and_dcpl_213
      , and_dcpl_215 , and_225_ssc});
  assign INIT_2D_MEM_LOOP_2_and_nl = MUX_v_3_2_2(3'b000, INIT_2D_MEM_LOOP_2_mux1h_nl,
      ATTN_2D_LOOP_3_and_seb);
  assign INIT_2D_MEM_LOOP_2_mux1h_6_nl = MUX1HOT_v_4_3_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[5:2]),
      (INIT_2D_MEM_LOOP_2_2_acc_itm[5:2]), APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt,
      {and_dcpl_213 , and_dcpl_215 , and_225_ssc});
  assign INIT_2D_MEM_LOOP_2_and_4_nl = MUX_v_4_2_2(4'b0000, INIT_2D_MEM_LOOP_2_mux1h_6_nl,
      ATTN_2D_LOOP_3_and_seb);
  assign INIT_2D_MEM_LOOP_2_mux1h_7_nl = MUX1HOT_v_2_3_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[1:0]),
      (INIT_2D_MEM_LOOP_2_2_acc_itm[1:0]), APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0,
      {and_dcpl_213 , and_dcpl_215 , and_225_ssc});
  assign INIT_2D_MEM_LOOP_2_and_5_nl = MUX_v_2_2_2(2'b00, INIT_2D_MEM_LOOP_2_mux1h_7_nl,
      ATTN_2D_LOOP_3_and_seb);
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d = {INIT_2D_MEM_LOOP_2_and_nl
      , INIT_2D_MEM_LOOP_2_and_4_nl , INIT_2D_MEM_LOOP_2_and_5_nl};
  assign nor_372_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[2])) | (fsm_output[6])
      | not_tmp_245);
  assign or_414_nl = (~((RMS_NORM_LOOP_2_2_dfr_sva_8_0==9'b111111111) & RMS_NORM_LOOP_2_2_dfr_sva_9
      & (~ (fsm_output[6])))) | not_tmp_245;
  assign or_412_nl = (~ (fsm_output[6])) | (fsm_output[1]) | (fsm_output[5]);
  assign mux_378_nl = MUX_s_1_2_2(or_414_nl, or_412_nl, fsm_output[2]);
  assign nor_373_nl = ~((fsm_output[3]) | mux_378_nl);
  assign mux_379_nl = MUX_s_1_2_2(nor_372_nl, nor_373_nl, fsm_output[4]);
  assign nor_374_nl = ~((fsm_output[6:1]!=6'b000000));
  assign mux_380_nl = MUX_s_1_2_2(mux_379_nl, nor_374_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_pff = mux_380_nl & and_dcpl_88;
  assign GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_2_nl = MUX_v_4_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4,
      (INIT_2D_MEM_LOOP_2_2_acc_itm[8:5]), and_dcpl_211);
  assign GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_4_nl = MUX_s_1_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt[0]),
      (INIT_2D_MEM_LOOP_2_2_acc_itm[4]), and_dcpl_211);
  assign GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_5_nl = MUX_v_4_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0]),
      (INIT_2D_MEM_LOOP_2_2_acc_itm[3:0]), and_dcpl_211);
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d = {GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_2_nl
      , GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_4_nl , GEMM_3D_FLOAT_LOOP_3_1_GEMM_3D_FLOAT_LOOP_3_1_mux_5_nl};
  assign and_699_nl = (fsm_output[1]) & (fsm_output[2]) & (fsm_output[3]) & (~ (fsm_output[8]))
      & nor_tmp_54;
  assign nor_375_nl = ~((fsm_output[1]) | (fsm_output[2]) | (fsm_output[3]) | (~
      (fsm_output[8])) | (fsm_output[7]) | (fsm_output[6]));
  assign mux_381_nl = MUX_s_1_2_2(and_699_nl, nor_375_nl, fsm_output[0]);
  assign attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_pff = mux_381_nl & and_dcpl_117;
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d = {GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt , APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0};
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_pff = and_dcpl_163
      & and_dcpl_201 & and_694_cse & (fsm_output[0]) & ((LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_mux_tmp[0])
      ^ (LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_mux_tmp[1]));
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d = {GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt , APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0};
  assign attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_pff = and_dcpl_204
      & and_dcpl_182;
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl =  -attention_5_1_384_384_8_48_q_proj_rsci_q_d;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl[39:0];
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d = MUX_v_40_2_2(attention_5_1_384_384_8_48_q_proj_rsci_q_d,
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_6_nl, and_dcpl_197);
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d = {z_out_12 , (z_out_31[0])
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_pff = and_dcpl_190;
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_4_2
      , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1 , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_0
      , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_1_rmff , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  assign apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_pff = and_dcpl_185 & not_tmp_240
      & and_dcpl_157 & (fsm_output[3]) & (~((fsm_output[2]) | LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm));
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl =  -attention_5_1_384_384_8_48_k_proj_rsci_q_d;
  assign APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl = nl_APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl[39:0];
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d = MUX_v_40_2_2(attention_5_1_384_384_8_48_k_proj_rsci_q_d,
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_12_nl, and_dcpl_197);
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d = {z_out_12 , (z_out_31[0])
      , (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[3:0])};
  assign apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d = {APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_4_2
      , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_1 , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_rmff_0
      , APPLY_ROTARY_POS_EMB_LOOP_3_APPLY_ROTARY_POS_EMB_LOOP_3_mux_1_rmff , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1};
  assign and_dcpl_550 = and_dcpl_109 & (~ (fsm_output[8])) & nor_239_cse & nor_566_cse
      & and_692_cse;
  assign and_dcpl_556 = and_dcpl_109 & (fsm_output[8]) & nor_239_cse & (fsm_output[3:2]==2'b01)
      & nor_494_cse;
  assign and_dcpl_559 = and_dcpl_127 & (fsm_output[1:0]==2'b01);
  assign and_dcpl_562 = (fsm_output[8:6]==3'b011);
  assign and_dcpl_563 = and_dcpl_562 & (fsm_output[5:4]==2'b01);
  assign and_dcpl_564 = and_dcpl_563 & and_dcpl_559;
  assign and_dcpl_566 = and_dcpl_563 & and_dcpl_127 & and_692_cse;
  assign and_dcpl_570 = and_dcpl_562 & nor_239_cse & nor_566_cse & (fsm_output[1:0]==2'b10);
  assign and_dcpl_573 = and_dcpl_562 & (fsm_output[5:4]==2'b11) & and_dcpl_559;
  assign RMS_NORM_LOOP_1_1_or_ssc = and_dcpl_550 | and_dcpl_556 | and_dcpl_570 |
      and_dcpl_573;
  assign and_dcpl_596 = (fsm_output==9'b001010111);
  assign and_dcpl_613 = (fsm_output[8:6]==3'b011) & nor_239_cse;
  assign and_dcpl_614 = and_dcpl_613 & (fsm_output[3:0]==4'b0111);
  assign and_894_cse = and_dcpl_613 & and_dcpl_127 & nor_494_cse;
  assign and_897_cse = and_dcpl_613 & and_dcpl_127 & (fsm_output[1:0]==2'b01);
  assign and_dcpl_629 = and_dcpl_110 & and_dcpl_152 & and_dcpl_127 & nor_494_cse;
  assign and_dcpl_634 = and_dcpl_110 & (fsm_output[5:4]==2'b11) & and_dcpl_239;
  assign and_dcpl_641 = and_dcpl_138 & and_dcpl_152 & nor_566_cse & and_dcpl_126;
  assign and_dcpl_646 = and_dcpl_138 & (fsm_output[5:4]==2'b10) & nor_566_cse & and_dcpl_25;
  assign and_1498_nl = (fsm_output[5:3]==3'b111);
  assign nor_613_nl = ~((fsm_output[5:3]!=3'b000));
  assign mux_1015_nl = MUX_s_1_2_2(and_1498_nl, nor_613_nl, fsm_output[0]);
  assign and_dcpl_651 = mux_1015_nl & (fsm_output[7]) & (fsm_output[6]) & (~ (fsm_output[8]))
      & (~((fsm_output[2:1]!=2'b00)));
  assign and_dcpl_656 = and_dcpl_562 & nor_239_cse & and_dcpl_239;
  assign and_dcpl_659 = and_dcpl_562 & and_dcpl_152 & and_dcpl_127 & and_dcpl_25;
  assign and_dcpl_663 = and_dcpl_121 & nor_239_cse & nor_566_cse & and_692_cse;
  assign and_dcpl_666 = and_dcpl_121 & and_dcpl_152 & and_dcpl_127 & and_dcpl_126;
  assign and_dcpl_671 = and_dcpl_137 & (fsm_output[8]) & and_dcpl_152 & (fsm_output[3:2]==2'b01)
      & and_dcpl_25;
  assign and_dcpl_679 = (fsm_output[8:4]==5'b00110) & nor_566_cse & (fsm_output[1:0]==2'b10);
  assign and_dcpl_704 = (fsm_output==9'b101100101);
  assign and_dcpl_717 = and_dcpl_109 & (~ (fsm_output[8])) & nor_239_cse & and_dcpl_161
      & (fsm_output[1:0]==2'b01);
  assign and_dcpl_722 = and_dcpl_109 & (fsm_output[8]) & nor_239_cse & and_dcpl_161
      & (fsm_output[1:0]==2'b10);
  assign and_1011_cse = and_dcpl_109 & (fsm_output[8]) & nor_239_cse & (fsm_output[3:0]==4'b0110);
  assign and_dcpl_742 = nor_239_cse & (fsm_output[3:1]==3'b101) & and_dcpl_109 &
      xnor_cse;
  assign and_dcpl_749 = and_dcpl_562 & nor_239_cse & and_dcpl_161 & and_692_cse;
  assign and_dcpl_752 = (fsm_output[3:2]==2'b10) & nor_494_cse;
  assign and_dcpl_755 = (fsm_output[8:6]==3'b010);
  assign and_dcpl_757 = and_dcpl_755 & (fsm_output[5:4]==2'b10) & and_dcpl_752;
  assign and_dcpl_761 = and_dcpl_755 & and_dcpl_117;
  assign and_dcpl_762 = and_dcpl_761 & nor_566_cse & and_692_cse;
  assign and_dcpl_763 = and_dcpl_761 & and_dcpl_752;
  assign and_dcpl_767 = and_dcpl_562 & and_dcpl_117 & and_dcpl_161 & (fsm_output[1:0]==2'b10);
  assign compute_sqrt_for_or_2_cse = and_dcpl_762 | and_dcpl_767;
  assign and_1051_cse = and_dcpl_613 & (fsm_output[3:2]==2'b01) & and_692_cse;
  assign and_dcpl_779 = and_dcpl_613 & (fsm_output[3:0]==4'b1101);
  assign and_dcpl_786 = (fsm_output[8:4]==5'b01011) & nor_566_cse & and_692_cse;
  assign and_dcpl_789 = (fsm_output[3:0]==4'b1101);
  assign nor_632_cse = ~((~ (fsm_output[3])) | (~ (fsm_output[4])) | (fsm_output[6]));
  assign and_dcpl_808 = (fsm_output[3:0]==4'b0110);
  assign and_dcpl_832 = and_dcpl_137 & (~ (fsm_output[8])) & and_dcpl_152;
  assign and_dcpl_833 = and_dcpl_832 & (fsm_output[3:2]==2'b10) & and_692_cse;
  assign and_dcpl_837 = and_dcpl_832 & and_578_cse & nor_494_cse;
  assign and_dcpl_840 = and_dcpl_832 & and_578_cse & (fsm_output[1:0]==2'b01);
  assign and_dcpl_846 = and_dcpl_163 & (fsm_output[5:4]==2'b10) & nor_566_cse & nor_494_cse;
  assign and_dcpl_917 = and_dcpl_109 & (fsm_output[8]) & (fsm_output[5]) & (fsm_output[4])
      & nor_566_cse & nor_494_cse;
  assign and_dcpl_931 = (fsm_output[8:2]==7'b0001111) & nor_494_cse;
  assign and_dcpl_942 = (fsm_output[8:6]==3'b011) & nor_239_cse & (fsm_output[3:0]==4'b1011);
  assign and_dcpl_953 = (fsm_output[8:6]==3'b011) & nor_239_cse & (fsm_output[3:0]==4'b1010);
  assign and_dcpl_964 = (fsm_output[8:6]==3'b011) & nor_239_cse & (fsm_output[3:0]==4'b1001);
  assign and_1256_cse = (fsm_output[8:6]==3'b011) & nor_239_cse & (fsm_output[3:2]==2'b10)
      & nor_494_cse;
  assign and_1280_cse = (fsm_output[8:2]==7'b0101011) & and_692_cse;
  assign and_1291_cse = and_dcpl_613 & (fsm_output[3:2]==2'b10) & nor_494_cse;
  assign mux_1050_nl = MUX_s_1_2_2(not_tmp_429, nor_632_cse, fsm_output[2]);
  assign and_1509_cse = (fsm_output[1]) & mux_1050_nl;
  assign nor_690_nl = ~((fsm_output[1]) | mux_575_cse);
  assign mux_1053_nl = MUX_s_1_2_2(nor_690_nl, and_1509_cse, fsm_output[0]);
  assign and_dcpl_1069 = mux_1053_nl & and_dcpl_398;
  assign nor_629_nl = ~((~ (fsm_output[1])) | (fsm_output[3]) | (fsm_output[4]) |
      (fsm_output[5]) | (~ (fsm_output[6])));
  assign nor_630_nl = ~((fsm_output[1]) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (~ (fsm_output[5])) | (fsm_output[6]));
  assign mux_1016_nl = MUX_s_1_2_2(nor_629_nl, nor_630_nl, fsm_output[0]);
  assign and_1353_cse = mux_1016_nl & and_dcpl_29 & (fsm_output[2]);
  assign and_dcpl_1087 = and_dcpl_562 & and_dcpl_117 & (fsm_output[3:0]==4'b0110);
  assign and_dcpl_1094 = (fsm_output[8:6]==3'b010) & and_dcpl_117;
  assign and_dcpl_1152 = (fsm_output[8:4]==5'b01101);
  assign and_dcpl_1208 = (fsm_output[8:2]==7'b1010110) & nor_494_cse;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_3_nl
      = ~(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
      | QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_17_svs);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_nor_3_nl
      = ~(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_17_svs);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_m1c = MUX_s_1_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_3_nl,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_nor_3_nl,
      and_dcpl_1208);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_5_nl = MUX_s_1_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_17_svs,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_17_svs,
      and_dcpl_1208);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_2_nl
      = ~((~ QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs)
      | QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_17_svs);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_nor_2_nl
      = ~((~ QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs)
      | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_17_svs);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_6_nl = MUX_s_1_2_2(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_nor_2_nl,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_nor_2_nl,
      and_dcpl_1208);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_nl = (~ and_dcpl_1208)
      & QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_m1c;
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_1_nl = and_dcpl_1208
      & QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_7_m1c;
  assign attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d = MUX1HOT_v_8_4_2(8'b10000000,
      8'b01111111, attention_round_qr_39_16_lpi_4_dfm_7_0, attention_round_1_qr_39_16_lpi_4_dfm_7_0,
      {QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_5_nl , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_mux_6_nl
      , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_nl , QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_and_1_nl});
  assign compute_sqrt_for_guess_inv_or_cse = and_dcpl_646 | and_dcpl_651 | and_dcpl_659
      | and_dcpl_663 | and_dcpl_671;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse = ~(and_894_cse
      | and_897_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_2_cse_1 = and_dcpl_717 | and_dcpl_722;
  assign mux_1056_cse = MUX_s_1_2_2(nand_195_cse, or_589_cse, fsm_output[4]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_cse = (and_dcpl_832 & nor_566_cse
      & (fsm_output[1:0]==2'b10)) | (and_dcpl_163 & and_dcpl_152 & (fsm_output[3:2]==2'b01)
      & and_692_cse);
  assign and_1497_nl = (fsm_output[1]) & (fsm_output[5]) & (~ (fsm_output[8])) &
      (fsm_output[6]);
  assign nor_605_nl = ~((fsm_output[1]) | (fsm_output[5]) | (fsm_output[6]));
  assign mux_1010_nl = MUX_s_1_2_2(and_1497_nl, nor_605_nl, fsm_output[0]);
  assign and_876_cse = mux_1010_nl & nor_510_cse & nor_566_cse;
  assign nor_660_nl = ~((fsm_output[6]) | (fsm_output[3]) | (fsm_output[4]) | (fsm_output[8])
      | (fsm_output[2]));
  assign nor_702_nl = ~((~ (fsm_output[6])) | (fsm_output[3]) | (fsm_output[4]) |
      nand_195_cse);
  assign mux_1007_nl = MUX_s_1_2_2(nor_660_nl, nor_702_nl, fsm_output[5]);
  assign nand_296_nl = ~((fsm_output[0]) & mux_1007_nl);
  assign and_1510_nl = (fsm_output[3]) & (~ mux_1056_cse);
  assign nor_662_nl = ~((fsm_output[3]) | (fsm_output[4]) | (fsm_output[8]) | (fsm_output[2]));
  assign mux_1006_nl = MUX_s_1_2_2(and_1510_nl, nor_662_nl, fsm_output[6]);
  assign nand_297_nl = ~((~((fsm_output[0]) | (~ (fsm_output[5])))) & mux_1006_nl);
  assign mux_1008_cse = MUX_s_1_2_2(nand_296_nl, nand_297_nl, fsm_output[1]);
  assign nand_268_nl = ~((fsm_output[3]) & (~ mux_1056_cse));
  assign or_1304_nl = (fsm_output[3]) | (fsm_output[4]) | (fsm_output[8]) | (fsm_output[2]);
  assign mux_1013_nl = MUX_s_1_2_2(nand_268_nl, or_1304_nl, fsm_output[6]);
  assign nor_705_nl = ~((~ (fsm_output[5])) | (fsm_output[0]) | mux_1013_nl);
  assign nor_706_nl = ~((fsm_output[5]) | (~ (fsm_output[0])) | (fsm_output[6]) |
      (fsm_output[3]) | (fsm_output[4]) | nand_195_cse);
  assign mux_1014_cse = MUX_s_1_2_2(nor_705_nl, nor_706_nl, fsm_output[7]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_nor_cse = ~(and_1051_cse | and_1291_cse);
  assign RMS_NORM_LOOP_1_1_or_1_itm = and_dcpl_556 | and_dcpl_570 | and_dcpl_573;
  assign compute_sqrt_for_guess_inv_or_2_itm = and_dcpl_634 | and_dcpl_641;
  assign compute_sqrt_for_guess_inv_nor_seb = ~(and_dcpl_629 | and_dcpl_656 | and_dcpl_666);
  assign compute_sqrt_for_guess_inv_or_4_itm = and_dcpl_629 | and_dcpl_666;
  assign compute_sqrt_for_guess_inv_or_3_itm = and_dcpl_641 | and_dcpl_659 | and_dcpl_663;
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39 <= 1'b0;
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0 <= 39'b000000000000000000000000000000000000000;
    end
    else if ( QUANTIZE_ACTIVATION_LOOP_1_max_val_and_cse ) begin
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39 <= QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39_mx0w2;
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0 <= QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0_mx0w2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_90 | or_392_cse | (fsm_output[1:0]!=2'b10)
        | QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_itm_17_1)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_17_svs
          <= readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39 <= 1'b0;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0 <= 39'b000000000000000000000000000000000000000;
    end
    else if ( QUANTIZE_ACTIVATION_LOOP_1_1_max_val_and_cse ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39 <= QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39_mx0w2;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0 <= QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0_mx0w2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_96 | or_tmp_216 | or_dcpl_93 | (fsm_output[1:0]!=2'b11)
        | QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_itm_17_1)) ) begin
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_17_svs
          <= readslicef_18_1_17(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      strm_out_rsci_idat_31_2 <= 30'b000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(or_tmp_229 | (~ (fsm_output[8])) | or_1158_cse
        | or_dcpl_101)) ) begin
      strm_out_rsci_idat_31_2 <= output_rsci_q_d[29:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd <= 1'b0;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1 <= 1'b0;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_0 <= 30'b000000000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39 <= 1'b0;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30 <= 9'b000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71_32
          <= 40'b0000000000000000000000000000000000000000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55 <= 1'b0;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_16 <= 39'b000000000000000000000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_39
          <= 21'b000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_0
          <= 39'b000000000000000000000000000000000000000;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39 <= 1'b0;
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_0 <= 39'b000000000000000000000000000000000000000;
      reg_strm_out_rsci_iswt0_cse <= 1'b0;
      reg_strm_in_rsci_iswt0_cse <= 1'b0;
      reg_rms_norm_384_div_cmp_b_ftd_59_38 <= 22'b0000000000000000000000;
      reg_rms_norm_384_div_cmp_b_ftd_37_0 <= 38'b00000000000000000000000000000000000000;
      reg_rms_norm_384_div_cmp_b_ftd_1 <= 1'b0;
      reg_rms_norm_384_div_cmp_a_ftd <= 40'b0000000000000000000000000000000000000000;
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_39 <= 1'b0;
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_38_0 <= 39'b000000000000000000000000000000000000000;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_39 <= 1'b0;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_38_0 <= 39'b000000000000000000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17
          <= 1'b0;
      for_for_strm_in_tmp_sva_31_2 <= 30'b000000000000000000000000000000;
      RMS_NORM_LOOP_1_1_slc_RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mul_55_16_itm <=
          40'b0000000000000000000000000000000000000000;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse <= 6'b000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm <= 8'b00000000;
      operator_40_24_true_AC_TRN_AC_WRAP_and_1_itm <= 1'b0;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm <= 9'b000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm <= 16'b0000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm <= 17'b00000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm <= 24'b000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm <= 25'b0000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm <= 31'b0000000000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm <= 30'b000000000000000000000000000000;
      SF_LOOP_3_acc_17_itm_18_9 <= 10'b0000000000;
      SF_LOOP_3_acc_17_itm_8_0 <= 9'b000000000;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd <= 4'b0000;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1 <= 3'b000;
      RMS_NORM_LOOP_2_mul_1_itm <= 52'b0000000000000000000000000000000000000000000000000000;
      GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva <= 3'b000;
      reg_attention_round_a_cse_slc <= 4'b0000;
      attention_round_qr_39_16_lpi_4_dfm_7_0 <= 8'b00000000;
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_17_svs
          <= 1'b0;
      LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs
          <= 2'b00;
      RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1 <= 4'b0000;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_8_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_3_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm <= 56'b00000000000000000000000000000000000000000000000000000000;
      CACHE_UPDATE_LOOP_3_qr_sva_1 <= 40'b0000000000000000000000000000000000000000;
      CACHE_UPDATE_LOOP_3_1_qr_sva_1 <= 40'b0000000000000000000000000000000000000000;
      CACHE_UPDATE_LOOP_3_1_acc_18_psp_1 <= 4'b0000;
      CACHE_UPDATE_LOOP_3_acc_18_psp_1 <= 4'b0000;
      SF_LOOP_3_acc_11_itm_17_15 <= 3'b000;
      SF_LOOP_3_acc_11_itm_13_0 <= 14'b00000000000000;
      SF_LOOP_3_mul_12_itm_16_15 <= 2'b00;
      SF_LOOP_3_mul_12_itm_12_9_slc <= 3'b000;
      SF_LOOP_3_mul_12_itm_3_0 <= 4'b0000;
      SF_LOOP_3_mul_15_itm_16_10 <= 7'b0000000;
      SF_LOOP_3_mul_15_itm_6_0 <= 7'b0000000;
      SF_LOOP_3_acc_15_itm <= 19'b0000000000000000000;
      SF_LOOP_3_acc_16_itm <= 19'b0000000000000000000;
      SF_LOOP_3_acc_30_psp <= 20'b00000000000000000000;
      SF_LOOP_3_acc_39_itm <= 7'b0000000;
      SF_LOOP_3_mul_19_itm_12_11 <= 2'b00;
      SF_LOOP_3_mul_19_itm_9_4 <= 6'b000000;
      SF_LOOP_3_acc_93_psp <= 4'b0000;
      SF_LOOP_3_acc_40_itm <= 11'b00000000000;
      SF_LOOP_3_acc_6_psp_sva_18_17 <= 2'b00;
      SF_LOOP_3_acc_35_itm <= 18'b000000000000000000;
      SF_LOOP_3_acc_46_itm <= 19'b0000000000000000000;
      SF_LOOP_3_acc_50_itm <= 26'b00000000000000000000000000;
      SF_LOOP_3_acc_54_itm <= 32'b00000000000000000000000000000000;
      SF_LOOP_3_acc_58_itm <= 38'b00000000000000000000000000000000000000;
      operator_80_48_true_AC_TRN_AC_WRAP_operator_80_48_true_AC_TRN_AC_WRAP_slc_SOFTMAX_LOOP_4_sqr_56_1_itm_slc
          <= 5'b00000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm <= 8'b00000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm <= 9'b000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm <= 16'b0000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm <= 17'b00000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm <= 24'b000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm <= 25'b0000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm <= 31'b0000000000000000000000000000000;
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm <= 30'b000000000000000000000000000000;
      RMS_NORM_LOOP_2_2_mul_1_itm <= 53'b00000000000000000000000000000000000000000000000000000;
      attention_round_1_qr_39_16_lpi_4_dfm_7_0 <= 8'b00000000;
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_17_svs
          <= 1'b0;
      INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd <= or_351_ssc;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_a_32_0_ftd_1 <= ~ or_351_ssc;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_29_0 <= MUX1HOT_v_30_8_2(compute_sqrt_guess_sva_29_0,
          attention_abs_qif_acc_pmx_lpi_1_dfm_mx1_30_1, (compute_sqrt_for_acc_1_itm_40_1_1[29:0]),
          (attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_0[29:0]),
          (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29:0]), compute_sqrt_1_guess_sva_29_0,
          attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx1_30_1, (compute_sqrt_1_for_acc_1_itm_40_1_1[29:0]),
          {and_144_nl , compute_sqrt_guess_and_1_nl , and_dcpl_154 , and_dcpl_140
          , and_dcpl_144 , and_156_nl , compute_sqrt_guess_and_3_nl , and_dcpl_156});
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_39 <= operator_40_24_true_AC_TRN_AC_WRAP_mux1h_nl
          & nor_seb;
      operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_b_38_30 <= MUX_v_9_2_2(9'b000000000,
          operator_40_24_true_AC_TRN_AC_WRAP_mux1h_2_nl, nor_seb);
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_a_71_32
          <= MUX1HOT_v_40_5_2(attention_5_1_384_384_8_48_v_proj_re_rsci_q_d, INIT_2D_MEM_LOOP_2_2_asn_psp,
          40'b0000000000000000000000000000000001111111, output_rsci_q_d, INIT_2D_MEM_LOOP_2_1_asn_psp,
          {and_dcpl_159 , and_dcpl_160 , mux_337_nl , and_174_nl , and_175_nl});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_55 <= GEMM_3D_FLOAT_LOOP_3_mux_nl
          & (~ and_182_ssc);
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_a_54_16 <= MUX1HOT_v_39_3_2((attention_5_1_384_384_8_48_attn_weights_rsci_q_d[38:0]),
          reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1, 39'b000000000000000000000010000000000000000,
          {and_180_nl , and_181_ssc , and_182_ssc});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_59_39
          <= MUX1HOT_v_21_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_mul_1_itm[59:39]),
          ({{20{attention_max_attn_fixed_t_1_conc_psp_mx0w11_39}}, attention_max_attn_fixed_t_1_conc_psp_mx0w11_39}),
          ({{20{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_3_mul_1_itm[59:39]), {and_dcpl_174 , and_dcpl_176
          , and_187_ssc , and_188_ssc});
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_b_38_0
          <= MUX1HOT_v_39_4_2((LINEAR_FORWARD_NO_MUL_LOOP_2_2_mul_1_itm[38:0]), attention_max_attn_fixed_t_1_conc_psp_mx0w11_38_0,
          reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1, (LINEAR_FORWARD_NO_MUL_LOOP_2_3_mul_1_itm[38:0]),
          {and_dcpl_174 , and_dcpl_176 , and_187_ssc , and_188_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_39 <= MUX1HOT_s_1_3_2((softmax_1_8_6_sum_sva_1[39]),
          (compute_sqrt_1_for_acc_1_itm_40_1_1[39]), reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd,
          {and_189_ssc , and_dcpl_156 , and_190_ssc});
      SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_b_38_0 <= MUX1HOT_v_39_3_2((softmax_1_8_6_sum_sva_1[38:0]),
          (compute_sqrt_1_for_acc_1_itm_40_1_1[38:0]), reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1,
          {and_189_ssc , and_dcpl_156 , and_190_ssc});
      reg_strm_out_rsci_iswt0_cse <= and_dcpl_131 & and_dcpl_182;
      reg_strm_in_rsci_iswt0_cse <= ~(or_dcpl_111 | or_1158_cse | mux_372_nl | or_392_cse);
      reg_rms_norm_384_div_cmp_b_ftd_59_38 <= MUX1HOT_v_22_4_2((signext_22_1(compute_sqrt_for_acc_1_itm_40_1_1[39])),
          ({{21{reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}}, reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd}),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_1_mul_1_itm[60:39]), (LINEAR_FORWARD_NO_MUL_LOOP_2_mul_1_itm[59:38]),
          {and_dcpl_154 , and_193_itm , and_dcpl_174 , and_dcpl_186});
      reg_rms_norm_384_div_cmp_b_ftd_37_0 <= MUX1HOT_v_38_4_2((compute_sqrt_for_acc_1_itm_40_1_1[38:1]),
          (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:1]), (LINEAR_FORWARD_NO_MUL_LOOP_2_1_mul_1_itm[38:1]),
          (LINEAR_FORWARD_NO_MUL_LOOP_2_mul_1_itm[37:0]), {and_dcpl_154 , and_193_itm
          , and_dcpl_174 , and_dcpl_186});
      reg_rms_norm_384_div_cmp_b_ftd_1 <= rms_norm_384_mux1h_7_nl & (~ and_dcpl_186);
      reg_rms_norm_384_div_cmp_a_ftd <= MUX1HOT_v_40_4_2(40'b0000000000000000000000000000000000000001,
          attention_5_1_384_384_8_48_k_proj_re_rsci_q_d, INIT_2D_MEM_LOOP_2_1_asn_psp,
          GEMM_3D_FLOAT_LOOP_4_1_asn_itm, {and_196_nl , and_dcpl_159 , and_dcpl_160
          , and_dcpl_186});
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_39 <= QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39_mx0w2;
      QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_dfm_1_38_0 <= QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0_mx0w2;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_39 <= QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39_mx0w2;
      QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_dfm_1_38_0 <= QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0_mx0w2;
      operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17
          <= MUX_s_1_2_2((operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[17]), (z_out_4[17]),
          and_dcpl_361);
      for_for_strm_in_tmp_sva_31_2 <= strm_in_rsci_idat_mxwt;
      RMS_NORM_LOOP_1_1_slc_RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mul_55_16_itm <=
          z_out_20_67_16[39:0];
      reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse <= nl_reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse[5:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm[7:0];
      operator_40_24_true_AC_TRN_AC_WRAP_and_1_itm <= (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])
          & (~ (z_out_9_1_0[1])) & ((z_out_9_1_0[0]) | (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[6:0]!=7'b0000000));
      operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm[8:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm[15:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm[16:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm[23:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm[24:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm[30:0];
      operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm[29:0];
      SF_LOOP_3_acc_17_itm_18_9 <= MUX_v_10_2_2((z_out_27[18:9]), (SF_LOOP_3_acc_17_sdt[18:9]),
          and_dcpl_445);
      SF_LOOP_3_acc_17_itm_8_0 <= MUX1HOT_v_9_3_2(RMS_NORM_LOOP_2_2_asn_SF_LOOP_3_acc_17_itm_1_8_RMS_NORM_LOOP_2_and_nl,
          (z_out_27[8:0]), (SF_LOOP_3_acc_17_sdt[8:0]), {(~ mux_680_nl) , and_dcpl_361
          , and_dcpl_445});
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd <= z_out_14_23_0[23:20];
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1 <= MUX_v_3_2_2((z_out_14_23_0[19:17]),
          (operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0[19:17]), and_461_itm);
      RMS_NORM_LOOP_2_mul_1_itm <= z_out_5[51:0];
      GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva <= MUX_v_3_2_2(3'b000, GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_4_nl,
          mux_742_nl);
      reg_attention_round_a_cse_slc <= z_out_5[55:52];
      attention_round_qr_39_16_lpi_4_dfm_7_0 <= MUX_v_8_2_2((z_out_14_23_0[7:0]),
          (attention_round_qr_39_16_lpi_4_dfm_mx0w0[7:0]), attention_round_acc_itm_40_1);
      QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_17_svs
          <= QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_acc_itm_17_1;
      LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs
          <= MUX_v_2_2_2(LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_mux_tmp, SF_LOOP_3_acc_90_nl,
          and_dcpl_454);
      RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1 <= MUX_v_4_2_2(RESHAPE_2D_TO_3D_LOOP_3_acc_11_psp_1_mx0w0,
          SF_LOOP_3_acc_92_nl, and_dcpl_454);
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_8_itm <= z_out_25;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_9_itm <= z_out_26;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_3_itm <= z_out_27;
      APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm <= nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm[55:0];
      CACHE_UPDATE_LOOP_3_qr_sva_1 <= CACHE_UPDATE_LOOP_3_qif_read_rom_k_cache_rom_map_1_itm;
      CACHE_UPDATE_LOOP_3_1_qr_sva_1 <= CACHE_UPDATE_LOOP_3_1_qif_read_rom_v_cache_rom_map_1_itm;
      CACHE_UPDATE_LOOP_3_1_acc_18_psp_1 <= z_out_32;
      CACHE_UPDATE_LOOP_3_acc_18_psp_1 <= z_out_33;
      SF_LOOP_3_acc_11_itm_17_15 <= SF_LOOP_3_acc_11_itm_1[17:15];
      SF_LOOP_3_acc_11_itm_13_0 <= SF_LOOP_3_acc_11_itm_1[13:0];
      SF_LOOP_3_mul_12_itm_16_15 <= z_out_21[16:15];
      SF_LOOP_3_mul_12_itm_12_9_slc <= z_out_21[12:10];
      SF_LOOP_3_mul_12_itm_3_0 <= z_out_21[3:0];
      SF_LOOP_3_mul_15_itm_16_10 <= SF_LOOP_3_mul_15_itm_1[16:10];
      SF_LOOP_3_mul_15_itm_6_0 <= SF_LOOP_3_mul_15_itm_1[6:0];
      SF_LOOP_3_acc_15_itm <= nl_SF_LOOP_3_acc_15_itm[18:0];
      SF_LOOP_3_acc_16_itm <= nl_SF_LOOP_3_acc_16_itm[18:0];
      SF_LOOP_3_acc_30_psp <= nl_SF_LOOP_3_acc_30_psp[19:0];
      SF_LOOP_3_acc_39_itm <= nl_SF_LOOP_3_acc_39_itm[6:0];
      SF_LOOP_3_mul_19_itm_12_11 <= z_out_21[12:11];
      SF_LOOP_3_mul_19_itm_9_4 <= z_out_21[9:4];
      SF_LOOP_3_acc_93_psp <= nl_SF_LOOP_3_acc_93_psp[3:0];
      SF_LOOP_3_acc_40_itm <= nl_SF_LOOP_3_acc_40_itm[10:0];
      SF_LOOP_3_acc_6_psp_sva_18_17 <= SF_LOOP_3_acc_6_psp_sva_1[18:17];
      SF_LOOP_3_acc_35_itm <= nl_SF_LOOP_3_acc_35_itm[17:0];
      SF_LOOP_3_acc_46_itm <= nl_SF_LOOP_3_acc_46_itm[18:0];
      SF_LOOP_3_acc_50_itm <= nl_SF_LOOP_3_acc_50_itm[25:0];
      SF_LOOP_3_acc_54_itm <= nl_SF_LOOP_3_acc_54_itm[31:0];
      SF_LOOP_3_acc_58_itm <= nl_SF_LOOP_3_acc_58_itm[37:0];
      operator_80_48_true_AC_TRN_AC_WRAP_operator_80_48_true_AC_TRN_AC_WRAP_slc_SOFTMAX_LOOP_4_sqr_56_1_itm_slc
          <= z_out_5[56:52];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm[7:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm[8:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm[15:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm[16:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm[23:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm[24:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm[30:0];
      operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm <= nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm[29:0];
      RMS_NORM_LOOP_2_2_mul_1_itm <= z_out_19[52:0];
      attention_round_1_qr_39_16_lpi_4_dfm_7_0 <= MUX_v_8_2_2((z_out_14_23_0[7:0]),
          (attention_round_1_qr_39_16_lpi_4_dfm_mx0w0[7:0]), attention_round_1_acc_itm_40_1);
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_slc_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_17_svs
          <= QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_acc_itm_17_1;
      INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm <= INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_4_1_asn_itm <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & mux_465_nl ) begin
      GEMM_3D_FLOAT_LOOP_4_1_asn_itm <= MUX_v_40_2_2(40'b0000000000000000000000000000000000000000,
          rms_norm_384_variance_mux1h_nl, GEMM_3D_FLOAT_LOOP_4_1_nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INIT_2D_MEM_LOOP_2_2_acc_itm <= 9'b000000000;
    end
    else if ( input_rsc_clken_d_1 & (~ mux_476_nl) ) begin
      INIT_2D_MEM_LOOP_2_2_acc_itm <= MUX_v_9_2_2(9'b000000000, INIT_2D_MEM_LOOP_2_2_mux1h_15_nl,
          INIT_2D_MEM_LOOP_2_2_nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd
          <= 8'b00000000;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1
          <= 9'b000000000;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2 <= 4'b0000;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3 <= 1'b0;
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4 <= 3'b000;
    end
    else if ( operator_40_24_true_AC_TRN_AC_WRAP_1_and_2_ssc ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd
          <= MUX1HOT_v_8_3_2((operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[16:9]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm[16:9]),
          (z_out_4[16:9]), {and_382_itm , operator_40_24_true_AC_TRN_AC_WRAP_1_and_itm
          , and_dcpl_361});
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1
          <= MUX1HOT_v_9_4_2(for_for_j_and_nl, (operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[8:0]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_cosval_read_rom_cos_tab_rom_map_1_itm[8:0]),
          (z_out_4[8:0]), {(~ mux_516_nl) , and_382_itm , operator_40_24_true_AC_TRN_AC_WRAP_1_and_itm
          , and_dcpl_361});
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2 <= MUX1HOT_v_4_3_2((z_out_14_23_0[16:13]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm[16:13]),
          (operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0[16:13]), {operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_or_3_cse
          , and_dcpl_374 , and_461_itm});
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3 <= MUX1HOT_s_1_4_2((z_out_14_23_0[12]),
          (APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm[12]),
          (operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0[12]), (RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm[12]),
          {operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_or_3_cse , and_dcpl_374 ,
          and_461_itm , and_dcpl_215});
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4 <= MUX1HOT_v_3_5_2((RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm[11:9]),
          (z_out_14_23_0[11:9]), (APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm[11:9]),
          (operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0[11:9]), (RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm[11:9]),
          {and_349_itm , operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_or_3_cse , and_dcpl_374
          , and_461_itm , and_dcpl_215});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (and_dcpl_342 | and_dcpl_369 | and_dcpl_291 |
        and_dcpl_317 | and_dcpl_298 | and_dcpl_311 | CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c6
        | and_dcpl_379 | and_dcpl_284) ) begin
      CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm <= MUX1HOT_s_1_9_2(for_for_for_for_nor_nl,
          nand_184_cse, INIT_2D_MEM_LOOP_2_and_1_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_1_or_cse,
          LINEAR_FORWARD_NO_MUL_LOOP_5_LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp, LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_nl,
          LINEAR_FORWARD_NO_MUL_LOOP_2_LINEAR_FORWARD_NO_MUL_LOOP_2_nor_tmp, CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_nl,
          (~ z_out_28_2), {and_dcpl_342 , and_dcpl_369 , and_dcpl_291 , and_dcpl_317
          , and_dcpl_298 , and_dcpl_311 , CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm_mx0c6
          , and_dcpl_379 , and_dcpl_284});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_abs_qif_acc_pmx_lpi_1_dfm <= 31'b0000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(((or_353_cse & (fsm_output[3])) ^ (fsm_output[4]))
        & and_dcpl_134)) ) begin
      attention_abs_qif_acc_pmx_lpi_1_dfm <= MUX_v_31_2_2(attention_abs_qif_acc_pmx_lpi_1_dfm_mx0w0,
          (rms_norm_384_val_acc_psp_sva_1[30:0]), and_396_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      compute_sqrt_guess_sva_29_0 <= 30'b000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & ((and_dcpl_111 & and_dcpl_128) | and_dcpl_154)
        ) begin
      compute_sqrt_guess_sva_29_0 <= MUX_v_30_2_2(attention_abs_qif_acc_pmx_lpi_1_dfm_mx1_30_1,
          (compute_sqrt_for_acc_1_itm_40_1_1[29:0]), and_dcpl_154);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt <= 4'b0000;
    end
    else if ( input_rsc_clken_d_1 & mux_560_nl ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt <= MUX_v_4_2_2(4'b0000, compute_sqrt_for_i_mux1h_nl,
          mux_573_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      RMS_NORM_LOOP_2_2_dfr_sva_9 <= 1'b0;
      RMS_NORM_LOOP_2_2_dfr_sva_8_0 <= 9'b000000000;
    end
    else if ( RMS_NORM_LOOP_2_2_and_ssc ) begin
      RMS_NORM_LOOP_2_2_dfr_sva_9 <= (operator_40_24_true_AC_TRN_AC_WRAP_mux_nl &
          (~ RMS_NORM_LOOP_2_2_dfr_sva_mx0c3) & (~ RMS_NORM_LOOP_2_2_dfr_sva_mx0c0))
          | RMS_NORM_LOOP_2_2_dfr_sva_mx0c2;
      RMS_NORM_LOOP_2_2_dfr_sva_8_0 <= MUX_v_9_2_2(operator_40_24_true_AC_TRN_AC_WRAP_and_1_nl,
          9'b111111111, RMS_NORM_LOOP_2_2_dfr_sva_mx0c2);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (and_dcpl_393 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1
        | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2
        | and_dcpl_263 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c4
        | and_dcpl_245 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c6
        | and_dcpl_213 | and_dcpl_331) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm <= MUX1HOT_s_1_4_2((z_out_10[3]),
          z_out_28_2, z_out_29_2, z_out_30_2, {and_dcpl_393 , compute_sqrt_for_or_3_nl
          , compute_sqrt_for_or_4_nl , compute_sqrt_for_or_5_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd <= 1'b0;
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1 <= 39'b000000000000000000000000000000000000000;
    end
    else if ( GEMM_3D_FLOAT_LOOP_3_and_ssc ) begin
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd <= MUX1HOT_s_1_11_2((compute_sqrt_for_acc_1_itm_40_1_1[39]),
          (input_rsci_q_d[39]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39,
          (operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[39]), (attention_5_1_384_384_8_48_q_proj_rsci_q_d[39]),
          (attention_5_1_384_384_8_48_q_embed_rsci_q_d[39]), (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[39]),
          (z_out[39]), (attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d[39]),
          (compute_sqrt_1_for_acc_1_itm_40_1_1[39]), attention_max_attn_fixed_t_1_conc_psp_mx0w11_39,
          {and_dcpl_154 , and_433_itm , and_dcpl_140 , and_434_itm , and_dcpl_350
          , and_dcpl_351 , and_439_itm , and_440_itm , and_441_itm , and_dcpl_156
          , and_dcpl_176});
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1 <= MUX1HOT_v_39_11_2((compute_sqrt_for_acc_1_itm_40_1_1[38:0]),
          (input_rsci_q_d[38:0]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_0,
          (operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z[38:0]), (attention_5_1_384_384_8_48_q_proj_rsci_q_d[38:0]),
          (attention_5_1_384_384_8_48_q_embed_rsci_q_d[38:0]), (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[38:0]),
          (z_out[38:0]), (attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d[38:0]),
          (compute_sqrt_1_for_acc_1_itm_40_1_1[38:0]), attention_max_attn_fixed_t_1_conc_psp_mx0w11_38_0,
          {and_dcpl_154 , and_433_itm , and_dcpl_140 , and_434_itm , and_dcpl_350
          , and_dcpl_351 , and_439_itm , and_440_itm , and_441_itm , and_dcpl_156
          , and_dcpl_176});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_QUANTIZE_ACTIVATION_LOOP_2_sva_dfm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_138 | or_dcpl_137)) ) begin
      exit_QUANTIZE_ACTIVATION_LOOP_2_sva_dfm <= exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5 <= 9'b000000000;
    end
    else if ( input_rsc_clken_d_1 & (~ and_dcpl_512) & (~ and_dcpl_350) ) begin
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5 <= MUX1HOT_v_9_6_2((RMS_NORM_LOOP_2_read_rom_ln_weight_in_rom_map_1_itm[8:0]),
          (z_out_14_23_0[8:0]), z_out_3, (APPLY_ROTARY_POS_EMB_LOOP_6_sinval_read_rom_sin_tab_rom_map_1_itm[8:0]),
          (operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_conc_2_itm_19_0[8:0]), (RMS_NORM_LOOP_2_2_read_rom_ln_weight_rom_map_1_itm[8:0]),
          {and_349_itm , operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_or_3_cse , and_dcpl_409
          , and_dcpl_374 , and_461_itm , and_dcpl_215});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_acc_26_itm_19_9 <= 11'b00000000000;
    end
    else if ( SF_LOOP_3_and_ssc ) begin
      SF_LOOP_3_acc_26_itm_19_9 <= SF_LOOP_3_acc_26_sdt[19:9];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_acc_26_itm_8_0 <= 9'b000000000;
    end
    else if ( SF_LOOP_3_and_ssc & mux_693_nl ) begin
      SF_LOOP_3_acc_26_itm_8_0 <= MUX_v_9_2_2(z_out_1, (SF_LOOP_3_acc_26_sdt[8:0]),
          and_dcpl_361);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_138 | nand_258_cse | or_603_cse))
        ) begin
      RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva <= z_out_20_67_16[51:12];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_abs_3_qr_sva <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(and_dcpl_118 & and_dcpl_167)) ) begin
      attention_abs_3_qr_sva <= attention_abs_2_mux_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_2_slc_40_1_svs <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_138 | nand_258_cse | or_1213_cse))
        ) begin
      QUANTIZE_ACTIVATION_LOOP_2_slc_40_1_svs <= readslicef_41_1_40(QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2 <= 4'b0000;
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0 <= 2'b00;
    end
    else if ( APPLY_ROTARY_POS_EMB_LOOP_6_k_and_3_cse ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2 <= RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2[5:2];
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0 <= MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_nl,
          (RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2[1:0]), and_469_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0 <= 3'b000;
    end
    else if ( input_rsc_clken_d_1 & mux_817_nl ) begin
      APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0 <= MUX_v_3_2_2(3'b000, QUANTIZE_ACTIVATION_LOOP_5_1_k_mux1h_1_nl,
          APPLY_ROTARY_POS_EMB_LOOP_1_i_nand_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0 <= 4'b0000;
    end
    else if ( input_rsc_clken_d_1 & (and_dcpl_461 | and_dcpl_462 | and_dcpl_306 |
        and_dcpl_243) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_3_0 <= MUX_v_4_2_2(4'b0000, LINEAR_FORWARD_NO_MUL_LOOP_4_ki_mux1h_2_nl,
          not_2161_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 <= 3'b000;
    end
    else if ( input_rsc_clken_d_1 & (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c0 |
        GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1 | GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c2
        | GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c3) ) begin
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0 <= MUX_v_3_2_2(3'b000, GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_5_nl,
          GEMM_3D_FLOAT_LOOP_1_1_i_not_2_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd <= 2'b00;
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 <= 1'b0;
    end
    else if ( CACHE_UPDATE_LOOP_2_1_j_and_ssc ) begin
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd <= MUX_v_2_2_2(2'b00, GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_6_nl,
          CACHE_UPDATE_LOOP_2_1_j_not_1_nl);
      reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1 <= GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_7_nl
          & (~ CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4 <= 4'b0000;
    end
    else if ( input_rsc_clken_d_1 & (mux_903_nl | (fsm_output[8])) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4 <= MUX_v_4_2_2(4'b0000, APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_15_nl,
          not_2162_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva <= 8'b00000000;
      LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva <= 8'b00000000;
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva <= 8'b00000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_and_cse ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_sva <= LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_read_rom_v_weights_rom_map_1_itm;
      LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva <= LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_read_rom_k_weights_rom_map_1_itm;
      LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva <= LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_read_rom_q_weights_rom_map_1_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd <= 3'b000;
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd <= 1'b0;
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1 <= 1'b0;
    end
    else if ( APPLY_ROTARY_POS_EMB_LOOP_3_and_ssc ) begin
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd <= MUX_v_3_2_2((APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1[3:1]),
          (z_out_11[4:2]), APPLY_ROTARY_POS_EMB_LOOP_3_or_2_cse);
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd <= MUX1HOT_s_1_3_2(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_nl,
          (APPLY_ROTARY_POS_EMB_LOOP_3_mux1h_7_itm_4_1[0]), (z_out_11[1]), {APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0
          , and_dcpl_284 , APPLY_ROTARY_POS_EMB_LOOP_3_or_2_cse});
      reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1 <= MUX1HOT_s_1_3_2(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_4_nl,
          (z_out_35[0]), (z_out_11[0]), {APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_cse_sva_mx0c0
          , and_dcpl_284 , APPLY_ROTARY_POS_EMB_LOOP_3_or_2_cse});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_2 <= 4'b0000;
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0 <= 2'b00;
    end
    else if ( CACHE_UPDATE_LOOP_3_k_and_1_cse ) begin
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_2 <= RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[5:2];
      CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0 <= MUX_v_2_2_2(QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_1_nl,
          (RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[1:0]), and_dcpl_379);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs
          <= 2'b00;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_90 | or_dcpl_137)) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs
          <= MUX_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva[1:0]), (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva[3:2]),
          (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva[5:4]), (LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_sva[7:6]),
          {reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0 <= 3'b000;
    end
    else if ( input_rsc_clken_d_1 & (~((~ mux_931_nl) & and_dcpl_482)) ) begin
      CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0 <= MUX1HOT_v_3_3_2(LINEAR_FORWARD_NO_MUL_LOOP_5_acc_2_nl,
          z_out_34_2_0, SF_LOOP_3_acc_81_nl, {and_dcpl_316 , and_dcpl_488 , and_dcpl_361});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_4_3 <= 2'b00;
    end
    else if ( RESHAPE_2D_TO_3D_LOOP_3_2_and_ssc ) begin
      RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_4_3 <= APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2[4:3];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0 <= 3'b000;
    end
    else if ( RESHAPE_2D_TO_3D_LOOP_3_2_and_ssc & (~(mux_928_nl & and_dcpl_39)) )
        begin
      RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0 <= MUX1HOT_v_3_6_2(LINEAR_FORWARD_NO_MUL_LOOP_5_2_acc_2_nl,
          z_out_36_2_0, SF_LOOP_3_acc_69_nl, SF_LOOP_3_acc_91_nl, LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2,
          (APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2[2:0]), {and_dcpl_316 , and_dcpl_488
          , and_dcpl_361 , and_dcpl_454 , and_dcpl_247 , and_dcpl_284});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (and_dcpl_317 | LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm_mx0c1
        | and_dcpl_503) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm <= LINEAR_FORWARD_NO_MUL_LOOP_5_mux_1_nl
          & (~ LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm_mx0c1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INIT_2D_MEM_LOOP_2_1_asn_psp <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & mux_950_nl ) begin
      INIT_2D_MEM_LOOP_2_1_asn_psp <= MUX1HOT_v_40_6_2(attention_5_1_384_384_8_48_k_proj_re_rsci_q_d,
          attention_5_1_384_384_8_48_k_proj_rsci_q_d, attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d,
          attention_5_1_384_384_8_48_attn_weights_rsci_q_d, attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d,
          output_rsci_q_d, {and_dcpl_349 , and_dcpl_350 , and_dcpl_351 , and_527_nl
          , and_dcpl_355 , and_531_nl});
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      INIT_2D_MEM_LOOP_2_2_asn_psp <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (and_dcpl_349 | and_dcpl_350) ) begin
      INIT_2D_MEM_LOOP_2_2_asn_psp <= MUX_v_40_2_2(attention_5_1_384_384_8_48_v_proj_re_rsci_q_d,
          apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d, and_dcpl_350);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_mul_1_itm <= 60'b000000000000000000000000000000000000000000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_mul_1_itm <= 60'b000000000000000000000000000000000000000000000000000000000000;
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_mul_1_itm <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( LINEAR_FORWARD_NO_MUL_LOOP_2_and_cse ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_mul_1_itm <= z_out_7;
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_mul_1_itm <= z_out_6;
      LINEAR_FORWARD_NO_MUL_LOOP_2_1_mul_1_itm <= z_out_5;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva <= 6'b000000;
    end
    else if ( input_rsc_clken_d_1 & (~(mux_969_nl & and_dcpl_29)) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva <= MUX_v_6_2_2(6'b000000, ({APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_10_nl
          , APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_13_nl}), mux_958_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd <= 1'b0;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1 <= 2'b00;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 <= 1'b0;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1 <= 2'b00;
    end
    else if ( CACHE_UPDATE_LOOP_3_k_and_ssc ) begin
      reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd <= APPLY_ROTARY_POS_EMB_LOOP_6_k_APPLY_ROTARY_POS_EMB_LOOP_6_k_mux_1_nl
          & CACHE_UPDATE_LOOP_3_k_nand_1_itm;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1 <= MUX_v_2_2_2(2'b00, APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_12_nl,
          CACHE_UPDATE_LOOP_3_k_nand_1_itm);
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 <= APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_15_nl
          & CACHE_UPDATE_LOOP_3_k_nand_1_itm;
      reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1 <= MUX_v_2_2_2(2'b00, APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_14_nl,
          CACHE_UPDATE_LOOP_3_k_nand_1_itm);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva <= 5'b00000;
    end
    else if ( input_rsc_clken_d_1 & (~((~ mux_993_nl) & and_dcpl_527)) ) begin
      APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva <= z_out_10;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_APPLY_ROTARY_POS_EMB_LOOP_3_sva_dfm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_tmp_229 | (fsm_output[8]) | or_tmp_197
        | or_dcpl_101)) ) begin
      exit_APPLY_ROTARY_POS_EMB_LOOP_3_sva_dfm <= (~ z_out_29_2) | LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_acc_96_psp <= 11'b00000000000;
      SF_LOOP_3_mul_17_itm <= 19'b0000000000000000000;
    end
    else if ( SF_LOOP_3_and_2_cse ) begin
      SF_LOOP_3_acc_96_psp <= nl_SF_LOOP_3_acc_96_psp[10:0];
      SF_LOOP_3_mul_17_itm <= z_out_26[18:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_mul_5_itm_31_30 <= 2'b00;
      SF_LOOP_3_mul_5_itm_28_13 <= 16'b0000000000000000;
      SF_LOOP_3_mul_5_itm_11_0 <= 12'b000000000000;
      SF_LOOP_3_mul_6_itm <= 31'b0000000000000000000000000000000;
      SF_LOOP_3_mul_2_itm_18_17 <= 2'b00;
      SF_LOOP_3_mul_2_itm_15_0 <= 16'b0000000000000000;
      SF_LOOP_3_mul_3_itm_21_20 <= 2'b00;
      SF_LOOP_3_mul_3_itm_18_3 <= 16'b0000000000000000;
      SF_LOOP_3_mul_3_itm_1_0 <= 2'b00;
      SF_LOOP_3_mul_4_itm_23_22 <= 2'b00;
      SF_LOOP_3_mul_4_itm_20_5 <= 16'b0000000000000000;
      SF_LOOP_3_mul_4_itm_3_0 <= 4'b0000;
      SF_LOOP_3_mul_7_itm <= 10'b0000000000;
      SF_LOOP_3_acc_28_itm <= 20'b00000000000000000000;
    end
    else if ( SF_LOOP_3_and_4_ssc ) begin
      SF_LOOP_3_mul_5_itm_31_30 <= z_out_25[31:30];
      SF_LOOP_3_mul_5_itm_28_13 <= z_out_25[28:13];
      SF_LOOP_3_mul_5_itm_11_0 <= z_out_25[11:0];
      SF_LOOP_3_mul_6_itm <= z_out_6[30:0];
      SF_LOOP_3_mul_2_itm_18_17 <= z_out_27[18:17];
      SF_LOOP_3_mul_2_itm_15_0 <= z_out_27[15:0];
      SF_LOOP_3_mul_3_itm_21_20 <= z_out_26[21:20];
      SF_LOOP_3_mul_3_itm_18_3 <= z_out_26[18:3];
      SF_LOOP_3_mul_3_itm_1_0 <= z_out_26[1:0];
      SF_LOOP_3_mul_4_itm_23_22 <= z_out_22[23:22];
      SF_LOOP_3_mul_4_itm_20_5 <= z_out_22[20:5];
      SF_LOOP_3_mul_4_itm_3_0 <= z_out_22[3:0];
      SF_LOOP_3_mul_7_itm <= (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[11:8]) * 6'b100101;
      SF_LOOP_3_acc_28_itm <= nl_SF_LOOP_3_acc_28_itm[19:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_mul_sdt_sva_35_34 <= 2'b00;
      SF_LOOP_3_mul_sdt_sva_32_17 <= 16'b0000000000000000;
      SF_LOOP_3_mul_sdt_sva_15_0 <= 16'b0000000000000000;
    end
    else if ( SF_LOOP_3_and_11_ssc ) begin
      SF_LOOP_3_mul_sdt_sva_35_34 <= z_out_6[35:34];
      SF_LOOP_3_mul_sdt_sva_32_17 <= z_out_6[32:17];
      SF_LOOP_3_mul_sdt_sva_15_0 <= z_out_6[15:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_mul_itm_10_9 <= 2'b00;
      SF_LOOP_3_mul_itm_7_0 <= 8'b00000000;
      SF_LOOP_3_acc_5_psp_sva <= 22'b0000000000000000000000;
    end
    else if ( SF_LOOP_3_and_12_ssc ) begin
      SF_LOOP_3_mul_itm_10_9 <= z_out_22[10:9];
      SF_LOOP_3_mul_itm_7_0 <= z_out_22[7:0];
      SF_LOOP_3_acc_5_psp_sva <= nl_SF_LOOP_3_acc_5_psp_sva[21:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      SF_LOOP_3_mul_1_itm_12_11 <= 2'b00;
      SF_LOOP_3_mul_1_itm_9_0 <= 10'b0000000000;
    end
    else if ( SF_LOOP_3_and_14_ssc ) begin
      SF_LOOP_3_mul_1_itm_12_11 <= z_out_5[12:11];
      SF_LOOP_3_mul_1_itm_9_0 <= z_out_5[9:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      softmax_1_8_6_sum_sva_1 <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~((~ mux_995_nl) & and_dcpl_169)) ) begin
      softmax_1_8_6_sum_sva_1 <= nl_softmax_1_8_6_sum_sva_1[39:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_abs_4_qif_acc_pmx_lpi_1_dfm <= 31'b0000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(((or_354_cse & (fsm_output[3])) ^ (fsm_output[4]))
        & and_dcpl_146)) ) begin
      attention_abs_4_qif_acc_pmx_lpi_1_dfm <= MUX_v_31_2_2(attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx0w0,
          (rms_norm_384_1_val_acc_psp_sva_1[30:0]), and_557_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      compute_sqrt_1_guess_sva_29_0 <= 30'b000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & ((and_dcpl_212 & and_dcpl_149) | and_dcpl_156)
        ) begin
      compute_sqrt_1_guess_sva_29_0 <= MUX_v_30_2_2(attention_abs_4_qif_acc_pmx_lpi_1_dfm_mx1_30_1,
          (compute_sqrt_1_for_acc_1_itm_40_1_1[29:0]), and_dcpl_156);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_181 | or_tmp_197 | nand_258_cse |
        or_dcpl_136)) ) begin
      exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm <= exit_QUANTIZE_ACTIVATION_LOOP_2_1_sva_dfm_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_185 | or_392_cse | or_603_cse)) )
        begin
      RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva <= z_out_19[71:32];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      attention_abs_7_qr_sva <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(and_dcpl_122 & and_dcpl_248)) ) begin
      attention_abs_7_qr_sva <= attention_abs_6_mux_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs <= 1'b0;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_185 | or_392_cse | or_1213_cse)) )
        begin
      QUANTIZE_ACTIVATION_LOOP_2_1_slc_40_1_svs <= readslicef_41_1_40(QUANTIZE_ACTIVATION_LOOP_2_1_acc_4_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva <= 40'b0000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~((~ mux_1002_nl) & (fsm_output[8]))) ) begin
      QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva <= LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_div_1_cmp_z[39:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva <= 8'b00000000;
    end
    else if ( input_rsc_clken_d_1 & (~(mux_1003_nl & and_dcpl_163)) ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_sva <= LINEAR_FORWARD_NO_MUL_LOOP_4_3_packed_val_read_rom_o_weights_rom_map_1_itm;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_mul_1_itm <= 60'b000000000000000000000000000000000000000000000000000000000000;
    end
    else if ( input_rsc_clken_d_1 & (~(or_dcpl_96 | or_tmp_197 | or_dcpl_93 | or_1213_cse))
        ) begin
      LINEAR_FORWARD_NO_MUL_LOOP_2_3_mul_1_itm <= z_out_7;
    end
  end
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl =  -conv_s2s_17_18(attention_round_qr_39_16_lpi_4_dfm_mx1_23_7);
  assign QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_quantized_value_clamped_qelse_acc_nl[17:0];
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_nl = 
      -conv_s2s_17_18(attention_round_1_qr_39_16_lpi_4_dfm_mx1_23_7);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qelse_acc_nl[17:0];
  assign mux_313_nl = MUX_s_1_2_2(or_tmp_24, mux_tmp_28, or_353_cse);
  assign or_352_nl = (fsm_output[4:3]!=2'b01);
  assign mux_311_nl = MUX_s_1_2_2(mux_tmp_28, or_352_nl, fsm_output[2]);
  assign mux_312_nl = MUX_s_1_2_2(mux_tmp_302, mux_311_nl, fsm_output[1]);
  assign mux_314_nl = MUX_s_1_2_2(mux_313_nl, mux_312_nl, fsm_output[0]);
  assign and_144_nl = (~ mux_314_nl) & and_dcpl_134;
  assign compute_sqrt_guess_and_1_nl = (~ and_dcpl_154) & and_dcpl_134 & and_dcpl_128;
  assign mux_317_nl = MUX_s_1_2_2(or_tmp_24, mux_tmp_28, or_354_cse);
  assign and_156_nl = (~ mux_317_nl) & and_dcpl_146;
  assign compute_sqrt_guess_and_3_nl = (~ and_dcpl_156) & and_dcpl_146 & and_dcpl_149;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_nl = MUX1HOT_s_1_5_2(RMS_NORM_LOOP_2_2_dfr_sva_9,
      (compute_sqrt_for_acc_1_itm_40_1_1[39]), attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_39,
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, (compute_sqrt_1_for_acc_1_itm_40_1_1[39]),
      {and_160_ssc , and_dcpl_154 , and_dcpl_140 , and_dcpl_144 , and_dcpl_156});
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_2_nl = MUX1HOT_v_9_5_2(RMS_NORM_LOOP_2_2_dfr_sva_8_0,
      (compute_sqrt_for_acc_1_itm_40_1_1[38:30]), (attention_max_attn_fixed_t_attention_max_attn_fixed_t_and_mut_mx0w2_38_0[38:30]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:30]), (compute_sqrt_1_for_acc_1_itm_40_1_1[38:30]),
      {and_160_ssc , and_dcpl_154 , and_dcpl_140 , and_dcpl_144 , and_dcpl_156});
  assign mux_335_nl = MUX_s_1_2_2(nor_366_cse, or_381_cse, fsm_output[2]);
  assign or_379_nl = (fsm_output[2]) | (~ (fsm_output[0])) | (fsm_output[1]) | (~
      (fsm_output[8]));
  assign mux_336_nl = MUX_s_1_2_2(mux_335_nl, or_379_nl, fsm_output[3]);
  assign or_383_nl = (fsm_output[6]) | (~ (fsm_output[7])) | (fsm_output[4]) | mux_336_nl;
  assign mux_334_nl = MUX_s_1_2_2(nor_365_cse, or_373_cse, fsm_output[2]);
  assign or_376_nl = (fsm_output[7:6]!=2'b01) | (~((fsm_output[4:3]!=2'b00) | mux_334_nl));
  assign mux_337_nl = MUX_s_1_2_2(or_383_nl, or_376_nl, fsm_output[5]);
  assign and_174_nl = and_dcpl_164 & and_dcpl_162;
  assign mux_341_nl = MUX_s_1_2_2(mux_tmp_338, or_tmp_276, and_694_cse);
  assign mux_342_nl = MUX_s_1_2_2(mux_341_nl, mux_tmp_340, fsm_output[0]);
  assign and_175_nl = (~ mux_342_nl) & (fsm_output[8]);
  assign GEMM_3D_FLOAT_LOOP_3_mux_nl = MUX_s_1_2_2((attention_5_1_384_384_8_48_attn_weights_rsci_q_d[39]),
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, and_181_ssc);
  assign and_180_nl = and_dcpl_170 & and_dcpl_167;
  assign mux_372_nl = MUX_s_1_2_2(not_tmp_240, or_603_cse, CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm);
  assign rms_norm_384_mux1h_7_nl = MUX1HOT_s_1_3_2((compute_sqrt_for_acc_1_itm_40_1_1[0]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[0]), (LINEAR_FORWARD_NO_MUL_LOOP_2_1_mul_1_itm[0]),
      {and_dcpl_154 , and_193_itm , and_dcpl_174});
  assign or_410_nl = (fsm_output[2:0]!=3'b000);
  assign mux_377_nl = MUX_s_1_2_2(or_tmp_26, mux_tmp_373, or_410_nl);
  assign and_196_nl = (~ mux_377_nl) & and_dcpl_110;
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_56_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16])) + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_56_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_56_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_58_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18])) + conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_58_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_58_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_62_nl = conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_56_nl)
      + conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_58_nl) + conv_u2u_1_3(~
      (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_62_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_62_nl[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_60_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])) + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_60_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_60_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_78_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])) + conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_78_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_78_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl = conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_60_nl)
      + conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_78_nl) + conv_u2u_1_3(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_82_nl = conv_u2u_3_4(operator_40_24_true_AC_TRN_AC_WRAP_acc_62_nl)
      + conv_u2u_3_4(operator_40_24_true_AC_TRN_AC_WRAP_acc_80_nl) + conv_u2u_1_4(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_82_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_82_nl[3:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_72_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[11])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[12])) + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]));
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_72_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_72_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_54_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[14])) + conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_54_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_54_nl[1:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl = conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_72_nl)
      + conv_u2u_2_3(operator_40_24_true_AC_TRN_AC_WRAP_acc_54_nl) + conv_u2u_1_3(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl[2:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl = conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[9])
      + conv_u2u_1_2(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[10])) + conv_u2u_1_2(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl[1:0];
  assign nl_reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse  = conv_u2u_4_6(operator_40_24_true_AC_TRN_AC_WRAP_acc_82_nl)
      + conv_u2u_1_6(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39])) + conv_u2u_3_6(operator_40_24_true_AC_TRN_AC_WRAP_acc_74_nl)
      + conv_u2u_1_6(~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])) + conv_u2u_3_6(z_out_8)
      + conv_u2u_2_6(operator_40_24_true_AC_TRN_AC_WRAP_acc_64_nl) + conv_u2u_1_6(~
      (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]));
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_25_nl = conv_s2s_3_4(z_out_13)
      + conv_s2s_2_4(z_out_17[5:4]) + conv_u2s_1_4(z_out_17[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_25_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_25_nl[3:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_27_nl = conv_u2s_5_6({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13])})
      + conv_s2s_4_6(operator_40_24_true_AC_TRN_AC_WRAP_acc_25_nl) + conv_u2s_1_6(z_out_17[3]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_27_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_27_nl[5:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm  = conv_u2s_7_8({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])}) + conv_s2s_6_8(operator_40_24_true_AC_TRN_AC_WRAP_acc_27_nl)
      + conv_u2s_1_8(~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2]));
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_28_nl = conv_s2s_6_8(z_out_15)
      + conv_u2s_6_8({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[14]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[12])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]))}) + conv_u2s_1_8(operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_28_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_28_nl[7:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm  = conv_s2s_8_9(operator_40_24_true_AC_TRN_AC_WRAP_acc_28_nl)
      + conv_u2s_8_9({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[12]))})
      + conv_u2s_1_9(operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_cse);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_31_nl = conv_u2s_9_10({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])})
      + conv_s2s_8_10(operator_40_24_true_AC_TRN_AC_WRAP_acc_29_itm) + conv_u2s_1_10(operator_40_24_true_AC_TRN_AC_WRAP_and_1_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_31_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_31_nl[9:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_33_nl = conv_u2s_11_12({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])}) + conv_s2s_10_12(operator_40_24_true_AC_TRN_AC_WRAP_acc_31_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_33_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_33_nl[11:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_35_nl = conv_u2s_13_14({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])})
      + conv_s2s_12_14(operator_40_24_true_AC_TRN_AC_WRAP_acc_33_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_35_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_35_nl[13:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm  = conv_u2s_15_16({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])}) + conv_s2s_14_16(operator_40_24_true_AC_TRN_AC_WRAP_acc_35_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl = conv_u2s_10_11({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[14]))})
      + conv_s2s_9_11(operator_40_24_true_AC_TRN_AC_WRAP_acc_30_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl[10:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_34_nl = conv_u2s_12_13({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16]))}) + conv_s2s_11_13(operator_40_24_true_AC_TRN_AC_WRAP_acc_32_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_34_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_34_nl[12:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_36_nl = conv_u2s_14_15({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18]))})
      + conv_s2s_13_15(operator_40_24_true_AC_TRN_AC_WRAP_acc_34_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_36_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_36_nl[14:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm  = conv_u2s_16_17({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20]))}) + conv_s2s_15_17(operator_40_24_true_AC_TRN_AC_WRAP_acc_36_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_39_nl = conv_u2s_17_18({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])})
      + conv_s2s_16_18(operator_40_24_true_AC_TRN_AC_WRAP_acc_37_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_39_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_39_nl[17:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_41_nl = conv_u2s_19_20({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])}) + conv_s2s_18_20(operator_40_24_true_AC_TRN_AC_WRAP_acc_39_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_41_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_41_nl[19:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_43_nl = conv_u2s_21_22({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])})
      + conv_s2s_20_22(operator_40_24_true_AC_TRN_AC_WRAP_acc_41_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_43_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_43_nl[21:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm  = conv_u2s_23_24({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])}) + conv_s2s_22_24(operator_40_24_true_AC_TRN_AC_WRAP_acc_43_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_40_nl = conv_u2s_18_19({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]))})
      + conv_s2s_17_19(operator_40_24_true_AC_TRN_AC_WRAP_acc_38_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_40_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_40_nl[18:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_42_nl = conv_u2s_20_21({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]))}) + conv_s2s_19_21(operator_40_24_true_AC_TRN_AC_WRAP_acc_40_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_42_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_42_nl[20:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_44_nl = conv_u2s_22_23({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]))})
      + conv_s2s_21_23(operator_40_24_true_AC_TRN_AC_WRAP_acc_42_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_44_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_44_nl[22:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm  = conv_u2s_24_25({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]))}) + conv_s2s_23_25(operator_40_24_true_AC_TRN_AC_WRAP_acc_44_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_48_nl = conv_u2s_26_27({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]))})
      + conv_s2s_25_27(operator_40_24_true_AC_TRN_AC_WRAP_acc_46_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_48_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_48_nl[26:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_50_nl = conv_u2s_28_29({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]))}) + conv_s2s_27_29(operator_40_24_true_AC_TRN_AC_WRAP_acc_48_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_50_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_50_nl[28:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_52_itm  = conv_u2s_30_31({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]))})
      + conv_s2s_29_31(operator_40_24_true_AC_TRN_AC_WRAP_acc_50_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_47_nl = conv_u2s_25_26({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])})
      + conv_s2s_24_26(operator_40_24_true_AC_TRN_AC_WRAP_acc_45_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_47_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_47_nl[25:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_49_nl = conv_u2s_27_28({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])}) + conv_s2s_26_28(operator_40_24_true_AC_TRN_AC_WRAP_acc_47_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_49_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_49_nl[27:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_51_itm  = conv_u2s_29_30({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])})
      + conv_s2s_28_30(operator_40_24_true_AC_TRN_AC_WRAP_acc_49_nl);
  assign nor_470_nl = ~((fsm_output[1]) | not_tmp_327);
  assign nor_471_nl = ~((~ (fsm_output[1])) | (fsm_output[3]) | (fsm_output[8]));
  assign mux_645_nl = MUX_s_1_2_2(nor_470_nl, nor_471_nl, fsm_output[0]);
  assign RMS_NORM_LOOP_2_or_nl = (and_dcpl_368 & and_dcpl_431 & (~ (fsm_output[0]))
      & nand_184_cse) | and_dcpl_331 | (mux_645_nl & (fsm_output[6]) & and_dcpl_438
      & and_dcpl_217);
  assign and_448_nl = and_dcpl_368 & and_dcpl_431 & (~((fsm_output[0]) | nand_184_cse));
  assign and_741_nl = (fsm_output[4]) & (fsm_output[8]);
  assign and_742_nl = (fsm_output[4]) & (fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[8]));
  assign mux_640_nl = MUX_s_1_2_2(and_741_nl, and_742_nl, fsm_output[3]);
  assign nand_38_nl = ~((fsm_output[5]) & mux_640_nl);
  assign nand_210_nl = ~((fsm_output[0]) & (fsm_output[1]) & (fsm_output[8]));
  assign mux_639_nl = MUX_s_1_2_2(nand_210_nl, (fsm_output[8]), fsm_output[4]);
  assign nand_37_nl = ~((fsm_output[5]) & (fsm_output[3]) & (~ mux_639_nl));
  assign mux_641_nl = MUX_s_1_2_2(nand_38_nl, nand_37_nl, fsm_output[2]);
  assign nand_36_nl = ~((fsm_output[4:3]==2'b11) & nor_414_cse);
  assign mux_637_nl = MUX_s_1_2_2(nand_36_nl, (fsm_output[8]), fsm_output[5]);
  assign nand_35_nl = ~((fsm_output[4:3]==2'b11) & (~(or_1213_cse & (fsm_output[8]))));
  assign mux_636_nl = MUX_s_1_2_2(nand_35_nl, (fsm_output[8]), fsm_output[5]);
  assign mux_638_nl = MUX_s_1_2_2(mux_637_nl, mux_636_nl, fsm_output[2]);
  assign mux_642_nl = MUX_s_1_2_2(mux_641_nl, mux_638_nl, fsm_output[6]);
  assign or_754_nl = (fsm_output[4]) | (fsm_output[1]) | (fsm_output[8]);
  assign or_753_nl = (fsm_output[4]) | (fsm_output[1]) | (~ (fsm_output[8]));
  assign mux_635_nl = MUX_s_1_2_2(or_754_nl, or_753_nl, fsm_output[3]);
  assign or_755_nl = (fsm_output[6]) | (fsm_output[2]) | (fsm_output[5]) | mux_635_nl;
  assign mux_643_nl = MUX_s_1_2_2(mux_642_nl, or_755_nl, fsm_output[7]);
  assign nor_468_nl = ~((~ (fsm_output[2])) | (fsm_output[3]) | (fsm_output[8]));
  assign nor_469_nl = ~((fsm_output[2]) | not_tmp_327);
  assign mux_644_nl = MUX_s_1_2_2(nor_468_nl, nor_469_nl, fsm_output[0]);
  assign and_453_nl = mux_644_nl & (fsm_output[6]) & and_dcpl_438 & (fsm_output[4])
      & (fsm_output[1]);
  assign RMS_NORM_LOOP_2_mux1h_nl = MUX1HOT_v_9_5_2(z_out_3, 9'b000000001, SF_LOOP_3_acc_17_itm_8_0,
      9'b101111111, reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5, {RMS_NORM_LOOP_2_or_nl
      , and_448_nl , (~ mux_643_nl) , and_453_nl , and_dcpl_370});
  assign nand_212_nl = ~((fsm_output[4]) & (fsm_output[5]) & (fsm_output[8]));
  assign nand_213_nl = ~((fsm_output[1]) & (fsm_output[4]) & (fsm_output[5]) & (~
      (fsm_output[8])));
  assign mux_658_nl = MUX_s_1_2_2(nand_212_nl, nand_213_nl, fsm_output[3]);
  assign or_778_nl = (~((((fsm_output[0]) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm))
      & (fsm_output[4])) | (fsm_output[5]))) | (fsm_output[8]);
  assign mux_655_nl = MUX_s_1_2_2(or_tmp_636, mux_tmp_649, fsm_output[0]);
  assign mux_656_nl = MUX_s_1_2_2(or_778_nl, mux_655_nl, fsm_output[1]);
  assign mux_657_nl = MUX_s_1_2_2(or_tmp_407, mux_656_nl, fsm_output[3]);
  assign mux_659_nl = MUX_s_1_2_2(mux_658_nl, mux_657_nl, fsm_output[6]);
  assign nor_473_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[5])) | (fsm_output[8]));
  assign mux_652_nl = MUX_s_1_2_2(nor_tmp_151, (~ or_tmp_407), fsm_output[4]);
  assign mux_653_nl = MUX_s_1_2_2(nor_473_nl, mux_652_nl, fsm_output[1]);
  assign nand_39_nl = ~((fsm_output[3]) & mux_653_nl);
  assign or_775_nl = (~(((fsm_output[1]) & (fsm_output[4])) | (fsm_output[5]))) |
      (fsm_output[8]);
  assign mux_650_nl = MUX_s_1_2_2(mux_tmp_649, or_tmp_636, fsm_output[1]);
  assign mux_651_nl = MUX_s_1_2_2(or_775_nl, mux_650_nl, fsm_output[3]);
  assign mux_654_nl = MUX_s_1_2_2(nand_39_nl, mux_651_nl, fsm_output[6]);
  assign mux_660_nl = MUX_s_1_2_2(mux_659_nl, mux_654_nl, fsm_output[2]);
  assign or_769_nl = (fsm_output[4]) | (fsm_output[5]) | (fsm_output[8]);
  assign or_768_nl = (~ (fsm_output[0])) | (fsm_output[4]) | (~ (fsm_output[5]))
      | (fsm_output[8]);
  assign mux_646_nl = MUX_s_1_2_2(or_769_nl, or_768_nl, fsm_output[1]);
  assign or_767_nl = (fsm_output[1]) | (fsm_output[4]) | (fsm_output[5]) | (~ (fsm_output[8]));
  assign mux_647_nl = MUX_s_1_2_2(mux_646_nl, or_767_nl, fsm_output[3]);
  assign or_770_nl = (fsm_output[6]) | mux_647_nl;
  assign or_765_nl = (fsm_output[6]) | (fsm_output[3]) | (~ (fsm_output[1])) | (~
      (fsm_output[0])) | (fsm_output[4]) | (fsm_output[5]) | (~ (fsm_output[8]));
  assign mux_648_nl = MUX_s_1_2_2(or_770_nl, or_765_nl, fsm_output[2]);
  assign mux_661_nl = MUX_s_1_2_2(mux_660_nl, mux_648_nl, fsm_output[7]);
  assign not_2160_nl = ~ mux_661_nl;
  assign RMS_NORM_LOOP_2_2_asn_SF_LOOP_3_acc_17_itm_1_8_RMS_NORM_LOOP_2_and_nl =
      MUX_v_9_2_2(9'b000000000, RMS_NORM_LOOP_2_mux1h_nl, not_2160_nl);
  assign mux_676_nl = MUX_s_1_2_2(or_791_cse, or_tmp_645, fsm_output[5]);
  assign mux_677_nl = MUX_s_1_2_2(mux_676_nl, nand_tmp_40, fsm_output[4]);
  assign mux_678_nl = MUX_s_1_2_2(mux_677_nl, mux_tmp_665, fsm_output[3]);
  assign mux_675_nl = MUX_s_1_2_2(or_tmp_651, mux_tmp_667, and_696_cse);
  assign mux_679_nl = MUX_s_1_2_2(mux_678_nl, mux_675_nl, fsm_output[2]);
  assign mux_670_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[6]);
  assign or_789_nl = (~ (fsm_output[5])) | (fsm_output[8]) | mux_670_nl;
  assign mux_671_nl = MUX_s_1_2_2(or_tmp_651, or_789_nl, fsm_output[0]);
  assign mux_672_nl = MUX_s_1_2_2(mux_671_nl, nand_tmp_40, fsm_output[4]);
  assign mux_668_nl = MUX_s_1_2_2(mux_tmp_662, mux_tmp_667, fsm_output[0]);
  assign mux_669_nl = MUX_s_1_2_2(or_tmp_651, mux_668_nl, fsm_output[4]);
  assign mux_673_nl = MUX_s_1_2_2(mux_672_nl, mux_669_nl, fsm_output[3]);
  assign mux_664_nl = MUX_s_1_2_2(nand_tmp_40, mux_tmp_662, fsm_output[4]);
  assign mux_666_nl = MUX_s_1_2_2(mux_tmp_665, mux_664_nl, fsm_output[3]);
  assign mux_674_nl = MUX_s_1_2_2(mux_673_nl, mux_666_nl, fsm_output[2]);
  assign mux_680_nl = MUX_s_1_2_2(mux_679_nl, mux_674_nl, fsm_output[1]);
  assign nor_487_nl = ~((fsm_output[7:4]!=4'b0110) | mux_732_cse);
  assign nor_485_nl = ~((fsm_output[6:5]!=2'b10) | mux_730_cse);
  assign nor_486_nl = ~((~ (fsm_output[5])) | (fsm_output[8]) | (fsm_output[3]) |
      (fsm_output[0]) | (~ (fsm_output[2])));
  assign mux_731_nl = MUX_s_1_2_2(nor_485_nl, nor_486_nl, fsm_output[7]);
  assign and_759_nl = (fsm_output[4]) & mux_731_nl;
  assign mux_733_nl = MUX_s_1_2_2(nor_487_nl, and_759_nl, fsm_output[1]);
  assign mux_754_nl = MUX_s_1_2_2(or_734_cse, or_tmp_727, fsm_output[2]);
  assign nand_47_nl = ~((fsm_output[5]) & (fsm_output[4]) & (fsm_output[7]) & (~
      mux_754_nl));
  assign mux_750_nl = MUX_s_1_2_2((fsm_output[8]), nor_366_cse, fsm_output[2]);
  assign or_879_nl = (fsm_output[2]) | (fsm_output[1]) | (fsm_output[8]);
  assign mux_751_nl = MUX_s_1_2_2(mux_750_nl, or_879_nl, fsm_output[7]);
  assign mux_752_nl = MUX_s_1_2_2(or_tmp_729, mux_751_nl, fsm_output[4]);
  assign or_878_nl = (fsm_output[7]) | (fsm_output[2]) | (~(nor_494_cse | (fsm_output[8])));
  assign mux_749_nl = MUX_s_1_2_2(or_878_nl, or_tmp_729, fsm_output[4]);
  assign mux_753_nl = MUX_s_1_2_2(mux_752_nl, mux_749_nl, fsm_output[5]);
  assign mux_755_nl = MUX_s_1_2_2(nand_47_nl, mux_753_nl, fsm_output[6]);
  assign nand_215_nl = ~((fsm_output[2]) & (fsm_output[0]) & (fsm_output[1]) & (~
      (fsm_output[8])));
  assign mux_746_nl = MUX_s_1_2_2(nand_215_nl, (fsm_output[8]), fsm_output[7]);
  assign mux_743_nl = MUX_s_1_2_2(or_tmp_727, nand_200_cse, fsm_output[0]);
  assign mux_744_nl = MUX_s_1_2_2(mux_743_nl, or_373_cse, fsm_output[2]);
  assign nor_496_nl = ~((fsm_output[2]) | or_612_cse);
  assign mux_745_nl = MUX_s_1_2_2(mux_744_nl, nor_496_nl, fsm_output[7]);
  assign mux_747_nl = MUX_s_1_2_2((~ mux_746_nl), mux_745_nl, fsm_output[4]);
  assign nor_497_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[7])) | (fsm_output[2])
      | or_612_cse);
  assign mux_748_nl = MUX_s_1_2_2(mux_747_nl, nor_497_nl, fsm_output[5]);
  assign nand_46_nl = ~((fsm_output[6]) & mux_748_nl);
  assign mux_756_nl = MUX_s_1_2_2(mux_755_nl, nand_46_nl, fsm_output[3]);
  assign GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_4_nl = MUX1HOT_v_3_4_2(QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3,
      LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2, ({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd
      , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1}), GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva,
      {mux_733_nl , and_dcpl_243 , and_dcpl_354 , (~ mux_756_nl)});
  assign nor_488_nl = ~((fsm_output[8]) | (~ (fsm_output[6])) | (fsm_output[7]) |
      (~ (fsm_output[3])) | (fsm_output[5]));
  assign nor_489_nl = ~((fsm_output[8]) | (fsm_output[6]) | (~ (fsm_output[7])) |
      (fsm_output[3]) | (~ (fsm_output[5])));
  assign mux_740_nl = MUX_s_1_2_2(nor_488_nl, nor_489_nl, fsm_output[1]);
  assign nand_261_nl = ~((fsm_output[4]) & mux_740_nl);
  assign mux_739_nl = MUX_s_1_2_2(or_1328_cse, or_518_cse, fsm_output[8]);
  assign or_nl = (fsm_output[4]) | (~ (fsm_output[1])) | mux_739_nl;
  assign mux_741_nl = MUX_s_1_2_2(nand_261_nl, or_nl, fsm_output[2]);
  assign or_1231_nl = (~ (fsm_output[1])) | (fsm_output[8]) | (fsm_output[6]) | (~
      (fsm_output[7])) | (fsm_output[3]) | (~ (fsm_output[5]));
  assign or_1232_nl = (~ (fsm_output[1])) | (~ (fsm_output[8])) | (~ (fsm_output[6]))
      | (fsm_output[7]) | (fsm_output[3]) | (fsm_output[5]);
  assign mux_737_nl = MUX_s_1_2_2(or_1231_nl, or_1232_nl, fsm_output[4]);
  assign nand_214_nl = ~((fsm_output[6]) & (fsm_output[7]) & (~ (fsm_output[3]))
      & (fsm_output[5]));
  assign mux_735_nl = MUX_s_1_2_2(nand_214_nl, or_1328_cse, fsm_output[8]);
  assign or_855_nl = (~ (fsm_output[7])) | (fsm_output[3]) | (~ (fsm_output[5]));
  assign or_853_nl = (~ (fsm_output[7])) | (fsm_output[3]) | (fsm_output[5]);
  assign mux_734_nl = MUX_s_1_2_2(or_855_nl, or_853_nl, fsm_output[6]);
  assign or_856_nl = (fsm_output[8]) | mux_734_nl;
  assign mux_736_nl = MUX_s_1_2_2(mux_735_nl, or_856_nl, fsm_output[1]);
  assign nand_262_nl = ~((fsm_output[4]) & (~ mux_736_nl));
  assign mux_738_nl = MUX_s_1_2_2(mux_737_nl, nand_262_nl, fsm_output[2]);
  assign mux_742_nl = MUX_s_1_2_2(mux_741_nl, mux_738_nl, fsm_output[0]);
  assign nl_SF_LOOP_3_acc_90_nl = conv_u2u_1_2(SF_LOOP_3_acc_5_psp_sva[20]) + conv_u2u_1_2(SF_LOOP_3_acc_5_psp_sva[21]);
  assign SF_LOOP_3_acc_90_nl = nl_SF_LOOP_3_acc_90_nl[1:0];
  assign nl_SF_LOOP_3_acc_92_nl = conv_u2u_3_4(signext_3_1(SF_LOOP_3_acc_5_psp_sva[20]))
      + conv_u2u_3_4({(SF_LOOP_3_acc_5_psp_sva[21]) , 1'b0 , (SF_LOOP_3_acc_5_psp_sva[21])});
  assign SF_LOOP_3_acc_92_nl = nl_SF_LOOP_3_acc_92_nl[3:0];
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_29_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2,
      4'b0110, and_1256_cse);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_2_nl = reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3
      | and_1256_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_30_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      3'b001, and_1256_cse);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_31_nl = MUX_v_9_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5,
      9'b010111001, and_1256_cse);
  assign not_2715_nl = ~ and_1256_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_8_nl = MUX_v_38_2_2(38'b00000000000000000000000000000000000000,
      (INIT_2D_MEM_LOOP_2_2_asn_psp[39:2]), not_2715_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_32_nl = MUX_v_2_2_2((INIT_2D_MEM_LOOP_2_2_asn_psp[1:0]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[7:6]), and_1256_cse);
  assign nl_APPLY_ROTARY_POS_EMB_LOOP_6_mul_4_itm  = $signed(({APPLY_ROTARY_POS_EMB_LOOP_6_mux_29_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_2_nl , APPLY_ROTARY_POS_EMB_LOOP_6_mux_30_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_mux_31_nl})) * $signed(({APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_8_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_mux_32_nl}));
  assign nl_SF_LOOP_3_acc_15_itm  = conv_u2s_18_19(z_out_23) + conv_s2s_18_19(z_out_4);
  assign nl_SF_LOOP_3_acc_16_itm  = conv_u2s_18_19(z_out_23) + conv_s2s_18_19(z_out_4);
  assign nl_SF_LOOP_3_acc_99_nl = conv_u2u_7_8({SF_LOOP_3_mul_12_itm_16_15 , 2'b00
      , SF_LOOP_3_mul_12_itm_12_9_slc}) + conv_u2u_7_8(SF_LOOP_3_mul_15_itm_16_10);
  assign SF_LOOP_3_acc_99_nl = nl_SF_LOOP_3_acc_99_nl[7:0];
  assign nl_SF_LOOP_3_acc_100_nl = conv_u2u_7_8({(SF_LOOP_3_mul_19_itm_9_4[2:1])
      , 1'b0 , SF_LOOP_3_mul_12_itm_3_0}) + conv_u2u_7_8(SF_LOOP_3_mul_15_itm_6_0);
  assign SF_LOOP_3_acc_100_nl = nl_SF_LOOP_3_acc_100_nl[7:0];
  assign nl_SF_LOOP_3_acc_21_nl = conv_s2s_18_20({SF_LOOP_3_acc_11_itm_17_15 , 1'b0
      , SF_LOOP_3_acc_11_itm_13_0}) + conv_u2s_18_20({SF_LOOP_3_acc_99_nl , (SF_LOOP_3_mul_19_itm_9_4[5])
      , 1'b0 , SF_LOOP_3_acc_100_nl});
  assign SF_LOOP_3_acc_21_nl = nl_SF_LOOP_3_acc_21_nl[19:0];
  assign nl_SF_LOOP_3_acc_27_nl = SF_LOOP_3_acc_21_nl + conv_s2s_19_20({SF_LOOP_3_acc_96_psp
      , 1'b0 , RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[18])
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[18]) , APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0});
  assign SF_LOOP_3_acc_27_nl = nl_SF_LOOP_3_acc_27_nl[19:0];
  assign nl_SF_LOOP_3_acc_30_psp  = SF_LOOP_3_acc_27_nl + ({SF_LOOP_3_acc_26_itm_19_9
      , SF_LOOP_3_acc_26_itm_8_0});
  assign nl_SF_LOOP_3_acc_38_nl = conv_u2u_5_6({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[7:5])
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[7:6])}) + conv_u2u_1_6(SF_LOOP_3_acc_5_psp_sva[17])
      + conv_u2u_4_6({(~ (SF_LOOP_3_acc_5_psp_sva[21])) , 2'b11 , (~ (SF_LOOP_3_acc_5_psp_sva[21]))})
      + conv_u2u_1_6(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[5]) + conv_u2u_3_6({(SF_LOOP_3_acc_5_psp_sva[20])
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[4:3])}) + conv_u2u_2_6(SF_LOOP_3_acc_5_psp_sva[19:18])
      + 6'b000001;
  assign SF_LOOP_3_acc_38_nl = nl_SF_LOOP_3_acc_38_nl[5:0];
  assign nl_SF_LOOP_3_acc_39_itm  = conv_u2s_6_7(SF_LOOP_3_acc_38_nl) + conv_s2s_6_7({5'b10111
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[2])}) + conv_u2s_1_7(SF_LOOP_3_acc_5_psp_sva[20]);
  assign nl_SF_LOOP_3_acc_93_psp  = conv_u2u_3_4({(SF_LOOP_3_acc_5_psp_sva[20]) ,
      1'b0 , (SF_LOOP_3_acc_5_psp_sva[20])}) + conv_u2u_3_4(signext_3_1(SF_LOOP_3_acc_5_psp_sva[21]));
  assign nl_SF_LOOP_3_acc_40_itm  = conv_u2s_10_11(SF_LOOP_3_mul_7_itm) + conv_s2s_7_11(SF_LOOP_3_acc_39_itm)
      + conv_u2s_1_11(SF_LOOP_3_acc_6_psp_sva_1[17]);
  assign nl_SF_LOOP_3_acc_35_itm  = conv_s2s_17_18({(SF_LOOP_3_acc_6_psp_sva_1[18])
      , 1'b0 , (signext_3_1(SF_LOOP_3_acc_6_psp_sva_1[18])) , 1'b0 , (signext_2_1(SF_LOOP_3_acc_6_psp_sva_1[18]))
      , 1'b0 , (signext_2_1(SF_LOOP_3_acc_6_psp_sva_1[18])) , 2'b00 , (signext_4_1(SF_LOOP_3_acc_6_psp_sva_1[18]))})
      + conv_u2s_17_18(SF_LOOP_3_acc_6_psp_sva_1[16:0]);
  assign SF_LOOP_3_and_1_nl = reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd & (~ (SF_LOOP_3_acc_7_psp_sva_1[17]))
      & ((SF_LOOP_3_acc_7_psp_sva_1[16:0]!=17'b00000000000000000));
  assign nl_SF_LOOP_3_acc_95_nl = conv_u2u_3_4(signext_3_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[17]))
      + conv_u2u_2_4(signext_2_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16])) + conv_u2u_1_4(SF_LOOP_3_and_1_nl);
  assign SF_LOOP_3_acc_95_nl = nl_SF_LOOP_3_acc_95_nl[3:0];
  assign nl_SF_LOOP_3_acc_41_nl = conv_s2s_11_13(SF_LOOP_3_acc_40_itm) + conv_u2s_11_13({SF_LOOP_3_mul_itm_10_9
      , 1'b0 , SF_LOOP_3_mul_itm_7_0}) + conv_u2s_1_13(~ (SF_LOOP_3_acc_6_psp_sva_18_17[1]));
  assign SF_LOOP_3_acc_41_nl = nl_SF_LOOP_3_acc_41_nl[12:0];
  assign SF_LOOP_3_SF_LOOP_3_nand_nl = ~((SF_LOOP_3_acc_7_psp_sva_1[17]) & (~ reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd));
  assign nl_SF_LOOP_3_acc_42_nl = conv_s2s_13_15(SF_LOOP_3_acc_41_nl) + conv_u2s_13_15({SF_LOOP_3_mul_1_itm_12_11
      , 1'b0 , SF_LOOP_3_mul_1_itm_9_0}) + conv_u2s_1_15(SF_LOOP_3_SF_LOOP_3_nand_nl);
  assign SF_LOOP_3_acc_42_nl = nl_SF_LOOP_3_acc_42_nl[14:0];
  assign nl_SF_LOOP_3_acc_44_nl = conv_u2s_15_17({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[17:16])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[17:16]) , z_out_11 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16])
      , SF_LOOP_3_acc_95_nl}) + conv_s2s_15_17(SF_LOOP_3_acc_42_nl);
  assign SF_LOOP_3_acc_44_nl = nl_SF_LOOP_3_acc_44_nl[16:0];
  assign nl_SF_LOOP_3_acc_46_itm  = conv_u2s_17_19({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[19:18])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[19:18]) , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1
      , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0 , reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[18]) , APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva})
      + conv_s2s_17_19(SF_LOOP_3_acc_44_nl);
  assign nl_SF_LOOP_3_acc_47_nl = conv_s2s_19_21(SF_LOOP_3_acc_46_itm) + conv_u2s_19_21({SF_LOOP_3_mul_2_itm_18_17
      , 1'b0 , SF_LOOP_3_mul_2_itm_15_0});
  assign SF_LOOP_3_acc_47_nl = nl_SF_LOOP_3_acc_47_nl[20:0];
  assign nl_SF_LOOP_3_acc_48_nl = conv_s2s_21_22(SF_LOOP_3_acc_47_nl) + conv_u2s_20_22({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22])
      , 2'b00 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22]) , 2'b00 , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22]))
      , 2'b00 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22])) , 1'b0
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22]) , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[22])});
  assign SF_LOOP_3_acc_48_nl = nl_SF_LOOP_3_acc_48_nl[21:0];
  assign nl_SF_LOOP_3_acc_49_nl = conv_s2s_22_24(SF_LOOP_3_acc_48_nl) + conv_u2s_22_24({SF_LOOP_3_mul_3_itm_21_20
      , 1'b0 , SF_LOOP_3_mul_3_itm_18_3 , 1'b0 , SF_LOOP_3_mul_3_itm_1_0});
  assign SF_LOOP_3_acc_49_nl = nl_SF_LOOP_3_acc_49_nl[23:0];
  assign nl_SF_LOOP_3_acc_50_itm  = conv_s2s_24_26(SF_LOOP_3_acc_49_nl) + conv_u2s_24_26({SF_LOOP_3_mul_4_itm_23_22
      , 1'b0 , SF_LOOP_3_mul_4_itm_20_5 , 1'b0 , SF_LOOP_3_mul_4_itm_3_0});
  assign nl_SF_LOOP_3_acc_52_nl = conv_u2s_26_28({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[28:27])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[28:27]) , APPLY_ROTARY_POS_EMB_LOOP_3_acc_37_cse_sva
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[27]) , APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[27]) , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[28:27])
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[28:27]) , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[28:27])
      , APPLY_ROTARY_POS_EMB_LOOP_6_acc_29_psp_4}) + conv_s2s_26_28(SF_LOOP_3_acc_50_itm);
  assign SF_LOOP_3_acc_52_nl = nl_SF_LOOP_3_acc_52_nl[27:0];
  assign nl_SF_LOOP_3_acc_53_nl = conv_s2s_28_29(SF_LOOP_3_acc_52_nl) + conv_u2s_27_29({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29])
      , 2'b00 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29]) , 2'b00 , (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29]))
      , 2'b00 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29])) , 1'b0
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29]) , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29])
      , 2'b00 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29]) , 2'b00 , (signext_2_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29]))
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[29])});
  assign SF_LOOP_3_acc_53_nl = nl_SF_LOOP_3_acc_53_nl[28:0];
  assign nl_SF_LOOP_3_acc_54_itm  = conv_u2s_31_32(SF_LOOP_3_mul_6_itm) + conv_s2s_29_32(SF_LOOP_3_acc_53_nl);
  assign nl_SF_LOOP_3_acc_55_nl = conv_s2s_32_34(SF_LOOP_3_acc_54_itm) + conv_u2s_32_34({SF_LOOP_3_mul_5_itm_31_30
      , 1'b0 , SF_LOOP_3_mul_5_itm_28_13 , 1'b0 , SF_LOOP_3_mul_5_itm_11_0});
  assign SF_LOOP_3_acc_55_nl = nl_SF_LOOP_3_acc_55_nl[33:0];
  assign nl_SF_LOOP_3_acc_57_nl = conv_u2s_34_36({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[36:35])
      , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[36:35]) , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35]) , CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35]) , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[36:35])
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[36:35]) , 1'b0 , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[36:35])
      , INIT_2D_MEM_LOOP_2_2_acc_itm , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35])
      , CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0}) + conv_s2s_34_36(SF_LOOP_3_acc_55_nl);
  assign SF_LOOP_3_acc_57_nl = nl_SF_LOOP_3_acc_57_nl[35:0];
  assign nl_SF_LOOP_3_acc_58_itm  = conv_s2s_36_38(SF_LOOP_3_acc_57_nl) + conv_u2s_36_38({SF_LOOP_3_mul_sdt_sva_35_34
      , 1'b0 , SF_LOOP_3_mul_sdt_sva_32_17 , 1'b0 , SF_LOOP_3_mul_sdt_sva_15_0});
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_25_nl = conv_s2s_3_4(z_out_13)
      + conv_s2s_2_4(z_out_17[5:4]) + conv_u2s_1_4(z_out_17[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_25_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_25_nl[3:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_27_nl = conv_u2s_5_6({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[13])})
      + conv_s2s_4_6(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_25_nl) + conv_u2s_1_6(z_out_17[3]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_27_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_27_nl[5:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm  = conv_u2s_7_8({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15])}) + conv_s2s_6_8(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_27_nl)
      + conv_u2s_1_8(~ (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1[2]));
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_28_nl = conv_s2s_6_8(z_out_15)
      + conv_u2s_6_8({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[14]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[12])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]))}) + conv_u2s_1_8(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_28_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_28_nl[7:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm  = conv_s2s_8_9(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_28_nl)
      + conv_u2s_8_9({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[12]))})
      + conv_u2s_1_9(operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_nand_cse);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_31_nl = conv_u2s_9_10({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[17])})
      + conv_s2s_8_10(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_29_itm) + conv_u2s_1_10(operator_40_24_true_AC_TRN_AC_WRAP_and_1_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_31_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_31_nl[9:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_33_nl = conv_u2s_11_12({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[19])}) + conv_s2s_10_12(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_31_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_33_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_33_nl[11:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl = conv_u2s_13_14({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[21])})
      + conv_s2s_12_14(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_33_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl[13:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm  = conv_u2s_15_16({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[23])}) + conv_s2s_14_16(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_35_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl = conv_u2s_10_11({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[14]))})
      + conv_s2s_9_11(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_30_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl[10:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl = conv_u2s_12_13({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[16]))}) + conv_s2s_11_13(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_32_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl[12:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl = conv_u2s_14_15({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[18]))})
      + conv_s2s_13_15(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_34_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl[14:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm  = conv_u2s_16_17({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[20]))}) + conv_s2s_15_17(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_36_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_nl = conv_u2s_17_18({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[25])})
      + conv_s2s_16_18(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_37_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_nl[17:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_41_nl = conv_u2s_19_20({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[27])}) + conv_s2s_18_20(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_39_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_41_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_41_nl[19:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_43_nl = conv_u2s_21_22({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[29])})
      + conv_s2s_20_22(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_41_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_43_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_43_nl[21:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm  = conv_u2s_23_24({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[31])}) + conv_s2s_22_24(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_43_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl = conv_u2s_18_19({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[22]))})
      + conv_s2s_17_19(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_38_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl[18:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl = conv_u2s_20_21({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[24]))}) + conv_s2s_19_21(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_40_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl[20:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl = conv_u2s_22_23({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[26]))})
      + conv_s2s_21_23(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_42_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl[22:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm  = conv_u2s_24_25({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[28]))}) + conv_s2s_23_25(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_44_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_48_nl = conv_u2s_26_27({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30]))})
      + conv_s2s_25_27(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_46_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_48_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_48_nl[26:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_50_nl = conv_u2s_28_29({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[36])
      , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32]))}) + conv_s2s_27_29(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_48_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_50_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_50_nl[28:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_52_itm  = conv_u2s_30_31({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38]) , 1'b0 , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[34]))})
      + conv_s2s_29_31(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_50_nl);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_47_nl = conv_u2s_25_26({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[33])})
      + conv_s2s_24_26(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_45_itm);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_47_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_47_nl[25:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_49_nl = conv_u2s_27_28({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35])}) + conv_s2s_26_28(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_47_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_2_acc_49_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_49_nl[27:0];
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_2_acc_51_itm  = conv_u2s_29_30({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])
      , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37]) , 1'b0 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[37])})
      + conv_s2s_28_30(operator_40_24_true_AC_TRN_AC_WRAP_2_acc_49_nl);
  assign rms_norm_384_variance_or_nl = (and_dcpl_111 & and_dcpl_120) | (and_dcpl_212
      & and_dcpl_175);
  assign and_355_nl = and_dcpl_118 & and_dcpl_128;
  assign and_356_nl = and_dcpl_290 & and_dcpl_107;
  assign and_366_nl = and_dcpl_214 & and_dcpl_188;
  assign rms_norm_384_variance_mux1h_nl = MUX1HOT_v_40_9_2(z_out, rms_norm_384_div_cmp_z_oreg,
      input_rsci_q_d, attention_5_1_384_384_8_48_q_proj_re_rsci_q_d, apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d,
      attention_5_1_384_384_8_48_attn_weights_rsci_q_d, softmax_1_8_6_sum_sva_1,
      attention_5_1_384_384_8_48_attn_output_rsci_q_d, (SOFTMAX_LOOP_5_SOFTMAX_LOOP_5_div_1_cmp_z[39:0]),
      {rms_norm_384_variance_or_nl , and_355_nl , and_356_nl , and_dcpl_349 , and_dcpl_350
      , and_dcpl_351 , and_dcpl_354 , and_dcpl_355 , and_366_nl});
  assign nor_406_nl = ~((fsm_output[1]) | (fsm_output[2]) | (fsm_output[4]) | (fsm_output[7])
      | (fsm_output[6]));
  assign and_713_nl = (fsm_output[1]) & (fsm_output[2]) & (fsm_output[4]) & (~ (fsm_output[8]))
      & nor_tmp_54;
  assign mux_466_nl = MUX_s_1_2_2(nor_406_nl, and_713_nl, fsm_output[0]);
  assign GEMM_3D_FLOAT_LOOP_4_1_nand_nl = ~(mux_466_nl & (~((fsm_output[5]) | (fsm_output[3]))));
  assign or_550_nl = (fsm_output[5]) | (~((fsm_output[0]) | (~ or_tmp_408)));
  assign or_548_nl = (fsm_output[5]) | (~((~ (fsm_output[0])) | (fsm_output[8]) |
      (fsm_output[2])));
  assign mux_461_nl = MUX_s_1_2_2(or_550_nl, or_548_nl, fsm_output[1]);
  assign or_546_nl = (~ (fsm_output[5])) | (~ (fsm_output[8])) | (fsm_output[2]);
  assign mux_462_nl = MUX_s_1_2_2(mux_461_nl, or_546_nl, fsm_output[4]);
  assign mux_460_nl = MUX_s_1_2_2(or_tmp_410, or_tmp_407, fsm_output[4]);
  assign mux_463_nl = MUX_s_1_2_2(mux_462_nl, mux_460_nl, fsm_output[6]);
  assign or_1208_nl = (fsm_output[5]) | (~((~ (fsm_output[0])) | (fsm_output[8])))
      | (fsm_output[2]);
  assign nand_188_nl = ~((fsm_output[5]) & (fsm_output[8]) & (fsm_output[2]));
  assign mux_457_nl = MUX_s_1_2_2(or_1208_nl, nand_188_nl, fsm_output[1]);
  assign mux_456_nl = MUX_s_1_2_2(or_tmp_410, or_tmp_407, fsm_output[1]);
  assign mux_458_nl = MUX_s_1_2_2(mux_457_nl, mux_456_nl, fsm_output[4]);
  assign mux_454_nl = MUX_s_1_2_2(or_tmp_408, (fsm_output[8]), fsm_output[5]);
  assign or_538_nl = (~ (fsm_output[4])) | (fsm_output[1]);
  assign mux_455_nl = MUX_s_1_2_2(mux_454_nl, or_tmp_407, or_538_nl);
  assign mux_459_nl = MUX_s_1_2_2(mux_458_nl, mux_455_nl, fsm_output[6]);
  assign mux_464_nl = MUX_s_1_2_2(mux_463_nl, mux_459_nl, fsm_output[3]);
  assign or_537_nl = (fsm_output[4]) | (fsm_output[1]) | (fsm_output[5]) | (~ (fsm_output[0]))
      | (fsm_output[8]) | (fsm_output[2]);
  assign mux_452_nl = MUX_s_1_2_2(or_15_cse, or_537_nl, fsm_output[6]);
  assign nor_404_nl = ~(((fsm_output[5]) & (fsm_output[0])) | (fsm_output[8]) | (fsm_output[2]));
  assign mux_450_nl = MUX_s_1_2_2(nor_404_nl, nor_405_cse, fsm_output[1]);
  assign nand_22_nl = ~((fsm_output[4]) & mux_450_nl);
  assign mux_451_nl = MUX_s_1_2_2(or_15_cse, nand_22_nl, fsm_output[6]);
  assign mux_453_nl = MUX_s_1_2_2(mux_452_nl, mux_451_nl, fsm_output[3]);
  assign mux_465_nl = MUX_s_1_2_2(mux_464_nl, mux_453_nl, fsm_output[7]);
  assign nl_SF_LOOP_3_acc_82_nl = conv_u2u_8_9(signext_8_7({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]) , 1'b0 , (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]))}))
      + conv_u2u_7_9(signext_7_6({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[35])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[35]) , 1'b0 , (signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[35]))}));
  assign SF_LOOP_3_acc_82_nl = nl_SF_LOOP_3_acc_82_nl[8:0];
  assign INIT_2D_MEM_LOOP_2_2_or_3_nl = and_dcpl_342 | and_dcpl_291;
  assign nor_418_nl = ~((~ (fsm_output[2])) | (fsm_output[3]) | (fsm_output[4]) |
      (fsm_output[5]) | (~((fsm_output[8:7]==2'b11))));
  assign or_572_nl = (~ (fsm_output[5])) | (fsm_output[8]) | (~ (fsm_output[7]));
  assign or_1181_nl = (~ (fsm_output[8])) | (~ (fsm_output[5])) | (fsm_output[7]);
  assign mux_477_nl = MUX_s_1_2_2(or_572_nl, or_1181_nl, fsm_output[4]);
  assign nor_419_nl = ~((fsm_output[3]) | mux_477_nl);
  assign nor_420_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[4])) | (~ (fsm_output[5]))
      | (fsm_output[8]) | (fsm_output[7]));
  assign mux_478_nl = MUX_s_1_2_2(nor_419_nl, nor_420_nl, fsm_output[2]);
  assign mux_479_nl = MUX_s_1_2_2(nor_418_nl, mux_478_nl, fsm_output[0]);
  assign and_369_nl = mux_479_nl & (~ (fsm_output[6])) & (fsm_output[1]);
  assign INIT_2D_MEM_LOOP_2_2_mux1h_15_nl = MUX1HOT_v_9_5_2(z_out_1, SF_LOOP_3_acc_26_itm_8_0,
      9'b101111111, TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5, SF_LOOP_3_acc_82_nl,
      {INIT_2D_MEM_LOOP_2_2_or_3_nl , and_369_nl , and_dcpl_360 , and_dcpl_263 ,
      and_dcpl_361});
  assign and_720_nl = (fsm_output[5]) & (fsm_output[0]) & (fsm_output[2]) & (fsm_output[8]);
  assign mux_481_nl = MUX_s_1_2_2(nor_405_cse, and_720_nl, fsm_output[3]);
  assign nor_424_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[5])) | (~ (fsm_output[0]))
      | (fsm_output[2]) | (fsm_output[8]));
  assign mux_482_nl = MUX_s_1_2_2(mux_481_nl, nor_424_nl, fsm_output[4]);
  assign or_1211_nl = (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm) | (fsm_output[2])
      | (fsm_output[8]);
  assign mux_480_nl = MUX_s_1_2_2(or_1211_nl, nand_195_cse, fsm_output[0]);
  assign nor_425_nl = ~((fsm_output[5:3]!=3'b011) | mux_480_nl);
  assign mux_483_nl = MUX_s_1_2_2(mux_482_nl, nor_425_nl, fsm_output[6]);
  assign INIT_2D_MEM_LOOP_2_2_nand_nl = ~(mux_483_nl & (~((fsm_output[7]) | (fsm_output[1]))));
  assign nor_412_nl = ~((fsm_output[3]) | (fsm_output[2]) | (~ (fsm_output[1])) |
      (fsm_output[8]));
  assign and_715_nl = (fsm_output[3]) & (fsm_output[2]) & (fsm_output[1]) & (fsm_output[8]);
  assign mux_473_nl = MUX_s_1_2_2(nor_412_nl, and_715_nl, fsm_output[5]);
  assign nor_409_nl = ~((fsm_output[2]) | (fsm_output[0]) | (fsm_output[1]) | (~
      (fsm_output[8])));
  assign mux_471_nl = MUX_s_1_2_2(nor_366_cse, nor_411_cse, fsm_output[2]);
  assign mux_472_nl = MUX_s_1_2_2(nor_409_nl, mux_471_nl, fsm_output[3]);
  assign and_716_nl = (fsm_output[5]) & mux_472_nl;
  assign mux_474_nl = MUX_s_1_2_2(mux_473_nl, and_716_nl, fsm_output[4]);
  assign mux_469_nl = MUX_s_1_2_2(nor_414_cse, or_373_cse, fsm_output[2]);
  assign or_563_nl = (fsm_output[5]) | ((fsm_output[3]) & mux_469_nl);
  assign mux_470_nl = MUX_s_1_2_2((fsm_output[5]), or_563_nl, fsm_output[4]);
  assign mux_475_nl = MUX_s_1_2_2(mux_474_nl, mux_470_nl, fsm_output[6]);
  assign mux_467_nl = MUX_s_1_2_2(nor_365_cse, or_381_cse, fsm_output[2]);
  assign nor_416_nl = ~((fsm_output[5:3]!=3'b000) | mux_467_nl);
  assign nor_417_nl = ~((fsm_output[4]) | (fsm_output[5]) | (~ (fsm_output[3])) |
      (fsm_output[8]));
  assign mux_468_nl = MUX_s_1_2_2(nor_416_nl, nor_417_nl, fsm_output[6]);
  assign mux_476_nl = MUX_s_1_2_2(mux_475_nl, mux_468_nl, fsm_output[7]);
  assign for_for_j_or_nl = (and_dcpl_109 & nor_239_cse & and_dcpl_210) | and_dcpl_369
      | and_dcpl_291;
  assign mux_501_nl = MUX_s_1_2_2((~ (fsm_output[1])), or_603_cse, fsm_output[2]);
  assign mux_502_nl = MUX_s_1_2_2(or_604_cse, mux_501_nl, fsm_output[8]);
  assign or_605_nl = (fsm_output[4:3]!=2'b00) | mux_502_nl;
  assign nand_197_nl = ~((fsm_output[3]) & (fsm_output[8]) & (fsm_output[2]) & (fsm_output[0])
      & (fsm_output[1]));
  assign mux_498_nl = MUX_s_1_2_2((~ and_692_cse), and_692_cse, fsm_output[2]);
  assign or_599_nl = (fsm_output[8]) | mux_498_nl;
  assign mux_499_nl = MUX_s_1_2_2(or_601_cse, or_599_nl, fsm_output[3]);
  assign mux_500_nl = MUX_s_1_2_2(nand_197_nl, mux_499_nl, fsm_output[4]);
  assign mux_503_nl = MUX_s_1_2_2(or_605_nl, mux_500_nl, fsm_output[5]);
  assign or_598_nl = (~ (fsm_output[4])) | (~ (fsm_output[3])) | (fsm_output[8])
      | (~((fsm_output[2]) | (fsm_output[0]) | (~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm)
      | (fsm_output[1])));
  assign mux_497_nl = MUX_s_1_2_2(or_598_nl, (fsm_output[8]), fsm_output[5]);
  assign mux_504_nl = MUX_s_1_2_2(mux_503_nl, mux_497_nl, fsm_output[6]);
  assign or_594_nl = (fsm_output[4]) | (fsm_output[3]) | (fsm_output[8]) | (fsm_output[2])
      | (fsm_output[1]);
  assign mux_496_nl = MUX_s_1_2_2((fsm_output[8]), or_594_nl, fsm_output[5]);
  assign or_595_nl = (fsm_output[6]) | mux_496_nl;
  assign mux_505_nl = MUX_s_1_2_2(mux_504_nl, or_595_nl, fsm_output[7]);
  assign for_for_j_mux1h_nl = MUX1HOT_v_9_4_2(z_out_2, reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1,
      9'b101111111, RMS_NORM_LOOP_2_2_dfr_sva_8_0, {for_for_j_or_nl , (~ mux_505_nl)
      , and_dcpl_360 , and_dcpl_370});
  assign mux_492_nl = MUX_s_1_2_2(nand_195_cse, (fsm_output[2]), or_603_cse);
  assign or_593_nl = (fsm_output[4:3]!=2'b00) | mux_492_nl;
  assign nand_196_nl = ~((fsm_output[3]) & (fsm_output[1]) & (fsm_output[8]) & (fsm_output[2]));
  assign mux_488_nl = MUX_s_1_2_2((fsm_output[8]), or_589_cse, fsm_output[0]);
  assign mux_489_nl = MUX_s_1_2_2(or_tmp_408, mux_488_nl, fsm_output[1]);
  assign mux_490_nl = MUX_s_1_2_2(or_601_cse, mux_489_nl, fsm_output[3]);
  assign mux_491_nl = MUX_s_1_2_2(nand_196_nl, mux_490_nl, fsm_output[4]);
  assign mux_493_nl = MUX_s_1_2_2(or_593_nl, mux_491_nl, fsm_output[5]);
  assign or_588_nl = (~ (fsm_output[1])) | (fsm_output[8]) | (~ (fsm_output[2]));
  assign mux_485_nl = MUX_s_1_2_2((fsm_output[8]), or_tmp_408, nor_413_cse);
  assign mux_486_nl = MUX_s_1_2_2(or_588_nl, mux_485_nl, fsm_output[3]);
  assign nand_24_nl = ~((fsm_output[4]) & (~ mux_486_nl));
  assign mux_487_nl = MUX_s_1_2_2(nand_24_nl, (fsm_output[8]), fsm_output[5]);
  assign mux_494_nl = MUX_s_1_2_2(mux_493_nl, mux_487_nl, fsm_output[6]);
  assign mux_495_nl = MUX_s_1_2_2(mux_494_nl, or_609_cse, fsm_output[7]);
  assign INIT_2D_MEM_LOOP_2_not_1_nl = ~ mux_495_nl;
  assign for_for_j_and_nl = MUX_v_9_2_2(9'b000000000, for_for_j_mux1h_nl, INIT_2D_MEM_LOOP_2_not_1_nl);
  assign or_616_nl = (fsm_output[4]) | (fsm_output[0]) | (fsm_output[1]) | (~ (fsm_output[8]));
  assign mux_513_nl = MUX_s_1_2_2((fsm_output[4]), or_616_nl, fsm_output[2]);
  assign or_617_nl = (fsm_output[3]) | mux_513_nl;
  assign nand_25_nl = ~(nor_126_cse & nand_199_cse & (fsm_output[8]));
  assign or_23_nl = (~ (fsm_output[1])) | (fsm_output[8]) | (~ (fsm_output[4]));
  assign mux_510_nl = MUX_s_1_2_2(nand_200_cse, or_612_cse, fsm_output[4]);
  assign mux_511_nl = MUX_s_1_2_2(or_23_nl, mux_510_nl, fsm_output[2]);
  assign mux_512_nl = MUX_s_1_2_2(nand_25_nl, mux_511_nl, fsm_output[3]);
  assign mux_514_nl = MUX_s_1_2_2(or_617_nl, mux_512_nl, fsm_output[5]);
  assign nand_201_nl = ~((fsm_output[2]) & (fsm_output[4]) & (fsm_output[1]) & (~
      (fsm_output[8])));
  assign mux_508_nl = MUX_s_1_2_2(nand_201_nl, or_21_cse, fsm_output[3]);
  assign mux_509_nl = MUX_s_1_2_2(mux_508_nl, (fsm_output[8]), fsm_output[5]);
  assign mux_515_nl = MUX_s_1_2_2(mux_514_nl, mux_509_nl, fsm_output[6]);
  assign mux_516_nl = MUX_s_1_2_2(mux_515_nl, or_609_cse, fsm_output[7]);
  assign for_for_for_for_nor_nl = ~(z_out_28_2 | z_out_30_2);
  assign INIT_2D_MEM_LOOP_2_and_1_nl = (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1==9'b000000000)
      & INIT_2D_MEM_LOOP_2_3_INIT_2D_MEM_LOOP_2_3_nor_itm_1 & (INIT_2D_MEM_LOOP_2_2_acc_itm==9'b000000000);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_nl = (CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0[2])
      & (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[2]) & (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[2]);
  assign CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_nl = ~(z_out_29_2 | z_out_28_2);
  assign and_396_nl = and_dcpl_111 & and_dcpl_127 & (fsm_output[1:0]==2'b01) & (~
      (rms_norm_384_val_acc_psp_sva_1[31]));
  assign or_663_nl = (fsm_output[3]) | (fsm_output[1]) | (fsm_output[8]);
  assign or_662_nl = (fsm_output[3]) | nand_200_cse;
  assign mux_562_nl = MUX_s_1_2_2(or_663_nl, or_662_nl, fsm_output[0]);
  assign nor_431_nl = ~((~ (fsm_output[5])) | (fsm_output[2]) | mux_562_nl);
  assign or_659_nl = (fsm_output[0]) | (~((fsm_output[3]) & (fsm_output[1]) & (fsm_output[8])));
  assign or_658_nl = (~ (fsm_output[0])) | (fsm_output[3]) | (fsm_output[1]) | (fsm_output[8]);
  assign mux_561_nl = MUX_s_1_2_2(or_659_nl, or_658_nl, fsm_output[2]);
  assign nor_432_nl = ~((fsm_output[5]) | mux_561_nl);
  assign mux_563_nl = MUX_s_1_2_2(nor_431_nl, nor_432_nl, fsm_output[4]);
  assign compute_sqrt_for_i_or_1_nl = and_dcpl_393 | (mux_563_nl & and_dcpl_137);
  assign compute_sqrt_for_i_or_nl = and_dcpl_397 | and_dcpl_400 | and_dcpl_263 |
      and_dcpl_234 | and_dcpl_246 | and_dcpl_247;
  assign compute_sqrt_for_i_mux1h_nl = MUX1HOT_v_4_3_2((z_out_16_4_0[3:0]), z_out_31,
      z_out_12, {compute_sqrt_for_i_or_1_nl , compute_sqrt_for_i_or_nl , and_dcpl_243});
  assign or_1325_nl = (fsm_output[8:3]!=6'b001011);
  assign or_1326_nl = (fsm_output[8:3]!=6'b101100);
  assign mux_571_nl = MUX_s_1_2_2(or_1325_nl, or_1326_nl, fsm_output[2]);
  assign or_1327_nl = (fsm_output[8:3]!=6'b100001);
  assign or_1329_nl = (~ (fsm_output[6])) | (fsm_output[3]) | (fsm_output[7]) | (fsm_output[5]);
  assign mux_568_nl = MUX_s_1_2_2(or_1328_cse, or_1329_nl, fsm_output[4]);
  assign mux_569_nl = MUX_s_1_2_2(mux_568_nl, or_1330_cse, fsm_output[8]);
  assign mux_570_nl = MUX_s_1_2_2(or_1327_nl, mux_569_nl, fsm_output[2]);
  assign mux_572_nl = MUX_s_1_2_2(mux_571_nl, mux_570_nl, fsm_output[1]);
  assign or_673_nl = (~ (fsm_output[3])) | (fsm_output[7]) | (fsm_output[5]);
  assign or_672_nl = (fsm_output[3]) | (fsm_output[7]) | (~ (fsm_output[5]));
  assign mux_565_nl = MUX_s_1_2_2(or_673_nl, or_672_nl, fsm_output[6]);
  assign or_1331_nl = (fsm_output[8]) | (fsm_output[4]) | mux_565_nl;
  assign or_1332_nl = (fsm_output[8:3]!=6'b101011);
  assign mux_566_nl = MUX_s_1_2_2(or_1331_nl, or_1332_nl, fsm_output[2]);
  assign or_667_nl = (fsm_output[4]) | (fsm_output[6]) | (fsm_output[3]) | not_tmp_35;
  assign mux_564_nl = MUX_s_1_2_2(or_667_nl, or_1054_cse, fsm_output[8]);
  assign or_1333_nl = (fsm_output[2]) | mux_564_nl;
  assign mux_567_nl = MUX_s_1_2_2(mux_566_nl, or_1333_nl, fsm_output[1]);
  assign mux_573_nl = MUX_s_1_2_2(mux_572_nl, mux_567_nl, fsm_output[0]);
  assign nor_132_nl = ~((fsm_output[2]) | (~ (fsm_output[6])));
  assign mux_556_nl = MUX_s_1_2_2(or_tmp_32, or_tmp_510, nor_132_nl);
  assign mux_557_nl = MUX_s_1_2_2(mux_556_nl, mux_tmp_543, fsm_output[0]);
  assign mux_558_nl = MUX_s_1_2_2(mux_tmp_545, mux_557_nl, fsm_output[4]);
  assign mux_553_nl = MUX_s_1_2_2(or_tmp_32, or_745_cse, fsm_output[6]);
  assign mux_554_nl = MUX_s_1_2_2(or_55_cse, mux_553_nl, fsm_output[2]);
  assign mux_551_nl = MUX_s_1_2_2(mux_tmp_542, or_58_cse, fsm_output[2]);
  assign mux_549_nl = MUX_s_1_2_2((~ or_tmp_30), or_tmp_32, or_657_cse);
  assign mux_550_nl = MUX_s_1_2_2(mux_549_nl, or_58_cse, fsm_output[2]);
  assign mux_552_nl = MUX_s_1_2_2(mux_551_nl, mux_550_nl, fsm_output[0]);
  assign mux_555_nl = MUX_s_1_2_2(mux_554_nl, mux_552_nl, fsm_output[4]);
  assign mux_559_nl = MUX_s_1_2_2(mux_558_nl, mux_555_nl, fsm_output[3]);
  assign mux_546_nl = MUX_s_1_2_2(mux_tmp_545, or_55_cse, fsm_output[0]);
  assign mux_547_nl = MUX_s_1_2_2(mux_546_nl, mux_tmp_543, fsm_output[4]);
  assign mux_538_nl = MUX_s_1_2_2(mux_tmp_534, or_745_cse, fsm_output[6]);
  assign mux_539_nl = MUX_s_1_2_2(or_55_cse, mux_538_nl, fsm_output[2]);
  assign or_650_nl = (fsm_output[8]) | (fsm_output[7]) | (fsm_output[5]);
  assign mux_536_nl = MUX_s_1_2_2(or_650_nl, or_745_cse, fsm_output[6]);
  assign mux_535_nl = MUX_s_1_2_2(mux_tmp_534, or_tmp_510, fsm_output[6]);
  assign mux_537_nl = MUX_s_1_2_2(mux_536_nl, mux_535_nl, fsm_output[2]);
  assign mux_540_nl = MUX_s_1_2_2(mux_539_nl, mux_537_nl, fsm_output[0]);
  assign or_647_nl = (~ (fsm_output[8])) | (fsm_output[7]) | (fsm_output[5]);
  assign mux_530_nl = MUX_s_1_2_2(or_647_nl, or_tmp_510, fsm_output[6]);
  assign mux_531_nl = MUX_s_1_2_2(mux_530_nl, mux_tmp_528, fsm_output[2]);
  assign mux_529_nl = MUX_s_1_2_2(or_58_cse, mux_tmp_528, fsm_output[2]);
  assign mux_532_nl = MUX_s_1_2_2(mux_531_nl, mux_529_nl, fsm_output[0]);
  assign mux_541_nl = MUX_s_1_2_2(mux_540_nl, mux_532_nl, fsm_output[4]);
  assign mux_548_nl = MUX_s_1_2_2(mux_547_nl, mux_541_nl, fsm_output[3]);
  assign mux_560_nl = MUX_s_1_2_2(mux_559_nl, mux_548_nl, fsm_output[1]);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_nl = MUX_s_1_2_2((compute_sqrt_for_acc_1_itm_40_1_1[39]),
      (compute_sqrt_1_for_acc_1_itm_40_1_1[39]), and_dcpl_156);
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_2_nl = (~ and_dcpl_512) & and_dcpl_409;
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux1h_1_nl = MUX1HOT_v_9_5_2((compute_sqrt_for_acc_1_itm_40_1_1[38:30]),
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1,
      z_out_2, RMS_NORM_LOOP_2_2_dfr_sva_8_0, (compute_sqrt_1_for_acc_1_itm_40_1_1[38:30]),
      {and_dcpl_154 , RMS_NORM_LOOP_2_2_dfr_sva_mx0c3 , operator_40_24_true_AC_TRN_AC_WRAP_and_2_nl
      , and_dcpl_512 , and_dcpl_156});
  assign RMS_NORM_LOOP_2_2_not_5_nl = ~ RMS_NORM_LOOP_2_2_dfr_sva_mx0c0;
  assign operator_40_24_true_AC_TRN_AC_WRAP_and_1_nl = MUX_v_9_2_2(9'b000000000,
      operator_40_24_true_AC_TRN_AC_WRAP_mux1h_1_nl, RMS_NORM_LOOP_2_2_not_5_nl);
  assign compute_sqrt_for_or_3_nl = APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c1
      | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c2
      | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c4;
  assign compute_sqrt_for_or_4_nl = and_dcpl_263 | APPLY_ROTARY_POS_EMB_LOOP_6_slc_APPLY_ROTARY_POS_EMB_LOOP_6_acc_2_itm_mx0c6
      | and_dcpl_331;
  assign compute_sqrt_for_or_5_nl = and_dcpl_245 | and_dcpl_213;
  assign mux_691_nl = MUX_s_1_2_2(mux_710_cse, mux_tmp_685, and_692_cse);
  assign mux_692_nl = MUX_s_1_2_2(or_817_cse, mux_691_nl, fsm_output[5]);
  assign or_19_nl = (~ (fsm_output[3])) | (fsm_output[8]) | (~ (fsm_output[4]));
  assign mux_682_nl = MUX_s_1_2_2((fsm_output[7]), or_832_cse, or_19_nl);
  assign nor_157_nl = ~((~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[8])));
  assign mux_681_nl = MUX_s_1_2_2(or_832_cse, (fsm_output[7]), nor_157_nl);
  assign mux_683_nl = MUX_s_1_2_2(mux_682_nl, mux_681_nl, fsm_output[0]);
  assign mux_686_nl = MUX_s_1_2_2(mux_tmp_685, mux_683_nl, fsm_output[1]);
  assign mux_687_nl = MUX_s_1_2_2(or_802_cse, mux_686_nl, fsm_output[5]);
  assign mux_693_nl = MUX_s_1_2_2(mux_692_nl, mux_687_nl, fsm_output[2]);
  assign QUANTIZE_ACTIVATION_LOOP_2_attention_abs_2_nand_nl = ~((attention_abs_2_mux_2[39])
      & (RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[39]));
  assign attention_abs_2_mux_3_nl = MUX_v_39_2_2((RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[38:0]),
      (attention_abs_2_mux_2[38:0]), RMS_NORM_LOOP_2_slc_RMS_NORM_LOOP_2_mul_67_28_ncse_sva[39]);
  assign nl_QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl = conv_s2u_40_41({QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_39
      , QUANTIZE_ACTIVATION_LOOP_1_max_val_lpi_2_38_0}) + conv_s2u_40_41({QUANTIZE_ACTIVATION_LOOP_2_attention_abs_2_nand_nl
      , (~ attention_abs_2_mux_3_nl)}) + 41'b00000000000000000000000000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl = nl_QUANTIZE_ACTIVATION_LOOP_2_acc_4_nl[40:0];
  assign nl_SF_LOOP_3_acc_70_nl = conv_u2u_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18])
      + conv_u2u_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[2]);
  assign SF_LOOP_3_acc_70_nl = nl_SF_LOOP_3_acc_70_nl[1:0];
  assign nl_SF_LOOP_3_acc_89_nl = conv_s2u_1_2(SF_LOOP_3_acc_5_psp_sva[20]) + conv_s2u_1_2(SF_LOOP_3_acc_5_psp_sva[21]);
  assign SF_LOOP_3_acc_89_nl = nl_SF_LOOP_3_acc_89_nl[1:0];
  assign mux_770_nl = MUX_s_1_2_2(or_913_cse, or_702_cse, fsm_output[3]);
  assign mux_771_nl = MUX_s_1_2_2(mux_770_nl, or_tmp_748, fsm_output[2]);
  assign mux_769_nl = MUX_s_1_2_2(or_913_cse, or_tmp_748, fsm_output[2]);
  assign mux_772_nl = MUX_s_1_2_2(mux_771_nl, mux_769_nl, fsm_output[1]);
  assign or_895_nl = (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[8]) | (fsm_output[7]);
  assign mux_767_nl = MUX_s_1_2_2(or_895_nl, or_tmp_748, fsm_output[2]);
  assign nor_498_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[8])) | (fsm_output[7]));
  assign nor_499_nl = ~((fsm_output[4]) | (fsm_output[8]) | (fsm_output[7]));
  assign mux_766_nl = MUX_s_1_2_2(nor_498_nl, nor_499_nl, fsm_output[3]);
  assign nand_49_nl = ~((fsm_output[2]) & mux_766_nl);
  assign mux_768_nl = MUX_s_1_2_2(mux_767_nl, nand_49_nl, fsm_output[1]);
  assign mux_773_nl = MUX_s_1_2_2(mux_772_nl, mux_768_nl, fsm_output[0]);
  assign nor_500_nl = ~(mux_773_nl | or_216_cse);
  assign nor_501_nl = ~((~ (fsm_output[2])) | (fsm_output[3]) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (fsm_output[8]));
  assign nor_502_nl = ~((fsm_output[2]) | (fsm_output[3]) | (fsm_output[4]) | (~((fsm_output[5])
      & (fsm_output[8]))));
  assign mux_775_nl = MUX_s_1_2_2(nor_501_nl, nor_502_nl, fsm_output[1]);
  assign nor_503_nl = ~((fsm_output[2]) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (~ (fsm_output[8])));
  assign nor_504_nl = ~((~ (fsm_output[2])) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[5]) | (fsm_output[8]));
  assign mux_774_nl = MUX_s_1_2_2(nor_503_nl, nor_504_nl, fsm_output[1]);
  assign mux_776_nl = MUX_s_1_2_2(mux_775_nl, mux_774_nl, fsm_output[0]);
  assign and_465_nl = mux_776_nl & and_dcpl_137;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux1h_nl = MUX1HOT_v_2_4_2(APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0,
      (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[1:0]), SF_LOOP_3_acc_70_nl, SF_LOOP_3_acc_89_nl,
      {nor_500_nl , and_465_nl , and_dcpl_361 , and_dcpl_454});
  assign nor_177_nl = ~((fsm_output[1]) | (~ (fsm_output[3])));
  assign mux_761_nl = MUX_s_1_2_2(or_890_cse, or_360_cse, nor_177_nl);
  assign or_889_nl = (~ (fsm_output[3])) | (fsm_output[4]) | (~ (fsm_output[7]));
  assign mux_760_nl = MUX_s_1_2_2(or_909_cse, or_889_nl, fsm_output[1]);
  assign mux_762_nl = MUX_s_1_2_2(mux_761_nl, mux_760_nl, fsm_output[0]);
  assign or_887_nl = (~ (fsm_output[0])) | (fsm_output[1]) | (~ (fsm_output[3]))
      | (~ (fsm_output[4])) | (fsm_output[7]);
  assign mux_763_nl = MUX_s_1_2_2(mux_762_nl, or_887_nl, fsm_output[8]);
  assign or_886_nl = (~ (fsm_output[8])) | (fsm_output[0]) | (~ (fsm_output[1]))
      | (fsm_output[3]) | (fsm_output[4]) | (fsm_output[7]);
  assign mux_764_nl = MUX_s_1_2_2(mux_763_nl, or_886_nl, fsm_output[5]);
  assign or_884_nl = (fsm_output[1]) | (fsm_output[3]) | (~ (fsm_output[4])) | (fsm_output[7]);
  assign mux_757_nl = MUX_s_1_2_2(or_360_cse, (fsm_output[7]), fsm_output[3]);
  assign nand_48_nl = ~((fsm_output[1]) & (~ mux_757_nl));
  assign mux_758_nl = MUX_s_1_2_2(or_884_nl, nand_48_nl, fsm_output[0]);
  assign mux_759_nl = MUX_s_1_2_2(mux_758_nl, or_909_cse, fsm_output[8]);
  assign or_885_nl = (fsm_output[5]) | mux_759_nl;
  assign mux_765_nl = MUX_s_1_2_2(mux_764_nl, or_885_nl, fsm_output[2]);
  assign nor_579_nl = ~(mux_765_nl | (~ (fsm_output[6])));
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_nl = MUX_v_2_2_2(2'b00,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux1h_nl, nor_579_nl);
  assign nor_506_nl = ~((fsm_output[2]) | (fsm_output[3]) | (~ (fsm_output[4])) |
      (fsm_output[6]));
  assign mux_789_nl = MUX_s_1_2_2(and_766_cse, nor_506_nl, fsm_output[1]);
  assign mux_791_nl = MUX_s_1_2_2(nor_505_cse, mux_789_nl, fsm_output[0]);
  assign and_469_nl = mux_791_nl & and_dcpl_398;
  assign nl_QUANTIZE_ACTIVATION_LOOP_5_1_acc_3_nl = conv_u2s_2_3(APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0)
      + 3'b001;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_acc_3_nl = nl_QUANTIZE_ACTIVATION_LOOP_5_1_acc_3_nl[2:0];
  assign nor_507_nl = ~((fsm_output[3:2]!=2'b01) | nand_93_cse);
  assign nor_508_nl = ~((fsm_output[2]) | (~ (fsm_output[3])) | (~ (fsm_output[4]))
      | (fsm_output[8]));
  assign mux_797_nl = MUX_s_1_2_2(nor_507_nl, nor_508_nl, fsm_output[1]);
  assign mux_796_nl = MUX_s_1_2_2((~ (fsm_output[8])), (fsm_output[8]), fsm_output[4]);
  assign and_473_nl = (fsm_output[3:1]==3'b111) & mux_796_nl;
  assign mux_798_nl = MUX_s_1_2_2(mux_797_nl, and_473_nl, fsm_output[0]);
  assign and_474_nl = mux_798_nl & and_dcpl_137 & (~ (fsm_output[5]));
  assign or_954_nl = (fsm_output[0]) | (fsm_output[4]) | (fsm_output[6]) | (fsm_output[5])
      | (fsm_output[7]) | (~ (fsm_output[8]));
  assign or_952_nl = (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3]) | (fsm_output[8:4]!=5'b01011);
  assign nand_223_nl = ~((fsm_output[8:4]==5'b01111));
  assign mux_824_nl = MUX_s_1_2_2(or_952_nl, nand_223_nl, fsm_output[0]);
  assign mux_825_nl = MUX_s_1_2_2(or_954_nl, mux_824_nl, fsm_output[1]);
  assign nor_515_nl = ~((fsm_output[3]) | mux_825_nl);
  assign nor_516_nl = ~((fsm_output[1:0]!=2'b11) | CACHE_UPDATE_LOOP_1_and_cse |
      (fsm_output[8:5]!=4'b0101));
  assign nor_517_nl = ~((fsm_output[1:0]!=2'b00) | nor_514_cse | (fsm_output[8:5]!=4'b0101));
  assign mux_823_nl = MUX_s_1_2_2(nor_516_nl, nor_517_nl, fsm_output[3]);
  assign mux_826_nl = MUX_s_1_2_2(nor_515_nl, mux_823_nl, fsm_output[2]);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_k_mux1h_1_nl = MUX1HOT_v_3_3_2(QUANTIZE_ACTIVATION_LOOP_5_1_acc_3_nl,
      (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[2:0]), SF_LOOP_3_acc_61_cse_mx0w4,
      {and_474_nl , mux_826_nl , and_dcpl_361});
  assign or_1221_nl = (~ CACHE_UPDATE_LOOP_1_and_cse) | (fsm_output[6:5]!=2'b01);
  assign mux_821_nl = MUX_s_1_2_2(or_1221_nl, nand_243_cse, fsm_output[4]);
  assign nor_512_nl = ~((~ (fsm_output[3])) | (~ (fsm_output[2])) | (fsm_output[0])
      | mux_821_nl);
  assign nand_221_nl = ~((fsm_output[4]) & (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2[3])
      & (fsm_output[6:5]==2'b01));
  assign mux_879_nl = MUX_s_1_2_2(or_tmp_283, or_216_cse, fsm_output[4]);
  assign mux_819_nl = MUX_s_1_2_2(nand_221_nl, mux_879_nl, fsm_output[0]);
  assign nand_222_nl = ~((fsm_output[0]) & CACHE_UPDATE_LOOP_1_and_cse & (fsm_output[6:5]==2'b01));
  assign mux_820_nl = MUX_s_1_2_2(mux_819_nl, nand_222_nl, fsm_output[2]);
  assign nor_513_nl = ~((fsm_output[3]) | mux_820_nl);
  assign mux_822_nl = MUX_s_1_2_2(nor_512_nl, nor_513_nl, fsm_output[1]);
  assign APPLY_ROTARY_POS_EMB_LOOP_1_i_nand_nl = ~(mux_822_nl & and_dcpl_29);
  assign or_934_nl = (~ (fsm_output[4])) | (fsm_output[7]) | (~ (fsm_output[6]))
      | (fsm_output[8]);
  assign mux_813_nl = MUX_s_1_2_2(mux_tmp_805, or_745_cse, fsm_output[4]);
  assign mux_812_nl = MUX_s_1_2_2(or_55_cse, or_791_cse, and_768_cse);
  assign mux_814_nl = MUX_s_1_2_2(mux_813_nl, mux_812_nl, fsm_output[1]);
  assign mux_815_nl = MUX_s_1_2_2(or_934_nl, mux_814_nl, fsm_output[5]);
  assign mux_809_nl = MUX_s_1_2_2(or_55_cse, mux_tmp_805, nor_179_cse);
  assign or_933_nl = (~(and_768_cse | (fsm_output[7]))) | (~ (fsm_output[6])) | (fsm_output[8]);
  assign mux_810_nl = MUX_s_1_2_2(mux_809_nl, or_933_nl, fsm_output[1]);
  assign mux_811_nl = MUX_s_1_2_2(mux_810_nl, mux_tmp_803, fsm_output[5]);
  assign mux_816_nl = MUX_s_1_2_2(mux_815_nl, mux_811_nl, fsm_output[3]);
  assign nand_50_nl = ~((fsm_output[4]) & (~ mux_tmp_805));
  assign mux_806_nl = MUX_s_1_2_2(nand_88_cse, nand_50_nl, or_603_cse);
  assign mux_804_nl = MUX_s_1_2_2(mux_tmp_803, or_129_cse, and_692_cse);
  assign mux_807_nl = MUX_s_1_2_2(mux_806_nl, mux_804_nl, fsm_output[5]);
  assign or_928_nl = nor_510_cse | (~ (fsm_output[6])) | (fsm_output[8]);
  assign mux_801_nl = MUX_s_1_2_2(or_928_nl, nand_88_cse, and_692_cse);
  assign mux_799_nl = MUX_s_1_2_2(or_745_cse, or_55_cse, fsm_output[4]);
  assign mux_800_nl = MUX_s_1_2_2(or_129_cse, mux_799_nl, or_603_cse);
  assign mux_802_nl = MUX_s_1_2_2(mux_801_nl, mux_800_nl, fsm_output[5]);
  assign mux_808_nl = MUX_s_1_2_2(mux_807_nl, mux_802_nl, fsm_output[3]);
  assign mux_817_nl = MUX_s_1_2_2(mux_816_nl, mux_808_nl, fsm_output[2]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_4_ki_mux1h_2_nl = MUX1HOT_v_4_3_2((LINEAR_FORWARD_NO_MUL_LOOP_4_ki_4_0_sva_2[3:0]),
      z_out_35, z_out_31, {and_dcpl_462 , and_dcpl_306 , and_dcpl_243});
  assign not_2161_nl = ~ and_dcpl_461;
  assign GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_5_nl = MUX1HOT_v_3_3_2(LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2,
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2[2:0]), 3'b001, {GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c1
      , GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c2 , GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c3});
  assign GEMM_3D_FLOAT_LOOP_1_1_i_not_2_nl = ~ GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0_mx0c0;
  assign GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_6_nl = MUX1HOT_v_2_4_2((LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2[2:1]),
      (GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva[2:1]), (QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3[2:1]),
      (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[2:1]), {CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c1
      , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c3 , and_dcpl_246 , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5});
  assign CACHE_UPDATE_LOOP_2_1_j_not_1_nl = ~ CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c0;
  assign GEMM_3D_FLOAT_LOOP_4_1_l_mux1h_7_nl = MUX1HOT_s_1_5_2((LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2[0]),
      (APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1[0]), (GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva[0]),
      (QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3[0]), (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[0]),
      {CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c1 , and_dcpl_284 , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c3
      , and_dcpl_246 , CACHE_UPDATE_LOOP_2_1_j_2_0_sva_mx0c5});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_nl = and_dcpl_397 | and_dcpl_400 | and_dcpl_234
      | and_dcpl_246 | and_dcpl_247;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_15_nl = MUX1HOT_v_4_3_2((LINEAR_FORWARD_NO_MUL_LOOP_4_2_ki_4_0_sva_2[3:0]),
      z_out_12, SF_LOOP_3_acc_63_cse_mx0w6, {and_dcpl_462 , APPLY_ROTARY_POS_EMB_LOOP_6_or_nl
      , and_dcpl_361});
  assign not_2162_nl = ~ and_dcpl_461;
  assign nand_246_nl = ~((fsm_output[2]) & (fsm_output[5]) & (fsm_output[3]) & (fsm_output[1])
      & (fsm_output[7]));
  assign mux_898_nl = MUX_s_1_2_2(or_360_cse, (~ or_231_cse), fsm_output[0]);
  assign mux_897_nl = MUX_s_1_2_2((~ or_231_cse), mux_185_cse, fsm_output[0]);
  assign mux_899_nl = MUX_s_1_2_2(mux_898_nl, mux_897_nl, fsm_output[1]);
  assign mux_900_nl = MUX_s_1_2_2(or_360_cse, mux_899_nl, fsm_output[3]);
  assign mux_895_nl = MUX_s_1_2_2((~ (fsm_output[7])), or_360_cse, or_603_cse);
  assign mux_894_nl = MUX_s_1_2_2((~ (fsm_output[7])), or_360_cse, and_692_cse);
  assign mux_896_nl = MUX_s_1_2_2(mux_895_nl, mux_894_nl, fsm_output[3]);
  assign mux_901_nl = MUX_s_1_2_2(mux_900_nl, mux_896_nl, fsm_output[5]);
  assign or_1038_nl = (~((fsm_output[0]) | (~ (fsm_output[7])))) | (fsm_output[4]);
  assign mux_892_nl = MUX_s_1_2_2((~ mux_185_cse), or_1038_nl, fsm_output[1]);
  assign nand_247_nl = ~((fsm_output[3]) & mux_892_nl);
  assign mux_889_nl = MUX_s_1_2_2(or_360_cse, (~ (fsm_output[7])), or_603_cse);
  assign mux_890_nl = MUX_s_1_2_2(mux_889_nl, or_360_cse, fsm_output[3]);
  assign mux_893_nl = MUX_s_1_2_2(nand_247_nl, mux_890_nl, fsm_output[5]);
  assign mux_902_nl = MUX_s_1_2_2(mux_901_nl, mux_893_nl, fsm_output[2]);
  assign mux_903_nl = MUX_s_1_2_2(nand_246_nl, mux_902_nl, fsm_output[6]);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux_nl = MUX_s_1_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd,
      (CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0[1]), and_dcpl_478);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_nl
      = QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux_nl & nor_580_seb;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux_1_nl = MUX_s_1_2_2(reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1,
      (CACHE_UPDATE_LOOP_3_qif_acc_3_ncse_2_0[0]), and_dcpl_478);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_4_nl
      = QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux_1_nl & nor_580_seb;
  assign nl_SF_LOOP_3_acc_83_nl = conv_u2u_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36])
      + conv_u2u_1_2(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[35]);
  assign SF_LOOP_3_acc_83_nl = nl_SF_LOOP_3_acc_83_nl[1:0];
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_2_nl = (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0==2'b00)
      & and_dcpl_316;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_3_nl = (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0==2'b01)
      & and_dcpl_316;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_4_nl = (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0==2'b10)
      & and_dcpl_316;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_5_nl = (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0==2'b11)
      & and_dcpl_316;
  assign or_1050_nl = (fsm_output[2:0]!=3'b011);
  assign mux_912_nl = MUX_s_1_2_2(mux_tmp_125, or_360_cse, or_1050_nl);
  assign and_500_nl = (~ mux_912_nl) & and_dcpl_482;
  assign and_501_nl = and_dcpl_204 & and_dcpl_116;
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux1h_2_nl = MUX1HOT_v_2_8_2((LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva[1:0]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva[3:2]), (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva[5:4]),
      (LINEAR_FORWARD_NO_MUL_LOOP_4_1_packed_val_sva[7:6]), CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0,
      (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[1:0]), SF_LOOP_3_acc_83_nl, LINEAR_FORWARD_NO_MUL_LOOP_5_3_weight_val_mux_tmp,
      {QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_2_nl , QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_3_nl
      , QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_4_nl , QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_5_nl
      , and_500_nl , and_dcpl_478 , and_dcpl_361 , and_501_nl});
  assign mux_909_nl = MUX_s_1_2_2(nand_tmp_58, or_tmp_895, or_604_cse);
  assign mux_904_nl = MUX_s_1_2_2(or_745_cse, (fsm_output[7]), fsm_output[4]);
  assign mux_905_nl = MUX_s_1_2_2(or_702_cse, mux_904_nl, fsm_output[3]);
  assign mux_907_nl = MUX_s_1_2_2(nand_tmp_58, mux_905_nl, fsm_output[2]);
  assign mux_908_nl = MUX_s_1_2_2(or_tmp_895, mux_907_nl, fsm_output[1]);
  assign mux_910_nl = MUX_s_1_2_2(mux_909_nl, mux_908_nl, fsm_output[0]);
  assign nor_581_nl = ~(mux_910_nl | or_216_cse);
  assign QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_and_1_nl = MUX_v_2_2_2(2'b00,
      QUANTIZE_ACTIVATION_LOOP_5_1_quantized_value_clamped_qif_mux1h_2_nl, nor_581_nl);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_acc_2_nl = conv_u2s_2_3({reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd
      , reg_APPLY_ROTARY_POS_EMB_LOOP_3_acc_36_1_ftd_1}) + 3'b001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_acc_2_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_5_acc_2_nl[2:0];
  assign nl_SF_LOOP_3_acc_81_nl = conv_u2u_2_3(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36]))
      + conv_u2u_1_3(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[35]);
  assign SF_LOOP_3_acc_81_nl = nl_SF_LOOP_3_acc_81_nl[2:0];
  assign mux_930_nl = MUX_s_1_2_2(or_360_cse, mux_tmp_125, fsm_output[2]);
  assign mux_929_nl = MUX_s_1_2_2(mux_tmp_125, or_360_cse, fsm_output[2]);
  assign mux_931_nl = MUX_s_1_2_2(mux_930_nl, mux_929_nl, and_692_cse);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_acc_2_nl = conv_u2s_2_3(CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0)
      + 3'b001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_acc_2_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_acc_2_nl[2:0];
  assign nl_SF_LOOP_3_acc_69_nl = conv_u2u_2_3({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18])
      , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18])}) + conv_u2u_2_3(signext_2_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[2]));
  assign SF_LOOP_3_acc_69_nl = nl_SF_LOOP_3_acc_69_nl[2:0];
  assign nl_SF_LOOP_3_acc_91_nl = conv_u2u_2_3(signext_2_1(SF_LOOP_3_acc_5_psp_sva[20]))
      + conv_u2u_2_3(signext_2_1(SF_LOOP_3_acc_5_psp_sva[21]));
  assign SF_LOOP_3_acc_91_nl = nl_SF_LOOP_3_acc_91_nl[2:0];
  assign nor_546_nl = ~((~ (fsm_output[3])) | (fsm_output[0]) | (fsm_output[1]) |
      (~ (fsm_output[7])));
  assign and_796_nl = (fsm_output[3]) & (fsm_output[0]) & (fsm_output[1]) & (~ (fsm_output[7]));
  assign mux_926_nl = MUX_s_1_2_2(nor_546_nl, and_796_nl, fsm_output[4]);
  assign or_1066_nl = (fsm_output[1]) | (~ (fsm_output[7]));
  assign mux_924_nl = MUX_s_1_2_2((~ (fsm_output[7])), (fsm_output[7]), fsm_output[1]);
  assign mux_925_nl = MUX_s_1_2_2(or_1066_nl, mux_924_nl, fsm_output[0]);
  assign and_797_nl = (fsm_output[4:3]==2'b11) & mux_925_nl;
  assign mux_927_nl = MUX_s_1_2_2(mux_926_nl, and_797_nl, fsm_output[2]);
  assign nor_547_nl = ~((fsm_output[3]) | (fsm_output[1]) | (~ (fsm_output[7])));
  assign mux_922_nl = MUX_s_1_2_2((fsm_output[7]), nor_547_nl, fsm_output[4]);
  assign nor_548_nl = ~((fsm_output[4]) | (~ (fsm_output[7])));
  assign mux_923_nl = MUX_s_1_2_2(mux_922_nl, nor_548_nl, fsm_output[2]);
  assign mux_928_nl = MUX_s_1_2_2(mux_927_nl, mux_923_nl, fsm_output[5]);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_or_nl = ((LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_weight_val_conc_1_1_1_0_svs==2'b01))
      | LINEAR_FORWARD_NO_MUL_LOOP_5_LINEAR_FORWARD_NO_MUL_LOOP_5_and_1_tmp;
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_mux_1_nl = MUX_s_1_2_2(LINEAR_FORWARD_NO_MUL_LOOP_5_or_nl,
      exit_APPLY_ROTARY_POS_EMB_LOOP_3_sva_dfm, and_dcpl_503);
  assign and_527_nl = and_dcpl_169 & ((~ (fsm_output[1])) | SOFTMAX_LOOP_3_acc_3_itm_40_1)
      & and_dcpl_152 & (~ (fsm_output[3])) & nor_tmp_104;
  assign and_531_nl = and_dcpl_163 & (~((fsm_output[2]) ^ (fsm_output[1]))) & and_dcpl_157
      & (~((fsm_output[3]) | (fsm_output[0])));
  assign nor_557_nl = ~((~ (fsm_output[7])) | (fsm_output[1]) | (fsm_output[0]));
  assign mux_949_nl = MUX_s_1_2_2(nor_557_nl, (fsm_output[7]), fsm_output[8]);
  assign or_1090_nl = (fsm_output[5:2]!=4'b0000) | (~ mux_949_nl);
  assign and_805_nl = (fsm_output[2]) & (~ (fsm_output[8])) & (fsm_output[7]) & (fsm_output[1])
      & (~(SOFTMAX_LOOP_3_acc_3_itm_40_1 & (fsm_output[0])));
  assign nor_558_nl = ~((fsm_output[8:7]!=2'b01));
  assign mux_946_nl = MUX_s_1_2_2(nor_558_nl, nor_411_cse, fsm_output[2]);
  assign mux_947_nl = MUX_s_1_2_2(and_805_nl, mux_946_nl, fsm_output[3]);
  assign nand_63_nl = ~((fsm_output[4]) & mux_947_nl);
  assign or_1085_nl = (fsm_output[7]) | nand_199_cse;
  assign mux_944_nl = MUX_s_1_2_2((fsm_output[7]), or_1085_nl, fsm_output[8]);
  assign nand_61_nl = ~((fsm_output[2]) & (~ mux_944_nl));
  assign mux_945_nl = MUX_s_1_2_2(nand_61_nl, (fsm_output[7]), or_1215_cse);
  assign mux_948_nl = MUX_s_1_2_2(nand_63_nl, mux_945_nl, fsm_output[5]);
  assign mux_950_nl = MUX_s_1_2_2(or_1090_nl, mux_948_nl, fsm_output[6]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_10_nl = MUX1HOT_v_4_3_2(APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_5_2,
      (SF_LOOP_3_acc_88_itm[5:2]), (RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2[5:2]),
      {and_533_itm , and_dcpl_361 , and_537_itm});
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_13_nl = MUX1HOT_v_2_3_2(APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva_1_1_0,
      (SF_LOOP_3_acc_88_itm[1:0]), (RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2[1:0]),
      {and_533_itm , and_dcpl_361 , and_537_itm});
  assign or_1334_nl = (fsm_output[2]) | (fsm_output[4]) | (fsm_output[6]) | (fsm_output[5])
      | (fsm_output[7]) | (~ (fsm_output[8]));
  assign or_1335_nl = (fsm_output[8:4]!=5'b01011);
  assign mux_956_nl = MUX_s_1_2_2(or_1334_nl, or_1335_nl, fsm_output[1]);
  assign mux_954_nl = MUX_s_1_2_2(or_tmp_937, or_tmp_936, fsm_output[4]);
  assign nand_280_nl = ~((fsm_output[2]) & (~ mux_954_nl));
  assign or_1336_nl = (~ (fsm_output[2])) | (~ (fsm_output[4])) | (fsm_output[6])
      | (~ (fsm_output[5])) | (~ (fsm_output[7])) | (fsm_output[8]);
  assign mux_955_nl = MUX_s_1_2_2(nand_280_nl, or_1336_nl, fsm_output[1]);
  assign mux_957_nl = MUX_s_1_2_2(mux_956_nl, mux_955_nl, fsm_output[3]);
  assign mux_953_nl = MUX_s_1_2_2(or_tmp_937, or_tmp_936, nor_126_cse);
  assign or_1337_nl = (fsm_output[3]) | (~ (fsm_output[1])) | mux_953_nl;
  assign mux_958_nl = MUX_s_1_2_2(mux_957_nl, or_1337_nl, fsm_output[0]);
  assign mux_967_nl = MUX_s_1_2_2(mux_tmp_963, nand_258_cse, or_603_cse);
  assign or_1109_nl = (fsm_output[3:0]!=4'b0011);
  assign mux_968_nl = MUX_s_1_2_2(mux_967_nl, or_1109_nl, fsm_output[4]);
  assign and_810_nl = (fsm_output[5]) & (~ mux_968_nl);
  assign mux_965_nl = MUX_s_1_2_2((~ or_dcpl_93), (fsm_output[2]), or_603_cse);
  assign nor_567_nl = ~((fsm_output[4]) | mux_965_nl);
  assign mux_962_nl = MUX_s_1_2_2(nor_566_cse, or_dcpl_93, fsm_output[1]);
  assign mux_964_nl = MUX_s_1_2_2(mux_tmp_963, mux_962_nl, fsm_output[0]);
  assign and_811_nl = (fsm_output[4]) & (~ mux_964_nl);
  assign mux_966_nl = MUX_s_1_2_2(nor_567_nl, and_811_nl, fsm_output[5]);
  assign mux_969_nl = MUX_s_1_2_2(and_810_nl, mux_966_nl, fsm_output[6]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_APPLY_ROTARY_POS_EMB_LOOP_6_k_mux_1_nl = MUX_s_1_2_2((CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_2[3]),
      (RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[5]), and_dcpl_263);
  assign SOFTMAX_LOOP_2_mux1h_nl = MUX1HOT_v_2_3_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1,
      RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_4_3, (SF_LOOP_3_acc_87_itm[4:3]), {and_548_itm
      , and_dcpl_503 , and_dcpl_361});
  assign SOFTMAX_LOOP_2_and_nl = MUX_v_2_2_2(2'b00, SOFTMAX_LOOP_2_mux1h_nl, nor_582_itm);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_12_nl = MUX1HOT_v_2_3_2((CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_2[2:1]),
      SOFTMAX_LOOP_2_and_nl, (RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[4:3]), {and_542_itm
      , and_544_itm , and_dcpl_263});
  assign SOFTMAX_LOOP_2_mux1h_1_nl = MUX1HOT_s_1_3_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_0,
      (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[2]), (SF_LOOP_3_acc_87_itm[2]), {and_548_itm
      , and_dcpl_503 , and_dcpl_361});
  assign SOFTMAX_LOOP_2_and_1_nl = SOFTMAX_LOOP_2_mux1h_1_nl & nor_582_itm;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_15_nl = MUX1HOT_s_1_3_2((CACHE_UPDATE_LOOP_3_k_5_0_sva_1_5_2[0]),
      SOFTMAX_LOOP_2_and_1_nl, (RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[2]), {and_542_itm
      , and_544_itm , and_dcpl_263});
  assign SOFTMAX_LOOP_2_mux1h_2_nl = MUX1HOT_v_2_3_2(reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_1,
      (RESHAPE_2D_TO_3D_LOOP_3_2_mux_3_itm_2_0[1:0]), (SF_LOOP_3_acc_87_itm[1:0]),
      {and_548_itm , and_dcpl_503 , and_dcpl_361});
  assign SOFTMAX_LOOP_2_and_2_nl = MUX_v_2_2_2(2'b00, SOFTMAX_LOOP_2_mux1h_2_nl,
      nor_582_itm);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_k_mux1h_14_nl = MUX1HOT_v_2_3_2(CACHE_UPDATE_LOOP_3_k_5_0_sva_1_1_0,
      SOFTMAX_LOOP_2_and_2_nl, (RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[1:0]), {and_542_itm
      , and_544_itm , and_dcpl_263});
  assign mux_993_nl = MUX_s_1_2_2(or_216_cse, mux_tmp_991, fsm_output[0]);
  assign nl_SF_LOOP_3_acc_102_nl = conv_s2u_9_10({(~ (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18]))
      , 7'b1000000 , (~ (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[18]))})
      + conv_u2u_9_10({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[1:0]) ,
      7'b1111111});
  assign SF_LOOP_3_acc_102_nl = nl_SF_LOOP_3_acc_102_nl[9:0];
  assign nl_SF_LOOP_3_acc_96_psp  = conv_u2u_10_11(SF_LOOP_3_acc_102_nl) + conv_s2u_10_11({(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[2])
      , 1'b0 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[2]) , 3'b000 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[2])
      , 2'b00 , (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[2])});
  assign nl_SF_LOOP_3_acc_97_nl = ({operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17
      , (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd[7:1])})
      + conv_u2s_7_8({(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16]) , 3'b000 , (signext_3_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16]))});
  assign SF_LOOP_3_acc_97_nl = nl_SF_LOOP_3_acc_97_nl[7:0];
  assign nl_SF_LOOP_3_acc_98_nl = conv_u2s_4_5(reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[3:0])
      + conv_u2s_2_5(signext_2_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16]));
  assign SF_LOOP_3_acc_98_nl = nl_SF_LOOP_3_acc_98_nl[4:0];
  assign nl_SF_LOOP_3_acc_28_itm  = ({reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1
      , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2 , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3
      , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4 , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5})
      + conv_s2s_19_20({(SF_LOOP_3_acc_17_itm_18_9[9:1]) , 1'b0 , SF_LOOP_3_acc_17_itm_8_0})
      + conv_s2s_18_20({SF_LOOP_3_acc_97_nl , (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd[0])
      , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16]) , (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16])
      , 2'b00 , SF_LOOP_3_acc_98_nl});
  assign nl_SF_LOOP_3_acc_29_nl = ({reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_1
      , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2 , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3
      , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4 , reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5})
      + conv_s2s_19_20({SF_LOOP_3_acc_17_itm_18_9 , SF_LOOP_3_acc_17_itm_8_0}) +
      conv_s2s_19_20(SF_LOOP_3_acc_16_itm);
  assign SF_LOOP_3_acc_29_nl = nl_SF_LOOP_3_acc_29_nl[19:0];
  assign nl_SF_LOOP_3_acc_31_nl = conv_s2s_20_21(SF_LOOP_3_acc_29_nl) + conv_s2s_20_21(SF_LOOP_3_acc_28_itm);
  assign SF_LOOP_3_acc_31_nl = nl_SF_LOOP_3_acc_31_nl[20:0];
  assign nl_SF_LOOP_3_acc_5_psp_sva  = conv_s2u_21_22(SF_LOOP_3_acc_31_nl) + conv_s2u_20_22(SF_LOOP_3_acc_30_psp);
  assign nl_softmax_1_8_6_sum_sva_1  = GEMM_3D_FLOAT_LOOP_4_1_asn_itm + z_out;
  assign mux_994_nl = MUX_s_1_2_2(or_tmp_26, mux_tmp_239, fsm_output[2]);
  assign mux_995_nl = MUX_s_1_2_2(mux_994_nl, mux_tmp_238, and_692_cse);
  assign and_557_nl = and_dcpl_212 & and_dcpl_127 & (fsm_output[1]) & (~((fsm_output[0])
      | (rms_norm_384_1_val_acc_psp_sva_1[31])));
  assign QUANTIZE_ACTIVATION_LOOP_2_1_attention_abs_6_nand_nl = ~((attention_abs_6_mux_2[39])
      & (RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[39]));
  assign attention_abs_6_mux_3_nl = MUX_v_39_2_2((RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[38:0]),
      (attention_abs_6_mux_2[38:0]), RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_slc_71_32_1_ncse_sva[39]);
  assign nl_QUANTIZE_ACTIVATION_LOOP_2_1_acc_4_nl = conv_s2u_40_41({QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_39
      , QUANTIZE_ACTIVATION_LOOP_1_1_max_val_lpi_2_38_0}) + conv_s2u_40_41({QUANTIZE_ACTIVATION_LOOP_2_1_attention_abs_6_nand_nl
      , (~ attention_abs_6_mux_3_nl)}) + 41'b00000000000000000000000000000000000000001;
  assign QUANTIZE_ACTIVATION_LOOP_2_1_acc_4_nl = nl_QUANTIZE_ACTIVATION_LOOP_2_1_acc_4_nl[40:0];
  assign mux_1000_nl = MUX_s_1_2_2(mux_tmp_996, or_tmp_968, fsm_output[3]);
  assign mux_998_nl = MUX_s_1_2_2(or_tmp_229, or_832_cse, or_1158_cse);
  assign mux_999_nl = MUX_s_1_2_2(mux_998_nl, or_tmp_968, fsm_output[3]);
  assign mux_1001_nl = MUX_s_1_2_2(mux_1000_nl, mux_999_nl, fsm_output[2]);
  assign mux_997_nl = MUX_s_1_2_2(mux_tmp_996, or_tmp_968, or_392_cse);
  assign mux_1002_nl = MUX_s_1_2_2(mux_1001_nl, mux_997_nl, and_692_cse);
  assign nor_571_nl = ~((fsm_output[5:2]!=4'b1000));
  assign and_816_nl = (fsm_output[5:2]==4'b0111);
  assign mux_1003_nl = MUX_s_1_2_2(nor_571_nl, and_816_nl, and_692_cse);
  assign nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_1_nl = ({operator_80_48_true_AC_TRN_AC_WRAP_operator_80_48_true_AC_TRN_AC_WRAP_slc_SOFTMAX_LOOP_4_sqr_56_1_itm_slc
      , (RMS_NORM_LOOP_2_mul_1_itm[51:33])}) + 24'b000000000000000000000001;
  assign operator_40_24_true_AC_TRN_AC_WRAP_acc_1_nl = nl_operator_40_24_true_AC_TRN_AC_WRAP_acc_1_nl[23:0];
  assign RMS_NORM_LOOP_1_1_mux1h_5_nl = MUX1HOT_v_24_3_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39:16]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[39:16]), operator_40_24_true_AC_TRN_AC_WRAP_acc_1_nl,
      {RMS_NORM_LOOP_1_1_or_ssc , and_dcpl_564 , and_dcpl_566});
  assign RMS_NORM_LOOP_1_1_mux1h_6_nl = MUX1HOT_v_16_3_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[15:0]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[15:0]), (RMS_NORM_LOOP_2_mul_1_itm[32:17]),
      {RMS_NORM_LOOP_1_1_or_ssc , and_dcpl_564 , and_dcpl_566});
  assign RMS_NORM_LOOP_1_1_or_3_nl = (~(and_dcpl_550 | and_dcpl_556 | and_dcpl_566
      | and_dcpl_570 | and_dcpl_573)) | and_dcpl_564;
  assign RMS_NORM_LOOP_1_1_mux1h_7_nl = MUX1HOT_s_1_4_2((RMS_NORM_LOOP_1_1_slc_RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mul_55_16_itm[39]),
      (reg_attention_round_a_cse_slc[3]), (~ (INIT_2D_MEM_LOOP_2_1_asn_psp[39])),
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, {and_dcpl_550 , RMS_NORM_LOOP_1_1_or_1_itm
      , and_dcpl_564 , and_dcpl_566});
  assign RMS_NORM_LOOP_1_1_mux1h_8_nl = MUX1HOT_v_3_4_2((RMS_NORM_LOOP_1_1_slc_RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mul_55_16_itm[38:36]),
      (reg_attention_round_a_cse_slc[2:0]), (~ (INIT_2D_MEM_LOOP_2_1_asn_psp[38:36])),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:36]), {and_dcpl_550 , RMS_NORM_LOOP_1_1_or_1_itm
      , and_dcpl_564 , and_dcpl_566});
  assign RMS_NORM_LOOP_1_1_mux1h_9_nl = MUX1HOT_v_36_4_2((RMS_NORM_LOOP_1_1_slc_RMS_NORM_LOOP_1_1_RMS_NORM_LOOP_1_1_mul_55_16_itm[35:0]),
      (RMS_NORM_LOOP_2_mul_1_itm[51:16]), (~ (INIT_2D_MEM_LOOP_2_1_asn_psp[35:0])),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[35:0]), {and_dcpl_550 , RMS_NORM_LOOP_1_1_or_1_itm
      , and_dcpl_564 , and_dcpl_566});
  assign nl_acc_nl = ({RMS_NORM_LOOP_1_1_mux1h_5_nl , RMS_NORM_LOOP_1_1_mux1h_6_nl
      , RMS_NORM_LOOP_1_1_or_3_nl}) + ({RMS_NORM_LOOP_1_1_mux1h_7_nl , RMS_NORM_LOOP_1_1_mux1h_8_nl
      , RMS_NORM_LOOP_1_1_mux1h_9_nl , 1'b1});
  assign acc_nl = nl_acc_nl[40:0];
  assign z_out = readslicef_41_40_1(acc_nl);
  assign INIT_2D_MEM_LOOP_2_2_or_4_nl = mux_1008_cse | (fsm_output[7]);
  assign nl_z_out_1 = INIT_2D_MEM_LOOP_2_2_acc_itm + conv_s2u_2_9({INIT_2D_MEM_LOOP_2_2_or_4_nl
      , 1'b1});
  assign z_out_1 = nl_z_out_1[8:0];
  assign RMS_NORM_LOOP_2_or_3_nl = and_dcpl_596 | and_876_cse;
  assign RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux_1_nl = MUX_v_9_2_2(RMS_NORM_LOOP_2_2_dfr_sva_8_0,
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1,
      RMS_NORM_LOOP_2_or_3_nl);
  assign nl_z_out_2 = RMS_NORM_LOOP_2_RMS_NORM_LOOP_2_mux_1_nl + conv_s2u_2_9({and_dcpl_596
      , 1'b1});
  assign z_out_2 = nl_z_out_2[8:0];
  assign INIT_2D_MEM_LOOP_2_1_nand_1_nl = ~(mux_1014_cse & (fsm_output[1]));
  assign nl_z_out_3 = SF_LOOP_3_acc_17_itm_8_0 + conv_s2u_2_9({INIT_2D_MEM_LOOP_2_1_nand_1_nl
      , 1'b1});
  assign z_out_3 = nl_z_out_3[8:0];
  assign SF_LOOP_3_mux1h_10_nl = MUX1HOT_v_2_3_2((attention_5_1_384_384_8_48_attn_weights_rsci_q_d[38:37]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[26:25]), (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[15:14]),
      {and_dcpl_614 , and_894_cse , and_897_cse});
  assign SF_LOOP_3_mux1h_11_nl = MUX1HOT_v_7_3_2(7'b0111100, 7'b1100101, 7'b1010011,
      {and_dcpl_614 , and_894_cse , and_897_cse});
  assign SF_LOOP_3_mux1h_12_nl = MUX1HOT_v_5_3_2(5'b00001, 5'b01010, 5'b10110, {and_dcpl_614
      , and_894_cse , and_897_cse});
  assign nl_z_out_4 = $signed(conv_u2s_2_3(SF_LOOP_3_mux1h_10_nl)) * $signed(({3'b101
      , SF_LOOP_3_mux1h_11_nl , 1'b0 , SF_LOOP_3_mux1h_12_nl , 1'b1}));
  assign z_out_4 = nl_z_out_4[17:0];
  assign compute_sqrt_for_guess_inv_mux_2_nl = MUX_s_1_2_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]),
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, compute_sqrt_for_guess_inv_or_cse);
  assign compute_sqrt_for_guess_inv_compute_sqrt_for_guess_inv_and_2_nl = compute_sqrt_for_guess_inv_mux_2_nl
      & compute_sqrt_for_guess_inv_nor_seb;
  assign compute_sqrt_for_guess_inv_mux_3_nl = MUX_v_8_2_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38:31]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:31]), compute_sqrt_for_guess_inv_or_cse);
  assign compute_sqrt_for_guess_inv_compute_sqrt_for_guess_inv_and_3_nl = MUX_v_8_2_2(8'b00000000,
      compute_sqrt_for_guess_inv_mux_3_nl, compute_sqrt_for_guess_inv_nor_seb);
  assign compute_sqrt_for_guess_inv_mux1h_7_nl = MUX1HOT_v_29_4_2((attention_abs_qif_acc_pmx_lpi_1_dfm[30:2]),
      (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[30:2]), (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[30:2]),
      (attention_abs_4_qif_acc_pmx_lpi_1_dfm[30:2]), {and_dcpl_629 , compute_sqrt_for_guess_inv_or_2_itm
      , compute_sqrt_for_guess_inv_or_cse , and_dcpl_666});
  assign not_2700_nl = ~ and_dcpl_656;
  assign compute_sqrt_for_guess_inv_and_6_nl = MUX_v_29_2_2(29'b00000000000000000000000000000,
      compute_sqrt_for_guess_inv_mux1h_7_nl, not_2700_nl);
  assign compute_sqrt_for_guess_inv_mux1h_8_nl = MUX1HOT_v_2_5_2((attention_abs_qif_acc_pmx_lpi_1_dfm[1:0]),
      (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[1:0]), (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[1:0]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[15:14]), (attention_abs_4_qif_acc_pmx_lpi_1_dfm[1:0]),
      {and_dcpl_629 , compute_sqrt_for_guess_inv_or_2_itm , compute_sqrt_for_guess_inv_or_cse
      , and_dcpl_656 , and_dcpl_666});
  assign compute_sqrt_for_guess_inv_mux1h_9_nl = MUX1HOT_s_1_4_2(operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17,
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, (INIT_2D_MEM_LOOP_2_1_asn_psp[39]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39]),
      {compute_sqrt_for_guess_inv_or_4_itm , compute_sqrt_for_guess_inv_or_3_itm
      , and_dcpl_651 , and_dcpl_671});
  assign compute_sqrt_for_guess_inv_and_7_nl = compute_sqrt_for_guess_inv_mux1h_9_nl
      & (~ and_dcpl_634) & (~(and_dcpl_646 | and_dcpl_656));
  assign compute_sqrt_for_guess_inv_mux1h_10_nl = MUX1HOT_v_22_5_2(({{21{operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17}},
      operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_itm_17}),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:17]), 22'b0000000000000000001001,
      (INIT_2D_MEM_LOOP_2_1_asn_psp[38:17]), (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[38:17]),
      {compute_sqrt_for_guess_inv_or_4_itm , compute_sqrt_for_guess_inv_or_3_itm
      , and_dcpl_646 , and_dcpl_651 , and_dcpl_671});
  assign compute_sqrt_for_guess_inv_and_8_nl = compute_sqrt_for_guess_inv_mux1h_10_nl
      & (signext_22_1(~ and_dcpl_634)) & (signext_22_1(~ and_dcpl_656));
  assign compute_sqrt_for_guess_inv_mux1h_11_nl = MUX1HOT_v_5_5_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd[7:3]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16:12]), 5'b01101, (INIT_2D_MEM_LOOP_2_1_asn_psp[16:12]),
      (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[16:12]), {compute_sqrt_for_guess_inv_or_4_itm
      , compute_sqrt_for_guess_inv_or_3_itm , and_dcpl_646 , and_dcpl_651 , and_dcpl_671});
  assign compute_sqrt_for_guess_inv_and_9_nl = compute_sqrt_for_guess_inv_mux1h_11_nl
      & (signext_5_1(~ and_dcpl_634)) & (signext_5_1(~ and_dcpl_656));
  assign compute_sqrt_for_guess_inv_mux1h_12_nl = MUX1HOT_v_3_7_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd[2:0]),
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4, (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[11:9]),
      3'b010, (INIT_2D_MEM_LOOP_2_1_asn_psp[11:9]), 3'b100, (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[11:9]),
      {compute_sqrt_for_guess_inv_or_4_itm , and_dcpl_634 , compute_sqrt_for_guess_inv_or_3_itm
      , and_dcpl_646 , and_dcpl_651 , and_dcpl_656 , and_dcpl_671});
  assign compute_sqrt_for_guess_inv_mux1h_13_nl = MUX1HOT_v_9_7_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1,
      reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5, (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[8:0]),
      9'b110010011, (INIT_2D_MEM_LOOP_2_1_asn_psp[8:0]), 9'b100111101, (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[8:0]),
      {compute_sqrt_for_guess_inv_or_4_itm , and_dcpl_634 , compute_sqrt_for_guess_inv_or_3_itm
      , and_dcpl_646 , and_dcpl_651 , and_dcpl_656 , and_dcpl_671});
  assign nl_z_out_5 = $signed(({compute_sqrt_for_guess_inv_compute_sqrt_for_guess_inv_and_2_nl
      , compute_sqrt_for_guess_inv_compute_sqrt_for_guess_inv_and_3_nl , compute_sqrt_for_guess_inv_and_6_nl
      , compute_sqrt_for_guess_inv_mux1h_8_nl})) * $signed(({compute_sqrt_for_guess_inv_and_7_nl
      , compute_sqrt_for_guess_inv_and_8_nl , compute_sqrt_for_guess_inv_and_9_nl
      , compute_sqrt_for_guess_inv_mux1h_12_nl , compute_sqrt_for_guess_inv_mux1h_13_nl}));
  assign z_out_5 = nl_z_out_5[60:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_11_nl =
      ((reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[32]) & (~ and_897_cse)) | and_dcpl_679;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_5_nl = MUX1HOT_v_2_3_2(2'b01, (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[31:30]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:37]), {and_dcpl_679 , and_894_cse
      , and_897_cse});
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_1_nl =
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd & LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse;
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_6_nl = MUX1HOT_v_39_3_2(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1,
      39'b000000000001001001111001101010010011011, 39'b000010010011110011010100100110101110011,
      {and_dcpl_679 , and_894_cse , and_897_cse});
  assign nl_z_out_6 = $signed(conv_u2s_20_21({LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse
      , 1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse
      , 1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse
      , 1'b0 , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse , 1'b0
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse , 3'b000
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_cse
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_or_11_nl ,
      LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_5_nl})) * $signed(({LINEAR_FORWARD_NO_MUL_LOOP_2_2_LINEAR_FORWARD_NO_MUL_LOOP_2_2_and_1_nl
      , LINEAR_FORWARD_NO_MUL_LOOP_2_2_mux1h_6_nl}));
  assign z_out_6 = nl_z_out_6[59:0];
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_mux_3_nl = MUX_s_1_2_2(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd,
      (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[39]), and_dcpl_704);
  assign LINEAR_FORWARD_NO_MUL_LOOP_2_mux_4_nl = MUX_v_39_2_2(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1,
      (QUANTIZE_ACTIVATION_LOOP_1_1_scale_sva[38:0]), and_dcpl_704);
  assign nl_z_out_7 = $signed(conv_u2s_20_21({2'b10 , and_dcpl_704 , 1'b1 , (~ and_dcpl_704)
      , 3'b001 , and_dcpl_704 , 2'b10 , (~ and_dcpl_704) , 2'b01 , (signext_2_1(~
      and_dcpl_704)) , 1'b0 , ({{1{and_dcpl_704}}, and_dcpl_704}) , 1'b1})) * $signed(({LINEAR_FORWARD_NO_MUL_LOOP_2_mux_3_nl
      , LINEAR_FORWARD_NO_MUL_LOOP_2_mux_4_nl}));
  assign z_out_7 = nl_z_out_7[59:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_or_5_nl = (operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm[1])
      | and_dcpl_717 | and_dcpl_722;
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_3_nl
      = MUX_s_1_2_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_66_itm[0]), (z_out_17[0]),
      operator_40_24_true_AC_TRN_AC_WRAP_or_2_cse_1);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_4_nl
      = MUX_s_1_2_2((~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[32])), (z_out_17[2]), operator_40_24_true_AC_TRN_AC_WRAP_or_2_cse_1);
  assign operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_5_nl
      = MUX_s_1_2_2((~ (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[8])), (~ (z_out_17[1])), operator_40_24_true_AC_TRN_AC_WRAP_or_2_cse_1);
  assign nl_acc_4_nl = conv_u2u_3_4({operator_40_24_true_AC_TRN_AC_WRAP_or_5_nl ,
      operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_3_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_4_nl})
      + conv_u2u_2_4({operator_40_24_true_AC_TRN_AC_WRAP_operator_40_24_true_AC_TRN_AC_WRAP_mux_5_nl
      , 1'b1});
  assign acc_4_nl = nl_acc_4_nl[3:0];
  assign z_out_8 = readslicef_4_3_1(acc_4_nl);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_16_nl = MUX_s_1_2_2((operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[0]),
      (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1[0]), and_1011_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_17_nl = MUX_s_1_2_2((~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[2])),
      (~ (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1[2])), and_1011_cse);
  assign operator_40_24_true_AC_TRN_AC_WRAP_mux_18_nl = MUX_s_1_2_2((~ (operator_40_24_true_AC_TRN_AC_WRAP_acc_3_psp_sva_1[1])),
      (~ (operator_40_24_true_AC_TRN_AC_WRAP_2_acc_3_psp_sva_1[1])), and_1011_cse);
  assign nl_acc_5_nl = ({1'b1 , operator_40_24_true_AC_TRN_AC_WRAP_mux_16_nl , operator_40_24_true_AC_TRN_AC_WRAP_mux_17_nl})
      + conv_u2u_2_3({operator_40_24_true_AC_TRN_AC_WRAP_mux_18_nl , 1'b1});
  assign acc_5_nl = nl_acc_5_nl[2:0];
  assign z_out_9_1_0 = readslicef_3_2_1(acc_5_nl);
  assign compute_sqrt_for_mux1h_4_nl = MUX1HOT_v_3_5_2(3'b101, (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28])),
      APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0, (z_out_38[3:1]), (z_out_37[3:1]),
      {and_dcpl_742 , and_dcpl_749 , and_dcpl_757 , compute_sqrt_for_or_2_cse , and_dcpl_763});
  assign compute_sqrt_for_mux1h_5_nl = MUX1HOT_s_1_3_2((attention_5_1_384_384_8_48_attn_weights_rsci_q_d[28]),
      (z_out_38[0]), (z_out_37[0]), {and_dcpl_749 , compute_sqrt_for_or_2_cse , and_dcpl_763});
  assign compute_sqrt_for_or_7_nl = (compute_sqrt_for_mux1h_5_nl & (~ and_dcpl_757))
      | and_dcpl_742;
  assign compute_sqrt_for_and_3_nl = (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[1])
      & (~(and_dcpl_742 | and_dcpl_749 | and_dcpl_762 | and_dcpl_763 | and_dcpl_767));
  assign compute_sqrt_for_or_8_nl = and_dcpl_757 | and_dcpl_762 | and_dcpl_763;
  assign compute_sqrt_for_mux1h_6_nl = MUX1HOT_v_3_4_2((z_out_16_4_0[3:1]), (signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[27])),
      APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0, GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      {and_dcpl_742 , and_dcpl_749 , compute_sqrt_for_or_8_nl , and_dcpl_767});
  assign nl_acc_6_nl = conv_u2u_5_6({compute_sqrt_for_mux1h_4_nl , compute_sqrt_for_or_7_nl
      , compute_sqrt_for_and_3_nl}) + conv_u2u_4_6({compute_sqrt_for_mux1h_6_nl ,
      1'b1});
  assign acc_6_nl = nl_acc_6_nl[5:0];
  assign z_out_10 = readslicef_6_5_1(acc_6_nl);
  assign SF_LOOP_3_mux1h_13_nl = MUX1HOT_v_4_3_2((signext_4_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[36])),
      (signext_4_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[17])), z_out_37, {and_1051_cse
      , and_dcpl_779 , and_dcpl_786});
  assign SF_LOOP_3_mux1h_14_nl = MUX1HOT_v_3_3_2((signext_3_1(attention_5_1_384_384_8_48_attn_weights_rsci_q_d[35])),
      (signext_3_1(reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[16])), GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      {and_1051_cse , and_dcpl_779 , and_dcpl_786});
  assign nl_z_out_11 = conv_u2u_4_5(SF_LOOP_3_mux1h_13_nl) + conv_u2u_3_5(SF_LOOP_3_mux1h_14_nl);
  assign z_out_11 = nl_z_out_11[4:0];
  assign and_1523_nl = and_dcpl_562 & (fsm_output[5:4]==2'b01) & and_dcpl_808;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl = MUX_v_3_2_2((z_out_31[3:1]),
      (z_out_35[3:1]), and_1523_nl);
  assign or_1348_nl = (fsm_output[3]) | ((fsm_output[6]) ^ (fsm_output[4]));
  assign mux_1060_nl = MUX_s_1_2_2(or_tmp_547, or_1348_nl, fsm_output[2]);
  assign nor_713_nl = ~((fsm_output[1]) | mux_1060_nl);
  assign mux_1059_nl = MUX_s_1_2_2(nor_713_nl, and_1509_cse, fsm_output[0]);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_or_7_nl = and_1353_cse | (mux_1059_nl & and_dcpl_29
      & (fsm_output[5])) | (and_dcpl_562 & (fsm_output[5:4]==2'b11) & and_dcpl_808);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_3_nl = MUX_v_3_2_2(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0,
      GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0, APPLY_ROTARY_POS_EMB_LOOP_6_or_7_nl);
  assign nl_z_out_12 = conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_2_nl)
      + conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_mux_3_nl);
  assign z_out_12 = nl_z_out_12[3:0];
  assign nl_acc_9_nl = conv_u2u_3_4({(z_out_17[3]) , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[8])
      , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[11])}) + conv_s2u_3_4({1'b1 , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[10])
      , 1'b1});
  assign acc_9_nl = nl_acc_9_nl[3:0];
  assign z_out_13 = readslicef_4_3_1(acc_9_nl);
  assign or_1349_tmp = ((((LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs==2'b01))
      | LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_1_cse_1)
      & and_dcpl_833) | (LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm & and_dcpl_840) | (CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm
      & and_dcpl_837);
  assign and_1556_nl = (fsm_output[8:4]==5'b00101) & and_578_cse & (fsm_output[1:0]==2'b01);
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux1h_1_tmp = MUX1HOT_s_1_3_2(LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_1_cse_1,
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_3_cse, CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm,
      {(fsm_output[1]) , (~ (fsm_output[0])) , and_1556_nl});
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_3_nl = MUX1HOT_v_4_5_2((attention_5_1_384_384_8_48_v_proj_re_rsci_q_d[39:36]),
      (INIT_2D_MEM_LOOP_2_1_asn_psp[39:36]), (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39:36]),
      (output_rsci_q_d[39:36]), reg_attention_round_a_cse_slc, {and_dcpl_833 , and_dcpl_837
      , and_dcpl_840 , and_dcpl_846 , operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_cse});
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_4_nl = MUX1HOT_v_20_5_2((attention_5_1_384_384_8_48_v_proj_re_rsci_q_d[35:16]),
      (INIT_2D_MEM_LOOP_2_1_asn_psp[35:16]), (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[35:16]),
      (output_rsci_q_d[35:16]), (RMS_NORM_LOOP_2_mul_1_itm[51:32]), {and_dcpl_833
      , and_dcpl_837 , and_dcpl_840 , and_dcpl_846 , operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_cse});
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl =  -attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d;
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl[7:0];
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_and_2_nl = (~ LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_3_cse)
      & and_dcpl_846;
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_and_3_nl = LINEAR_FORWARD_NO_MUL_LOOP_5_1_LINEAR_FORWARD_NO_MUL_LOOP_5_1_and_3_cse
      & and_dcpl_846;
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_5_nl = MUX1HOT_v_8_3_2(attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d,
      LINEAR_FORWARD_NO_MUL_LOOP_5_3_else_if_acc_3_nl, (signext_8_1(~ (RMS_NORM_LOOP_2_mul_1_itm[31]))),
      {operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_and_2_nl , operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_and_3_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_cse});
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_5_nl = and_dcpl_833 | and_dcpl_837
      | and_dcpl_840;
  assign operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_4_nl = MUX_v_8_2_2(operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_5_nl,
      8'b11111111, operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_5_nl);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl =  -attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d;
  assign LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl[7:0];
  assign and_1557_nl = (~ LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux1h_1_tmp) & or_1349_tmp;
  assign and_1558_nl = LINEAR_FORWARD_NO_MUL_LOOP_5_2_mux1h_1_tmp & or_1349_tmp;
  assign mux1h_1_nl = MUX1HOT_v_8_3_2(operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_or_4_nl,
      attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d, LINEAR_FORWARD_NO_MUL_LOOP_5_2_else_if_acc_3_nl,
      {(~ or_1349_tmp) , and_1557_nl , and_1558_nl});
  assign nor_714_nl = ~((((LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_slc_LINEAR_FORWARD_NO_MUL_LOOP_4_2_packed_val_LINEAR_FORWARD_NO_MUL_LOOP_5_2_weight_val_conc_1_1_1_0_svs!=2'b01))
      & (~ LINEAR_FORWARD_NO_MUL_LOOP_5_2_LINEAR_FORWARD_NO_MUL_LOOP_5_2_and_1_cse_1)
      & and_dcpl_833) | ((~ LINEAR_FORWARD_NO_MUL_LOOP_5_or_itm) & and_dcpl_840)
      | ((~ CACHE_UPDATE_LOOP_3_CACHE_UPDATE_LOOP_3_nor_itm) & and_dcpl_837) | ((~
      LINEAR_FORWARD_NO_MUL_LOOP_5_1_or_cse) & and_dcpl_846));
  assign and_1528_nl = MUX_v_8_2_2(8'b00000000, mux1h_1_nl, nor_714_nl);
  assign nl_z_out_14_23_0 = ({operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_3_nl
      , operator_40_24_true_AC_TRN_AC_WRAP_8_true_2_mux1h_4_nl}) + conv_s2u_8_24(and_1528_nl);
  assign z_out_14_23_0 = nl_z_out_14_23_0[23:0];
  assign nl_acc_11_nl = conv_u2u_5_7({(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[14]) , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[11:9])
      , (z_out_17[2])}) + conv_s2u_5_7({(z_out_17[5:4]) , (signext_2_1(GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]))
      , 1'b1});
  assign acc_11_nl = nl_acc_11_nl[6:0];
  assign z_out_15 = readslicef_7_6_1(acc_11_nl);
  assign nl_z_out_16_4_0 = conv_u2u_4_5(APPLY_ROTARY_POS_EMB_LOOP_6_acc_28_sdt) +
      5'b00001;
  assign z_out_16_4_0 = nl_z_out_16_4_0[4:0];
  assign nl_z_out_17 = reg_operator_40_24_true_AC_TRN_AC_WRAP_acc_20_cse + ({5'b10111
      , (GEMM_3D_FLOAT_LOOP_4_1_asn_itm[7])});
  assign z_out_17 = nl_z_out_17[5:0];
  assign RMS_NORM_LOOP_2_2_mux_6_nl = MUX_s_1_2_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39]),
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, and_dcpl_917);
  assign RMS_NORM_LOOP_2_2_mux_7_nl = MUX_v_39_2_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[38:0]),
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1, and_dcpl_917);
  assign RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_and_2_nl = MUX_v_40_2_2(40'b0000000000000000000000000000000000000000,
      (RMS_NORM_LOOP_2_2_mul_1_itm[52:13]), and_dcpl_917);
  assign RMS_NORM_LOOP_2_2_mux_8_nl = MUX_s_1_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3,
      (RMS_NORM_LOOP_2_2_mul_1_itm[12]), and_dcpl_917);
  assign RMS_NORM_LOOP_2_2_mux_9_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      (RMS_NORM_LOOP_2_2_mul_1_itm[11:9]), and_dcpl_917);
  assign RMS_NORM_LOOP_2_2_mux_10_nl = MUX_v_9_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5,
      (RMS_NORM_LOOP_2_2_mul_1_itm[8:0]), and_dcpl_917);
  assign nl_z_out_19 = $signed(({RMS_NORM_LOOP_2_2_mux_6_nl , RMS_NORM_LOOP_2_2_mux_7_nl}))
      * $signed(({RMS_NORM_LOOP_2_2_RMS_NORM_LOOP_2_2_and_2_nl , RMS_NORM_LOOP_2_2_mux_8_nl
      , RMS_NORM_LOOP_2_2_mux_9_nl , RMS_NORM_LOOP_2_2_mux_10_nl}));
  assign z_out_19 = nl_z_out_19[71:0];
  assign RMS_NORM_LOOP_1_1_mux_36_nl = MUX_s_1_2_2((for_for_strm_in_tmp_sva_31_2[29]),
      reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd, and_dcpl_931);
  assign RMS_NORM_LOOP_1_1_mux_37_nl = MUX_v_39_2_2(({{9{for_for_strm_in_tmp_sva_31_2[29]}},
      for_for_strm_in_tmp_sva_31_2}), reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1, and_dcpl_931);
  assign RMS_NORM_LOOP_1_1_mux_38_nl = MUX_v_52_2_2(({{22{for_for_strm_in_tmp_sva_31_2[29]}},
      for_for_strm_in_tmp_sva_31_2}), RMS_NORM_LOOP_2_mul_1_itm, and_dcpl_931);
  assign nl_mul_5_nl = $signed(({RMS_NORM_LOOP_1_1_mux_36_nl , RMS_NORM_LOOP_1_1_mux_37_nl}))
      * $signed(RMS_NORM_LOOP_1_1_mux_38_nl);
  assign mul_5_nl = nl_mul_5_nl[67:0];
  assign z_out_20_67_16 = readslicef_68_52_16(mul_5_nl);
  assign SF_LOOP_3_mux_22_nl = MUX_v_2_2_2((reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[21:20]),
      (SF_LOOP_3_acc_5_psp_sva[19:18]), and_dcpl_942);
  assign SF_LOOP_3_mux_23_nl = MUX_v_4_2_2(4'b0110, 4'b1001, and_dcpl_942);
  assign nl_z_out_21 = SF_LOOP_3_mux_22_nl * ({4'b1000 , SF_LOOP_3_mux_23_nl , 3'b001
      , and_dcpl_942 , 1'b0 , (~ and_dcpl_942) , 2'b01});
  assign z_out_21 = nl_z_out_21[16:0];
  assign SF_LOOP_3_mux_24_nl = MUX_v_2_2_2((reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[26:25]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[13:12]), and_dcpl_953);
  assign SF_LOOP_3_mux_25_nl = MUX_v_3_2_2(3'b101, 3'b010, and_dcpl_953);
  assign nl_z_out_22 = SF_LOOP_3_mux_24_nl * ({(~ and_dcpl_953) , 2'b00 , (~ and_dcpl_953)
      , 2'b00 , (signext_4_1(~ and_dcpl_953)) , 2'b00 , (~ and_dcpl_953) , 2'b10
      , SF_LOOP_3_mux_25_nl , 1'b0 , and_dcpl_953 , 1'b1 , and_dcpl_953 , 1'b1});
  assign z_out_22 = nl_z_out_22[23:0];
  assign SF_LOOP_3_mux_26_nl = MUX_v_2_2_2((reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[24:23]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[13:12]), and_dcpl_964);
  assign z_out_23 = SF_LOOP_3_mux_26_nl * ({6'b101110 , (~ and_dcpl_964) , 2'b00
      , (~ and_dcpl_964) , 3'b011 , ({{1{and_dcpl_964}}, and_dcpl_964}) , 1'b1});
  assign not_2716_nl = ~ and_1256_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_9_nl = MUX_v_8_2_2(8'b00000000,
      reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd,
      not_2716_nl);
  assign not_2717_nl = ~ and_1256_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_10_nl = MUX_v_7_2_2(7'b0000000,
      (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[8:2]),
      not_2717_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_33_nl = MUX_v_2_2_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[1:0]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[34:33]), and_1256_cse);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_34_nl = MUX_v_40_2_2(INIT_2D_MEM_LOOP_2_1_asn_psp,
      40'b0000000001001001111001101010010011010111, and_1256_cse);
  assign nl_z_out_25 = $signed(({APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_9_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_10_nl , APPLY_ROTARY_POS_EMB_LOOP_6_mux_33_nl}))
      * $signed(APPLY_ROTARY_POS_EMB_LOOP_6_mux_34_nl);
  assign z_out_25 = nl_z_out_25[55:0];
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_35_nl = MUX_v_4_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_2,
      4'b1101, and_1051_cse);
  assign not_2718_nl = ~ and_1291_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_11_nl = MUX_v_4_2_2(4'b0000,
      APPLY_ROTARY_POS_EMB_LOOP_6_mux_35_nl, not_2718_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_12_nl = reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_3
      & APPLY_ROTARY_POS_EMB_LOOP_6_nor_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_36_nl = MUX_v_3_2_2(reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_4,
      3'b010, and_1051_cse);
  assign not_2719_nl = ~ and_1291_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_13_nl = MUX_v_3_2_2(3'b000,
      APPLY_ROTARY_POS_EMB_LOOP_6_mux_36_nl, not_2719_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_37_nl = MUX_v_7_2_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5[8:2]),
      7'b0101010, and_1051_cse);
  assign not_2720_nl = ~ and_1291_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_14_nl = MUX_v_7_2_2(7'b0000000,
      APPLY_ROTARY_POS_EMB_LOOP_6_mux_37_nl, not_2720_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_38_nl = MUX_v_2_2_2((reg_operator_40_24_true_AC_TRN_AC_WRAP_8_true_1_acc_ftd_5[1:0]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[24:23]), and_1291_cse);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl = MUX_v_2_2_2(APPLY_ROTARY_POS_EMB_LOOP_6_mux_38_nl,
      2'b11, and_1051_cse);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux_39_nl = MUX_v_37_2_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[39:3]),
      37'b0000000000000000000100100111100110101, and_1291_cse);
  assign not_2721_nl = ~ and_1051_cse;
  assign APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_15_nl = MUX_v_37_2_2(37'b0000000000000000000000000000000000000,
      APPLY_ROTARY_POS_EMB_LOOP_6_mux_39_nl, not_2721_nl);
  assign APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_20_nl = MUX1HOT_v_3_3_2((GEMM_3D_FLOAT_LOOP_4_1_asn_itm[2:0]),
      (attention_5_1_384_384_8_48_attn_weights_rsci_q_d[32:30]), 3'b001, {and_1280_cse
      , and_1051_cse , and_1291_cse});
  assign nl_z_out_26 = $signed(({APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_11_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_12_nl , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_13_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_14_nl , APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_or_3_nl}))
      * $signed(({APPLY_ROTARY_POS_EMB_LOOP_6_APPLY_ROTARY_POS_EMB_LOOP_6_and_15_nl
      , APPLY_ROTARY_POS_EMB_LOOP_6_mux1h_20_nl}));
  assign z_out_26 = nl_z_out_26[55:0];
  assign SF_LOOP_3_mux_27_nl = MUX_v_8_2_2(8'b11101010, reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd,
      and_1280_cse);
  assign not_2722_nl = ~ and_1291_cse;
  assign SF_LOOP_3_SF_LOOP_3_and_4_nl = MUX_v_8_2_2(8'b00000000, SF_LOOP_3_mux_27_nl,
      not_2722_nl);
  assign SF_LOOP_3_mux_28_nl = MUX_v_7_2_2(7'b0000101, (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[8:2]),
      and_1280_cse);
  assign not_2723_nl = ~ and_1291_cse;
  assign SF_LOOP_3_SF_LOOP_3_and_5_nl = MUX_v_7_2_2(7'b0000000, SF_LOOP_3_mux_28_nl,
      not_2723_nl);
  assign SF_LOOP_3_mux1h_15_nl = MUX1HOT_v_2_3_2(2'b01, (reg_operator_40_24_true_AC_TRN_AC_WRAP_1_slc_operator_40_24_true_AC_TRN_AC_WRAP_1_div_cmp_z_17_0_1_ftd_1[1:0]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[21:20]), {and_1051_cse , and_1280_cse
      , and_1291_cse});
  assign SF_LOOP_3_SF_LOOP_3_and_6_nl = reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd & APPLY_ROTARY_POS_EMB_LOOP_6_nor_cse;
  assign SF_LOOP_3_mux_29_nl = MUX_v_35_2_2((reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[38:4]),
      35'b00000000000000000000010010011110011, and_1291_cse);
  assign not_2724_nl = ~ and_1051_cse;
  assign SF_LOOP_3_SF_LOOP_3_and_7_nl = MUX_v_35_2_2(35'b00000000000000000000000000000000000,
      SF_LOOP_3_mux_29_nl, not_2724_nl);
  assign SF_LOOP_3_mux1h_16_nl = MUX1HOT_v_4_3_2((attention_5_1_384_384_8_48_attn_weights_rsci_q_d[11:8]),
      (reg_GEMM_3D_FLOAT_LOOP_3_asn_psp_ftd_1[3:0]), 4'b0101, {and_1051_cse , and_1280_cse
      , and_1291_cse});
  assign nl_z_out_27 = $signed(({SF_LOOP_3_SF_LOOP_3_and_4_nl , SF_LOOP_3_SF_LOOP_3_and_5_nl
      , SF_LOOP_3_mux1h_15_nl})) * $signed(({SF_LOOP_3_SF_LOOP_3_and_6_nl , SF_LOOP_3_SF_LOOP_3_and_7_nl
      , SF_LOOP_3_mux1h_16_nl}));
  assign z_out_27 = nl_z_out_27[55:0];
  assign nor_715_nl = ~(mux_1008_cse | (fsm_output[7]));
  assign nor_718_nl = ~((fsm_output[6:5]!=2'b10));
  assign nor_719_nl = ~((fsm_output[6]) | not_tmp_245);
  assign mux_1064_nl = MUX_s_1_2_2(nor_718_nl, nor_719_nl, fsm_output[4]);
  assign nand_298_nl = ~((~((fsm_output[3]) | (~ (fsm_output[7])) | (~ (fsm_output[2]))))
      & mux_1064_nl);
  assign or_1352_nl = (fsm_output[7]) | (fsm_output[2]) | (fsm_output[4]) | (~ (fsm_output[6]))
      | (fsm_output[1]) | (~ (fsm_output[5]));
  assign nor_720_nl = ~((~ (fsm_output[4])) | (fsm_output[6]) | not_tmp_245);
  assign nor_721_nl = ~((~ (fsm_output[4])) | (~ (fsm_output[6])) | (fsm_output[1])
      | (fsm_output[5]));
  assign mux_1066_nl = MUX_s_1_2_2(nor_720_nl, nor_721_nl, fsm_output[2]);
  assign nand_299_nl = ~((fsm_output[7]) & mux_1066_nl);
  assign mux_1065_nl = MUX_s_1_2_2(or_1352_nl, nand_299_nl, fsm_output[3]);
  assign mux_1063_nl = MUX_s_1_2_2(nand_298_nl, mux_1065_nl, fsm_output[0]);
  assign nor_716_nl = ~(mux_1063_nl | (fsm_output[8]));
  assign and_1538_nl = (fsm_output[4]) & (fsm_output[6]);
  assign mux_1070_nl = MUX_s_1_2_2(nor_287_cse, and_1538_nl, fsm_output[3]);
  assign mux_1069_nl = MUX_s_1_2_2(mux_1070_nl, nor_632_cse, fsm_output[2]);
  assign mux_1068_nl = MUX_s_1_2_2(and_766_cse, mux_1069_nl, fsm_output[1]);
  assign mux_1067_nl = MUX_s_1_2_2(nor_505_cse, mux_1068_nl, fsm_output[0]);
  assign and_1537_nl = mux_1067_nl & (fsm_output[7]) & (~ (fsm_output[8])) & (fsm_output[5]);
  assign for_for_mux1h_7_nl = MUX1HOT_v_2_3_2((z_out_1[8:7]), (LINEAR_FORWARD_NO_MUL_LOOP_3_2_ko_2_0_sva_1_mx0w2[2:1]),
      (RESHAPE_2D_TO_3D_LOOP_3_1_k_5_0_sva_2[5:4]), {nor_715_nl , nor_716_nl , and_1537_nl});
  assign nl_for_for_acc_nl = ({1'b1 , for_for_mux1h_7_nl}) + 3'b001;
  assign for_for_acc_nl = nl_for_for_acc_nl[2:0];
  assign z_out_28_2 = readslicef_3_1_2(for_for_acc_nl);
  assign nor_723_nl = ~((~ (fsm_output[5])) | (~ (fsm_output[4])) | (~ (fsm_output[1]))
      | (~ (fsm_output[7])) | (fsm_output[8]) | (fsm_output[0]) | (~ (fsm_output[2]))
      | (fsm_output[3]));
  assign nor_724_nl = ~((~ (fsm_output[7])) | (fsm_output[8]) | (fsm_output[0]) |
      (fsm_output[2]) | (~ (fsm_output[3])));
  assign nor_725_nl = ~((fsm_output[7]) | mux_730_cse);
  assign mux_1073_nl = MUX_s_1_2_2(nor_724_nl, nor_725_nl, fsm_output[1]);
  assign and_1539_nl = (fsm_output[4]) & mux_1073_nl;
  assign nor_726_nl = ~((fsm_output[1]) | (fsm_output[7]) | mux_732_cse);
  assign nor_727_nl = ~((~ (fsm_output[1])) | (~ (fsm_output[7])) | (fsm_output[8])
      | (fsm_output[0]) | (~ (fsm_output[2])) | (fsm_output[3]));
  assign mux_1074_nl = MUX_s_1_2_2(nor_726_nl, nor_727_nl, fsm_output[4]);
  assign mux_1072_nl = MUX_s_1_2_2(and_1539_nl, mux_1074_nl, fsm_output[5]);
  assign mux_1071_nl = MUX_s_1_2_2(nor_723_nl, mux_1072_nl, fsm_output[6]);
  assign mux_1076_nl = MUX_s_1_2_2(nand_78_cse, or_1215_cse, fsm_output[2]);
  assign nor_728_nl = ~((fsm_output[1]) | mux_1076_nl);
  assign nor_729_nl = ~((fsm_output[4:1]!=4'b1001));
  assign mux_1075_nl = MUX_s_1_2_2(nor_728_nl, nor_729_nl, fsm_output[0]);
  assign and_1540_nl = mux_1075_nl & and_dcpl_129 & (~ (fsm_output[8])) & (fsm_output[5]);
  assign and_1541_nl = mux_1014_cse & (fsm_output[1]);
  assign and_1542_nl = and_dcpl_129 & (~ (fsm_output[8])) & (fsm_output[5]) & (~
      (fsm_output[4])) & (fsm_output[3]) & (~ (fsm_output[2])) & nor_494_cse;
  assign QUANTIZE_ACTIVATION_LOOP_3_mux1h_3_nl = MUX1HOT_v_2_4_2((QUANTIZE_ACTIVATION_LOOP_3_jo_2_0_sva_3[2:1]),
      (RESHAPE_2D_TO_3D_LOOP_3_k_5_0_sva_2[5:4]), (z_out_3[8:7]), (APPLY_ROTARY_POS_EMB_LOOP_3_k_4_0_sva_2[4:3]),
      {mux_1071_nl , and_1540_nl , and_1541_nl , and_1542_nl});
  assign nl_QUANTIZE_ACTIVATION_LOOP_3_acc_nl = ({1'b1 , QUANTIZE_ACTIVATION_LOOP_3_mux1h_3_nl})
      + 3'b001;
  assign QUANTIZE_ACTIVATION_LOOP_3_acc_nl = nl_QUANTIZE_ACTIVATION_LOOP_3_acc_nl[2:0];
  assign z_out_29_2 = readslicef_3_1_2(QUANTIZE_ACTIVATION_LOOP_3_acc_nl);
  assign LINEAR_FORWARD_NO_MUL_LOOP_3_mux_3_nl = MUX_v_2_2_2((LINEAR_FORWARD_NO_MUL_LOOP_3_ko_2_0_sva_2[2:1]),
      (z_out_2[8:7]), and_876_cse);
  assign nl_LINEAR_FORWARD_NO_MUL_LOOP_3_acc_nl = ({1'b1 , LINEAR_FORWARD_NO_MUL_LOOP_3_mux_3_nl})
      + 3'b001;
  assign LINEAR_FORWARD_NO_MUL_LOOP_3_acc_nl = nl_LINEAR_FORWARD_NO_MUL_LOOP_3_acc_nl[2:0];
  assign z_out_30_2 = readslicef_3_1_2(LINEAR_FORWARD_NO_MUL_LOOP_3_acc_nl);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_nl = and_dcpl_1069 | and_1353_cse |
      and_dcpl_1087;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux_1_nl =
      MUX_v_3_2_2(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0, GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0,
      TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_4_nl);
  assign and_1543_nl = (fsm_output[8:6]==3'b010) & and_dcpl_117 & and_dcpl_752;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_nl = and_dcpl_1069 | (and_dcpl_398 &
      mux_tmp_167 & and_dcpl_789);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_nl = and_1353_cse | (and_dcpl_563 &
      and_dcpl_789);
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_nl = (and_dcpl_563 & and_dcpl_752) |
      and_dcpl_1087;
  assign TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_7_nl = MUX1HOT_v_2_4_2((TRANSPOSE_LAST_TWO_DIMS_LOOP_3_acc_17_sdt_mx0w5[8:7]),
      (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[5:4]), reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd,
      (GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva[2:1]), {and_1543_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_5_nl
      , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_6_nl , TRANSPOSE_LAST_TWO_DIMS_LOOP_3_or_7_nl});
  assign nl_z_out_31 = conv_u2u_3_4(TRANSPOSE_LAST_TWO_DIMS_LOOP_3_TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux_1_nl)
      + conv_u2u_2_4(TRANSPOSE_LAST_TWO_DIMS_LOOP_3_mux1h_7_nl);
  assign z_out_31 = nl_z_out_31[3:0];
  assign and_1547_nl = and_dcpl_1094 & nor_566_cse & and_692_cse;
  assign and_1548_nl = (fsm_output[8:6]==3'b011) & and_dcpl_117 & (fsm_output[3:0]==4'b0110);
  assign and_1549_nl = and_dcpl_1094 & (fsm_output[3:2]==2'b11) & and_692_cse;
  assign CACHE_UPDATE_LOOP_3_1_mux1h_9_nl = MUX1HOT_v_2_3_2((z_out_11[4:3]), (z_out_10[4:3]),
      (GEMM_3D_FLOAT_LOOP_4_acc_17_sdt_1[8:7]), {and_1547_nl , and_1548_nl , and_1549_nl});
  assign nl_z_out_32 = conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0) + conv_u2u_2_4(CACHE_UPDATE_LOOP_3_1_mux1h_9_nl);
  assign z_out_32 = nl_z_out_32[3:0];
  assign nl_z_out_33 = conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0) +
      conv_u2u_2_4(z_out_10[4:3]);
  assign z_out_33 = nl_z_out_33[3:0];
  assign and_1550_nl = (fsm_output==9'b011110110);
  assign CACHE_UPDATE_LOOP_3_qif_mux_1_nl = MUX_v_2_2_2(({reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd
      , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[1])}), (APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[5:4]),
      and_1550_nl);
  assign nl_z_out_34_2_0 = GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva + conv_u2u_2_3(CACHE_UPDATE_LOOP_3_qif_mux_1_nl);
  assign z_out_34_2_0 = nl_z_out_34_2_0[2:0];
  assign nor_730_nl = ~((fsm_output[1]) | (~ (fsm_output[2])) | (fsm_output[4]));
  assign nor_731_nl = ~((~ (fsm_output[1])) | (fsm_output[2]) | (~ (fsm_output[4])));
  assign mux_1077_nl = MUX_s_1_2_2(nor_730_nl, nor_731_nl, fsm_output[0]);
  assign and_1551_nl = mux_1077_nl & (fsm_output[7]) & (~((fsm_output[6]) | (fsm_output[8])))
      & (fsm_output[5]) & (~ (fsm_output[3]));
  assign and_1552_nl = (fsm_output[8:2]==7'b0101010) & nor_494_cse;
  assign and_1553_nl = and_dcpl_1152 & and_dcpl_161 & (fsm_output[1:0]==2'b10);
  assign and_1554_nl = and_dcpl_1152 & and_dcpl_161 & nor_494_cse;
  assign RESHAPE_2D_TO_3D_LOOP_3_mux1h_6_nl = MUX1HOT_v_2_4_2(({reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd
      , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[1])}), (APPLY_ROTARY_POS_EMB_LOOP_3_acc_30_psp_sva_1[2:1]),
      (GEMM_3D_FLOAT_LOOP_1_1_i_3_0_sva_2_0[2:1]), (APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0[2:1]),
      {and_1551_nl , and_1552_nl , and_1553_nl , and_1554_nl});
  assign nl_z_out_35 = conv_u2u_3_4(APPLY_ROTARY_POS_EMB_LOOP_1_i_3_0_sva_2_0) +
      conv_u2u_2_4(RESHAPE_2D_TO_3D_LOOP_3_mux1h_6_nl);
  assign z_out_35 = nl_z_out_35[3:0];
  assign and_1555_nl = (fsm_output[8:2]==7'b0101110) & nor_494_cse;
  assign CACHE_UPDATE_LOOP_3_1_qif_mux_1_nl = MUX_v_2_2_2((APPLY_ROTARY_POS_EMB_LOOP_6_k_5_0_sva[5:4]),
      ({reg_CACHE_UPDATE_LOOP_3_k_5_0_1_ftd , (reg_CACHE_UPDATE_LOOP_3_k_5_0_3_ftd_2_1[1])}),
      and_1555_nl);
  assign nl_z_out_36_2_0 = ({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1})
      + conv_u2u_2_3(CACHE_UPDATE_LOOP_3_1_qif_mux_1_nl);
  assign z_out_36_2_0 = nl_z_out_36_2_0[2:0];
  assign nl_z_out_37 = conv_u2u_3_4({reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd , reg_CACHE_UPDATE_LOOP_2_1_j_2_0_ftd_1})
      + conv_u2u_2_4(z_out_36_2_0[2:1]);
  assign z_out_37 = nl_z_out_37[3:0];
  assign nl_z_out_38 = conv_u2u_3_4(GEMM_3D_FLOAT_LOOP_4_1_l_2_0_sva) + conv_u2u_2_4(z_out_34_2_0[2:1]);
  assign z_out_38 = nl_z_out_38[3:0];

  function automatic  MUX1HOT_s_1_11_2;
    input  input_10;
    input  input_9;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [10:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    result = result | (input_9 & sel[9]);
    result = result | (input_10 & sel[10]);
    MUX1HOT_s_1_11_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_4_2;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [3:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_5_2;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [4:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    MUX1HOT_s_1_5_2 = result;
  end
  endfunction


  function automatic  MUX1HOT_s_1_9_2;
    input  input_8;
    input  input_7;
    input  input_6;
    input  input_5;
    input  input_4;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [8:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    result = result | (input_4 & sel[4]);
    result = result | (input_5 & sel[5]);
    result = result | (input_6 & sel[6]);
    result = result | (input_7 & sel[7]);
    result = result | (input_8 & sel[8]);
    MUX1HOT_s_1_9_2 = result;
  end
  endfunction


  function automatic [15:0] MUX1HOT_v_16_3_2;
    input [15:0] input_2;
    input [15:0] input_1;
    input [15:0] input_0;
    input [2:0] sel;
    reg [15:0] result;
  begin
    result = input_0 & {16{sel[0]}};
    result = result | (input_1 & {16{sel[1]}});
    result = result | (input_2 & {16{sel[2]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function automatic [19:0] MUX1HOT_v_20_5_2;
    input [19:0] input_4;
    input [19:0] input_3;
    input [19:0] input_2;
    input [19:0] input_1;
    input [19:0] input_0;
    input [4:0] sel;
    reg [19:0] result;
  begin
    result = input_0 & {20{sel[0]}};
    result = result | (input_1 & {20{sel[1]}});
    result = result | (input_2 & {20{sel[2]}});
    result = result | (input_3 & {20{sel[3]}});
    result = result | (input_4 & {20{sel[4]}});
    MUX1HOT_v_20_5_2 = result;
  end
  endfunction


  function automatic [20:0] MUX1HOT_v_21_4_2;
    input [20:0] input_3;
    input [20:0] input_2;
    input [20:0] input_1;
    input [20:0] input_0;
    input [3:0] sel;
    reg [20:0] result;
  begin
    result = input_0 & {21{sel[0]}};
    result = result | (input_1 & {21{sel[1]}});
    result = result | (input_2 & {21{sel[2]}});
    result = result | (input_3 & {21{sel[3]}});
    MUX1HOT_v_21_4_2 = result;
  end
  endfunction


  function automatic [21:0] MUX1HOT_v_22_4_2;
    input [21:0] input_3;
    input [21:0] input_2;
    input [21:0] input_1;
    input [21:0] input_0;
    input [3:0] sel;
    reg [21:0] result;
  begin
    result = input_0 & {22{sel[0]}};
    result = result | (input_1 & {22{sel[1]}});
    result = result | (input_2 & {22{sel[2]}});
    result = result | (input_3 & {22{sel[3]}});
    MUX1HOT_v_22_4_2 = result;
  end
  endfunction


  function automatic [21:0] MUX1HOT_v_22_5_2;
    input [21:0] input_4;
    input [21:0] input_3;
    input [21:0] input_2;
    input [21:0] input_1;
    input [21:0] input_0;
    input [4:0] sel;
    reg [21:0] result;
  begin
    result = input_0 & {22{sel[0]}};
    result = result | (input_1 & {22{sel[1]}});
    result = result | (input_2 & {22{sel[2]}});
    result = result | (input_3 & {22{sel[3]}});
    result = result | (input_4 & {22{sel[4]}});
    MUX1HOT_v_22_5_2 = result;
  end
  endfunction


  function automatic [23:0] MUX1HOT_v_24_3_2;
    input [23:0] input_2;
    input [23:0] input_1;
    input [23:0] input_0;
    input [2:0] sel;
    reg [23:0] result;
  begin
    result = input_0 & {24{sel[0]}};
    result = result | (input_1 & {24{sel[1]}});
    result = result | (input_2 & {24{sel[2]}});
    MUX1HOT_v_24_3_2 = result;
  end
  endfunction


  function automatic [28:0] MUX1HOT_v_29_4_2;
    input [28:0] input_3;
    input [28:0] input_2;
    input [28:0] input_1;
    input [28:0] input_0;
    input [3:0] sel;
    reg [28:0] result;
  begin
    result = input_0 & {29{sel[0]}};
    result = result | (input_1 & {29{sel[1]}});
    result = result | (input_2 & {29{sel[2]}});
    result = result | (input_3 & {29{sel[3]}});
    MUX1HOT_v_29_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_4_2;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [3:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_5_2;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [4:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    MUX1HOT_v_2_5_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_8_2;
    input [1:0] input_7;
    input [1:0] input_6;
    input [1:0] input_5;
    input [1:0] input_4;
    input [1:0] input_3;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [7:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    result = result | (input_3 & {2{sel[3]}});
    result = result | (input_4 & {2{sel[4]}});
    result = result | (input_5 & {2{sel[5]}});
    result = result | (input_6 & {2{sel[6]}});
    result = result | (input_7 & {2{sel[7]}});
    MUX1HOT_v_2_8_2 = result;
  end
  endfunction


  function automatic [29:0] MUX1HOT_v_30_8_2;
    input [29:0] input_7;
    input [29:0] input_6;
    input [29:0] input_5;
    input [29:0] input_4;
    input [29:0] input_3;
    input [29:0] input_2;
    input [29:0] input_1;
    input [29:0] input_0;
    input [7:0] sel;
    reg [29:0] result;
  begin
    result = input_0 & {30{sel[0]}};
    result = result | (input_1 & {30{sel[1]}});
    result = result | (input_2 & {30{sel[2]}});
    result = result | (input_3 & {30{sel[3]}});
    result = result | (input_4 & {30{sel[4]}});
    result = result | (input_5 & {30{sel[5]}});
    result = result | (input_6 & {30{sel[6]}});
    result = result | (input_7 & {30{sel[7]}});
    MUX1HOT_v_30_8_2 = result;
  end
  endfunction


  function automatic [35:0] MUX1HOT_v_36_4_2;
    input [35:0] input_3;
    input [35:0] input_2;
    input [35:0] input_1;
    input [35:0] input_0;
    input [3:0] sel;
    reg [35:0] result;
  begin
    result = input_0 & {36{sel[0]}};
    result = result | (input_1 & {36{sel[1]}});
    result = result | (input_2 & {36{sel[2]}});
    result = result | (input_3 & {36{sel[3]}});
    MUX1HOT_v_36_4_2 = result;
  end
  endfunction


  function automatic [37:0] MUX1HOT_v_38_4_2;
    input [37:0] input_3;
    input [37:0] input_2;
    input [37:0] input_1;
    input [37:0] input_0;
    input [3:0] sel;
    reg [37:0] result;
  begin
    result = input_0 & {38{sel[0]}};
    result = result | (input_1 & {38{sel[1]}});
    result = result | (input_2 & {38{sel[2]}});
    result = result | (input_3 & {38{sel[3]}});
    MUX1HOT_v_38_4_2 = result;
  end
  endfunction


  function automatic [38:0] MUX1HOT_v_39_11_2;
    input [38:0] input_10;
    input [38:0] input_9;
    input [38:0] input_8;
    input [38:0] input_7;
    input [38:0] input_6;
    input [38:0] input_5;
    input [38:0] input_4;
    input [38:0] input_3;
    input [38:0] input_2;
    input [38:0] input_1;
    input [38:0] input_0;
    input [10:0] sel;
    reg [38:0] result;
  begin
    result = input_0 & {39{sel[0]}};
    result = result | (input_1 & {39{sel[1]}});
    result = result | (input_2 & {39{sel[2]}});
    result = result | (input_3 & {39{sel[3]}});
    result = result | (input_4 & {39{sel[4]}});
    result = result | (input_5 & {39{sel[5]}});
    result = result | (input_6 & {39{sel[6]}});
    result = result | (input_7 & {39{sel[7]}});
    result = result | (input_8 & {39{sel[8]}});
    result = result | (input_9 & {39{sel[9]}});
    result = result | (input_10 & {39{sel[10]}});
    MUX1HOT_v_39_11_2 = result;
  end
  endfunction


  function automatic [38:0] MUX1HOT_v_39_3_2;
    input [38:0] input_2;
    input [38:0] input_1;
    input [38:0] input_0;
    input [2:0] sel;
    reg [38:0] result;
  begin
    result = input_0 & {39{sel[0]}};
    result = result | (input_1 & {39{sel[1]}});
    result = result | (input_2 & {39{sel[2]}});
    MUX1HOT_v_39_3_2 = result;
  end
  endfunction


  function automatic [38:0] MUX1HOT_v_39_4_2;
    input [38:0] input_3;
    input [38:0] input_2;
    input [38:0] input_1;
    input [38:0] input_0;
    input [3:0] sel;
    reg [38:0] result;
  begin
    result = input_0 & {39{sel[0]}};
    result = result | (input_1 & {39{sel[1]}});
    result = result | (input_2 & {39{sel[2]}});
    result = result | (input_3 & {39{sel[3]}});
    MUX1HOT_v_39_4_2 = result;
  end
  endfunction


  function automatic [38:0] MUX1HOT_v_39_5_2;
    input [38:0] input_4;
    input [38:0] input_3;
    input [38:0] input_2;
    input [38:0] input_1;
    input [38:0] input_0;
    input [4:0] sel;
    reg [38:0] result;
  begin
    result = input_0 & {39{sel[0]}};
    result = result | (input_1 & {39{sel[1]}});
    result = result | (input_2 & {39{sel[2]}});
    result = result | (input_3 & {39{sel[3]}});
    result = result | (input_4 & {39{sel[4]}});
    MUX1HOT_v_39_5_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_3_2;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [2:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_4_2;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [3:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_5_2;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [4:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    MUX1HOT_v_3_5_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_6_2;
    input [2:0] input_5;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [5:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    result = result | (input_5 & {3{sel[5]}});
    MUX1HOT_v_3_6_2 = result;
  end
  endfunction


  function automatic [2:0] MUX1HOT_v_3_7_2;
    input [2:0] input_6;
    input [2:0] input_5;
    input [2:0] input_4;
    input [2:0] input_3;
    input [2:0] input_2;
    input [2:0] input_1;
    input [2:0] input_0;
    input [6:0] sel;
    reg [2:0] result;
  begin
    result = input_0 & {3{sel[0]}};
    result = result | (input_1 & {3{sel[1]}});
    result = result | (input_2 & {3{sel[2]}});
    result = result | (input_3 & {3{sel[3]}});
    result = result | (input_4 & {3{sel[4]}});
    result = result | (input_5 & {3{sel[5]}});
    result = result | (input_6 & {3{sel[6]}});
    MUX1HOT_v_3_7_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_3_2;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [2:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    MUX1HOT_v_40_3_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_4_2;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [3:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    MUX1HOT_v_40_4_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_5_2;
    input [39:0] input_4;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [4:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    result = result | (input_4 & {40{sel[4]}});
    MUX1HOT_v_40_5_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_6_2;
    input [39:0] input_5;
    input [39:0] input_4;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [5:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    result = result | (input_4 & {40{sel[4]}});
    result = result | (input_5 & {40{sel[5]}});
    MUX1HOT_v_40_6_2 = result;
  end
  endfunction


  function automatic [39:0] MUX1HOT_v_40_9_2;
    input [39:0] input_8;
    input [39:0] input_7;
    input [39:0] input_6;
    input [39:0] input_5;
    input [39:0] input_4;
    input [39:0] input_3;
    input [39:0] input_2;
    input [39:0] input_1;
    input [39:0] input_0;
    input [8:0] sel;
    reg [39:0] result;
  begin
    result = input_0 & {40{sel[0]}};
    result = result | (input_1 & {40{sel[1]}});
    result = result | (input_2 & {40{sel[2]}});
    result = result | (input_3 & {40{sel[3]}});
    result = result | (input_4 & {40{sel[4]}});
    result = result | (input_5 & {40{sel[5]}});
    result = result | (input_6 & {40{sel[6]}});
    result = result | (input_7 & {40{sel[7]}});
    result = result | (input_8 & {40{sel[8]}});
    MUX1HOT_v_40_9_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_3_2;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [2:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function automatic [3:0] MUX1HOT_v_4_5_2;
    input [3:0] input_4;
    input [3:0] input_3;
    input [3:0] input_2;
    input [3:0] input_1;
    input [3:0] input_0;
    input [4:0] sel;
    reg [3:0] result;
  begin
    result = input_0 & {4{sel[0]}};
    result = result | (input_1 & {4{sel[1]}});
    result = result | (input_2 & {4{sel[2]}});
    result = result | (input_3 & {4{sel[3]}});
    result = result | (input_4 & {4{sel[4]}});
    MUX1HOT_v_4_5_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_3_2;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [2:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | (input_1 & {5{sel[1]}});
    result = result | (input_2 & {5{sel[2]}});
    MUX1HOT_v_5_3_2 = result;
  end
  endfunction


  function automatic [4:0] MUX1HOT_v_5_5_2;
    input [4:0] input_4;
    input [4:0] input_3;
    input [4:0] input_2;
    input [4:0] input_1;
    input [4:0] input_0;
    input [4:0] sel;
    reg [4:0] result;
  begin
    result = input_0 & {5{sel[0]}};
    result = result | (input_1 & {5{sel[1]}});
    result = result | (input_2 & {5{sel[2]}});
    result = result | (input_3 & {5{sel[3]}});
    result = result | (input_4 & {5{sel[4]}});
    MUX1HOT_v_5_5_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_3_2;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [2:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    MUX1HOT_v_8_3_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_4_2;
    input [7:0] input_3;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [3:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    result = result | (input_3 & {8{sel[3]}});
    MUX1HOT_v_8_4_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_3_2;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [2:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_4_2;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [3:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    MUX1HOT_v_9_4_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_5_2;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [4:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    MUX1HOT_v_9_5_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_6_2;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [5:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    result = result | (input_5 & {9{sel[5]}});
    MUX1HOT_v_9_6_2 = result;
  end
  endfunction


  function automatic [8:0] MUX1HOT_v_9_7_2;
    input [8:0] input_6;
    input [8:0] input_5;
    input [8:0] input_4;
    input [8:0] input_3;
    input [8:0] input_2;
    input [8:0] input_1;
    input [8:0] input_0;
    input [6:0] sel;
    reg [8:0] result;
  begin
    result = input_0 & {9{sel[0]}};
    result = result | (input_1 & {9{sel[1]}});
    result = result | (input_2 & {9{sel[2]}});
    result = result | (input_3 & {9{sel[3]}});
    result = result | (input_4 & {9{sel[4]}});
    result = result | (input_5 & {9{sel[5]}});
    result = result | (input_6 & {9{sel[6]}});
    MUX1HOT_v_9_7_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [16:0] MUX_v_17_2_2;
    input [16:0] input_0;
    input [16:0] input_1;
    input  sel;
    reg [16:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_17_2_2 = result;
  end
  endfunction


  function automatic [19:0] MUX_v_20_2_2;
    input [19:0] input_0;
    input [19:0] input_1;
    input  sel;
    reg [19:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_20_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [28:0] MUX_v_29_2_2;
    input [28:0] input_0;
    input [28:0] input_1;
    input  sel;
    reg [28:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_29_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_4_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input [1:0] input_2;
    input [1:0] input_3;
    input [1:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_2_4_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input  sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [30:0] MUX_v_31_2_2;
    input [30:0] input_0;
    input [30:0] input_1;
    input  sel;
    reg [30:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_31_2_2 = result;
  end
  endfunction


  function automatic [34:0] MUX_v_35_2_2;
    input [34:0] input_0;
    input [34:0] input_1;
    input  sel;
    reg [34:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_35_2_2 = result;
  end
  endfunction


  function automatic [36:0] MUX_v_37_2_2;
    input [36:0] input_0;
    input [36:0] input_1;
    input  sel;
    reg [36:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_37_2_2 = result;
  end
  endfunction


  function automatic [37:0] MUX_v_38_2_2;
    input [37:0] input_0;
    input [37:0] input_1;
    input  sel;
    reg [37:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_38_2_2 = result;
  end
  endfunction


  function automatic [38:0] MUX_v_39_2_2;
    input [38:0] input_0;
    input [38:0] input_1;
    input  sel;
    reg [38:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_39_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [39:0] MUX_v_40_2_2;
    input [39:0] input_0;
    input [39:0] input_1;
    input  sel;
    reg [39:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_40_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [51:0] MUX_v_52_2_2;
    input [51:0] input_0;
    input [51:0] input_1;
    input  sel;
    reg [51:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_52_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_2_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input  sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_18_1_17;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 17;
    readslicef_18_1_17 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function automatic [0:0] readslicef_41_1_40;
    input [40:0] vector;
    reg [40:0] tmp;
  begin
    tmp = vector >> 40;
    readslicef_41_1_40 = tmp[0:0];
  end
  endfunction


  function automatic [39:0] readslicef_41_40_1;
    input [40:0] vector;
    reg [40:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_41_40_1 = tmp[39:0];
  end
  endfunction


  function automatic [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function automatic [39:0] readslicef_56_40_16;
    input [55:0] vector;
    reg [55:0] tmp;
  begin
    tmp = vector >> 16;
    readslicef_56_40_16 = tmp[39:0];
  end
  endfunction


  function automatic [51:0] readslicef_68_52_16;
    input [67:0] vector;
    reg [67:0] tmp;
  begin
    tmp = vector >> 16;
    readslicef_68_52_16 = tmp[51:0];
  end
  endfunction


  function automatic [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function automatic [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function automatic [21:0] signext_22_1;
    input  vector;
  begin
    signext_22_1= {{21{vector}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [38:0] signext_39_33;
    input [32:0] vector;
  begin
    signext_39_33= {{6{vector[32]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_1;
    input  vector;
  begin
    signext_3_1= {{2{vector}}, vector};
  end
  endfunction


  function automatic [39:0] signext_40_38;
    input [37:0] vector;
  begin
    signext_40_38= {{2{vector[37]}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_1;
    input  vector;
  begin
    signext_4_1= {{3{vector}}, vector};
  end
  endfunction


  function automatic [3:0] signext_4_3;
    input [2:0] vector;
  begin
    signext_4_3= {{1{vector[2]}}, vector};
  end
  endfunction


  function automatic [4:0] signext_5_1;
    input  vector;
  begin
    signext_5_1= {{4{vector}}, vector};
  end
  endfunction


  function automatic [4:0] signext_5_4;
    input [3:0] vector;
  begin
    signext_5_4= {{1{vector[3]}}, vector};
  end
  endfunction


  function automatic [6:0] signext_7_6;
    input [5:0] vector;
  begin
    signext_7_6= {{1{vector[5]}}, vector};
  end
  endfunction


  function automatic [7:0] signext_8_1;
    input  vector;
  begin
    signext_8_1= {{7{vector}}, vector};
  end
  endfunction


  function automatic [7:0] signext_8_7;
    input [6:0] vector;
  begin
    signext_8_7= {{1{vector[6]}}, vector};
  end
  endfunction


  function automatic [8:0] signext_9_8;
    input [7:0] vector;
  begin
    signext_9_8= {{1{vector[7]}}, vector};
  end
  endfunction


  function automatic [1:0] conv_s2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function automatic [3:0] conv_s2s_2_4 ;
    input [1:0]  vector ;
  begin
    conv_s2s_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_s2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function automatic [4:0] conv_s2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function automatic [5:0] conv_s2s_4_6 ;
    input [3:0]  vector ;
  begin
    conv_s2s_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function automatic [6:0] conv_s2s_6_7 ;
    input [5:0]  vector ;
  begin
    conv_s2s_6_7 = {vector[5], vector};
  end
  endfunction


  function automatic [7:0] conv_s2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_s2s_6_8 = {{2{vector[5]}}, vector};
  end
  endfunction


  function automatic [10:0] conv_s2s_7_11 ;
    input [6:0]  vector ;
  begin
    conv_s2s_7_11 = {{4{vector[6]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_9 = {vector[7], vector};
  end
  endfunction


  function automatic [9:0] conv_s2s_8_10 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_10 = {{2{vector[7]}}, vector};
  end
  endfunction


  function automatic [10:0] conv_s2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function automatic [11:0] conv_s2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_s2s_10_12 = {{2{vector[9]}}, vector};
  end
  endfunction


  function automatic [12:0] conv_s2s_11_13 ;
    input [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function automatic [13:0] conv_s2s_12_14 ;
    input [11:0]  vector ;
  begin
    conv_s2s_12_14 = {{2{vector[11]}}, vector};
  end
  endfunction


  function automatic [14:0] conv_s2s_13_15 ;
    input [12:0]  vector ;
  begin
    conv_s2s_13_15 = {{2{vector[12]}}, vector};
  end
  endfunction


  function automatic [15:0] conv_s2s_14_16 ;
    input [13:0]  vector ;
  begin
    conv_s2s_14_16 = {{2{vector[13]}}, vector};
  end
  endfunction


  function automatic [16:0] conv_s2s_15_17 ;
    input [14:0]  vector ;
  begin
    conv_s2s_15_17 = {{2{vector[14]}}, vector};
  end
  endfunction


  function automatic [17:0] conv_s2s_16_18 ;
    input [15:0]  vector ;
  begin
    conv_s2s_16_18 = {{2{vector[15]}}, vector};
  end
  endfunction


  function automatic [17:0] conv_s2s_17_18 ;
    input [16:0]  vector ;
  begin
    conv_s2s_17_18 = {vector[16], vector};
  end
  endfunction


  function automatic [18:0] conv_s2s_17_19 ;
    input [16:0]  vector ;
  begin
    conv_s2s_17_19 = {{2{vector[16]}}, vector};
  end
  endfunction


  function automatic [18:0] conv_s2s_18_19 ;
    input [17:0]  vector ;
  begin
    conv_s2s_18_19 = {vector[17], vector};
  end
  endfunction


  function automatic [19:0] conv_s2s_18_20 ;
    input [17:0]  vector ;
  begin
    conv_s2s_18_20 = {{2{vector[17]}}, vector};
  end
  endfunction


  function automatic [19:0] conv_s2s_19_20 ;
    input [18:0]  vector ;
  begin
    conv_s2s_19_20 = {vector[18], vector};
  end
  endfunction


  function automatic [20:0] conv_s2s_19_21 ;
    input [18:0]  vector ;
  begin
    conv_s2s_19_21 = {{2{vector[18]}}, vector};
  end
  endfunction


  function automatic [20:0] conv_s2s_20_21 ;
    input [19:0]  vector ;
  begin
    conv_s2s_20_21 = {vector[19], vector};
  end
  endfunction


  function automatic [21:0] conv_s2s_20_22 ;
    input [19:0]  vector ;
  begin
    conv_s2s_20_22 = {{2{vector[19]}}, vector};
  end
  endfunction


  function automatic [21:0] conv_s2s_21_22 ;
    input [20:0]  vector ;
  begin
    conv_s2s_21_22 = {vector[20], vector};
  end
  endfunction


  function automatic [22:0] conv_s2s_21_23 ;
    input [20:0]  vector ;
  begin
    conv_s2s_21_23 = {{2{vector[20]}}, vector};
  end
  endfunction


  function automatic [23:0] conv_s2s_22_24 ;
    input [21:0]  vector ;
  begin
    conv_s2s_22_24 = {{2{vector[21]}}, vector};
  end
  endfunction


  function automatic [24:0] conv_s2s_23_25 ;
    input [22:0]  vector ;
  begin
    conv_s2s_23_25 = {{2{vector[22]}}, vector};
  end
  endfunction


  function automatic [25:0] conv_s2s_24_26 ;
    input [23:0]  vector ;
  begin
    conv_s2s_24_26 = {{2{vector[23]}}, vector};
  end
  endfunction


  function automatic [26:0] conv_s2s_25_27 ;
    input [24:0]  vector ;
  begin
    conv_s2s_25_27 = {{2{vector[24]}}, vector};
  end
  endfunction


  function automatic [27:0] conv_s2s_26_28 ;
    input [25:0]  vector ;
  begin
    conv_s2s_26_28 = {{2{vector[25]}}, vector};
  end
  endfunction


  function automatic [28:0] conv_s2s_27_29 ;
    input [26:0]  vector ;
  begin
    conv_s2s_27_29 = {{2{vector[26]}}, vector};
  end
  endfunction


  function automatic [28:0] conv_s2s_28_29 ;
    input [27:0]  vector ;
  begin
    conv_s2s_28_29 = {vector[27], vector};
  end
  endfunction


  function automatic [29:0] conv_s2s_28_30 ;
    input [27:0]  vector ;
  begin
    conv_s2s_28_30 = {{2{vector[27]}}, vector};
  end
  endfunction


  function automatic [30:0] conv_s2s_29_31 ;
    input [28:0]  vector ;
  begin
    conv_s2s_29_31 = {{2{vector[28]}}, vector};
  end
  endfunction


  function automatic [31:0] conv_s2s_29_32 ;
    input [28:0]  vector ;
  begin
    conv_s2s_29_32 = {{3{vector[28]}}, vector};
  end
  endfunction


  function automatic [31:0] conv_s2s_30_32 ;
    input [29:0]  vector ;
  begin
    conv_s2s_30_32 = {{2{vector[29]}}, vector};
  end
  endfunction


  function automatic [31:0] conv_s2s_31_32 ;
    input [30:0]  vector ;
  begin
    conv_s2s_31_32 = {vector[30], vector};
  end
  endfunction


  function automatic [33:0] conv_s2s_32_34 ;
    input [31:0]  vector ;
  begin
    conv_s2s_32_34 = {{2{vector[31]}}, vector};
  end
  endfunction


  function automatic [35:0] conv_s2s_34_36 ;
    input [33:0]  vector ;
  begin
    conv_s2s_34_36 = {{2{vector[33]}}, vector};
  end
  endfunction


  function automatic [37:0] conv_s2s_36_38 ;
    input [35:0]  vector ;
  begin
    conv_s2s_36_38 = {{2{vector[35]}}, vector};
  end
  endfunction


  function automatic [40:0] conv_s2s_40_41 ;
    input [39:0]  vector ;
  begin
    conv_s2s_40_41 = {vector[39], vector};
  end
  endfunction


  function automatic [1:0] conv_s2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_s2u_1_2 = {vector[0], vector};
  end
  endfunction


  function automatic [2:0] conv_s2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_3 = {vector[1], vector};
  end
  endfunction


  function automatic [8:0] conv_s2u_2_9 ;
    input [1:0]  vector ;
  begin
    conv_s2u_2_9 = {{7{vector[1]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_s2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_s2u_3_4 = {vector[2], vector};
  end
  endfunction


  function automatic [6:0] conv_s2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_s2u_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function automatic [23:0] conv_s2u_8_24 ;
    input [7:0]  vector ;
  begin
    conv_s2u_8_24 = {{16{vector[7]}}, vector};
  end
  endfunction


  function automatic [9:0] conv_s2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_s2u_9_10 = {vector[8], vector};
  end
  endfunction


  function automatic [10:0] conv_s2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_s2u_10_11 = {vector[9], vector};
  end
  endfunction


  function automatic [17:0] conv_s2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_s2u_17_18 = {vector[16], vector};
  end
  endfunction


  function automatic [21:0] conv_s2u_20_22 ;
    input [19:0]  vector ;
  begin
    conv_s2u_20_22 = {{2{vector[19]}}, vector};
  end
  endfunction


  function automatic [21:0] conv_s2u_21_22 ;
    input [20:0]  vector ;
  begin
    conv_s2u_21_22 = {vector[20], vector};
  end
  endfunction


  function automatic [40:0] conv_s2u_40_41 ;
    input [39:0]  vector ;
  begin
    conv_s2u_40_41 = {vector[39], vector};
  end
  endfunction


  function automatic [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 =  {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_1_6 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_6 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2s_1_7 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_7 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_1_8 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_8 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_1_9 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_9 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2s_1_10 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_10 = {{9{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_1_11 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_11 = {{10{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_1_13 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_13 = {{12{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2s_1_15 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_15 = {{14{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2s_1_24 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_24 = {{23{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2s_2_5 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_5 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_2_6 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_6 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 =  {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2s_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_3_6 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_6 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 =  {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 =  {1'b0, vector};
  end
  endfunction


  function automatic [6:0] conv_u2s_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_7 =  {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 =  {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 =  {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 =  {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_11_13 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_13 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2s_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_14 =  {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2s_13_15 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_15 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2s_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2s_14_15 =  {1'b0, vector};
  end
  endfunction


  function automatic [15:0] conv_u2s_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2s_15_16 =  {1'b0, vector};
  end
  endfunction


  function automatic [16:0] conv_u2s_15_17 ;
    input [14:0]  vector ;
  begin
    conv_u2s_15_17 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [16:0] conv_u2s_16_17 ;
    input [15:0]  vector ;
  begin
    conv_u2s_16_17 =  {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2s_17_18 ;
    input [16:0]  vector ;
  begin
    conv_u2s_17_18 =  {1'b0, vector};
  end
  endfunction


  function automatic [18:0] conv_u2s_17_19 ;
    input [16:0]  vector ;
  begin
    conv_u2s_17_19 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [18:0] conv_u2s_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2s_18_19 =  {1'b0, vector};
  end
  endfunction


  function automatic [19:0] conv_u2s_18_20 ;
    input [17:0]  vector ;
  begin
    conv_u2s_18_20 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [19:0] conv_u2s_19_20 ;
    input [18:0]  vector ;
  begin
    conv_u2s_19_20 =  {1'b0, vector};
  end
  endfunction


  function automatic [20:0] conv_u2s_19_21 ;
    input [18:0]  vector ;
  begin
    conv_u2s_19_21 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [20:0] conv_u2s_20_21 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_21 =  {1'b0, vector};
  end
  endfunction


  function automatic [21:0] conv_u2s_20_22 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_22 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [21:0] conv_u2s_21_22 ;
    input [20:0]  vector ;
  begin
    conv_u2s_21_22 =  {1'b0, vector};
  end
  endfunction


  function automatic [22:0] conv_u2s_22_23 ;
    input [21:0]  vector ;
  begin
    conv_u2s_22_23 =  {1'b0, vector};
  end
  endfunction


  function automatic [23:0] conv_u2s_22_24 ;
    input [21:0]  vector ;
  begin
    conv_u2s_22_24 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [23:0] conv_u2s_23_24 ;
    input [22:0]  vector ;
  begin
    conv_u2s_23_24 =  {1'b0, vector};
  end
  endfunction


  function automatic [24:0] conv_u2s_24_25 ;
    input [23:0]  vector ;
  begin
    conv_u2s_24_25 =  {1'b0, vector};
  end
  endfunction


  function automatic [25:0] conv_u2s_24_26 ;
    input [23:0]  vector ;
  begin
    conv_u2s_24_26 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [25:0] conv_u2s_25_26 ;
    input [24:0]  vector ;
  begin
    conv_u2s_25_26 =  {1'b0, vector};
  end
  endfunction


  function automatic [26:0] conv_u2s_26_27 ;
    input [25:0]  vector ;
  begin
    conv_u2s_26_27 =  {1'b0, vector};
  end
  endfunction


  function automatic [27:0] conv_u2s_26_28 ;
    input [25:0]  vector ;
  begin
    conv_u2s_26_28 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [27:0] conv_u2s_27_28 ;
    input [26:0]  vector ;
  begin
    conv_u2s_27_28 =  {1'b0, vector};
  end
  endfunction


  function automatic [28:0] conv_u2s_27_29 ;
    input [26:0]  vector ;
  begin
    conv_u2s_27_29 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [28:0] conv_u2s_28_29 ;
    input [27:0]  vector ;
  begin
    conv_u2s_28_29 =  {1'b0, vector};
  end
  endfunction


  function automatic [29:0] conv_u2s_29_30 ;
    input [28:0]  vector ;
  begin
    conv_u2s_29_30 =  {1'b0, vector};
  end
  endfunction


  function automatic [30:0] conv_u2s_30_31 ;
    input [29:0]  vector ;
  begin
    conv_u2s_30_31 =  {1'b0, vector};
  end
  endfunction


  function automatic [31:0] conv_u2s_31_32 ;
    input [30:0]  vector ;
  begin
    conv_u2s_31_32 =  {1'b0, vector};
  end
  endfunction


  function automatic [33:0] conv_u2s_32_34 ;
    input [31:0]  vector ;
  begin
    conv_u2s_32_34 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [35:0] conv_u2s_34_36 ;
    input [33:0]  vector ;
  begin
    conv_u2s_34_36 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [37:0] conv_u2s_36_38 ;
    input [35:0]  vector ;
  begin
    conv_u2s_36_38 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [39:0] conv_u2s_39_40 ;
    input [38:0]  vector ;
  begin
    conv_u2s_39_40 =  {1'b0, vector};
  end
  endfunction


  function automatic [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_1_6 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_6 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_2_6 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_6 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_2_7 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_7 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_3_6 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_6 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_6_9 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_9 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function automatic [17:0] conv_u2u_17_18 ;
    input [16:0]  vector ;
  begin
    conv_u2u_17_18 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    dut
// ------------------------------------------------------------------


module dut (
  clk, en, rst, strm_in_rsc_dat, strm_in_rsc_vld, strm_in_rsc_rdy, strm_out_rsc_dat,
      strm_out_rsc_vld, strm_out_rsc_rdy
);
  input clk;
  input en;
  input rst;
  input [31:0] strm_in_rsc_dat;
  input strm_in_rsc_vld;
  output strm_in_rsc_rdy;
  output [31:0] strm_out_rsc_dat;
  output strm_out_rsc_vld;
  input strm_out_rsc_rdy;


  // Interconnect Declarations
  wire input_rsci_clken_d;
  wire [39:0] input_rsci_d_d;
  wire [39:0] input_rsci_q_d;
  wire [8:0] input_rsci_radr_d;
  wire [8:0] input_rsci_wadr_d;
  wire [39:0] output_rsci_d_d;
  wire [39:0] output_rsci_q_d;
  wire [8:0] output_rsci_radr_d;
  wire [8:0] output_rsci_wadr_d;
  wire [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d;
  wire [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_re_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_re_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_re_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_re_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_re_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_re_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_q_embed_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_q_embed_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_q_embed_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_q_embed_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_k_embed_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_k_embed_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_k_embed_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_k_embed_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_q_d;
  wire [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d;
  wire [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d;
  wire [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d;
  wire [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d;
  wire [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d;
  wire [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_weights_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_weights_rsci_q_d;
  wire [5:0] attention_5_1_384_384_8_48_attn_weights_rsci_radr_d;
  wire [5:0] attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_rsci_wadr_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d;
  wire [7:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d;
  wire [71:0] rms_norm_384_div_cmp_a;
  wire [60:0] rms_norm_384_div_cmp_b;
  wire [71:0] rms_norm_384_div_cmp_z;
  wire input_rsc_clken;
  wire [39:0] input_rsc_q;
  wire input_rsc_re;
  wire [8:0] input_rsc_radr;
  wire input_rsc_we;
  wire [39:0] input_rsc_d;
  wire [8:0] input_rsc_wadr;
  wire output_rsc_clken;
  wire [39:0] output_rsc_q;
  wire output_rsc_re;
  wire [8:0] output_rsc_radr;
  wire output_rsc_we;
  wire [39:0] output_rsc_d;
  wire [8:0] output_rsc_wadr;
  wire attention_5_1_384_384_8_48_quantized_hidden_states_rsc_clken;
  wire [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_q;
  wire attention_5_1_384_384_8_48_quantized_hidden_states_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_radr;
  wire attention_5_1_384_384_8_48_quantized_hidden_states_rsc_we;
  wire [7:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_hidden_states_rsc_wadr;
  wire attention_5_1_384_384_8_48_q_proj_re_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_re_rsc_q;
  wire attention_5_1_384_384_8_48_q_proj_re_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_re_rsc_radr;
  wire attention_5_1_384_384_8_48_q_proj_re_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_re_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_re_rsc_wadr;
  wire attention_5_1_384_384_8_48_k_proj_re_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_re_rsc_q;
  wire attention_5_1_384_384_8_48_k_proj_re_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_re_rsc_radr;
  wire attention_5_1_384_384_8_48_k_proj_re_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_re_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_re_rsc_wadr;
  wire attention_5_1_384_384_8_48_v_proj_re_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_re_rsc_q;
  wire attention_5_1_384_384_8_48_v_proj_re_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_re_rsc_radr;
  wire attention_5_1_384_384_8_48_v_proj_re_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_re_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_re_rsc_wadr;
  wire attention_5_1_384_384_8_48_q_proj_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_rsc_q;
  wire attention_5_1_384_384_8_48_q_proj_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_rsc_radr;
  wire attention_5_1_384_384_8_48_q_proj_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_q_proj_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_q_proj_rsc_wadr;
  wire attention_5_1_384_384_8_48_k_proj_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_rsc_q;
  wire attention_5_1_384_384_8_48_k_proj_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_rsc_radr;
  wire attention_5_1_384_384_8_48_k_proj_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_k_proj_rsc_wadr;
  wire attention_5_1_384_384_8_48_v_proj_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_rsc_q;
  wire attention_5_1_384_384_8_48_v_proj_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_rsc_radr;
  wire attention_5_1_384_384_8_48_v_proj_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_v_proj_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_v_proj_rsc_wadr;
  wire attention_5_1_384_384_8_48_q_embed_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_q_embed_rsc_q;
  wire attention_5_1_384_384_8_48_q_embed_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_q_embed_rsc_radr;
  wire attention_5_1_384_384_8_48_q_embed_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_q_embed_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_q_embed_rsc_wadr;
  wire attention_5_1_384_384_8_48_k_embed_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_k_embed_rsc_q;
  wire attention_5_1_384_384_8_48_k_embed_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_k_embed_rsc_radr;
  wire attention_5_1_384_384_8_48_k_embed_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_k_embed_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_k_embed_rsc_wadr;
  wire attention_5_1_384_384_8_48_k_cache_upd_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_q;
  wire attention_5_1_384_384_8_48_k_cache_upd_rsc_re;
  wire [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_radr;
  wire attention_5_1_384_384_8_48_k_cache_upd_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_d;
  wire [11:0] attention_5_1_384_384_8_48_k_cache_upd_rsc_wadr;
  wire attention_5_1_384_384_8_48_v_cache_upd_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_q;
  wire attention_5_1_384_384_8_48_v_cache_upd_rsc_re;
  wire [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_radr;
  wire attention_5_1_384_384_8_48_v_cache_upd_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_d;
  wire [11:0] attention_5_1_384_384_8_48_v_cache_upd_rsc_wadr;
  wire attention_5_1_384_384_8_48_k_proj_transposed_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_q;
  wire attention_5_1_384_384_8_48_k_proj_transposed_rsc_re;
  wire [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_radr;
  wire attention_5_1_384_384_8_48_k_proj_transposed_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_d;
  wire [11:0] attention_5_1_384_384_8_48_k_proj_transposed_rsc_wadr;
  wire attention_5_1_384_384_8_48_attn_weights_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_attn_weights_rsc_q;
  wire attention_5_1_384_384_8_48_attn_weights_rsc_re;
  wire [5:0] attention_5_1_384_384_8_48_attn_weights_rsc_radr;
  wire attention_5_1_384_384_8_48_attn_weights_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_attn_weights_rsc_d;
  wire [5:0] attention_5_1_384_384_8_48_attn_weights_rsc_wadr;
  wire attention_5_1_384_384_8_48_attn_output_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_rsc_q;
  wire attention_5_1_384_384_8_48_attn_output_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_rsc_radr;
  wire attention_5_1_384_384_8_48_attn_output_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_rsc_wadr;
  wire attention_5_1_384_384_8_48_attn_output_2D_rsc_clken;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_q;
  wire attention_5_1_384_384_8_48_attn_output_2D_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_radr;
  wire attention_5_1_384_384_8_48_attn_output_2D_rsc_we;
  wire [39:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_attn_output_2D_rsc_wadr;
  wire attention_5_1_384_384_8_48_quantized_final_output_rsc_clken;
  wire [7:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_q;
  wire attention_5_1_384_384_8_48_quantized_final_output_rsc_re;
  wire [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_radr;
  wire attention_5_1_384_384_8_48_quantized_final_output_rsc_we;
  wire [7:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_d;
  wire [8:0] attention_5_1_384_384_8_48_quantized_final_output_rsc_wadr;
  wire apply_rotary_pos_emb_1_8_48_rotated_q_rsc_clken;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_q;
  wire apply_rotary_pos_emb_1_8_48_rotated_q_rsc_re;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_radr;
  wire apply_rotary_pos_emb_1_8_48_rotated_q_rsc_we;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_q_rsc_wadr;
  wire apply_rotary_pos_emb_1_8_48_rotated_k_rsc_clken;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_q;
  wire apply_rotary_pos_emb_1_8_48_rotated_k_rsc_re;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_radr;
  wire apply_rotary_pos_emb_1_8_48_rotated_k_rsc_we;
  wire [39:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_d;
  wire [8:0] apply_rotary_pos_emb_1_8_48_rotated_k_rsc_wadr;
  wire input_rsci_re_d_iff;
  wire input_rsci_we_d_iff;
  wire output_rsci_re_d_iff;
  wire output_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_q_proj_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_q_proj_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_v_proj_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_v_proj_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_q_embed_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_q_embed_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_k_embed_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_attn_weights_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_attn_weights_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_attn_output_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_attn_output_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_iff;
  wire attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_iff;
  wire attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_iff;
  wire apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_iff;
  wire apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_div #(.width_a(32'sd72),
  .width_b(32'sd61),
  .signd(32'sd1)) rms_norm_384_div_cmp (
      .a(rms_norm_384_div_cmp_a),
      .b(rms_norm_384_div_cmp_b),
      .z(rms_norm_384_div_cmp_z)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) input_rsc_comp (
      .clk(clk),
      .clken(input_rsc_clken),
      .d(input_rsc_d),
      .q(input_rsc_q),
      .radr(input_rsc_radr),
      .re(input_rsc_re),
      .wadr(input_rsc_wadr),
      .we(input_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) output_rsc_comp (
      .clk(clk),
      .clken(output_rsc_clken),
      .d(output_rsc_d),
      .q(output_rsc_q),
      .radr(output_rsc_radr),
      .re(output_rsc_re),
      .wadr(output_rsc_wadr),
      .we(output_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd8),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_quantized_hidden_states_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_clken),
      .d(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_d),
      .q(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_q),
      .radr(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_radr),
      .re(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_re),
      .wadr(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_wadr),
      .we(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_q_proj_re_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_q_proj_re_rsc_clken),
      .d(attention_5_1_384_384_8_48_q_proj_re_rsc_d),
      .q(attention_5_1_384_384_8_48_q_proj_re_rsc_q),
      .radr(attention_5_1_384_384_8_48_q_proj_re_rsc_radr),
      .re(attention_5_1_384_384_8_48_q_proj_re_rsc_re),
      .wadr(attention_5_1_384_384_8_48_q_proj_re_rsc_wadr),
      .we(attention_5_1_384_384_8_48_q_proj_re_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_k_proj_re_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_k_proj_re_rsc_clken),
      .d(attention_5_1_384_384_8_48_k_proj_re_rsc_d),
      .q(attention_5_1_384_384_8_48_k_proj_re_rsc_q),
      .radr(attention_5_1_384_384_8_48_k_proj_re_rsc_radr),
      .re(attention_5_1_384_384_8_48_k_proj_re_rsc_re),
      .wadr(attention_5_1_384_384_8_48_k_proj_re_rsc_wadr),
      .we(attention_5_1_384_384_8_48_k_proj_re_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_v_proj_re_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_v_proj_re_rsc_clken),
      .d(attention_5_1_384_384_8_48_v_proj_re_rsc_d),
      .q(attention_5_1_384_384_8_48_v_proj_re_rsc_q),
      .radr(attention_5_1_384_384_8_48_v_proj_re_rsc_radr),
      .re(attention_5_1_384_384_8_48_v_proj_re_rsc_re),
      .wadr(attention_5_1_384_384_8_48_v_proj_re_rsc_wadr),
      .we(attention_5_1_384_384_8_48_v_proj_re_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_q_proj_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_q_proj_rsc_clken),
      .d(attention_5_1_384_384_8_48_q_proj_rsc_d),
      .q(attention_5_1_384_384_8_48_q_proj_rsc_q),
      .radr(attention_5_1_384_384_8_48_q_proj_rsc_radr),
      .re(attention_5_1_384_384_8_48_q_proj_rsc_re),
      .wadr(attention_5_1_384_384_8_48_q_proj_rsc_wadr),
      .we(attention_5_1_384_384_8_48_q_proj_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_k_proj_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_k_proj_rsc_clken),
      .d(attention_5_1_384_384_8_48_k_proj_rsc_d),
      .q(attention_5_1_384_384_8_48_k_proj_rsc_q),
      .radr(attention_5_1_384_384_8_48_k_proj_rsc_radr),
      .re(attention_5_1_384_384_8_48_k_proj_rsc_re),
      .wadr(attention_5_1_384_384_8_48_k_proj_rsc_wadr),
      .we(attention_5_1_384_384_8_48_k_proj_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_v_proj_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_v_proj_rsc_clken),
      .d(attention_5_1_384_384_8_48_v_proj_rsc_d),
      .q(attention_5_1_384_384_8_48_v_proj_rsc_q),
      .radr(attention_5_1_384_384_8_48_v_proj_rsc_radr),
      .re(attention_5_1_384_384_8_48_v_proj_rsc_re),
      .wadr(attention_5_1_384_384_8_48_v_proj_rsc_wadr),
      .we(attention_5_1_384_384_8_48_v_proj_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_q_embed_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_q_embed_rsc_clken),
      .d(attention_5_1_384_384_8_48_q_embed_rsc_d),
      .q(attention_5_1_384_384_8_48_q_embed_rsc_q),
      .radr(attention_5_1_384_384_8_48_q_embed_rsc_radr),
      .re(attention_5_1_384_384_8_48_q_embed_rsc_re),
      .wadr(attention_5_1_384_384_8_48_q_embed_rsc_wadr),
      .we(attention_5_1_384_384_8_48_q_embed_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_k_embed_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_k_embed_rsc_clken),
      .d(attention_5_1_384_384_8_48_k_embed_rsc_d),
      .q(attention_5_1_384_384_8_48_k_embed_rsc_q),
      .radr(attention_5_1_384_384_8_48_k_embed_rsc_radr),
      .re(attention_5_1_384_384_8_48_k_embed_rsc_re),
      .wadr(attention_5_1_384_384_8_48_k_embed_rsc_wadr),
      .we(attention_5_1_384_384_8_48_k_embed_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd12),
  .data_width(32'sd40),
  .depth(32'sd2304),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_k_cache_upd_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_k_cache_upd_rsc_clken),
      .d(attention_5_1_384_384_8_48_k_cache_upd_rsc_d),
      .q(attention_5_1_384_384_8_48_k_cache_upd_rsc_q),
      .radr(attention_5_1_384_384_8_48_k_cache_upd_rsc_radr),
      .re(attention_5_1_384_384_8_48_k_cache_upd_rsc_re),
      .wadr(attention_5_1_384_384_8_48_k_cache_upd_rsc_wadr),
      .we(attention_5_1_384_384_8_48_k_cache_upd_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd12),
  .data_width(32'sd40),
  .depth(32'sd2304),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_v_cache_upd_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_v_cache_upd_rsc_clken),
      .d(attention_5_1_384_384_8_48_v_cache_upd_rsc_d),
      .q(attention_5_1_384_384_8_48_v_cache_upd_rsc_q),
      .radr(attention_5_1_384_384_8_48_v_cache_upd_rsc_radr),
      .re(attention_5_1_384_384_8_48_v_cache_upd_rsc_re),
      .wadr(attention_5_1_384_384_8_48_v_cache_upd_rsc_wadr),
      .we(attention_5_1_384_384_8_48_v_cache_upd_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd12),
  .data_width(32'sd40),
  .depth(32'sd2304),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_k_proj_transposed_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_k_proj_transposed_rsc_clken),
      .d(attention_5_1_384_384_8_48_k_proj_transposed_rsc_d),
      .q(attention_5_1_384_384_8_48_k_proj_transposed_rsc_q),
      .radr(attention_5_1_384_384_8_48_k_proj_transposed_rsc_radr),
      .re(attention_5_1_384_384_8_48_k_proj_transposed_rsc_re),
      .wadr(attention_5_1_384_384_8_48_k_proj_transposed_rsc_wadr),
      .we(attention_5_1_384_384_8_48_k_proj_transposed_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd6),
  .data_width(32'sd40),
  .depth(32'sd48),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_attn_weights_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_attn_weights_rsc_clken),
      .d(attention_5_1_384_384_8_48_attn_weights_rsc_d),
      .q(attention_5_1_384_384_8_48_attn_weights_rsc_q),
      .radr(attention_5_1_384_384_8_48_attn_weights_rsc_radr),
      .re(attention_5_1_384_384_8_48_attn_weights_rsc_re),
      .wadr(attention_5_1_384_384_8_48_attn_weights_rsc_wadr),
      .we(attention_5_1_384_384_8_48_attn_weights_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_attn_output_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_attn_output_rsc_clken),
      .d(attention_5_1_384_384_8_48_attn_output_rsc_d),
      .q(attention_5_1_384_384_8_48_attn_output_rsc_q),
      .radr(attention_5_1_384_384_8_48_attn_output_rsc_radr),
      .re(attention_5_1_384_384_8_48_attn_output_rsc_re),
      .wadr(attention_5_1_384_384_8_48_attn_output_rsc_wadr),
      .we(attention_5_1_384_384_8_48_attn_output_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_attn_output_2D_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_attn_output_2D_rsc_clken),
      .d(attention_5_1_384_384_8_48_attn_output_2D_rsc_d),
      .q(attention_5_1_384_384_8_48_attn_output_2D_rsc_q),
      .radr(attention_5_1_384_384_8_48_attn_output_2D_rsc_radr),
      .re(attention_5_1_384_384_8_48_attn_output_2D_rsc_re),
      .wadr(attention_5_1_384_384_8_48_attn_output_2D_rsc_wadr),
      .we(attention_5_1_384_384_8_48_attn_output_2D_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd8),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) attention_5_1_384_384_8_48_quantized_final_output_rsc_comp
      (
      .clk(clk),
      .clken(attention_5_1_384_384_8_48_quantized_final_output_rsc_clken),
      .d(attention_5_1_384_384_8_48_quantized_final_output_rsc_d),
      .q(attention_5_1_384_384_8_48_quantized_final_output_rsc_q),
      .radr(attention_5_1_384_384_8_48_quantized_final_output_rsc_radr),
      .re(attention_5_1_384_384_8_48_quantized_final_output_rsc_re),
      .wadr(attention_5_1_384_384_8_48_quantized_final_output_rsc_wadr),
      .we(attention_5_1_384_384_8_48_quantized_final_output_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) apply_rotary_pos_emb_1_8_48_rotated_q_rsc_comp
      (
      .clk(clk),
      .clken(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_clken),
      .d(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_d),
      .q(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_q),
      .radr(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_radr),
      .re(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_re),
      .wadr(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_wadr),
      .we(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_we)
    );
  BLOCK_1R1W_RBW #(.addr_width(32'sd9),
  .data_width(32'sd40),
  .depth(32'sd384),
  .latency(32'sd1),
  .suppress_sim_read_addr_range_errs(32'sd1)) apply_rotary_pos_emb_1_8_48_rotated_k_rsc_comp
      (
      .clk(clk),
      .clken(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_clken),
      .d(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_d),
      .q(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_q),
      .radr(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_radr),
      .re(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_re),
      .wadr(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_wadr),
      .we(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_we)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_9_40_384_1_384_40_1_gen input_rsci (
      .clken(input_rsc_clken),
      .q(input_rsc_q),
      .re(input_rsc_re),
      .radr(input_rsc_radr),
      .we(input_rsc_we),
      .d(input_rsc_d),
      .wadr(input_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(input_rsci_d_d),
      .q_d(input_rsci_q_d),
      .radr_d(input_rsci_radr_d),
      .re_d(input_rsci_re_d_iff),
      .wadr_d(input_rsci_wadr_d),
      .we_d(input_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(input_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(input_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_9_40_384_1_384_40_1_gen output_rsci
      (
      .clken(output_rsc_clken),
      .q(output_rsc_q),
      .re(output_rsc_re),
      .radr(output_rsc_radr),
      .we(output_rsc_we),
      .d(output_rsc_d),
      .wadr(output_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(output_rsci_d_d),
      .q_d(output_rsci_q_d),
      .radr_d(output_rsci_radr_d),
      .re_d(output_rsci_re_d_iff),
      .wadr_d(output_rsci_wadr_d),
      .we_d(output_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(output_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(output_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_9_8_384_1_384_8_1_gen attention_5_1_384_384_8_48_quantized_hidden_states_rsci
      (
      .clken(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_clken),
      .q(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_q),
      .re(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_re),
      .radr(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_radr),
      .we(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_we),
      .d(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_d),
      .wadr(attention_5_1_384_384_8_48_quantized_hidden_states_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_q_proj_re_rsci
      (
      .clken(attention_5_1_384_384_8_48_q_proj_re_rsc_clken),
      .q(attention_5_1_384_384_8_48_q_proj_re_rsc_q),
      .re(attention_5_1_384_384_8_48_q_proj_re_rsc_re),
      .radr(attention_5_1_384_384_8_48_q_proj_re_rsc_radr),
      .we(attention_5_1_384_384_8_48_q_proj_re_rsc_we),
      .d(attention_5_1_384_384_8_48_q_proj_re_rsc_d),
      .wadr(attention_5_1_384_384_8_48_q_proj_re_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_q_proj_re_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_q_proj_re_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_7_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_k_proj_re_rsci
      (
      .clken(attention_5_1_384_384_8_48_k_proj_re_rsc_clken),
      .q(attention_5_1_384_384_8_48_k_proj_re_rsc_q),
      .re(attention_5_1_384_384_8_48_k_proj_re_rsc_re),
      .radr(attention_5_1_384_384_8_48_k_proj_re_rsc_radr),
      .we(attention_5_1_384_384_8_48_k_proj_re_rsc_we),
      .d(attention_5_1_384_384_8_48_k_proj_re_rsc_d),
      .wadr(attention_5_1_384_384_8_48_k_proj_re_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_k_proj_re_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_k_proj_re_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_8_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_v_proj_re_rsci
      (
      .clken(attention_5_1_384_384_8_48_v_proj_re_rsc_clken),
      .q(attention_5_1_384_384_8_48_v_proj_re_rsc_q),
      .re(attention_5_1_384_384_8_48_v_proj_re_rsc_re),
      .radr(attention_5_1_384_384_8_48_v_proj_re_rsc_radr),
      .we(attention_5_1_384_384_8_48_v_proj_re_rsc_we),
      .d(attention_5_1_384_384_8_48_v_proj_re_rsc_d),
      .wadr(attention_5_1_384_384_8_48_v_proj_re_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_v_proj_re_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_v_proj_re_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_9_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_q_proj_rsci
      (
      .clken(attention_5_1_384_384_8_48_q_proj_rsc_clken),
      .q(attention_5_1_384_384_8_48_q_proj_rsc_q),
      .re(attention_5_1_384_384_8_48_q_proj_rsc_re),
      .radr(attention_5_1_384_384_8_48_q_proj_rsc_radr),
      .we(attention_5_1_384_384_8_48_q_proj_rsc_we),
      .d(attention_5_1_384_384_8_48_q_proj_rsc_d),
      .wadr(attention_5_1_384_384_8_48_q_proj_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_q_proj_re_rsci_q_d),
      .q_d(attention_5_1_384_384_8_48_q_proj_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_q_proj_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_q_proj_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_q_proj_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_q_proj_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_q_proj_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_q_proj_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_10_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_k_proj_rsci
      (
      .clken(attention_5_1_384_384_8_48_k_proj_rsc_clken),
      .q(attention_5_1_384_384_8_48_k_proj_rsc_q),
      .re(attention_5_1_384_384_8_48_k_proj_rsc_re),
      .radr(attention_5_1_384_384_8_48_k_proj_rsc_radr),
      .we(attention_5_1_384_384_8_48_k_proj_rsc_we),
      .d(attention_5_1_384_384_8_48_k_proj_rsc_d),
      .wadr(attention_5_1_384_384_8_48_k_proj_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_k_proj_re_rsci_q_d),
      .q_d(attention_5_1_384_384_8_48_k_proj_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_k_proj_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_q_proj_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_k_proj_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_q_proj_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_q_proj_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_q_proj_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_11_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_v_proj_rsci
      (
      .clken(attention_5_1_384_384_8_48_v_proj_rsc_clken),
      .q(attention_5_1_384_384_8_48_v_proj_rsc_q),
      .re(attention_5_1_384_384_8_48_v_proj_rsc_re),
      .radr(attention_5_1_384_384_8_48_v_proj_rsc_radr),
      .we(attention_5_1_384_384_8_48_v_proj_rsc_we),
      .d(attention_5_1_384_384_8_48_v_proj_rsc_d),
      .wadr(attention_5_1_384_384_8_48_v_proj_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_v_proj_re_rsci_q_d),
      .q_d(attention_5_1_384_384_8_48_v_proj_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_v_proj_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_v_proj_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_v_proj_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_v_proj_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_v_proj_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_v_proj_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_12_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_q_embed_rsci
      (
      .clken(attention_5_1_384_384_8_48_q_embed_rsc_clken),
      .q(attention_5_1_384_384_8_48_q_embed_rsc_q),
      .re(attention_5_1_384_384_8_48_q_embed_rsc_re),
      .radr(attention_5_1_384_384_8_48_q_embed_rsc_radr),
      .we(attention_5_1_384_384_8_48_q_embed_rsc_we),
      .d(attention_5_1_384_384_8_48_q_embed_rsc_d),
      .wadr(attention_5_1_384_384_8_48_q_embed_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_q_embed_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_q_embed_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_q_embed_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_q_embed_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_q_embed_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_q_embed_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_q_embed_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_q_embed_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_13_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_k_embed_rsci
      (
      .clken(attention_5_1_384_384_8_48_k_embed_rsc_clken),
      .q(attention_5_1_384_384_8_48_k_embed_rsc_q),
      .re(attention_5_1_384_384_8_48_k_embed_rsc_re),
      .radr(attention_5_1_384_384_8_48_k_embed_rsc_radr),
      .we(attention_5_1_384_384_8_48_k_embed_rsc_we),
      .d(attention_5_1_384_384_8_48_k_embed_rsc_d),
      .wadr(attention_5_1_384_384_8_48_k_embed_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_k_embed_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_k_embed_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_k_embed_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_k_embed_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_k_embed_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_q_embed_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_q_embed_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_k_embed_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_14_12_40_2304_1_2304_40_1_gen attention_5_1_384_384_8_48_k_cache_upd_rsci
      (
      .clken(attention_5_1_384_384_8_48_k_cache_upd_rsc_clken),
      .q(attention_5_1_384_384_8_48_k_cache_upd_rsc_q),
      .re(attention_5_1_384_384_8_48_k_cache_upd_rsc_re),
      .radr(attention_5_1_384_384_8_48_k_cache_upd_rsc_radr),
      .we(attention_5_1_384_384_8_48_k_cache_upd_rsc_we),
      .d(attention_5_1_384_384_8_48_k_cache_upd_rsc_d),
      .wadr(attention_5_1_384_384_8_48_k_cache_upd_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_15_12_40_2304_1_2304_40_1_gen attention_5_1_384_384_8_48_v_cache_upd_rsci
      (
      .clken(attention_5_1_384_384_8_48_v_cache_upd_rsc_clken),
      .q(attention_5_1_384_384_8_48_v_cache_upd_rsc_q),
      .re(attention_5_1_384_384_8_48_v_cache_upd_rsc_re),
      .radr(attention_5_1_384_384_8_48_v_cache_upd_rsc_radr),
      .we(attention_5_1_384_384_8_48_v_cache_upd_rsc_we),
      .d(attention_5_1_384_384_8_48_v_cache_upd_rsc_d),
      .wadr(attention_5_1_384_384_8_48_v_cache_upd_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_16_12_40_2304_1_2304_40_1_gen attention_5_1_384_384_8_48_k_proj_transposed_rsci
      (
      .clken(attention_5_1_384_384_8_48_k_proj_transposed_rsc_clken),
      .q(attention_5_1_384_384_8_48_k_proj_transposed_rsc_q),
      .re(attention_5_1_384_384_8_48_k_proj_transposed_rsc_re),
      .radr(attention_5_1_384_384_8_48_k_proj_transposed_rsc_radr),
      .we(attention_5_1_384_384_8_48_k_proj_transposed_rsc_we),
      .d(attention_5_1_384_384_8_48_k_proj_transposed_rsc_d),
      .wadr(attention_5_1_384_384_8_48_k_proj_transposed_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_q_d),
      .q_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_q_embed_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_q_embed_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_17_6_40_48_1_48_40_1_gen attention_5_1_384_384_8_48_attn_weights_rsci
      (
      .clken(attention_5_1_384_384_8_48_attn_weights_rsc_clken),
      .q(attention_5_1_384_384_8_48_attn_weights_rsc_q),
      .re(attention_5_1_384_384_8_48_attn_weights_rsc_re),
      .radr(attention_5_1_384_384_8_48_attn_weights_rsc_radr),
      .we(attention_5_1_384_384_8_48_attn_weights_rsc_we),
      .d(attention_5_1_384_384_8_48_attn_weights_rsc_d),
      .wadr(attention_5_1_384_384_8_48_attn_weights_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_attn_weights_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_attn_weights_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_attn_weights_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_attn_weights_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_attn_weights_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_attn_weights_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_attn_weights_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_18_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_attn_output_rsci
      (
      .clken(attention_5_1_384_384_8_48_attn_output_rsc_clken),
      .q(attention_5_1_384_384_8_48_attn_output_rsc_q),
      .re(attention_5_1_384_384_8_48_attn_output_rsc_re),
      .radr(attention_5_1_384_384_8_48_attn_output_rsc_radr),
      .we(attention_5_1_384_384_8_48_attn_output_rsc_we),
      .d(attention_5_1_384_384_8_48_attn_output_rsc_d),
      .wadr(attention_5_1_384_384_8_48_attn_output_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_attn_output_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_attn_output_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_attn_output_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_attn_output_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_attn_output_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_attn_output_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_attn_output_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_attn_output_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_19_9_40_384_1_384_40_1_gen attention_5_1_384_384_8_48_attn_output_2D_rsci
      (
      .clken(attention_5_1_384_384_8_48_attn_output_2D_rsc_clken),
      .q(attention_5_1_384_384_8_48_attn_output_2D_rsc_q),
      .re(attention_5_1_384_384_8_48_attn_output_2D_rsc_re),
      .radr(attention_5_1_384_384_8_48_attn_output_2D_rsc_radr),
      .we(attention_5_1_384_384_8_48_attn_output_2D_rsc_we),
      .d(attention_5_1_384_384_8_48_attn_output_2D_rsc_d),
      .wadr(attention_5_1_384_384_8_48_attn_output_2D_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_20_9_8_384_1_384_8_1_gen attention_5_1_384_384_8_48_quantized_final_output_rsci
      (
      .clken(attention_5_1_384_384_8_48_quantized_final_output_rsc_clken),
      .q(attention_5_1_384_384_8_48_quantized_final_output_rsc_q),
      .re(attention_5_1_384_384_8_48_quantized_final_output_rsc_re),
      .radr(attention_5_1_384_384_8_48_quantized_final_output_rsc_radr),
      .we(attention_5_1_384_384_8_48_quantized_final_output_rsc_we),
      .d(attention_5_1_384_384_8_48_quantized_final_output_rsc_d),
      .wadr(attention_5_1_384_384_8_48_quantized_final_output_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d),
      .q_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d),
      .radr_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d),
      .re_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_iff),
      .wadr_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d),
      .we_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_21_9_40_384_1_384_40_1_gen apply_rotary_pos_emb_1_8_48_rotated_q_rsci
      (
      .clken(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_clken),
      .q(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_q),
      .re(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_re),
      .radr(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_radr),
      .we(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_we),
      .d(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_d),
      .wadr(apply_rotary_pos_emb_1_8_48_rotated_q_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d),
      .q_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d),
      .radr_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d),
      .re_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_iff),
      .wadr_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d),
      .we_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_iff)
    );
  dut_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_22_9_40_384_1_384_40_1_gen apply_rotary_pos_emb_1_8_48_rotated_k_rsci
      (
      .clken(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_clken),
      .q(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_q),
      .re(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_re),
      .radr(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_radr),
      .we(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_we),
      .d(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_d),
      .wadr(apply_rotary_pos_emb_1_8_48_rotated_k_rsc_wadr),
      .clken_d(input_rsci_clken_d),
      .d_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d),
      .q_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d),
      .radr_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d),
      .re_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_iff),
      .wadr_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d),
      .we_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_iff)
    );
  dut_core dut_core_inst (
      .clk(clk),
      .en(en),
      .rst(rst),
      .strm_in_rsc_dat(strm_in_rsc_dat),
      .strm_in_rsc_vld(strm_in_rsc_vld),
      .strm_in_rsc_rdy(strm_in_rsc_rdy),
      .strm_out_rsc_dat(strm_out_rsc_dat),
      .strm_out_rsc_vld(strm_out_rsc_vld),
      .strm_out_rsc_rdy(strm_out_rsc_rdy),
      .input_rsci_clken_d(input_rsci_clken_d),
      .input_rsci_d_d(input_rsci_d_d),
      .input_rsci_q_d(input_rsci_q_d),
      .input_rsci_radr_d(input_rsci_radr_d),
      .input_rsci_wadr_d(input_rsci_wadr_d),
      .output_rsci_d_d(output_rsci_d_d),
      .output_rsci_q_d(output_rsci_q_d),
      .output_rsci_radr_d(output_rsci_radr_d),
      .output_rsci_wadr_d(output_rsci_wadr_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_d_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_q_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_radr_d),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_wadr_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_d_d(attention_5_1_384_384_8_48_q_proj_re_rsci_d_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_q_d(attention_5_1_384_384_8_48_q_proj_re_rsci_q_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d(attention_5_1_384_384_8_48_q_proj_re_rsci_radr_d),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d(attention_5_1_384_384_8_48_q_proj_re_rsci_wadr_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_d_d(attention_5_1_384_384_8_48_k_proj_re_rsci_d_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_q_d(attention_5_1_384_384_8_48_k_proj_re_rsci_q_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d(attention_5_1_384_384_8_48_k_proj_re_rsci_radr_d),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d(attention_5_1_384_384_8_48_k_proj_re_rsci_wadr_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_d_d(attention_5_1_384_384_8_48_v_proj_re_rsci_d_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_q_d(attention_5_1_384_384_8_48_v_proj_re_rsci_q_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d(attention_5_1_384_384_8_48_v_proj_re_rsci_radr_d),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d(attention_5_1_384_384_8_48_v_proj_re_rsci_wadr_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_q_d(attention_5_1_384_384_8_48_q_proj_rsci_q_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_radr_d(attention_5_1_384_384_8_48_q_proj_rsci_radr_d),
      .attention_5_1_384_384_8_48_q_proj_rsci_wadr_d(attention_5_1_384_384_8_48_q_proj_rsci_wadr_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_q_d(attention_5_1_384_384_8_48_k_proj_rsci_q_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_radr_d(attention_5_1_384_384_8_48_k_proj_rsci_radr_d),
      .attention_5_1_384_384_8_48_k_proj_rsci_wadr_d(attention_5_1_384_384_8_48_k_proj_rsci_wadr_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_q_d(attention_5_1_384_384_8_48_v_proj_rsci_q_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_radr_d(attention_5_1_384_384_8_48_v_proj_rsci_radr_d),
      .attention_5_1_384_384_8_48_v_proj_rsci_wadr_d(attention_5_1_384_384_8_48_v_proj_rsci_wadr_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_d_d(attention_5_1_384_384_8_48_q_embed_rsci_d_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_q_d(attention_5_1_384_384_8_48_q_embed_rsci_q_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_radr_d(attention_5_1_384_384_8_48_q_embed_rsci_radr_d),
      .attention_5_1_384_384_8_48_q_embed_rsci_wadr_d(attention_5_1_384_384_8_48_q_embed_rsci_wadr_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_d_d(attention_5_1_384_384_8_48_k_embed_rsci_d_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_q_d(attention_5_1_384_384_8_48_k_embed_rsci_q_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_radr_d(attention_5_1_384_384_8_48_k_embed_rsci_radr_d),
      .attention_5_1_384_384_8_48_k_embed_rsci_wadr_d(attention_5_1_384_384_8_48_k_embed_rsci_wadr_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_d_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_radr_d),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d(attention_5_1_384_384_8_48_k_cache_upd_rsci_wadr_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_d_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_q_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_radr_d),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d(attention_5_1_384_384_8_48_v_cache_upd_rsci_wadr_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_q_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_radr_d),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d(attention_5_1_384_384_8_48_k_proj_transposed_rsci_wadr_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_d_d(attention_5_1_384_384_8_48_attn_weights_rsci_d_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_q_d(attention_5_1_384_384_8_48_attn_weights_rsci_q_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_radr_d(attention_5_1_384_384_8_48_attn_weights_rsci_radr_d),
      .attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d(attention_5_1_384_384_8_48_attn_weights_rsci_wadr_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_d_d(attention_5_1_384_384_8_48_attn_output_rsci_d_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_q_d(attention_5_1_384_384_8_48_attn_output_rsci_q_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_radr_d(attention_5_1_384_384_8_48_attn_output_rsci_radr_d),
      .attention_5_1_384_384_8_48_attn_output_rsci_wadr_d(attention_5_1_384_384_8_48_attn_output_rsci_wadr_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_d_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_q_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_radr_d),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d(attention_5_1_384_384_8_48_attn_output_2D_rsci_wadr_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_q_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_radr_d),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d(attention_5_1_384_384_8_48_quantized_final_output_rsci_wadr_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_d_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_q_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_radr_d),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_wadr_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_d_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_q_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_radr_d),
      .apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d(apply_rotary_pos_emb_1_8_48_rotated_k_rsci_wadr_d),
      .rms_norm_384_div_cmp_a(rms_norm_384_div_cmp_a),
      .rms_norm_384_div_cmp_b(rms_norm_384_div_cmp_b),
      .rms_norm_384_div_cmp_z(rms_norm_384_div_cmp_z),
      .input_rsci_re_d_pff(input_rsci_re_d_iff),
      .input_rsci_we_d_pff(input_rsci_we_d_iff),
      .output_rsci_re_d_pff(output_rsci_re_d_iff),
      .output_rsci_we_d_pff(output_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_pff(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_pff(attention_5_1_384_384_8_48_quantized_hidden_states_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_pff(attention_5_1_384_384_8_48_q_proj_re_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_pff(attention_5_1_384_384_8_48_q_proj_re_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_pff(attention_5_1_384_384_8_48_k_proj_re_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_pff(attention_5_1_384_384_8_48_v_proj_re_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_pff(attention_5_1_384_384_8_48_v_proj_re_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_q_proj_rsci_re_d_pff(attention_5_1_384_384_8_48_q_proj_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_q_proj_rsci_we_d_pff(attention_5_1_384_384_8_48_q_proj_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_v_proj_rsci_re_d_pff(attention_5_1_384_384_8_48_v_proj_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_v_proj_rsci_we_d_pff(attention_5_1_384_384_8_48_v_proj_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_q_embed_rsci_re_d_pff(attention_5_1_384_384_8_48_q_embed_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_q_embed_rsci_we_d_pff(attention_5_1_384_384_8_48_q_embed_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_k_embed_rsci_re_d_pff(attention_5_1_384_384_8_48_k_embed_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_pff(attention_5_1_384_384_8_48_k_cache_upd_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_pff(attention_5_1_384_384_8_48_k_cache_upd_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_pff(attention_5_1_384_384_8_48_v_cache_upd_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_pff(attention_5_1_384_384_8_48_k_proj_transposed_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_attn_weights_rsci_re_d_pff(attention_5_1_384_384_8_48_attn_weights_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_attn_weights_rsci_we_d_pff(attention_5_1_384_384_8_48_attn_weights_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_attn_output_rsci_re_d_pff(attention_5_1_384_384_8_48_attn_output_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_attn_output_rsci_we_d_pff(attention_5_1_384_384_8_48_attn_output_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_pff(attention_5_1_384_384_8_48_attn_output_2D_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_pff(attention_5_1_384_384_8_48_attn_output_2D_rsci_we_d_iff),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_pff(attention_5_1_384_384_8_48_quantized_final_output_rsci_re_d_iff),
      .attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_pff(attention_5_1_384_384_8_48_quantized_final_output_rsci_we_d_iff),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_pff(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_re_d_iff),
      .apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_pff(apply_rotary_pos_emb_1_8_48_rotated_q_rsci_we_d_iff)
    );
endmodule



