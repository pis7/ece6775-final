-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GEMM_3D_float is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v204_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v204_0_ce0 : OUT STD_LOGIC;
    v204_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v206_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v206_0_ce0 : OUT STD_LOGIC;
    v206_0_we0 : OUT STD_LOGIC;
    v206_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v206_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    k_proj_transposed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    k_proj_transposed_ce0 : OUT STD_LOGIC;
    k_proj_transposed_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GEMM_3D_float is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h4_fu_147_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h4_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln352_fu_183_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln352_reg_311 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln347_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln354_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln354_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln349_fu_219_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln349_reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln354_1_fu_225_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln354_1_reg_329 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln349_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v206_0_addr_reg_334 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln350_fu_249_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln350_reg_342 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln352_fu_259_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln352_reg_347 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln350_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln352_1_fu_290_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln352_1_reg_352 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v204_0_load_reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_proj_transposed_lo_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal v206_0_load_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v5_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal h4_0_reg_100 : STD_LOGIC_VECTOR (4 downto 0);
    signal j4_0_0_reg_111 : STD_LOGIC_VECTOR (2 downto 0);
    signal k3_0_0_reg_122 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sext_ln354_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln352_3_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln352_1_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_53_fu_153_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_fu_165_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln352_fu_161_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln352_1_fu_173_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln352_fu_177_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_56_fu_195_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_187_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln354_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln354_2_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln354_fu_233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln352_2_fu_255_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln352_fu_264_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_268_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_276_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln352_1_fu_284_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component attention_fadd_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fmul_32qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    attention_fadd_32pcA_U73 : component attention_fadd_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v206_0_load_reg_382,
        din1 => v_reg_377,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p2);

    attention_fmul_32qcK_U74 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v204_0_load_reg_367,
        din1 => k_proj_transposed_lo_reg_372,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    h4_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln349_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h4_0_reg_100 <= h4_reg_306;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h4_0_reg_100 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j4_0_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln350_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j4_0_0_reg_111 <= add_ln349_reg_324;
            elsif (((icmp_ln347_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j4_0_0_reg_111 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k3_0_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                k3_0_0_reg_122 <= add_ln350_reg_342;
            elsif (((icmp_ln349_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k3_0_0_reg_122 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln349_reg_324 <= add_ln349_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln350_reg_342 <= add_ln350_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln350_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln352_1_reg_352 <= add_ln352_1_fu_290_p2;
                add_ln352_reg_347 <= add_ln352_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h4_reg_306 <= h4_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_proj_transposed_lo_reg_372 <= k_proj_transposed_q0;
                v204_0_load_reg_367 <= v204_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln347_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln352_reg_311(13 downto 5) <= sext_ln352_fu_183_p1(13 downto 5);
                    sub_ln354_reg_316(7 downto 1) <= sub_ln354_fu_207_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln349_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                v206_0_addr_reg_334 <= sext_ln354_fu_238_p1(7 - 1 downto 0);
                    zext_ln354_1_reg_329(2 downto 0) <= zext_ln354_1_fu_225_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                v206_0_load_reg_382 <= v206_0_q0;
                v_reg_377 <= grp_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                v5_reg_387 <= grp_fu_133_p2;
            end if;
        end if;
    end process;
    sext_ln352_reg_311(4 downto 0) <= "00000";
    sub_ln354_reg_316(0) <= '0';
    zext_ln354_1_reg_329(14 downto 3) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln347_fu_141_p2, ap_CS_fsm_state3, icmp_ln349_fu_213_p2, ap_CS_fsm_state4, icmp_ln350_fu_243_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln347_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln349_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln350_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln349_fu_219_p2 <= std_logic_vector(unsigned(j4_0_0_reg_111) + unsigned(ap_const_lv3_1));
    add_ln350_fu_249_p2 <= std_logic_vector(unsigned(k3_0_0_reg_122) + unsigned(ap_const_lv7_1));
    add_ln352_1_fu_290_p2 <= std_logic_vector(unsigned(zext_ln354_1_reg_329) + unsigned(sub_ln352_1_fu_284_p2));
    add_ln352_fu_259_p2 <= std_logic_vector(unsigned(zext_ln352_2_fu_255_p1) + unsigned(sext_ln352_reg_311));
    add_ln354_fu_233_p2 <= std_logic_vector(unsigned(sub_ln354_reg_316) + unsigned(zext_ln354_2_fu_229_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln347_fu_141_p2)
    begin
        if ((((icmp_ln347_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln347_fu_141_p2)
    begin
        if (((icmp_ln347_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    h4_fu_147_p2 <= std_logic_vector(unsigned(h4_0_reg_100) + unsigned(ap_const_lv5_1));
    icmp_ln347_fu_141_p2 <= "1" when (h4_0_reg_100 = ap_const_lv5_10) else "0";
    icmp_ln349_fu_213_p2 <= "1" when (j4_0_0_reg_111 = ap_const_lv3_6) else "0";
    icmp_ln350_fu_243_p2 <= "1" when (k3_0_0_reg_122 = ap_const_lv7_60) else "0";
    k_proj_transposed_address0 <= zext_ln352_3_fu_299_p1(14 - 1 downto 0);

    k_proj_transposed_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            k_proj_transposed_ce0 <= ap_const_logic_1;
        else 
            k_proj_transposed_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_268_p3 <= (trunc_ln352_fu_264_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_276_p3 <= (add_ln352_fu_259_p2 & ap_const_lv1_0);
        sext_ln352_1_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln352_reg_347),64));

        sext_ln352_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln352_fu_177_p2),14));

        sext_ln354_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln354_fu_233_p2),64));

    sub_ln352_1_fu_284_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_268_p3) - unsigned(p_shl5_cast_fu_276_p3));
    sub_ln352_fu_177_p2 <= std_logic_vector(unsigned(zext_ln352_fu_161_p1) - unsigned(zext_ln352_1_fu_173_p1));
    sub_ln354_fu_207_p2 <= std_logic_vector(unsigned(tmp_55_fu_187_p3) - unsigned(zext_ln354_fu_203_p1));
    tmp_53_fu_153_p3 <= (h4_0_reg_100 & ap_const_lv7_0);
    tmp_54_fu_165_p3 <= (h4_0_reg_100 & ap_const_lv5_0);
    tmp_55_fu_187_p3 <= (h4_0_reg_100 & ap_const_lv3_0);
    tmp_56_fu_195_p3 <= (h4_0_reg_100 & ap_const_lv1_0);
    trunc_ln352_fu_264_p1 <= add_ln352_fu_259_p2(12 - 1 downto 0);
    v204_0_address0 <= sext_ln352_1_fu_295_p1(11 - 1 downto 0);

    v204_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v204_0_ce0 <= ap_const_logic_1;
        else 
            v204_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v206_0_address0 <= v206_0_addr_reg_334;

    v206_0_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            v206_0_ce0 <= ap_const_logic_1;
        else 
            v206_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v206_0_d0 <= v5_reg_387;

    v206_0_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            v206_0_we0 <= ap_const_logic_1;
        else 
            v206_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln352_1_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_165_p3),13));
    zext_ln352_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_0_0_reg_122),14));
    zext_ln352_3_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln352_1_reg_352),64));
    zext_ln352_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_153_p3),13));
    zext_ln354_1_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_0_reg_111),15));
    zext_ln354_2_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_0_reg_111),8));
    zext_ln354_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_195_p3),8));
end behav;
