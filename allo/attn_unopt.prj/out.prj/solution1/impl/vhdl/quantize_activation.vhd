-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantize_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v22_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v22_0_ce0 : OUT STD_LOGIC;
    v22_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v24_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v24_0_ce0 : OUT STD_LOGIC;
    v24_0_we0 : OUT STD_LOGIC;
    v24_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of quantize_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_3727C5AC : STD_LOGIC_VECTOR (31 downto 0) := "00110111001001111100010110101100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_BF000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln70_fu_190_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_reg_654 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln70_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln80_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln215_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln215_1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_1_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln97_fu_405_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln97_reg_704 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln98_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_reg_709 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln97_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln101_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln101_1_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_1_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal p_Result_s_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Val2_5_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln115_1_fu_643_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln115_1_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_phi_mux_v45_0_phi_fu_126_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal v45_0_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_0_reg_134 : STD_LOGIC_VECTOR (10 downto 0);
    signal j1_0_0_reg_145 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln71_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_169_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal bitcast_ln72_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_205_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_fu_215_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln72_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln73_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_1_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_265_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_fu_275_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln79_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_1_fu_292_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln79_3_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_2_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_1_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln215_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_355_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln215_fu_365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln215_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln101_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_419_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln101_fu_429_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln101_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln101_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_484_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_488_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_474_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_502_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_506_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_526_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_530_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_542_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_498_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_546_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_550_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_11_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_556_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_574_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_609_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln110_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln115_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln115_fu_629_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln115_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_169_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);

    component attention_fadd_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fmul_32qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fdiv_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fcmp_32sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    attention_fadd_32pcA_U33 : component attention_fadd_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v1_reg_719,
        din1 => grp_fu_156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    attention_fmul_32qcK_U34 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_178,
        din1 => v_reg_696,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    attention_fdiv_32rcU_U35 : component attention_fdiv_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => grp_fu_164_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    attention_fcmp_32sc4_U36 : component attention_fcmp_32sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_169_p0,
        din1 => grp_fu_169_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_169_opcode,
        dout => grp_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                j1_0_0_reg_145 <= add_ln97_reg_704;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j1_0_0_reg_145 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_0_reg_134 <= add_ln70_reg_654;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_134 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    v45_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v45_0_reg_122 <= select_ln80_fu_344_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v45_0_reg_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln70_reg_654 <= add_ln70_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln97_reg_704 <= add_ln97_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                icmp_ln101_1_reg_731 <= icmp_ln101_1_fu_439_p2;
                icmp_ln101_reg_726 <= icmp_ln101_fu_433_p2;
                tmp_3_reg_736 <= grp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln215_1_reg_681 <= icmp_ln215_1_fu_375_p2;
                icmp_ln215_reg_676 <= icmp_ln215_fu_369_p2;
                tmp_6_reg_686 <= grp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                p_Result_s_reg_751 <= p_Val2_s_fu_463_p1(31 downto 31);
                p_Val2_5_reg_756 <= p_Val2_5_fu_584_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_178 <= v22_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                select_ln115_1_reg_762 <= select_ln115_1_fu_643_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln74_reg_664 <= select_ln74_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                v1_reg_719 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                v_reg_696 <= grp_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                x_assign_reg_746 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    zext_ln98_reg_709(10 downto 0) <= zext_ln98_fu_411_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln98_reg_709(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln70_fu_184_p2, ap_CS_fsm_state24, icmp_ln97_fu_399_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln70_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln97_fu_399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln339_fu_506_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_502_p1));
    add_ln70_fu_190_p2 <= std_logic_vector(unsigned(j_0_0_reg_134) + unsigned(ap_const_lv11_1));
    add_ln97_fu_405_p2 <= std_logic_vector(unsigned(j1_0_0_reg_145) + unsigned(ap_const_lv11_1));
    and_ln101_fu_449_p2 <= (tmp_3_reg_736 and or_ln101_fu_445_p2);
    and_ln215_fu_385_p2 <= (tmp_6_reg_686 and or_ln215_fu_381_p2);
    and_ln72_fu_237_p2 <= (or_ln72_fu_231_p2 and grp_fu_169_p2);
    and_ln79_1_fu_338_p2 <= (grp_fu_169_p2 and and_ln79_fu_332_p2);
    and_ln79_fu_332_p2 <= (or_ln79_fu_308_p2 and or_ln79_1_fu_326_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24, icmp_ln97_fu_399_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln97_fu_399_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_v45_0_phi_fu_126_p4 <= v45_0_reg_122;

    ap_ready_assign_proc : process(ap_CS_fsm_state24, icmp_ln97_fu_399_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln97_fu_399_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= v_reg_696;
    bitcast_ln101_fu_416_p1 <= v1_reg_719;
    bitcast_ln215_fu_351_p1 <= v45_0_reg_122;
    bitcast_ln72_fu_201_p1 <= reg_178;
    bitcast_ln73_fu_249_p1 <= xor_ln73_fu_243_p2;
    bitcast_ln79_1_fu_279_p1 <= select_ln74_reg_664;
    bitcast_ln79_fu_261_p1 <= v45_0_reg_122;
    grp_fu_156_p1 <= 
        ap_const_lv32_3F000000 when (and_ln101_fu_449_p2(0) = '1') else 
        ap_const_lv32_BF000000;
    grp_fu_164_p1 <= 
        ap_const_lv32_3727C5AC when (and_ln215_fu_385_p2(0) = '1') else 
        v45_0_reg_122;

    grp_fu_169_opcode_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln70_fu_184_p2, ap_CS_fsm_state5, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_169_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln70_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_169_opcode <= ap_const_lv5_4;
        else 
            grp_fu_169_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_169_p0_assign_proc : process(v22_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state2, v1_reg_719, ap_phi_mux_v45_0_phi_fu_126_p4, v45_0_reg_122, ap_CS_fsm_state5, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_169_p0 <= v1_reg_719;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_169_p0 <= v45_0_reg_122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_169_p0 <= v22_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_169_p0 <= ap_phi_mux_v45_0_phi_fu_126_p4;
        else 
            grp_fu_169_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_169_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, select_ln74_reg_664, ap_CS_fsm_state5, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_169_p1 <= select_ln74_reg_664;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_169_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_169_p1 <= ap_const_lv32_3727C5AC;
        else 
            grp_fu_169_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln101_1_fu_439_p2 <= "1" when (trunc_ln101_fu_429_p1 = ap_const_lv23_0) else "0";
    icmp_ln101_fu_433_p2 <= "0" when (tmp_2_fu_419_p4 = ap_const_lv8_FF) else "1";
    icmp_ln110_fu_603_p2 <= "1" when (signed(p_Val2_6_fu_597_p3) < signed(ap_const_lv32_FFFFFF80)) else "0";
    icmp_ln112_fu_619_p2 <= "1" when (signed(tmp_12_fu_609_p4) > signed(ap_const_lv25_0)) else "0";
    icmp_ln215_1_fu_375_p2 <= "1" when (trunc_ln215_fu_365_p1 = ap_const_lv23_0) else "0";
    icmp_ln215_fu_369_p2 <= "0" when (tmp_5_fu_355_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_fu_184_p2 <= "1" when (j_0_0_reg_134 = ap_const_lv11_600) else "0";
    icmp_ln72_1_fu_225_p2 <= "1" when (trunc_ln72_fu_215_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_fu_219_p2 <= "0" when (tmp_7_fu_205_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_1_fu_302_p2 <= "1" when (trunc_ln79_fu_275_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_2_fu_314_p2 <= "0" when (tmp_s_fu_282_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_3_fu_320_p2 <= "1" when (trunc_ln79_1_fu_292_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_fu_296_p2 <= "0" when (tmp_9_fu_265_p4 = ap_const_lv8_FF) else "1";
    icmp_ln97_fu_399_p2 <= "1" when (j1_0_0_reg_145 = ap_const_lv11_600) else "0";
    isNeg_fu_512_p3 <= add_ln339_fu_506_p2(8 downto 8);
    mantissa_V_fu_488_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_484_p1) & ap_const_lv1_0);
    or_ln101_fu_445_p2 <= (icmp_ln101_reg_726 or icmp_ln101_1_reg_731);
    or_ln115_fu_637_p2 <= (icmp_ln112_fu_619_p2 or icmp_ln110_fu_603_p2);
    or_ln215_fu_381_p2 <= (icmp_ln215_reg_676 or icmp_ln215_1_reg_681);
    or_ln72_fu_231_p2 <= (icmp_ln72_fu_219_p2 or icmp_ln72_1_fu_225_p2);
    or_ln79_1_fu_326_p2 <= (icmp_ln79_3_fu_320_p2 or icmp_ln79_2_fu_314_p2);
    or_ln79_fu_308_p2 <= (icmp_ln79_fu_296_p2 or icmp_ln79_1_fu_302_p2);
    p_Val2_5_fu_584_p3 <= 
        zext_ln662_fu_570_p1 when (isNeg_fu_512_p3(0) = '1') else 
        tmp_10_fu_574_p4;
    p_Val2_6_fu_597_p3 <= 
        result_V_1_fu_592_p2 when (p_Result_s_reg_751(0) = '1') else 
        p_Val2_5_reg_756;
    p_Val2_s_fu_463_p1 <= x_assign_reg_746;
    r_V_1_fu_556_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_498_p1),to_integer(unsigned('0' & zext_ln1287_fu_546_p1(31-1 downto 0)))));
    r_V_fu_550_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_488_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_542_p1(25-1 downto 0)))));
    result_V_1_fu_592_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_756));
    select_ln115_1_fu_643_p3 <= 
        select_ln115_fu_629_p3 when (or_ln115_fu_637_p2(0) = '1') else 
        trunc_ln115_fu_625_p1;
    select_ln115_fu_629_p3 <= 
        ap_const_lv8_80 when (icmp_ln110_fu_603_p2(0) = '1') else 
        ap_const_lv8_7F;
    select_ln74_fu_253_p3 <= 
        reg_178 when (and_ln72_fu_237_p2(0) = '1') else 
        bitcast_ln73_fu_249_p1;
    select_ln80_fu_344_p3 <= 
        select_ln74_reg_664 when (and_ln79_1_fu_338_p2(0) = '1') else 
        v45_0_reg_122;
        sext_ln1311_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_530_p3),32));

        sext_ln1311_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_530_p3),25));

        sext_ln1311_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_520_p2),9));

    sub_ln1311_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_474_p4));
    tmp_10_fu_574_p4 <= r_V_1_fu_556_p2(55 downto 24);
    tmp_11_fu_562_p3 <= r_V_fu_550_p2(24 downto 24);
    tmp_12_fu_609_p4 <= p_Val2_6_fu_597_p3(31 downto 7);
    tmp_2_fu_419_p4 <= bitcast_ln101_fu_416_p1(30 downto 23);
    tmp_5_fu_355_p4 <= bitcast_ln215_fu_351_p1(30 downto 23);
    tmp_7_fu_205_p4 <= bitcast_ln72_fu_201_p1(30 downto 23);
    tmp_9_fu_265_p4 <= bitcast_ln79_fu_261_p1(30 downto 23);
    tmp_V_1_fu_484_p1 <= p_Val2_s_fu_463_p1(23 - 1 downto 0);
    tmp_V_fu_474_p4 <= p_Val2_s_fu_463_p1(30 downto 23);
    tmp_s_fu_282_p4 <= bitcast_ln79_1_fu_279_p1(30 downto 23);
    trunc_ln101_fu_429_p1 <= bitcast_ln101_fu_416_p1(23 - 1 downto 0);
    trunc_ln115_fu_625_p1 <= p_Val2_6_fu_597_p3(8 - 1 downto 0);
    trunc_ln215_fu_365_p1 <= bitcast_ln215_fu_351_p1(23 - 1 downto 0);
    trunc_ln72_fu_215_p1 <= bitcast_ln72_fu_201_p1(23 - 1 downto 0);
    trunc_ln79_1_fu_292_p1 <= bitcast_ln79_1_fu_279_p1(23 - 1 downto 0);
    trunc_ln79_fu_275_p1 <= bitcast_ln79_fu_261_p1(23 - 1 downto 0);
    ush_fu_530_p3 <= 
        sext_ln1311_fu_526_p1 when (isNeg_fu_512_p3(0) = '1') else 
        add_ln339_fu_506_p2;

    v22_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24, zext_ln98_fu_411_p1, zext_ln71_fu_196_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            v22_0_address0 <= zext_ln98_fu_411_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v22_0_address0 <= zext_ln71_fu_196_p1(11 - 1 downto 0);
        else 
            v22_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    v22_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            v22_0_ce0 <= ap_const_logic_1;
        else 
            v22_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_address0 <= zext_ln98_reg_709(11 - 1 downto 0);

    v24_0_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            v24_0_ce0 <= ap_const_logic_1;
        else 
            v24_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_d0 <= select_ln115_1_reg_762;

    v24_0_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            v24_0_we0 <= ap_const_logic_1;
        else 
            v24_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln73_fu_243_p2 <= (bitcast_ln72_fu_201_p1 xor ap_const_lv32_80000000);
    zext_ln1287_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_538_p1),79));
    zext_ln339_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_474_p4),9));
    zext_ln662_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_562_p3),32));
    zext_ln682_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_488_p4),79));
    zext_ln71_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_134),64));
    zext_ln98_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_0_reg_145),64));
end behav;
