// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cache_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v181_V_address0,
        v181_V_ce0,
        v181_V_q0,
        v182_0_V_address0,
        v182_0_V_ce0,
        v182_0_V_q0,
        v183_V_address0,
        v183_V_ce0,
        v183_V_we0,
        v183_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] v181_V_address0;
output   v181_V_ce0;
input  [31:0] v181_V_q0;
output  [10:0] v182_0_V_address0;
output   v182_0_V_ce0;
input  [31:0] v182_0_V_q0;
output  [13:0] v183_V_address0;
output   v183_V_ce0;
output   v183_V_we0;
output  [31:0] v183_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v181_V_ce0;
reg v182_0_V_ce0;
reg[13:0] v183_V_address0;
reg v183_V_ce0;
reg v183_V_we0;
reg[31:0] v183_V_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i4_fu_181_p2;
reg   [4:0] i4_reg_478;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln305_fu_203_p2;
reg   [7:0] add_ln305_reg_483;
wire   [0:0] icmp_ln299_fu_175_p2;
wire   [11:0] sub_ln310_fu_229_p2;
reg   [11:0] sub_ln310_reg_488;
wire  signed [9:0] sext_ln203_fu_265_p1;
reg  signed [9:0] sext_ln203_reg_493;
wire   [14:0] add_ln203_2_fu_299_p2;
reg   [14:0] add_ln203_2_reg_498;
wire   [2:0] j3_fu_311_p2;
reg   [2:0] j3_reg_506;
wire    ap_CS_fsm_state3;
wire   [0:0] v187_fu_317_p2;
reg   [0:0] v187_reg_511;
wire   [0:0] icmp_ln300_fu_305_p2;
wire   [13:0] sub_ln305_fu_360_p2;
reg   [13:0] sub_ln305_reg_515;
wire   [14:0] sub_ln203_2_fu_391_p2;
reg   [14:0] sub_ln203_2_reg_520;
wire   [6:0] k1_fu_403_p2;
reg   [6:0] k1_reg_528;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln304_fu_397_p2;
wire   [14:0] add_ln203_5_fu_427_p2;
reg   [14:0] add_ln203_5_reg_538;
wire   [6:0] k2_fu_438_p2;
reg   [6:0] k2_reg_546;
wire   [0:0] icmp_ln309_fu_432_p2;
wire   [14:0] add_ln203_4_fu_462_p2;
reg   [14:0] add_ln203_4_reg_556;
reg   [4:0] i4_0_reg_131;
reg   [2:0] val_assign_reg_142;
reg   [6:0] k1_0_reg_153;
wire    ap_CS_fsm_state5;
reg   [6:0] k2_0_reg_164;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln305_7_fu_422_p1;
wire  signed [63:0] sext_ln310_fu_457_p1;
wire   [63:0] zext_ln203_6_fu_467_p1;
wire  signed [63:0] sext_ln203_1_fu_471_p1;
wire   [6:0] tmp_s_fu_191_p3;
wire   [7:0] zext_ln305_fu_187_p1;
wire   [7:0] zext_ln305_1_fu_199_p1;
wire   [9:0] tmp_20_fu_217_p3;
wire   [11:0] tmp_19_fu_209_p3;
wire   [11:0] zext_ln310_fu_225_p1;
wire   [7:0] tmp_21_fu_235_p3;
wire   [5:0] tmp_22_fu_247_p3;
wire   [8:0] zext_ln203_fu_243_p1;
wire   [8:0] zext_ln203_3_fu_255_p1;
wire   [8:0] sub_ln203_fu_259_p2;
wire   [13:0] tmp_23_fu_269_p3;
wire   [10:0] tmp_24_fu_281_p3;
wire   [14:0] zext_ln203_5_fu_289_p1;
wire   [14:0] zext_ln203_4_fu_277_p1;
wire   [14:0] add_ln203_fu_293_p2;
wire   [7:0] zext_ln305_3_fu_327_p1;
wire   [7:0] add_ln305_1_fu_331_p2;
wire   [6:0] trunc_ln305_fu_336_p1;
wire   [12:0] tmp_93_fu_348_p3;
wire   [13:0] p_shl_cast_fu_340_p3;
wire   [13:0] zext_ln305_4_fu_356_p1;
wire   [9:0] zext_ln305_2_fu_323_p1;
wire   [9:0] add_ln203_3_fu_366_p2;
wire   [7:0] trunc_ln203_fu_371_p1;
wire   [14:0] p_shl8_cast_fu_375_p3;
wire   [14:0] p_shl9_cast_fu_383_p3;
wire   [13:0] zext_ln305_6_fu_413_p1;
wire   [13:0] add_ln305_2_fu_417_p2;
wire   [14:0] zext_ln305_5_fu_409_p1;
wire   [11:0] zext_ln310_2_fu_448_p1;
wire   [11:0] add_ln310_fu_452_p2;
wire   [14:0] zext_ln310_1_fu_444_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i4_0_reg_131 <= i4_reg_478;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i4_0_reg_131 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_305_p2 == 1'd0) & (v187_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k1_0_reg_153 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k1_0_reg_153 <= k1_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((v187_fu_317_p2 == 1'd1) & (icmp_ln300_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k2_0_reg_164 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k2_0_reg_164 <= k2_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((icmp_ln304_fu_397_p2 == 1'd1) & (v187_reg_511 == 1'd0)) | ((v187_reg_511 == 1'd1) & (icmp_ln309_fu_432_p2 == 1'd1))))) begin
        val_assign_reg_142 <= j3_reg_506;
    end else if (((icmp_ln299_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_reg_142 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln299_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln203_2_reg_498[14 : 6] <= add_ln203_2_fu_299_p2[14 : 6];
        add_ln305_reg_483 <= add_ln305_fu_203_p2;
        sext_ln203_reg_493[9 : 1] <= sext_ln203_fu_265_p1[9 : 1];
        sub_ln310_reg_488[11 : 5] <= sub_ln310_fu_229_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((v187_reg_511 == 1'd1) & (icmp_ln309_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_4_reg_556 <= add_ln203_4_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_fu_397_p2 == 1'd0) & (v187_reg_511 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_5_reg_538 <= add_ln203_5_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i4_reg_478 <= i4_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j3_reg_506 <= j3_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((v187_reg_511 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k1_reg_528 <= k1_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((v187_reg_511 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k2_reg_546 <= k2_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_305_p2 == 1'd0) & (v187_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln203_2_reg_520[14 : 5] <= sub_ln203_2_fu_391_p2[14 : 5];
        sub_ln305_reg_515[13 : 5] <= sub_ln305_fu_360_p2[13 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v187_reg_511 <= v187_fu_317_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln299_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln299_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v181_V_ce0 = 1'b1;
    end else begin
        v181_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v182_0_V_ce0 = 1'b1;
    end else begin
        v182_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v183_V_address0 = sext_ln203_1_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v183_V_address0 = zext_ln203_6_fu_467_p1;
    end else begin
        v183_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        v183_V_ce0 = 1'b1;
    end else begin
        v183_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v183_V_d0 = v182_0_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v183_V_d0 = v181_V_q0;
    end else begin
        v183_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        v183_V_we0 = 1'b1;
    end else begin
        v183_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln299_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln300_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (((icmp_ln304_fu_397_p2 == 1'd1) & (v187_reg_511 == 1'd0)) | ((v187_reg_511 == 1'd1) & (icmp_ln309_fu_432_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((v187_reg_511 == 1'd1) & (icmp_ln309_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_2_fu_299_p2 = (add_ln203_fu_293_p2 + 15'd480);

assign add_ln203_3_fu_366_p2 = ($signed(sext_ln203_reg_493) + $signed(zext_ln305_2_fu_323_p1));

assign add_ln203_4_fu_462_p2 = (add_ln203_2_reg_498 + zext_ln310_1_fu_444_p1);

assign add_ln203_5_fu_427_p2 = (sub_ln203_2_reg_520 + zext_ln305_5_fu_409_p1);

assign add_ln203_fu_293_p2 = (zext_ln203_5_fu_289_p1 + zext_ln203_4_fu_277_p1);

assign add_ln305_1_fu_331_p2 = (add_ln305_reg_483 + zext_ln305_3_fu_327_p1);

assign add_ln305_2_fu_417_p2 = (sub_ln305_reg_515 + zext_ln305_6_fu_413_p1);

assign add_ln305_fu_203_p2 = (zext_ln305_fu_187_p1 + zext_ln305_1_fu_199_p1);

assign add_ln310_fu_452_p2 = (sub_ln310_reg_488 + zext_ln310_2_fu_448_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i4_fu_181_p2 = (i4_0_reg_131 + 5'd1);

assign icmp_ln299_fu_175_p2 = ((i4_0_reg_131 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln300_fu_305_p2 = ((val_assign_reg_142 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_397_p2 = ((k1_0_reg_153 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln309_fu_432_p2 = ((k2_0_reg_164 == 7'd96) ? 1'b1 : 1'b0);

assign j3_fu_311_p2 = (val_assign_reg_142 + 3'd1);

assign k1_fu_403_p2 = (k1_0_reg_153 + 7'd1);

assign k2_fu_438_p2 = (k2_0_reg_164 + 7'd1);

assign p_shl8_cast_fu_375_p3 = {{trunc_ln203_fu_371_p1}, {7'd0}};

assign p_shl9_cast_fu_383_p3 = {{add_ln203_3_fu_366_p2}, {5'd0}};

assign p_shl_cast_fu_340_p3 = {{trunc_ln305_fu_336_p1}, {7'd0}};

assign sext_ln203_1_fu_471_p1 = $signed(add_ln203_4_reg_556);

assign sext_ln203_fu_265_p1 = $signed(sub_ln203_fu_259_p2);

assign sext_ln310_fu_457_p1 = $signed(add_ln310_fu_452_p2);

assign sub_ln203_2_fu_391_p2 = (p_shl8_cast_fu_375_p3 - p_shl9_cast_fu_383_p3);

assign sub_ln203_fu_259_p2 = (zext_ln203_fu_243_p1 - zext_ln203_3_fu_255_p1);

assign sub_ln305_fu_360_p2 = (p_shl_cast_fu_340_p3 - zext_ln305_4_fu_356_p1);

assign sub_ln310_fu_229_p2 = (tmp_19_fu_209_p3 - zext_ln310_fu_225_p1);

assign tmp_19_fu_209_p3 = {{i4_0_reg_131}, {7'd0}};

assign tmp_20_fu_217_p3 = {{i4_0_reg_131}, {5'd0}};

assign tmp_21_fu_235_p3 = {{i4_0_reg_131}, {3'd0}};

assign tmp_22_fu_247_p3 = {{i4_0_reg_131}, {1'd0}};

assign tmp_23_fu_269_p3 = {{i4_0_reg_131}, {9'd0}};

assign tmp_24_fu_281_p3 = {{i4_0_reg_131}, {6'd0}};

assign tmp_93_fu_348_p3 = {{add_ln305_1_fu_331_p2}, {5'd0}};

assign tmp_s_fu_191_p3 = {{i4_0_reg_131}, {2'd0}};

assign trunc_ln203_fu_371_p1 = add_ln203_3_fu_366_p2[7:0];

assign trunc_ln305_fu_336_p1 = add_ln305_1_fu_331_p2[6:0];

assign v181_V_address0 = zext_ln305_7_fu_422_p1;

assign v182_0_V_address0 = sext_ln310_fu_457_p1;

assign v187_fu_317_p2 = ((val_assign_reg_142 == 3'd5) ? 1'b1 : 1'b0);

assign zext_ln203_3_fu_255_p1 = tmp_22_fu_247_p3;

assign zext_ln203_4_fu_277_p1 = tmp_23_fu_269_p3;

assign zext_ln203_5_fu_289_p1 = tmp_24_fu_281_p3;

assign zext_ln203_6_fu_467_p1 = add_ln203_5_reg_538;

assign zext_ln203_fu_243_p1 = tmp_21_fu_235_p3;

assign zext_ln305_1_fu_199_p1 = tmp_s_fu_191_p3;

assign zext_ln305_2_fu_323_p1 = val_assign_reg_142;

assign zext_ln305_3_fu_327_p1 = val_assign_reg_142;

assign zext_ln305_4_fu_356_p1 = tmp_93_fu_348_p3;

assign zext_ln305_5_fu_409_p1 = k1_0_reg_153;

assign zext_ln305_6_fu_413_p1 = k1_0_reg_153;

assign zext_ln305_7_fu_422_p1 = add_ln305_2_fu_417_p2;

assign zext_ln305_fu_187_p1 = i4_0_reg_131;

assign zext_ln310_1_fu_444_p1 = k2_0_reg_164;

assign zext_ln310_2_fu_448_p1 = k2_0_reg_164;

assign zext_ln310_fu_225_p1 = tmp_20_fu_217_p3;

always @ (posedge ap_clk) begin
    sub_ln310_reg_488[4:0] <= 5'b00000;
    sext_ln203_reg_493[0] <= 1'b0;
    add_ln203_2_reg_498[5:0] <= 6'b100000;
    sub_ln305_reg_515[4:0] <= 5'b00000;
    sub_ln203_2_reg_520[4:0] <= 5'b00000;
end

endmodule //cache_update
