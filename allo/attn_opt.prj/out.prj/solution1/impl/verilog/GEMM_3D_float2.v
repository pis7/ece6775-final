// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v240_0_V_address0,
        v240_0_V_ce0,
        v240_0_V_q0,
        v241_V_address0,
        v241_V_ce0,
        v241_V_q0,
        v242_0_V_address0,
        v242_0_V_ce0,
        v242_0_V_we0,
        v242_0_V_d0,
        v242_0_V_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] v240_0_V_address0;
output   v240_0_V_ce0;
input  [31:0] v240_0_V_q0;
output  [13:0] v241_V_address0;
output   v241_V_ce0;
input  [31:0] v241_V_q0;
output  [10:0] v242_0_V_address0;
output   v242_0_V_ce0;
output   v242_0_V_we0;
output  [31:0] v242_0_V_d0;
input  [31:0] v242_0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v240_0_V_ce0;
reg v241_V_ce0;
reg v242_0_V_ce0;
reg v242_0_V_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] h5_fu_145_p2;
reg   [4:0] h5_reg_331;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln419_fu_181_p1;
reg  signed [9:0] sext_ln419_reg_336;
wire   [0:0] icmp_ln415_fu_139_p2;
wire   [11:0] sub_ln422_fu_205_p2;
reg   [11:0] sub_ln422_reg_341;
wire   [6:0] add_ln417_fu_217_p2;
reg   [6:0] add_ln417_reg_349;
wire    ap_CS_fsm_state3;
wire   [14:0] zext_ln422_1_fu_223_p1;
reg   [14:0] zext_ln422_1_reg_354;
wire   [0:0] icmp_ln417_fu_211_p2;
reg   [10:0] v242_0_V_addr_reg_359;
wire   [2:0] add_ln418_fu_247_p2;
reg   [2:0] add_ln418_reg_367;
wire    ap_CS_fsm_state4;
wire  signed [9:0] add_ln419_fu_257_p2;
reg  signed [9:0] add_ln419_reg_372;
wire   [0:0] icmp_ln418_fu_241_p2;
wire   [14:0] add_ln420_fu_288_p2;
reg   [14:0] add_ln420_reg_377;
wire    ap_CS_fsm_state5;
reg   [31:0] v240_0_V_load_reg_392;
wire    ap_CS_fsm_state6;
reg   [31:0] v241_V_load_reg_397;
reg   [31:0] trunc_ln_reg_402;
wire    ap_CS_fsm_state7;
reg   [31:0] v242_0_V_load_reg_407;
reg   [4:0] h5_0_reg_106;
reg   [6:0] j8_0_0_reg_117;
reg   [2:0] k8_0_0_reg_128;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln422_fu_236_p1;
wire  signed [63:0] sext_ln419_1_fu_293_p1;
wire   [63:0] zext_ln420_fu_297_p1;
wire   [7:0] tmp_48_fu_151_p3;
wire   [5:0] tmp_49_fu_163_p3;
wire   [8:0] zext_ln419_fu_159_p1;
wire   [8:0] zext_ln419_1_fu_171_p1;
wire   [8:0] sub_ln419_fu_175_p2;
wire   [9:0] tmp_51_fu_193_p3;
wire   [11:0] tmp_50_fu_185_p3;
wire   [11:0] zext_ln422_fu_201_p1;
wire   [11:0] zext_ln422_2_fu_227_p1;
wire   [11:0] add_ln422_fu_231_p2;
wire   [9:0] zext_ln419_2_fu_253_p1;
wire   [7:0] trunc_ln420_fu_262_p1;
wire   [14:0] p_shl4_cast_fu_266_p3;
wire   [14:0] p_shl5_cast_fu_274_p3;
wire   [14:0] sub_ln420_fu_282_p2;
wire  signed [31:0] mul_ln1118_fu_307_p0;
wire  signed [31:0] mul_ln1118_fu_307_p1;
wire   [43:0] mul_ln1118_fu_307_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln417_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h5_0_reg_106 <= h5_reg_331;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h5_0_reg_106 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln418_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j8_0_0_reg_117 <= add_ln417_reg_349;
    end else if (((icmp_ln415_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j8_0_0_reg_117 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k8_0_0_reg_128 <= add_ln418_reg_367;
    end else if (((icmp_ln417_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k8_0_0_reg_128 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln417_reg_349 <= add_ln417_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln418_reg_367 <= add_ln418_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln418_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln419_reg_372 <= add_ln419_fu_257_p2;
        add_ln420_reg_377 <= add_ln420_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h5_reg_331 <= h5_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln415_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln419_reg_336[9 : 1] <= sext_ln419_fu_181_p1[9 : 1];
        sub_ln422_reg_341[11 : 5] <= sub_ln422_fu_205_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln_reg_402 <= {{mul_ln1118_fu_307_p2[43:12]}};
        v242_0_V_load_reg_407 <= v242_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v240_0_V_load_reg_392 <= v240_0_V_q0;
        v241_V_load_reg_397 <= v241_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln417_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v242_0_V_addr_reg_359 <= sext_ln422_fu_236_p1;
        zext_ln422_1_reg_354[6 : 0] <= zext_ln422_1_fu_223_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln415_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln415_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v240_0_V_ce0 = 1'b1;
    end else begin
        v240_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v241_V_ce0 = 1'b1;
    end else begin
        v241_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        v242_0_V_ce0 = 1'b1;
    end else begin
        v242_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v242_0_V_we0 = 1'b1;
    end else begin
        v242_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln415_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln417_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln418_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln417_fu_217_p2 = (j8_0_0_reg_117 + 7'd1);

assign add_ln418_fu_247_p2 = (k8_0_0_reg_128 + 3'd1);

assign add_ln419_fu_257_p2 = ($signed(zext_ln419_2_fu_253_p1) + $signed(sext_ln419_reg_336));

assign add_ln420_fu_288_p2 = (zext_ln422_1_reg_354 + sub_ln420_fu_282_p2);

assign add_ln422_fu_231_p2 = (sub_ln422_reg_341 + zext_ln422_2_fu_227_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign h5_fu_145_p2 = (h5_0_reg_106 + 5'd1);

assign icmp_ln415_fu_139_p2 = ((h5_0_reg_106 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln417_fu_211_p2 = ((j8_0_0_reg_117 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln418_fu_241_p2 = ((k8_0_0_reg_128 == 3'd6) ? 1'b1 : 1'b0);

assign mul_ln1118_fu_307_p0 = v240_0_V_load_reg_392;

assign mul_ln1118_fu_307_p1 = v241_V_load_reg_397;

assign mul_ln1118_fu_307_p2 = ($signed(mul_ln1118_fu_307_p0) * $signed(mul_ln1118_fu_307_p1));

assign p_shl4_cast_fu_266_p3 = {{trunc_ln420_fu_262_p1}, {7'd0}};

assign p_shl5_cast_fu_274_p3 = {{add_ln419_fu_257_p2}, {5'd0}};

assign sext_ln419_1_fu_293_p1 = add_ln419_reg_372;

assign sext_ln419_fu_181_p1 = $signed(sub_ln419_fu_175_p2);

assign sext_ln422_fu_236_p1 = $signed(add_ln422_fu_231_p2);

assign sub_ln419_fu_175_p2 = (zext_ln419_fu_159_p1 - zext_ln419_1_fu_171_p1);

assign sub_ln420_fu_282_p2 = (p_shl4_cast_fu_266_p3 - p_shl5_cast_fu_274_p3);

assign sub_ln422_fu_205_p2 = (tmp_50_fu_185_p3 - zext_ln422_fu_201_p1);

assign tmp_48_fu_151_p3 = {{h5_0_reg_106}, {3'd0}};

assign tmp_49_fu_163_p3 = {{h5_0_reg_106}, {1'd0}};

assign tmp_50_fu_185_p3 = {{h5_0_reg_106}, {7'd0}};

assign tmp_51_fu_193_p3 = {{h5_0_reg_106}, {5'd0}};

assign trunc_ln420_fu_262_p1 = add_ln419_fu_257_p2[7:0];

assign v240_0_V_address0 = sext_ln419_1_fu_293_p1;

assign v241_V_address0 = zext_ln420_fu_297_p1;

assign v242_0_V_address0 = v242_0_V_addr_reg_359;

assign v242_0_V_d0 = (v242_0_V_load_reg_407 + trunc_ln_reg_402);

assign zext_ln419_1_fu_171_p1 = tmp_49_fu_163_p3;

assign zext_ln419_2_fu_253_p1 = k8_0_0_reg_128;

assign zext_ln419_fu_159_p1 = tmp_48_fu_151_p3;

assign zext_ln420_fu_297_p1 = add_ln420_reg_377;

assign zext_ln422_1_fu_223_p1 = j8_0_0_reg_117;

assign zext_ln422_2_fu_227_p1 = j8_0_0_reg_117;

assign zext_ln422_fu_201_p1 = tmp_51_fu_193_p3;

always @ (posedge ap_clk) begin
    sext_ln419_reg_336[0] <= 1'b0;
    sub_ln422_reg_341[4:0] <= 5'b00000;
    zext_ln422_1_reg_354[14:7] <= 8'b00000000;
end

endmodule //GEMM_3D_float2
