-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v213_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v213_0_V_ce0 : OUT STD_LOGIC;
    v213_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v214_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v214_0_V_ce0 : OUT STD_LOGIC;
    v214_0_V_we0 : OUT STD_LOGIC;
    v214_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v214_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2B7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101101111110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i7_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i7_reg_482 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln370_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln370_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln367_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln369_fu_295_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln369_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln370_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln370_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln369_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i8_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i8_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln380_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln380_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln375_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln379_fu_359_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln379_reg_528 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln379_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln383_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln390_fu_399_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln390_reg_546 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal v214_0_V_addr_2_reg_551 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln390_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1148_fu_419_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln1148_reg_556 : STD_LOGIC_VECTOR (43 downto 0);
    signal sub_ln703_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln703_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln703_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_pow_32_20_s_fu_223_ap_ready : STD_LOGIC;
    signal grp_pow_32_20_s_fu_223_ap_done : STD_LOGIC;
    signal add_ln401_fu_441_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln401_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal v214_0_V_addr_3_reg_579 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln401_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_pow_32_20_s_fu_223_ap_start : STD_LOGIC;
    signal grp_pow_32_20_s_fu_223_ap_idle : STD_LOGIC;
    signal grp_pow_32_20_s_fu_223_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i7_0_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_0_0_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i8_0_reg_155 : STD_LOGIC_VECTOR (4 downto 0);
    signal v224_V_0_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal k5_0_0_reg_178 : STD_LOGIC_VECTOR (2 downto 0);
    signal v234_V_0_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal k6_0_0_reg_201 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_0_0_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_pow_32_20_s_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln380_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln391_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln402_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln703_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_271_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln370_fu_279_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln370_1_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln370_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_335_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_327_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln380_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln380_1_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1494_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln391_fu_405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln391_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln402_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln402_fu_451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_469_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_469_ap_start : STD_LOGIC;
    signal grp_fu_469_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);

    component pow_32_20_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (31 downto 0);
        y_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_sdiv_44Bew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_pow_32_20_s_fu_223 : component pow_32_20_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_32_20_s_fu_223_ap_start,
        ap_done => grp_pow_32_20_s_fu_223_ap_done,
        ap_idle => grp_pow_32_20_s_fu_223_ap_idle,
        ap_ready => grp_pow_32_20_s_fu_223_ap_ready,
        x_V => ap_const_lv32_2B7E,
        y_V => sub_ln703_reg_561,
        ap_return => grp_pow_32_20_s_fu_223_ap_return);

    attention_sdiv_44Bew_U78 : component attention_sdiv_44Bew
    generic map (
        ID => 1,
        NUM_STAGE => 48,
        din0_WIDTH => 44,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_469_ap_start,
        done => grp_fu_469_ap_done,
        din0 => grp_fu_469_p0,
        din1 => grp_fu_469_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_32_20_s_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_32_20_s_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_pow_32_20_s_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_32_20_s_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_pow_32_20_s_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i7_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln369_fu_289_p2 = ap_const_lv1_1))) then 
                i7_0_reg_133 <= i7_reg_482;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i7_0_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i8_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln367_fu_251_p2 = ap_const_lv1_1))) then 
                i8_0_reg_155 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln401_fu_435_p2 = ap_const_lv1_1))) then 
                i8_0_reg_155 <= i8_reg_513;
            end if; 
        end if;
    end process;

    k4_0_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k4_0_0_reg_144 <= add_ln369_reg_495;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln367_fu_251_p2 = ap_const_lv1_0))) then 
                k4_0_0_reg_144 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k5_0_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k5_0_0_reg_178 <= add_ln379_reg_528;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln375_fu_315_p2 = ap_const_lv1_0))) then 
                k5_0_0_reg_178 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k6_0_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln379_fu_353_p2 = ap_const_lv1_1))) then 
                k6_0_0_reg_201 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_pow_32_20_s_fu_223_ap_done = ap_const_logic_1))) then 
                k6_0_0_reg_201 <= add_ln390_reg_546;
            end if; 
        end if;
    end process;

    k7_0_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln390_fu_393_p2 = ap_const_lv1_1))) then 
                k7_0_0_reg_212 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                k7_0_0_reg_212 <= add_ln401_reg_574;
            end if; 
        end if;
    end process;

    v224_V_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                v224_V_0_reg_166 <= select_ln383_fu_385_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln375_fu_315_p2 = ap_const_lv1_0))) then 
                v224_V_0_reg_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    v234_V_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln379_fu_353_p2 = ap_const_lv1_1))) then 
                v234_V_0_reg_189 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_pow_32_20_s_fu_223_ap_done = ap_const_logic_1))) then 
                v234_V_0_reg_189 <= add_ln703_fu_429_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln369_reg_495 <= add_ln369_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln379_reg_528 <= add_ln379_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln390_reg_546 <= add_ln390_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln401_reg_574 <= add_ln401_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i7_reg_482 <= i7_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i8_reg_513 <= i8_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln390_fu_393_p2 = ap_const_lv1_1))) then
                sext_ln1148_reg_556 <= sext_ln1148_fu_419_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln369_fu_289_p2 = ap_const_lv1_0))) then
                sext_ln370_reg_500 <= sext_ln370_fu_310_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln367_fu_251_p2 = ap_const_lv1_0))) then
                    sub_ln370_reg_487(7 downto 1) <= sub_ln370_fu_283_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln375_fu_315_p2 = ap_const_lv1_0))) then
                    sub_ln380_reg_518(7 downto 1) <= sub_ln380_fu_347_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sub_ln703_reg_561 <= sub_ln703_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln390_fu_393_p2 = ap_const_lv1_0))) then
                v214_0_V_addr_2_reg_551 <= sext_ln391_fu_414_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln401_fu_435_p2 = ap_const_lv1_0))) then
                v214_0_V_addr_3_reg_579 <= sext_ln402_fu_456_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    sub_ln370_reg_487(0) <= '0';
    sub_ln380_reg_518(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln367_fu_251_p2, ap_CS_fsm_state3, icmp_ln369_fu_289_p2, ap_CS_fsm_state5, icmp_ln375_fu_315_p2, ap_CS_fsm_state6, icmp_ln379_fu_353_p2, ap_CS_fsm_state8, icmp_ln390_fu_393_p2, ap_CS_fsm_state11, grp_pow_32_20_s_fu_223_ap_done, ap_CS_fsm_state12, icmp_ln401_fu_435_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln367_fu_251_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln369_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln375_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln379_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln390_fu_393_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_pow_32_20_s_fu_223_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln401_fu_435_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln369_fu_295_p2 <= std_logic_vector(unsigned(k4_0_0_reg_144) + unsigned(ap_const_lv3_1));
    add_ln370_fu_305_p2 <= std_logic_vector(unsigned(sub_ln370_reg_487) + unsigned(zext_ln370_1_fu_301_p1));
    add_ln379_fu_359_p2 <= std_logic_vector(unsigned(k5_0_0_reg_178) + unsigned(ap_const_lv3_1));
    add_ln380_fu_369_p2 <= std_logic_vector(unsigned(sub_ln380_reg_518) + unsigned(zext_ln380_1_fu_365_p1));
    add_ln390_fu_399_p2 <= std_logic_vector(unsigned(k6_0_0_reg_201) + unsigned(ap_const_lv3_1));
    add_ln391_fu_409_p2 <= std_logic_vector(unsigned(sub_ln380_reg_518) + unsigned(zext_ln391_fu_405_p1));
    add_ln401_fu_441_p2 <= std_logic_vector(unsigned(k7_0_0_reg_212) + unsigned(ap_const_lv3_1));
    add_ln402_fu_451_p2 <= std_logic_vector(unsigned(sub_ln380_reg_518) + unsigned(zext_ln402_fu_447_p1));
    add_ln703_fu_429_p2 <= std_logic_vector(signed(v234_V_0_reg_189) + signed(grp_pow_32_20_s_fu_223_ap_return));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln375_fu_315_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln375_fu_315_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln375_fu_315_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln375_fu_315_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_469_ap_start_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_469_ap_start <= ap_const_logic_1;
        else 
            grp_fu_469_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_469_p0 <= (v214_0_V_q0 & ap_const_lv12_0);
    grp_fu_469_p1 <= sext_ln1148_reg_556(32 - 1 downto 0);
    grp_pow_32_20_s_fu_223_ap_start <= grp_pow_32_20_s_fu_223_ap_start_reg;
    i7_fu_257_p2 <= std_logic_vector(unsigned(i7_0_reg_133) + unsigned(ap_const_lv5_1));
    i8_fu_321_p2 <= std_logic_vector(unsigned(i8_0_reg_155) + unsigned(ap_const_lv5_1));
    icmp_ln1494_fu_379_p2 <= "1" when (signed(v214_0_V_q0) > signed(v224_V_0_reg_166)) else "0";
    icmp_ln367_fu_251_p2 <= "1" when (i7_0_reg_133 = ap_const_lv5_10) else "0";
    icmp_ln369_fu_289_p2 <= "1" when (k4_0_0_reg_144 = ap_const_lv3_6) else "0";
    icmp_ln375_fu_315_p2 <= "1" when (i8_0_reg_155 = ap_const_lv5_10) else "0";
    icmp_ln379_fu_353_p2 <= "1" when (k5_0_0_reg_178 = ap_const_lv3_6) else "0";
    icmp_ln390_fu_393_p2 <= "1" when (k6_0_0_reg_201 = ap_const_lv3_6) else "0";
    icmp_ln401_fu_435_p2 <= "1" when (k7_0_0_reg_212 = ap_const_lv3_6) else "0";
    select_ln383_fu_385_p3 <= 
        v214_0_V_q0 when (icmp_ln1494_fu_379_p2(0) = '1') else 
        v224_V_0_reg_166;
        sext_ln1148_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v234_V_0_reg_189),44));

        sext_ln370_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln370_fu_305_p2),64));

        sext_ln380_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln380_fu_369_p2),64));

        sext_ln391_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln391_fu_409_p2),64));

        sext_ln402_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln402_fu_451_p2),64));

    sub_ln370_fu_283_p2 <= std_logic_vector(unsigned(tmp_s_fu_263_p3) - unsigned(zext_ln370_fu_279_p1));
    sub_ln380_fu_347_p2 <= std_logic_vector(unsigned(tmp_3_fu_327_p3) - unsigned(zext_ln380_fu_343_p1));
    sub_ln703_fu_423_p2 <= std_logic_vector(unsigned(v214_0_V_q0) - unsigned(v224_V_0_reg_166));
    tmp_1_fu_271_p3 <= (i7_0_reg_133 & ap_const_lv1_0);
    tmp_3_fu_327_p3 <= (i8_0_reg_155 & ap_const_lv3_0);
    tmp_4_fu_335_p3 <= (i8_0_reg_155 & ap_const_lv1_0);
    tmp_s_fu_263_p3 <= (i7_0_reg_133 & ap_const_lv3_0);
    trunc_ln703_fu_474_p1 <= grp_fu_469_p2(32 - 1 downto 0);
    v213_0_V_address0 <= sext_ln370_fu_310_p1(7 - 1 downto 0);

    v213_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v213_0_V_ce0 <= ap_const_logic_1;
        else 
            v213_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v214_0_V_address0_assign_proc : process(sext_ln370_reg_500, ap_CS_fsm_state6, ap_CS_fsm_state8, v214_0_V_addr_2_reg_551, ap_CS_fsm_state11, ap_CS_fsm_state12, v214_0_V_addr_3_reg_579, ap_CS_fsm_state4, ap_CS_fsm_state60, sext_ln380_fu_374_p1, sext_ln391_fu_414_p1, sext_ln402_fu_456_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            v214_0_V_address0 <= v214_0_V_addr_3_reg_579;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            v214_0_V_address0 <= sext_ln402_fu_456_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v214_0_V_address0 <= v214_0_V_addr_2_reg_551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v214_0_V_address0 <= sext_ln391_fu_414_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v214_0_V_address0 <= sext_ln380_fu_374_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v214_0_V_address0 <= sext_ln370_reg_500(7 - 1 downto 0);
        else 
            v214_0_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    v214_0_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, grp_pow_32_20_s_fu_223_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_pow_32_20_s_fu_223_ap_done = ap_const_logic_1)))) then 
            v214_0_V_ce0 <= ap_const_logic_1;
        else 
            v214_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v214_0_V_d0_assign_proc : process(v213_0_V_q0, ap_CS_fsm_state11, grp_pow_32_20_s_fu_223_ap_return, ap_CS_fsm_state4, ap_CS_fsm_state60, trunc_ln703_fu_474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            v214_0_V_d0 <= trunc_ln703_fu_474_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v214_0_V_d0 <= grp_pow_32_20_s_fu_223_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v214_0_V_d0 <= v213_0_V_q0;
        else 
            v214_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v214_0_V_we0_assign_proc : process(ap_CS_fsm_state11, grp_pow_32_20_s_fu_223_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_pow_32_20_s_fu_223_ap_done = ap_const_logic_1)))) then 
            v214_0_V_we0 <= ap_const_logic_1;
        else 
            v214_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln370_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_0_0_reg_144),8));
    zext_ln370_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_271_p3),8));
    zext_ln380_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k5_0_0_reg_178),8));
    zext_ln380_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_335_p3),8));
    zext_ln391_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k6_0_0_reg_201),8));
    zext_ln402_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k7_0_0_reg_212),8));
end behav;
