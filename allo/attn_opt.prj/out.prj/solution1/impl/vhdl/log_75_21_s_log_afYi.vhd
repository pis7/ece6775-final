-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity log_75_21_s_log_afYi_rom is 
    generic(
             DWIDTH     : integer := 55; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of log_75_21_s_log_afYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000000000000000000000000000000000000", 
    1 => "0000010000000000000000000111110000000000000101000101100", 
    2 => "0000100000000000000000011111100000000000101001101011001", 
    3 => "0000110000000000000001000111010000000010001101110000110", 
    4 => "0001000000000000000001111111000000000101010001010110100", 
    5 => "0001010000000000000011000110110000001010010100011100100", 
    6 => "0001100000000000000100011110100000010001110111000010110", 
    7 => "0001110000000000000110000110010000011100011001001001011", 
    8 => "0010000000000000000111111110000000101010011010110000101", 
    9 => "0010010000000000001010000101110000111100011011111000100", 
    10 => "0010100000000000001100011101100001010010111100100001100", 
    11 => "0010110000000000001111000101010001101110011100101011101", 
    12 => "0011000000000000010001111101000010001111011100010111001", 
    13 => "0011010000000000010101000100110010110110011011100100010", 
    14 => "0011100000000000011000011100100011100011111010010011100", 
    15 => "0011110000000000011100000100010100011000011000100100111", 
    16 => "0100000000000000011111111100000101010100010110011001000", 
    17 => "0100010000000000100100000011110110011000010011110000001", 
    18 => "0100100000000000101000011011100111100100110000101010101", 
    19 => "0100110000000000101101000011011000111010001101001000111", 
    20 => "0101000000000000110001111011001010011001001001001011011", 
    21 => "0101010000000000110111000010111100000010000100110010100", 
    22 => "0101100000000000111100011010101101110101011111111110111", 
    23 => "0101110000000001000010000010011111110011111010110000111", 
    24 => "0110000000000001000111111010010001111101110101001001001", 
    25 => "0110010000000001001110000010000100010011101111001000001", 
    26 => "0110100000000001010100011001110110110110001000101110011", 
    27 => "0110110000000001011011000001101001100101100001111100100", 
    28 => "0111000000000001100001111001011100100010011010110011010", 
    29 => "0111010000000001101001000001001111101101010011010011001", 
    30 => "0111100000000001110000011001000011000110101011011100111", 
    31 => "0111110000000001111000000000110110101111000011010001001", 
    32 => "1000000000000001111111111000101010100110111010110000110", 
    33 => "1000010000000010001000000000011110101110110001111100010", 
    34 => "1000100000000010010000011000010011000111001000110100100", 
    35 => "1000110000000010011001000000000111110000011111011010011", 
    36 => "1001000000000010100001110111111100101011010101101110100", 
    37 => "1001010000000010101010111111110001111000001011110001111", 
    38 => "1001100000000010110100010111100111010111100001100101010", 
    39 => "1001110000000010111101111111011101001001110111001001100", 
    40 => "1010000000000011000111110111010011001111101100011111101", 
    41 => "1010010000000011010001111111001001101001100001101000100", 
    42 => "1010100000000011011100010111000000010111110110100101001", 
    43 => "1010110000000011100110111110110111011011001011010110010", 
    44 => "1011000000000011110001110110101110110011111111111101001", 
    45 => "1011010000000011111100111110100110100010110100011010110", 
    46 => "1011100000000100001000010110011110101000001000110000000", 
    47 => "1011110000000100010011111110010111000100011100111110000", 
    48 => "1100000000000100011111110110001111111000010001000110000", 
    49 => "1100010000000100101011111110001001000100000101001000111", 
    50 => "1100100000000100111000010110000010101000011001000111111", 
    51 => "1100110000000101000100111101111100100101101101000100010", 
    52 => "1101000000000101010001110101110110111100100000111111001", 
    53 => "1101010000000101011110111101110001101101010100111001101", 
    54 => "1101100000000101101100010101101100111000101000110101000", 
    55 => "1101110000000101111001111101101000011110111100110010100", 
    56 => "1110000000000110000111110101100100100000110000110011100", 
    57 => "1110010000000110010101111101100000111110100100111001010", 
    58 => "1110100000000110100100010101011101111000111001000101001", 
    59 => "1110110000000110110010111101011011010000001101011000010", 
    60 => "1111000000000111000001110101011001000101000001110100011", 
    61 => "1111010000000111010000111101010111010111110110011010100", 
    62 => "1111100000000111100000010101010110001001001011001100010", 
    63 => "1111110000000111101111111101010101011001100000001011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity log_75_21_s_log_afYi is
    generic (
        DataWidth : INTEGER := 55;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of log_75_21_s_log_afYi is
    component log_75_21_s_log_afYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    log_75_21_s_log_afYi_rom_U :  component log_75_21_s_log_afYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


