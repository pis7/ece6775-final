-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantize_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v22_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v22_0_V_ce0 : OUT STD_LOGIC;
    v22_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v24_0_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    v24_0_0_ce0 : OUT STD_LOGIC;
    v24_0_0_we0 : OUT STD_LOGIC;
    v24_0_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v24_1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    v24_1_0_ce0 : OUT STD_LOGIC;
    v24_1_0_we0 : OUT STD_LOGIC;
    v24_1_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v24_2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    v24_2_0_ce0 : OUT STD_LOGIC;
    v24_2_0_we0 : OUT STD_LOGIC;
    v24_2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v24_3_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    v24_3_0_ce0 : OUT STD_LOGIC;
    v24_3_0_we0 : OUT STD_LOGIC;
    v24_3_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of quantize_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_7F000000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv45_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv32_FFFFF800 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111100000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_FFF80 : STD_LOGIC_VECTOR (19 downto 0) := "11111111111110000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal add_ln70_fu_208_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_reg_463 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln70_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln1148_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln97_fu_281_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln97_reg_482 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln97_fu_291_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln97_reg_490 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln97_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_3_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal select_ln850_fu_381_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln850_reg_506 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_5_reg_512 : STD_LOGIC_VECTOR (12 downto 0);
    signal v45_V_0_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_0_reg_175 : STD_LOGIC_VECTOR (10 downto 0);
    signal j1_0_0_reg_186 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln71_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln119_fu_438_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln115_1_fu_426_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_231_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln1118_fu_239_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal sub_ln1118_fu_243_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal icmp_ln1494_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_249_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1495_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_306_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal icmp_ln1494_1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln104_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln851_fu_357_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_339_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln851_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_367_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_373_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln110_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln115_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln115_fu_412_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln115_fu_409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_442_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_219_ap_start : STD_LOGIC;
    signal grp_fu_219_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);

    component attention_udiv_32xdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    attention_udiv_32xdS_U42 : component attention_udiv_32xdS
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_219_ap_start,
        done => grp_fu_219_ap_done,
        din0 => ap_const_lv32_7F000000,
        din1 => v45_V_0_reg_163,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j1_0_0_reg_186 <= add_ln97_reg_490;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                j1_0_0_reg_186 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_0_reg_175 <= add_ln70_reg_463;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_175 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    v45_V_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                v45_V_0_reg_163 <= select_ln80_fu_273_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v45_V_0_reg_163 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln70_reg_463 <= add_ln70_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                add_ln97_reg_490 <= add_ln97_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_198 <= v22_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                select_ln850_reg_506 <= select_ln850_fu_381_p3;
                tmp_5_reg_512 <= select_ln850_fu_381_p3(19 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                trunc_ln708_3_reg_500 <= mul_ln1118_fu_306_p2(43 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                udiv_ln1148_reg_478 <= grp_fu_219_p2;
                    zext_ln97_reg_482(31 downto 0) <= zext_ln97_fu_281_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln97_reg_482(43 downto 32) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln70_fu_202_p2, ap_CS_fsm_state40, icmp_ln97_fu_285_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln70_fu_202_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln97_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln104_fu_334_p2 <= std_logic_vector(unsigned(select_ln104_fu_326_p3) + unsigned(trunc_ln708_3_reg_500));
    add_ln700_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(p_Result_s_fu_339_p4));
    add_ln70_fu_208_p2 <= std_logic_vector(unsigned(j_0_0_reg_175) + unsigned(ap_const_lv11_1));
    add_ln97_fu_291_p2 <= std_logic_vector(unsigned(j1_0_0_reg_186) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state40, icmp_ln97_fu_285_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln97_fu_285_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40, icmp_ln97_fu_285_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln97_fu_285_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= udiv_ln1148_reg_478;

    grp_fu_219_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln70_fu_202_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln70_fu_202_p2 = ap_const_lv1_1))) then 
            grp_fu_219_ap_start <= ap_const_logic_1;
        else 
            grp_fu_219_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln110_fu_399_p2 <= "1" when (signed(select_ln850_reg_506) < signed(ap_const_lv20_FFF80)) else "0";
    icmp_ln112_fu_404_p2 <= "1" when (signed(tmp_5_reg_512) > signed(ap_const_lv13_0)) else "0";
    icmp_ln1494_1_fu_321_p2 <= "1" when (signed(trunc_ln708_3_reg_500) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1494_fu_225_p2 <= "1" when (signed(reg_198) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1495_fu_267_p2 <= "1" when (signed(v45_V_0_reg_163) < signed(select_ln74_fu_259_p3)) else "0";
    icmp_ln70_fu_202_p2 <= "1" when (j_0_0_reg_175 = ap_const_lv11_600) else "0";
    icmp_ln851_fu_361_p2 <= "1" when (trunc_ln851_fu_357_p1 = ap_const_lv12_0) else "0";
    icmp_ln97_fu_285_p2 <= "1" when (j1_0_0_reg_186 = ap_const_lv11_600) else "0";
    lshr_ln_fu_442_p4 <= j1_0_0_reg_186(10 downto 2);
    mul_ln1118_fu_306_p0 <= zext_ln97_reg_482(32 - 1 downto 0);
    mul_ln1118_fu_306_p1 <= reg_198;
    mul_ln1118_fu_306_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1118_fu_306_p0) * signed(mul_ln1118_fu_306_p1))), 44));
    or_ln115_fu_420_p2 <= (icmp_ln112_fu_404_p2 or icmp_ln110_fu_399_p2);
    p_Result_s_fu_339_p4 <= add_ln104_fu_334_p2(31 downto 12);
    select_ln104_fu_326_p3 <= 
        ap_const_lv32_800 when (icmp_ln1494_1_fu_321_p2(0) = '1') else 
        ap_const_lv32_FFFFF800;
    select_ln115_1_fu_426_p3 <= 
        select_ln115_fu_412_p3 when (or_ln115_fu_420_p2(0) = '1') else 
        trunc_ln115_fu_409_p1;
    select_ln115_fu_412_p3 <= 
        ap_const_lv8_80 when (icmp_ln110_fu_399_p2(0) = '1') else 
        ap_const_lv8_7F;
    select_ln74_fu_259_p3 <= 
        reg_198 when (icmp_ln1494_fu_225_p2(0) = '1') else 
        trunc_ln_fu_249_p4;
    select_ln80_fu_273_p3 <= 
        select_ln74_fu_259_p3 when (icmp_ln1495_fu_267_p2(0) = '1') else 
        v45_V_0_reg_163;
    select_ln850_fu_381_p3 <= 
        select_ln851_fu_373_p3 when (tmp_4_fu_349_p3(0) = '1') else 
        p_Result_s_fu_339_p4;
    select_ln851_fu_373_p3 <= 
        p_Result_s_fu_339_p4 when (icmp_ln851_fu_361_p2(0) = '1') else 
        add_ln700_fu_367_p2;
    shl_ln_fu_231_p3 <= (reg_198 & ap_const_lv12_0);
    sub_ln1118_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv45_0) - unsigned(zext_ln1118_fu_239_p1));
    tmp_4_fu_349_p3 <= add_ln104_fu_334_p2(31 downto 31);
    trunc_ln115_fu_409_p1 <= select_ln850_reg_506(8 - 1 downto 0);
    trunc_ln119_fu_438_p1 <= j1_0_0_reg_186(2 - 1 downto 0);
    trunc_ln851_fu_357_p1 <= add_ln104_fu_334_p2(12 - 1 downto 0);
    trunc_ln_fu_249_p4 <= sub_ln1118_fu_243_p2(43 downto 12);

    v22_0_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state40, zext_ln71_fu_214_p1, zext_ln98_fu_297_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            v22_0_V_address0 <= zext_ln98_fu_297_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v22_0_V_address0 <= zext_ln71_fu_214_p1(11 - 1 downto 0);
        else 
            v22_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    v22_0_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            v22_0_V_ce0 <= ap_const_logic_1;
        else 
            v22_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_0_address0 <= zext_ln119_fu_452_p1(9 - 1 downto 0);

    v24_0_0_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v24_0_0_ce0 <= ap_const_logic_1;
        else 
            v24_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_0_d0 <= select_ln115_1_fu_426_p3;

    v24_0_0_we0_assign_proc : process(ap_CS_fsm_state44, trunc_ln119_fu_438_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (trunc_ln119_fu_438_p1 = ap_const_lv2_0))) then 
            v24_0_0_we0 <= ap_const_logic_1;
        else 
            v24_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_1_0_address0 <= zext_ln119_fu_452_p1(9 - 1 downto 0);

    v24_1_0_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v24_1_0_ce0 <= ap_const_logic_1;
        else 
            v24_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_1_0_d0 <= select_ln115_1_fu_426_p3;

    v24_1_0_we0_assign_proc : process(ap_CS_fsm_state44, trunc_ln119_fu_438_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (trunc_ln119_fu_438_p1 = ap_const_lv2_1))) then 
            v24_1_0_we0 <= ap_const_logic_1;
        else 
            v24_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_2_0_address0 <= zext_ln119_fu_452_p1(9 - 1 downto 0);

    v24_2_0_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v24_2_0_ce0 <= ap_const_logic_1;
        else 
            v24_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_2_0_d0 <= select_ln115_1_fu_426_p3;

    v24_2_0_we0_assign_proc : process(ap_CS_fsm_state44, trunc_ln119_fu_438_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (trunc_ln119_fu_438_p1 = ap_const_lv2_2))) then 
            v24_2_0_we0 <= ap_const_logic_1;
        else 
            v24_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_3_0_address0 <= zext_ln119_fu_452_p1(9 - 1 downto 0);

    v24_3_0_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v24_3_0_ce0 <= ap_const_logic_1;
        else 
            v24_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_3_0_d0 <= select_ln115_1_fu_426_p3;

    v24_3_0_we0_assign_proc : process(ap_CS_fsm_state44, trunc_ln119_fu_438_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) and (trunc_ln119_fu_438_p1 = ap_const_lv2_3))) then 
            v24_3_0_we0 <= ap_const_logic_1;
        else 
            v24_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_231_p3),45));
    zext_ln119_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_442_p4),64));
    zext_ln71_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_175),64));
    zext_ln97_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_219_p2),44));
    zext_ln98_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_0_reg_186),64));
end behav;
