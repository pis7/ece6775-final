-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_forward_no_mu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v77_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v77_0_ce0 : OUT STD_LOGIC;
    v77_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v78_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    v79_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    v79_ce0 : OUT STD_LOGIC;
    v79_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v80_V : IN STD_LOGIC_VECTOR (31 downto 0);
    v81_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v81_V_ce0 : OUT STD_LOGIC;
    v81_V_we0 : OUT STD_LOGIC;
    v81_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of linear_forward_no_mu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_145 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_0_0_reg_156 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_assign_0_reg_167 : STD_LOGIC_VECTOR (2 downto 0);
    signal v128_V_0_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal v126_V_0_reg_189 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1148_fu_224_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln1148_reg_516 : STD_LOGIC_VECTOR (43 downto 0);
    signal icmp_ln132_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln132_fu_234_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln132_reg_525 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_fu_245_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln203_reg_530 : STD_LOGIC_VECTOR (20 downto 0);
    signal v81_V_addr_reg_535 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln135_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln135_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln135_2_fu_285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln141_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_549_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_549_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln135_1_fu_303_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln135_1_reg_555 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln135_1_reg_555_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln135_1_fu_349_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln135_1_reg_561 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln135_3_fu_354_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln135_3_reg_566 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln141_fu_362_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln165_fu_408_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln165_reg_587 : STD_LOGIC_VECTOR (1 downto 0);
    signal v77_0_load_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal select_ln135_4_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_3_fu_493_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j2_0_0_reg_134 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_phi_mux_k_0_0_phi_fu_160_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln136_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln135_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln185_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1118_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_208_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln_fu_214_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_249_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_14_fu_261_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln136_1_fu_257_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln136_2_fu_269_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln135_fu_291_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_311_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_fu_323_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln136_3_fu_319_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln136_4_fu_331_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln136_1_fu_335_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln136_fu_273_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln135_2_fu_341_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln544_mid2_fu_372_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln141_fu_379_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln148_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln160_fu_393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln160_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ashr_ln162_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln141_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln172_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln172_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln172_fu_446_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln172_1_fu_460_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln728_fu_475_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln728_fu_475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln728_fu_475_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln728_1_fu_481_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln728_2_fu_489_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln135_fu_422_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_506_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_506_ap_start : STD_LOGIC;
    signal grp_fu_506_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component attention_sdiv_44yd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    attention_sdiv_44yd2_U46 : component attention_sdiv_44yd2
    generic map (
        ID => 1,
        NUM_STAGE => 48,
        din0_WIDTH => 44,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_506_ap_start,
        done => grp_fu_506_ap_done,
        din0 => grp_fu_506_p0,
        din1 => grp_fu_506_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_506_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln135_fu_279_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_fu_279_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_145 <= add_ln135_2_fu_285_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_145 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j2_0_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                j2_0_0_reg_134 <= add_ln132_reg_525;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j2_0_0_reg_134 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_reg_540 = ap_const_lv1_0))) then 
                k_0_0_reg_156 <= select_ln135_3_reg_566;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                k_0_0_reg_156 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    v126_V_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_reg_540_pp0_iter2_reg = ap_const_lv1_0))) then 
                v126_V_0_reg_189 <= add_ln703_3_fu_493_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                v126_V_0_reg_189 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    v128_V_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_reg_540_pp0_iter2_reg = ap_const_lv1_0))) then 
                v128_V_0_reg_178 <= select_ln135_4_fu_429_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                v128_V_0_reg_178 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    val_assign_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_fu_279_p2 = ap_const_lv1_0))) then 
                val_assign_0_reg_167 <= add_ln141_fu_362_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then 
                val_assign_0_reg_167 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln132_reg_525 <= add_ln132_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_fu_279_p2 = ap_const_lv1_0))) then
                add_ln135_1_reg_561 <= add_ln135_1_fu_349_p2;
                icmp_ln141_reg_549 <= icmp_ln141_fu_297_p2;
                select_ln135_1_reg_555 <= select_ln135_1_fu_303_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln703_reg_598 <= add_ln703_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln135_reg_540 <= icmp_ln135_fu_279_p2;
                icmp_ln135_reg_540_pp0_iter1_reg <= icmp_ln135_reg_540;
                icmp_ln141_reg_549_pp0_iter1_reg <= icmp_ln141_reg_549;
                select_ln135_1_reg_555_pp0_iter1_reg <= select_ln135_1_reg_555;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln135_reg_540_pp0_iter2_reg <= icmp_ln135_reg_540_pp0_iter1_reg;
                icmp_ln141_reg_549_pp0_iter2_reg <= icmp_ln141_reg_549_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_fu_279_p2 = ap_const_lv1_0))) then
                select_ln135_3_reg_566 <= select_ln135_3_fu_354_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sext_ln1148_reg_516 <= sext_ln1148_fu_224_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln135_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then
                trunc_ln165_reg_587 <= trunc_ln165_fu_408_p1;
                v77_0_load_reg_593 <= v77_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_0))) then
                v81_V_addr_reg_535 <= zext_ln136_fu_240_p1(11 - 1 downto 0);
                    zext_ln203_reg_530(10 downto 0) <= zext_ln203_fu_245_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln203_reg_530(20 downto 11) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln132_fu_228_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln132_fu_234_p2 <= std_logic_vector(unsigned(j2_0_0_reg_134) + unsigned(ap_const_lv11_1));
    add_ln135_1_fu_349_p2 <= std_logic_vector(unsigned(zext_ln203_reg_530) + unsigned(select_ln135_2_fu_341_p3));
    add_ln135_2_fu_285_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_145) + unsigned(ap_const_lv11_1));
    add_ln135_fu_291_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_k_0_0_phi_fu_160_p4));
    add_ln141_fu_362_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln135_1_fu_303_p3));
    add_ln148_fu_382_p2 <= std_logic_vector(unsigned(shl_ln544_mid2_fu_372_p3) + unsigned(zext_ln141_fu_379_p1));
    add_ln703_3_fu_493_p2 <= std_logic_vector(signed(sext_ln728_2_fu_489_p1) + signed(select_ln135_fu_422_p3));
    add_ln703_fu_416_p2 <= std_logic_vector(unsigned(v128_V_0_reg_178) + unsigned(sext_ln141_fu_412_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state54 <= ap_CS_fsm(50);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln132_fu_228_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_0_0_phi_fu_160_p4_assign_proc : process(k_0_0_reg_156, icmp_ln135_reg_540, ap_CS_fsm_pp0_stage0, select_ln135_3_reg_566, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln135_reg_540 = ap_const_lv1_0))) then 
            ap_phi_mux_k_0_0_phi_fu_160_p4 <= select_ln135_3_reg_566;
        else 
            ap_phi_mux_k_0_0_phi_fu_160_p4 <= k_0_0_reg_156;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln132_fu_228_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln132_fu_228_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln162_fu_402_p2 <= std_logic_vector(shift_right(signed(v79_q0),to_integer(unsigned('0' & zext_ln160_fu_398_p1(8-1 downto 0)))));

    grp_fu_506_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_506_ap_start <= ap_const_logic_1;
        else 
            grp_fu_506_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_506_p0 <= (add_ln703_reg_598 & ap_const_lv12_0);
    grp_fu_506_p1 <= sext_ln1148_reg_516(32 - 1 downto 0);
    icmp_ln132_fu_228_p2 <= "1" when (j2_0_0_reg_134 = ap_const_lv11_600) else "0";
    icmp_ln135_fu_279_p2 <= "1" when (indvar_flatten_reg_145 = ap_const_lv11_600) else "0";
    icmp_ln141_fu_297_p2 <= "1" when (val_assign_0_reg_167 = ap_const_lv3_4) else "0";
    icmp_ln172_fu_436_p2 <= "1" when (trunc_ln165_reg_587 = ap_const_lv2_1) else "0";
    icmp_ln178_fu_441_p2 <= "1" when (trunc_ln165_reg_587 = ap_const_lv2_2) else "0";
    mul_ln1118_fu_208_p0 <= v78_0_V_read;
    mul_ln1118_fu_208_p1 <= v80_V;
    mul_ln1118_fu_208_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_208_p0) * signed(mul_ln1118_fu_208_p1))), 44));
    mul_ln728_fu_475_p0 <= select_ln172_1_fu_460_p3;
    mul_ln728_fu_475_p1 <= v77_0_load_reg_593;
    mul_ln728_fu_475_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln728_fu_475_p0) * signed(mul_ln728_fu_475_p1))), 9));
    or_ln172_fu_454_p2 <= (icmp_ln178_fu_441_p2 or icmp_ln172_fu_436_p2);
    select_ln135_1_fu_303_p3 <= 
        ap_const_lv3_0 when (icmp_ln141_fu_297_p2(0) = '1') else 
        val_assign_0_reg_167;
    select_ln135_2_fu_341_p3 <= 
        sub_ln136_1_fu_335_p2 when (icmp_ln141_fu_297_p2(0) = '1') else 
        sub_ln136_fu_273_p2;
    select_ln135_3_fu_354_p3 <= 
        add_ln135_fu_291_p2 when (icmp_ln141_fu_297_p2(0) = '1') else 
        ap_phi_mux_k_0_0_phi_fu_160_p4;
    select_ln135_4_fu_429_p3 <= 
        add_ln703_fu_416_p2 when (icmp_ln141_reg_549_pp0_iter2_reg(0) = '1') else 
        v128_V_0_reg_178;
    select_ln135_fu_422_p3 <= 
        ap_const_lv23_0 when (icmp_ln141_reg_549_pp0_iter2_reg(0) = '1') else 
        v126_V_0_reg_189;
    select_ln172_1_fu_460_p3 <= 
        select_ln172_fu_446_p3 when (or_ln172_fu_454_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln172_fu_446_p3 <= 
        ap_const_lv2_1 when (icmp_ln172_fu_436_p2(0) = '1') else 
        ap_const_lv2_3;
        sext_ln1148_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_214_p4),44));

        sext_ln135_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln135_1_reg_561),64));

        sext_ln141_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v126_V_0_reg_189),32));

        sext_ln728_2_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_1_fu_481_p3),23));

    shl_ln160_fu_393_p2 <= std_logic_vector(shift_left(unsigned(select_ln135_1_reg_555_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln544_mid2_fu_372_p3 <= (select_ln135_3_reg_566 & ap_const_lv2_0);
    shl_ln728_1_fu_481_p3 <= (mul_ln728_fu_475_p2 & ap_const_lv12_0);
    sub_ln136_1_fu_335_p2 <= std_logic_vector(unsigned(zext_ln136_3_fu_319_p1) - unsigned(zext_ln136_4_fu_331_p1));
    sub_ln136_fu_273_p2 <= std_logic_vector(unsigned(zext_ln136_1_fu_257_p1) - unsigned(zext_ln136_2_fu_269_p1));
    tmp_14_fu_261_p3 <= (ap_phi_mux_k_0_0_phi_fu_160_p4 & ap_const_lv9_0);
    tmp_15_fu_311_p3 <= (add_ln135_fu_291_p2 & ap_const_lv11_0);
    tmp_16_fu_323_p3 <= (add_ln135_fu_291_p2 & ap_const_lv9_0);
    tmp_s_fu_249_p3 <= (ap_phi_mux_k_0_0_phi_fu_160_p4 & ap_const_lv11_0);
    trunc_ln165_fu_408_p1 <= ashr_ln162_fu_402_p2(2 - 1 downto 0);
    trunc_ln_fu_214_p4 <= mul_ln1118_fu_208_p2(43 downto 12);
    v77_0_address0 <= zext_ln185_fu_388_p1(11 - 1 downto 0);

    v77_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v77_0_ce0 <= ap_const_logic_1;
        else 
            v77_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v79_address0 <= sext_ln135_fu_368_p1(20 - 1 downto 0);

    v79_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v79_ce0 <= ap_const_logic_1;
        else 
            v79_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v81_V_address0 <= v81_V_addr_reg_535;

    v81_V_ce0_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            v81_V_ce0 <= ap_const_logic_1;
        else 
            v81_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v81_V_d0 <= grp_fu_506_p2(32 - 1 downto 0);

    v81_V_we0_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            v81_V_we0 <= ap_const_logic_1;
        else 
            v81_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln136_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_249_p3),21));
    zext_ln136_2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_261_p3),21));
    zext_ln136_3_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_311_p3),21));
    zext_ln136_4_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_323_p3),21));
    zext_ln136_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_0_reg_134),64));
    zext_ln141_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln135_1_reg_555),11));
    zext_ln160_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln160_fu_393_p2),8));
    zext_ln185_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln148_fu_382_p2),64));
    zext_ln203_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_0_reg_134),21));
end behav;
