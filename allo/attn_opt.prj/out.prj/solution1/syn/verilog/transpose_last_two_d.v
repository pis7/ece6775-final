// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transpose_last_two_d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v192_V_address0,
        v192_V_ce0,
        v192_V_q0,
        v193_V_address0,
        v193_V_ce0,
        v193_V_we0,
        v193_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v192_V_address0;
output   v192_V_ce0;
input  [31:0] v192_V_q0;
output  [13:0] v193_V_address0;
output   v193_V_ce0;
output   v193_V_we0;
output  [31:0] v193_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v192_V_ce0;
reg v193_V_ce0;
reg v193_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] h3_fu_128_p2;
reg   [4:0] h3_reg_326;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln323_fu_164_p1;
reg  signed [9:0] sext_ln323_reg_331;
wire   [0:0] icmp_ln320_fu_122_p2;
wire  signed [13:0] sext_ln203_fu_198_p1;
reg  signed [13:0] sext_ln203_reg_336;
wire   [2:0] s3_fu_208_p2;
reg   [2:0] s3_reg_344;
wire    ap_CS_fsm_state3;
wire   [14:0] zext_ln323_2_fu_214_p1;
reg   [14:0] zext_ln323_2_reg_349;
wire   [0:0] icmp_ln321_fu_202_p2;
wire   [14:0] sub_ln323_1_fu_247_p2;
reg   [14:0] sub_ln323_1_reg_354;
wire   [6:0] d3_fu_259_p2;
reg   [6:0] d3_reg_362;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln322_fu_253_p2;
wire   [14:0] add_ln203_1_fu_314_p2;
reg   [14:0] add_ln203_1_reg_372;
reg   [4:0] h3_0_reg_89;
reg   [2:0] s3_0_reg_100;
reg   [6:0] d3_0_reg_111;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln323_6_fu_278_p1;
wire   [63:0] zext_ln203_2_fu_319_p1;
wire   [7:0] tmp_2_fu_134_p3;
wire   [5:0] tmp_3_fu_146_p3;
wire   [8:0] zext_ln323_fu_142_p1;
wire   [8:0] zext_ln323_1_fu_154_p1;
wire   [8:0] sub_ln323_fu_158_p2;
wire   [11:0] tmp_4_fu_168_p3;
wire   [9:0] tmp_5_fu_180_p3;
wire   [12:0] zext_ln203_fu_176_p1;
wire   [12:0] zext_ln203_1_fu_188_p1;
wire   [12:0] sub_ln203_fu_192_p2;
wire   [9:0] zext_ln323_3_fu_218_p1;
wire   [9:0] add_ln323_fu_222_p2;
wire   [7:0] trunc_ln323_fu_227_p1;
wire   [14:0] p_shl4_cast_fu_231_p3;
wire   [14:0] p_shl5_cast_fu_239_p3;
wire   [14:0] zext_ln323_5_fu_269_p1;
wire   [14:0] add_ln323_1_fu_273_p2;
wire   [13:0] zext_ln323_4_fu_265_p1;
wire   [13:0] add_ln203_fu_283_p2;
wire   [11:0] trunc_ln203_fu_288_p1;
wire   [14:0] p_shl6_cast_fu_292_p3;
wire   [14:0] p_shl7_cast_fu_300_p3;
wire   [14:0] sub_ln203_1_fu_308_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d3_0_reg_111 <= d3_reg_362;
    end else if (((icmp_ln321_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        d3_0_reg_111 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln321_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h3_0_reg_89 <= h3_reg_326;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h3_0_reg_89 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln322_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        s3_0_reg_100 <= s3_reg_344;
    end else if (((icmp_ln320_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        s3_0_reg_100 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln322_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_1_reg_372 <= add_ln203_1_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d3_reg_362 <= d3_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h3_reg_326 <= h3_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s3_reg_344 <= s3_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln203_reg_336[13 : 5] <= sext_ln203_fu_198_p1[13 : 5];
        sext_ln323_reg_331[9 : 1] <= sext_ln323_fu_164_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln321_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln323_1_reg_354[14 : 5] <= sub_ln323_1_fu_247_p2[14 : 5];
        zext_ln323_2_reg_349[2 : 0] <= zext_ln323_2_fu_214_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln320_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln320_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v192_V_ce0 = 1'b1;
    end else begin
        v192_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v193_V_ce0 = 1'b1;
    end else begin
        v193_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v193_V_we0 = 1'b1;
    end else begin
        v193_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln320_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln321_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln322_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_314_p2 = (zext_ln323_2_reg_349 + sub_ln203_1_fu_308_p2);

assign add_ln203_fu_283_p2 = ($signed(zext_ln323_4_fu_265_p1) + $signed(sext_ln203_reg_336));

assign add_ln323_1_fu_273_p2 = (zext_ln323_5_fu_269_p1 + sub_ln323_1_reg_354);

assign add_ln323_fu_222_p2 = ($signed(zext_ln323_3_fu_218_p1) + $signed(sext_ln323_reg_331));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign d3_fu_259_p2 = (d3_0_reg_111 + 7'd1);

assign h3_fu_128_p2 = (h3_0_reg_89 + 5'd1);

assign icmp_ln320_fu_122_p2 = ((h3_0_reg_89 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_202_p2 = ((s3_0_reg_100 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln322_fu_253_p2 = ((d3_0_reg_111 == 7'd96) ? 1'b1 : 1'b0);

assign p_shl4_cast_fu_231_p3 = {{trunc_ln323_fu_227_p1}, {7'd0}};

assign p_shl5_cast_fu_239_p3 = {{add_ln323_fu_222_p2}, {5'd0}};

assign p_shl6_cast_fu_292_p3 = {{trunc_ln203_fu_288_p1}, {3'd0}};

assign p_shl7_cast_fu_300_p3 = {{add_ln203_fu_283_p2}, {1'd0}};

assign s3_fu_208_p2 = (s3_0_reg_100 + 3'd1);

assign sext_ln203_fu_198_p1 = $signed(sub_ln203_fu_192_p2);

assign sext_ln323_fu_164_p1 = $signed(sub_ln323_fu_158_p2);

assign sub_ln203_1_fu_308_p2 = (p_shl6_cast_fu_292_p3 - p_shl7_cast_fu_300_p3);

assign sub_ln203_fu_192_p2 = (zext_ln203_fu_176_p1 - zext_ln203_1_fu_188_p1);

assign sub_ln323_1_fu_247_p2 = (p_shl4_cast_fu_231_p3 - p_shl5_cast_fu_239_p3);

assign sub_ln323_fu_158_p2 = (zext_ln323_fu_142_p1 - zext_ln323_1_fu_154_p1);

assign tmp_2_fu_134_p3 = {{h3_0_reg_89}, {3'd0}};

assign tmp_3_fu_146_p3 = {{h3_0_reg_89}, {1'd0}};

assign tmp_4_fu_168_p3 = {{h3_0_reg_89}, {7'd0}};

assign tmp_5_fu_180_p3 = {{h3_0_reg_89}, {5'd0}};

assign trunc_ln203_fu_288_p1 = add_ln203_fu_283_p2[11:0];

assign trunc_ln323_fu_227_p1 = add_ln323_fu_222_p2[7:0];

assign v192_V_address0 = zext_ln323_6_fu_278_p1;

assign v193_V_address0 = zext_ln203_2_fu_319_p1;

assign v193_V_d0 = v192_V_q0;

assign zext_ln203_1_fu_188_p1 = tmp_5_fu_180_p3;

assign zext_ln203_2_fu_319_p1 = add_ln203_1_reg_372;

assign zext_ln203_fu_176_p1 = tmp_4_fu_168_p3;

assign zext_ln323_1_fu_154_p1 = tmp_3_fu_146_p3;

assign zext_ln323_2_fu_214_p1 = s3_0_reg_100;

assign zext_ln323_3_fu_218_p1 = s3_0_reg_100;

assign zext_ln323_4_fu_265_p1 = d3_0_reg_111;

assign zext_ln323_5_fu_269_p1 = d3_0_reg_111;

assign zext_ln323_6_fu_278_p1 = add_ln323_1_fu_273_p2;

assign zext_ln323_fu_142_p1 = tmp_2_fu_134_p3;

always @ (posedge ap_clk) begin
    sext_ln323_reg_331[0] <= 1'b0;
    sext_ln203_reg_336[4:0] <= 5'b00000;
    zext_ln323_2_reg_349[14:3] <= 12'b000000000000;
    sub_ln323_1_reg_354[4:0] <= 5'b00000;
end

endmodule //transpose_last_two_d
