// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantize_activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v22_0_V_address0,
        v22_0_V_ce0,
        v22_0_V_q0,
        v24_0_0_address0,
        v24_0_0_ce0,
        v24_0_0_we0,
        v24_0_0_d0,
        v24_1_0_address0,
        v24_1_0_ce0,
        v24_1_0_we0,
        v24_1_0_d0,
        v24_2_0_address0,
        v24_2_0_ce0,
        v24_2_0_we0,
        v24_2_0_d0,
        v24_3_0_address0,
        v24_3_0_ce0,
        v24_3_0_we0,
        v24_3_0_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v22_0_V_address0;
output   v22_0_V_ce0;
input  [31:0] v22_0_V_q0;
output  [8:0] v24_0_0_address0;
output   v24_0_0_ce0;
output   v24_0_0_we0;
output  [7:0] v24_0_0_d0;
output  [8:0] v24_1_0_address0;
output   v24_1_0_ce0;
output   v24_1_0_we0;
output  [7:0] v24_1_0_d0;
output  [8:0] v24_2_0_address0;
output   v24_2_0_ce0;
output   v24_2_0_we0;
output  [7:0] v24_2_0_d0;
output  [8:0] v24_3_0_address0;
output   v24_3_0_ce0;
output   v24_3_0_we0;
output  [7:0] v24_3_0_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] v22_0_V_address0;
reg v22_0_V_ce0;
reg v24_0_0_ce0;
reg v24_0_0_we0;
reg v24_1_0_ce0;
reg v24_1_0_we0;
reg v24_2_0_ce0;
reg v24_2_0_we0;
reg v24_3_0_ce0;
reg v24_3_0_we0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_198;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state41;
wire   [10:0] add_ln70_fu_208_p2;
reg   [10:0] add_ln70_reg_463;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln70_fu_202_p2;
wire   [31:0] select_ln80_fu_273_p3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] udiv_ln1148_reg_478;
wire    ap_CS_fsm_state39;
wire   [43:0] zext_ln97_fu_281_p1;
reg   [43:0] zext_ln97_reg_482;
wire   [10:0] add_ln97_fu_291_p2;
reg   [10:0] add_ln97_reg_490;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln97_fu_285_p2;
reg   [31:0] trunc_ln708_3_reg_500;
wire    ap_CS_fsm_state42;
wire   [19:0] select_ln850_fu_381_p3;
reg   [19:0] select_ln850_reg_506;
wire    ap_CS_fsm_state43;
reg   [12:0] tmp_5_reg_512;
reg   [31:0] v45_V_0_reg_163;
reg   [10:0] j_0_0_reg_175;
reg   [10:0] j1_0_0_reg_186;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln71_fu_214_p1;
wire   [63:0] zext_ln98_fu_297_p1;
wire   [63:0] zext_ln119_fu_452_p1;
wire   [1:0] trunc_ln119_fu_438_p1;
wire   [7:0] select_ln115_1_fu_426_p3;
wire   [43:0] shl_ln_fu_231_p3;
wire   [44:0] zext_ln1118_fu_239_p1;
wire   [44:0] sub_ln1118_fu_243_p2;
wire   [0:0] icmp_ln1494_fu_225_p2;
wire   [31:0] trunc_ln_fu_249_p4;
wire   [31:0] select_ln74_fu_259_p3;
wire   [0:0] icmp_ln1495_fu_267_p2;
wire   [31:0] mul_ln1118_fu_306_p0;
wire  signed [31:0] mul_ln1118_fu_306_p1;
wire   [43:0] mul_ln1118_fu_306_p2;
wire   [0:0] icmp_ln1494_1_fu_321_p2;
wire   [31:0] select_ln104_fu_326_p3;
wire   [31:0] add_ln104_fu_334_p2;
wire   [11:0] trunc_ln851_fu_357_p1;
wire   [19:0] p_Result_s_fu_339_p4;
wire   [0:0] icmp_ln851_fu_361_p2;
wire   [19:0] add_ln700_fu_367_p2;
wire   [0:0] tmp_4_fu_349_p3;
wire   [19:0] select_ln851_fu_373_p3;
wire   [0:0] icmp_ln110_fu_399_p2;
wire   [0:0] icmp_ln112_fu_404_p2;
wire   [0:0] or_ln115_fu_420_p2;
wire   [7:0] select_ln115_fu_412_p3;
wire   [7:0] trunc_ln115_fu_409_p1;
wire   [8:0] lshr_ln_fu_442_p4;
reg    grp_fu_219_ap_start;
wire    grp_fu_219_ap_done;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
end

attention_udiv_32xdS #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_udiv_32xdS_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_219_ap_start),
    .done(grp_fu_219_ap_done),
    .din0(32'd2130706432),
    .din1(v45_V_0_reg_163),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j1_0_0_reg_186 <= add_ln97_reg_490;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        j1_0_0_reg_186 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_0_reg_175 <= add_ln70_reg_463;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_175 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v45_V_0_reg_163 <= select_ln80_fu_273_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v45_V_0_reg_163 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln70_reg_463 <= add_ln70_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        add_ln97_reg_490 <= add_ln97_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_198 <= v22_0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        select_ln850_reg_506 <= select_ln850_fu_381_p3;
        tmp_5_reg_512 <= {{select_ln850_fu_381_p3[19:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        trunc_ln708_3_reg_500 <= {{mul_ln1118_fu_306_p2[43:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        udiv_ln1148_reg_478 <= grp_fu_219_p2;
        zext_ln97_reg_482[31 : 0] <= zext_ln97_fu_281_p1[31 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state40) & (icmp_ln97_fu_285_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln97_fu_285_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln70_fu_202_p2 == 1'd1))) begin
        grp_fu_219_ap_start = 1'b1;
    end else begin
        grp_fu_219_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v22_0_V_address0 = zext_ln98_fu_297_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v22_0_V_address0 = zext_ln71_fu_214_p1;
    end else begin
        v22_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state2))) begin
        v22_0_V_ce0 = 1'b1;
    end else begin
        v22_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v24_0_0_ce0 = 1'b1;
    end else begin
        v24_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (trunc_ln119_fu_438_p1 == 2'd0))) begin
        v24_0_0_we0 = 1'b1;
    end else begin
        v24_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v24_1_0_ce0 = 1'b1;
    end else begin
        v24_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (trunc_ln119_fu_438_p1 == 2'd1))) begin
        v24_1_0_we0 = 1'b1;
    end else begin
        v24_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v24_2_0_ce0 = 1'b1;
    end else begin
        v24_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (trunc_ln119_fu_438_p1 == 2'd2))) begin
        v24_2_0_we0 = 1'b1;
    end else begin
        v24_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v24_3_0_ce0 = 1'b1;
    end else begin
        v24_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (trunc_ln119_fu_438_p1 == 2'd3))) begin
        v24_3_0_we0 = 1'b1;
    end else begin
        v24_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln70_fu_202_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln97_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_fu_334_p2 = (select_ln104_fu_326_p3 + trunc_ln708_3_reg_500);

assign add_ln700_fu_367_p2 = (20'd1 + p_Result_s_fu_339_p4);

assign add_ln70_fu_208_p2 = (j_0_0_reg_175 + 11'd1);

assign add_ln97_fu_291_p2 = (j1_0_0_reg_186 + 11'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_return = udiv_ln1148_reg_478;

assign icmp_ln110_fu_399_p2 = (($signed(select_ln850_reg_506) < $signed(20'd1048448)) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_404_p2 = (($signed(tmp_5_reg_512) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_321_p2 = (($signed(trunc_ln708_3_reg_500) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_225_p2 = (($signed(reg_198) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_267_p2 = (($signed(v45_V_0_reg_163) < $signed(select_ln74_fu_259_p3)) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_202_p2 = ((j_0_0_reg_175 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_361_p2 = ((trunc_ln851_fu_357_p1 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_285_p2 = ((j1_0_0_reg_186 == 11'd1536) ? 1'b1 : 1'b0);

assign lshr_ln_fu_442_p4 = {{j1_0_0_reg_186[10:2]}};

assign mul_ln1118_fu_306_p0 = zext_ln97_reg_482;

assign mul_ln1118_fu_306_p1 = reg_198;

assign mul_ln1118_fu_306_p2 = ($signed({{1'b0}, {mul_ln1118_fu_306_p0}}) * $signed(mul_ln1118_fu_306_p1));

assign or_ln115_fu_420_p2 = (icmp_ln112_fu_404_p2 | icmp_ln110_fu_399_p2);

assign p_Result_s_fu_339_p4 = {{add_ln104_fu_334_p2[31:12]}};

assign select_ln104_fu_326_p3 = ((icmp_ln1494_1_fu_321_p2[0:0] === 1'b1) ? 32'd2048 : 32'd4294965248);

assign select_ln115_1_fu_426_p3 = ((or_ln115_fu_420_p2[0:0] === 1'b1) ? select_ln115_fu_412_p3 : trunc_ln115_fu_409_p1);

assign select_ln115_fu_412_p3 = ((icmp_ln110_fu_399_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln74_fu_259_p3 = ((icmp_ln1494_fu_225_p2[0:0] === 1'b1) ? reg_198 : trunc_ln_fu_249_p4);

assign select_ln80_fu_273_p3 = ((icmp_ln1495_fu_267_p2[0:0] === 1'b1) ? select_ln74_fu_259_p3 : v45_V_0_reg_163);

assign select_ln850_fu_381_p3 = ((tmp_4_fu_349_p3[0:0] === 1'b1) ? select_ln851_fu_373_p3 : p_Result_s_fu_339_p4);

assign select_ln851_fu_373_p3 = ((icmp_ln851_fu_361_p2[0:0] === 1'b1) ? p_Result_s_fu_339_p4 : add_ln700_fu_367_p2);

assign shl_ln_fu_231_p3 = {{reg_198}, {12'd0}};

assign sub_ln1118_fu_243_p2 = (45'd0 - zext_ln1118_fu_239_p1);

assign tmp_4_fu_349_p3 = add_ln104_fu_334_p2[32'd31];

assign trunc_ln115_fu_409_p1 = select_ln850_reg_506[7:0];

assign trunc_ln119_fu_438_p1 = j1_0_0_reg_186[1:0];

assign trunc_ln851_fu_357_p1 = add_ln104_fu_334_p2[11:0];

assign trunc_ln_fu_249_p4 = {{sub_ln1118_fu_243_p2[43:12]}};

assign v24_0_0_address0 = zext_ln119_fu_452_p1;

assign v24_0_0_d0 = select_ln115_1_fu_426_p3;

assign v24_1_0_address0 = zext_ln119_fu_452_p1;

assign v24_1_0_d0 = select_ln115_1_fu_426_p3;

assign v24_2_0_address0 = zext_ln119_fu_452_p1;

assign v24_2_0_d0 = select_ln115_1_fu_426_p3;

assign v24_3_0_address0 = zext_ln119_fu_452_p1;

assign v24_3_0_d0 = select_ln115_1_fu_426_p3;

assign zext_ln1118_fu_239_p1 = shl_ln_fu_231_p3;

assign zext_ln119_fu_452_p1 = lshr_ln_fu_442_p4;

assign zext_ln71_fu_214_p1 = j_0_0_reg_175;

assign zext_ln97_fu_281_p1 = grp_fu_219_p2;

assign zext_ln98_fu_297_p1 = j1_0_0_reg_186;

always @ (posedge ap_clk) begin
    zext_ln97_reg_482[43:32] <= 12'b000000000000;
end

endmodule //quantize_activation
