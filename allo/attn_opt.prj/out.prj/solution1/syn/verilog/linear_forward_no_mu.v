// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v77_0_0_address0,
        v77_0_0_ce0,
        v77_0_0_q0,
        v77_1_0_address0,
        v77_1_0_ce0,
        v77_1_0_q0,
        v77_2_0_address0,
        v77_2_0_ce0,
        v77_2_0_q0,
        v77_3_0_address0,
        v77_3_0_ce0,
        v77_3_0_q0,
        v78_0_V_read,
        v79_address0,
        v79_ce0,
        v79_q0,
        v80_V,
        v81_V_address0,
        v81_V_ce0,
        v81_V_we0,
        v81_V_d0
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_pp0_stage0 = 50'd4;
parameter    ap_ST_fsm_state7 = 50'd8;
parameter    ap_ST_fsm_state8 = 50'd16;
parameter    ap_ST_fsm_state9 = 50'd32;
parameter    ap_ST_fsm_state10 = 50'd64;
parameter    ap_ST_fsm_state11 = 50'd128;
parameter    ap_ST_fsm_state12 = 50'd256;
parameter    ap_ST_fsm_state13 = 50'd512;
parameter    ap_ST_fsm_state14 = 50'd1024;
parameter    ap_ST_fsm_state15 = 50'd2048;
parameter    ap_ST_fsm_state16 = 50'd4096;
parameter    ap_ST_fsm_state17 = 50'd8192;
parameter    ap_ST_fsm_state18 = 50'd16384;
parameter    ap_ST_fsm_state19 = 50'd32768;
parameter    ap_ST_fsm_state20 = 50'd65536;
parameter    ap_ST_fsm_state21 = 50'd131072;
parameter    ap_ST_fsm_state22 = 50'd262144;
parameter    ap_ST_fsm_state23 = 50'd524288;
parameter    ap_ST_fsm_state24 = 50'd1048576;
parameter    ap_ST_fsm_state25 = 50'd2097152;
parameter    ap_ST_fsm_state26 = 50'd4194304;
parameter    ap_ST_fsm_state27 = 50'd8388608;
parameter    ap_ST_fsm_state28 = 50'd16777216;
parameter    ap_ST_fsm_state29 = 50'd33554432;
parameter    ap_ST_fsm_state30 = 50'd67108864;
parameter    ap_ST_fsm_state31 = 50'd134217728;
parameter    ap_ST_fsm_state32 = 50'd268435456;
parameter    ap_ST_fsm_state33 = 50'd536870912;
parameter    ap_ST_fsm_state34 = 50'd1073741824;
parameter    ap_ST_fsm_state35 = 50'd2147483648;
parameter    ap_ST_fsm_state36 = 50'd4294967296;
parameter    ap_ST_fsm_state37 = 50'd8589934592;
parameter    ap_ST_fsm_state38 = 50'd17179869184;
parameter    ap_ST_fsm_state39 = 50'd34359738368;
parameter    ap_ST_fsm_state40 = 50'd68719476736;
parameter    ap_ST_fsm_state41 = 50'd137438953472;
parameter    ap_ST_fsm_state42 = 50'd274877906944;
parameter    ap_ST_fsm_state43 = 50'd549755813888;
parameter    ap_ST_fsm_state44 = 50'd1099511627776;
parameter    ap_ST_fsm_state45 = 50'd2199023255552;
parameter    ap_ST_fsm_state46 = 50'd4398046511104;
parameter    ap_ST_fsm_state47 = 50'd8796093022208;
parameter    ap_ST_fsm_state48 = 50'd17592186044416;
parameter    ap_ST_fsm_state49 = 50'd35184372088832;
parameter    ap_ST_fsm_state50 = 50'd70368744177664;
parameter    ap_ST_fsm_state51 = 50'd140737488355328;
parameter    ap_ST_fsm_state52 = 50'd281474976710656;
parameter    ap_ST_fsm_state53 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] v77_0_0_address0;
output   v77_0_0_ce0;
input  [7:0] v77_0_0_q0;
output  [8:0] v77_1_0_address0;
output   v77_1_0_ce0;
input  [7:0] v77_1_0_q0;
output  [8:0] v77_2_0_address0;
output   v77_2_0_ce0;
input  [7:0] v77_2_0_q0;
output  [8:0] v77_3_0_address0;
output   v77_3_0_ce0;
input  [7:0] v77_3_0_q0;
input  [31:0] v78_0_V_read;
output  [19:0] v79_address0;
output   v79_ce0;
input  [7:0] v79_q0;
input  [31:0] v80_V;
output  [10:0] v81_V_address0;
output   v81_V_ce0;
output   v81_V_we0;
output  [31:0] v81_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v77_0_0_ce0;
reg v77_1_0_ce0;
reg v77_2_0_ce0;
reg v77_3_0_ce0;
reg v79_ce0;
reg v81_V_ce0;
reg v81_V_we0;

(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [30:0] v128_V_0_reg_198;
reg   [8:0] k_0_0_reg_210;
wire  signed [42:0] sext_ln134_fu_246_p1;
reg  signed [42:0] sext_ln134_reg_647;
wire   [0:0] icmp_ln134_fu_250_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln134_fu_256_p2;
reg   [10:0] add_ln134_reg_656;
wire   [20:0] zext_ln203_fu_267_p1;
reg   [20:0] zext_ln203_reg_661;
reg   [10:0] v81_V_addr_reg_666;
wire   [0:0] icmp_ln137_fu_271_p2;
reg   [0:0] icmp_ln137_reg_671;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln137_reg_671_pp0_iter1_reg;
reg   [0:0] icmp_ln137_reg_671_pp0_iter2_reg;
wire   [8:0] add_ln137_fu_277_p2;
reg   [8:0] add_ln137_reg_675;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] trunc_ln167_fu_331_p1;
reg   [1:0] trunc_ln167_reg_685;
reg   [1:0] trunc_ln167_1_reg_696;
reg   [1:0] trunc_ln167_2_reg_707;
reg   [1:0] trunc_ln7_reg_718;
wire   [8:0] mul_ln728_fu_405_p2;
reg   [8:0] mul_ln728_reg_729;
wire   [8:0] mul_ln728_1_fu_451_p2;
reg   [8:0] mul_ln728_1_reg_734;
wire   [8:0] mul_ln728_2_fu_497_p2;
reg   [8:0] mul_ln728_2_reg_739;
wire   [8:0] mul_ln728_3_fu_543_p2;
reg   [8:0] mul_ln728_3_reg_744;
wire   [30:0] add_ln703_5_fu_623_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [10:0] j2_0_0_reg_187;
wire    ap_CS_fsm_state53;
reg   [8:0] ap_phi_mux_k_0_0_phi_fu_214_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln139_fu_262_p1;
wire  signed [63:0] sext_ln139_fu_318_p1;
wire   [63:0] zext_ln139_1_fu_323_p1;
wire  signed [31:0] mul_ln1118_fu_230_p0;
wire  signed [31:0] mul_ln1118_fu_230_p1;
wire   [43:0] mul_ln1118_fu_230_p2;
wire   [31:0] tmp_89_fu_236_p4;
wire   [19:0] tmp_14_fu_283_p3;
wire   [17:0] tmp_15_fu_295_p3;
wire   [20:0] zext_ln139_2_fu_291_p1;
wire   [20:0] zext_ln139_3_fu_303_p1;
wire   [20:0] sub_ln139_fu_307_p2;
wire   [20:0] add_ln139_fu_313_p2;
wire   [0:0] icmp_ln174_fu_365_p2;
wire   [0:0] icmp_ln180_fu_370_p2;
wire   [0:0] or_ln174_fu_383_p2;
wire   [1:0] select_ln174_fu_375_p3;
wire   [1:0] select_ln174_1_fu_389_p3;
wire  signed [7:0] mul_ln728_fu_405_p0;
wire  signed [1:0] mul_ln728_fu_405_p1;
wire   [0:0] icmp_ln174_1_fu_411_p2;
wire   [0:0] icmp_ln180_1_fu_416_p2;
wire   [0:0] or_ln174_1_fu_429_p2;
wire   [1:0] select_ln174_2_fu_421_p3;
wire   [1:0] select_ln174_3_fu_435_p3;
wire  signed [7:0] mul_ln728_1_fu_451_p0;
wire  signed [1:0] mul_ln728_1_fu_451_p1;
wire   [0:0] icmp_ln174_2_fu_457_p2;
wire   [0:0] icmp_ln180_2_fu_462_p2;
wire   [0:0] or_ln174_2_fu_475_p2;
wire   [1:0] select_ln174_4_fu_467_p3;
wire   [1:0] select_ln174_5_fu_481_p3;
wire  signed [7:0] mul_ln728_2_fu_497_p0;
wire  signed [1:0] mul_ln728_2_fu_497_p1;
wire   [0:0] icmp_ln174_3_fu_503_p2;
wire   [0:0] icmp_ln180_3_fu_508_p2;
wire   [0:0] or_ln174_3_fu_521_p2;
wire   [1:0] select_ln174_6_fu_513_p3;
wire   [1:0] select_ln174_7_fu_527_p3;
wire  signed [1:0] mul_ln728_3_fu_543_p0;
wire  signed [7:0] mul_ln728_3_fu_543_p1;
wire   [20:0] shl_ln728_1_fu_549_p3;
wire   [20:0] shl_ln728_2_fu_560_p3;
wire   [20:0] shl_ln728_3_fu_571_p3;
wire   [20:0] shl_ln728_4_fu_582_p3;
wire  signed [21:0] sext_ln728_5_fu_567_p1;
wire  signed [21:0] sext_ln728_2_fu_556_p1;
wire   [21:0] add_ln703_fu_593_p2;
wire  signed [21:0] sext_ln728_8_fu_578_p1;
wire  signed [21:0] sext_ln728_11_fu_589_p1;
wire   [21:0] add_ln703_7_fu_603_p2;
wire  signed [22:0] sext_ln703_3_fu_609_p1;
wire  signed [22:0] sext_ln703_fu_599_p1;
wire   [22:0] add_ln703_8_fu_613_p2;
wire  signed [30:0] sext_ln703_4_fu_619_p1;
wire   [42:0] grp_fu_637_p0;
wire  signed [31:0] grp_fu_637_p1;
wire   [31:0] grp_fu_637_p2;
reg    grp_fu_637_ap_start;
wire    grp_fu_637_ap_done;
reg   [49:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

attention_sdiv_43yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 47 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_sdiv_43yd2_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_637_ap_start),
    .done(grp_fu_637_ap_done),
    .din0(grp_fu_637_p0),
    .din1(grp_fu_637_p1),
    .ce(1'b1),
    .dout(grp_fu_637_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j2_0_0_reg_187 <= add_ln134_reg_656;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j2_0_0_reg_187 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_671 == 1'd0))) begin
        k_0_0_reg_210 <= add_ln137_reg_675;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd0))) begin
        k_0_0_reg_210 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_671_pp0_iter2_reg == 1'd0))) begin
        v128_V_0_reg_198 <= add_ln703_5_fu_623_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd0))) begin
        v128_V_0_reg_198 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln134_reg_656 <= add_ln134_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln137_reg_675 <= add_ln137_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln137_reg_671 <= icmp_ln137_fu_271_p2;
        icmp_ln137_reg_671_pp0_iter1_reg <= icmp_ln137_reg_671;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln137_reg_671_pp0_iter2_reg <= icmp_ln137_reg_671_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_671_pp0_iter1_reg == 1'd0))) begin
        mul_ln728_1_reg_734 <= mul_ln728_1_fu_451_p2;
        mul_ln728_2_reg_739 <= mul_ln728_2_fu_497_p2;
        mul_ln728_3_reg_744 <= mul_ln728_3_fu_543_p2;
        mul_ln728_reg_729 <= mul_ln728_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln134_reg_647 <= sext_ln134_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln137_reg_671 == 1'd0))) begin
        trunc_ln167_1_reg_696 <= {{v79_q0[3:2]}};
        trunc_ln167_2_reg_707 <= {{v79_q0[5:4]}};
        trunc_ln167_reg_685 <= trunc_ln167_fu_331_p1;
        trunc_ln7_reg_718 <= {{v79_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd0))) begin
        v81_V_addr_reg_666 <= zext_ln139_fu_262_p1;
        zext_ln203_reg_661[10 : 0] <= zext_ln203_fu_267_p1[10 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_271_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln137_reg_671 == 1'd0))) begin
        ap_phi_mux_k_0_0_phi_fu_214_p4 = add_ln137_reg_675;
    end else begin
        ap_phi_mux_k_0_0_phi_fu_214_p4 = k_0_0_reg_210;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_637_ap_start = 1'b1;
    end else begin
        grp_fu_637_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v77_0_0_ce0 = 1'b1;
    end else begin
        v77_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v77_1_0_ce0 = 1'b1;
    end else begin
        v77_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v77_2_0_ce0 = 1'b1;
    end else begin
        v77_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v77_3_0_ce0 = 1'b1;
    end else begin
        v77_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v79_ce0 = 1'b1;
    end else begin
        v79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        v81_V_ce0 = 1'b1;
    end else begin
        v81_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        v81_V_we0 = 1'b1;
    end else begin
        v81_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_250_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln137_fu_271_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln137_fu_271_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln134_fu_256_p2 = (j2_0_0_reg_187 + 11'd1);

assign add_ln137_fu_277_p2 = (ap_phi_mux_k_0_0_phi_fu_214_p4 + 9'd1);

assign add_ln139_fu_313_p2 = (zext_ln203_reg_661 + sub_ln139_fu_307_p2);

assign add_ln703_5_fu_623_p2 = ($signed(v128_V_0_reg_198) + $signed(sext_ln703_4_fu_619_p1));

assign add_ln703_7_fu_603_p2 = ($signed(sext_ln728_8_fu_578_p1) + $signed(sext_ln728_11_fu_589_p1));

assign add_ln703_8_fu_613_p2 = ($signed(sext_ln703_3_fu_609_p1) + $signed(sext_ln703_fu_599_p1));

assign add_ln703_fu_593_p2 = ($signed(sext_ln728_5_fu_567_p1) + $signed(sext_ln728_2_fu_556_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_637_p0 = {{v128_V_0_reg_198}, {12'd0}};

assign grp_fu_637_p1 = sext_ln134_reg_647;

assign icmp_ln134_fu_250_p2 = ((j2_0_0_reg_187 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_271_p2 = ((ap_phi_mux_k_0_0_phi_fu_214_p4 == 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln174_1_fu_411_p2 = ((trunc_ln167_1_reg_696 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln174_2_fu_457_p2 = ((trunc_ln167_2_reg_707 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln174_3_fu_503_p2 = ((trunc_ln7_reg_718 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_365_p2 = ((trunc_ln167_reg_685 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln180_1_fu_416_p2 = ((trunc_ln167_1_reg_696 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln180_2_fu_462_p2 = ((trunc_ln167_2_reg_707 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln180_3_fu_508_p2 = ((trunc_ln7_reg_718 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_370_p2 = ((trunc_ln167_reg_685 == 2'd2) ? 1'b1 : 1'b0);

assign mul_ln1118_fu_230_p0 = v80_V;

assign mul_ln1118_fu_230_p1 = v78_0_V_read;

assign mul_ln1118_fu_230_p2 = ($signed(mul_ln1118_fu_230_p0) * $signed(mul_ln1118_fu_230_p1));

assign mul_ln728_1_fu_451_p0 = v77_1_0_q0;

assign mul_ln728_1_fu_451_p1 = select_ln174_3_fu_435_p3;

assign mul_ln728_1_fu_451_p2 = ($signed(mul_ln728_1_fu_451_p0) * $signed(mul_ln728_1_fu_451_p1));

assign mul_ln728_2_fu_497_p0 = v77_2_0_q0;

assign mul_ln728_2_fu_497_p1 = select_ln174_5_fu_481_p3;

assign mul_ln728_2_fu_497_p2 = ($signed(mul_ln728_2_fu_497_p0) * $signed(mul_ln728_2_fu_497_p1));

assign mul_ln728_3_fu_543_p0 = select_ln174_7_fu_527_p3;

assign mul_ln728_3_fu_543_p1 = v77_3_0_q0;

assign mul_ln728_3_fu_543_p2 = ($signed(mul_ln728_3_fu_543_p0) * $signed(mul_ln728_3_fu_543_p1));

assign mul_ln728_fu_405_p0 = v77_0_0_q0;

assign mul_ln728_fu_405_p1 = select_ln174_1_fu_389_p3;

assign mul_ln728_fu_405_p2 = ($signed(mul_ln728_fu_405_p0) * $signed(mul_ln728_fu_405_p1));

assign or_ln174_1_fu_429_p2 = (icmp_ln180_1_fu_416_p2 | icmp_ln174_1_fu_411_p2);

assign or_ln174_2_fu_475_p2 = (icmp_ln180_2_fu_462_p2 | icmp_ln174_2_fu_457_p2);

assign or_ln174_3_fu_521_p2 = (icmp_ln180_3_fu_508_p2 | icmp_ln174_3_fu_503_p2);

assign or_ln174_fu_383_p2 = (icmp_ln180_fu_370_p2 | icmp_ln174_fu_365_p2);

assign select_ln174_1_fu_389_p3 = ((or_ln174_fu_383_p2[0:0] === 1'b1) ? select_ln174_fu_375_p3 : 2'd0);

assign select_ln174_2_fu_421_p3 = ((icmp_ln174_1_fu_411_p2[0:0] === 1'b1) ? 2'd1 : 2'd3);

assign select_ln174_3_fu_435_p3 = ((or_ln174_1_fu_429_p2[0:0] === 1'b1) ? select_ln174_2_fu_421_p3 : 2'd0);

assign select_ln174_4_fu_467_p3 = ((icmp_ln174_2_fu_457_p2[0:0] === 1'b1) ? 2'd1 : 2'd3);

assign select_ln174_5_fu_481_p3 = ((or_ln174_2_fu_475_p2[0:0] === 1'b1) ? select_ln174_4_fu_467_p3 : 2'd0);

assign select_ln174_6_fu_513_p3 = ((icmp_ln174_3_fu_503_p2[0:0] === 1'b1) ? 2'd1 : 2'd3);

assign select_ln174_7_fu_527_p3 = ((or_ln174_3_fu_521_p2[0:0] === 1'b1) ? select_ln174_6_fu_513_p3 : 2'd0);

assign select_ln174_fu_375_p3 = ((icmp_ln174_fu_365_p2[0:0] === 1'b1) ? 2'd1 : 2'd3);

assign sext_ln134_fu_246_p1 = $signed(tmp_89_fu_236_p4);

assign sext_ln139_fu_318_p1 = $signed(add_ln139_fu_313_p2);

assign sext_ln703_3_fu_609_p1 = $signed(add_ln703_7_fu_603_p2);

assign sext_ln703_4_fu_619_p1 = $signed(add_ln703_8_fu_613_p2);

assign sext_ln703_fu_599_p1 = $signed(add_ln703_fu_593_p2);

assign sext_ln728_11_fu_589_p1 = $signed(shl_ln728_4_fu_582_p3);

assign sext_ln728_2_fu_556_p1 = $signed(shl_ln728_1_fu_549_p3);

assign sext_ln728_5_fu_567_p1 = $signed(shl_ln728_2_fu_560_p3);

assign sext_ln728_8_fu_578_p1 = $signed(shl_ln728_3_fu_571_p3);

assign shl_ln728_1_fu_549_p3 = {{mul_ln728_reg_729}, {12'd0}};

assign shl_ln728_2_fu_560_p3 = {{mul_ln728_1_reg_734}, {12'd0}};

assign shl_ln728_3_fu_571_p3 = {{mul_ln728_2_reg_739}, {12'd0}};

assign shl_ln728_4_fu_582_p3 = {{mul_ln728_3_reg_744}, {12'd0}};

assign sub_ln139_fu_307_p2 = (zext_ln139_2_fu_291_p1 - zext_ln139_3_fu_303_p1);

assign tmp_14_fu_283_p3 = {{ap_phi_mux_k_0_0_phi_fu_214_p4}, {11'd0}};

assign tmp_15_fu_295_p3 = {{ap_phi_mux_k_0_0_phi_fu_214_p4}, {9'd0}};

assign tmp_89_fu_236_p4 = {{mul_ln1118_fu_230_p2[43:12]}};

assign trunc_ln167_fu_331_p1 = v79_q0[1:0];

assign v77_0_0_address0 = zext_ln139_1_fu_323_p1;

assign v77_1_0_address0 = zext_ln139_1_fu_323_p1;

assign v77_2_0_address0 = zext_ln139_1_fu_323_p1;

assign v77_3_0_address0 = zext_ln139_1_fu_323_p1;

assign v79_address0 = sext_ln139_fu_318_p1;

assign v81_V_address0 = v81_V_addr_reg_666;

assign v81_V_d0 = grp_fu_637_p2[31:0];

assign zext_ln139_1_fu_323_p1 = k_0_0_reg_210;

assign zext_ln139_2_fu_291_p1 = tmp_14_fu_283_p3;

assign zext_ln139_3_fu_303_p1 = tmp_15_fu_295_p3;

assign zext_ln139_fu_262_p1 = j2_0_0_reg_187;

assign zext_ln203_fu_267_p1 = j2_0_0_reg_187;

always @ (posedge ap_clk) begin
    zext_ln203_reg_661[20:11] <= 10'b0000000000;
end

endmodule //linear_forward_no_mu
