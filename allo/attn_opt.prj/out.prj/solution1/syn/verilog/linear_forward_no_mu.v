// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v77_0_address0,
        v77_0_ce0,
        v77_0_q0,
        v78_0_V_read,
        v79_address0,
        v79_ce0,
        v79_q0,
        v80_V,
        v81_V_address0,
        v81_V_ce0,
        v81_V_we0,
        v81_V_d0
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_pp0_stage0 = 51'd4;
parameter    ap_ST_fsm_state7 = 51'd8;
parameter    ap_ST_fsm_state8 = 51'd16;
parameter    ap_ST_fsm_state9 = 51'd32;
parameter    ap_ST_fsm_state10 = 51'd64;
parameter    ap_ST_fsm_state11 = 51'd128;
parameter    ap_ST_fsm_state12 = 51'd256;
parameter    ap_ST_fsm_state13 = 51'd512;
parameter    ap_ST_fsm_state14 = 51'd1024;
parameter    ap_ST_fsm_state15 = 51'd2048;
parameter    ap_ST_fsm_state16 = 51'd4096;
parameter    ap_ST_fsm_state17 = 51'd8192;
parameter    ap_ST_fsm_state18 = 51'd16384;
parameter    ap_ST_fsm_state19 = 51'd32768;
parameter    ap_ST_fsm_state20 = 51'd65536;
parameter    ap_ST_fsm_state21 = 51'd131072;
parameter    ap_ST_fsm_state22 = 51'd262144;
parameter    ap_ST_fsm_state23 = 51'd524288;
parameter    ap_ST_fsm_state24 = 51'd1048576;
parameter    ap_ST_fsm_state25 = 51'd2097152;
parameter    ap_ST_fsm_state26 = 51'd4194304;
parameter    ap_ST_fsm_state27 = 51'd8388608;
parameter    ap_ST_fsm_state28 = 51'd16777216;
parameter    ap_ST_fsm_state29 = 51'd33554432;
parameter    ap_ST_fsm_state30 = 51'd67108864;
parameter    ap_ST_fsm_state31 = 51'd134217728;
parameter    ap_ST_fsm_state32 = 51'd268435456;
parameter    ap_ST_fsm_state33 = 51'd536870912;
parameter    ap_ST_fsm_state34 = 51'd1073741824;
parameter    ap_ST_fsm_state35 = 51'd2147483648;
parameter    ap_ST_fsm_state36 = 51'd4294967296;
parameter    ap_ST_fsm_state37 = 51'd8589934592;
parameter    ap_ST_fsm_state38 = 51'd17179869184;
parameter    ap_ST_fsm_state39 = 51'd34359738368;
parameter    ap_ST_fsm_state40 = 51'd68719476736;
parameter    ap_ST_fsm_state41 = 51'd137438953472;
parameter    ap_ST_fsm_state42 = 51'd274877906944;
parameter    ap_ST_fsm_state43 = 51'd549755813888;
parameter    ap_ST_fsm_state44 = 51'd1099511627776;
parameter    ap_ST_fsm_state45 = 51'd2199023255552;
parameter    ap_ST_fsm_state46 = 51'd4398046511104;
parameter    ap_ST_fsm_state47 = 51'd8796093022208;
parameter    ap_ST_fsm_state48 = 51'd17592186044416;
parameter    ap_ST_fsm_state49 = 51'd35184372088832;
parameter    ap_ST_fsm_state50 = 51'd70368744177664;
parameter    ap_ST_fsm_state51 = 51'd140737488355328;
parameter    ap_ST_fsm_state52 = 51'd281474976710656;
parameter    ap_ST_fsm_state53 = 51'd562949953421312;
parameter    ap_ST_fsm_state54 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v77_0_address0;
output   v77_0_ce0;
input  [7:0] v77_0_q0;
input  [31:0] v78_0_V_read;
output  [19:0] v79_address0;
output   v79_ce0;
input  [7:0] v79_q0;
input  [31:0] v80_V;
output  [10:0] v81_V_address0;
output   v81_V_ce0;
output   v81_V_we0;
output  [31:0] v81_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v77_0_ce0;
reg v79_ce0;
reg v81_V_ce0;
reg v81_V_we0;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_145;
reg   [8:0] k_0_0_reg_156;
reg   [2:0] val_assign_0_reg_167;
reg   [31:0] v128_V_0_reg_178;
reg  signed [22:0] v126_V_0_reg_189;
wire  signed [43:0] sext_ln1148_fu_224_p1;
reg  signed [43:0] sext_ln1148_reg_516;
wire   [0:0] icmp_ln132_fu_228_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln132_fu_234_p2;
reg   [10:0] add_ln132_reg_525;
wire   [20:0] zext_ln203_fu_245_p1;
reg   [20:0] zext_ln203_reg_530;
reg   [10:0] v81_V_addr_reg_535;
wire   [0:0] icmp_ln135_fu_279_p2;
reg   [0:0] icmp_ln135_reg_540;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln135_reg_540_pp0_iter1_reg;
reg   [0:0] icmp_ln135_reg_540_pp0_iter2_reg;
wire   [10:0] add_ln135_2_fu_285_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln141_fu_297_p2;
reg   [0:0] icmp_ln141_reg_549;
reg   [0:0] icmp_ln141_reg_549_pp0_iter1_reg;
reg   [0:0] icmp_ln141_reg_549_pp0_iter2_reg;
wire   [2:0] select_ln135_1_fu_303_p3;
reg   [2:0] select_ln135_1_reg_555;
reg   [2:0] select_ln135_1_reg_555_pp0_iter1_reg;
wire   [20:0] add_ln135_1_fu_349_p2;
reg   [20:0] add_ln135_1_reg_561;
wire   [8:0] select_ln135_3_fu_354_p3;
reg   [8:0] select_ln135_3_reg_566;
wire   [2:0] add_ln141_fu_362_p2;
wire   [1:0] trunc_ln165_fu_408_p1;
reg   [1:0] trunc_ln165_reg_587;
reg   [7:0] v77_0_load_reg_593;
wire   [31:0] add_ln703_fu_416_p2;
reg   [31:0] add_ln703_reg_598;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] select_ln135_4_fu_429_p3;
wire   [22:0] add_ln703_3_fu_493_p2;
wire    ap_CS_fsm_state7;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [10:0] j2_0_0_reg_134;
wire    ap_CS_fsm_state54;
reg   [8:0] ap_phi_mux_k_0_0_phi_fu_160_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln136_fu_240_p1;
wire  signed [63:0] sext_ln135_fu_368_p1;
wire   [63:0] zext_ln185_fu_388_p1;
wire  signed [31:0] mul_ln1118_fu_208_p0;
wire  signed [31:0] mul_ln1118_fu_208_p1;
wire   [43:0] mul_ln1118_fu_208_p2;
wire   [31:0] trunc_ln_fu_214_p4;
wire   [19:0] tmp_s_fu_249_p3;
wire   [17:0] tmp_14_fu_261_p3;
wire   [20:0] zext_ln136_1_fu_257_p1;
wire   [20:0] zext_ln136_2_fu_269_p1;
wire   [8:0] add_ln135_fu_291_p2;
wire   [19:0] tmp_15_fu_311_p3;
wire   [17:0] tmp_16_fu_323_p3;
wire   [20:0] zext_ln136_3_fu_319_p1;
wire   [20:0] zext_ln136_4_fu_331_p1;
wire   [20:0] sub_ln136_1_fu_335_p2;
wire   [20:0] sub_ln136_fu_273_p2;
wire   [20:0] select_ln135_2_fu_341_p3;
wire   [10:0] shl_ln544_mid2_fu_372_p3;
wire   [10:0] zext_ln141_fu_379_p1;
wire   [10:0] add_ln148_fu_382_p2;
wire   [2:0] shl_ln160_fu_393_p2;
wire   [7:0] zext_ln160_fu_398_p1;
wire   [7:0] ashr_ln162_fu_402_p2;
wire  signed [31:0] sext_ln141_fu_412_p1;
wire   [0:0] icmp_ln172_fu_436_p2;
wire   [0:0] icmp_ln178_fu_441_p2;
wire   [0:0] or_ln172_fu_454_p2;
wire   [1:0] select_ln172_fu_446_p3;
wire   [1:0] select_ln172_1_fu_460_p3;
wire  signed [1:0] mul_ln728_fu_475_p0;
wire  signed [7:0] mul_ln728_fu_475_p1;
wire   [8:0] mul_ln728_fu_475_p2;
wire   [20:0] shl_ln728_1_fu_481_p3;
wire  signed [22:0] sext_ln728_2_fu_489_p1;
wire   [22:0] select_ln135_fu_422_p3;
wire   [43:0] grp_fu_506_p0;
wire  signed [31:0] grp_fu_506_p1;
wire   [31:0] grp_fu_506_p2;
reg    grp_fu_506_ap_start;
wire    grp_fu_506_ap_done;
reg   [50:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

attention_sdiv_44yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 48 ),
    .din0_WIDTH( 44 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_sdiv_44yd2_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_506_ap_start),
    .done(grp_fu_506_ap_done),
    .din0(grp_fu_506_p0),
    .din1(grp_fu_506_p1),
    .ce(1'b1),
    .dout(grp_fu_506_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln135_fu_279_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_fu_279_p2 == 1'd0))) begin
        indvar_flatten_reg_145 <= add_ln135_2_fu_285_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
        indvar_flatten_reg_145 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j2_0_0_reg_134 <= add_ln132_reg_525;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j2_0_0_reg_134 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_reg_540 == 1'd0))) begin
        k_0_0_reg_156 <= select_ln135_3_reg_566;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
        k_0_0_reg_156 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_reg_540_pp0_iter2_reg == 1'd0))) begin
        v126_V_0_reg_189 <= add_ln703_3_fu_493_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
        v126_V_0_reg_189 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_reg_540_pp0_iter2_reg == 1'd0))) begin
        v128_V_0_reg_178 <= select_ln135_4_fu_429_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
        v128_V_0_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_fu_279_p2 == 1'd0))) begin
        val_assign_0_reg_167 <= add_ln141_fu_362_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
        val_assign_0_reg_167 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln132_reg_525 <= add_ln132_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_fu_279_p2 == 1'd0))) begin
        add_ln135_1_reg_561 <= add_ln135_1_fu_349_p2;
        icmp_ln141_reg_549 <= icmp_ln141_fu_297_p2;
        select_ln135_1_reg_555 <= select_ln135_1_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln703_reg_598 <= add_ln703_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln135_reg_540 <= icmp_ln135_fu_279_p2;
        icmp_ln135_reg_540_pp0_iter1_reg <= icmp_ln135_reg_540;
        icmp_ln141_reg_549_pp0_iter1_reg <= icmp_ln141_reg_549;
        select_ln135_1_reg_555_pp0_iter1_reg <= select_ln135_1_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln135_reg_540_pp0_iter2_reg <= icmp_ln135_reg_540_pp0_iter1_reg;
        icmp_ln141_reg_549_pp0_iter2_reg <= icmp_ln141_reg_549_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_fu_279_p2 == 1'd0))) begin
        select_ln135_3_reg_566 <= select_ln135_3_fu_354_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln1148_reg_516 <= sext_ln1148_fu_224_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_reg_540_pp0_iter1_reg == 1'd0))) begin
        trunc_ln165_reg_587 <= trunc_ln165_fu_408_p1;
        v77_0_load_reg_593 <= v77_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd0))) begin
        v81_V_addr_reg_535 <= zext_ln136_fu_240_p1;
        zext_ln203_reg_530[10 : 0] <= zext_ln203_fu_245_p1[10 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln135_reg_540 == 1'd0))) begin
        ap_phi_mux_k_0_0_phi_fu_160_p4 = select_ln135_3_reg_566;
    end else begin
        ap_phi_mux_k_0_0_phi_fu_160_p4 = k_0_0_reg_156;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_506_ap_start = 1'b1;
    end else begin
        grp_fu_506_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v77_0_ce0 = 1'b1;
    end else begin
        v77_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v79_ce0 = 1'b1;
    end else begin
        v79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        v81_V_ce0 = 1'b1;
    end else begin
        v81_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        v81_V_we0 = 1'b1;
    end else begin
        v81_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln132_fu_234_p2 = (j2_0_0_reg_134 + 11'd1);

assign add_ln135_1_fu_349_p2 = (zext_ln203_reg_530 + select_ln135_2_fu_341_p3);

assign add_ln135_2_fu_285_p2 = (indvar_flatten_reg_145 + 11'd1);

assign add_ln135_fu_291_p2 = (9'd1 + ap_phi_mux_k_0_0_phi_fu_160_p4);

assign add_ln141_fu_362_p2 = (3'd1 + select_ln135_1_fu_303_p3);

assign add_ln148_fu_382_p2 = (shl_ln544_mid2_fu_372_p3 + zext_ln141_fu_379_p1);

assign add_ln703_3_fu_493_p2 = ($signed(sext_ln728_2_fu_489_p1) + $signed(select_ln135_fu_422_p3));

assign add_ln703_fu_416_p2 = ($signed(v128_V_0_reg_178) + $signed(sext_ln141_fu_412_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln162_fu_402_p2 = $signed(v79_q0) >>> zext_ln160_fu_398_p1;

assign grp_fu_506_p0 = {{add_ln703_reg_598}, {12'd0}};

assign grp_fu_506_p1 = sext_ln1148_reg_516;

assign icmp_ln132_fu_228_p2 = ((j2_0_0_reg_134 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_279_p2 = ((indvar_flatten_reg_145 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_297_p2 = ((val_assign_0_reg_167 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_436_p2 = ((trunc_ln165_reg_587 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_441_p2 = ((trunc_ln165_reg_587 == 2'd2) ? 1'b1 : 1'b0);

assign mul_ln1118_fu_208_p0 = v78_0_V_read;

assign mul_ln1118_fu_208_p1 = v80_V;

assign mul_ln1118_fu_208_p2 = ($signed(mul_ln1118_fu_208_p0) * $signed(mul_ln1118_fu_208_p1));

assign mul_ln728_fu_475_p0 = select_ln172_1_fu_460_p3;

assign mul_ln728_fu_475_p1 = v77_0_load_reg_593;

assign mul_ln728_fu_475_p2 = ($signed(mul_ln728_fu_475_p0) * $signed(mul_ln728_fu_475_p1));

assign or_ln172_fu_454_p2 = (icmp_ln178_fu_441_p2 | icmp_ln172_fu_436_p2);

assign select_ln135_1_fu_303_p3 = ((icmp_ln141_fu_297_p2[0:0] === 1'b1) ? 3'd0 : val_assign_0_reg_167);

assign select_ln135_2_fu_341_p3 = ((icmp_ln141_fu_297_p2[0:0] === 1'b1) ? sub_ln136_1_fu_335_p2 : sub_ln136_fu_273_p2);

assign select_ln135_3_fu_354_p3 = ((icmp_ln141_fu_297_p2[0:0] === 1'b1) ? add_ln135_fu_291_p2 : ap_phi_mux_k_0_0_phi_fu_160_p4);

assign select_ln135_4_fu_429_p3 = ((icmp_ln141_reg_549_pp0_iter2_reg[0:0] === 1'b1) ? add_ln703_fu_416_p2 : v128_V_0_reg_178);

assign select_ln135_fu_422_p3 = ((icmp_ln141_reg_549_pp0_iter2_reg[0:0] === 1'b1) ? 23'd0 : v126_V_0_reg_189);

assign select_ln172_1_fu_460_p3 = ((or_ln172_fu_454_p2[0:0] === 1'b1) ? select_ln172_fu_446_p3 : 2'd0);

assign select_ln172_fu_446_p3 = ((icmp_ln172_fu_436_p2[0:0] === 1'b1) ? 2'd1 : 2'd3);

assign sext_ln1148_fu_224_p1 = $signed(trunc_ln_fu_214_p4);

assign sext_ln135_fu_368_p1 = $signed(add_ln135_1_reg_561);

assign sext_ln141_fu_412_p1 = v126_V_0_reg_189;

assign sext_ln728_2_fu_489_p1 = $signed(shl_ln728_1_fu_481_p3);

assign shl_ln160_fu_393_p2 = select_ln135_1_reg_555_pp0_iter1_reg << 3'd1;

assign shl_ln544_mid2_fu_372_p3 = {{select_ln135_3_reg_566}, {2'd0}};

assign shl_ln728_1_fu_481_p3 = {{mul_ln728_fu_475_p2}, {12'd0}};

assign sub_ln136_1_fu_335_p2 = (zext_ln136_3_fu_319_p1 - zext_ln136_4_fu_331_p1);

assign sub_ln136_fu_273_p2 = (zext_ln136_1_fu_257_p1 - zext_ln136_2_fu_269_p1);

assign tmp_14_fu_261_p3 = {{ap_phi_mux_k_0_0_phi_fu_160_p4}, {9'd0}};

assign tmp_15_fu_311_p3 = {{add_ln135_fu_291_p2}, {11'd0}};

assign tmp_16_fu_323_p3 = {{add_ln135_fu_291_p2}, {9'd0}};

assign tmp_s_fu_249_p3 = {{ap_phi_mux_k_0_0_phi_fu_160_p4}, {11'd0}};

assign trunc_ln165_fu_408_p1 = ashr_ln162_fu_402_p2[1:0];

assign trunc_ln_fu_214_p4 = {{mul_ln1118_fu_208_p2[43:12]}};

assign v77_0_address0 = zext_ln185_fu_388_p1;

assign v79_address0 = sext_ln135_fu_368_p1;

assign v81_V_address0 = v81_V_addr_reg_535;

assign v81_V_d0 = grp_fu_506_p2[31:0];

assign zext_ln136_1_fu_257_p1 = tmp_s_fu_249_p3;

assign zext_ln136_2_fu_269_p1 = tmp_14_fu_261_p3;

assign zext_ln136_3_fu_319_p1 = tmp_15_fu_311_p3;

assign zext_ln136_4_fu_331_p1 = tmp_16_fu_323_p3;

assign zext_ln136_fu_240_p1 = j2_0_0_reg_134;

assign zext_ln141_fu_379_p1 = select_ln135_1_reg_555;

assign zext_ln160_fu_398_p1 = shl_ln160_fu_393_p2;

assign zext_ln185_fu_388_p1 = add_ln148_fu_382_p2;

assign zext_ln203_fu_245_p1 = j2_0_0_reg_134;

always @ (posedge ap_clk) begin
    zext_ln203_reg_530[20:11] <= 10'b0000000000;
end

endmodule //linear_forward_no_mu
