// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rms_norm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_V_address0,
        v0_V_ce0,
        v0_V_q0,
        v1_V_address0,
        v1_V_ce0,
        v1_V_q0,
        v3_0_V_address0,
        v3_0_V_ce0,
        v3_0_V_we0,
        v3_0_V_d0
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v0_V_address0;
output   v0_V_ce0;
input  [31:0] v0_V_q0;
output  [10:0] v1_V_address0;
output   v1_V_ce0;
input  [31:0] v1_V_q0;
output  [10:0] v3_0_V_address0;
output   v3_0_V_ce0;
output   v3_0_V_we0;
output  [31:0] v3_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] v0_V_address0;
reg v0_V_ce0;
reg v1_V_ce0;
reg v3_0_V_ce0;
reg v3_0_V_we0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_190;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state41;
wire   [10:0] add_ln25_fu_200_p2;
reg   [10:0] add_ln25_reg_386;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_194_p2;
reg   [31:0] trunc_ln_reg_401;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln703_fu_249_p2;
wire    ap_CS_fsm_state5;
wire   [88:0] grp_fu_223_p2;
reg   [88:0] mul_ln1148_reg_411;
wire    ap_CS_fsm_state6;
reg   [21:0] tmp_3_reg_416;
wire   [0:0] tmp_1_fu_269_p3;
reg   [0:0] tmp_1_reg_421;
wire    ap_CS_fsm_state7;
wire  signed [21:0] select_ln1148_fu_287_p3;
reg  signed [21:0] select_ln1148_reg_426;
wire   [31:0] select_ln1148_1_fu_306_p3;
reg   [31:0] select_ln1148_1_reg_432;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_pow_32_20_s_fu_163_ap_return;
wire    ap_CS_fsm_state9;
wire    grp_pow_32_20_s_fu_163_ap_ready;
wire    grp_pow_32_20_s_fu_163_ap_done;
wire  signed [43:0] sext_ln38_fu_320_p1;
reg  signed [43:0] sext_ln38_reg_442;
wire    ap_CS_fsm_state39;
wire   [10:0] add_ln38_fu_330_p2;
reg   [10:0] add_ln38_reg_450;
wire    ap_CS_fsm_state40;
wire   [63:0] zext_ln39_fu_336_p1;
reg   [63:0] zext_ln39_reg_455;
wire   [0:0] icmp_ln38_fu_324_p2;
reg   [31:0] v1_V_load_reg_470;
reg   [31:0] trunc_ln708_1_reg_475;
wire    ap_CS_fsm_state42;
reg   [31:0] trunc_ln708_2_reg_480;
wire    ap_CS_fsm_state43;
wire    grp_pow_32_20_s_fu_163_ap_start;
wire    grp_pow_32_20_s_fu_163_ap_idle;
reg   [31:0] v9_V_0_reg_129;
reg   [10:0] i_0_0_reg_141;
reg   [10:0] i1_0_0_reg_152;
wire    ap_CS_fsm_state44;
reg    grp_pow_32_20_s_fu_163_ap_start_reg;
wire   [63:0] zext_ln26_fu_206_p1;
wire  signed [43:0] shl_ln_fu_211_p3;
wire   [45:0] grp_fu_223_p0;
wire  signed [31:0] mul_ln1118_fu_233_p0;
wire  signed [43:0] sext_ln1118_fu_229_p1;
wire  signed [31:0] mul_ln1118_fu_233_p1;
wire   [43:0] mul_ln1118_fu_233_p2;
wire   [88:0] sub_ln1148_fu_264_p2;
wire   [21:0] tmp_2_fu_277_p4;
wire  signed [31:0] sext_ln703_fu_294_p1;
wire   [31:0] sub_ln703_fu_297_p2;
wire  signed [31:0] sext_ln703_1_fu_303_p1;
wire   [26:0] grp_fu_314_p0;
wire   [31:0] grp_fu_314_p2;
wire  signed [31:0] mul_ln1118_1_fu_349_p0;
wire  signed [31:0] mul_ln1118_1_fu_349_p1;
wire   [43:0] mul_ln1118_1_fu_349_p2;
wire  signed [31:0] mul_ln1118_2_fu_368_p0;
wire  signed [31:0] mul_ln1118_2_fu_368_p1;
wire   [43:0] mul_ln1118_2_fu_368_p2;
reg    grp_fu_314_ap_start;
wire    grp_fu_314_ap_done;
reg    grp_fu_314_ce;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
#0 grp_pow_32_20_s_fu_163_ap_start_reg = 1'b0;
end

pow_32_20_s grp_pow_32_20_s_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_32_20_s_fu_163_ap_start),
    .ap_done(grp_pow_32_20_s_fu_163_ap_done),
    .ap_idle(grp_pow_32_20_s_fu_163_ap_idle),
    .ap_ready(grp_pow_32_20_s_fu_163_ap_ready),
    .x_V(select_ln1148_1_reg_432),
    .y_V(32'd2048),
    .ap_return(grp_pow_32_20_s_fu_163_ap_return)
);

attention_mul_46nvdy #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 46 ),
    .din1_WIDTH( 44 ),
    .dout_WIDTH( 89 ))
attention_mul_46nvdy_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(shl_ln_fu_211_p3),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

attention_sdiv_27wdI #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_sdiv_27wdI_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_314_ap_start),
    .done(grp_fu_314_ap_done),
    .din0(grp_fu_314_p0),
    .din1(grp_pow_32_20_s_fu_163_ap_return),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_32_20_s_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_pow_32_20_s_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_pow_32_20_s_fu_163_ap_ready == 1'b1)) begin
            grp_pow_32_20_s_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i1_0_0_reg_152 <= add_ln38_reg_450;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        i1_0_0_reg_152 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_0_reg_141 <= add_ln25_reg_386;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_141 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v9_V_0_reg_129 <= add_ln703_fu_249_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v9_V_0_reg_129 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln25_reg_386 <= add_ln25_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        add_ln38_reg_450 <= add_ln38_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln1148_reg_411 <= grp_fu_223_p2;
        tmp_3_reg_416 <= {{grp_fu_223_p2[88:67]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_190 <= v0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln1148_1_reg_432 <= select_ln1148_1_fu_306_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln1148_reg_426 <= select_ln1148_fu_287_p3;
        tmp_1_reg_421 <= v9_V_0_reg_129[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        sext_ln38_reg_442 <= sext_ln38_fu_320_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        trunc_ln708_1_reg_475 <= {{mul_ln1118_1_fu_349_p2[43:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        trunc_ln708_2_reg_480 <= {{mul_ln1118_2_fu_368_p2[43:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln_reg_401 <= {{mul_ln1118_fu_233_p2[43:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        v1_V_load_reg_470 <= v1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln38_fu_324_p2 == 1'd0))) begin
        zext_ln39_reg_455[10 : 0] <= zext_ln39_fu_336_p1[10 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state40) & (icmp_ln38_fu_324_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln38_fu_324_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_pow_32_20_s_fu_163_ap_done == 1'b1))) begin
        grp_fu_314_ap_start = 1'b1;
    end else begin
        grp_fu_314_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_314_ce = 1'b0;
    end else begin
        grp_fu_314_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v0_V_address0 = zext_ln39_fu_336_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v0_V_address0 = zext_ln26_fu_206_p1;
    end else begin
        v0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state2))) begin
        v0_V_ce0 = 1'b1;
    end else begin
        v0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v1_V_ce0 = 1'b1;
    end else begin
        v1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v3_0_V_ce0 = 1'b1;
    end else begin
        v3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v3_0_V_we0 = 1'b1;
    end else begin
        v3_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_194_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_pow_32_20_s_fu_163_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln38_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_200_p2 = (i_0_0_reg_141 + 11'd1);

assign add_ln38_fu_330_p2 = (i1_0_0_reg_152 + 11'd1);

assign add_ln703_fu_249_p2 = (trunc_ln_reg_401 + v9_V_0_reg_129);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_223_p0 = 89'd23456248059222;

assign grp_fu_314_p0 = 32'd16777216;

assign grp_pow_32_20_s_fu_163_ap_start = grp_pow_32_20_s_fu_163_ap_start_reg;

assign icmp_ln25_fu_194_p2 = ((i_0_0_reg_141 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_324_p2 = ((i1_0_0_reg_152 == 11'd1536) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_349_p0 = reg_190;

assign mul_ln1118_1_fu_349_p1 = v1_V_load_reg_470;

assign mul_ln1118_1_fu_349_p2 = ($signed(mul_ln1118_1_fu_349_p0) * $signed(mul_ln1118_1_fu_349_p1));

assign mul_ln1118_2_fu_368_p0 = sext_ln38_reg_442;

assign mul_ln1118_2_fu_368_p1 = trunc_ln708_1_reg_475;

assign mul_ln1118_2_fu_368_p2 = ($signed(mul_ln1118_2_fu_368_p0) * $signed(mul_ln1118_2_fu_368_p1));

assign mul_ln1118_fu_233_p0 = sext_ln1118_fu_229_p1;

assign mul_ln1118_fu_233_p1 = sext_ln1118_fu_229_p1;

assign mul_ln1118_fu_233_p2 = ($signed(mul_ln1118_fu_233_p0) * $signed(mul_ln1118_fu_233_p1));

assign select_ln1148_1_fu_306_p3 = ((tmp_1_reg_421[0:0] === 1'b1) ? sub_ln703_fu_297_p2 : sext_ln703_1_fu_303_p1);

assign select_ln1148_fu_287_p3 = ((tmp_1_fu_269_p3[0:0] === 1'b1) ? tmp_2_fu_277_p4 : tmp_3_reg_416);

assign sext_ln1118_fu_229_p1 = $signed(reg_190);

assign sext_ln38_fu_320_p1 = $signed(grp_fu_314_p2);

assign sext_ln703_1_fu_303_p1 = select_ln1148_reg_426;

assign sext_ln703_fu_294_p1 = select_ln1148_reg_426;

assign shl_ln_fu_211_p3 = {{v9_V_0_reg_129}, {12'd0}};

assign sub_ln1148_fu_264_p2 = (89'd0 - mul_ln1148_reg_411);

assign sub_ln703_fu_297_p2 = ($signed(32'd0) - $signed(sext_ln703_fu_294_p1));

assign tmp_1_fu_269_p3 = v9_V_0_reg_129[32'd31];

assign tmp_2_fu_277_p4 = {{sub_ln1148_fu_264_p2[88:67]}};

assign v1_V_address0 = zext_ln39_fu_336_p1;

assign v3_0_V_address0 = zext_ln39_reg_455;

assign v3_0_V_d0 = trunc_ln708_2_reg_480;

assign zext_ln26_fu_206_p1 = i_0_0_reg_141;

assign zext_ln39_fu_336_p1 = i1_0_0_reg_152;

always @ (posedge ap_clk) begin
    zext_ln39_reg_455[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //rms_norm
