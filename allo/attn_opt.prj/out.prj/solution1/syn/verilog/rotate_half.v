// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rotate_half (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v141_0_V_address0,
        v141_0_V_ce0,
        v141_0_V_q0,
        v141_0_V_address1,
        v141_0_V_ce1,
        v141_0_V_q1,
        v142_0_V_address0,
        v142_0_V_ce0,
        v142_0_V_we0,
        v142_0_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v141_0_V_address0;
output   v141_0_V_ce0;
input  [31:0] v141_0_V_q0;
output  [10:0] v141_0_V_address1;
output   v141_0_V_ce1;
input  [31:0] v141_0_V_q1;
output  [10:0] v142_0_V_address0;
output   v142_0_V_ce0;
output   v142_0_V_we0;
output  [31:0] v142_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v141_0_V_ce0;
reg v141_0_V_ce1;
reg[10:0] v142_0_V_address0;
reg v142_0_V_ce0;
reg v142_0_V_we0;
reg[31:0] v142_0_V_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] h1_fu_131_p2;
reg   [4:0] h1_reg_240;
wire    ap_CS_fsm_state2;
wire   [11:0] sub_ln231_fu_157_p2;
reg   [11:0] sub_ln231_reg_245;
wire   [0:0] icmp_ln228_fu_125_p2;
wire   [5:0] add_ln230_fu_173_p2;
reg   [5:0] add_ln230_reg_254;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln231_fu_194_p1;
reg  signed [63:0] sext_ln231_reg_259;
wire   [0:0] icmp_ln230_fu_167_p2;
wire  signed [63:0] sext_ln234_fu_208_p1;
reg  signed [63:0] sext_ln234_reg_269;
reg   [31:0] v141_0_V_load_reg_279;
wire    ap_CS_fsm_state4;
reg   [4:0] h1_0_reg_103;
reg   [5:0] d1_0_0_reg_114;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_5_fu_145_p3;
wire   [11:0] tmp_s_fu_137_p3;
wire   [11:0] zext_ln231_fu_153_p1;
wire   [6:0] zext_ln230_fu_163_p1;
wire   [6:0] add_ln231_fu_179_p2;
wire   [11:0] zext_ln231_1_fu_185_p1;
wire   [11:0] add_ln231_1_fu_189_p2;
wire   [11:0] zext_ln234_fu_199_p1;
wire   [11:0] add_ln234_fu_203_p2;
wire   [43:0] shl_ln_fu_213_p3;
wire   [43:0] sub_ln1118_fu_220_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d1_0_0_reg_114 <= add_ln230_reg_254;
    end else if (((icmp_ln228_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        d1_0_0_reg_114 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln230_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h1_0_reg_103 <= h1_reg_240;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h1_0_reg_103 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln230_reg_254 <= add_ln230_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h1_reg_240 <= h1_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln230_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln231_reg_259 <= sext_ln231_fu_194_p1;
        sext_ln234_reg_269 <= sext_ln234_fu_208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln231_reg_245[11 : 5] <= sub_ln231_fu_157_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v141_0_V_load_reg_279 <= v141_0_V_q0;
    end
end

always @ (*) begin
    if ((((icmp_ln228_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln228_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v141_0_V_ce0 = 1'b1;
    end else begin
        v141_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v141_0_V_ce1 = 1'b1;
    end else begin
        v141_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v142_0_V_address0 = sext_ln234_reg_269;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v142_0_V_address0 = sext_ln231_reg_259;
    end else begin
        v142_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        v142_0_V_ce0 = 1'b1;
    end else begin
        v142_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v142_0_V_d0 = {{sub_ln1118_fu_220_p2[43:12]}};
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v142_0_V_d0 = v141_0_V_q1;
    end else begin
        v142_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        v142_0_V_we0 = 1'b1;
    end else begin
        v142_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln228_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln230_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln230_fu_173_p2 = (d1_0_0_reg_114 + 6'd1);

assign add_ln231_1_fu_189_p2 = (zext_ln231_1_fu_185_p1 + sub_ln231_reg_245);

assign add_ln231_fu_179_p2 = (zext_ln230_fu_163_p1 + 7'd48);

assign add_ln234_fu_203_p2 = (zext_ln234_fu_199_p1 + sub_ln231_reg_245);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign h1_fu_131_p2 = (h1_0_reg_103 + 5'd1);

assign icmp_ln228_fu_125_p2 = ((h1_0_reg_103 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln230_fu_167_p2 = ((d1_0_0_reg_114 == 6'd48) ? 1'b1 : 1'b0);

assign sext_ln231_fu_194_p1 = $signed(add_ln231_1_fu_189_p2);

assign sext_ln234_fu_208_p1 = $signed(add_ln234_fu_203_p2);

assign shl_ln_fu_213_p3 = {{v141_0_V_load_reg_279}, {12'd0}};

assign sub_ln1118_fu_220_p2 = (44'd0 - shl_ln_fu_213_p3);

assign sub_ln231_fu_157_p2 = (tmp_s_fu_137_p3 - zext_ln231_fu_153_p1);

assign tmp_5_fu_145_p3 = {{h1_0_reg_103}, {5'd0}};

assign tmp_s_fu_137_p3 = {{h1_0_reg_103}, {7'd0}};

assign v141_0_V_address0 = sext_ln231_fu_194_p1;

assign v141_0_V_address1 = sext_ln234_fu_208_p1;

assign zext_ln230_fu_163_p1 = d1_0_0_reg_114;

assign zext_ln231_1_fu_185_p1 = add_ln231_fu_179_p2;

assign zext_ln231_fu_153_p1 = tmp_5_fu_145_p3;

assign zext_ln234_fu_199_p1 = d1_0_0_reg_114;

always @ (posedge ap_clk) begin
    sub_ln231_reg_245[4:0] <= 5'b00000;
end

endmodule //rotate_half
