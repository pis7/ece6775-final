// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v151_V_address0,
        v151_V_ce0,
        v151_V_q0,
        v152_V_address0,
        v152_V_ce0,
        v152_V_q0,
        v153_0_V_address0,
        v153_0_V_ce0,
        v153_0_V_we0,
        v153_0_V_d0,
        v154_0_V_address0,
        v154_0_V_ce0,
        v154_0_V_we0,
        v154_0_V_d0,
        q_proj_V_0_address0,
        q_proj_V_0_ce0,
        q_proj_V_0_q0,
        q_proj_V_0_address1,
        q_proj_V_0_ce1,
        q_proj_V_0_q1,
        k_proj_V_0_address0,
        k_proj_V_0_ce0,
        k_proj_V_0_q0,
        k_proj_V_0_address1,
        k_proj_V_0_ce1,
        k_proj_V_0_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v151_V_address0;
output   v151_V_ce0;
input  [31:0] v151_V_q0;
output  [9:0] v152_V_address0;
output   v152_V_ce0;
input  [31:0] v152_V_q0;
output  [10:0] v153_0_V_address0;
output   v153_0_V_ce0;
output   v153_0_V_we0;
output  [31:0] v153_0_V_d0;
output  [10:0] v154_0_V_address0;
output   v154_0_V_ce0;
output   v154_0_V_we0;
output  [31:0] v154_0_V_d0;
output  [10:0] q_proj_V_0_address0;
output   q_proj_V_0_ce0;
input  [31:0] q_proj_V_0_q0;
output  [10:0] q_proj_V_0_address1;
output   q_proj_V_0_ce1;
input  [31:0] q_proj_V_0_q1;
output  [10:0] k_proj_V_0_address0;
output   k_proj_V_0_ce0;
input  [31:0] k_proj_V_0_q0;
output  [10:0] k_proj_V_0_address1;
output   k_proj_V_0_ce1;
input  [31:0] k_proj_V_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v151_V_ce0;
reg v152_V_ce0;
reg v153_0_V_ce0;
reg v153_0_V_we0;
reg v154_0_V_ce0;
reg v154_0_V_we0;
reg[10:0] q_proj_V_0_address0;
reg q_proj_V_0_ce0;
reg q_proj_V_0_ce1;
reg[10:0] k_proj_V_0_address0;
reg k_proj_V_0_ce0;
reg k_proj_V_0_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] v157_fu_274_p2;
reg   [4:0] v157_reg_574;
wire    ap_CS_fsm_state2;
wire   [11:0] sub_ln203_fu_300_p2;
reg   [11:0] sub_ln203_reg_579;
wire   [0:0] icmp_ln253_fu_268_p2;
wire   [6:0] add_ln255_fu_312_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] v161_fu_338_p2;
reg   [4:0] v161_reg_595;
wire    ap_CS_fsm_state4;
wire   [11:0] sub_ln203_11_fu_364_p2;
reg   [11:0] sub_ln203_11_reg_600;
wire   [0:0] icmp_ln261_fu_332_p2;
wire   [6:0] add_ln263_fu_376_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] h2_fu_402_p2;
reg   [4:0] h2_reg_616;
wire    ap_CS_fsm_state7;
wire   [11:0] sub_ln281_fu_428_p2;
reg   [11:0] sub_ln281_reg_621;
wire   [0:0] icmp_ln270_fu_396_p2;
wire   [6:0] add_ln272_fu_440_p2;
reg   [6:0] add_ln272_reg_629;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln281_fu_459_p1;
reg  signed [63:0] sext_ln281_reg_634;
wire   [0:0] icmp_ln272_fu_434_p2;
reg   [31:0] q_proj_V_0_load_reg_670;
wire    ap_CS_fsm_state9;
reg   [31:0] v151_V_load_reg_675;
wire   [31:0] rotated_q_0_V_q0;
reg   [31:0] rotated_q_0_V_load_reg_680;
reg   [31:0] v152_V_load_reg_685;
reg   [31:0] k_proj_V_0_load_reg_690;
wire   [31:0] rotated_k_0_V_q0;
reg   [31:0] rotated_k_0_V_load_reg_695;
reg   [31:0] trunc_ln_reg_700;
wire    ap_CS_fsm_state10;
reg   [31:0] trunc_ln708_s_reg_705;
reg   [31:0] trunc_ln708_1_reg_710;
reg   [31:0] trunc_ln708_2_reg_715;
reg   [10:0] rotated_q_0_V_address0;
reg    rotated_q_0_V_ce0;
reg    rotated_q_0_V_we0;
reg   [31:0] rotated_q_0_V_d0;
reg   [10:0] rotated_k_0_V_address0;
reg    rotated_k_0_V_ce0;
reg    rotated_k_0_V_we0;
reg   [31:0] rotated_k_0_V_d0;
wire    grp_rotate_half_fu_254_ap_start;
wire    grp_rotate_half_fu_254_ap_done;
wire    grp_rotate_half_fu_254_ap_idle;
wire    grp_rotate_half_fu_254_ap_ready;
wire   [10:0] grp_rotate_half_fu_254_v141_0_V_address0;
wire    grp_rotate_half_fu_254_v141_0_V_ce0;
wire   [10:0] grp_rotate_half_fu_254_v141_0_V_address1;
wire    grp_rotate_half_fu_254_v141_0_V_ce1;
wire   [10:0] grp_rotate_half_fu_254_v142_0_V_address0;
wire    grp_rotate_half_fu_254_v142_0_V_ce0;
wire    grp_rotate_half_fu_254_v142_0_V_we0;
wire   [31:0] grp_rotate_half_fu_254_v142_0_V_d0;
wire    grp_rotate_half_fu_261_ap_start;
wire    grp_rotate_half_fu_261_ap_done;
wire    grp_rotate_half_fu_261_ap_idle;
wire    grp_rotate_half_fu_261_ap_ready;
wire   [10:0] grp_rotate_half_fu_261_v141_0_V_address0;
wire    grp_rotate_half_fu_261_v141_0_V_ce0;
wire   [10:0] grp_rotate_half_fu_261_v141_0_V_address1;
wire    grp_rotate_half_fu_261_v141_0_V_ce1;
wire   [10:0] grp_rotate_half_fu_261_v142_0_V_address0;
wire    grp_rotate_half_fu_261_v142_0_V_ce0;
wire    grp_rotate_half_fu_261_v142_0_V_we0;
wire   [31:0] grp_rotate_half_fu_261_v142_0_V_d0;
reg   [4:0] v157_0_reg_188;
wire   [0:0] icmp_ln255_fu_306_p2;
reg   [6:0] v159_0_0_reg_199;
reg   [4:0] v161_0_reg_210;
wire   [0:0] icmp_ln263_fu_370_p2;
reg   [6:0] v163_0_0_reg_221;
reg   [4:0] h2_0_reg_232;
wire    ap_CS_fsm_state6;
reg    ap_block_state6_on_subcall_done;
reg   [6:0] d2_0_0_reg_243;
wire    ap_CS_fsm_state11;
reg    grp_rotate_half_fu_254_ap_start_reg;
reg    grp_rotate_half_fu_261_ap_start_reg;
wire  signed [63:0] sext_ln203_fu_327_p1;
wire  signed [63:0] sext_ln203_8_fu_391_p1;
wire   [63:0] zext_ln274_fu_473_p1;
wire   [9:0] tmp_43_fu_288_p3;
wire   [11:0] tmp_s_fu_280_p3;
wire   [11:0] zext_ln203_fu_296_p1;
wire   [11:0] zext_ln203_27_fu_318_p1;
wire   [11:0] add_ln203_fu_322_p2;
wire   [9:0] tmp_45_fu_352_p3;
wire   [11:0] tmp_44_fu_344_p3;
wire   [11:0] zext_ln203_26_fu_360_p1;
wire   [11:0] zext_ln203_28_fu_382_p1;
wire   [11:0] add_ln203_14_fu_386_p2;
wire   [9:0] tmp_47_fu_416_p3;
wire   [11:0] tmp_46_fu_408_p3;
wire   [11:0] zext_ln281_fu_424_p1;
wire   [11:0] zext_ln281_2_fu_450_p1;
wire   [11:0] add_ln281_fu_454_p2;
wire   [9:0] zext_ln281_1_fu_446_p1;
wire   [9:0] add_ln274_fu_467_p2;
wire  signed [31:0] mul_ln1118_fu_485_p0;
wire  signed [43:0] sext_ln1118_4_fu_482_p1;
wire  signed [31:0] mul_ln1118_fu_485_p1;
wire   [43:0] mul_ln1118_fu_485_p2;
wire  signed [31:0] mul_ln1118_3_fu_507_p0;
wire  signed [43:0] sext_ln1118_6_fu_504_p1;
wire  signed [31:0] mul_ln1118_3_fu_507_p1;
wire   [43:0] mul_ln1118_3_fu_507_p2;
wire  signed [31:0] mul_ln1118_4_fu_526_p0;
wire  signed [31:0] mul_ln1118_4_fu_526_p1;
wire   [43:0] mul_ln1118_4_fu_526_p2;
wire  signed [31:0] mul_ln1118_5_fu_545_p0;
wire  signed [31:0] mul_ln1118_5_fu_545_p1;
wire   [43:0] mul_ln1118_5_fu_545_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_rotate_half_fu_254_ap_start_reg = 1'b0;
#0 grp_rotate_half_fu_261_ap_start_reg = 1'b0;
end

apply_rotary_pos_zec #(
    .DataWidth( 32 ),
    .AddressRange( 1536 ),
    .AddressWidth( 11 ))
rotated_q_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_V_address0),
    .ce0(rotated_q_0_V_ce0),
    .we0(rotated_q_0_V_we0),
    .d0(rotated_q_0_V_d0),
    .q0(rotated_q_0_V_q0)
);

apply_rotary_pos_zec #(
    .DataWidth( 32 ),
    .AddressRange( 1536 ),
    .AddressWidth( 11 ))
rotated_k_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_V_address0),
    .ce0(rotated_k_0_V_ce0),
    .we0(rotated_k_0_V_we0),
    .d0(rotated_k_0_V_d0),
    .q0(rotated_k_0_V_q0)
);

rotate_half grp_rotate_half_fu_254(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_half_fu_254_ap_start),
    .ap_done(grp_rotate_half_fu_254_ap_done),
    .ap_idle(grp_rotate_half_fu_254_ap_idle),
    .ap_ready(grp_rotate_half_fu_254_ap_ready),
    .v141_0_V_address0(grp_rotate_half_fu_254_v141_0_V_address0),
    .v141_0_V_ce0(grp_rotate_half_fu_254_v141_0_V_ce0),
    .v141_0_V_q0(q_proj_V_0_q0),
    .v141_0_V_address1(grp_rotate_half_fu_254_v141_0_V_address1),
    .v141_0_V_ce1(grp_rotate_half_fu_254_v141_0_V_ce1),
    .v141_0_V_q1(q_proj_V_0_q1),
    .v142_0_V_address0(grp_rotate_half_fu_254_v142_0_V_address0),
    .v142_0_V_ce0(grp_rotate_half_fu_254_v142_0_V_ce0),
    .v142_0_V_we0(grp_rotate_half_fu_254_v142_0_V_we0),
    .v142_0_V_d0(grp_rotate_half_fu_254_v142_0_V_d0)
);

rotate_half grp_rotate_half_fu_261(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_half_fu_261_ap_start),
    .ap_done(grp_rotate_half_fu_261_ap_done),
    .ap_idle(grp_rotate_half_fu_261_ap_idle),
    .ap_ready(grp_rotate_half_fu_261_ap_ready),
    .v141_0_V_address0(grp_rotate_half_fu_261_v141_0_V_address0),
    .v141_0_V_ce0(grp_rotate_half_fu_261_v141_0_V_ce0),
    .v141_0_V_q0(k_proj_V_0_q0),
    .v141_0_V_address1(grp_rotate_half_fu_261_v141_0_V_address1),
    .v141_0_V_ce1(grp_rotate_half_fu_261_v141_0_V_ce1),
    .v141_0_V_q1(k_proj_V_0_q1),
    .v142_0_V_address0(grp_rotate_half_fu_261_v142_0_V_address0),
    .v142_0_V_ce0(grp_rotate_half_fu_261_v142_0_V_ce0),
    .v142_0_V_we0(grp_rotate_half_fu_261_v142_0_V_we0),
    .v142_0_V_d0(grp_rotate_half_fu_261_v142_0_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_half_fu_254_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln261_fu_332_p2 == 1'd1))) begin
            grp_rotate_half_fu_254_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_half_fu_254_ap_ready == 1'b1)) begin
            grp_rotate_half_fu_254_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_half_fu_261_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln261_fu_332_p2 == 1'd1))) begin
            grp_rotate_half_fu_261_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_half_fu_261_ap_ready == 1'b1)) begin
            grp_rotate_half_fu_261_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        d2_0_0_reg_243 <= add_ln272_reg_629;
    end else if (((icmp_ln270_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        d2_0_0_reg_243 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln272_fu_434_p2 == 1'd1))) begin
        h2_0_reg_232 <= h2_reg_616;
    end else if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        h2_0_reg_232 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln255_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v157_0_reg_188 <= v157_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v157_0_reg_188 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln253_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v159_0_0_reg_199 <= 7'd0;
    end else if (((icmp_ln255_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v159_0_0_reg_199 <= add_ln255_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln253_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v161_0_reg_210 <= 5'd0;
    end else if (((icmp_ln263_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        v161_0_reg_210 <= v161_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln261_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        v163_0_0_reg_221 <= 7'd0;
    end else if (((icmp_ln263_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v163_0_0_reg_221 <= add_ln263_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln272_reg_629 <= add_ln272_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h2_reg_616 <= h2_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_proj_V_0_load_reg_690 <= k_proj_V_0_q0;
        q_proj_V_0_load_reg_670 <= q_proj_V_0_q0;
        rotated_k_0_V_load_reg_695 <= rotated_k_0_V_q0;
        rotated_q_0_V_load_reg_680 <= rotated_q_0_V_q0;
        v151_V_load_reg_675 <= v151_V_q0;
        v152_V_load_reg_685 <= v152_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln272_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln281_reg_634 <= sext_ln281_fu_459_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln261_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln203_11_reg_600[11 : 5] <= sub_ln203_11_fu_364_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln253_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln203_reg_579[11 : 5] <= sub_ln203_fu_300_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln270_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sub_ln281_reg_621[11 : 5] <= sub_ln281_fu_428_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        trunc_ln708_1_reg_710 <= {{mul_ln1118_4_fu_526_p2[43:12]}};
        trunc_ln708_2_reg_715 <= {{mul_ln1118_5_fu_545_p2[43:12]}};
        trunc_ln708_s_reg_705 <= {{mul_ln1118_3_fu_507_p2[43:12]}};
        trunc_ln_reg_700 <= {{mul_ln1118_fu_485_p2[43:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v157_reg_574 <= v157_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v161_reg_595 <= v161_fu_338_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln270_fu_396_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln270_fu_396_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_proj_V_0_address0 = sext_ln281_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_V_0_address0 = grp_rotate_half_fu_261_v141_0_V_address0;
    end else begin
        k_proj_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_proj_V_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_V_0_ce0 = grp_rotate_half_fu_261_v141_0_V_ce0;
    end else begin
        k_proj_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_V_0_ce1 = grp_rotate_half_fu_261_v141_0_V_ce1;
    end else begin
        k_proj_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        q_proj_V_0_address0 = sext_ln281_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        q_proj_V_0_address0 = grp_rotate_half_fu_254_v141_0_V_address0;
    end else begin
        q_proj_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        q_proj_V_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        q_proj_V_0_ce0 = grp_rotate_half_fu_254_v141_0_V_ce0;
    end else begin
        q_proj_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        q_proj_V_0_ce1 = grp_rotate_half_fu_254_v141_0_V_ce1;
    end else begin
        q_proj_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rotated_k_0_V_address0 = sext_ln281_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_address0 = sext_ln203_8_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_V_address0 = grp_rotate_half_fu_261_v142_0_V_address0;
    end else begin
        rotated_k_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        rotated_k_0_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_V_ce0 = grp_rotate_half_fu_261_v142_0_V_ce0;
    end else begin
        rotated_k_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_V_d0 = grp_rotate_half_fu_261_v142_0_V_d0;
    end else begin
        rotated_k_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln263_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        rotated_k_0_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_V_we0 = grp_rotate_half_fu_261_v142_0_V_we0;
    end else begin
        rotated_k_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rotated_q_0_V_address0 = sext_ln281_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rotated_q_0_V_address0 = sext_ln203_fu_327_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_V_address0 = grp_rotate_half_fu_254_v142_0_V_address0;
    end else begin
        rotated_q_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        rotated_q_0_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_V_ce0 = grp_rotate_half_fu_254_v142_0_V_ce0;
    end else begin
        rotated_q_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rotated_q_0_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_V_d0 = grp_rotate_half_fu_254_v142_0_V_d0;
    end else begin
        rotated_q_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln255_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        rotated_q_0_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_V_we0 = grp_rotate_half_fu_254_v142_0_V_we0;
    end else begin
        rotated_q_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v151_V_ce0 = 1'b1;
    end else begin
        v151_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v152_V_ce0 = 1'b1;
    end else begin
        v152_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v153_0_V_ce0 = 1'b1;
    end else begin
        v153_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v153_0_V_we0 = 1'b1;
    end else begin
        v153_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v154_0_V_ce0 = 1'b1;
    end else begin
        v154_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v154_0_V_we0 = 1'b1;
    end else begin
        v154_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln253_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln255_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln261_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln263_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln270_fu_396_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln272_fu_434_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_14_fu_386_p2 = (sub_ln203_11_reg_600 + zext_ln203_28_fu_382_p1);

assign add_ln203_fu_322_p2 = (sub_ln203_reg_579 + zext_ln203_27_fu_318_p1);

assign add_ln255_fu_312_p2 = (v159_0_0_reg_199 + 7'd1);

assign add_ln263_fu_376_p2 = (v163_0_0_reg_221 + 7'd1);

assign add_ln272_fu_440_p2 = (d2_0_0_reg_243 + 7'd1);

assign add_ln274_fu_467_p2 = (zext_ln281_1_fu_446_p1 + 10'd480);

assign add_ln281_fu_454_p2 = (sub_ln281_reg_621 + zext_ln281_2_fu_450_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_rotate_half_fu_261_ap_done == 1'b0) | (grp_rotate_half_fu_254_ap_done == 1'b0));
end

assign grp_rotate_half_fu_254_ap_start = grp_rotate_half_fu_254_ap_start_reg;

assign grp_rotate_half_fu_261_ap_start = grp_rotate_half_fu_261_ap_start_reg;

assign h2_fu_402_p2 = (h2_0_reg_232 + 5'd1);

assign icmp_ln253_fu_268_p2 = ((v157_0_reg_188 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_306_p2 = ((v159_0_0_reg_199 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln261_fu_332_p2 = ((v161_0_reg_210 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln263_fu_370_p2 = ((v163_0_0_reg_221 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln270_fu_396_p2 = ((h2_0_reg_232 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_434_p2 = ((d2_0_0_reg_243 == 7'd96) ? 1'b1 : 1'b0);

assign k_proj_V_0_address1 = grp_rotate_half_fu_261_v141_0_V_address1;

assign mul_ln1118_3_fu_507_p0 = sext_ln1118_6_fu_504_p1;

assign mul_ln1118_3_fu_507_p1 = rotated_q_0_V_load_reg_680;

assign mul_ln1118_3_fu_507_p2 = ($signed(mul_ln1118_3_fu_507_p0) * $signed(mul_ln1118_3_fu_507_p1));

assign mul_ln1118_4_fu_526_p0 = sext_ln1118_4_fu_482_p1;

assign mul_ln1118_4_fu_526_p1 = k_proj_V_0_load_reg_690;

assign mul_ln1118_4_fu_526_p2 = ($signed(mul_ln1118_4_fu_526_p0) * $signed(mul_ln1118_4_fu_526_p1));

assign mul_ln1118_5_fu_545_p0 = sext_ln1118_6_fu_504_p1;

assign mul_ln1118_5_fu_545_p1 = rotated_k_0_V_load_reg_695;

assign mul_ln1118_5_fu_545_p2 = ($signed(mul_ln1118_5_fu_545_p0) * $signed(mul_ln1118_5_fu_545_p1));

assign mul_ln1118_fu_485_p0 = sext_ln1118_4_fu_482_p1;

assign mul_ln1118_fu_485_p1 = q_proj_V_0_load_reg_670;

assign mul_ln1118_fu_485_p2 = ($signed(mul_ln1118_fu_485_p0) * $signed(mul_ln1118_fu_485_p1));

assign q_proj_V_0_address1 = grp_rotate_half_fu_254_v141_0_V_address1;

assign sext_ln1118_4_fu_482_p1 = $signed(v151_V_load_reg_675);

assign sext_ln1118_6_fu_504_p1 = $signed(v152_V_load_reg_685);

assign sext_ln203_8_fu_391_p1 = $signed(add_ln203_14_fu_386_p2);

assign sext_ln203_fu_327_p1 = $signed(add_ln203_fu_322_p2);

assign sext_ln281_fu_459_p1 = $signed(add_ln281_fu_454_p2);

assign sub_ln203_11_fu_364_p2 = (tmp_44_fu_344_p3 - zext_ln203_26_fu_360_p1);

assign sub_ln203_fu_300_p2 = (tmp_s_fu_280_p3 - zext_ln203_fu_296_p1);

assign sub_ln281_fu_428_p2 = (tmp_46_fu_408_p3 - zext_ln281_fu_424_p1);

assign tmp_43_fu_288_p3 = {{v157_0_reg_188}, {5'd0}};

assign tmp_44_fu_344_p3 = {{v161_0_reg_210}, {7'd0}};

assign tmp_45_fu_352_p3 = {{v161_0_reg_210}, {5'd0}};

assign tmp_46_fu_408_p3 = {{h2_0_reg_232}, {7'd0}};

assign tmp_47_fu_416_p3 = {{h2_0_reg_232}, {5'd0}};

assign tmp_s_fu_280_p3 = {{v157_0_reg_188}, {7'd0}};

assign v151_V_address0 = zext_ln274_fu_473_p1;

assign v152_V_address0 = zext_ln274_fu_473_p1;

assign v153_0_V_address0 = sext_ln281_reg_634;

assign v153_0_V_d0 = (trunc_ln708_s_reg_705 + trunc_ln_reg_700);

assign v154_0_V_address0 = sext_ln281_reg_634;

assign v154_0_V_d0 = (trunc_ln708_2_reg_715 + trunc_ln708_1_reg_710);

assign v157_fu_274_p2 = (v157_0_reg_188 + 5'd1);

assign v161_fu_338_p2 = (v161_0_reg_210 + 5'd1);

assign zext_ln203_26_fu_360_p1 = tmp_45_fu_352_p3;

assign zext_ln203_27_fu_318_p1 = v159_0_0_reg_199;

assign zext_ln203_28_fu_382_p1 = v163_0_0_reg_221;

assign zext_ln203_fu_296_p1 = tmp_43_fu_288_p3;

assign zext_ln274_fu_473_p1 = add_ln274_fu_467_p2;

assign zext_ln281_1_fu_446_p1 = d2_0_0_reg_243;

assign zext_ln281_2_fu_450_p1 = d2_0_0_reg_243;

assign zext_ln281_fu_424_p1 = tmp_47_fu_416_p3;

always @ (posedge ap_clk) begin
    sub_ln203_reg_579[4:0] <= 5'b00000;
    sub_ln203_11_reg_600[4:0] <= 5'b00000;
    sub_ln281_reg_621[4:0] <= 5'b00000;
end

endmodule //apply_rotary_pos_emb
