// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reshape_2D_to_3D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v135_V_address0,
        v135_V_ce0,
        v135_V_q0,
        v136_0_V_address0,
        v136_0_V_ce0,
        v136_0_V_we0,
        v136_0_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v135_V_address0;
output   v135_V_ce0;
input  [31:0] v135_V_q0;
output  [10:0] v136_0_V_address0;
output   v136_0_V_ce0;
output   v136_0_V_we0;
output  [31:0] v136_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v135_V_ce0;
reg v136_0_V_ce0;
reg v136_0_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] add_ln215_fu_99_p2;
reg   [4:0] add_ln215_reg_207;
wire    ap_CS_fsm_state2;
wire   [11:0] sub_ln217_fu_133_p2;
reg   [11:0] sub_ln217_reg_212;
wire   [0:0] icmp_ln215_fu_93_p2;
wire   [11:0] sub_ln203_fu_159_p2;
reg   [11:0] sub_ln203_reg_217;
wire   [6:0] add_ln216_fu_175_p2;
reg   [6:0] add_ln216_reg_225;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln216_fu_169_p2;
wire   [11:0] add_ln203_fu_195_p2;
reg   [11:0] add_ln203_reg_235;
reg   [4:0] h_0_0_reg_71;
reg   [6:0] d_0_0_reg_82;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln217_fu_190_p1;
wire  signed [63:0] sext_ln203_fu_200_p1;
wire   [3:0] trunc_ln217_fu_105_p1;
wire   [10:0] shl_ln_fu_109_p3;
wire   [8:0] shl_ln217_1_fu_121_p3;
wire   [11:0] zext_ln217_1_fu_117_p1;
wire   [11:0] zext_ln217_2_fu_129_p1;
wire   [9:0] tmp_6_fu_147_p3;
wire   [11:0] tmp_s_fu_139_p3;
wire   [11:0] zext_ln203_fu_155_p1;
wire   [11:0] zext_ln216_fu_165_p1;
wire   [11:0] add_ln217_fu_181_p2;
wire  signed [31:0] sext_ln217_fu_186_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_0_0_reg_82 <= add_ln216_reg_225;
    end else if (((icmp_ln215_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        d_0_0_reg_82 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_0_0_reg_71 <= add_ln215_reg_207;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_0_reg_71 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln203_reg_235 <= add_ln203_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln215_reg_207 <= add_ln215_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln216_reg_225 <= add_ln216_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln215_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln203_reg_217[11 : 5] <= sub_ln203_fu_159_p2[11 : 5];
        sub_ln217_reg_212[11 : 5] <= sub_ln217_fu_133_p2[11 : 5];
    end
end

always @ (*) begin
    if ((((icmp_ln215_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln215_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v135_V_ce0 = 1'b1;
    end else begin
        v135_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v136_0_V_ce0 = 1'b1;
    end else begin
        v136_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v136_0_V_we0 = 1'b1;
    end else begin
        v136_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln215_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln216_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_195_p2 = (sub_ln203_reg_217 + zext_ln216_fu_165_p1);

assign add_ln215_fu_99_p2 = (h_0_0_reg_71 + 5'd1);

assign add_ln216_fu_175_p2 = (d_0_0_reg_82 + 7'd1);

assign add_ln217_fu_181_p2 = (zext_ln216_fu_165_p1 + sub_ln217_reg_212);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign icmp_ln215_fu_93_p2 = ((h_0_0_reg_71 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_169_p2 = ((d_0_0_reg_82 == 7'd96) ? 1'b1 : 1'b0);

assign sext_ln203_fu_200_p1 = $signed(add_ln203_reg_235);

assign sext_ln217_fu_186_p1 = $signed(add_ln217_fu_181_p2);

assign shl_ln217_1_fu_121_p3 = {{trunc_ln217_fu_105_p1}, {5'd0}};

assign shl_ln_fu_109_p3 = {{trunc_ln217_fu_105_p1}, {7'd0}};

assign sub_ln203_fu_159_p2 = (tmp_s_fu_139_p3 - zext_ln203_fu_155_p1);

assign sub_ln217_fu_133_p2 = (zext_ln217_1_fu_117_p1 - zext_ln217_2_fu_129_p1);

assign tmp_6_fu_147_p3 = {{h_0_0_reg_71}, {5'd0}};

assign tmp_s_fu_139_p3 = {{h_0_0_reg_71}, {7'd0}};

assign trunc_ln217_fu_105_p1 = h_0_0_reg_71[3:0];

assign v135_V_address0 = zext_ln217_fu_190_p1;

assign v136_0_V_address0 = sext_ln203_fu_200_p1;

assign v136_0_V_d0 = v135_V_q0;

assign zext_ln203_fu_155_p1 = tmp_6_fu_147_p3;

assign zext_ln216_fu_165_p1 = d_0_0_reg_82;

assign zext_ln217_1_fu_117_p1 = shl_ln_fu_109_p3;

assign zext_ln217_2_fu_129_p1 = shl_ln217_1_fu_121_p3;

assign zext_ln217_fu_190_p1 = $unsigned(sext_ln217_fu_186_p1);

always @ (posedge ap_clk) begin
    sub_ln217_reg_212[4:0] <= 5'b00000;
    sub_ln203_reg_217[4:0] <= 5'b00000;
end

endmodule //reshape_2D_to_3D
