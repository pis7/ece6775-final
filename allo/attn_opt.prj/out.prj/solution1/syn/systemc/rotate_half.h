// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rotate_half_HH_
#define _rotate_half_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct rotate_half : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > v141_0_V_address0;
    sc_out< sc_logic > v141_0_V_ce0;
    sc_in< sc_lv<32> > v141_0_V_q0;
    sc_out< sc_lv<11> > v141_0_V_address1;
    sc_out< sc_logic > v141_0_V_ce1;
    sc_in< sc_lv<32> > v141_0_V_q1;
    sc_out< sc_lv<11> > v142_0_V_address0;
    sc_out< sc_logic > v142_0_V_ce0;
    sc_out< sc_logic > v142_0_V_we0;
    sc_out< sc_lv<32> > v142_0_V_d0;


    // Module declarations
    rotate_half(sc_module_name name);
    SC_HAS_PROCESS(rotate_half);

    ~rotate_half();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > h1_fu_131_p2;
    sc_signal< sc_lv<5> > h1_reg_240;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > sub_ln231_fu_157_p2;
    sc_signal< sc_lv<12> > sub_ln231_reg_245;
    sc_signal< sc_lv<1> > icmp_ln228_fu_125_p2;
    sc_signal< sc_lv<6> > add_ln230_fu_173_p2;
    sc_signal< sc_lv<6> > add_ln230_reg_254;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > sext_ln231_fu_194_p1;
    sc_signal< sc_lv<64> > sext_ln231_reg_259;
    sc_signal< sc_lv<1> > icmp_ln230_fu_167_p2;
    sc_signal< sc_lv<64> > sext_ln234_fu_208_p1;
    sc_signal< sc_lv<64> > sext_ln234_reg_269;
    sc_signal< sc_lv<32> > v141_0_V_load_reg_279;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > h1_0_reg_103;
    sc_signal< sc_lv<6> > d1_0_0_reg_114;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<10> > tmp_5_fu_145_p3;
    sc_signal< sc_lv<12> > tmp_s_fu_137_p3;
    sc_signal< sc_lv<12> > zext_ln231_fu_153_p1;
    sc_signal< sc_lv<7> > zext_ln230_fu_163_p1;
    sc_signal< sc_lv<7> > add_ln231_fu_179_p2;
    sc_signal< sc_lv<12> > zext_ln231_1_fu_185_p1;
    sc_signal< sc_lv<12> > add_ln231_1_fu_189_p2;
    sc_signal< sc_lv<12> > zext_ln234_fu_199_p1;
    sc_signal< sc_lv<12> > add_ln234_fu_203_p2;
    sc_signal< sc_lv<44> > shl_ln_fu_213_p3;
    sc_signal< sc_lv<44> > sub_ln1118_fu_220_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<6> ap_const_lv6_30;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<7> ap_const_lv7_30;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<44> ap_const_lv44_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_2B;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln230_fu_173_p2();
    void thread_add_ln231_1_fu_189_p2();
    void thread_add_ln231_fu_179_p2();
    void thread_add_ln234_fu_203_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_h1_fu_131_p2();
    void thread_icmp_ln228_fu_125_p2();
    void thread_icmp_ln230_fu_167_p2();
    void thread_sext_ln231_fu_194_p1();
    void thread_sext_ln234_fu_208_p1();
    void thread_shl_ln_fu_213_p3();
    void thread_sub_ln1118_fu_220_p2();
    void thread_sub_ln231_fu_157_p2();
    void thread_tmp_5_fu_145_p3();
    void thread_tmp_s_fu_137_p3();
    void thread_v141_0_V_address0();
    void thread_v141_0_V_address1();
    void thread_v141_0_V_ce0();
    void thread_v141_0_V_ce1();
    void thread_v142_0_V_address0();
    void thread_v142_0_V_ce0();
    void thread_v142_0_V_d0();
    void thread_v142_0_V_we0();
    void thread_zext_ln230_fu_163_p1();
    void thread_zext_ln231_1_fu_185_p1();
    void thread_zext_ln231_fu_153_p1();
    void thread_zext_ln234_fu_199_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
