// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __log_75_21_s_log_acud_H__
#define __log_75_21_s_log_acud_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct log_75_21_s_log_acud_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 67;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(log_75_21_s_log_acud_ram) {
        ram[0] = "0b1111111101111100000111101111110100011001001111101110011101010000110";
        ram[1] = "0b1111111101111100000111101111110100011001001111101110011101010000110";
        ram[2] = "0b1111111101111100000111101111110100011001001111101110011101010000110";
        ram[3] = "0b0000011110011100110011011100001000001100111000010000100110001000110";
        ram[4] = "0b0000011110011100110011011100001000001100111000010000100110001000110";
        ram[5] = "0b0001000000000001101101111011001010110111011110001110110111011001011";
        ram[6] = "0b0001000000000001101101111011001010110111011110001110110111011001011";
        ram[7] = "0b0001100010101111011111010101101001110010100010000110111111111110111";
        ram[8] = "0b0001100010101111011111010101101001110010100010000110111111111110111";
        ram[9] = "0b0001100010101111011111010101101001110010100010000110111111111110111";
        ram[10] = "0b0010000110101011001111000000000101101001000001111101111100001101001";
        ram[11] = "0b0010000110101011001111000000000101101001000001111101111100001101001";
        ram[12] = "0b0010101011111010100111111101001111000001101110100100101101000111110";
        ram[13] = "0b0010101011111010100111111101001111000001101110100100101101000111110";
        ram[14] = "0b0010101011111010100111111101001111000001101110100100101101000111110";
        ram[15] = "0b0011010010100011111110010111011000101110111100101010111000101111001";
        ram[16] = "0b0011010010100011111110010111011000101110111100101010111000101111001";
        ram[17] = "0b0011010010100011111110010111011000101110111100101010111000101111001";
        ram[18] = "0b0011111010101110010101111101011010000000101001011101101001001100000";
        ram[19] = "0b0011111010101110010101111101011010000000101001011101101001001100000";
        ram[20] = "0b0011111010101110010101111101011010000000101001011101101001001100000";
        ram[21] = "0b0011111010101110010101111101011010000000101001011101101001001100000";
        ram[22] = "0b0100100100100001101001110100000111101100101011010011000100110001101";
        ram[23] = "0b0100100100100001101001110100000111101100101011010011000100110001101";
        ram[24] = "0b0100100100100001101001110100000111101100101011010011000100110001101";
        ram[25] = "0b0100100100100001101001110100000111101100101011010011000100110001101";
        ram[26] = "0b0101010000000110110101110001100111111011110011100100011010001001000";
        ram[27] = "0b0101010000000110110101110001100111111011110011100100011010001001000";
        ram[28] = "0b0101010000000110110101110001100111111011110011100100011010001001000";
        ram[29] = "0b0101010000000110110101110001100111111011110011100100011010001001000";
        ram[30] = "0b0101111101101000000001111110110001111001100100110101011100001000011";
        ram[31] = "0b0101111101101000000001111110110001111001100100110101011100001000011";
        ram[32] = "0b1011001111011000100101000001000110010100110010100010010011100000000";
        ram[33] = "0b1011001111011000100101000001000110010100110010100010010011100000000";
        ram[34] = "0b1011100111011110101011000100111001101010101001101010111101000010010";
        ram[35] = "0b1011100111011110101011000100111001101010101001101010111101000010010";
        ram[36] = "0b1100000000001001111011100010001001011100110000101001001000110110001";
        ram[37] = "0b1100000000001001111011100010001001011100110000101001001000110110001";
        ram[38] = "0b1100000000001001111011100010001001011100110000101001001000110110001";
        ram[39] = "0b1100011001011100001011110110110111100100000010101010001111111000100";
        ram[40] = "0b1100011001011100001011110110110111100100000010101010001111111000100";
        ram[41] = "0b1100011001011100001011110110110111100100000010101010001111111000100";
        ram[42] = "0b1100110011010111011010011100001100110000100100010111111001100100010";
        ram[43] = "0b1100110011010111011010011100001100110000100100010111111001100100010";
        ram[44] = "0b1101001101111101101111100001101111001010000101110011111110111111111";
        ram[45] = "0b1101001101111101101111100001101111001010000101110011111110111111111";
        ram[46] = "0b1101001101111101101111100001101111001010000101110011111110111111111";
        ram[47] = "0b1101101001010001011110010000110011011001010101001010000010111000110";
        ram[48] = "0b1101101001010001011110010000110011011001010101001010000010111000110";
        ram[49] = "0b1101101001010001011110010000110011011001010101001010000010111000110";
        ram[50] = "0b1110000101010101000101111000111011101110010011000000000101100110111";
        ram[51] = "0b1110000101010101000101111000111011101110010011000000000101100110111";
        ram[52] = "0b1110000101010101000101111000111011101110010011000000000101100110111";
        ram[53] = "0b1110000101010101000101111000111011101110010011000000000101100110111";
        ram[54] = "0b1110100010001011010011000111001000110011110100111001101110110100111";
        ram[55] = "0b1110100010001011010011000111001000110011110100111001101110110100111";
        ram[56] = "0b1110100010001011010011000111001000110011110100111001101110110100111";
        ram[57] = "0b1110111111110111000001101001110100010000100011011001010000100000000";
        ram[58] = "0b1110111111110111000001101001110100010000100011011001010000100000000";
        ram[59] = "0b1110111111110111000001101001110100010000100011011001010000100000000";
        ram[60] = "0b1110111111110111000001101001110100010000100011011001010000100000000";
        ram[61] = "0b1111011110011011011110000011100101111011001100100010011100111101100";
        ram[62] = "0b1111011110011011011110000011100101111011001100100010011100111101100";
        ram[63] = "0b1111011110011011011110000011100101111011001100100010011100111101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(log_75_21_s_log_acud) {


static const unsigned DataWidth = 67;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


log_75_21_s_log_acud_ram* meminst;


SC_CTOR(log_75_21_s_log_acud) {
meminst = new log_75_21_s_log_acud_ram("log_75_21_s_log_acud_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~log_75_21_s_log_acud() {
    delete meminst;
}


};//endmodule
#endif
