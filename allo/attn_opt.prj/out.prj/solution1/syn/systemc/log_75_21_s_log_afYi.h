// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __log_75_21_s_log_afYi_H__
#define __log_75_21_s_log_afYi_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct log_75_21_s_log_afYi_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 55;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(log_75_21_s_log_afYi_ram) {
        ram[0] = "0b0000000000000000000000000000000000000000000000000000000";
        ram[1] = "0b0000010000000000000000000111110000000000000101000101100";
        ram[2] = "0b0000100000000000000000011111100000000000101001101011001";
        ram[3] = "0b0000110000000000000001000111010000000010001101110000110";
        ram[4] = "0b0001000000000000000001111111000000000101010001010110100";
        ram[5] = "0b0001010000000000000011000110110000001010010100011100100";
        ram[6] = "0b0001100000000000000100011110100000010001110111000010110";
        ram[7] = "0b0001110000000000000110000110010000011100011001001001011";
        ram[8] = "0b0010000000000000000111111110000000101010011010110000101";
        ram[9] = "0b0010010000000000001010000101110000111100011011111000100";
        ram[10] = "0b0010100000000000001100011101100001010010111100100001100";
        ram[11] = "0b0010110000000000001111000101010001101110011100101011101";
        ram[12] = "0b0011000000000000010001111101000010001111011100010111001";
        ram[13] = "0b0011010000000000010101000100110010110110011011100100010";
        ram[14] = "0b0011100000000000011000011100100011100011111010010011100";
        ram[15] = "0b0011110000000000011100000100010100011000011000100100111";
        ram[16] = "0b0100000000000000011111111100000101010100010110011001000";
        ram[17] = "0b0100010000000000100100000011110110011000010011110000001";
        ram[18] = "0b0100100000000000101000011011100111100100110000101010101";
        ram[19] = "0b0100110000000000101101000011011000111010001101001000111";
        ram[20] = "0b0101000000000000110001111011001010011001001001001011011";
        ram[21] = "0b0101010000000000110111000010111100000010000100110010100";
        ram[22] = "0b0101100000000000111100011010101101110101011111111110111";
        ram[23] = "0b0101110000000001000010000010011111110011111010110000111";
        ram[24] = "0b0110000000000001000111111010010001111101110101001001001";
        ram[25] = "0b0110010000000001001110000010000100010011101111001000001";
        ram[26] = "0b0110100000000001010100011001110110110110001000101110011";
        ram[27] = "0b0110110000000001011011000001101001100101100001111100100";
        ram[28] = "0b0111000000000001100001111001011100100010011010110011010";
        ram[29] = "0b0111010000000001101001000001001111101101010011010011001";
        ram[30] = "0b0111100000000001110000011001000011000110101011011100111";
        ram[31] = "0b0111110000000001111000000000110110101111000011010001001";
        ram[32] = "0b1000000000000001111111111000101010100110111010110000110";
        ram[33] = "0b1000010000000010001000000000011110101110110001111100010";
        ram[34] = "0b1000100000000010010000011000010011000111001000110100100";
        ram[35] = "0b1000110000000010011001000000000111110000011111011010011";
        ram[36] = "0b1001000000000010100001110111111100101011010101101110100";
        ram[37] = "0b1001010000000010101010111111110001111000001011110001111";
        ram[38] = "0b1001100000000010110100010111100111010111100001100101010";
        ram[39] = "0b1001110000000010111101111111011101001001110111001001100";
        ram[40] = "0b1010000000000011000111110111010011001111101100011111101";
        ram[41] = "0b1010010000000011010001111111001001101001100001101000100";
        ram[42] = "0b1010100000000011011100010111000000010111110110100101001";
        ram[43] = "0b1010110000000011100110111110110111011011001011010110010";
        ram[44] = "0b1011000000000011110001110110101110110011111111111101001";
        ram[45] = "0b1011010000000011111100111110100110100010110100011010110";
        ram[46] = "0b1011100000000100001000010110011110101000001000110000000";
        ram[47] = "0b1011110000000100010011111110010111000100011100111110000";
        ram[48] = "0b1100000000000100011111110110001111111000010001000110000";
        ram[49] = "0b1100010000000100101011111110001001000100000101001000111";
        ram[50] = "0b1100100000000100111000010110000010101000011001000111111";
        ram[51] = "0b1100110000000101000100111101111100100101101101000100010";
        ram[52] = "0b1101000000000101010001110101110110111100100000111111001";
        ram[53] = "0b1101010000000101011110111101110001101101010100111001101";
        ram[54] = "0b1101100000000101101100010101101100111000101000110101000";
        ram[55] = "0b1101110000000101111001111101101000011110111100110010100";
        ram[56] = "0b1110000000000110000111110101100100100000110000110011100";
        ram[57] = "0b1110010000000110010101111101100000111110100100111001010";
        ram[58] = "0b1110100000000110100100010101011101111000111001000101001";
        ram[59] = "0b1110110000000110110010111101011011010000001101011000010";
        ram[60] = "0b1111000000000111000001110101011001000101000001110100011";
        ram[61] = "0b1111010000000111010000111101010111010111110110011010100";
        ram[62] = "0b1111100000000111100000010101010110001001001011001100010";
        ram[63] = "0b1111110000000111101111111101010101011001100000001011001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(log_75_21_s_log_afYi) {


static const unsigned DataWidth = 55;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


log_75_21_s_log_afYi_ram* meminst;


SC_CTOR(log_75_21_s_log_afYi) {
meminst = new log_75_21_s_log_afYi_ram("log_75_21_s_log_afYi_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~log_75_21_s_log_afYi() {
    delete meminst;
}


};//endmodule
#endif
