-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cache_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v185_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    v185_V_ce0 : OUT STD_LOGIC;
    v185_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v186_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v186_0_V_ce0 : OUT STD_LOGIC;
    v186_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v187_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v187_V_ce0 : OUT STD_LOGIC;
    v187_V_we0 : OUT STD_LOGIC;
    v187_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cache_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_1E0 : STD_LOGIC_VECTOR (14 downto 0) := "000000111100000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i4_fu_181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i4_reg_478 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln313_fu_203_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln313_reg_483 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln307_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln318_fu_229_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln318_reg_488 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln203_fu_265_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln203_reg_493 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_2_fu_299_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_2_reg_498 : STD_LOGIC_VECTOR (14 downto 0);
    signal j3_fu_311_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j3_reg_506 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal v191_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v191_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln308_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln313_fu_360_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln313_reg_515 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln203_2_fu_391_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln203_2_reg_520 : STD_LOGIC_VECTOR (14 downto 0);
    signal k1_fu_403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k1_reg_528 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln312_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_5_fu_427_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_5_reg_538 : STD_LOGIC_VECTOR (14 downto 0);
    signal k2_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k2_reg_546 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln317_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_4_fu_462_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_4_reg_556 : STD_LOGIC_VECTOR (14 downto 0);
    signal i4_0_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal val_assign_reg_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal k1_0_reg_153 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k2_0_reg_164 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln313_7_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln318_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_6_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_1_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_191_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln313_fu_187_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln313_1_fu_199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_217_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_209_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln318_fu_225_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_235_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_247_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_fu_243_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_3_fu_255_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_fu_259_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_269_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_281_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_5_fu_289_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_4_fu_277_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_fu_293_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln313_3_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln313_1_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln313_fu_336_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_167_fu_348_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_340_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln313_4_fu_356_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln313_2_fu_323_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_3_fu_366_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln203_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_375_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_383_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln313_6_fu_413_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln313_2_fu_417_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln313_5_fu_409_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln318_2_fu_448_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln318_fu_452_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln318_1_fu_444_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln308_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i4_0_reg_131 <= i4_reg_478;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i4_0_reg_131 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k1_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln308_fu_305_p2 = ap_const_lv1_0) and (v191_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k1_0_reg_153 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k1_0_reg_153 <= k1_reg_528;
            end if; 
        end if;
    end process;

    k2_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((v191_fu_317_p2 = ap_const_lv1_1) and (icmp_ln308_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k2_0_reg_164 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k2_0_reg_164 <= k2_reg_546;
            end if; 
        end if;
    end process;

    val_assign_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((icmp_ln312_fu_397_p2 = ap_const_lv1_1) and (v191_reg_511 = ap_const_lv1_0)) or ((v191_reg_511 = ap_const_lv1_1) and (icmp_ln317_fu_432_p2 = ap_const_lv1_1))))) then 
                val_assign_reg_142 <= j3_reg_506;
            elsif (((icmp_ln307_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                val_assign_reg_142 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln307_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln203_2_reg_498(14 downto 6) <= add_ln203_2_fu_299_p2(14 downto 6);
                add_ln313_reg_483 <= add_ln313_fu_203_p2;
                    sext_ln203_reg_493(9 downto 1) <= sext_ln203_fu_265_p1(9 downto 1);
                    sub_ln318_reg_488(11 downto 5) <= sub_ln318_fu_229_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((v191_reg_511 = ap_const_lv1_1) and (icmp_ln317_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln203_4_reg_556 <= add_ln203_4_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln312_fu_397_p2 = ap_const_lv1_0) and (v191_reg_511 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln203_5_reg_538 <= add_ln203_5_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i4_reg_478 <= i4_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j3_reg_506 <= j3_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((v191_reg_511 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                k1_reg_528 <= k1_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((v191_reg_511 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                k2_reg_546 <= k2_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln308_fu_305_p2 = ap_const_lv1_0) and (v191_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln203_2_reg_520(14 downto 5) <= sub_ln203_2_fu_391_p2(14 downto 5);
                    sub_ln313_reg_515(13 downto 5) <= sub_ln313_fu_360_p2(13 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln308_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                v191_reg_511 <= v191_fu_317_p2;
            end if;
        end if;
    end process;
    sub_ln318_reg_488(4 downto 0) <= "00000";
    sext_ln203_reg_493(0) <= '0';
    add_ln203_2_reg_498(5 downto 0) <= "100000";
    sub_ln313_reg_515(4 downto 0) <= "00000";
    sub_ln203_2_reg_520(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln307_fu_175_p2, ap_CS_fsm_state3, v191_reg_511, icmp_ln308_fu_305_p2, ap_CS_fsm_state4, icmp_ln312_fu_397_p2, icmp_ln317_fu_432_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln307_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln308_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((icmp_ln312_fu_397_p2 = ap_const_lv1_1) and (v191_reg_511 = ap_const_lv1_0)) or ((v191_reg_511 = ap_const_lv1_1) and (icmp_ln317_fu_432_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((v191_reg_511 = ap_const_lv1_1) and (icmp_ln317_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln203_2_fu_299_p2 <= std_logic_vector(unsigned(add_ln203_fu_293_p2) + unsigned(ap_const_lv15_1E0));
    add_ln203_3_fu_366_p2 <= std_logic_vector(signed(sext_ln203_reg_493) + signed(zext_ln313_2_fu_323_p1));
    add_ln203_4_fu_462_p2 <= std_logic_vector(unsigned(add_ln203_2_reg_498) + unsigned(zext_ln318_1_fu_444_p1));
    add_ln203_5_fu_427_p2 <= std_logic_vector(unsigned(sub_ln203_2_reg_520) + unsigned(zext_ln313_5_fu_409_p1));
    add_ln203_fu_293_p2 <= std_logic_vector(unsigned(zext_ln203_5_fu_289_p1) + unsigned(zext_ln203_4_fu_277_p1));
    add_ln313_1_fu_331_p2 <= std_logic_vector(unsigned(add_ln313_reg_483) + unsigned(zext_ln313_3_fu_327_p1));
    add_ln313_2_fu_417_p2 <= std_logic_vector(unsigned(sub_ln313_reg_515) + unsigned(zext_ln313_6_fu_413_p1));
    add_ln313_fu_203_p2 <= std_logic_vector(unsigned(zext_ln313_fu_187_p1) + unsigned(zext_ln313_1_fu_199_p1));
    add_ln318_fu_452_p2 <= std_logic_vector(unsigned(sub_ln318_reg_488) + unsigned(zext_ln318_2_fu_448_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln307_fu_175_p2)
    begin
        if ((((icmp_ln307_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln307_fu_175_p2)
    begin
        if (((icmp_ln307_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i4_fu_181_p2 <= std_logic_vector(unsigned(i4_0_reg_131) + unsigned(ap_const_lv5_1));
    icmp_ln307_fu_175_p2 <= "1" when (i4_0_reg_131 = ap_const_lv5_10) else "0";
    icmp_ln308_fu_305_p2 <= "1" when (val_assign_reg_142 = ap_const_lv3_6) else "0";
    icmp_ln312_fu_397_p2 <= "1" when (k1_0_reg_153 = ap_const_lv7_60) else "0";
    icmp_ln317_fu_432_p2 <= "1" when (k2_0_reg_164 = ap_const_lv7_60) else "0";
    j3_fu_311_p2 <= std_logic_vector(unsigned(val_assign_reg_142) + unsigned(ap_const_lv3_1));
    k1_fu_403_p2 <= std_logic_vector(unsigned(k1_0_reg_153) + unsigned(ap_const_lv7_1));
    k2_fu_438_p2 <= std_logic_vector(unsigned(k2_0_reg_164) + unsigned(ap_const_lv7_1));
    p_shl8_cast_fu_375_p3 <= (trunc_ln203_fu_371_p1 & ap_const_lv7_0);
    p_shl9_cast_fu_383_p3 <= (add_ln203_3_fu_366_p2 & ap_const_lv5_0);
    p_shl_cast_fu_340_p3 <= (trunc_ln313_fu_336_p1 & ap_const_lv7_0);
        sext_ln203_1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_4_reg_556),64));

        sext_ln203_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln203_fu_259_p2),10));

        sext_ln318_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln318_fu_452_p2),64));

    sub_ln203_2_fu_391_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_375_p3) - unsigned(p_shl9_cast_fu_383_p3));
    sub_ln203_fu_259_p2 <= std_logic_vector(unsigned(zext_ln203_fu_243_p1) - unsigned(zext_ln203_3_fu_255_p1));
    sub_ln313_fu_360_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_340_p3) - unsigned(zext_ln313_4_fu_356_p1));
    sub_ln318_fu_229_p2 <= std_logic_vector(unsigned(tmp_17_fu_209_p3) - unsigned(zext_ln318_fu_225_p1));
    tmp_167_fu_348_p3 <= (add_ln313_1_fu_331_p2 & ap_const_lv5_0);
    tmp_17_fu_209_p3 <= (i4_0_reg_131 & ap_const_lv7_0);
    tmp_18_fu_217_p3 <= (i4_0_reg_131 & ap_const_lv5_0);
    tmp_19_fu_235_p3 <= (i4_0_reg_131 & ap_const_lv3_0);
    tmp_20_fu_247_p3 <= (i4_0_reg_131 & ap_const_lv1_0);
    tmp_21_fu_269_p3 <= (i4_0_reg_131 & ap_const_lv9_0);
    tmp_22_fu_281_p3 <= (i4_0_reg_131 & ap_const_lv6_0);
    tmp_s_fu_191_p3 <= (i4_0_reg_131 & ap_const_lv2_0);
    trunc_ln203_fu_371_p1 <= add_ln203_3_fu_366_p2(8 - 1 downto 0);
    trunc_ln313_fu_336_p1 <= add_ln313_1_fu_331_p2(7 - 1 downto 0);
    v185_V_address0 <= zext_ln313_7_fu_422_p1(13 - 1 downto 0);

    v185_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v185_V_ce0 <= ap_const_logic_1;
        else 
            v185_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v186_0_V_address0 <= sext_ln318_fu_457_p1(11 - 1 downto 0);

    v186_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v186_0_V_ce0 <= ap_const_logic_1;
        else 
            v186_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v187_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln203_6_fu_467_p1, sext_ln203_1_fu_471_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v187_V_address0 <= sext_ln203_1_fu_471_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v187_V_address0 <= zext_ln203_6_fu_467_p1(14 - 1 downto 0);
        else 
            v187_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    v187_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            v187_V_ce0 <= ap_const_logic_1;
        else 
            v187_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v187_V_d0_assign_proc : process(v185_V_q0, v186_0_V_q0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v187_V_d0 <= v186_0_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v187_V_d0 <= v185_V_q0;
        else 
            v187_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v187_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            v187_V_we0 <= ap_const_logic_1;
        else 
            v187_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v191_fu_317_p2 <= "1" when (val_assign_reg_142 = ap_const_lv3_5) else "0";
    zext_ln203_3_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_247_p3),9));
    zext_ln203_4_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_269_p3),15));
    zext_ln203_5_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_281_p3),15));
    zext_ln203_6_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_5_reg_538),64));
    zext_ln203_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_235_p3),9));
    zext_ln313_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_191_p3),8));
    zext_ln313_2_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_142),10));
    zext_ln313_3_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_142),8));
    zext_ln313_4_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_348_p3),14));
    zext_ln313_5_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_153),15));
    zext_ln313_6_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_153),14));
    zext_ln313_7_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln313_2_fu_417_p2),64));
    zext_ln313_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_131),8));
    zext_ln318_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k2_0_reg_164),15));
    zext_ln318_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k2_0_reg_164),12));
    zext_ln318_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_217_p3),12));
end behav;
