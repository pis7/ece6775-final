-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rotate_half is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v141_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v141_0_V_ce0 : OUT STD_LOGIC;
    v141_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v141_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v141_0_V_ce1 : OUT STD_LOGIC;
    v141_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v142_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v142_0_V_ce0 : OUT STD_LOGIC;
    v142_0_V_we0 : OUT STD_LOGIC;
    v142_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of rotate_half is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h1_fu_131_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h1_reg_240 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln231_fu_157_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln231_reg_245 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln228_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln230_fu_173_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln230_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln231_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln231_reg_259 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln230_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln234_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln234_reg_269 : STD_LOGIC_VECTOR (63 downto 0);
    signal v141_0_V_load_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h1_0_reg_103 : STD_LOGIC_VECTOR (4 downto 0);
    signal d1_0_0_reg_114 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_fu_145_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_137_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln231_fu_153_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln230_fu_163_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln231_fu_179_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln231_1_fu_185_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln231_1_fu_189_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln234_fu_199_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln234_fu_203_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_213_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal sub_ln1118_fu_220_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d1_0_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d1_0_0_reg_114 <= add_ln230_reg_254;
            elsif (((icmp_ln228_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                d1_0_0_reg_114 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h1_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln230_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h1_0_reg_103 <= h1_reg_240;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h1_0_reg_103 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln230_reg_254 <= add_ln230_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h1_reg_240 <= h1_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln230_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln231_reg_259 <= sext_ln231_fu_194_p1;
                sext_ln234_reg_269 <= sext_ln234_fu_208_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln231_reg_245(11 downto 5) <= sub_ln231_fu_157_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v141_0_V_load_reg_279 <= v141_0_V_q0;
            end if;
        end if;
    end process;
    sub_ln231_reg_245(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln228_fu_125_p2, ap_CS_fsm_state3, icmp_ln230_fu_167_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln228_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln230_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln230_fu_173_p2 <= std_logic_vector(unsigned(d1_0_0_reg_114) + unsigned(ap_const_lv6_1));
    add_ln231_1_fu_189_p2 <= std_logic_vector(unsigned(zext_ln231_1_fu_185_p1) + unsigned(sub_ln231_reg_245));
    add_ln231_fu_179_p2 <= std_logic_vector(unsigned(zext_ln230_fu_163_p1) + unsigned(ap_const_lv7_30));
    add_ln234_fu_203_p2 <= std_logic_vector(unsigned(zext_ln234_fu_199_p1) + unsigned(sub_ln231_reg_245));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln228_fu_125_p2)
    begin
        if ((((icmp_ln228_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln228_fu_125_p2)
    begin
        if (((icmp_ln228_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    h1_fu_131_p2 <= std_logic_vector(unsigned(h1_0_reg_103) + unsigned(ap_const_lv5_1));
    icmp_ln228_fu_125_p2 <= "1" when (h1_0_reg_103 = ap_const_lv5_10) else "0";
    icmp_ln230_fu_167_p2 <= "1" when (d1_0_0_reg_114 = ap_const_lv6_30) else "0";
        sext_ln231_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln231_1_fu_189_p2),64));

        sext_ln234_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln234_fu_203_p2),64));

    shl_ln_fu_213_p3 <= (v141_0_V_load_reg_279 & ap_const_lv12_0);
    sub_ln1118_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv44_0) - unsigned(shl_ln_fu_213_p3));
    sub_ln231_fu_157_p2 <= std_logic_vector(unsigned(tmp_s_fu_137_p3) - unsigned(zext_ln231_fu_153_p1));
    tmp_5_fu_145_p3 <= (h1_0_reg_103 & ap_const_lv5_0);
    tmp_s_fu_137_p3 <= (h1_0_reg_103 & ap_const_lv7_0);
    v141_0_V_address0 <= sext_ln231_fu_194_p1(11 - 1 downto 0);
    v141_0_V_address1 <= sext_ln234_fu_208_p1(11 - 1 downto 0);

    v141_0_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v141_0_V_ce0 <= ap_const_logic_1;
        else 
            v141_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v141_0_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v141_0_V_ce1 <= ap_const_logic_1;
        else 
            v141_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v142_0_V_address0_assign_proc : process(sext_ln231_reg_259, sext_ln234_reg_269, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v142_0_V_address0 <= sext_ln234_reg_269(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v142_0_V_address0 <= sext_ln231_reg_259(11 - 1 downto 0);
        else 
            v142_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    v142_0_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            v142_0_V_ce0 <= ap_const_logic_1;
        else 
            v142_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v142_0_V_d0_assign_proc : process(v141_0_V_q1, ap_CS_fsm_state4, ap_CS_fsm_state5, sub_ln1118_fu_220_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v142_0_V_d0 <= sub_ln1118_fu_220_p2(43 downto 12);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v142_0_V_d0 <= v141_0_V_q1;
        else 
            v142_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v142_0_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            v142_0_V_we0 <= ap_const_logic_1;
        else 
            v142_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln230_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d1_0_0_reg_114),7));
    zext_ln231_1_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_179_p2),12));
    zext_ln231_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_145_p3),12));
    zext_ln234_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d1_0_0_reg_114),12));
end behav;
