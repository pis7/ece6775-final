-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_core_32_20_54_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (53 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of exp_core_32_20_54_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv49_1E2804E87B33E : STD_LOGIC_VECTOR (48 downto 0) := "1111000101000000001001110100001111011001100111110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv47_400 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_const_lv44_400 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_const_lv45_400 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_const_lv43_400 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_4_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_table_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal trunc_ln703_fu_260_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln703_reg_1216 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1221_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_1227 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1227_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1227_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1227_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1227_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1227_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_1227_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_reg_1232 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1232_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1232_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1232_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1232_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_580_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1238 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1238_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1238_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1238_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_1238_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1249 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_1254 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_reg_1259 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1259_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1259_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1259_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1259_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln1314_8_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_8_reg_1270_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_17_reg_1275_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1280_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1280_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1280_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1286_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1286_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_V_reg_1286_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_3_4_lsb_s_V_reg_1302 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln731_fu_924_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln731_reg_1312 : STD_LOGIC_VECTOR (46 downto 0);
    signal ret_V_9_fu_947_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_9_reg_1317 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_9_reg_1317_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_9_reg_1317_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln612_1_fu_953_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1323 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1323_pp0_iter6_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_1_reg_1323_pp0_iter7_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_fu_957_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_reg_1329 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_s_reg_1329_pp0_iter7_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal f_x_msb_2_3_4_lsb_s_s_reg_1344 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_2_3_4_lsb_s_reg_1354 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1359 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1359_pp0_iter9_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1359_pp0_iter10_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_reg_1375 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln703_1_fu_1114_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln703_1_reg_1380 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln703_2_fu_1118_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln703_2_reg_1385 : STD_LOGIC_VECTOR (44 downto 0);
    signal icmp_ln1513_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1513_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1513_1_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1513_1_reg_1395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_1_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_3_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_l_V_fu_256_p0 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln703_fu_260_p0 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_29_fu_264_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln612_fu_274_p0 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln612_fu_274_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_fu_286_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal x_l_V_fu_256_p1 : STD_LOGIC_VECTOR (72 downto 0);
    signal p_Result_s_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_392_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_89_fu_434_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_560_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_570_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_1_fu_580_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_2_fu_590_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_2_fu_590_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln708_fu_605_p0 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln708_fu_605_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_msb_5_lsb_V_fu_609_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_36_fu_625_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_36_fu_625_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_36_fu_625_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_29_fu_264_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_30_fu_278_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal icmp_ln1314_1_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1314_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_3_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_4_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_1_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_2_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_5_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_6_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_8_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_9_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_5_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_7_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_6_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_4_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_7_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_3_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_10_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_11_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_13_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_14_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_10_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_12_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_11_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_9_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_15_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_16_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_18_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1314_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_14_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1311_17_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_15_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_13_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_16_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_12_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_799_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln703_fu_802_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_4_5_lsb_m_s_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_812_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_msb_4_5_lsb_V_fu_792_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln703_2_fu_825_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln728_fu_821_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ret_V_fu_829_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_Result_34_fu_853_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_33_fu_845_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_869_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_869_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_869_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal rhs_V_fu_892_p5 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln_fu_906_p4 : STD_LOGIC_VECTOR (41 downto 0);
    signal lhs_V_8_fu_889_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln728_8_fu_902_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln1192_fu_914_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln731_1_fu_918_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Result_35_fu_930_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_9_fu_940_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_8_fu_944_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_36_fu_964_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_978_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_978_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_978_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal p_Result_31_fu_984_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_9_fu_1008_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_V_10_fu_1005_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln728_9_fu_1016_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln703_7_fu_1026_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_10_fu_1020_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_11_fu_1029_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_1051_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_1051_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_1051_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal zext_ln703_8_fu_1067_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_1070_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xor_ln1315_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1314_18_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1315_fu_1090_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln9_fu_1075_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_67_fu_1102_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln1314_fu_1110_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln703_3_fu_1122_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal y_V_fu_1126_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_164_fu_1138_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln703_102_fu_1132_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_166_fu_1154_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln703_103_fu_1170_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_165_fu_1175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1513_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_1193_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal or_ln1513_1_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1198_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1051_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_1051_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_869_p00 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_869_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_978_p00 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_978_p10 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_36_fu_625_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_36_fu_625_p10 : STD_LOGIC_VECTOR (18 downto 0);

    component attention_mul_36nrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component attention_mul_48nsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component attention_mul_50ntde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component exp_core_32_20_54ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component exp_core_32_20_54ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component exp_core_32_20_54pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component exp_core_32_20_54qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_4_table_V_U : component exp_core_32_20_54ncg
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_table_V_address0,
        ce0 => f_x_msb_4_table_V_ce0,
        q0 => f_x_msb_4_table_V_q0);

    f_x_msb_3_table_V_U : component exp_core_32_20_54ocq
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component exp_core_32_20_54pcA
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component exp_core_32_20_54qcK
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    attention_mul_36nrcU_U20 : component attention_mul_36nrcU
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 36,
        din1_WIDTH => 44,
        dout_WIDTH => 80)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_869_p0,
        din1 => grp_fu_869_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_869_p2);

    attention_mul_48nsc4_U21 : component attention_mul_48nsc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 48,
        din1_WIDTH => 50,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_978_p0,
        din1 => grp_fu_978_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_978_p2);

    attention_mul_50ntde_U22 : component attention_mul_50ntde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1051_p0,
        din1 => grp_fu_1051_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1051_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln731_reg_1312 <= add_ln731_fu_924_p2;
                exp_x_msb_1_V_reg_1359 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_1359_pp0_iter10_reg <= exp_x_msb_1_V_reg_1359_pp0_iter9_reg;
                exp_x_msb_1_V_reg_1359_pp0_iter9_reg <= exp_x_msb_1_V_reg_1359;
                exp_x_msb_2_3_4_lsb_s_reg_1354 <= ret_V_11_fu_1029_p2(55 downto 6);
                    exp_x_msb_3_4_lsb_m_s_reg_1329(47 downto 1) <= exp_x_msb_3_4_lsb_m_s_fu_957_p3(47 downto 1);
                    exp_x_msb_3_4_lsb_m_s_reg_1329_pp0_iter7_reg(47 downto 1) <= exp_x_msb_3_4_lsb_m_s_reg_1329(47 downto 1);
                f_x_msb_2_3_4_lsb_s_s_reg_1344 <= grp_fu_978_p2(97 downto 52);
                f_x_msb_3_4_lsb_s_V_reg_1302 <= grp_fu_869_p2(79 downto 49);
                f_x_msb_3_V_reg_1286_pp0_iter2_reg <= f_x_msb_3_V_reg_1286;
                f_x_msb_3_V_reg_1286_pp0_iter3_reg <= f_x_msb_3_V_reg_1286_pp0_iter2_reg;
                f_x_msb_3_V_reg_1286_pp0_iter4_reg <= f_x_msb_3_V_reg_1286_pp0_iter3_reg;
                icmp_ln1513_1_reg_1395 <= icmp_ln1513_1_fu_1164_p2;
                icmp_ln1513_reg_1390 <= icmp_ln1513_fu_1148_p2;
                or_ln1314_17_reg_1275_pp0_iter10_reg <= or_ln1314_17_reg_1275_pp0_iter9_reg;
                or_ln1314_17_reg_1275_pp0_iter2_reg <= or_ln1314_17_reg_1275_pp0_iter1_reg;
                or_ln1314_17_reg_1275_pp0_iter3_reg <= or_ln1314_17_reg_1275_pp0_iter2_reg;
                or_ln1314_17_reg_1275_pp0_iter4_reg <= or_ln1314_17_reg_1275_pp0_iter3_reg;
                or_ln1314_17_reg_1275_pp0_iter5_reg <= or_ln1314_17_reg_1275_pp0_iter4_reg;
                or_ln1314_17_reg_1275_pp0_iter6_reg <= or_ln1314_17_reg_1275_pp0_iter5_reg;
                or_ln1314_17_reg_1275_pp0_iter7_reg <= or_ln1314_17_reg_1275_pp0_iter6_reg;
                or_ln1314_17_reg_1275_pp0_iter8_reg <= or_ln1314_17_reg_1275_pp0_iter7_reg;
                or_ln1314_17_reg_1275_pp0_iter9_reg <= or_ln1314_17_reg_1275_pp0_iter8_reg;
                or_ln1314_8_reg_1270_pp0_iter10_reg <= or_ln1314_8_reg_1270_pp0_iter9_reg;
                or_ln1314_8_reg_1270_pp0_iter2_reg <= or_ln1314_8_reg_1270_pp0_iter1_reg;
                or_ln1314_8_reg_1270_pp0_iter3_reg <= or_ln1314_8_reg_1270_pp0_iter2_reg;
                or_ln1314_8_reg_1270_pp0_iter4_reg <= or_ln1314_8_reg_1270_pp0_iter3_reg;
                or_ln1314_8_reg_1270_pp0_iter5_reg <= or_ln1314_8_reg_1270_pp0_iter4_reg;
                or_ln1314_8_reg_1270_pp0_iter6_reg <= or_ln1314_8_reg_1270_pp0_iter5_reg;
                or_ln1314_8_reg_1270_pp0_iter7_reg <= or_ln1314_8_reg_1270_pp0_iter6_reg;
                or_ln1314_8_reg_1270_pp0_iter8_reg <= or_ln1314_8_reg_1270_pp0_iter7_reg;
                or_ln1314_8_reg_1270_pp0_iter9_reg <= or_ln1314_8_reg_1270_pp0_iter8_reg;
                p_Result_18_reg_1227_pp0_iter2_reg <= p_Result_18_reg_1227_pp0_iter1_reg;
                p_Result_18_reg_1227_pp0_iter3_reg <= p_Result_18_reg_1227_pp0_iter2_reg;
                p_Result_18_reg_1227_pp0_iter4_reg <= p_Result_18_reg_1227_pp0_iter3_reg;
                p_Result_18_reg_1227_pp0_iter5_reg <= p_Result_18_reg_1227_pp0_iter4_reg;
                p_Result_18_reg_1227_pp0_iter6_reg <= p_Result_18_reg_1227_pp0_iter5_reg;
                ret_V_9_reg_1317 <= ret_V_9_fu_947_p2;
                ret_V_9_reg_1317_pp0_iter6_reg <= ret_V_9_reg_1317;
                ret_V_9_reg_1317_pp0_iter7_reg <= ret_V_9_reg_1317_pp0_iter6_reg;
                tmp_14_reg_1280_pp0_iter2_reg <= tmp_14_reg_1280;
                tmp_14_reg_1280_pp0_iter3_reg <= tmp_14_reg_1280_pp0_iter2_reg;
                tmp_14_reg_1280_pp0_iter4_reg <= tmp_14_reg_1280_pp0_iter3_reg;
                tmp_15_reg_1259_pp0_iter2_reg <= tmp_15_reg_1259_pp0_iter1_reg;
                tmp_15_reg_1259_pp0_iter3_reg <= tmp_15_reg_1259_pp0_iter2_reg;
                tmp_15_reg_1259_pp0_iter4_reg <= tmp_15_reg_1259_pp0_iter3_reg;
                tmp_V_1_reg_1238_pp0_iter2_reg <= tmp_V_1_reg_1238_pp0_iter1_reg;
                tmp_V_1_reg_1238_pp0_iter3_reg <= tmp_V_1_reg_1238_pp0_iter2_reg;
                tmp_V_1_reg_1238_pp0_iter4_reg <= tmp_V_1_reg_1238_pp0_iter3_reg;
                tmp_V_reg_1232_pp0_iter2_reg <= tmp_V_reg_1232_pp0_iter1_reg;
                tmp_V_reg_1232_pp0_iter3_reg <= tmp_V_reg_1232_pp0_iter2_reg;
                tmp_V_reg_1232_pp0_iter4_reg <= tmp_V_reg_1232_pp0_iter3_reg;
                tmp_reg_1221_pp0_iter10_reg <= tmp_reg_1221_pp0_iter9_reg;
                tmp_reg_1221_pp0_iter2_reg <= tmp_reg_1221_pp0_iter1_reg;
                tmp_reg_1221_pp0_iter3_reg <= tmp_reg_1221_pp0_iter2_reg;
                tmp_reg_1221_pp0_iter4_reg <= tmp_reg_1221_pp0_iter3_reg;
                tmp_reg_1221_pp0_iter5_reg <= tmp_reg_1221_pp0_iter4_reg;
                tmp_reg_1221_pp0_iter6_reg <= tmp_reg_1221_pp0_iter5_reg;
                tmp_reg_1221_pp0_iter7_reg <= tmp_reg_1221_pp0_iter6_reg;
                tmp_reg_1221_pp0_iter8_reg <= tmp_reg_1221_pp0_iter7_reg;
                tmp_reg_1221_pp0_iter9_reg <= tmp_reg_1221_pp0_iter8_reg;
                trunc_ln612_1_reg_1323 <= trunc_ln612_1_fu_953_p1;
                trunc_ln612_1_reg_1323_pp0_iter6_reg <= trunc_ln612_1_reg_1323;
                trunc_ln612_1_reg_1323_pp0_iter7_reg <= trunc_ln612_1_reg_1323_pp0_iter6_reg;
                trunc_ln703_1_reg_1380 <= trunc_ln703_1_fu_1114_p1;
                trunc_ln703_2_reg_1385 <= trunc_ln703_2_fu_1118_p1;
                y_lo_s_V_reg_1375 <= grp_fu_1051_p2(99 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_1286 <= f_x_msb_3_table_V_q0;
                or_ln1314_17_reg_1275 <= or_ln1314_17_fu_786_p2;
                or_ln1314_17_reg_1275_pp0_iter1_reg <= or_ln1314_17_reg_1275;
                or_ln1314_8_reg_1270 <= or_ln1314_8_fu_732_p2;
                or_ln1314_8_reg_1270_pp0_iter1_reg <= or_ln1314_8_reg_1270;
                p_Result_18_reg_1227 <= p_Result_18_fu_560_p1(37 downto 31);
                p_Result_18_reg_1227_pp0_iter1_reg <= p_Result_18_reg_1227;
                tmp_14_reg_1280 <= ret_V_fu_829_p2(33 downto 2);
                tmp_15_reg_1259 <= r_V_36_fu_625_p2(5 downto 3);
                tmp_15_reg_1259_pp0_iter1_reg <= tmp_15_reg_1259;
                tmp_7_reg_1249 <= r_V_36_fu_625_p2(18 downto 13);
                tmp_V_1_reg_1238 <= tmp_V_1_fu_580_p1(22 downto 18);
                tmp_V_1_reg_1238_pp0_iter1_reg <= tmp_V_1_reg_1238;
                tmp_V_reg_1232 <= tmp_V_fu_570_p1(30 downto 23);
                tmp_V_reg_1232_pp0_iter1_reg <= tmp_V_reg_1232;
                tmp_reg_1221 <= tmp_fu_286_p1(53 downto 53);
                tmp_reg_1221_pp0_iter1_reg <= tmp_reg_1221;
                tmp_s_reg_1254 <= r_V_36_fu_625_p2(12 downto 6);
                trunc_ln703_reg_1216 <= trunc_ln703_fu_260_p1;
            end if;
        end if;
    end process;
    exp_x_msb_3_4_lsb_m_s_reg_1329(0) <= '0';
    exp_x_msb_3_4_lsb_m_s_reg_1329_pp0_iter7_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_fu_1193_p2 <= std_logic_vector(unsigned(ap_const_lv43_400) + unsigned(trunc_ln703_1_reg_1380));
    add_ln703_102_fu_1132_p2 <= std_logic_vector(unsigned(ap_const_lv44_400) + unsigned(trunc_ln703_3_fu_1122_p1));
    add_ln703_103_fu_1170_p2 <= std_logic_vector(unsigned(ap_const_lv45_400) + unsigned(trunc_ln703_2_reg_1385));
    add_ln731_1_fu_918_p2 <= std_logic_vector(unsigned(lhs_V_8_fu_889_p1) + unsigned(zext_ln728_8_fu_902_p1));
    add_ln731_fu_924_p2 <= std_logic_vector(unsigned(zext_ln1192_fu_914_p1) + unsigned(add_ln731_1_fu_918_p2));
    and_ln1314_fu_678_p2 <= (icmp_ln1314_fu_666_p2 and icmp_ln1314_1_fu_672_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to11 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_7FFFFFFF when (or_ln1513_1_fu_1188_p2(0) = '1') else 
        tmp_16_fu_1198_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln544_4_fu_1000_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_3_4_lsb_m_s_fu_957_p3 <= (add_ln731_reg_1312 & ap_const_lv1_0);
    exp_x_msb_4_5_lsb_m_s_fu_806_p2 <= std_logic_vector(unsigned(p_Result_32_fu_799_p1) + unsigned(zext_ln703_fu_802_p1));
    f_x_msb_2_table_V_address0 <= zext_ln544_3_fu_885_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln544_2_fu_661_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_table_V_address0 <= zext_ln544_1_fu_600_p1(3 - 1 downto 0);

    f_x_msb_4_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_4_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1051_p0 <= grp_fu_1051_p00(50 - 1 downto 0);
    grp_fu_1051_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_1359),100));
    grp_fu_1051_p1 <= grp_fu_1051_p10(50 - 1 downto 0);
    grp_fu_1051_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_s_reg_1354),100));
    grp_fu_869_p0 <= grp_fu_869_p00(36 - 1 downto 0);
    grp_fu_869_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_33_fu_845_p4),80));
    grp_fu_869_p1 <= grp_fu_869_p10(44 - 1 downto 0);
    grp_fu_869_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_34_fu_853_p4),80));
    grp_fu_978_p0 <= grp_fu_978_p00(48 - 1 downto 0);
    grp_fu_978_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_s_fu_957_p3),98));
    grp_fu_978_p1 <= grp_fu_978_p10(50 - 1 downto 0);
    grp_fu_978_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_36_fu_964_p3),98));
    icmp_ln1314_1_fu_672_p2 <= "1" when (unsigned(p_Result_30_fu_278_p3) > unsigned(ap_const_lv49_1E2804E87B33E)) else "0";
    icmp_ln1314_fu_666_p2 <= "1" when (p_Result_29_fu_264_p4 = ap_const_lv5_F) else "0";
    icmp_ln1513_1_fu_1164_p2 <= "0" when (tmp_166_fu_1154_p4 = ap_const_lv2_0) else "1";
    icmp_ln1513_fu_1148_p2 <= "0" when (tmp_164_fu_1138_p4 = ap_const_lv2_0) else "1";
    lhs_V_10_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_2_3_4_lsb_s_s_reg_1344),57));
    lhs_V_8_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_3_4_lsb_s_V_reg_1302),47));
    lhs_V_9_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_35_fu_930_p4),9));
    lhs_V_fu_812_p4 <= ((exp_x_msb_4_5_lsb_m_s_fu_806_p2 & tmp_s_reg_1254) & ap_const_lv2_0);
    or_ln1314_10_fu_744_p2 <= (xor_ln1311_14_fu_498_p2 or xor_ln1311_13_fu_484_p2);
    or_ln1314_11_fu_750_p2 <= (xor_ln1311_12_fu_470_p2 or or_ln1314_10_fu_744_p2);
    or_ln1314_12_fu_756_p2 <= (or_ln1314_9_fu_738_p2 or or_ln1314_11_fu_750_p2);
    or_ln1314_13_fu_762_p2 <= (xor_ln1311_16_fu_526_p2 or xor_ln1311_15_fu_512_p2);
    or_ln1314_14_fu_768_p2 <= (xor_ln1311_18_fu_554_p2 or and_ln1314_fu_678_p2);
    or_ln1314_15_fu_774_p2 <= (xor_ln1311_17_fu_540_p2 or or_ln1314_14_fu_768_p2);
    or_ln1314_16_fu_780_p2 <= (or_ln1314_15_fu_774_p2 or or_ln1314_13_fu_762_p2);
    or_ln1314_17_fu_786_p2 <= (or_ln1314_16_fu_780_p2 or or_ln1314_12_fu_756_p2);
    or_ln1314_18_fu_1098_p2 <= (or_ln1314_8_reg_1270_pp0_iter10_reg or or_ln1314_17_reg_1275_pp0_iter10_reg);
    or_ln1314_1_fu_690_p2 <= (xor_ln1311_4_fu_358_p2 or xor_ln1311_3_fu_344_p2);
    or_ln1314_2_fu_696_p2 <= (xor_ln1311_2_fu_330_p2 or or_ln1314_1_fu_690_p2);
    or_ln1314_3_fu_702_p2 <= (or_ln1314_fu_684_p2 or or_ln1314_2_fu_696_p2);
    or_ln1314_4_fu_708_p2 <= (xor_ln1311_6_fu_386_p2 or xor_ln1311_5_fu_372_p2);
    or_ln1314_5_fu_714_p2 <= (xor_ln1311_9_fu_428_p2 or xor_ln1311_8_fu_414_p2);
    or_ln1314_6_fu_720_p2 <= (xor_ln1311_7_fu_400_p2 or or_ln1314_5_fu_714_p2);
    or_ln1314_7_fu_726_p2 <= (or_ln1314_6_fu_720_p2 or or_ln1314_4_fu_708_p2);
    or_ln1314_8_fu_732_p2 <= (or_ln1314_7_fu_726_p2 or or_ln1314_3_fu_702_p2);
    or_ln1314_9_fu_738_p2 <= (xor_ln1311_11_fu_456_p2 or xor_ln1311_10_fu_442_p2);
    or_ln1314_fu_684_p2 <= (xor_ln1311_fu_302_p2 or xor_ln1311_1_fu_316_p2);
    or_ln1513_1_fu_1188_p2 <= (or_ln1513_fu_1183_p2 or icmp_ln1513_1_reg_1395);
    or_ln1513_fu_1183_p2 <= (tmp_165_fu_1175_p3 or icmp_ln1513_reg_1390);
    p_Result_10_fu_448_p3 <= x_l_V_fu_256_p1(49 downto 49);
    p_Result_11_fu_462_p3 <= x_l_V_fu_256_p1(50 downto 50);
    p_Result_12_fu_476_p3 <= x_l_V_fu_256_p1(51 downto 51);
    p_Result_13_fu_490_p3 <= x_l_V_fu_256_p1(52 downto 52);
    p_Result_14_fu_504_p3 <= x_l_V_fu_256_p1(53 downto 53);
    p_Result_15_fu_518_p3 <= x_l_V_fu_256_p1(54 downto 54);
    p_Result_16_fu_532_p3 <= x_l_V_fu_256_p1(55 downto 55);
    p_Result_17_fu_546_p3 <= x_l_V_fu_256_p1(56 downto 56);
    p_Result_18_fu_560_p1 <= x_V;
    p_Result_1_fu_308_p3 <= x_l_V_fu_256_p1(39 downto 39);
    p_Result_29_fu_264_p1 <= x_V;
    p_Result_29_fu_264_p4 <= p_Result_29_fu_264_p1(38 downto 34);
    p_Result_2_fu_322_p3 <= x_l_V_fu_256_p1(40 downto 40);
    p_Result_30_fu_278_p3 <= (trunc_ln612_fu_274_p1 & ap_const_lv15_0);
    p_Result_31_fu_984_p3 <= (tmp_reg_1221_pp0_iter6_reg & p_Result_18_reg_1227_pp0_iter6_reg);
    p_Result_32_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1249),8));
    p_Result_33_fu_845_p4 <= ((tmp_14_reg_1280 & tmp_15_reg_1259_pp0_iter1_reg) & ap_const_lv1_0);
    p_Result_34_fu_853_p4 <= ((tmp_V_1_reg_1238_pp0_iter1_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_1286);
    p_Result_35_fu_930_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_36_fu_964_p3 <= (ret_V_9_reg_1317 & trunc_ln612_1_reg_1323);
    p_Result_3_fu_336_p3 <= x_l_V_fu_256_p1(41 downto 41);
    p_Result_4_fu_350_p3 <= x_l_V_fu_256_p1(42 downto 42);
    p_Result_5_fu_364_p3 <= x_l_V_fu_256_p1(43 downto 43);
    p_Result_6_fu_378_p3 <= x_l_V_fu_256_p1(44 downto 44);
    p_Result_7_fu_392_p3 <= x_l_V_fu_256_p1(45 downto 45);
    p_Result_8_fu_406_p3 <= x_l_V_fu_256_p1(46 downto 46);
    p_Result_9_fu_420_p3 <= x_l_V_fu_256_p1(47 downto 47);
    p_Result_s_89_fu_434_p3 <= x_l_V_fu_256_p1(48 downto 48);
    p_Result_s_fu_294_p3 <= x_l_V_fu_256_p1(38 downto 38);
    p_Val2_67_fu_1102_p3 <= 
        select_ln1315_fu_1090_p3 when (or_ln1314_18_fu_1098_p2(0) = '1') else 
        trunc_ln9_fu_1075_p4;
    r_V_36_fu_625_p0 <= r_V_36_fu_625_p00(3 - 1 downto 0);
    r_V_36_fu_625_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_590_p4),19));
    r_V_36_fu_625_p1 <= r_V_36_fu_625_p10(16 - 1 downto 0);
    r_V_36_fu_625_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_5_lsb_V_fu_609_p3),19));
    r_V_36_fu_625_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_36_fu_625_p0) * unsigned(r_V_36_fu_625_p1), 19));
    ret_V_10_fu_1020_p2 <= std_logic_vector(unsigned(lhs_V_10_fu_1005_p1) + unsigned(zext_ln728_9_fu_1016_p1));
    ret_V_11_fu_1029_p2 <= std_logic_vector(unsigned(zext_ln703_7_fu_1026_p1) + unsigned(ret_V_10_fu_1020_p2));
    ret_V_9_fu_947_p2 <= std_logic_vector(unsigned(lhs_V_9_fu_940_p1) + unsigned(rhs_V_8_fu_944_p1));
    ret_V_fu_829_p2 <= std_logic_vector(unsigned(zext_ln703_2_fu_825_p1) + unsigned(zext_ln728_fu_821_p1));
    rhs_V_8_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1232_pp0_iter4_reg),9));
    rhs_V_9_fu_1008_p4 <= ((ret_V_9_reg_1317_pp0_iter7_reg & trunc_ln612_1_reg_1323_pp0_iter7_reg) & ap_const_lv6_0);
    rhs_V_fu_892_p5 <= (((tmp_V_1_reg_1238_pp0_iter4_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_1286_pp0_iter4_reg) & ap_const_lv2_0);
    select_ln1315_fu_1090_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (xor_ln1315_fu_1085_p2(0) = '1') else 
        ap_const_lv46_0;
    shl_ln_fu_906_p4 <= ((tmp_14_reg_1280_pp0_iter4_reg & tmp_15_reg_1259_pp0_iter4_reg) & ap_const_lv7_0);
    tmp_164_fu_1138_p4 <= y_V_fu_1126_p2(46 downto 45);
    tmp_165_fu_1175_p3 <= add_ln703_103_fu_1170_p2(44 downto 44);
    tmp_166_fu_1154_p4 <= add_ln703_102_fu_1132_p2(43 downto 42);
    tmp_16_fu_1198_p4 <= add_ln700_fu_1193_p2(42 downto 11);
    tmp_V_1_fu_580_p1 <= x_V;
    tmp_V_1_fu_580_p4 <= tmp_V_1_fu_580_p1(22 downto 18);
    tmp_V_2_fu_590_p1 <= x_V;
    tmp_V_2_fu_590_p4 <= tmp_V_2_fu_590_p1(17 downto 15);
    tmp_V_fu_570_p1 <= x_V;
    tmp_fu_286_p1 <= x_V;
    tmp_fu_286_p3 <= tmp_fu_286_p1(53 downto 53);
    trunc_ln612_1_fu_953_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln612_fu_274_p0 <= x_V;
    trunc_ln612_fu_274_p1 <= trunc_ln612_fu_274_p0(34 - 1 downto 0);
    trunc_ln703_1_fu_1114_p1 <= p_Val2_67_fu_1102_p3(43 - 1 downto 0);
    trunc_ln703_2_fu_1118_p1 <= p_Val2_67_fu_1102_p3(45 - 1 downto 0);
    trunc_ln703_3_fu_1122_p1 <= p_Val2_67_fu_1102_p3(44 - 1 downto 0);
    trunc_ln703_fu_260_p0 <= x_V;
    trunc_ln703_fu_260_p1 <= trunc_ln703_fu_260_p0(18 - 1 downto 0);
    trunc_ln708_fu_605_p0 <= x_V;
    trunc_ln708_fu_605_p1 <= trunc_ln708_fu_605_p0(15 - 1 downto 0);
    trunc_ln9_fu_1075_p4 <= y_l_V_fu_1070_p2(49 downto 4);
    x_l_V_fu_256_p0 <= x_V;
        x_l_V_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_l_V_fu_256_p0),73));

    x_msb_4_5_lsb_V_fu_792_p3 <= (trunc_ln703_reg_1216 & ap_const_lv15_0);
    x_msb_5_lsb_V_fu_609_p3 <= (trunc_ln708_fu_605_p1 & ap_const_lv1_0);
    xor_ln1311_10_fu_442_p2 <= (tmp_fu_286_p3 xor p_Result_s_89_fu_434_p3);
    xor_ln1311_11_fu_456_p2 <= (tmp_fu_286_p3 xor p_Result_10_fu_448_p3);
    xor_ln1311_12_fu_470_p2 <= (tmp_fu_286_p3 xor p_Result_11_fu_462_p3);
    xor_ln1311_13_fu_484_p2 <= (tmp_fu_286_p3 xor p_Result_12_fu_476_p3);
    xor_ln1311_14_fu_498_p2 <= (tmp_fu_286_p3 xor p_Result_13_fu_490_p3);
    xor_ln1311_15_fu_512_p2 <= (tmp_fu_286_p3 xor p_Result_14_fu_504_p3);
    xor_ln1311_16_fu_526_p2 <= (tmp_fu_286_p3 xor p_Result_15_fu_518_p3);
    xor_ln1311_17_fu_540_p2 <= (tmp_fu_286_p3 xor p_Result_16_fu_532_p3);
    xor_ln1311_18_fu_554_p2 <= (tmp_fu_286_p3 xor p_Result_17_fu_546_p3);
    xor_ln1311_1_fu_316_p2 <= (tmp_fu_286_p3 xor p_Result_1_fu_308_p3);
    xor_ln1311_2_fu_330_p2 <= (tmp_fu_286_p3 xor p_Result_2_fu_322_p3);
    xor_ln1311_3_fu_344_p2 <= (tmp_fu_286_p3 xor p_Result_3_fu_336_p3);
    xor_ln1311_4_fu_358_p2 <= (tmp_fu_286_p3 xor p_Result_4_fu_350_p3);
    xor_ln1311_5_fu_372_p2 <= (tmp_fu_286_p3 xor p_Result_5_fu_364_p3);
    xor_ln1311_6_fu_386_p2 <= (tmp_fu_286_p3 xor p_Result_6_fu_378_p3);
    xor_ln1311_7_fu_400_p2 <= (tmp_fu_286_p3 xor p_Result_7_fu_392_p3);
    xor_ln1311_8_fu_414_p2 <= (tmp_fu_286_p3 xor p_Result_8_fu_406_p3);
    xor_ln1311_9_fu_428_p2 <= (tmp_fu_286_p3 xor p_Result_9_fu_420_p3);
    xor_ln1311_fu_302_p2 <= (tmp_fu_286_p3 xor p_Result_s_fu_294_p3);
    xor_ln1315_fu_1085_p2 <= (tmp_reg_1221_pp0_iter10_reg xor ap_const_lv1_1);
    y_V_fu_1126_p2 <= std_logic_vector(unsigned(ap_const_lv47_400) + unsigned(zext_ln1314_fu_1110_p1));
    y_l_V_fu_1070_p2 <= std_logic_vector(unsigned(zext_ln703_8_fu_1067_p1) + unsigned(exp_x_msb_1_V_reg_1359_pp0_iter10_reg));
    zext_ln1192_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_906_p4),47));
    zext_ln1314_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_67_fu_1102_p3),47));
    zext_ln544_1_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_590_p4),64));
    zext_ln544_2_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_580_p4),64));
    zext_ln544_3_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1232_pp0_iter3_reg),64));
    zext_ln544_4_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_31_fu_984_p3),64));
    zext_ln703_2_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_4_5_lsb_V_fu_792_p3),34));
    zext_ln703_7_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_s_reg_1329_pp0_iter7_reg),57));
    zext_ln703_8_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_lo_s_V_reg_1375),50));
    zext_ln703_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_4_table_V_q0),8));
    zext_ln728_8_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_fu_892_p5),47));
    zext_ln728_9_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_9_fu_1008_p4),57));
    zext_ln728_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_812_p4),34));
end behav;
