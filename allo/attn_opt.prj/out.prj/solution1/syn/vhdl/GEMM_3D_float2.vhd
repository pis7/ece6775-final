-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GEMM_3D_float2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v240_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v240_0_V_ce0 : OUT STD_LOGIC;
    v240_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v241_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v241_V_ce0 : OUT STD_LOGIC;
    v241_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v242_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v242_0_V_ce0 : OUT STD_LOGIC;
    v242_0_V_we0 : OUT STD_LOGIC;
    v242_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v242_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GEMM_3D_float2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h5_fu_145_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h5_reg_331 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln418_fu_181_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln418_reg_336 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln414_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln421_fu_205_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln421_reg_341 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln416_fu_217_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln416_reg_349 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln421_1_fu_223_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln421_1_reg_354 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln416_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v242_0_V_addr_reg_359 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln417_fu_247_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln417_reg_367 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln418_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln418_reg_372 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln417_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln419_fu_288_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln419_reg_377 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v240_0_V_load_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal v241_V_load_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal v242_0_V_load_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal h5_0_reg_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal j8_0_0_reg_117 : STD_LOGIC_VECTOR (6 downto 0);
    signal k8_0_0_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln421_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln418_1_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln419_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_151_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_163_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln418_fu_159_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln418_1_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln418_fu_175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_193_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_fu_185_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln421_fu_201_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln421_2_fu_227_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln421_fu_231_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln418_2_fu_253_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln419_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_266_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_274_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln419_fu_282_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_fu_307_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_307_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    h5_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h5_0_reg_106 <= h5_reg_331;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h5_0_reg_106 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j8_0_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln417_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j8_0_0_reg_117 <= add_ln416_reg_349;
            elsif (((icmp_ln414_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j8_0_0_reg_117 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k8_0_0_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k8_0_0_reg_128 <= add_ln417_reg_367;
            elsif (((icmp_ln416_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k8_0_0_reg_128 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln416_reg_349 <= add_ln416_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln417_reg_367 <= add_ln417_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln417_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln418_reg_372 <= add_ln418_fu_257_p2;
                add_ln419_reg_377 <= add_ln419_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h5_reg_331 <= h5_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln418_reg_336(9 downto 1) <= sext_ln418_fu_181_p1(9 downto 1);
                    sub_ln421_reg_341(11 downto 5) <= sub_ln421_fu_205_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln_reg_402 <= mul_ln1118_fu_307_p2(43 downto 12);
                v242_0_V_load_reg_407 <= v242_0_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                v240_0_V_load_reg_392 <= v240_0_V_q0;
                v241_V_load_reg_397 <= v241_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln416_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                v242_0_V_addr_reg_359 <= sext_ln421_fu_236_p1(11 - 1 downto 0);
                    zext_ln421_1_reg_354(6 downto 0) <= zext_ln421_1_fu_223_p1(6 downto 0);
            end if;
        end if;
    end process;
    sext_ln418_reg_336(0) <= '0';
    sub_ln421_reg_341(4 downto 0) <= "00000";
    zext_ln421_1_reg_354(14 downto 7) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln414_fu_139_p2, ap_CS_fsm_state3, icmp_ln416_fu_211_p2, ap_CS_fsm_state4, icmp_ln417_fu_241_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln414_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln416_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln417_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln416_fu_217_p2 <= std_logic_vector(unsigned(j8_0_0_reg_117) + unsigned(ap_const_lv7_1));
    add_ln417_fu_247_p2 <= std_logic_vector(unsigned(k8_0_0_reg_128) + unsigned(ap_const_lv3_1));
    add_ln418_fu_257_p2 <= std_logic_vector(unsigned(zext_ln418_2_fu_253_p1) + unsigned(sext_ln418_reg_336));
    add_ln419_fu_288_p2 <= std_logic_vector(unsigned(zext_ln421_1_reg_354) + unsigned(sub_ln419_fu_282_p2));
    add_ln421_fu_231_p2 <= std_logic_vector(unsigned(sub_ln421_reg_341) + unsigned(zext_ln421_2_fu_227_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln414_fu_139_p2)
    begin
        if ((((icmp_ln414_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln414_fu_139_p2)
    begin
        if (((icmp_ln414_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    h5_fu_145_p2 <= std_logic_vector(unsigned(h5_0_reg_106) + unsigned(ap_const_lv5_1));
    icmp_ln414_fu_139_p2 <= "1" when (h5_0_reg_106 = ap_const_lv5_10) else "0";
    icmp_ln416_fu_211_p2 <= "1" when (j8_0_0_reg_117 = ap_const_lv7_60) else "0";
    icmp_ln417_fu_241_p2 <= "1" when (k8_0_0_reg_128 = ap_const_lv3_6) else "0";
    mul_ln1118_fu_307_p0 <= v240_0_V_load_reg_392;
    mul_ln1118_fu_307_p1 <= v241_V_load_reg_397;
    mul_ln1118_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_307_p0) * signed(mul_ln1118_fu_307_p1))), 44));
    p_shl4_cast_fu_266_p3 <= (trunc_ln419_fu_262_p1 & ap_const_lv7_0);
    p_shl5_cast_fu_274_p3 <= (add_ln418_fu_257_p2 & ap_const_lv5_0);
        sext_ln418_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln418_reg_372),64));

        sext_ln418_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln418_fu_175_p2),10));

        sext_ln421_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln421_fu_231_p2),64));

    sub_ln418_fu_175_p2 <= std_logic_vector(unsigned(zext_ln418_fu_159_p1) - unsigned(zext_ln418_1_fu_171_p1));
    sub_ln419_fu_282_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_266_p3) - unsigned(p_shl5_cast_fu_274_p3));
    sub_ln421_fu_205_p2 <= std_logic_vector(unsigned(tmp_51_fu_185_p3) - unsigned(zext_ln421_fu_201_p1));
    tmp_49_fu_151_p3 <= (h5_0_reg_106 & ap_const_lv3_0);
    tmp_50_fu_163_p3 <= (h5_0_reg_106 & ap_const_lv1_0);
    tmp_51_fu_185_p3 <= (h5_0_reg_106 & ap_const_lv7_0);
    tmp_52_fu_193_p3 <= (h5_0_reg_106 & ap_const_lv5_0);
    trunc_ln419_fu_262_p1 <= add_ln418_fu_257_p2(8 - 1 downto 0);
    v240_0_V_address0 <= sext_ln418_1_fu_293_p1(7 - 1 downto 0);

    v240_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v240_0_V_ce0 <= ap_const_logic_1;
        else 
            v240_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v241_V_address0 <= zext_ln419_fu_297_p1(14 - 1 downto 0);

    v241_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v241_V_ce0 <= ap_const_logic_1;
        else 
            v241_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v242_0_V_address0 <= v242_0_V_addr_reg_359;

    v242_0_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            v242_0_V_ce0 <= ap_const_logic_1;
        else 
            v242_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v242_0_V_d0 <= std_logic_vector(unsigned(v242_0_V_load_reg_407) + unsigned(trunc_ln_reg_402));

    v242_0_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v242_0_V_we0 <= ap_const_logic_1;
        else 
            v242_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln418_1_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_163_p3),9));
    zext_ln418_2_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k8_0_0_reg_128),10));
    zext_ln418_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_151_p3),9));
    zext_ln419_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln419_reg_377),64));
    zext_ln421_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j8_0_0_reg_117),15));
    zext_ln421_2_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j8_0_0_reg_117),12));
    zext_ln421_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_193_p3),12));
end behav;
