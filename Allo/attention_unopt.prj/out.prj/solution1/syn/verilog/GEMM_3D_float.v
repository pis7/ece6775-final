// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GEMM_3D_float (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v204_0_address0,
        v204_0_ce0,
        v204_0_q0,
        v206_0_address0,
        v206_0_ce0,
        v206_0_we0,
        v206_0_d0,
        v206_0_q0,
        k_proj_transposed_address0,
        k_proj_transposed_ce0,
        k_proj_transposed_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v204_0_address0;
output   v204_0_ce0;
input  [31:0] v204_0_q0;
output  [6:0] v206_0_address0;
output   v206_0_ce0;
output   v206_0_we0;
output  [31:0] v206_0_d0;
input  [31:0] v206_0_q0;
output  [13:0] k_proj_transposed_address0;
output   k_proj_transposed_ce0;
input  [31:0] k_proj_transposed_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v204_0_ce0;
reg v206_0_ce0;
reg v206_0_we0;
reg k_proj_transposed_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] h4_fu_147_p2;
reg   [4:0] h4_reg_306;
wire    ap_CS_fsm_state2;
wire  signed [13:0] sext_ln352_fu_183_p1;
reg  signed [13:0] sext_ln352_reg_311;
wire   [0:0] icmp_ln347_fu_141_p2;
wire   [7:0] sub_ln354_fu_207_p2;
reg   [7:0] sub_ln354_reg_316;
wire   [2:0] add_ln349_fu_219_p2;
reg   [2:0] add_ln349_reg_324;
wire    ap_CS_fsm_state3;
wire   [14:0] zext_ln354_1_fu_225_p1;
reg   [14:0] zext_ln354_1_reg_329;
wire   [0:0] icmp_ln349_fu_213_p2;
reg   [6:0] v206_0_addr_reg_334;
wire   [6:0] add_ln350_fu_249_p2;
reg   [6:0] add_ln350_reg_342;
wire    ap_CS_fsm_state4;
wire  signed [13:0] add_ln352_fu_259_p2;
reg  signed [13:0] add_ln352_reg_347;
wire   [0:0] icmp_ln350_fu_243_p2;
wire   [14:0] add_ln352_1_fu_290_p2;
reg   [14:0] add_ln352_1_reg_352;
wire    ap_CS_fsm_state5;
reg   [31:0] v204_0_load_reg_367;
wire    ap_CS_fsm_state6;
reg   [31:0] k_proj_transposed_lo_reg_372;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] v_reg_377;
wire    ap_CS_fsm_state10;
reg   [31:0] v206_0_load_reg_382;
wire   [31:0] grp_fu_133_p2;
reg   [31:0] v5_reg_387;
wire    ap_CS_fsm_state15;
reg   [4:0] h4_0_reg_100;
reg   [2:0] j4_0_0_reg_111;
reg   [6:0] k3_0_0_reg_122;
wire    ap_CS_fsm_state16;
wire  signed [63:0] sext_ln354_fu_238_p1;
wire   [63:0] zext_ln352_3_fu_299_p1;
wire  signed [63:0] sext_ln352_1_fu_295_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire   [11:0] tmp_53_fu_153_p3;
wire   [9:0] tmp_54_fu_165_p3;
wire   [12:0] zext_ln352_fu_161_p1;
wire   [12:0] zext_ln352_1_fu_173_p1;
wire   [12:0] sub_ln352_fu_177_p2;
wire   [5:0] tmp_56_fu_195_p3;
wire   [7:0] tmp_55_fu_187_p3;
wire   [7:0] zext_ln354_fu_203_p1;
wire   [7:0] zext_ln354_2_fu_229_p1;
wire   [7:0] add_ln354_fu_233_p2;
wire   [13:0] zext_ln352_2_fu_255_p1;
wire   [11:0] trunc_ln352_fu_264_p1;
wire   [14:0] p_shl4_cast_fu_268_p3;
wire   [14:0] p_shl5_cast_fu_276_p3;
wire   [14:0] sub_ln352_1_fu_284_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

attention_fadd_32pcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fadd_32pcA_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v206_0_load_reg_382),
    .din1(v_reg_377),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v204_0_load_reg_367),
    .din1(k_proj_transposed_lo_reg_372),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln349_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h4_0_reg_100 <= h4_reg_306;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h4_0_reg_100 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln350_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j4_0_0_reg_111 <= add_ln349_reg_324;
    end else if (((icmp_ln347_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j4_0_0_reg_111 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k3_0_0_reg_122 <= add_ln350_reg_342;
    end else if (((icmp_ln349_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k3_0_0_reg_122 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln349_reg_324 <= add_ln349_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln350_reg_342 <= add_ln350_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln350_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln352_1_reg_352 <= add_ln352_1_fu_290_p2;
        add_ln352_reg_347 <= add_ln352_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h4_reg_306 <= h4_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_transposed_lo_reg_372 <= k_proj_transposed_q0;
        v204_0_load_reg_367 <= v204_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln347_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln352_reg_311[13 : 5] <= sext_ln352_fu_183_p1[13 : 5];
        sub_ln354_reg_316[7 : 1] <= sub_ln354_fu_207_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln349_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v206_0_addr_reg_334 <= sext_ln354_fu_238_p1;
        zext_ln354_1_reg_329[2 : 0] <= zext_ln354_1_fu_225_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        v206_0_load_reg_382 <= v206_0_q0;
        v_reg_377 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        v5_reg_387 <= grp_fu_133_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln347_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln347_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_proj_transposed_ce0 = 1'b1;
    end else begin
        k_proj_transposed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v204_0_ce0 = 1'b1;
    end else begin
        v204_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        v206_0_ce0 = 1'b1;
    end else begin
        v206_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v206_0_we0 = 1'b1;
    end else begin
        v206_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln347_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln349_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln350_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln349_fu_219_p2 = (j4_0_0_reg_111 + 3'd1);

assign add_ln350_fu_249_p2 = (k3_0_0_reg_122 + 7'd1);

assign add_ln352_1_fu_290_p2 = (zext_ln354_1_reg_329 + sub_ln352_1_fu_284_p2);

assign add_ln352_fu_259_p2 = ($signed(zext_ln352_2_fu_255_p1) + $signed(sext_ln352_reg_311));

assign add_ln354_fu_233_p2 = (sub_ln354_reg_316 + zext_ln354_2_fu_229_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign h4_fu_147_p2 = (h4_0_reg_100 + 5'd1);

assign icmp_ln347_fu_141_p2 = ((h4_0_reg_100 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln349_fu_213_p2 = ((j4_0_0_reg_111 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln350_fu_243_p2 = ((k3_0_0_reg_122 == 7'd96) ? 1'b1 : 1'b0);

assign k_proj_transposed_address0 = zext_ln352_3_fu_299_p1;

assign p_shl4_cast_fu_268_p3 = {{trunc_ln352_fu_264_p1}, {3'd0}};

assign p_shl5_cast_fu_276_p3 = {{add_ln352_fu_259_p2}, {1'd0}};

assign sext_ln352_1_fu_295_p1 = add_ln352_reg_347;

assign sext_ln352_fu_183_p1 = $signed(sub_ln352_fu_177_p2);

assign sext_ln354_fu_238_p1 = $signed(add_ln354_fu_233_p2);

assign sub_ln352_1_fu_284_p2 = (p_shl4_cast_fu_268_p3 - p_shl5_cast_fu_276_p3);

assign sub_ln352_fu_177_p2 = (zext_ln352_fu_161_p1 - zext_ln352_1_fu_173_p1);

assign sub_ln354_fu_207_p2 = (tmp_55_fu_187_p3 - zext_ln354_fu_203_p1);

assign tmp_53_fu_153_p3 = {{h4_0_reg_100}, {7'd0}};

assign tmp_54_fu_165_p3 = {{h4_0_reg_100}, {5'd0}};

assign tmp_55_fu_187_p3 = {{h4_0_reg_100}, {3'd0}};

assign tmp_56_fu_195_p3 = {{h4_0_reg_100}, {1'd0}};

assign trunc_ln352_fu_264_p1 = add_ln352_fu_259_p2[11:0];

assign v204_0_address0 = sext_ln352_1_fu_295_p1;

assign v206_0_address0 = v206_0_addr_reg_334;

assign v206_0_d0 = v5_reg_387;

assign zext_ln352_1_fu_173_p1 = tmp_54_fu_165_p3;

assign zext_ln352_2_fu_255_p1 = k3_0_0_reg_122;

assign zext_ln352_3_fu_299_p1 = add_ln352_1_reg_352;

assign zext_ln352_fu_161_p1 = tmp_53_fu_153_p3;

assign zext_ln354_1_fu_225_p1 = j4_0_0_reg_111;

assign zext_ln354_2_fu_229_p1 = j4_0_0_reg_111;

assign zext_ln354_fu_203_p1 = tmp_56_fu_195_p3;

always @ (posedge ap_clk) begin
    sext_ln352_reg_311[4:0] <= 5'b00000;
    sub_ln354_reg_316[0] <= 1'b0;
    zext_ln354_1_reg_329[14:3] <= 12'b000000000000;
end

endmodule //GEMM_3D_float
