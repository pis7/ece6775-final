// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module apply_rotary_pos_emb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v157_address0,
        v157_ce0,
        v157_q0,
        v158_address0,
        v158_ce0,
        v158_q0,
        v159_0_address0,
        v159_0_ce0,
        v159_0_we0,
        v159_0_d0,
        v160_0_address0,
        v160_0_ce0,
        v160_0_we0,
        v160_0_d0,
        q_proj_0_address0,
        q_proj_0_ce0,
        q_proj_0_q0,
        q_proj_0_address1,
        q_proj_0_ce1,
        q_proj_0_q1,
        k_proj_0_address0,
        k_proj_0_ce0,
        k_proj_0_q0,
        k_proj_0_address1,
        k_proj_0_ce1,
        k_proj_0_q1
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v157_address0;
output   v157_ce0;
input  [31:0] v157_q0;
output  [9:0] v158_address0;
output   v158_ce0;
input  [31:0] v158_q0;
output  [10:0] v159_0_address0;
output   v159_0_ce0;
output   v159_0_we0;
output  [31:0] v159_0_d0;
output  [10:0] v160_0_address0;
output   v160_0_ce0;
output   v160_0_we0;
output  [31:0] v160_0_d0;
output  [10:0] q_proj_0_address0;
output   q_proj_0_ce0;
input  [31:0] q_proj_0_q0;
output  [10:0] q_proj_0_address1;
output   q_proj_0_ce1;
input  [31:0] q_proj_0_q1;
output  [10:0] k_proj_0_address0;
output   k_proj_0_ce0;
input  [31:0] k_proj_0_q0;
output  [10:0] k_proj_0_address1;
output   k_proj_0_ce1;
input  [31:0] k_proj_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v157_ce0;
reg v158_ce0;
reg v159_0_ce0;
reg v159_0_we0;
reg v160_0_ce0;
reg v160_0_we0;
reg[10:0] q_proj_0_address0;
reg q_proj_0_ce0;
reg q_proj_0_ce1;
reg[10:0] k_proj_0_address0;
reg k_proj_0_ce0;
reg k_proj_0_ce1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] v163_fu_292_p2;
reg   [4:0] v163_reg_500;
wire    ap_CS_fsm_state2;
wire   [11:0] sub_ln266_fu_318_p2;
reg   [11:0] sub_ln266_reg_505;
wire   [0:0] icmp_ln263_fu_286_p2;
wire   [6:0] add_ln265_fu_330_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] v167_fu_356_p2;
reg   [4:0] v167_reg_521;
wire    ap_CS_fsm_state4;
wire   [11:0] sub_ln274_fu_382_p2;
reg   [11:0] sub_ln274_reg_526;
wire   [0:0] icmp_ln271_fu_350_p2;
wire   [6:0] add_ln273_fu_394_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] h2_fu_420_p2;
reg   [4:0] h2_reg_542;
wire    ap_CS_fsm_state7;
wire   [11:0] sub_ln291_fu_446_p2;
reg   [11:0] sub_ln291_reg_547;
wire   [0:0] icmp_ln280_fu_414_p2;
wire   [6:0] add_ln282_fu_458_p2;
reg   [6:0] add_ln282_reg_555;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln291_fu_477_p1;
reg  signed [63:0] sext_ln291_reg_560;
wire   [0:0] icmp_ln282_fu_452_p2;
reg   [31:0] q_proj_0_load_reg_596;
wire    ap_CS_fsm_state9;
reg   [31:0] v157_load_reg_601;
wire   [31:0] rotated_q_0_q0;
reg   [31:0] rotated_q_0_load_reg_607;
reg   [31:0] v158_load_reg_612;
reg   [31:0] k_proj_0_load_reg_618;
wire   [31:0] rotated_k_0_q0;
reg   [31:0] rotated_k_0_load_reg_623;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] v_reg_628;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] v8_reg_633;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] v1_reg_638;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] v2_reg_643;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] v9_reg_648;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] v3_reg_653;
reg   [10:0] rotated_q_0_address0;
reg    rotated_q_0_ce0;
reg    rotated_q_0_we0;
reg   [31:0] rotated_q_0_d0;
reg    rotated_q_0_ce1;
reg    rotated_q_0_we1;
reg   [10:0] rotated_k_0_address0;
reg    rotated_k_0_ce0;
reg    rotated_k_0_we0;
reg   [31:0] rotated_k_0_d0;
reg    rotated_k_0_ce1;
reg    rotated_k_0_we1;
wire    grp_rotate_half_fu_248_ap_start;
wire    grp_rotate_half_fu_248_ap_done;
wire    grp_rotate_half_fu_248_ap_idle;
wire    grp_rotate_half_fu_248_ap_ready;
wire   [10:0] grp_rotate_half_fu_248_v147_0_address0;
wire    grp_rotate_half_fu_248_v147_0_ce0;
wire   [10:0] grp_rotate_half_fu_248_v147_0_address1;
wire    grp_rotate_half_fu_248_v147_0_ce1;
wire   [10:0] grp_rotate_half_fu_248_v148_0_address0;
wire    grp_rotate_half_fu_248_v148_0_ce0;
wire    grp_rotate_half_fu_248_v148_0_we0;
wire   [31:0] grp_rotate_half_fu_248_v148_0_d0;
wire   [10:0] grp_rotate_half_fu_248_v148_0_address1;
wire    grp_rotate_half_fu_248_v148_0_ce1;
wire    grp_rotate_half_fu_248_v148_0_we1;
wire   [31:0] grp_rotate_half_fu_248_v148_0_d1;
wire    grp_rotate_half_fu_255_ap_start;
wire    grp_rotate_half_fu_255_ap_done;
wire    grp_rotate_half_fu_255_ap_idle;
wire    grp_rotate_half_fu_255_ap_ready;
wire   [10:0] grp_rotate_half_fu_255_v147_0_address0;
wire    grp_rotate_half_fu_255_v147_0_ce0;
wire   [10:0] grp_rotate_half_fu_255_v147_0_address1;
wire    grp_rotate_half_fu_255_v147_0_ce1;
wire   [10:0] grp_rotate_half_fu_255_v148_0_address0;
wire    grp_rotate_half_fu_255_v148_0_ce0;
wire    grp_rotate_half_fu_255_v148_0_we0;
wire   [31:0] grp_rotate_half_fu_255_v148_0_d0;
wire   [10:0] grp_rotate_half_fu_255_v148_0_address1;
wire    grp_rotate_half_fu_255_v148_0_ce1;
wire    grp_rotate_half_fu_255_v148_0_we1;
wire   [31:0] grp_rotate_half_fu_255_v148_0_d1;
reg   [4:0] v163_0_reg_182;
wire   [0:0] icmp_ln265_fu_324_p2;
reg   [6:0] v165_0_0_reg_193;
reg   [4:0] v167_0_reg_204;
wire   [0:0] icmp_ln273_fu_388_p2;
reg   [6:0] v169_0_0_reg_215;
reg   [4:0] h2_0_reg_226;
wire    ap_CS_fsm_state6;
reg    ap_block_state6_on_subcall_done;
reg   [6:0] d2_0_0_reg_237;
wire    ap_CS_fsm_state19;
reg    grp_rotate_half_fu_248_ap_start_reg;
reg    grp_rotate_half_fu_255_ap_start_reg;
wire  signed [63:0] sext_ln266_fu_345_p1;
wire  signed [63:0] sext_ln274_fu_409_p1;
wire   [63:0] zext_ln284_fu_491_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state10;
wire   [9:0] tmp_44_fu_306_p3;
wire   [11:0] tmp_s_fu_298_p3;
wire   [11:0] zext_ln266_fu_314_p1;
wire   [11:0] zext_ln266_1_fu_336_p1;
wire   [11:0] add_ln266_fu_340_p2;
wire   [9:0] tmp_46_fu_370_p3;
wire   [11:0] tmp_45_fu_362_p3;
wire   [11:0] zext_ln274_fu_378_p1;
wire   [11:0] zext_ln274_1_fu_400_p1;
wire   [11:0] add_ln274_fu_404_p2;
wire   [9:0] tmp_48_fu_434_p3;
wire   [11:0] tmp_47_fu_426_p3;
wire   [11:0] zext_ln291_fu_442_p1;
wire   [11:0] zext_ln291_2_fu_468_p1;
wire   [11:0] add_ln291_fu_472_p2;
wire   [9:0] zext_ln291_1_fu_464_p1;
wire   [9:0] add_ln284_fu_485_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 grp_rotate_half_fu_248_ap_start_reg = 1'b0;
#0 grp_rotate_half_fu_255_ap_start_reg = 1'b0;
end

apply_rotary_pos_vdy #(
    .DataWidth( 32 ),
    .AddressRange( 1536 ),
    .AddressWidth( 11 ))
rotated_q_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_q_0_address0),
    .ce0(rotated_q_0_ce0),
    .we0(rotated_q_0_we0),
    .d0(rotated_q_0_d0),
    .q0(rotated_q_0_q0),
    .address1(grp_rotate_half_fu_248_v148_0_address1),
    .ce1(rotated_q_0_ce1),
    .we1(rotated_q_0_we1),
    .d1(grp_rotate_half_fu_248_v148_0_d1)
);

apply_rotary_pos_vdy #(
    .DataWidth( 32 ),
    .AddressRange( 1536 ),
    .AddressWidth( 11 ))
rotated_k_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotated_k_0_address0),
    .ce0(rotated_k_0_ce0),
    .we0(rotated_k_0_we0),
    .d0(rotated_k_0_d0),
    .q0(rotated_k_0_q0),
    .address1(grp_rotate_half_fu_255_v148_0_address1),
    .ce1(rotated_k_0_ce1),
    .we1(rotated_k_0_we1),
    .d1(grp_rotate_half_fu_255_v148_0_d1)
);

rotate_half grp_rotate_half_fu_248(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_half_fu_248_ap_start),
    .ap_done(grp_rotate_half_fu_248_ap_done),
    .ap_idle(grp_rotate_half_fu_248_ap_idle),
    .ap_ready(grp_rotate_half_fu_248_ap_ready),
    .v147_0_address0(grp_rotate_half_fu_248_v147_0_address0),
    .v147_0_ce0(grp_rotate_half_fu_248_v147_0_ce0),
    .v147_0_q0(q_proj_0_q0),
    .v147_0_address1(grp_rotate_half_fu_248_v147_0_address1),
    .v147_0_ce1(grp_rotate_half_fu_248_v147_0_ce1),
    .v147_0_q1(q_proj_0_q1),
    .v148_0_address0(grp_rotate_half_fu_248_v148_0_address0),
    .v148_0_ce0(grp_rotate_half_fu_248_v148_0_ce0),
    .v148_0_we0(grp_rotate_half_fu_248_v148_0_we0),
    .v148_0_d0(grp_rotate_half_fu_248_v148_0_d0),
    .v148_0_address1(grp_rotate_half_fu_248_v148_0_address1),
    .v148_0_ce1(grp_rotate_half_fu_248_v148_0_ce1),
    .v148_0_we1(grp_rotate_half_fu_248_v148_0_we1),
    .v148_0_d1(grp_rotate_half_fu_248_v148_0_d1)
);

rotate_half grp_rotate_half_fu_255(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rotate_half_fu_255_ap_start),
    .ap_done(grp_rotate_half_fu_255_ap_done),
    .ap_idle(grp_rotate_half_fu_255_ap_idle),
    .ap_ready(grp_rotate_half_fu_255_ap_ready),
    .v147_0_address0(grp_rotate_half_fu_255_v147_0_address0),
    .v147_0_ce0(grp_rotate_half_fu_255_v147_0_ce0),
    .v147_0_q0(k_proj_0_q0),
    .v147_0_address1(grp_rotate_half_fu_255_v147_0_address1),
    .v147_0_ce1(grp_rotate_half_fu_255_v147_0_ce1),
    .v147_0_q1(k_proj_0_q1),
    .v148_0_address0(grp_rotate_half_fu_255_v148_0_address0),
    .v148_0_ce0(grp_rotate_half_fu_255_v148_0_ce0),
    .v148_0_we0(grp_rotate_half_fu_255_v148_0_we0),
    .v148_0_d0(grp_rotate_half_fu_255_v148_0_d0),
    .v148_0_address1(grp_rotate_half_fu_255_v148_0_address1),
    .v148_0_ce1(grp_rotate_half_fu_255_v148_0_ce1),
    .v148_0_we1(grp_rotate_half_fu_255_v148_0_we1),
    .v148_0_d1(grp_rotate_half_fu_255_v148_0_d1)
);

attention_fadd_32pcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fadd_32pcA_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_reg_628),
    .din1(v8_reg_633),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

attention_fadd_32pcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fadd_32pcA_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v1_reg_638),
    .din1(v2_reg_643),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(q_proj_0_load_reg_596),
    .din1(v157_load_reg_601),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rotated_q_0_load_reg_607),
    .din1(v158_load_reg_612),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(k_proj_0_load_reg_618),
    .din1(v157_load_reg_601),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rotated_k_0_load_reg_623),
    .din1(v158_load_reg_612),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_half_fu_248_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln271_fu_350_p2 == 1'd1))) begin
            grp_rotate_half_fu_248_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_half_fu_248_ap_ready == 1'b1)) begin
            grp_rotate_half_fu_248_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rotate_half_fu_255_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln271_fu_350_p2 == 1'd1))) begin
            grp_rotate_half_fu_255_ap_start_reg <= 1'b1;
        end else if ((grp_rotate_half_fu_255_ap_ready == 1'b1)) begin
            grp_rotate_half_fu_255_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        d2_0_0_reg_237 <= add_ln282_reg_555;
    end else if (((icmp_ln280_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        d2_0_0_reg_237 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln282_fu_452_p2 == 1'd1))) begin
        h2_0_reg_226 <= h2_reg_542;
    end else if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        h2_0_reg_226 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln265_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v163_0_reg_182 <= v163_reg_500;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v163_0_reg_182 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln263_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v165_0_0_reg_193 <= 7'd0;
    end else if (((icmp_ln265_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v165_0_0_reg_193 <= add_ln265_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln263_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v167_0_reg_204 <= 5'd0;
    end else if (((icmp_ln273_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        v167_0_reg_204 <= v167_reg_521;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln271_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        v169_0_0_reg_215 <= 7'd0;
    end else if (((icmp_ln273_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v169_0_0_reg_215 <= add_ln273_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln282_reg_555 <= add_ln282_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h2_reg_542 <= h2_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_proj_0_load_reg_618 <= k_proj_0_q0;
        q_proj_0_load_reg_596 <= q_proj_0_q0;
        rotated_k_0_load_reg_623 <= rotated_k_0_q0;
        rotated_q_0_load_reg_607 <= rotated_q_0_q0;
        v157_load_reg_601 <= v157_q0;
        v158_load_reg_612 <= v158_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln282_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sext_ln291_reg_560 <= sext_ln291_fu_477_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln263_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln266_reg_505[11 : 5] <= sub_ln266_fu_318_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln271_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln274_reg_526[11 : 5] <= sub_ln274_fu_382_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln280_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sub_ln291_reg_547[11 : 5] <= sub_ln291_fu_446_p2[11 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v163_reg_500 <= v163_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v167_reg_521 <= v167_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        v1_reg_638 <= grp_fu_278_p2;
        v2_reg_643 <= grp_fu_282_p2;
        v8_reg_633 <= grp_fu_274_p2;
        v_reg_628 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        v3_reg_653 <= grp_fu_266_p2;
        v9_reg_648 <= grp_fu_262_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln280_fu_414_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln280_fu_414_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_proj_0_address0 = sext_ln291_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_0_address0 = grp_rotate_half_fu_255_v147_0_address0;
    end else begin
        k_proj_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_proj_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_0_ce0 = grp_rotate_half_fu_255_v147_0_ce0;
    end else begin
        k_proj_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_proj_0_ce1 = grp_rotate_half_fu_255_v147_0_ce1;
    end else begin
        k_proj_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        q_proj_0_address0 = sext_ln291_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        q_proj_0_address0 = grp_rotate_half_fu_248_v147_0_address0;
    end else begin
        q_proj_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        q_proj_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        q_proj_0_ce0 = grp_rotate_half_fu_248_v147_0_ce0;
    end else begin
        q_proj_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        q_proj_0_ce1 = grp_rotate_half_fu_248_v147_0_ce1;
    end else begin
        q_proj_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rotated_k_0_address0 = sext_ln291_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_address0 = sext_ln274_fu_409_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_address0 = grp_rotate_half_fu_255_v148_0_address0;
    end else begin
        rotated_k_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        rotated_k_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_ce0 = grp_rotate_half_fu_255_v148_0_ce0;
    end else begin
        rotated_k_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_ce1 = grp_rotate_half_fu_255_v148_0_ce1;
    end else begin
        rotated_k_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        rotated_k_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_d0 = grp_rotate_half_fu_255_v148_0_d0;
    end else begin
        rotated_k_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln273_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        rotated_k_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_we0 = grp_rotate_half_fu_255_v148_0_we0;
    end else begin
        rotated_k_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_k_0_we1 = grp_rotate_half_fu_255_v148_0_we1;
    end else begin
        rotated_k_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rotated_q_0_address0 = sext_ln291_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        rotated_q_0_address0 = sext_ln266_fu_345_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_address0 = grp_rotate_half_fu_248_v148_0_address0;
    end else begin
        rotated_q_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        rotated_q_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_ce0 = grp_rotate_half_fu_248_v148_0_ce0;
    end else begin
        rotated_q_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_ce1 = grp_rotate_half_fu_248_v148_0_ce1;
    end else begin
        rotated_q_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rotated_q_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_d0 = grp_rotate_half_fu_248_v148_0_d0;
    end else begin
        rotated_q_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        rotated_q_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_we0 = grp_rotate_half_fu_248_v148_0_we0;
    end else begin
        rotated_q_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rotated_q_0_we1 = grp_rotate_half_fu_248_v148_0_we1;
    end else begin
        rotated_q_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v157_ce0 = 1'b1;
    end else begin
        v157_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v158_ce0 = 1'b1;
    end else begin
        v158_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v159_0_ce0 = 1'b1;
    end else begin
        v159_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v159_0_we0 = 1'b1;
    end else begin
        v159_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v160_0_ce0 = 1'b1;
    end else begin
        v160_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v160_0_we0 = 1'b1;
    end else begin
        v160_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln263_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln265_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln271_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln273_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln280_fu_414_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln282_fu_452_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln265_fu_330_p2 = (v165_0_0_reg_193 + 7'd1);

assign add_ln266_fu_340_p2 = (sub_ln266_reg_505 + zext_ln266_1_fu_336_p1);

assign add_ln273_fu_394_p2 = (v169_0_0_reg_215 + 7'd1);

assign add_ln274_fu_404_p2 = (sub_ln274_reg_526 + zext_ln274_1_fu_400_p1);

assign add_ln282_fu_458_p2 = (d2_0_0_reg_237 + 7'd1);

assign add_ln284_fu_485_p2 = (zext_ln291_1_fu_464_p1 + 10'd480);

assign add_ln291_fu_472_p2 = (sub_ln291_reg_547 + zext_ln291_2_fu_468_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_rotate_half_fu_255_ap_done == 1'b0) | (grp_rotate_half_fu_248_ap_done == 1'b0));
end

assign grp_rotate_half_fu_248_ap_start = grp_rotate_half_fu_248_ap_start_reg;

assign grp_rotate_half_fu_255_ap_start = grp_rotate_half_fu_255_ap_start_reg;

assign h2_fu_420_p2 = (h2_0_reg_226 + 5'd1);

assign icmp_ln263_fu_286_p2 = ((v163_0_reg_182 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln265_fu_324_p2 = ((v165_0_0_reg_193 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln271_fu_350_p2 = ((v167_0_reg_204 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln273_fu_388_p2 = ((v169_0_0_reg_215 == 7'd96) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_414_p2 = ((h2_0_reg_226 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_452_p2 = ((d2_0_0_reg_237 == 7'd96) ? 1'b1 : 1'b0);

assign k_proj_0_address1 = grp_rotate_half_fu_255_v147_0_address1;

assign q_proj_0_address1 = grp_rotate_half_fu_248_v147_0_address1;

assign sext_ln266_fu_345_p1 = $signed(add_ln266_fu_340_p2);

assign sext_ln274_fu_409_p1 = $signed(add_ln274_fu_404_p2);

assign sext_ln291_fu_477_p1 = $signed(add_ln291_fu_472_p2);

assign sub_ln266_fu_318_p2 = (tmp_s_fu_298_p3 - zext_ln266_fu_314_p1);

assign sub_ln274_fu_382_p2 = (tmp_45_fu_362_p3 - zext_ln274_fu_378_p1);

assign sub_ln291_fu_446_p2 = (tmp_47_fu_426_p3 - zext_ln291_fu_442_p1);

assign tmp_44_fu_306_p3 = {{v163_0_reg_182}, {5'd0}};

assign tmp_45_fu_362_p3 = {{v167_0_reg_204}, {7'd0}};

assign tmp_46_fu_370_p3 = {{v167_0_reg_204}, {5'd0}};

assign tmp_47_fu_426_p3 = {{h2_0_reg_226}, {7'd0}};

assign tmp_48_fu_434_p3 = {{h2_0_reg_226}, {5'd0}};

assign tmp_s_fu_298_p3 = {{v163_0_reg_182}, {7'd0}};

assign v157_address0 = zext_ln284_fu_491_p1;

assign v158_address0 = zext_ln284_fu_491_p1;

assign v159_0_address0 = sext_ln291_reg_560;

assign v159_0_d0 = v9_reg_648;

assign v160_0_address0 = sext_ln291_reg_560;

assign v160_0_d0 = v3_reg_653;

assign v163_fu_292_p2 = (v163_0_reg_182 + 5'd1);

assign v167_fu_356_p2 = (v167_0_reg_204 + 5'd1);

assign zext_ln266_1_fu_336_p1 = v165_0_0_reg_193;

assign zext_ln266_fu_314_p1 = tmp_44_fu_306_p3;

assign zext_ln274_1_fu_400_p1 = v169_0_0_reg_215;

assign zext_ln274_fu_378_p1 = tmp_46_fu_370_p3;

assign zext_ln284_fu_491_p1 = add_ln284_fu_485_p2;

assign zext_ln291_1_fu_464_p1 = d2_0_0_reg_237;

assign zext_ln291_2_fu_468_p1 = d2_0_0_reg_237;

assign zext_ln291_fu_442_p1 = tmp_48_fu_434_p3;

always @ (posedge ap_clk) begin
    sub_ln266_reg_505[4:0] <= 5'b00000;
    sub_ln274_reg_526[4:0] <= 5'b00000;
    sub_ln291_reg_547[4:0] <= 5'b00000;
end

endmodule //apply_rotary_pos_emb
