// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_forward_no_mu (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v77_0_address0,
        v77_0_ce0,
        v77_0_q0,
        p_read,
        v79_address0,
        v79_ce0,
        v79_q0,
        v80,
        v81_address0,
        v81_ce0,
        v81_we0,
        v81_d0,
        v81_q0
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v77_0_address0;
output   v77_0_ce0;
input  [7:0] v77_0_q0;
input  [31:0] p_read;
output  [19:0] v79_address0;
output   v79_ce0;
input  [7:0] v79_q0;
input  [31:0] v80;
output  [10:0] v81_address0;
output   v81_ce0;
output   v81_we0;
output  [31:0] v81_d0;
input  [31:0] v81_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] v77_0_address0;
reg v77_0_ce0;
reg v79_ce0;
reg v81_ce0;
reg v81_we0;
reg[31:0] v81_d0;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_175;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state22;
reg   [31:0] reg_179;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_172_p1;
reg   [31:0] reg_185;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] v_reg_353;
wire    ap_CS_fsm_state4;
wire   [10:0] add_ln132_fu_196_p2;
reg   [10:0] add_ln132_reg_361;
wire    ap_CS_fsm_state5;
wire   [20:0] zext_ln192_fu_207_p1;
reg   [20:0] zext_ln192_reg_366;
wire   [0:0] icmp_ln132_fu_190_p2;
reg   [10:0] v81_addr_reg_371;
wire   [8:0] add_ln133_fu_217_p2;
reg   [8:0] add_ln133_reg_379;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln133_fu_211_p2;
reg   [7:0] v79_load_reg_389;
wire    ap_CS_fsm_state7;
wire   [10:0] shl_ln_fu_263_p3;
reg   [10:0] shl_ln_reg_394;
wire   [2:0] add_ln137_fu_281_p2;
reg   [2:0] add_ln137_reg_402;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln173_fu_311_p2;
reg   [0:0] icmp_ln173_reg_407;
wire   [0:0] icmp_ln137_fu_275_p2;
wire   [0:0] icmp_ln179_fu_317_p2;
reg   [0:0] icmp_ln179_reg_411;
wire  signed [31:0] sext_ln205_fu_333_p1;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] v6_reg_430;
wire    ap_CS_fsm_state20;
wire  signed [31:0] sext_ln193_fu_338_p1;
wire    ap_CS_fsm_state23;
reg   [31:0] v4_reg_440;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] v2_reg_445;
wire    ap_CS_fsm_state50;
reg   [10:0] j2_0_0_reg_124;
wire    ap_CS_fsm_state51;
reg   [8:0] k_0_0_reg_135;
reg   [2:0] val_assign_0_reg_147;
wire    ap_CS_fsm_state21;
wire   [63:0] zext_ln134_fu_202_p1;
wire  signed [63:0] sext_ln134_fu_258_p1;
wire   [63:0] zext_ln203_fu_323_p1;
wire   [63:0] zext_ln191_fu_328_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
reg  signed [31:0] grp_fu_172_p0;
wire   [19:0] tmp_15_fu_223_p3;
wire   [17:0] tmp_16_fu_235_p3;
wire   [20:0] zext_ln134_1_fu_231_p1;
wire   [20:0] zext_ln134_2_fu_243_p1;
wire   [20:0] sub_ln134_fu_247_p2;
wire   [20:0] add_ln134_fu_253_p2;
wire   [10:0] zext_ln137_fu_271_p1;
wire   [2:0] shl_ln155_fu_292_p2;
wire   [7:0] zext_ln155_fu_298_p1;
wire   [7:0] ashr_ln157_fu_302_p2;
wire   [1:0] trunc_ln160_fu_307_p1;
wire   [10:0] add_ln143_fu_287_p2;
reg   [1:0] grp_fu_158_opcode;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
end

attention_faddfsutde #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_faddfsutde_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_179),
    .din1(reg_185),
    .opcode(grp_fu_158_opcode),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(v80),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

attention_fdiv_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fdiv_32rcU_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_179),
    .din1(v_reg_353),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

attention_sitofp_udo #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_sitofp_udo_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .ce(1'b1),
    .dout(grp_fu_172_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        j2_0_0_reg_124 <= add_ln132_reg_361;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j2_0_0_reg_124 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln137_fu_275_p2 == 1'd1))) begin
        k_0_0_reg_135 <= add_ln133_reg_379;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln132_fu_190_p2 == 1'd0))) begin
        k_0_0_reg_135 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        val_assign_0_reg_147 <= add_ln137_reg_402;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        val_assign_0_reg_147 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln132_reg_361 <= add_ln132_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln133_reg_379 <= add_ln133_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln137_reg_402 <= add_ln137_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln137_fu_275_p2 == 1'd0))) begin
        icmp_ln173_reg_407 <= icmp_ln173_fu_311_p2;
        icmp_ln179_reg_411 <= icmp_ln179_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_175 <= v77_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_179 <= v81_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_185 <= grp_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shl_ln_reg_394[10 : 2] <= shl_ln_fu_263_p3[10 : 2];
        v79_load_reg_389 <= v79_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        v2_reg_445 <= grp_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        v4_reg_440 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        v6_reg_430 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln132_fu_190_p2 == 1'd0))) begin
        v81_addr_reg_371 <= zext_ln134_fu_202_p1;
        zext_ln192_reg_366[10 : 0] <= zext_ln192_fu_207_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_reg_353 <= grp_fu_162_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln132_fu_190_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln132_fu_190_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_158_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_158_opcode = 2'd0;
    end else begin
        grp_fu_158_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_172_p0 = sext_ln193_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_172_p0 = sext_ln205_fu_333_p1;
    end else begin
        grp_fu_172_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln137_fu_275_p2 == 1'd0))) begin
        if ((icmp_ln173_fu_311_p2 == 1'd1)) begin
            v77_0_address0 = zext_ln191_fu_328_p1;
        end else if (((icmp_ln179_fu_317_p2 == 1'd1) & (icmp_ln173_fu_311_p2 == 1'd0))) begin
            v77_0_address0 = zext_ln203_fu_323_p1;
        end else begin
            v77_0_address0 = 'bx;
        end
    end else begin
        v77_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln173_fu_311_p2 == 1'd1) & (icmp_ln137_fu_275_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln179_fu_317_p2 == 1'd1) & (icmp_ln137_fu_275_p2 == 1'd0) & (icmp_ln173_fu_311_p2 == 1'd0)))) begin
        v77_0_ce0 = 1'b1;
    end else begin
        v77_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v79_ce0 = 1'b1;
    end else begin
        v79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln173_reg_407 == 1'd1)) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln179_reg_411 == 1'd1) & (icmp_ln173_reg_407 == 1'd0)))) begin
        v81_ce0 = 1'b1;
    end else begin
        v81_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        v81_d0 = v2_reg_445;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln173_reg_407 == 1'd1))) begin
        v81_d0 = v4_reg_440;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln179_reg_411 == 1'd1) & (icmp_ln173_reg_407 == 1'd0))) begin
        v81_d0 = v6_reg_430;
    end else begin
        v81_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln173_reg_407 == 1'd1)) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln179_reg_411 == 1'd1) & (icmp_ln173_reg_407 == 1'd0)))) begin
        v81_we0 = 1'b1;
    end else begin
        v81_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln132_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln133_fu_211_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln137_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln179_fu_317_p2 == 1'd0) & (icmp_ln137_fu_275_p2 == 1'd0) & (icmp_ln173_fu_311_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln179_fu_317_p2 == 1'd1) & (icmp_ln137_fu_275_p2 == 1'd0) & (icmp_ln173_fu_311_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln132_fu_196_p2 = (j2_0_0_reg_124 + 11'd1);

assign add_ln133_fu_217_p2 = (k_0_0_reg_135 + 9'd1);

assign add_ln134_fu_253_p2 = (sub_ln134_fu_247_p2 + zext_ln192_reg_366);

assign add_ln137_fu_281_p2 = (val_assign_0_reg_147 + 3'd1);

assign add_ln143_fu_287_p2 = (shl_ln_reg_394 + zext_ln137_fu_271_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ashr_ln157_fu_302_p2 = $signed(v79_load_reg_389) >>> zext_ln155_fu_298_p1;

assign icmp_ln132_fu_190_p2 = ((j2_0_0_reg_124 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_211_p2 = ((k_0_0_reg_135 == 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_275_p2 = ((val_assign_0_reg_147 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_311_p2 = ((trunc_ln160_fu_307_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_317_p2 = ((trunc_ln160_fu_307_p1 == 2'd2) ? 1'b1 : 1'b0);

assign sext_ln134_fu_258_p1 = $signed(add_ln134_fu_253_p2);

assign sext_ln193_fu_338_p1 = $signed(reg_175);

assign sext_ln205_fu_333_p1 = $signed(reg_175);

assign shl_ln155_fu_292_p2 = val_assign_0_reg_147 << 3'd1;

assign shl_ln_fu_263_p3 = {{k_0_0_reg_135}, {2'd0}};

assign sub_ln134_fu_247_p2 = (zext_ln134_1_fu_231_p1 - zext_ln134_2_fu_243_p1);

assign tmp_15_fu_223_p3 = {{k_0_0_reg_135}, {11'd0}};

assign tmp_16_fu_235_p3 = {{k_0_0_reg_135}, {9'd0}};

assign trunc_ln160_fu_307_p1 = ashr_ln157_fu_302_p2[1:0];

assign v79_address0 = sext_ln134_fu_258_p1;

assign v81_address0 = v81_addr_reg_371;

assign zext_ln134_1_fu_231_p1 = tmp_15_fu_223_p3;

assign zext_ln134_2_fu_243_p1 = tmp_16_fu_235_p3;

assign zext_ln134_fu_202_p1 = j2_0_0_reg_124;

assign zext_ln137_fu_271_p1 = val_assign_0_reg_147;

assign zext_ln155_fu_298_p1 = shl_ln155_fu_292_p2;

assign zext_ln191_fu_328_p1 = add_ln143_fu_287_p2;

assign zext_ln192_fu_207_p1 = j2_0_0_reg_124;

assign zext_ln203_fu_323_p1 = add_ln143_fu_287_p2;

always @ (posedge ap_clk) begin
    zext_ln192_reg_366[20:11] <= 10'b0000000000;
    shl_ln_reg_394[1:0] <= 2'b00;
end

endmodule //linear_forward_no_mu
