// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rotate_half_HH_
#define _rotate_half_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct rotate_half : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > v153_0_address0;
    sc_out< sc_logic > v153_0_ce0;
    sc_in< sc_lv<32> > v153_0_q0;
    sc_out< sc_lv<11> > v153_0_address1;
    sc_out< sc_logic > v153_0_ce1;
    sc_in< sc_lv<32> > v153_0_q1;
    sc_out< sc_lv<11> > v154_0_address0;
    sc_out< sc_logic > v154_0_ce0;
    sc_out< sc_logic > v154_0_we0;
    sc_out< sc_lv<32> > v154_0_d0;
    sc_out< sc_lv<11> > v154_0_address1;
    sc_out< sc_logic > v154_0_ce1;
    sc_out< sc_logic > v154_0_we1;
    sc_out< sc_lv<32> > v154_0_d1;


    // Module declarations
    rotate_half(sc_module_name name);
    SC_HAS_PROCESS(rotate_half);

    ~rotate_half();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > h1_fu_125_p2;
    sc_signal< sc_lv<5> > h1_reg_225;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > sub_ln250_fu_151_p2;
    sc_signal< sc_lv<12> > sub_ln250_reg_230;
    sc_signal< sc_lv<1> > icmp_ln247_fu_119_p2;
    sc_signal< sc_lv<6> > add_ln249_fu_167_p2;
    sc_signal< sc_lv<6> > add_ln249_reg_239;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > sext_ln250_fu_188_p1;
    sc_signal< sc_lv<64> > sext_ln250_reg_244;
    sc_signal< sc_lv<1> > icmp_ln249_fu_161_p2;
    sc_signal< sc_lv<64> > sext_ln253_fu_202_p1;
    sc_signal< sc_lv<64> > sext_ln253_reg_254;
    sc_signal< sc_lv<5> > h1_0_reg_97;
    sc_signal< sc_lv<6> > d1_0_0_reg_108;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > tmp_8_fu_139_p3;
    sc_signal< sc_lv<12> > tmp_s_fu_131_p3;
    sc_signal< sc_lv<12> > zext_ln250_fu_147_p1;
    sc_signal< sc_lv<7> > zext_ln249_fu_157_p1;
    sc_signal< sc_lv<7> > add_ln250_fu_173_p2;
    sc_signal< sc_lv<12> > zext_ln250_1_fu_179_p1;
    sc_signal< sc_lv<12> > add_ln250_1_fu_183_p2;
    sc_signal< sc_lv<12> > zext_ln253_fu_193_p1;
    sc_signal< sc_lv<12> > add_ln253_fu_197_p2;
    sc_signal< sc_lv<32> > bitcast_ln251_fu_207_p1;
    sc_signal< sc_lv<32> > xor_ln251_fu_211_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<6> ap_const_lv6_30;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<7> ap_const_lv7_30;
    static const sc_lv<32> ap_const_lv32_80000000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln249_fu_167_p2();
    void thread_add_ln250_1_fu_183_p2();
    void thread_add_ln250_fu_173_p2();
    void thread_add_ln253_fu_197_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln251_fu_207_p1();
    void thread_h1_fu_125_p2();
    void thread_icmp_ln247_fu_119_p2();
    void thread_icmp_ln249_fu_161_p2();
    void thread_sext_ln250_fu_188_p1();
    void thread_sext_ln253_fu_202_p1();
    void thread_sub_ln250_fu_151_p2();
    void thread_tmp_8_fu_139_p3();
    void thread_tmp_s_fu_131_p3();
    void thread_v153_0_address0();
    void thread_v153_0_address1();
    void thread_v153_0_ce0();
    void thread_v153_0_ce1();
    void thread_v154_0_address0();
    void thread_v154_0_address1();
    void thread_v154_0_ce0();
    void thread_v154_0_ce1();
    void thread_v154_0_d0();
    void thread_v154_0_d1();
    void thread_v154_0_we0();
    void thread_v154_0_we1();
    void thread_xor_ln251_fu_211_p2();
    void thread_zext_ln249_fu_157_p1();
    void thread_zext_ln250_1_fu_179_p1();
    void thread_zext_ln250_fu_147_p1();
    void thread_zext_ln253_fu_193_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
