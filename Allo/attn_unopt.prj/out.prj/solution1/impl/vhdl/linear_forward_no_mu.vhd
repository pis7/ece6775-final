-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linear_forward_no_mu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v77_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v77_0_ce0 : OUT STD_LOGIC;
    v77_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    v79_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    v79_ce0 : OUT STD_LOGIC;
    v79_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v80 : IN STD_LOGIC_VECTOR (31 downto 0);
    v81_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v81_ce0 : OUT STD_LOGIC;
    v81_we0 : OUT STD_LOGIC;
    v81_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v81_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of linear_forward_no_mu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_175 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln132_fu_196_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln132_reg_361 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln192_fu_207_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln192_reg_366 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln132_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v81_addr_reg_371 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln133_fu_217_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln133_reg_379 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln133_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v79_load_reg_389 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shl_ln_fu_263_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_reg_394 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln137_fu_281_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln137_reg_402 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln173_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln205_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v6_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal sext_ln193_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal v4_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal j2_0_0_reg_124 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal k_0_0_reg_135 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_assign_0_reg_147 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln134_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln134_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_223_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_fu_235_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln134_1_fu_231_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln134_2_fu_243_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln134_fu_247_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln134_fu_253_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln137_fu_271_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln155_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln155_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ashr_ln157_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln160_fu_307_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln143_fu_287_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_158_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component attention_faddfsutde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fmul_32qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fdiv_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_sitofp_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    attention_faddfsutde_U40 : component attention_faddfsutde
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_179,
        din1 => reg_185,
        opcode => grp_fu_158_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p2);

    attention_fmul_32qcK_U41 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => v80,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    attention_fdiv_32rcU_U42 : component attention_fdiv_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_179,
        din1 => v_reg_353,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    attention_sitofp_udo_U43 : component attention_sitofp_udo
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_172_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j2_0_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                j2_0_0_reg_124 <= add_ln132_reg_361;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j2_0_0_reg_124 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_275_p2 = ap_const_lv1_1))) then 
                k_0_0_reg_135 <= add_ln133_reg_379;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln132_fu_190_p2 = ap_const_lv1_0))) then 
                k_0_0_reg_135 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    val_assign_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                val_assign_0_reg_147 <= add_ln137_reg_402;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                val_assign_0_reg_147 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln132_reg_361 <= add_ln132_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln133_reg_379 <= add_ln133_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln137_reg_402 <= add_ln137_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_275_p2 = ap_const_lv1_0))) then
                icmp_ln173_reg_407 <= icmp_ln173_fu_311_p2;
                icmp_ln179_reg_411 <= icmp_ln179_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_175 <= v77_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_179 <= v81_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_185 <= grp_fu_172_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    shl_ln_reg_394(10 downto 2) <= shl_ln_fu_263_p3(10 downto 2);
                v79_load_reg_389 <= v79_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                v2_reg_445 <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                v4_reg_440 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                v6_reg_430 <= grp_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln132_fu_190_p2 = ap_const_lv1_0))) then
                v81_addr_reg_371 <= zext_ln134_fu_202_p1(11 - 1 downto 0);
                    zext_ln192_reg_366(10 downto 0) <= zext_ln192_fu_207_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v_reg_353 <= grp_fu_162_p2;
            end if;
        end if;
    end process;
    zext_ln192_reg_366(20 downto 11) <= "0000000000";
    shl_ln_reg_394(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln132_fu_190_p2, ap_CS_fsm_state6, icmp_ln133_fu_211_p2, ap_CS_fsm_state8, icmp_ln173_fu_311_p2, icmp_ln137_fu_275_p2, icmp_ln179_fu_317_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln132_fu_190_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln133_fu_211_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_275_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln179_fu_317_p2 = ap_const_lv1_0) and (icmp_ln137_fu_275_p2 = ap_const_lv1_0) and (icmp_ln173_fu_311_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln179_fu_317_p2 = ap_const_lv1_1) and (icmp_ln137_fu_275_p2 = ap_const_lv1_0) and (icmp_ln173_fu_311_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln132_fu_196_p2 <= std_logic_vector(unsigned(j2_0_0_reg_124) + unsigned(ap_const_lv11_1));
    add_ln133_fu_217_p2 <= std_logic_vector(unsigned(k_0_0_reg_135) + unsigned(ap_const_lv9_1));
    add_ln134_fu_253_p2 <= std_logic_vector(unsigned(sub_ln134_fu_247_p2) + unsigned(zext_ln192_reg_366));
    add_ln137_fu_281_p2 <= std_logic_vector(unsigned(val_assign_0_reg_147) + unsigned(ap_const_lv3_1));
    add_ln143_fu_287_p2 <= std_logic_vector(unsigned(shl_ln_reg_394) + unsigned(zext_ln137_fu_271_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln132_fu_190_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln132_fu_190_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln132_fu_190_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln132_fu_190_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln157_fu_302_p2 <= std_logic_vector(shift_right(signed(v79_load_reg_389),to_integer(unsigned('0' & zext_ln155_fu_298_p1(8-1 downto 0)))));

    grp_fu_158_opcode_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_158_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_158_opcode <= ap_const_lv2_0;
        else 
            grp_fu_158_opcode <= "XX";
        end if; 
    end process;


    grp_fu_172_p0_assign_proc : process(sext_ln205_fu_333_p1, ap_CS_fsm_state10, sext_ln193_fu_338_p1, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_172_p0 <= sext_ln193_fu_338_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_172_p0 <= sext_ln205_fu_333_p1;
        else 
            grp_fu_172_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln132_fu_190_p2 <= "1" when (j2_0_0_reg_124 = ap_const_lv11_600) else "0";
    icmp_ln133_fu_211_p2 <= "1" when (k_0_0_reg_135 = ap_const_lv9_180) else "0";
    icmp_ln137_fu_275_p2 <= "1" when (val_assign_0_reg_147 = ap_const_lv3_4) else "0";
    icmp_ln173_fu_311_p2 <= "1" when (trunc_ln160_fu_307_p1 = ap_const_lv2_1) else "0";
    icmp_ln179_fu_317_p2 <= "1" when (trunc_ln160_fu_307_p1 = ap_const_lv2_2) else "0";
        sext_ln134_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln134_fu_253_p2),64));

        sext_ln193_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_175),32));

        sext_ln205_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_175),32));

    shl_ln155_fu_292_p2 <= std_logic_vector(shift_left(unsigned(val_assign_0_reg_147),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln_fu_263_p3 <= (k_0_0_reg_135 & ap_const_lv2_0);
    sub_ln134_fu_247_p2 <= std_logic_vector(unsigned(zext_ln134_1_fu_231_p1) - unsigned(zext_ln134_2_fu_243_p1));
    tmp_15_fu_223_p3 <= (k_0_0_reg_135 & ap_const_lv11_0);
    tmp_16_fu_235_p3 <= (k_0_0_reg_135 & ap_const_lv9_0);
    trunc_ln160_fu_307_p1 <= ashr_ln157_fu_302_p2(2 - 1 downto 0);

    v77_0_address0_assign_proc : process(ap_CS_fsm_state8, icmp_ln173_fu_311_p2, icmp_ln137_fu_275_p2, icmp_ln179_fu_317_p2, zext_ln203_fu_323_p1, zext_ln191_fu_328_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln137_fu_275_p2 = ap_const_lv1_0))) then
            if ((icmp_ln173_fu_311_p2 = ap_const_lv1_1)) then 
                v77_0_address0 <= zext_ln191_fu_328_p1(11 - 1 downto 0);
            elsif (((icmp_ln179_fu_317_p2 = ap_const_lv1_1) and (icmp_ln173_fu_311_p2 = ap_const_lv1_0))) then 
                v77_0_address0 <= zext_ln203_fu_323_p1(11 - 1 downto 0);
            else 
                v77_0_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            v77_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    v77_0_ce0_assign_proc : process(ap_CS_fsm_state8, icmp_ln173_fu_311_p2, icmp_ln137_fu_275_p2, icmp_ln179_fu_317_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln173_fu_311_p2 = ap_const_lv1_1) and (icmp_ln137_fu_275_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln179_fu_317_p2 = ap_const_lv1_1) and (icmp_ln137_fu_275_p2 = ap_const_lv1_0) and (icmp_ln173_fu_311_p2 = ap_const_lv1_0)))) then 
            v77_0_ce0 <= ap_const_logic_1;
        else 
            v77_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v79_address0 <= sext_ln134_fu_258_p1(20 - 1 downto 0);

    v79_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v79_ce0 <= ap_const_logic_1;
        else 
            v79_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v81_address0 <= v81_addr_reg_371;

    v81_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln173_reg_407, icmp_ln179_reg_411, ap_CS_fsm_state51, ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln173_reg_407 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln179_reg_411 = ap_const_lv1_1) and (icmp_ln173_reg_407 = ap_const_lv1_0)))) then 
            v81_ce0 <= ap_const_logic_1;
        else 
            v81_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v81_d0_assign_proc : process(icmp_ln173_reg_407, icmp_ln179_reg_411, v6_reg_430, v4_reg_440, v2_reg_445, ap_CS_fsm_state51, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            v81_d0 <= v2_reg_445;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln173_reg_407 = ap_const_lv1_1))) then 
            v81_d0 <= v4_reg_440;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln179_reg_411 = ap_const_lv1_1) and (icmp_ln173_reg_407 = ap_const_lv1_0))) then 
            v81_d0 <= v6_reg_430;
        else 
            v81_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v81_we0_assign_proc : process(icmp_ln173_reg_407, icmp_ln179_reg_411, ap_CS_fsm_state51, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln173_reg_407 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln179_reg_411 = ap_const_lv1_1) and (icmp_ln173_reg_407 = ap_const_lv1_0)))) then 
            v81_we0 <= ap_const_logic_1;
        else 
            v81_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln134_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_223_p3),21));
    zext_ln134_2_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_235_p3),21));
    zext_ln134_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_0_reg_124),64));
    zext_ln137_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_0_reg_147),11));
    zext_ln155_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln155_fu_292_p2),8));
    zext_ln191_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_fu_287_p2),64));
    zext_ln192_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_0_reg_124),21));
    zext_ln203_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln143_fu_287_p2),64));
end behav;
