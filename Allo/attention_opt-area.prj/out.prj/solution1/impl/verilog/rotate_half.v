// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rotate_half (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v153_0_address0,
        v153_0_ce0,
        v153_0_q0,
        v153_0_address1,
        v153_0_ce1,
        v153_0_q1,
        v154_0_address0,
        v154_0_ce0,
        v154_0_we0,
        v154_0_d0,
        v154_0_address1,
        v154_0_ce1,
        v154_0_we1,
        v154_0_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v153_0_address0;
output   v153_0_ce0;
input  [31:0] v153_0_q0;
output  [10:0] v153_0_address1;
output   v153_0_ce1;
input  [31:0] v153_0_q1;
output  [10:0] v154_0_address0;
output   v154_0_ce0;
output   v154_0_we0;
output  [31:0] v154_0_d0;
output  [10:0] v154_0_address1;
output   v154_0_ce1;
output   v154_0_we1;
output  [31:0] v154_0_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v153_0_ce0;
reg v153_0_ce1;
reg v154_0_ce0;
reg v154_0_we0;
reg v154_0_ce1;
reg v154_0_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] h1_fu_125_p2;
reg   [4:0] h1_reg_225;
wire    ap_CS_fsm_state2;
wire   [11:0] sub_ln250_fu_151_p2;
reg   [11:0] sub_ln250_reg_230;
wire   [0:0] icmp_ln247_fu_119_p2;
wire   [5:0] add_ln249_fu_167_p2;
reg   [5:0] add_ln249_reg_239;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln250_fu_188_p1;
reg  signed [63:0] sext_ln250_reg_244;
wire   [0:0] icmp_ln249_fu_161_p2;
wire  signed [63:0] sext_ln253_fu_202_p1;
reg  signed [63:0] sext_ln253_reg_254;
reg   [4:0] h1_0_reg_97;
reg   [5:0] d1_0_0_reg_108;
wire    ap_CS_fsm_state4;
wire   [9:0] tmp_8_fu_139_p3;
wire   [11:0] tmp_s_fu_131_p3;
wire   [11:0] zext_ln250_fu_147_p1;
wire   [6:0] zext_ln249_fu_157_p1;
wire   [6:0] add_ln250_fu_173_p2;
wire   [11:0] zext_ln250_1_fu_179_p1;
wire   [11:0] add_ln250_1_fu_183_p2;
wire   [11:0] zext_ln253_fu_193_p1;
wire   [11:0] add_ln253_fu_197_p2;
wire   [31:0] bitcast_ln251_fu_207_p1;
wire   [31:0] xor_ln251_fu_211_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d1_0_0_reg_108 <= add_ln249_reg_239;
    end else if (((icmp_ln247_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        d1_0_0_reg_108 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln249_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h1_0_reg_97 <= h1_reg_225;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h1_0_reg_97 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln249_reg_239 <= add_ln249_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h1_reg_225 <= h1_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln249_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln250_reg_244 <= sext_ln250_fu_188_p1;
        sext_ln253_reg_254 <= sext_ln253_fu_202_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln247_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln250_reg_230[11 : 5] <= sub_ln250_fu_151_p2[11 : 5];
    end
end

always @ (*) begin
    if ((((icmp_ln247_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v153_0_ce0 = 1'b1;
    end else begin
        v153_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v153_0_ce1 = 1'b1;
    end else begin
        v153_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v154_0_ce0 = 1'b1;
    end else begin
        v154_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v154_0_ce1 = 1'b1;
    end else begin
        v154_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v154_0_we0 = 1'b1;
    end else begin
        v154_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v154_0_we1 = 1'b1;
    end else begin
        v154_0_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln247_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln249_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln249_fu_167_p2 = (d1_0_0_reg_108 + 6'd1);

assign add_ln250_1_fu_183_p2 = (sub_ln250_reg_230 + zext_ln250_1_fu_179_p1);

assign add_ln250_fu_173_p2 = (zext_ln249_fu_157_p1 + 7'd48);

assign add_ln253_fu_197_p2 = (sub_ln250_reg_230 + zext_ln253_fu_193_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bitcast_ln251_fu_207_p1 = v153_0_q0;

assign h1_fu_125_p2 = (h1_0_reg_97 + 5'd1);

assign icmp_ln247_fu_119_p2 = ((h1_0_reg_97 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln249_fu_161_p2 = ((d1_0_0_reg_108 == 6'd48) ? 1'b1 : 1'b0);

assign sext_ln250_fu_188_p1 = $signed(add_ln250_1_fu_183_p2);

assign sext_ln253_fu_202_p1 = $signed(add_ln253_fu_197_p2);

assign sub_ln250_fu_151_p2 = (tmp_s_fu_131_p3 - zext_ln250_fu_147_p1);

assign tmp_8_fu_139_p3 = {{h1_0_reg_97}, {5'd0}};

assign tmp_s_fu_131_p3 = {{h1_0_reg_97}, {7'd0}};

assign v153_0_address0 = sext_ln250_fu_188_p1;

assign v153_0_address1 = sext_ln253_fu_202_p1;

assign v154_0_address0 = sext_ln253_reg_254;

assign v154_0_address1 = sext_ln250_reg_244;

assign v154_0_d0 = xor_ln251_fu_211_p2;

assign v154_0_d1 = v153_0_q1;

assign xor_ln251_fu_211_p2 = (bitcast_ln251_fu_207_p1 ^ 32'd2147483648);

assign zext_ln249_fu_157_p1 = d1_0_0_reg_108;

assign zext_ln250_1_fu_179_p1 = add_ln250_fu_173_p2;

assign zext_ln250_fu_147_p1 = tmp_8_fu_139_p3;

assign zext_ln253_fu_193_p1 = d1_0_0_reg_108;

always @ (posedge ap_clk) begin
    sub_ln250_reg_230[4:0] <= 5'b00000;
end

endmodule //rotate_half
