// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v225_0_address0,
        v225_0_ce0,
        v225_0_q0,
        v226_0_address0,
        v226_0_ce0,
        v226_0_we0,
        v226_0_d0,
        v226_0_q0
);

parameter    ap_ST_fsm_state1 = 64'd1;
parameter    ap_ST_fsm_state2 = 64'd2;
parameter    ap_ST_fsm_state3 = 64'd4;
parameter    ap_ST_fsm_state4 = 64'd8;
parameter    ap_ST_fsm_state5 = 64'd16;
parameter    ap_ST_fsm_state6 = 64'd32;
parameter    ap_ST_fsm_state7 = 64'd64;
parameter    ap_ST_fsm_state8 = 64'd128;
parameter    ap_ST_fsm_state9 = 64'd256;
parameter    ap_ST_fsm_state10 = 64'd512;
parameter    ap_ST_fsm_state11 = 64'd1024;
parameter    ap_ST_fsm_state12 = 64'd2048;
parameter    ap_ST_fsm_state13 = 64'd4096;
parameter    ap_ST_fsm_state14 = 64'd8192;
parameter    ap_ST_fsm_state15 = 64'd16384;
parameter    ap_ST_fsm_state16 = 64'd32768;
parameter    ap_ST_fsm_state17 = 64'd65536;
parameter    ap_ST_fsm_state18 = 64'd131072;
parameter    ap_ST_fsm_state19 = 64'd262144;
parameter    ap_ST_fsm_state20 = 64'd524288;
parameter    ap_ST_fsm_state21 = 64'd1048576;
parameter    ap_ST_fsm_state22 = 64'd2097152;
parameter    ap_ST_fsm_state23 = 64'd4194304;
parameter    ap_ST_fsm_state24 = 64'd8388608;
parameter    ap_ST_fsm_state25 = 64'd16777216;
parameter    ap_ST_fsm_state26 = 64'd33554432;
parameter    ap_ST_fsm_state27 = 64'd67108864;
parameter    ap_ST_fsm_state28 = 64'd134217728;
parameter    ap_ST_fsm_state29 = 64'd268435456;
parameter    ap_ST_fsm_state30 = 64'd536870912;
parameter    ap_ST_fsm_state31 = 64'd1073741824;
parameter    ap_ST_fsm_state32 = 64'd2147483648;
parameter    ap_ST_fsm_state33 = 64'd4294967296;
parameter    ap_ST_fsm_state34 = 64'd8589934592;
parameter    ap_ST_fsm_state35 = 64'd17179869184;
parameter    ap_ST_fsm_state36 = 64'd34359738368;
parameter    ap_ST_fsm_state37 = 64'd68719476736;
parameter    ap_ST_fsm_state38 = 64'd137438953472;
parameter    ap_ST_fsm_state39 = 64'd274877906944;
parameter    ap_ST_fsm_state40 = 64'd549755813888;
parameter    ap_ST_fsm_state41 = 64'd1099511627776;
parameter    ap_ST_fsm_state42 = 64'd2199023255552;
parameter    ap_ST_fsm_state43 = 64'd4398046511104;
parameter    ap_ST_fsm_state44 = 64'd8796093022208;
parameter    ap_ST_fsm_state45 = 64'd17592186044416;
parameter    ap_ST_fsm_state46 = 64'd35184372088832;
parameter    ap_ST_fsm_state47 = 64'd70368744177664;
parameter    ap_ST_fsm_state48 = 64'd140737488355328;
parameter    ap_ST_fsm_state49 = 64'd281474976710656;
parameter    ap_ST_fsm_state50 = 64'd562949953421312;
parameter    ap_ST_fsm_state51 = 64'd1125899906842624;
parameter    ap_ST_fsm_state52 = 64'd2251799813685248;
parameter    ap_ST_fsm_state53 = 64'd4503599627370496;
parameter    ap_ST_fsm_state54 = 64'd9007199254740992;
parameter    ap_ST_fsm_state55 = 64'd18014398509481984;
parameter    ap_ST_fsm_state56 = 64'd36028797018963968;
parameter    ap_ST_fsm_state57 = 64'd72057594037927936;
parameter    ap_ST_fsm_state58 = 64'd144115188075855872;
parameter    ap_ST_fsm_state59 = 64'd288230376151711744;
parameter    ap_ST_fsm_state60 = 64'd576460752303423488;
parameter    ap_ST_fsm_state61 = 64'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 64'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 64'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 64'd9223372036854775808;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] v225_0_address0;
output   v225_0_ce0;
input  [31:0] v225_0_q0;
output  [6:0] v226_0_address0;
output   v226_0_ce0;
output   v226_0_we0;
output  [31:0] v226_0_d0;
input  [31:0] v226_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v225_0_ce0;
reg[6:0] v226_0_address0;
reg v226_0_ce0;
reg v226_0_we0;
reg[31:0] v226_0_d0;

(* fsm_encoding = "none" *) reg   [63:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_262;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state47;
wire   [4:0] i7_fu_275_p2;
reg   [4:0] i7_reg_544;
wire    ap_CS_fsm_state2;
wire   [7:0] sub_ln387_fu_301_p2;
reg   [7:0] sub_ln387_reg_549;
wire   [0:0] icmp_ln384_fu_269_p2;
wire   [2:0] add_ln386_fu_313_p2;
reg   [2:0] add_ln386_reg_557;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln387_fu_328_p1;
reg  signed [63:0] sext_ln387_reg_562;
wire   [0:0] icmp_ln386_fu_307_p2;
wire   [4:0] i8_fu_339_p2;
reg   [4:0] i8_reg_575;
wire    ap_CS_fsm_state5;
wire   [7:0] sub_ln419_fu_365_p2;
reg   [7:0] sub_ln419_reg_580;
wire   [0:0] icmp_ln392_fu_333_p2;
wire   [2:0] add_ln396_fu_377_p2;
reg   [2:0] add_ln396_reg_590;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln396_fu_371_p2;
wire   [31:0] select_ln400_fu_481_p3;
wire    ap_CS_fsm_state8;
wire   [2:0] add_ln407_fu_495_p2;
reg   [2:0] add_ln407_reg_608;
wire    ap_CS_fsm_state9;
reg   [6:0] v226_0_addr_2_reg_613;
wire   [0:0] icmp_ln407_fu_489_p2;
wire   [31:0] grp_fu_245_p2;
reg   [31:0] p_y_assign_reg_618;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_pow_generic_float_s_fu_223_ap_return;
reg   [31:0] tmp_i_i_reg_623;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state45;
wire   [2:0] add_ln418_fu_521_p2;
reg   [2:0] add_ln418_reg_636;
wire    ap_CS_fsm_state46;
reg   [6:0] v226_0_addr_3_reg_641;
wire   [0:0] icmp_ln418_fu_515_p2;
wire   [31:0] grp_fu_251_p2;
reg   [31:0] v3_reg_646;
wire    ap_CS_fsm_state63;
wire    grp_pow_generic_float_s_fu_223_ap_start;
wire    grp_pow_generic_float_s_fu_223_ap_done;
wire    grp_pow_generic_float_s_fu_223_ap_idle;
wire    grp_pow_generic_float_s_fu_223_ap_ready;
reg   [4:0] i7_0_reg_133;
reg   [2:0] k4_0_0_reg_144;
wire    ap_CS_fsm_state4;
reg   [4:0] i8_0_reg_155;
reg   [2:0] k5_0_0_reg_166;
reg   [31:0] v236_0_reg_177;
reg   [31:0] v246_0_reg_189;
reg   [2:0] k6_0_0_reg_201;
reg   [2:0] k7_0_0_reg_212;
wire    ap_CS_fsm_state64;
reg    grp_pow_generic_float_s_fu_223_ap_start_reg;
reg   [63:0] ap_NS_fsm;
wire    ap_NS_fsm_state16;
wire    ap_CS_fsm_state16;
wire  signed [63:0] sext_ln397_fu_392_p1;
wire  signed [63:0] sext_ln408_fu_510_p1;
wire  signed [63:0] sext_ln419_fu_536_p1;
reg   [31:0] grp_fu_245_p0;
reg   [31:0] grp_fu_245_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state48;
wire   [5:0] tmp_5_fu_289_p3;
wire   [7:0] tmp_s_fu_281_p3;
wire   [7:0] zext_ln387_fu_297_p1;
wire   [7:0] zext_ln387_1_fu_319_p1;
wire   [7:0] add_ln387_fu_323_p2;
wire   [5:0] tmp_7_fu_353_p3;
wire   [7:0] tmp_6_fu_345_p3;
wire   [7:0] zext_ln419_fu_361_p1;
wire   [7:0] zext_ln397_fu_383_p1;
wire   [7:0] add_ln397_fu_387_p2;
wire   [31:0] bitcast_ln399_fu_397_p1;
wire   [31:0] bitcast_ln399_1_fu_415_p1;
wire   [7:0] tmp_1_fu_401_p4;
wire   [22:0] trunc_ln399_fu_411_p1;
wire   [0:0] icmp_ln399_1_fu_439_p2;
wire   [0:0] icmp_ln399_fu_433_p2;
wire   [7:0] tmp_3_fu_419_p4;
wire   [22:0] trunc_ln399_1_fu_429_p1;
wire   [0:0] icmp_ln399_3_fu_457_p2;
wire   [0:0] icmp_ln399_2_fu_451_p2;
wire   [0:0] or_ln399_fu_445_p2;
wire   [0:0] or_ln399_1_fu_463_p2;
wire   [0:0] and_ln399_fu_469_p2;
wire   [0:0] grp_fu_256_p2;
wire   [0:0] and_ln399_1_fu_475_p2;
wire   [7:0] zext_ln408_fu_501_p1;
wire   [7:0] add_ln408_fu_505_p2;
wire   [7:0] zext_ln419_1_fu_527_p1;
wire   [7:0] add_ln419_fu_531_p2;
reg   [1:0] grp_fu_245_opcode;

// power-on initialization
initial begin
#0 ap_CS_fsm = 64'd1;
#0 grp_pow_generic_float_s_fu_223_ap_start_reg = 1'b0;
end

pow_generic_float_s grp_pow_generic_float_s_fu_223(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_float_s_fu_223_ap_start),
    .ap_done(grp_pow_generic_float_s_fu_223_ap_done),
    .ap_idle(grp_pow_generic_float_s_fu_223_ap_idle),
    .ap_ready(grp_pow_generic_float_s_fu_223_ap_ready),
    .base_r(32'd1076754517),
    .exp(p_y_assign_reg_618),
    .ap_return(grp_pow_generic_float_s_fu_223_ap_return)
);

attention_faddfsuyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_faddfsuyd2_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_245_p0),
    .din1(grp_fu_245_p1),
    .opcode(grp_fu_245_opcode),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

attention_fdiv_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fdiv_32rcU_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_262),
    .din1(v246_0_reg_189),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

attention_fcmp_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
attention_fcmp_32tde_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v226_0_q0),
    .din1(v236_0_reg_177),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_256_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_float_s_fu_223_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state16) & (1'b1 == ap_CS_fsm_state15))) begin
            grp_pow_generic_float_s_fu_223_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_float_s_fu_223_ap_ready == 1'b1)) begin
            grp_pow_generic_float_s_fu_223_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln386_fu_307_p2 == 1'd1))) begin
        i7_0_reg_133 <= i7_reg_544;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i7_0_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln384_fu_269_p2 == 1'd1))) begin
        i8_0_reg_155 <= 5'd0;
    end else if (((icmp_ln418_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        i8_0_reg_155 <= i8_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k4_0_0_reg_144 <= add_ln386_reg_557;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln384_fu_269_p2 == 1'd0))) begin
        k4_0_0_reg_144 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k5_0_0_reg_166 <= add_ln396_reg_590;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln392_fu_333_p2 == 1'd0))) begin
        k5_0_0_reg_166 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln396_fu_371_p2 == 1'd1))) begin
        k6_0_0_reg_201 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        k6_0_0_reg_201 <= add_ln407_reg_608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln407_fu_489_p2 == 1'd1))) begin
        k7_0_0_reg_212 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        k7_0_0_reg_212 <= add_ln418_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v236_0_reg_177 <= select_ln400_fu_481_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln392_fu_333_p2 == 1'd0))) begin
        v236_0_reg_177 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln396_fu_371_p2 == 1'd1))) begin
        v246_0_reg_189 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        v246_0_reg_189 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln386_reg_557 <= add_ln386_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln396_reg_590 <= add_ln396_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln407_reg_608 <= add_ln407_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln418_reg_636 <= add_ln418_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i7_reg_544 <= i7_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i8_reg_575 <= i8_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_y_assign_reg_618 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_262 <= v226_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln386_fu_307_p2 == 1'd0))) begin
        sext_ln387_reg_562 <= sext_ln387_fu_328_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln384_fu_269_p2 == 1'd0))) begin
        sub_ln387_reg_549[7 : 1] <= sub_ln387_fu_301_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln392_fu_333_p2 == 1'd0))) begin
        sub_ln419_reg_580[7 : 1] <= sub_ln419_fu_365_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_i_i_reg_623 <= grp_pow_generic_float_s_fu_223_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln407_fu_489_p2 == 1'd0))) begin
        v226_0_addr_2_reg_613 <= sext_ln408_fu_510_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln418_fu_515_p2 == 1'd0))) begin
        v226_0_addr_3_reg_641 <= sext_ln419_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        v3_reg_646 <= grp_fu_251_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln392_fu_333_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln392_fu_333_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_245_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_245_opcode = 2'd0;
    end else begin
        grp_fu_245_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_245_p0 = v246_0_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_245_p0 = reg_262;
    end else begin
        grp_fu_245_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_245_p1 = tmp_i_i_reg_623;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_245_p1 = v236_0_reg_177;
    end else begin
        grp_fu_245_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v225_0_ce0 = 1'b1;
    end else begin
        v225_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        v226_0_address0 = v226_0_addr_3_reg_641;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        v226_0_address0 = sext_ln419_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        v226_0_address0 = v226_0_addr_2_reg_613;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        v226_0_address0 = sext_ln408_fu_510_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v226_0_address0 = sext_ln397_fu_392_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v226_0_address0 = sext_ln387_reg_562;
    end else begin
        v226_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        v226_0_ce0 = 1'b1;
    end else begin
        v226_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        v226_0_d0 = v3_reg_646;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        v226_0_d0 = grp_pow_generic_float_s_fu_223_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v226_0_d0 = v225_0_q0;
    end else begin
        v226_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state40))) begin
        v226_0_we0 = 1'b1;
    end else begin
        v226_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln384_fu_269_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln386_fu_307_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln392_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln396_fu_371_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln407_fu_489_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln418_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln386_fu_313_p2 = (k4_0_0_reg_144 + 3'd1);

assign add_ln387_fu_323_p2 = (sub_ln387_reg_549 + zext_ln387_1_fu_319_p1);

assign add_ln396_fu_377_p2 = (k5_0_0_reg_166 + 3'd1);

assign add_ln397_fu_387_p2 = (sub_ln419_reg_580 + zext_ln397_fu_383_p1);

assign add_ln407_fu_495_p2 = (k6_0_0_reg_201 + 3'd1);

assign add_ln408_fu_505_p2 = (sub_ln419_reg_580 + zext_ln408_fu_501_p1);

assign add_ln418_fu_521_p2 = (k7_0_0_reg_212 + 3'd1);

assign add_ln419_fu_531_p2 = (sub_ln419_reg_580 + zext_ln419_1_fu_527_p1);

assign and_ln399_1_fu_475_p2 = (grp_fu_256_p2 & and_ln399_fu_469_p2);

assign and_ln399_fu_469_p2 = (or_ln399_fu_445_p2 & or_ln399_1_fu_463_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state16 = ap_NS_fsm[32'd15];

assign bitcast_ln399_1_fu_415_p1 = v236_0_reg_177;

assign bitcast_ln399_fu_397_p1 = reg_262;

assign grp_pow_generic_float_s_fu_223_ap_start = grp_pow_generic_float_s_fu_223_ap_start_reg;

assign i7_fu_275_p2 = (i7_0_reg_133 + 5'd1);

assign i8_fu_339_p2 = (i8_0_reg_155 + 5'd1);

assign icmp_ln384_fu_269_p2 = ((i7_0_reg_133 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln386_fu_307_p2 = ((k4_0_0_reg_144 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln392_fu_333_p2 = ((i8_0_reg_155 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln396_fu_371_p2 = ((k5_0_0_reg_166 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln399_1_fu_439_p2 = ((trunc_ln399_fu_411_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln399_2_fu_451_p2 = ((tmp_3_fu_419_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln399_3_fu_457_p2 = ((trunc_ln399_1_fu_429_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln399_fu_433_p2 = ((tmp_1_fu_401_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln407_fu_489_p2 = ((k6_0_0_reg_201 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln418_fu_515_p2 = ((k7_0_0_reg_212 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln399_1_fu_463_p2 = (icmp_ln399_3_fu_457_p2 | icmp_ln399_2_fu_451_p2);

assign or_ln399_fu_445_p2 = (icmp_ln399_fu_433_p2 | icmp_ln399_1_fu_439_p2);

assign select_ln400_fu_481_p3 = ((and_ln399_1_fu_475_p2[0:0] === 1'b1) ? reg_262 : v236_0_reg_177);

assign sext_ln387_fu_328_p1 = $signed(add_ln387_fu_323_p2);

assign sext_ln397_fu_392_p1 = $signed(add_ln397_fu_387_p2);

assign sext_ln408_fu_510_p1 = $signed(add_ln408_fu_505_p2);

assign sext_ln419_fu_536_p1 = $signed(add_ln419_fu_531_p2);

assign sub_ln387_fu_301_p2 = (tmp_s_fu_281_p3 - zext_ln387_fu_297_p1);

assign sub_ln419_fu_365_p2 = (tmp_6_fu_345_p3 - zext_ln419_fu_361_p1);

assign tmp_1_fu_401_p4 = {{bitcast_ln399_fu_397_p1[30:23]}};

assign tmp_3_fu_419_p4 = {{bitcast_ln399_1_fu_415_p1[30:23]}};

assign tmp_5_fu_289_p3 = {{i7_0_reg_133}, {1'd0}};

assign tmp_6_fu_345_p3 = {{i8_0_reg_155}, {3'd0}};

assign tmp_7_fu_353_p3 = {{i8_0_reg_155}, {1'd0}};

assign tmp_s_fu_281_p3 = {{i7_0_reg_133}, {3'd0}};

assign trunc_ln399_1_fu_429_p1 = bitcast_ln399_1_fu_415_p1[22:0];

assign trunc_ln399_fu_411_p1 = bitcast_ln399_fu_397_p1[22:0];

assign v225_0_address0 = sext_ln387_fu_328_p1;

assign zext_ln387_1_fu_319_p1 = k4_0_0_reg_144;

assign zext_ln387_fu_297_p1 = tmp_5_fu_289_p3;

assign zext_ln397_fu_383_p1 = k5_0_0_reg_166;

assign zext_ln408_fu_501_p1 = k6_0_0_reg_201;

assign zext_ln419_1_fu_527_p1 = k7_0_0_reg_212;

assign zext_ln419_fu_361_p1 = tmp_7_fu_353_p3;

always @ (posedge ap_clk) begin
    sub_ln387_reg_549[0] <= 1'b0;
    sub_ln419_reg_580[0] <= 1'b0;
end

endmodule //softmax
