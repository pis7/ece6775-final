// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantize_activation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v22_0_address0,
        v22_0_ce0,
        v22_0_q0,
        v24_0_address0,
        v24_0_ce0,
        v24_0_we0,
        v24_0_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v22_0_address0;
output   v22_0_ce0;
input  [31:0] v22_0_q0;
output  [10:0] v24_0_address0;
output   v24_0_ce0;
output   v24_0_we0;
output  [7:0] v24_0_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] v22_0_address0;
reg v22_0_ce0;
reg v24_0_ce0;
reg v24_0_we0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_248;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state29;
wire   [10:0] add_ln70_fu_260_p2;
reg   [10:0] add_ln70_reg_1047;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln70_fu_254_p2;
wire   [31:0] select_ln74_fu_323_p3;
reg   [31:0] select_ln74_reg_1057;
wire    ap_CS_fsm_state4;
wire   [31:0] select_ln80_fu_414_p3;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln215_fu_439_p2;
reg   [0:0] icmp_ln215_reg_1069;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln215_1_fu_445_p2;
reg   [0:0] icmp_ln215_1_reg_1074;
wire   [0:0] grp_fu_239_p2;
reg   [0:0] tmp_8_reg_1079;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] v_reg_1089;
wire    ap_CS_fsm_state23;
wire   [53:0] select_ln570_fu_521_p3;
reg   [53:0] select_ln570_reg_1096;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln571_fu_529_p2;
reg   [0:0] icmp_ln571_reg_1101;
wire   [0:0] icmp_ln581_fu_541_p2;
reg   [0:0] icmp_ln581_reg_1107;
wire  signed [11:0] select_ln581_fu_559_p3;
reg  signed [11:0] select_ln581_reg_1113;
wire   [0:0] icmp_ln582_fu_567_p2;
reg   [0:0] icmp_ln582_reg_1119;
wire   [31:0] trunc_ln583_fu_573_p1;
reg   [31:0] trunc_ln583_reg_1125;
reg   [6:0] tmp_12_reg_1131;
wire   [31:0] select_ln603_3_fu_738_p3;
reg   [31:0] select_ln603_3_reg_1136;
wire    ap_CS_fsm_state26;
wire   [8:0] add_ln98_fu_752_p2;
reg   [8:0] add_ln98_reg_1143;
wire    ap_CS_fsm_state27;
wire   [10:0] shl_ln_fu_758_p3;
reg   [10:0] shl_ln_reg_1148;
wire   [0:0] icmp_ln98_fu_746_p2;
wire   [11:0] zext_ln99_1_fu_766_p1;
reg   [11:0] zext_ln99_1_reg_1153;
wire   [2:0] add_ln99_fu_780_p2;
reg   [2:0] add_ln99_reg_1161;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln99_fu_774_p2;
wire   [11:0] add_ln121_fu_800_p2;
reg   [11:0] add_ln121_reg_1171;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] v1_reg_1176;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln103_fu_822_p2;
reg   [0:0] icmp_ln103_reg_1183;
wire    ap_CS_fsm_state35;
wire   [0:0] icmp_ln103_1_fu_828_p2;
reg   [0:0] icmp_ln103_1_reg_1188;
reg   [0:0] tmp_10_reg_1193;
wire    ap_CS_fsm_state36;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] x_assign_reg_1203;
wire    ap_CS_fsm_state40;
reg   [0:0] p_Result_6_reg_1208;
wire    ap_CS_fsm_state41;
wire   [31:0] p_Val2_5_fu_973_p3;
reg   [31:0] p_Val2_5_reg_1213;
wire   [7:0] select_ln117_1_fu_1032_p3;
reg   [7:0] select_ln117_1_reg_1219;
wire    ap_CS_fsm_state42;
reg   [10:0] j_0_0_reg_178;
wire   [31:0] ap_phi_mux_v45_0_phi_fu_193_p4;
reg   [31:0] v45_0_reg_189;
reg   [8:0] j1_0_0_reg_201;
reg   [2:0] l_0_0_reg_212;
wire    ap_CS_fsm_state43;
wire   [63:0] zext_ln71_fu_266_p1;
wire   [63:0] zext_ln100_fu_791_p1;
wire   [63:0] zext_ln121_1_fu_1040_p1;
wire   [31:0] grp_fu_223_p1;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_231_p1;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_239_p0;
reg   [31:0] grp_fu_239_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state34;
wire   [31:0] bitcast_ln72_fu_271_p1;
wire   [7:0] tmp_9_fu_275_p4;
wire   [22:0] trunc_ln72_fu_285_p1;
wire   [0:0] icmp_ln72_1_fu_295_p2;
wire   [0:0] icmp_ln72_fu_289_p2;
wire   [0:0] or_ln72_fu_301_p2;
wire   [31:0] xor_ln73_fu_313_p2;
wire   [0:0] and_ln72_fu_307_p2;
wire   [31:0] bitcast_ln73_fu_319_p1;
wire   [31:0] bitcast_ln79_fu_331_p1;
wire   [31:0] bitcast_ln79_1_fu_349_p1;
wire   [7:0] tmp_1_fu_335_p4;
wire   [22:0] trunc_ln79_fu_345_p1;
wire   [0:0] icmp_ln79_1_fu_372_p2;
wire   [0:0] icmp_ln79_fu_366_p2;
wire   [7:0] tmp_2_fu_352_p4;
wire   [22:0] trunc_ln79_1_fu_362_p1;
wire   [0:0] icmp_ln79_3_fu_390_p2;
wire   [0:0] icmp_ln79_2_fu_384_p2;
wire   [0:0] or_ln79_fu_378_p2;
wire   [0:0] or_ln79_1_fu_396_p2;
wire   [0:0] and_ln79_fu_402_p2;
wire   [0:0] and_ln79_1_fu_408_p2;
wire   [31:0] bitcast_ln215_fu_421_p1;
wire   [7:0] tmp_7_fu_425_p4;
wire   [22:0] trunc_ln215_fu_435_p1;
wire   [0:0] or_ln215_fu_451_p2;
wire   [0:0] and_ln215_fu_455_p2;
wire   [63:0] grp_fu_236_p1;
wire   [63:0] bitcast_ln696_fu_469_p1;
wire   [10:0] p_Result_s_fu_485_p4;
wire   [51:0] trunc_ln565_fu_499_p1;
wire   [52:0] tmp_5_fu_503_p3;
wire   [53:0] zext_ln569_fu_511_p1;
wire   [0:0] tmp_11_fu_477_p3;
wire   [53:0] sub_ln461_fu_515_p2;
wire   [62:0] trunc_ln557_fu_473_p1;
wire   [11:0] zext_ln461_fu_495_p1;
wire   [11:0] sub_ln575_fu_535_p2;
wire   [11:0] add_ln581_fu_547_p2;
wire   [11:0] sub_ln581_fu_553_p2;
wire  signed [31:0] sext_ln581_fu_587_p1;
wire   [53:0] zext_ln586_fu_600_p1;
wire   [53:0] ashr_ln586_fu_604_p2;
wire   [31:0] bitcast_ln696_1_fu_613_p1;
wire   [0:0] tmp_13_fu_616_p3;
wire   [0:0] xor_ln571_fu_637_p2;
wire   [0:0] or_ln582_fu_647_p2;
wire   [0:0] xor_ln582_fu_651_p2;
wire   [0:0] icmp_ln585_fu_590_p2;
wire   [0:0] and_ln581_fu_657_p2;
wire   [0:0] xor_ln585_fu_662_p2;
wire   [0:0] or_ln581_fu_680_p2;
wire   [0:0] icmp_ln603_fu_595_p2;
wire   [0:0] xor_ln581_fu_685_p2;
wire   [0:0] and_ln603_fu_691_p2;
wire   [31:0] shl_ln604_fu_632_p2;
wire   [31:0] trunc_ln586_fu_609_p1;
wire   [0:0] and_ln585_1_fu_674_p2;
wire   [0:0] and_ln585_fu_668_p2;
wire   [31:0] select_ln588_fu_624_p3;
wire   [0:0] and_ln582_fu_642_p2;
wire   [0:0] or_ln603_fu_705_p2;
wire   [31:0] select_ln603_fu_697_p3;
wire   [31:0] select_ln603_1_fu_711_p3;
wire   [0:0] or_ln603_1_fu_718_p2;
wire   [0:0] or_ln603_2_fu_732_p2;
wire   [31:0] select_ln603_2_fu_724_p3;
wire   [10:0] zext_ln99_fu_770_p1;
wire   [10:0] add_ln100_fu_786_p2;
wire   [11:0] zext_ln121_fu_796_p1;
wire   [31:0] bitcast_ln103_fu_805_p1;
wire   [7:0] tmp_4_fu_808_p4;
wire   [22:0] trunc_ln103_fu_818_p1;
wire   [0:0] or_ln103_fu_834_p2;
wire   [0:0] and_ln103_fu_838_p2;
wire   [31:0] p_Val2_s_fu_852_p1;
wire   [22:0] tmp_V_1_fu_873_p1;
wire   [24:0] mantissa_V_fu_877_p4;
wire   [7:0] tmp_V_fu_863_p4;
wire   [8:0] zext_ln339_fu_891_p1;
wire   [8:0] add_ln339_fu_895_p2;
wire   [7:0] sub_ln1311_fu_909_p2;
wire   [0:0] isNeg_fu_901_p3;
wire  signed [8:0] sext_ln1311_fu_915_p1;
wire  signed [8:0] ush_fu_919_p3;
wire  signed [31:0] sext_ln1311_1_fu_927_p1;
wire  signed [24:0] sext_ln1311_2_fu_931_p1;
wire   [78:0] zext_ln682_fu_887_p1;
wire   [78:0] zext_ln1287_fu_935_p1;
wire   [24:0] r_V_fu_939_p2;
wire   [0:0] tmp_16_fu_951_p3;
wire   [78:0] r_V_1_fu_945_p2;
wire   [31:0] zext_ln662_fu_959_p1;
wire   [31:0] tmp_14_fu_963_p4;
wire   [31:0] result_V_1_fu_981_p2;
wire   [31:0] p_Val2_6_fu_986_p3;
wire   [24:0] tmp_17_fu_998_p4;
wire   [0:0] icmp_ln112_fu_992_p2;
wire   [0:0] icmp_ln114_fu_1008_p2;
wire   [0:0] or_ln117_fu_1026_p2;
wire   [7:0] select_ln117_fu_1018_p3;
wire   [7:0] trunc_ln117_fu_1014_p1;
reg   [4:0] grp_fu_239_opcode;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

attention_fadd_32pcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fadd_32pcA_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v1_reg_1176),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

attention_fmul_32qcK #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fmul_32qcK_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_248),
    .din1(v_reg_1089),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

attention_fdiv_32rcU #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
attention_fdiv_32rcU_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1123942400),
    .din1(grp_fu_231_p1),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

attention_fpext_3sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
attention_fpext_3sc4_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_reg_1089),
    .ce(1'b1),
    .dout(grp_fu_236_p1)
);

attention_fcmp_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
attention_fcmp_32tde_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_239_p0),
    .din1(grp_fu_239_p1),
    .ce(1'b1),
    .opcode(grp_fu_239_opcode),
    .dout(grp_fu_239_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln99_fu_774_p2 == 1'd1))) begin
        j1_0_0_reg_201 <= add_ln98_reg_1143;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        j1_0_0_reg_201 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_0_reg_178 <= add_ln70_reg_1047;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_0_reg_178 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        l_0_0_reg_212 <= add_ln99_reg_1161;
    end else if (((icmp_ln98_fu_746_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        l_0_0_reg_212 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v45_0_reg_189 <= select_ln80_fu_414_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v45_0_reg_189 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        add_ln121_reg_1171 <= add_ln121_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln70_reg_1047 <= add_ln70_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln98_reg_1143 <= add_ln98_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln99_reg_1161 <= add_ln99_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        icmp_ln103_1_reg_1188 <= icmp_ln103_1_fu_828_p2;
        icmp_ln103_reg_1183 <= icmp_ln103_fu_822_p2;
        tmp_10_reg_1193 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln215_1_reg_1074 <= icmp_ln215_1_fu_445_p2;
        icmp_ln215_reg_1069 <= icmp_ln215_fu_439_p2;
        tmp_8_reg_1079 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        icmp_ln571_reg_1101 <= icmp_ln571_fu_529_p2;
        icmp_ln581_reg_1107 <= icmp_ln581_fu_541_p2;
        icmp_ln582_reg_1119 <= icmp_ln582_fu_567_p2;
        select_ln570_reg_1096 <= select_ln570_fu_521_p3;
        select_ln581_reg_1113 <= select_ln581_fu_559_p3;
        tmp_12_reg_1131 <= {{select_ln581_fu_559_p3[11:5]}};
        trunc_ln583_reg_1125 <= trunc_ln583_fu_573_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        p_Result_6_reg_1208 <= p_Val2_s_fu_852_p1[32'd31];
        p_Val2_5_reg_1213 <= p_Val2_5_fu_973_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_248 <= v22_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        select_ln117_1_reg_1219 <= select_ln117_1_fu_1032_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        select_ln603_3_reg_1136 <= select_ln603_3_fu_738_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln74_reg_1057 <= select_ln74_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_746_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
        shl_ln_reg_1148[10 : 2] <= shl_ln_fu_758_p3[10 : 2];
        zext_ln99_1_reg_1153[10 : 2] <= zext_ln99_1_fu_766_p1[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        v1_reg_1176 <= grp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        v_reg_1089 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        x_assign_reg_1203 <= grp_fu_223_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state27) & (icmp_ln98_fu_746_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln98_fu_746_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_239_opcode = 5'd2;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln70_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_239_opcode = 5'd4;
    end else begin
        grp_fu_239_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_239_p0 = v1_reg_1176;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_239_p0 = v45_0_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_239_p0 = v22_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_239_p0 = ap_phi_mux_v45_0_phi_fu_193_p4;
    end else begin
        grp_fu_239_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_239_p1 = select_ln74_reg_1057;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state34))) begin
        grp_fu_239_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_239_p1 = 32'd925353388;
    end else begin
        grp_fu_239_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        v22_0_address0 = zext_ln100_fu_791_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v22_0_address0 = zext_ln71_fu_266_p1;
    end else begin
        v22_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state28))) begin
        v22_0_ce0 = 1'b1;
    end else begin
        v22_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        v24_0_ce0 = 1'b1;
    end else begin
        v24_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        v24_0_we0 = 1'b1;
    end else begin
        v24_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln70_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln98_fu_746_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln99_fu_774_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_786_p2 = (zext_ln99_fu_770_p1 + shl_ln_reg_1148);

assign add_ln121_fu_800_p2 = (zext_ln99_1_reg_1153 + zext_ln121_fu_796_p1);

assign add_ln339_fu_895_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_891_p1));

assign add_ln581_fu_547_p2 = ($signed(12'd4076) + $signed(sub_ln575_fu_535_p2));

assign add_ln70_fu_260_p2 = (j_0_0_reg_178 + 11'd1);

assign add_ln98_fu_752_p2 = (j1_0_0_reg_201 + 9'd1);

assign add_ln99_fu_780_p2 = (l_0_0_reg_212 + 3'd1);

assign and_ln103_fu_838_p2 = (tmp_10_reg_1193 & or_ln103_fu_834_p2);

assign and_ln215_fu_455_p2 = (tmp_8_reg_1079 & or_ln215_fu_451_p2);

assign and_ln581_fu_657_p2 = (xor_ln582_fu_651_p2 & icmp_ln581_reg_1107);

assign and_ln582_fu_642_p2 = (xor_ln571_fu_637_p2 & icmp_ln582_reg_1119);

assign and_ln585_1_fu_674_p2 = (icmp_ln585_fu_590_p2 & and_ln581_fu_657_p2);

assign and_ln585_fu_668_p2 = (xor_ln585_fu_662_p2 & and_ln581_fu_657_p2);

assign and_ln603_fu_691_p2 = (xor_ln581_fu_685_p2 & icmp_ln603_fu_595_p2);

assign and_ln72_fu_307_p2 = (or_ln72_fu_301_p2 & grp_fu_239_p2);

assign and_ln79_1_fu_408_p2 = (grp_fu_239_p2 & and_ln79_fu_402_p2);

assign and_ln79_fu_402_p2 = (or_ln79_fu_378_p2 & or_ln79_1_fu_396_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_v45_0_phi_fu_193_p4 = v45_0_reg_189;

assign ap_return = select_ln603_3_reg_1136;

assign ashr_ln586_fu_604_p2 = $signed(select_ln570_reg_1096) >>> zext_ln586_fu_600_p1;

assign bitcast_ln103_fu_805_p1 = v1_reg_1176;

assign bitcast_ln215_fu_421_p1 = v45_0_reg_189;

assign bitcast_ln696_1_fu_613_p1 = v_reg_1089;

assign bitcast_ln696_fu_469_p1 = grp_fu_236_p1;

assign bitcast_ln72_fu_271_p1 = reg_248;

assign bitcast_ln73_fu_319_p1 = xor_ln73_fu_313_p2;

assign bitcast_ln79_1_fu_349_p1 = select_ln74_reg_1057;

assign bitcast_ln79_fu_331_p1 = v45_0_reg_189;

assign grp_fu_223_p1 = ((and_ln103_fu_838_p2[0:0] === 1'b1) ? 32'd1056964608 : 32'd3204448256);

assign grp_fu_231_p1 = ((and_ln215_fu_455_p2[0:0] === 1'b1) ? 32'd925353388 : v45_0_reg_189);

assign icmp_ln103_1_fu_828_p2 = ((trunc_ln103_fu_818_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_822_p2 = ((tmp_4_fu_808_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_992_p2 = (($signed(p_Val2_6_fu_986_p3) < $signed(32'd4294967168)) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_1008_p2 = (($signed(tmp_17_fu_998_p4) > $signed(25'd0)) ? 1'b1 : 1'b0);

assign icmp_ln215_1_fu_445_p2 = ((trunc_ln215_fu_435_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln215_fu_439_p2 = ((tmp_7_fu_425_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_529_p2 = ((trunc_ln557_fu_473_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_541_p2 = (($signed(sub_ln575_fu_535_p2) > $signed(12'd20)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_567_p2 = ((sub_ln575_fu_535_p2 == 12'd20) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_590_p2 = ((select_ln581_reg_1113 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_595_p2 = ((tmp_12_reg_1131 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_254_p2 = ((j_0_0_reg_178 == 11'd1536) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_295_p2 = ((trunc_ln72_fu_285_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_289_p2 = ((tmp_9_fu_275_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_372_p2 = ((trunc_ln79_fu_345_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_2_fu_384_p2 = ((tmp_2_fu_352_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_3_fu_390_p2 = ((trunc_ln79_1_fu_362_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_366_p2 = ((tmp_1_fu_335_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_746_p2 = ((j1_0_0_reg_201 == 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_774_p2 = ((l_0_0_reg_212 == 3'd4) ? 1'b1 : 1'b0);

assign isNeg_fu_901_p3 = add_ln339_fu_895_p2[32'd8];

assign mantissa_V_fu_877_p4 = {{{{1'd1}, {tmp_V_1_fu_873_p1}}}, {1'd0}};

assign or_ln103_fu_834_p2 = (icmp_ln103_reg_1183 | icmp_ln103_1_reg_1188);

assign or_ln117_fu_1026_p2 = (icmp_ln114_fu_1008_p2 | icmp_ln112_fu_992_p2);

assign or_ln215_fu_451_p2 = (icmp_ln215_reg_1069 | icmp_ln215_1_reg_1074);

assign or_ln581_fu_680_p2 = (or_ln582_fu_647_p2 | icmp_ln581_reg_1107);

assign or_ln582_fu_647_p2 = (icmp_ln582_reg_1119 | icmp_ln571_reg_1101);

assign or_ln603_1_fu_718_p2 = (and_ln585_fu_668_p2 | and_ln582_fu_642_p2);

assign or_ln603_2_fu_732_p2 = (or_ln603_fu_705_p2 | or_ln603_1_fu_718_p2);

assign or_ln603_fu_705_p2 = (and_ln603_fu_691_p2 | and_ln585_1_fu_674_p2);

assign or_ln72_fu_301_p2 = (icmp_ln72_fu_289_p2 | icmp_ln72_1_fu_295_p2);

assign or_ln79_1_fu_396_p2 = (icmp_ln79_3_fu_390_p2 | icmp_ln79_2_fu_384_p2);

assign or_ln79_fu_378_p2 = (icmp_ln79_fu_366_p2 | icmp_ln79_1_fu_372_p2);

assign p_Result_s_fu_485_p4 = {{bitcast_ln696_fu_469_p1[62:52]}};

assign p_Val2_5_fu_973_p3 = ((isNeg_fu_901_p3[0:0] === 1'b1) ? zext_ln662_fu_959_p1 : tmp_14_fu_963_p4);

assign p_Val2_6_fu_986_p3 = ((p_Result_6_reg_1208[0:0] === 1'b1) ? result_V_1_fu_981_p2 : p_Val2_5_reg_1213);

assign p_Val2_s_fu_852_p1 = x_assign_reg_1203;

assign r_V_1_fu_945_p2 = zext_ln682_fu_887_p1 << zext_ln1287_fu_935_p1;

assign r_V_fu_939_p2 = mantissa_V_fu_877_p4 >> sext_ln1311_2_fu_931_p1;

assign result_V_1_fu_981_p2 = (32'd0 - p_Val2_5_reg_1213);

assign select_ln117_1_fu_1032_p3 = ((or_ln117_fu_1026_p2[0:0] === 1'b1) ? select_ln117_fu_1018_p3 : trunc_ln117_fu_1014_p1);

assign select_ln117_fu_1018_p3 = ((icmp_ln112_fu_992_p2[0:0] === 1'b1) ? 8'd128 : 8'd127);

assign select_ln570_fu_521_p3 = ((tmp_11_fu_477_p3[0:0] === 1'b1) ? sub_ln461_fu_515_p2 : zext_ln569_fu_511_p1);

assign select_ln581_fu_559_p3 = ((icmp_ln581_fu_541_p2[0:0] === 1'b1) ? add_ln581_fu_547_p2 : sub_ln581_fu_553_p2);

assign select_ln588_fu_624_p3 = ((tmp_13_fu_616_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln603_1_fu_711_p3 = ((and_ln585_fu_668_p2[0:0] === 1'b1) ? select_ln588_fu_624_p3 : trunc_ln583_reg_1125);

assign select_ln603_2_fu_724_p3 = ((or_ln603_fu_705_p2[0:0] === 1'b1) ? select_ln603_fu_697_p3 : select_ln603_1_fu_711_p3);

assign select_ln603_3_fu_738_p3 = ((or_ln603_2_fu_732_p2[0:0] === 1'b1) ? select_ln603_2_fu_724_p3 : 32'd0);

assign select_ln603_fu_697_p3 = ((and_ln603_fu_691_p2[0:0] === 1'b1) ? shl_ln604_fu_632_p2 : trunc_ln586_fu_609_p1);

assign select_ln74_fu_323_p3 = ((and_ln72_fu_307_p2[0:0] === 1'b1) ? reg_248 : bitcast_ln73_fu_319_p1);

assign select_ln80_fu_414_p3 = ((and_ln79_1_fu_408_p2[0:0] === 1'b1) ? select_ln74_reg_1057 : v45_0_reg_189);

assign sext_ln1311_1_fu_927_p1 = ush_fu_919_p3;

assign sext_ln1311_2_fu_931_p1 = ush_fu_919_p3;

assign sext_ln1311_fu_915_p1 = $signed(sub_ln1311_fu_909_p2);

assign sext_ln581_fu_587_p1 = select_ln581_reg_1113;

assign shl_ln604_fu_632_p2 = trunc_ln583_reg_1125 << sext_ln581_fu_587_p1;

assign shl_ln_fu_758_p3 = {{j1_0_0_reg_201}, {2'd0}};

assign sub_ln1311_fu_909_p2 = (8'd127 - tmp_V_fu_863_p4);

assign sub_ln461_fu_515_p2 = (54'd0 - zext_ln569_fu_511_p1);

assign sub_ln575_fu_535_p2 = (12'd1075 - zext_ln461_fu_495_p1);

assign sub_ln581_fu_553_p2 = (12'd20 - sub_ln575_fu_535_p2);

assign tmp_11_fu_477_p3 = bitcast_ln696_fu_469_p1[32'd63];

assign tmp_13_fu_616_p3 = bitcast_ln696_1_fu_613_p1[32'd31];

assign tmp_14_fu_963_p4 = {{r_V_1_fu_945_p2[55:24]}};

assign tmp_16_fu_951_p3 = r_V_fu_939_p2[32'd24];

assign tmp_17_fu_998_p4 = {{p_Val2_6_fu_986_p3[31:7]}};

assign tmp_1_fu_335_p4 = {{bitcast_ln79_fu_331_p1[30:23]}};

assign tmp_2_fu_352_p4 = {{bitcast_ln79_1_fu_349_p1[30:23]}};

assign tmp_4_fu_808_p4 = {{bitcast_ln103_fu_805_p1[30:23]}};

assign tmp_5_fu_503_p3 = {{1'd1}, {trunc_ln565_fu_499_p1}};

assign tmp_7_fu_425_p4 = {{bitcast_ln215_fu_421_p1[30:23]}};

assign tmp_9_fu_275_p4 = {{bitcast_ln72_fu_271_p1[30:23]}};

assign tmp_V_1_fu_873_p1 = p_Val2_s_fu_852_p1[22:0];

assign tmp_V_fu_863_p4 = {{p_Val2_s_fu_852_p1[30:23]}};

assign trunc_ln103_fu_818_p1 = bitcast_ln103_fu_805_p1[22:0];

assign trunc_ln117_fu_1014_p1 = p_Val2_6_fu_986_p3[7:0];

assign trunc_ln215_fu_435_p1 = bitcast_ln215_fu_421_p1[22:0];

assign trunc_ln557_fu_473_p1 = bitcast_ln696_fu_469_p1[62:0];

assign trunc_ln565_fu_499_p1 = bitcast_ln696_fu_469_p1[51:0];

assign trunc_ln583_fu_573_p1 = select_ln570_fu_521_p3[31:0];

assign trunc_ln586_fu_609_p1 = ashr_ln586_fu_604_p2[31:0];

assign trunc_ln72_fu_285_p1 = bitcast_ln72_fu_271_p1[22:0];

assign trunc_ln79_1_fu_362_p1 = bitcast_ln79_1_fu_349_p1[22:0];

assign trunc_ln79_fu_345_p1 = bitcast_ln79_fu_331_p1[22:0];

assign ush_fu_919_p3 = ((isNeg_fu_901_p3[0:0] === 1'b1) ? sext_ln1311_fu_915_p1 : add_ln339_fu_895_p2);

assign v24_0_address0 = zext_ln121_1_fu_1040_p1;

assign v24_0_d0 = select_ln117_1_reg_1219;

assign xor_ln571_fu_637_p2 = (icmp_ln571_reg_1101 ^ 1'd1);

assign xor_ln581_fu_685_p2 = (or_ln581_fu_680_p2 ^ 1'd1);

assign xor_ln582_fu_651_p2 = (or_ln582_fu_647_p2 ^ 1'd1);

assign xor_ln585_fu_662_p2 = (icmp_ln585_fu_590_p2 ^ 1'd1);

assign xor_ln73_fu_313_p2 = (bitcast_ln72_fu_271_p1 ^ 32'd2147483648);

assign zext_ln100_fu_791_p1 = add_ln100_fu_786_p2;

assign zext_ln121_1_fu_1040_p1 = add_ln121_reg_1171;

assign zext_ln121_fu_796_p1 = l_0_0_reg_212;

assign zext_ln1287_fu_935_p1 = $unsigned(sext_ln1311_1_fu_927_p1);

assign zext_ln339_fu_891_p1 = tmp_V_fu_863_p4;

assign zext_ln461_fu_495_p1 = p_Result_s_fu_485_p4;

assign zext_ln569_fu_511_p1 = tmp_5_fu_503_p3;

assign zext_ln586_fu_600_p1 = $unsigned(sext_ln581_fu_587_p1);

assign zext_ln662_fu_959_p1 = tmp_16_fu_951_p3;

assign zext_ln682_fu_887_p1 = mantissa_V_fu_877_p4;

assign zext_ln71_fu_266_p1 = j_0_0_reg_178;

assign zext_ln99_1_fu_766_p1 = shl_ln_fu_758_p3;

assign zext_ln99_fu_770_p1 = l_0_0_reg_212;

always @ (posedge ap_clk) begin
    shl_ln_reg_1148[1:0] <= 2'b00;
    zext_ln99_1_reg_1153[1:0] <= 2'b00;
    zext_ln99_1_reg_1153[11] <= 1'b0;
end

endmodule //quantize_activation
