-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantize_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v22_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v22_0_ce0 : OUT STD_LOGIC;
    v22_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v24_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v24_0_ce0 : OUT STD_LOGIC;
    v24_0_we0 : OUT STD_LOGIC;
    v24_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of quantize_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3727C5AC : STD_LOGIC_VECTOR (31 downto 0) := "00110111001001111100010110101100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_FEC : STD_LOGIC_VECTOR (11 downto 0) := "111111101100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_BF000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln70_fu_260_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_reg_1047 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln70_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln80_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln215_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln215_1_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_1_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal select_ln570_fu_521_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln570_reg_1096 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln571_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln581_fu_559_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln581_reg_1113 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1119 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln583_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1131 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln603_3_fu_738_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_3_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln98_fu_752_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln98_reg_1143 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal shl_ln_fu_758_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_reg_1148 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln98_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln99_1_fu_766_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln99_1_reg_1153 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln99_fu_780_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln99_reg_1161 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln99_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln121_fu_800_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln121_reg_1171 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln103_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln103_1_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal p_Result_6_reg_1208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal p_Val2_5_fu_973_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln117_1_fu_1032_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln117_1_reg_1219 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal j_0_0_reg_178 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_v45_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal v45_0_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_0_0_reg_201 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_0_0_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal zext_ln71_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_1_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal bitcast_ln72_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_fu_285_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln72_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln73_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_1_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_335_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_fu_345_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln79_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_352_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_1_fu_362_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln79_3_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_2_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_1_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln215_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_425_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln215_fu_435_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln215_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln696_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_485_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_499_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_503_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_511_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_11_fu_477_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln461_fu_515_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln557_fu_473_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_495_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln575_fu_535_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_553_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_600_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_604_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_1_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_616_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln585_1_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln603_1_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln603_1_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_724_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln99_fu_770_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln100_fu_786_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln121_fu_796_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln103_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_808_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln103_fu_818_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln103_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln103_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_873_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_877_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_863_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_891_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_895_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_901_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_915_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_919_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_931_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_887_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_935_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_939_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_16_fu_951_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_945_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_959_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_963_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_981_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_986_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_998_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln112_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln117_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_fu_1018_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln117_fu_1014_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_239_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component attention_fadd_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fmul_32qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fdiv_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fpext_3sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component attention_fcmp_32tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    attention_fadd_32pcA_U33 : component attention_fadd_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v1_reg_1176,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    attention_fmul_32qcK_U34 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_248,
        din1 => v_reg_1089,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    attention_fdiv_32rcU_U35 : component attention_fdiv_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => grp_fu_231_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    attention_fpext_3sc4_U36 : component attention_fpext_3sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_reg_1089,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p1);

    attention_fcmp_32tde_U37 : component attention_fcmp_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_239_p0,
        din1 => grp_fu_239_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_239_opcode,
        dout => grp_fu_239_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln99_fu_774_p2 = ap_const_lv1_1))) then 
                j1_0_0_reg_201 <= add_ln98_reg_1143;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j1_0_0_reg_201 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_0_reg_178 <= add_ln70_reg_1047;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_178 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    l_0_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                l_0_0_reg_212 <= add_ln99_reg_1161;
            elsif (((icmp_ln98_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                l_0_0_reg_212 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    v45_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v45_0_reg_189 <= select_ln80_fu_414_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v45_0_reg_189 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                add_ln121_reg_1171 <= add_ln121_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln70_reg_1047 <= add_ln70_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln98_reg_1143 <= add_ln98_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln99_reg_1161 <= add_ln99_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                icmp_ln103_1_reg_1188 <= icmp_ln103_1_fu_828_p2;
                icmp_ln103_reg_1183 <= icmp_ln103_fu_822_p2;
                tmp_10_reg_1193 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln215_1_reg_1074 <= icmp_ln215_1_fu_445_p2;
                icmp_ln215_reg_1069 <= icmp_ln215_fu_439_p2;
                tmp_8_reg_1079 <= grp_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                icmp_ln571_reg_1101 <= icmp_ln571_fu_529_p2;
                icmp_ln581_reg_1107 <= icmp_ln581_fu_541_p2;
                icmp_ln582_reg_1119 <= icmp_ln582_fu_567_p2;
                select_ln570_reg_1096 <= select_ln570_fu_521_p3;
                select_ln581_reg_1113 <= select_ln581_fu_559_p3;
                tmp_12_reg_1131 <= select_ln581_fu_559_p3(11 downto 5);
                trunc_ln583_reg_1125 <= trunc_ln583_fu_573_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                p_Result_6_reg_1208 <= p_Val2_s_fu_852_p1(31 downto 31);
                p_Val2_5_reg_1213 <= p_Val2_5_fu_973_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_248 <= v22_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                select_ln117_1_reg_1219 <= select_ln117_1_fu_1032_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                select_ln603_3_reg_1136 <= select_ln603_3_fu_738_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln74_reg_1057 <= select_ln74_fu_323_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    shl_ln_reg_1148(10 downto 2) <= shl_ln_fu_758_p3(10 downto 2);
                    zext_ln99_1_reg_1153(10 downto 2) <= zext_ln99_1_fu_766_p1(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                v1_reg_1176 <= grp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                v_reg_1089 <= grp_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                x_assign_reg_1203 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1148(1 downto 0) <= "00";
    zext_ln99_1_reg_1153(1 downto 0) <= "00";
    zext_ln99_1_reg_1153(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln70_fu_254_p2, ap_CS_fsm_state27, icmp_ln98_fu_746_p2, ap_CS_fsm_state28, icmp_ln99_fu_774_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln70_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln98_fu_746_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln99_fu_774_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_786_p2 <= std_logic_vector(unsigned(zext_ln99_fu_770_p1) + unsigned(shl_ln_reg_1148));
    add_ln121_fu_800_p2 <= std_logic_vector(unsigned(zext_ln99_1_reg_1153) + unsigned(zext_ln121_fu_796_p1));
    add_ln339_fu_895_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_891_p1));
    add_ln581_fu_547_p2 <= std_logic_vector(signed(ap_const_lv12_FEC) + signed(sub_ln575_fu_535_p2));
    add_ln70_fu_260_p2 <= std_logic_vector(unsigned(j_0_0_reg_178) + unsigned(ap_const_lv11_1));
    add_ln98_fu_752_p2 <= std_logic_vector(unsigned(j1_0_0_reg_201) + unsigned(ap_const_lv9_1));
    add_ln99_fu_780_p2 <= std_logic_vector(unsigned(l_0_0_reg_212) + unsigned(ap_const_lv3_1));
    and_ln103_fu_838_p2 <= (tmp_10_reg_1193 and or_ln103_fu_834_p2);
    and_ln215_fu_455_p2 <= (tmp_8_reg_1079 and or_ln215_fu_451_p2);
    and_ln581_fu_657_p2 <= (xor_ln582_fu_651_p2 and icmp_ln581_reg_1107);
    and_ln582_fu_642_p2 <= (xor_ln571_fu_637_p2 and icmp_ln582_reg_1119);
    and_ln585_1_fu_674_p2 <= (icmp_ln585_fu_590_p2 and and_ln581_fu_657_p2);
    and_ln585_fu_668_p2 <= (xor_ln585_fu_662_p2 and and_ln581_fu_657_p2);
    and_ln603_fu_691_p2 <= (xor_ln581_fu_685_p2 and icmp_ln603_fu_595_p2);
    and_ln72_fu_307_p2 <= (or_ln72_fu_301_p2 and grp_fu_239_p2);
    and_ln79_1_fu_408_p2 <= (grp_fu_239_p2 and and_ln79_fu_402_p2);
    and_ln79_fu_402_p2 <= (or_ln79_fu_378_p2 and or_ln79_1_fu_396_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state27, icmp_ln98_fu_746_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln98_fu_746_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_v45_0_phi_fu_193_p4 <= v45_0_reg_189;

    ap_ready_assign_proc : process(ap_CS_fsm_state27, icmp_ln98_fu_746_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln98_fu_746_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= select_ln603_3_reg_1136;
    ashr_ln586_fu_604_p2 <= std_logic_vector(shift_right(signed(select_ln570_reg_1096),to_integer(unsigned('0' & zext_ln586_fu_600_p1(31-1 downto 0)))));
    bitcast_ln103_fu_805_p1 <= v1_reg_1176;
    bitcast_ln215_fu_421_p1 <= v45_0_reg_189;
    bitcast_ln696_1_fu_613_p1 <= v_reg_1089;
    bitcast_ln696_fu_469_p1 <= grp_fu_236_p1;
    bitcast_ln72_fu_271_p1 <= reg_248;
    bitcast_ln73_fu_319_p1 <= xor_ln73_fu_313_p2;
    bitcast_ln79_1_fu_349_p1 <= select_ln74_reg_1057;
    bitcast_ln79_fu_331_p1 <= v45_0_reg_189;
    grp_fu_223_p1 <= 
        ap_const_lv32_3F000000 when (and_ln103_fu_838_p2(0) = '1') else 
        ap_const_lv32_BF000000;
    grp_fu_231_p1 <= 
        ap_const_lv32_3727C5AC when (and_ln215_fu_455_p2(0) = '1') else 
        v45_0_reg_189;

    grp_fu_239_opcode_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln70_fu_254_p2, ap_CS_fsm_state5, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_239_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln70_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_239_opcode <= ap_const_lv5_4;
        else 
            grp_fu_239_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_239_p0_assign_proc : process(v22_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state2, v1_reg_1176, ap_phi_mux_v45_0_phi_fu_193_p4, v45_0_reg_189, ap_CS_fsm_state5, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_239_p0 <= v1_reg_1176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_239_p0 <= v45_0_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_239_p0 <= v22_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_239_p0 <= ap_phi_mux_v45_0_phi_fu_193_p4;
        else 
            grp_fu_239_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_239_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, select_ln74_reg_1057, ap_CS_fsm_state5, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_239_p1 <= select_ln74_reg_1057;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_239_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_239_p1 <= ap_const_lv32_3727C5AC;
        else 
            grp_fu_239_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln103_1_fu_828_p2 <= "1" when (trunc_ln103_fu_818_p1 = ap_const_lv23_0) else "0";
    icmp_ln103_fu_822_p2 <= "0" when (tmp_4_fu_808_p4 = ap_const_lv8_FF) else "1";
    icmp_ln112_fu_992_p2 <= "1" when (signed(p_Val2_6_fu_986_p3) < signed(ap_const_lv32_FFFFFF80)) else "0";
    icmp_ln114_fu_1008_p2 <= "1" when (signed(tmp_17_fu_998_p4) > signed(ap_const_lv25_0)) else "0";
    icmp_ln215_1_fu_445_p2 <= "1" when (trunc_ln215_fu_435_p1 = ap_const_lv23_0) else "0";
    icmp_ln215_fu_439_p2 <= "0" when (tmp_7_fu_425_p4 = ap_const_lv8_FF) else "1";
    icmp_ln571_fu_529_p2 <= "1" when (trunc_ln557_fu_473_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_541_p2 <= "1" when (signed(sub_ln575_fu_535_p2) > signed(ap_const_lv12_14)) else "0";
    icmp_ln582_fu_567_p2 <= "1" when (sub_ln575_fu_535_p2 = ap_const_lv12_14) else "0";
    icmp_ln585_fu_590_p2 <= "1" when (unsigned(select_ln581_reg_1113) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_595_p2 <= "1" when (tmp_12_reg_1131 = ap_const_lv7_0) else "0";
    icmp_ln70_fu_254_p2 <= "1" when (j_0_0_reg_178 = ap_const_lv11_600) else "0";
    icmp_ln72_1_fu_295_p2 <= "1" when (trunc_ln72_fu_285_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_fu_289_p2 <= "0" when (tmp_9_fu_275_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_1_fu_372_p2 <= "1" when (trunc_ln79_fu_345_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_2_fu_384_p2 <= "0" when (tmp_2_fu_352_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_3_fu_390_p2 <= "1" when (trunc_ln79_1_fu_362_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_fu_366_p2 <= "0" when (tmp_1_fu_335_p4 = ap_const_lv8_FF) else "1";
    icmp_ln98_fu_746_p2 <= "1" when (j1_0_0_reg_201 = ap_const_lv9_180) else "0";
    icmp_ln99_fu_774_p2 <= "1" when (l_0_0_reg_212 = ap_const_lv3_4) else "0";
    isNeg_fu_901_p3 <= add_ln339_fu_895_p2(8 downto 8);
    mantissa_V_fu_877_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_873_p1) & ap_const_lv1_0);
    or_ln103_fu_834_p2 <= (icmp_ln103_reg_1183 or icmp_ln103_1_reg_1188);
    or_ln117_fu_1026_p2 <= (icmp_ln114_fu_1008_p2 or icmp_ln112_fu_992_p2);
    or_ln215_fu_451_p2 <= (icmp_ln215_reg_1069 or icmp_ln215_1_reg_1074);
    or_ln581_fu_680_p2 <= (or_ln582_fu_647_p2 or icmp_ln581_reg_1107);
    or_ln582_fu_647_p2 <= (icmp_ln582_reg_1119 or icmp_ln571_reg_1101);
    or_ln603_1_fu_718_p2 <= (and_ln585_fu_668_p2 or and_ln582_fu_642_p2);
    or_ln603_2_fu_732_p2 <= (or_ln603_fu_705_p2 or or_ln603_1_fu_718_p2);
    or_ln603_fu_705_p2 <= (and_ln603_fu_691_p2 or and_ln585_1_fu_674_p2);
    or_ln72_fu_301_p2 <= (icmp_ln72_fu_289_p2 or icmp_ln72_1_fu_295_p2);
    or_ln79_1_fu_396_p2 <= (icmp_ln79_3_fu_390_p2 or icmp_ln79_2_fu_384_p2);
    or_ln79_fu_378_p2 <= (icmp_ln79_fu_366_p2 or icmp_ln79_1_fu_372_p2);
    p_Result_s_fu_485_p4 <= bitcast_ln696_fu_469_p1(62 downto 52);
    p_Val2_5_fu_973_p3 <= 
        zext_ln662_fu_959_p1 when (isNeg_fu_901_p3(0) = '1') else 
        tmp_14_fu_963_p4;
    p_Val2_6_fu_986_p3 <= 
        result_V_1_fu_981_p2 when (p_Result_6_reg_1208(0) = '1') else 
        p_Val2_5_reg_1213;
    p_Val2_s_fu_852_p1 <= x_assign_reg_1203;
    r_V_1_fu_945_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_887_p1),to_integer(unsigned('0' & zext_ln1287_fu_935_p1(31-1 downto 0)))));
    r_V_fu_939_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_877_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_931_p1(25-1 downto 0)))));
    result_V_1_fu_981_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_1213));
    select_ln117_1_fu_1032_p3 <= 
        select_ln117_fu_1018_p3 when (or_ln117_fu_1026_p2(0) = '1') else 
        trunc_ln117_fu_1014_p1;
    select_ln117_fu_1018_p3 <= 
        ap_const_lv8_80 when (icmp_ln112_fu_992_p2(0) = '1') else 
        ap_const_lv8_7F;
    select_ln570_fu_521_p3 <= 
        sub_ln461_fu_515_p2 when (tmp_11_fu_477_p3(0) = '1') else 
        zext_ln569_fu_511_p1;
    select_ln581_fu_559_p3 <= 
        add_ln581_fu_547_p2 when (icmp_ln581_fu_541_p2(0) = '1') else 
        sub_ln581_fu_553_p2;
    select_ln588_fu_624_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_13_fu_616_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln603_1_fu_711_p3 <= 
        select_ln588_fu_624_p3 when (and_ln585_fu_668_p2(0) = '1') else 
        trunc_ln583_reg_1125;
    select_ln603_2_fu_724_p3 <= 
        select_ln603_fu_697_p3 when (or_ln603_fu_705_p2(0) = '1') else 
        select_ln603_1_fu_711_p3;
    select_ln603_3_fu_738_p3 <= 
        select_ln603_2_fu_724_p3 when (or_ln603_2_fu_732_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln603_fu_697_p3 <= 
        shl_ln604_fu_632_p2 when (and_ln603_fu_691_p2(0) = '1') else 
        trunc_ln586_fu_609_p1;
    select_ln74_fu_323_p3 <= 
        reg_248 when (and_ln72_fu_307_p2(0) = '1') else 
        bitcast_ln73_fu_319_p1;
    select_ln80_fu_414_p3 <= 
        select_ln74_reg_1057 when (and_ln79_1_fu_408_p2(0) = '1') else 
        v45_0_reg_189;
        sext_ln1311_1_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_919_p3),32));

        sext_ln1311_2_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_919_p3),25));

        sext_ln1311_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_909_p2),9));

        sext_ln581_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln581_reg_1113),32));

    shl_ln604_fu_632_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1125),to_integer(unsigned('0' & sext_ln581_fu_587_p1(31-1 downto 0)))));
    shl_ln_fu_758_p3 <= (j1_0_0_reg_201 & ap_const_lv2_0);
    sub_ln1311_fu_909_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_863_p4));
    sub_ln461_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_511_p1));
    sub_ln575_fu_535_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_495_p1));
    sub_ln581_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv12_14) - unsigned(sub_ln575_fu_535_p2));
    tmp_11_fu_477_p3 <= bitcast_ln696_fu_469_p1(63 downto 63);
    tmp_13_fu_616_p3 <= bitcast_ln696_1_fu_613_p1(31 downto 31);
    tmp_14_fu_963_p4 <= r_V_1_fu_945_p2(55 downto 24);
    tmp_16_fu_951_p3 <= r_V_fu_939_p2(24 downto 24);
    tmp_17_fu_998_p4 <= p_Val2_6_fu_986_p3(31 downto 7);
    tmp_1_fu_335_p4 <= bitcast_ln79_fu_331_p1(30 downto 23);
    tmp_2_fu_352_p4 <= bitcast_ln79_1_fu_349_p1(30 downto 23);
    tmp_4_fu_808_p4 <= bitcast_ln103_fu_805_p1(30 downto 23);
    tmp_5_fu_503_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_499_p1);
    tmp_7_fu_425_p4 <= bitcast_ln215_fu_421_p1(30 downto 23);
    tmp_9_fu_275_p4 <= bitcast_ln72_fu_271_p1(30 downto 23);
    tmp_V_1_fu_873_p1 <= p_Val2_s_fu_852_p1(23 - 1 downto 0);
    tmp_V_fu_863_p4 <= p_Val2_s_fu_852_p1(30 downto 23);
    trunc_ln103_fu_818_p1 <= bitcast_ln103_fu_805_p1(23 - 1 downto 0);
    trunc_ln117_fu_1014_p1 <= p_Val2_6_fu_986_p3(8 - 1 downto 0);
    trunc_ln215_fu_435_p1 <= bitcast_ln215_fu_421_p1(23 - 1 downto 0);
    trunc_ln557_fu_473_p1 <= bitcast_ln696_fu_469_p1(63 - 1 downto 0);
    trunc_ln565_fu_499_p1 <= bitcast_ln696_fu_469_p1(52 - 1 downto 0);
    trunc_ln583_fu_573_p1 <= select_ln570_fu_521_p3(32 - 1 downto 0);
    trunc_ln586_fu_609_p1 <= ashr_ln586_fu_604_p2(32 - 1 downto 0);
    trunc_ln72_fu_285_p1 <= bitcast_ln72_fu_271_p1(23 - 1 downto 0);
    trunc_ln79_1_fu_362_p1 <= bitcast_ln79_1_fu_349_p1(23 - 1 downto 0);
    trunc_ln79_fu_345_p1 <= bitcast_ln79_fu_331_p1(23 - 1 downto 0);
    ush_fu_919_p3 <= 
        sext_ln1311_fu_915_p1 when (isNeg_fu_901_p3(0) = '1') else 
        add_ln339_fu_895_p2;

    v22_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state28, zext_ln71_fu_266_p1, zext_ln100_fu_791_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            v22_0_address0 <= zext_ln100_fu_791_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v22_0_address0 <= zext_ln71_fu_266_p1(11 - 1 downto 0);
        else 
            v22_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    v22_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            v22_0_ce0 <= ap_const_logic_1;
        else 
            v22_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_address0 <= zext_ln121_1_fu_1040_p1(11 - 1 downto 0);

    v24_0_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            v24_0_ce0 <= ap_const_logic_1;
        else 
            v24_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_d0 <= select_ln117_1_reg_1219;

    v24_0_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            v24_0_we0 <= ap_const_logic_1;
        else 
            v24_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_637_p2 <= (icmp_ln571_reg_1101 xor ap_const_lv1_1);
    xor_ln581_fu_685_p2 <= (or_ln581_fu_680_p2 xor ap_const_lv1_1);
    xor_ln582_fu_651_p2 <= (or_ln582_fu_647_p2 xor ap_const_lv1_1);
    xor_ln585_fu_662_p2 <= (icmp_ln585_fu_590_p2 xor ap_const_lv1_1);
    xor_ln73_fu_313_p2 <= (bitcast_ln72_fu_271_p1 xor ap_const_lv32_80000000);
    zext_ln100_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_fu_786_p2),64));
    zext_ln121_1_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln121_reg_1171),64));
    zext_ln121_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_0_reg_212),12));
    zext_ln1287_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_927_p1),79));
    zext_ln339_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_863_p4),9));
    zext_ln461_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_485_p4),12));
    zext_ln569_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_503_p3),54));
    zext_ln586_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_587_p1),54));
    zext_ln662_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_951_p3),32));
    zext_ln682_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_877_p4),79));
    zext_ln71_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_178),64));
    zext_ln99_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_758_p3),12));
    zext_ln99_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_0_reg_212),11));
end behav;
