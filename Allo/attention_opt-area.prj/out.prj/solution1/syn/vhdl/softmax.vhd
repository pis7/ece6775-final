-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v225_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v225_0_ce0 : OUT STD_LOGIC;
    v225_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v226_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v226_0_ce0 : OUT STD_LOGIC;
    v226_0_we0 : OUT STD_LOGIC;
    v226_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v226_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (63 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (63 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (63 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (63 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (63 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (63 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (63 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_402DF855 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001011011111100001010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal i7_fu_275_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i7_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln387_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln387_reg_549 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln384_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln386_fu_313_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln386_reg_557 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln387_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln387_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln386_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i8_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i8_reg_575 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln419_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln419_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln392_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln396_fu_377_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln396_reg_590 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln396_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln400_fu_481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln407_fu_495_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln407_reg_608 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal v226_0_addr_2_reg_613 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln407_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_assign_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_pow_generic_float_s_fu_223_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal add_ln418_fu_521_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln418_reg_636 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal v226_0_addr_3_reg_641 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln418_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v3_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_pow_generic_float_s_fu_223_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_223_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_223_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_223_ap_ready : STD_LOGIC;
    signal i7_0_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_0_0_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i8_0_reg_155 : STD_LOGIC_VECTOR (4 downto 0);
    signal k5_0_0_reg_166 : STD_LOGIC_VECTOR (2 downto 0);
    signal v236_0_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal v246_0_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal k6_0_0_reg_201 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_0_0_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_pow_generic_float_s_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm_state16 : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sext_ln397_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln408_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln419_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_5_fu_289_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_281_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln387_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln387_1_fu_319_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln387_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_353_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln419_fu_361_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln397_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln397_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln399_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln399_1_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_401_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln399_fu_411_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln399_1_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln399_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_419_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln399_1_fu_429_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln399_3_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln399_2_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln399_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln399_1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln399_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln399_1_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln408_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln408_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln419_1_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln419_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_245_opcode : STD_LOGIC_VECTOR (1 downto 0);

    component pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        exp : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_faddfsuyd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fdiv_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fcmp_32tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_pow_generic_float_s_fu_223 : component pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_223_ap_start,
        ap_done => grp_pow_generic_float_s_fu_223_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_223_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_223_ap_ready,
        base_r => ap_const_lv32_402DF855,
        exp => p_y_assign_reg_618,
        ap_return => grp_pow_generic_float_s_fu_223_ap_return);

    attention_faddfsuyd2_U86 : component attention_faddfsuyd2
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        opcode => grp_fu_245_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    attention_fdiv_32rcU_U87 : component attention_fdiv_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_262,
        din1 => v246_0_reg_189,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    attention_fcmp_32tde_U88 : component attention_fcmp_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v226_0_q0,
        din1 => v236_0_reg_177,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_256_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state16) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_pow_generic_float_s_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i7_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln386_fu_307_p2 = ap_const_lv1_1))) then 
                i7_0_reg_133 <= i7_reg_544;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i7_0_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i8_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln384_fu_269_p2 = ap_const_lv1_1))) then 
                i8_0_reg_155 <= ap_const_lv5_0;
            elsif (((icmp_ln418_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i8_0_reg_155 <= i8_reg_575;
            end if; 
        end if;
    end process;

    k4_0_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k4_0_0_reg_144 <= add_ln386_reg_557;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln384_fu_269_p2 = ap_const_lv1_0))) then 
                k4_0_0_reg_144 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k5_0_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k5_0_0_reg_166 <= add_ln396_reg_590;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln392_fu_333_p2 = ap_const_lv1_0))) then 
                k5_0_0_reg_166 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k6_0_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln396_fu_371_p2 = ap_const_lv1_1))) then 
                k6_0_0_reg_201 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                k6_0_0_reg_201 <= add_ln407_reg_608;
            end if; 
        end if;
    end process;

    k7_0_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln407_fu_489_p2 = ap_const_lv1_1))) then 
                k7_0_0_reg_212 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                k7_0_0_reg_212 <= add_ln418_reg_636;
            end if; 
        end if;
    end process;

    v236_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                v236_0_reg_177 <= select_ln400_fu_481_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln392_fu_333_p2 = ap_const_lv1_0))) then 
                v236_0_reg_177 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    v246_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln396_fu_371_p2 = ap_const_lv1_1))) then 
                v246_0_reg_189 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                v246_0_reg_189 <= grp_fu_245_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln386_reg_557 <= add_ln386_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln396_reg_590 <= add_ln396_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln407_reg_608 <= add_ln407_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln418_reg_636 <= add_ln418_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i7_reg_544 <= i7_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i8_reg_575 <= i8_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                p_y_assign_reg_618 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_262 <= v226_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln386_fu_307_p2 = ap_const_lv1_0))) then
                sext_ln387_reg_562 <= sext_ln387_fu_328_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln384_fu_269_p2 = ap_const_lv1_0))) then
                    sub_ln387_reg_549(7 downto 1) <= sub_ln387_fu_301_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln392_fu_333_p2 = ap_const_lv1_0))) then
                    sub_ln419_reg_580(7 downto 1) <= sub_ln419_fu_365_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_i_i_reg_623 <= grp_pow_generic_float_s_fu_223_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln407_fu_489_p2 = ap_const_lv1_0))) then
                v226_0_addr_2_reg_613 <= sext_ln408_fu_510_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln418_fu_515_p2 = ap_const_lv1_0))) then
                v226_0_addr_3_reg_641 <= sext_ln419_fu_536_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                v3_reg_646 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    sub_ln387_reg_549(0) <= '0';
    sub_ln419_reg_580(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln384_fu_269_p2, ap_CS_fsm_state3, icmp_ln386_fu_307_p2, ap_CS_fsm_state5, icmp_ln392_fu_333_p2, ap_CS_fsm_state6, icmp_ln396_fu_371_p2, ap_CS_fsm_state9, icmp_ln407_fu_489_p2, ap_CS_fsm_state46, icmp_ln418_fu_515_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln384_fu_269_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln386_fu_307_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln392_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln396_fu_371_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln407_fu_489_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln418_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln386_fu_313_p2 <= std_logic_vector(unsigned(k4_0_0_reg_144) + unsigned(ap_const_lv3_1));
    add_ln387_fu_323_p2 <= std_logic_vector(unsigned(sub_ln387_reg_549) + unsigned(zext_ln387_1_fu_319_p1));
    add_ln396_fu_377_p2 <= std_logic_vector(unsigned(k5_0_0_reg_166) + unsigned(ap_const_lv3_1));
    add_ln397_fu_387_p2 <= std_logic_vector(unsigned(sub_ln419_reg_580) + unsigned(zext_ln397_fu_383_p1));
    add_ln407_fu_495_p2 <= std_logic_vector(unsigned(k6_0_0_reg_201) + unsigned(ap_const_lv3_1));
    add_ln408_fu_505_p2 <= std_logic_vector(unsigned(sub_ln419_reg_580) + unsigned(zext_ln408_fu_501_p1));
    add_ln418_fu_521_p2 <= std_logic_vector(unsigned(k7_0_0_reg_212) + unsigned(ap_const_lv3_1));
    add_ln419_fu_531_p2 <= std_logic_vector(unsigned(sub_ln419_reg_580) + unsigned(zext_ln419_1_fu_527_p1));
    and_ln399_1_fu_475_p2 <= (grp_fu_256_p2 and and_ln399_fu_469_p2);
    and_ln399_fu_469_p2 <= (or_ln399_fu_445_p2 and or_ln399_1_fu_463_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state16 <= ap_NS_fsm(15);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln392_fu_333_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln392_fu_333_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln392_fu_333_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln392_fu_333_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln399_1_fu_415_p1 <= v236_0_reg_177;
    bitcast_ln399_fu_397_p1 <= reg_262;

    grp_fu_245_opcode_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_245_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_245_opcode <= ap_const_lv2_0;
        else 
            grp_fu_245_opcode <= "XX";
        end if; 
    end process;


    grp_fu_245_p0_assign_proc : process(reg_262, v246_0_reg_189, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_245_p0 <= v246_0_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_245_p0 <= reg_262;
        else 
            grp_fu_245_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p1_assign_proc : process(tmp_i_i_reg_623, v236_0_reg_177, ap_CS_fsm_state11, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_245_p1 <= tmp_i_i_reg_623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_245_p1 <= v236_0_reg_177;
        else 
            grp_fu_245_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_float_s_fu_223_ap_start <= grp_pow_generic_float_s_fu_223_ap_start_reg;
    i7_fu_275_p2 <= std_logic_vector(unsigned(i7_0_reg_133) + unsigned(ap_const_lv5_1));
    i8_fu_339_p2 <= std_logic_vector(unsigned(i8_0_reg_155) + unsigned(ap_const_lv5_1));
    icmp_ln384_fu_269_p2 <= "1" when (i7_0_reg_133 = ap_const_lv5_10) else "0";
    icmp_ln386_fu_307_p2 <= "1" when (k4_0_0_reg_144 = ap_const_lv3_6) else "0";
    icmp_ln392_fu_333_p2 <= "1" when (i8_0_reg_155 = ap_const_lv5_10) else "0";
    icmp_ln396_fu_371_p2 <= "1" when (k5_0_0_reg_166 = ap_const_lv3_6) else "0";
    icmp_ln399_1_fu_439_p2 <= "1" when (trunc_ln399_fu_411_p1 = ap_const_lv23_0) else "0";
    icmp_ln399_2_fu_451_p2 <= "0" when (tmp_3_fu_419_p4 = ap_const_lv8_FF) else "1";
    icmp_ln399_3_fu_457_p2 <= "1" when (trunc_ln399_1_fu_429_p1 = ap_const_lv23_0) else "0";
    icmp_ln399_fu_433_p2 <= "0" when (tmp_1_fu_401_p4 = ap_const_lv8_FF) else "1";
    icmp_ln407_fu_489_p2 <= "1" when (k6_0_0_reg_201 = ap_const_lv3_6) else "0";
    icmp_ln418_fu_515_p2 <= "1" when (k7_0_0_reg_212 = ap_const_lv3_6) else "0";
    or_ln399_1_fu_463_p2 <= (icmp_ln399_3_fu_457_p2 or icmp_ln399_2_fu_451_p2);
    or_ln399_fu_445_p2 <= (icmp_ln399_fu_433_p2 or icmp_ln399_1_fu_439_p2);
    select_ln400_fu_481_p3 <= 
        reg_262 when (and_ln399_1_fu_475_p2(0) = '1') else 
        v236_0_reg_177;
        sext_ln387_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln387_fu_323_p2),64));

        sext_ln397_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln397_fu_387_p2),64));

        sext_ln408_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln408_fu_505_p2),64));

        sext_ln419_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln419_fu_531_p2),64));

    sub_ln387_fu_301_p2 <= std_logic_vector(unsigned(tmp_s_fu_281_p3) - unsigned(zext_ln387_fu_297_p1));
    sub_ln419_fu_365_p2 <= std_logic_vector(unsigned(tmp_6_fu_345_p3) - unsigned(zext_ln419_fu_361_p1));
    tmp_1_fu_401_p4 <= bitcast_ln399_fu_397_p1(30 downto 23);
    tmp_3_fu_419_p4 <= bitcast_ln399_1_fu_415_p1(30 downto 23);
    tmp_5_fu_289_p3 <= (i7_0_reg_133 & ap_const_lv1_0);
    tmp_6_fu_345_p3 <= (i8_0_reg_155 & ap_const_lv3_0);
    tmp_7_fu_353_p3 <= (i8_0_reg_155 & ap_const_lv1_0);
    tmp_s_fu_281_p3 <= (i7_0_reg_133 & ap_const_lv3_0);
    trunc_ln399_1_fu_429_p1 <= bitcast_ln399_1_fu_415_p1(23 - 1 downto 0);
    trunc_ln399_fu_411_p1 <= bitcast_ln399_fu_397_p1(23 - 1 downto 0);
    v225_0_address0 <= sext_ln387_fu_328_p1(7 - 1 downto 0);

    v225_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v225_0_ce0 <= ap_const_logic_1;
        else 
            v225_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v226_0_address0_assign_proc : process(sext_ln387_reg_562, ap_CS_fsm_state6, ap_CS_fsm_state9, v226_0_addr_2_reg_613, ap_CS_fsm_state40, ap_CS_fsm_state46, v226_0_addr_3_reg_641, ap_CS_fsm_state4, ap_CS_fsm_state64, sext_ln397_fu_392_p1, sext_ln408_fu_510_p1, sext_ln419_fu_536_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            v226_0_address0 <= v226_0_addr_3_reg_641;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            v226_0_address0 <= sext_ln419_fu_536_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            v226_0_address0 <= v226_0_addr_2_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v226_0_address0 <= sext_ln408_fu_510_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v226_0_address0 <= sext_ln397_fu_392_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v226_0_address0 <= sext_ln387_reg_562(7 - 1 downto 0);
        else 
            v226_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    v226_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state40, ap_CS_fsm_state46, ap_CS_fsm_state4, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            v226_0_ce0 <= ap_const_logic_1;
        else 
            v226_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v226_0_d0_assign_proc : process(v225_0_q0, grp_pow_generic_float_s_fu_223_ap_return, ap_CS_fsm_state40, v3_reg_646, ap_CS_fsm_state4, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            v226_0_d0 <= v3_reg_646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            v226_0_d0 <= grp_pow_generic_float_s_fu_223_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v226_0_d0 <= v225_0_q0;
        else 
            v226_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v226_0_we0_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state4, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            v226_0_we0 <= ap_const_logic_1;
        else 
            v226_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln387_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_0_0_reg_144),8));
    zext_ln387_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_289_p3),8));
    zext_ln397_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k5_0_0_reg_166),8));
    zext_ln408_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k6_0_0_reg_201),8));
    zext_ln419_1_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k7_0_0_reg_212),8));
    zext_ln419_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_353_p3),8));
end behav;
