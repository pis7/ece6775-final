-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantize_activation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v22_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v22_0_ce0 : OUT STD_LOGIC;
    v22_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v24_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v24_0_ce0 : OUT STD_LOGIC;
    v24_0_we0 : OUT STD_LOGIC;
    v24_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of quantize_activation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_42FE0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111111100000000000000000";
    constant ap_const_lv32_3727C5AC : STD_LOGIC_VECTOR (31 downto 0) := "00110111001001111100010110101100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_BF000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln70_fu_223_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln70_reg_733 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln70_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln74_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln80_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln215_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln215_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln215_1_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln97_fu_438_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln97_reg_783 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal shl_ln_fu_444_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_reg_788 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln97_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln98_1_fu_452_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln98_1_reg_793 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln98_fu_466_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln98_reg_801 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln98_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln120_fu_486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln120_reg_811 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln102_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal icmp_ln102_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_1_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_Result_s_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal p_Val2_5_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln116_1_fu_718_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln116_1_reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_phi_mux_v45_0_phi_fu_148_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal v45_0_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_0_reg_156 : STD_LOGIC_VECTOR (10 downto 0);
    signal j1_0_0_reg_167 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_0_0_reg_178 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln71_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_1_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal bitcast_ln72_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_238_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_fu_248_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln72_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln73_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_1_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_298_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_fu_308_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln79_1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_315_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_1_fu_325_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln79_3_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_2_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_1_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln215_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln215_fu_398_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln215_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln215_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln98_fu_456_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln99_fu_472_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln120_fu_482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln102_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_494_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln102_fu_504_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln102_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_559_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_563_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_549_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_577_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_581_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_595_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_601_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_605_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_617_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_573_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_621_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_625_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_631_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_649_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_672_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_684_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln111_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln116_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln116_fu_704_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_fu_700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_202_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component attention_fadd_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fmul_32qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fdiv_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fcmp_32sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    attention_fadd_32pcA_U33 : component attention_fadd_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v1_reg_816,
        din1 => grp_fu_189_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    attention_fmul_32qcK_U34 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_211,
        din1 => v_reg_775,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    attention_fdiv_32rcU_U35 : component attention_fdiv_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42FE0000,
        din1 => grp_fu_197_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    attention_fcmp_32sc4_U36 : component attention_fcmp_32sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_202_opcode,
        dout => grp_fu_202_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_0_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln98_fu_460_p2 = ap_const_lv1_1))) then 
                j1_0_0_reg_167 <= add_ln97_reg_783;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j1_0_0_reg_167 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_0_reg_156 <= add_ln70_reg_733;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_0_reg_156 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    l_0_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                l_0_0_reg_178 <= add_ln98_reg_801;
            elsif (((icmp_ln97_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                l_0_0_reg_178 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    v45_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v45_0_reg_144 <= select_ln80_fu_377_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v45_0_reg_144 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                add_ln120_reg_811 <= add_ln120_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln70_reg_733 <= add_ln70_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln97_reg_783 <= add_ln97_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln98_reg_801 <= add_ln98_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                icmp_ln102_1_reg_828 <= icmp_ln102_1_fu_514_p2;
                icmp_ln102_reg_823 <= icmp_ln102_fu_508_p2;
                tmp_4_reg_833 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln215_1_reg_760 <= icmp_ln215_1_fu_408_p2;
                icmp_ln215_reg_755 <= icmp_ln215_fu_402_p2;
                tmp_7_reg_765 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                p_Result_s_reg_848 <= p_Val2_s_fu_538_p1(31 downto 31);
                p_Val2_5_reg_853 <= p_Val2_5_fu_659_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_211 <= v22_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                select_ln116_1_reg_859 <= select_ln116_1_fu_718_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln74_reg_743 <= select_ln74_fu_286_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    shl_ln_reg_788(10 downto 2) <= shl_ln_fu_444_p3(10 downto 2);
                    zext_ln98_1_reg_793(10 downto 2) <= zext_ln98_1_fu_452_p1(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                v1_reg_816 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                v_reg_775 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                x_assign_reg_843 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_788(1 downto 0) <= "00";
    zext_ln98_1_reg_793(1 downto 0) <= "00";
    zext_ln98_1_reg_793(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln70_fu_217_p2, ap_CS_fsm_state24, icmp_ln97_fu_432_p2, ap_CS_fsm_state25, icmp_ln98_fu_460_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln70_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln97_fu_432_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln98_fu_460_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln120_fu_486_p2 <= std_logic_vector(unsigned(zext_ln98_1_reg_793) + unsigned(zext_ln120_fu_482_p1));
    add_ln339_fu_581_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_577_p1));
    add_ln70_fu_223_p2 <= std_logic_vector(unsigned(j_0_0_reg_156) + unsigned(ap_const_lv11_1));
    add_ln97_fu_438_p2 <= std_logic_vector(unsigned(j1_0_0_reg_167) + unsigned(ap_const_lv9_1));
    add_ln98_fu_466_p2 <= std_logic_vector(unsigned(l_0_0_reg_178) + unsigned(ap_const_lv3_1));
    add_ln99_fu_472_p2 <= std_logic_vector(unsigned(zext_ln98_fu_456_p1) + unsigned(shl_ln_reg_788));
    and_ln102_fu_524_p2 <= (tmp_4_reg_833 and or_ln102_fu_520_p2);
    and_ln215_fu_418_p2 <= (tmp_7_reg_765 and or_ln215_fu_414_p2);
    and_ln72_fu_270_p2 <= (or_ln72_fu_264_p2 and grp_fu_202_p2);
    and_ln79_1_fu_371_p2 <= (grp_fu_202_p2 and and_ln79_fu_365_p2);
    and_ln79_fu_365_p2 <= (or_ln79_fu_341_p2 and or_ln79_1_fu_359_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24, icmp_ln97_fu_432_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln97_fu_432_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_v45_0_phi_fu_148_p4 <= v45_0_reg_144;

    ap_ready_assign_proc : process(ap_CS_fsm_state24, icmp_ln97_fu_432_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln97_fu_432_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= v_reg_775;
    bitcast_ln102_fu_491_p1 <= v1_reg_816;
    bitcast_ln215_fu_384_p1 <= v45_0_reg_144;
    bitcast_ln72_fu_234_p1 <= reg_211;
    bitcast_ln73_fu_282_p1 <= xor_ln73_fu_276_p2;
    bitcast_ln79_1_fu_312_p1 <= select_ln74_reg_743;
    bitcast_ln79_fu_294_p1 <= v45_0_reg_144;
    grp_fu_189_p1 <= 
        ap_const_lv32_3F000000 when (and_ln102_fu_524_p2(0) = '1') else 
        ap_const_lv32_BF000000;
    grp_fu_197_p1 <= 
        ap_const_lv32_3727C5AC when (and_ln215_fu_418_p2(0) = '1') else 
        v45_0_reg_144;

    grp_fu_202_opcode_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln70_fu_217_p2, ap_CS_fsm_state5, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_202_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln70_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_202_opcode <= ap_const_lv5_4;
        else 
            grp_fu_202_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_202_p0_assign_proc : process(v22_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state2, v1_reg_816, ap_phi_mux_v45_0_phi_fu_148_p4, v45_0_reg_144, ap_CS_fsm_state5, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_202_p0 <= v1_reg_816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_202_p0 <= v45_0_reg_144;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_202_p0 <= v22_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_202_p0 <= ap_phi_mux_v45_0_phi_fu_148_p4;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, select_ln74_reg_743, ap_CS_fsm_state5, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_202_p1 <= select_ln74_reg_743;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_202_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_202_p1 <= ap_const_lv32_3727C5AC;
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln102_1_fu_514_p2 <= "1" when (trunc_ln102_fu_504_p1 = ap_const_lv23_0) else "0";
    icmp_ln102_fu_508_p2 <= "0" when (tmp_3_fu_494_p4 = ap_const_lv8_FF) else "1";
    icmp_ln111_fu_678_p2 <= "1" when (signed(p_Val2_6_fu_672_p3) < signed(ap_const_lv32_FFFFFF80)) else "0";
    icmp_ln113_fu_694_p2 <= "1" when (signed(tmp_13_fu_684_p4) > signed(ap_const_lv25_0)) else "0";
    icmp_ln215_1_fu_408_p2 <= "1" when (trunc_ln215_fu_398_p1 = ap_const_lv23_0) else "0";
    icmp_ln215_fu_402_p2 <= "0" when (tmp_6_fu_388_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_fu_217_p2 <= "1" when (j_0_0_reg_156 = ap_const_lv11_600) else "0";
    icmp_ln72_1_fu_258_p2 <= "1" when (trunc_ln72_fu_248_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_fu_252_p2 <= "0" when (tmp_8_fu_238_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_1_fu_335_p2 <= "1" when (trunc_ln79_fu_308_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_2_fu_347_p2 <= "0" when (tmp_1_fu_315_p4 = ap_const_lv8_FF) else "1";
    icmp_ln79_3_fu_353_p2 <= "1" when (trunc_ln79_1_fu_325_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_fu_329_p2 <= "0" when (tmp_s_fu_298_p4 = ap_const_lv8_FF) else "1";
    icmp_ln97_fu_432_p2 <= "1" when (j1_0_0_reg_167 = ap_const_lv9_180) else "0";
    icmp_ln98_fu_460_p2 <= "1" when (l_0_0_reg_178 = ap_const_lv3_4) else "0";
    isNeg_fu_587_p3 <= add_ln339_fu_581_p2(8 downto 8);
    mantissa_V_fu_563_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_559_p1) & ap_const_lv1_0);
    or_ln102_fu_520_p2 <= (icmp_ln102_reg_823 or icmp_ln102_1_reg_828);
    or_ln116_fu_712_p2 <= (icmp_ln113_fu_694_p2 or icmp_ln111_fu_678_p2);
    or_ln215_fu_414_p2 <= (icmp_ln215_reg_755 or icmp_ln215_1_reg_760);
    or_ln72_fu_264_p2 <= (icmp_ln72_fu_252_p2 or icmp_ln72_1_fu_258_p2);
    or_ln79_1_fu_359_p2 <= (icmp_ln79_3_fu_353_p2 or icmp_ln79_2_fu_347_p2);
    or_ln79_fu_341_p2 <= (icmp_ln79_fu_329_p2 or icmp_ln79_1_fu_335_p2);
    p_Val2_5_fu_659_p3 <= 
        zext_ln662_fu_645_p1 when (isNeg_fu_587_p3(0) = '1') else 
        tmp_10_fu_649_p4;
    p_Val2_6_fu_672_p3 <= 
        result_V_1_fu_667_p2 when (p_Result_s_reg_848(0) = '1') else 
        p_Val2_5_reg_853;
    p_Val2_s_fu_538_p1 <= x_assign_reg_843;
    r_V_1_fu_631_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_573_p1),to_integer(unsigned('0' & zext_ln1287_fu_621_p1(31-1 downto 0)))));
    r_V_fu_625_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_563_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_617_p1(25-1 downto 0)))));
    result_V_1_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_853));
    select_ln116_1_fu_718_p3 <= 
        select_ln116_fu_704_p3 when (or_ln116_fu_712_p2(0) = '1') else 
        trunc_ln116_fu_700_p1;
    select_ln116_fu_704_p3 <= 
        ap_const_lv8_80 when (icmp_ln111_fu_678_p2(0) = '1') else 
        ap_const_lv8_7F;
    select_ln74_fu_286_p3 <= 
        reg_211 when (and_ln72_fu_270_p2(0) = '1') else 
        bitcast_ln73_fu_282_p1;
    select_ln80_fu_377_p3 <= 
        select_ln74_reg_743 when (and_ln79_1_fu_371_p2(0) = '1') else 
        v45_0_reg_144;
        sext_ln1311_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_605_p3),32));

        sext_ln1311_2_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_605_p3),25));

        sext_ln1311_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_595_p2),9));

    shl_ln_fu_444_p3 <= (j1_0_0_reg_167 & ap_const_lv2_0);
    sub_ln1311_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_549_p4));
    tmp_10_fu_649_p4 <= r_V_1_fu_631_p2(55 downto 24);
    tmp_12_fu_637_p3 <= r_V_fu_625_p2(24 downto 24);
    tmp_13_fu_684_p4 <= p_Val2_6_fu_672_p3(31 downto 7);
    tmp_1_fu_315_p4 <= bitcast_ln79_1_fu_312_p1(30 downto 23);
    tmp_3_fu_494_p4 <= bitcast_ln102_fu_491_p1(30 downto 23);
    tmp_6_fu_388_p4 <= bitcast_ln215_fu_384_p1(30 downto 23);
    tmp_8_fu_238_p4 <= bitcast_ln72_fu_234_p1(30 downto 23);
    tmp_V_1_fu_559_p1 <= p_Val2_s_fu_538_p1(23 - 1 downto 0);
    tmp_V_fu_549_p4 <= p_Val2_s_fu_538_p1(30 downto 23);
    tmp_s_fu_298_p4 <= bitcast_ln79_fu_294_p1(30 downto 23);
    trunc_ln102_fu_504_p1 <= bitcast_ln102_fu_491_p1(23 - 1 downto 0);
    trunc_ln116_fu_700_p1 <= p_Val2_6_fu_672_p3(8 - 1 downto 0);
    trunc_ln215_fu_398_p1 <= bitcast_ln215_fu_384_p1(23 - 1 downto 0);
    trunc_ln72_fu_248_p1 <= bitcast_ln72_fu_234_p1(23 - 1 downto 0);
    trunc_ln79_1_fu_325_p1 <= bitcast_ln79_1_fu_312_p1(23 - 1 downto 0);
    trunc_ln79_fu_308_p1 <= bitcast_ln79_fu_294_p1(23 - 1 downto 0);
    ush_fu_605_p3 <= 
        sext_ln1311_fu_601_p1 when (isNeg_fu_587_p3(0) = '1') else 
        add_ln339_fu_581_p2;

    v22_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state25, zext_ln71_fu_229_p1, zext_ln99_fu_477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            v22_0_address0 <= zext_ln99_fu_477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v22_0_address0 <= zext_ln71_fu_229_p1(11 - 1 downto 0);
        else 
            v22_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    v22_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            v22_0_ce0 <= ap_const_logic_1;
        else 
            v22_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_address0 <= zext_ln120_1_fu_726_p1(11 - 1 downto 0);

    v24_0_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            v24_0_ce0 <= ap_const_logic_1;
        else 
            v24_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v24_0_d0 <= select_ln116_1_reg_859;

    v24_0_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            v24_0_we0 <= ap_const_logic_1;
        else 
            v24_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln73_fu_276_p2 <= (bitcast_ln72_fu_234_p1 xor ap_const_lv32_80000000);
    zext_ln120_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln120_reg_811),64));
    zext_ln120_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_0_reg_178),12));
    zext_ln1287_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_613_p1),79));
    zext_ln339_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_549_p4),9));
    zext_ln662_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_637_p3),32));
    zext_ln682_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_563_p4),79));
    zext_ln71_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_156),64));
    zext_ln98_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_444_p3),12));
    zext_ln98_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_0_reg_178),11));
    zext_ln99_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_fu_472_p2),64));
end behav;
