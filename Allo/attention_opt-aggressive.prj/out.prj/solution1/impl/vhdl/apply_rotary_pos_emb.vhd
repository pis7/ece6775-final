-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_rotary_pos_emb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v163_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v163_ce0 : OUT STD_LOGIC;
    v163_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v164_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v164_ce0 : OUT STD_LOGIC;
    v164_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v165_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v165_0_ce0 : OUT STD_LOGIC;
    v165_0_we0 : OUT STD_LOGIC;
    v165_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v166_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v166_0_ce0 : OUT STD_LOGIC;
    v166_0_we0 : OUT STD_LOGIC;
    v166_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    q_proj_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    q_proj_0_ce0 : OUT STD_LOGIC;
    q_proj_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    q_proj_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    q_proj_0_ce1 : OUT STD_LOGIC;
    q_proj_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    k_proj_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k_proj_0_ce0 : OUT STD_LOGIC;
    k_proj_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    k_proj_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    k_proj_0_ce1 : OUT STD_LOGIC;
    k_proj_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of apply_rotary_pos_emb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1E0 : STD_LOGIC_VECTOR (9 downto 0) := "0111100000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal v169_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal v169_reg_500 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln273_fu_318_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln273_reg_505 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln270_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln272_fu_330_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal v173_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal v173_reg_521 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln281_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln281_reg_526 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln278_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln280_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal h2_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_reg_542 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sub_ln298_fu_446_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln298_reg_547 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln287_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln289_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln289_reg_555 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln298_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln298_reg_560 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln289_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_proj_0_load_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal v163_load_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_q_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_q_0_load_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal v164_load_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_proj_0_load_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_k_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_k_0_load_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v3_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v5_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v6_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v4_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v7_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_q_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal rotated_q_0_ce0 : STD_LOGIC;
    signal rotated_q_0_we0 : STD_LOGIC;
    signal rotated_q_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_q_0_ce1 : STD_LOGIC;
    signal rotated_q_0_we1 : STD_LOGIC;
    signal rotated_k_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal rotated_k_0_ce0 : STD_LOGIC;
    signal rotated_k_0_we0 : STD_LOGIC;
    signal rotated_k_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rotated_k_0_ce1 : STD_LOGIC;
    signal rotated_k_0_we1 : STD_LOGIC;
    signal grp_rotate_half_fu_248_ap_start : STD_LOGIC;
    signal grp_rotate_half_fu_248_ap_done : STD_LOGIC;
    signal grp_rotate_half_fu_248_ap_idle : STD_LOGIC;
    signal grp_rotate_half_fu_248_ap_ready : STD_LOGIC;
    signal grp_rotate_half_fu_248_v153_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_248_v153_0_ce0 : STD_LOGIC;
    signal grp_rotate_half_fu_248_v153_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_248_v153_0_ce1 : STD_LOGIC;
    signal grp_rotate_half_fu_248_v154_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_248_v154_0_ce0 : STD_LOGIC;
    signal grp_rotate_half_fu_248_v154_0_we0 : STD_LOGIC;
    signal grp_rotate_half_fu_248_v154_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rotate_half_fu_248_v154_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_248_v154_0_ce1 : STD_LOGIC;
    signal grp_rotate_half_fu_248_v154_0_we1 : STD_LOGIC;
    signal grp_rotate_half_fu_248_v154_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rotate_half_fu_255_ap_start : STD_LOGIC;
    signal grp_rotate_half_fu_255_ap_done : STD_LOGIC;
    signal grp_rotate_half_fu_255_ap_idle : STD_LOGIC;
    signal grp_rotate_half_fu_255_ap_ready : STD_LOGIC;
    signal grp_rotate_half_fu_255_v153_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_255_v153_0_ce0 : STD_LOGIC;
    signal grp_rotate_half_fu_255_v153_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_255_v153_0_ce1 : STD_LOGIC;
    signal grp_rotate_half_fu_255_v154_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_255_v154_0_ce0 : STD_LOGIC;
    signal grp_rotate_half_fu_255_v154_0_we0 : STD_LOGIC;
    signal grp_rotate_half_fu_255_v154_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rotate_half_fu_255_v154_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_rotate_half_fu_255_v154_0_ce1 : STD_LOGIC;
    signal grp_rotate_half_fu_255_v154_0_we1 : STD_LOGIC;
    signal grp_rotate_half_fu_255_v154_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v169_0_reg_182 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln272_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v171_0_0_reg_193 : STD_LOGIC_VECTOR (6 downto 0);
    signal v173_0_reg_204 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln280_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v175_0_0_reg_215 : STD_LOGIC_VECTOR (6 downto 0);
    signal h2_0_reg_226 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal d2_0_0_reg_237 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_rotate_half_fu_248_ap_start_reg : STD_LOGIC := '0';
    signal grp_rotate_half_fu_255_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln273_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln281_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln291_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_49_fu_306_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_298_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln273_fu_314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln273_1_fu_336_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln273_fu_340_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_370_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_362_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln281_fu_378_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln281_1_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln281_fu_404_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_434_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_fu_426_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln298_fu_442_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln298_2_fu_468_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln298_fu_472_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln298_1_fu_464_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln291_fu_485_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component rotate_half IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v153_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v153_0_ce0 : OUT STD_LOGIC;
        v153_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v153_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v153_0_ce1 : OUT STD_LOGIC;
        v153_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        v154_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v154_0_ce0 : OUT STD_LOGIC;
        v154_0_we0 : OUT STD_LOGIC;
        v154_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v154_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v154_0_ce1 : OUT STD_LOGIC;
        v154_0_we1 : OUT STD_LOGIC;
        v154_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fadd_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component attention_fmul_32qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component apply_rotary_pos_wdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rotated_q_0_U : component apply_rotary_pos_wdI
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_q_0_address0,
        ce0 => rotated_q_0_ce0,
        we0 => rotated_q_0_we0,
        d0 => rotated_q_0_d0,
        q0 => rotated_q_0_q0,
        address1 => grp_rotate_half_fu_248_v154_0_address1,
        ce1 => rotated_q_0_ce1,
        we1 => rotated_q_0_we1,
        d1 => grp_rotate_half_fu_248_v154_0_d1);

    rotated_k_0_U : component apply_rotary_pos_wdI
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rotated_k_0_address0,
        ce0 => rotated_k_0_ce0,
        we0 => rotated_k_0_we0,
        d0 => rotated_k_0_d0,
        q0 => rotated_k_0_q0,
        address1 => grp_rotate_half_fu_255_v154_0_address1,
        ce1 => rotated_k_0_ce1,
        we1 => rotated_k_0_we1,
        d1 => grp_rotate_half_fu_255_v154_0_d1);

    grp_rotate_half_fu_248 : component rotate_half
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rotate_half_fu_248_ap_start,
        ap_done => grp_rotate_half_fu_248_ap_done,
        ap_idle => grp_rotate_half_fu_248_ap_idle,
        ap_ready => grp_rotate_half_fu_248_ap_ready,
        v153_0_address0 => grp_rotate_half_fu_248_v153_0_address0,
        v153_0_ce0 => grp_rotate_half_fu_248_v153_0_ce0,
        v153_0_q0 => q_proj_0_q0,
        v153_0_address1 => grp_rotate_half_fu_248_v153_0_address1,
        v153_0_ce1 => grp_rotate_half_fu_248_v153_0_ce1,
        v153_0_q1 => q_proj_0_q1,
        v154_0_address0 => grp_rotate_half_fu_248_v154_0_address0,
        v154_0_ce0 => grp_rotate_half_fu_248_v154_0_ce0,
        v154_0_we0 => grp_rotate_half_fu_248_v154_0_we0,
        v154_0_d0 => grp_rotate_half_fu_248_v154_0_d0,
        v154_0_address1 => grp_rotate_half_fu_248_v154_0_address1,
        v154_0_ce1 => grp_rotate_half_fu_248_v154_0_ce1,
        v154_0_we1 => grp_rotate_half_fu_248_v154_0_we1,
        v154_0_d1 => grp_rotate_half_fu_248_v154_0_d1);

    grp_rotate_half_fu_255 : component rotate_half
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rotate_half_fu_255_ap_start,
        ap_done => grp_rotate_half_fu_255_ap_done,
        ap_idle => grp_rotate_half_fu_255_ap_idle,
        ap_ready => grp_rotate_half_fu_255_ap_ready,
        v153_0_address0 => grp_rotate_half_fu_255_v153_0_address0,
        v153_0_ce0 => grp_rotate_half_fu_255_v153_0_ce0,
        v153_0_q0 => k_proj_0_q0,
        v153_0_address1 => grp_rotate_half_fu_255_v153_0_address1,
        v153_0_ce1 => grp_rotate_half_fu_255_v153_0_ce1,
        v153_0_q1 => k_proj_0_q1,
        v154_0_address0 => grp_rotate_half_fu_255_v154_0_address0,
        v154_0_ce0 => grp_rotate_half_fu_255_v154_0_ce0,
        v154_0_we0 => grp_rotate_half_fu_255_v154_0_we0,
        v154_0_d0 => grp_rotate_half_fu_255_v154_0_d0,
        v154_0_address1 => grp_rotate_half_fu_255_v154_0_address1,
        v154_0_ce1 => grp_rotate_half_fu_255_v154_0_ce1,
        v154_0_we1 => grp_rotate_half_fu_255_v154_0_we1,
        v154_0_d1 => grp_rotate_half_fu_255_v154_0_d1);

    attention_fadd_32pcA_U173 : component attention_fadd_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_reg_628,
        din1 => v3_reg_633,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    attention_fadd_32pcA_U174 : component attention_fadd_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v5_reg_638,
        din1 => v6_reg_643,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    attention_fmul_32qcK_U175 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_proj_0_load_reg_596,
        din1 => v163_load_reg_601,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    attention_fmul_32qcK_U176 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rotated_q_0_load_reg_607,
        din1 => v164_load_reg_612,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    attention_fmul_32qcK_U177 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => k_proj_0_load_reg_618,
        din1 => v163_load_reg_601,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    attention_fmul_32qcK_U178 : component attention_fmul_32qcK
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rotated_k_0_load_reg_623,
        din1 => v164_load_reg_612,
        ce => ap_const_logic_1,
        dout => grp_fu_282_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_rotate_half_fu_248_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rotate_half_fu_248_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln278_fu_350_p2 = ap_const_lv1_1))) then 
                    grp_rotate_half_fu_248_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rotate_half_fu_248_ap_ready = ap_const_logic_1)) then 
                    grp_rotate_half_fu_248_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rotate_half_fu_255_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rotate_half_fu_255_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln278_fu_350_p2 = ap_const_lv1_1))) then 
                    grp_rotate_half_fu_255_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rotate_half_fu_255_ap_ready = ap_const_logic_1)) then 
                    grp_rotate_half_fu_255_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d2_0_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                d2_0_0_reg_237 <= add_ln289_reg_555;
            elsif (((icmp_ln287_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                d2_0_0_reg_237 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h2_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln289_fu_452_p2 = ap_const_lv1_1))) then 
                h2_0_reg_226 <= h2_reg_542;
            elsif (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                h2_0_reg_226 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    v169_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln272_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v169_0_reg_182 <= v169_reg_500;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v169_0_reg_182 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    v171_0_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v171_0_0_reg_193 <= ap_const_lv7_0;
            elsif (((icmp_ln272_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v171_0_0_reg_193 <= add_ln272_fu_330_p2;
            end if; 
        end if;
    end process;

    v173_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v173_0_reg_204 <= ap_const_lv5_0;
            elsif (((icmp_ln280_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                v173_0_reg_204 <= v173_reg_521;
            end if; 
        end if;
    end process;

    v175_0_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                v175_0_0_reg_215 <= ap_const_lv7_0;
            elsif (((icmp_ln280_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                v175_0_0_reg_215 <= add_ln280_fu_394_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln289_reg_555 <= add_ln289_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                h2_reg_542 <= h2_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                k_proj_0_load_reg_618 <= k_proj_0_q0;
                q_proj_0_load_reg_596 <= q_proj_0_q0;
                rotated_k_0_load_reg_623 <= rotated_k_0_q0;
                rotated_q_0_load_reg_607 <= rotated_q_0_q0;
                v163_load_reg_601 <= v163_q0;
                v164_load_reg_612 <= v164_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln289_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                sext_ln298_reg_560 <= sext_ln298_fu_477_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln273_reg_505(11 downto 5) <= sub_ln273_fu_318_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln278_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln281_reg_526(11 downto 5) <= sub_ln281_fu_382_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    sub_ln298_reg_547(11 downto 5) <= sub_ln298_fu_446_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v169_reg_500 <= v169_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v173_reg_521 <= v173_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                v3_reg_633 <= grp_fu_274_p2;
                v5_reg_638 <= grp_fu_278_p2;
                v6_reg_643 <= grp_fu_282_p2;
                v_reg_628 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                v4_reg_648 <= grp_fu_262_p2;
                v7_reg_653 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    sub_ln273_reg_505(4 downto 0) <= "00000";
    sub_ln281_reg_526(4 downto 0) <= "00000";
    sub_ln298_reg_547(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln270_fu_286_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln278_fu_350_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln287_fu_414_p2, ap_CS_fsm_state8, icmp_ln289_fu_452_p2, icmp_ln272_fu_324_p2, icmp_ln280_fu_388_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln270_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln272_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln278_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln280_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln287_fu_414_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln289_fu_452_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln272_fu_330_p2 <= std_logic_vector(unsigned(v171_0_0_reg_193) + unsigned(ap_const_lv7_1));
    add_ln273_fu_340_p2 <= std_logic_vector(unsigned(sub_ln273_reg_505) + unsigned(zext_ln273_1_fu_336_p1));
    add_ln280_fu_394_p2 <= std_logic_vector(unsigned(v175_0_0_reg_215) + unsigned(ap_const_lv7_1));
    add_ln281_fu_404_p2 <= std_logic_vector(unsigned(sub_ln281_reg_526) + unsigned(zext_ln281_1_fu_400_p1));
    add_ln289_fu_458_p2 <= std_logic_vector(unsigned(d2_0_0_reg_237) + unsigned(ap_const_lv7_1));
    add_ln291_fu_485_p2 <= std_logic_vector(unsigned(zext_ln298_1_fu_464_p1) + unsigned(ap_const_lv10_1E0));
    add_ln298_fu_472_p2 <= std_logic_vector(unsigned(sub_ln298_reg_547) + unsigned(zext_ln298_2_fu_468_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state6_on_subcall_done_assign_proc : process(grp_rotate_half_fu_248_ap_done, grp_rotate_half_fu_255_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_rotate_half_fu_255_ap_done = ap_const_logic_0) or (grp_rotate_half_fu_248_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln287_fu_414_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln287_fu_414_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln287_fu_414_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln287_fu_414_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_rotate_half_fu_248_ap_start <= grp_rotate_half_fu_248_ap_start_reg;
    grp_rotate_half_fu_255_ap_start <= grp_rotate_half_fu_255_ap_start_reg;
    h2_fu_420_p2 <= std_logic_vector(unsigned(h2_0_reg_226) + unsigned(ap_const_lv5_1));
    icmp_ln270_fu_286_p2 <= "1" when (v169_0_reg_182 = ap_const_lv5_10) else "0";
    icmp_ln272_fu_324_p2 <= "1" when (v171_0_0_reg_193 = ap_const_lv7_60) else "0";
    icmp_ln278_fu_350_p2 <= "1" when (v173_0_reg_204 = ap_const_lv5_10) else "0";
    icmp_ln280_fu_388_p2 <= "1" when (v175_0_0_reg_215 = ap_const_lv7_60) else "0";
    icmp_ln287_fu_414_p2 <= "1" when (h2_0_reg_226 = ap_const_lv5_10) else "0";
    icmp_ln289_fu_452_p2 <= "1" when (d2_0_0_reg_237 = ap_const_lv7_60) else "0";

    k_proj_0_address0_assign_proc : process(ap_CS_fsm_state8, sext_ln298_fu_477_p1, grp_rotate_half_fu_255_v153_0_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_0_address0 <= sext_ln298_fu_477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            k_proj_0_address0 <= grp_rotate_half_fu_255_v153_0_address0;
        else 
            k_proj_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    k_proj_0_address1 <= grp_rotate_half_fu_255_v153_0_address1;

    k_proj_0_ce0_assign_proc : process(ap_CS_fsm_state8, grp_rotate_half_fu_255_v153_0_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_proj_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            k_proj_0_ce0 <= grp_rotate_half_fu_255_v153_0_ce0;
        else 
            k_proj_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_proj_0_ce1_assign_proc : process(grp_rotate_half_fu_255_v153_0_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            k_proj_0_ce1 <= grp_rotate_half_fu_255_v153_0_ce1;
        else 
            k_proj_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    q_proj_0_address0_assign_proc : process(ap_CS_fsm_state8, sext_ln298_fu_477_p1, grp_rotate_half_fu_248_v153_0_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            q_proj_0_address0 <= sext_ln298_fu_477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_0_address0 <= grp_rotate_half_fu_248_v153_0_address0;
        else 
            q_proj_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    q_proj_0_address1 <= grp_rotate_half_fu_248_v153_0_address1;

    q_proj_0_ce0_assign_proc : process(ap_CS_fsm_state8, grp_rotate_half_fu_248_v153_0_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            q_proj_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_0_ce0 <= grp_rotate_half_fu_248_v153_0_ce0;
        else 
            q_proj_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_proj_0_ce1_assign_proc : process(grp_rotate_half_fu_248_v153_0_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            q_proj_0_ce1 <= grp_rotate_half_fu_248_v153_0_ce1;
        else 
            q_proj_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, sext_ln298_fu_477_p1, grp_rotate_half_fu_255_v154_0_address0, ap_CS_fsm_state6, sext_ln281_fu_409_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rotated_k_0_address0 <= sext_ln298_fu_477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_address0 <= sext_ln281_fu_409_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_address0 <= grp_rotate_half_fu_255_v154_0_address0;
        else 
            rotated_k_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_rotate_half_fu_255_v154_0_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            rotated_k_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_ce0 <= grp_rotate_half_fu_255_v154_0_ce0;
        else 
            rotated_k_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_ce1_assign_proc : process(grp_rotate_half_fu_255_v154_0_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_ce1 <= grp_rotate_half_fu_255_v154_0_ce1;
        else 
            rotated_k_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_d0_assign_proc : process(ap_CS_fsm_state5, grp_rotate_half_fu_255_v154_0_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rotated_k_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_d0 <= grp_rotate_half_fu_255_v154_0_d0;
        else 
            rotated_k_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_k_0_we0_assign_proc : process(ap_CS_fsm_state5, grp_rotate_half_fu_255_v154_0_we0, icmp_ln280_fu_388_p2, ap_CS_fsm_state6)
    begin
        if (((icmp_ln280_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            rotated_k_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_we0 <= grp_rotate_half_fu_255_v154_0_we0;
        else 
            rotated_k_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_k_0_we1_assign_proc : process(grp_rotate_half_fu_255_v154_0_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_k_0_we1 <= grp_rotate_half_fu_255_v154_0_we1;
        else 
            rotated_k_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, sext_ln298_fu_477_p1, grp_rotate_half_fu_248_v154_0_address0, ap_CS_fsm_state6, sext_ln273_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rotated_q_0_address0 <= sext_ln298_fu_477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rotated_q_0_address0 <= sext_ln273_fu_345_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_address0 <= grp_rotate_half_fu_248_v154_0_address0;
        else 
            rotated_q_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_rotate_half_fu_248_v154_0_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            rotated_q_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_ce0 <= grp_rotate_half_fu_248_v154_0_ce0;
        else 
            rotated_q_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_ce1_assign_proc : process(grp_rotate_half_fu_248_v154_0_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_ce1 <= grp_rotate_half_fu_248_v154_0_ce1;
        else 
            rotated_q_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_d0_assign_proc : process(ap_CS_fsm_state3, grp_rotate_half_fu_248_v154_0_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rotated_q_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_d0 <= grp_rotate_half_fu_248_v154_0_d0;
        else 
            rotated_q_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rotated_q_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_rotate_half_fu_248_v154_0_we0, icmp_ln272_fu_324_p2, ap_CS_fsm_state6)
    begin
        if (((icmp_ln272_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            rotated_q_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_we0 <= grp_rotate_half_fu_248_v154_0_we0;
        else 
            rotated_q_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rotated_q_0_we1_assign_proc : process(grp_rotate_half_fu_248_v154_0_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rotated_q_0_we1 <= grp_rotate_half_fu_248_v154_0_we1;
        else 
            rotated_q_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln273_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln273_fu_340_p2),64));

        sext_ln281_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln281_fu_404_p2),64));

        sext_ln298_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln298_fu_472_p2),64));

    sub_ln273_fu_318_p2 <= std_logic_vector(unsigned(tmp_s_fu_298_p3) - unsigned(zext_ln273_fu_314_p1));
    sub_ln281_fu_382_p2 <= std_logic_vector(unsigned(tmp_50_fu_362_p3) - unsigned(zext_ln281_fu_378_p1));
    sub_ln298_fu_446_p2 <= std_logic_vector(unsigned(tmp_52_fu_426_p3) - unsigned(zext_ln298_fu_442_p1));
    tmp_49_fu_306_p3 <= (v169_0_reg_182 & ap_const_lv5_0);
    tmp_50_fu_362_p3 <= (v173_0_reg_204 & ap_const_lv7_0);
    tmp_51_fu_370_p3 <= (v173_0_reg_204 & ap_const_lv5_0);
    tmp_52_fu_426_p3 <= (h2_0_reg_226 & ap_const_lv7_0);
    tmp_53_fu_434_p3 <= (h2_0_reg_226 & ap_const_lv5_0);
    tmp_s_fu_298_p3 <= (v169_0_reg_182 & ap_const_lv7_0);
    v163_address0 <= zext_ln291_fu_491_p1(10 - 1 downto 0);

    v163_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v163_ce0 <= ap_const_logic_1;
        else 
            v163_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v164_address0 <= zext_ln291_fu_491_p1(10 - 1 downto 0);

    v164_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v164_ce0 <= ap_const_logic_1;
        else 
            v164_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v165_0_address0 <= sext_ln298_reg_560(11 - 1 downto 0);

    v165_0_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v165_0_ce0 <= ap_const_logic_1;
        else 
            v165_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v165_0_d0 <= v4_reg_648;

    v165_0_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v165_0_we0 <= ap_const_logic_1;
        else 
            v165_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v166_0_address0 <= sext_ln298_reg_560(11 - 1 downto 0);

    v166_0_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v166_0_ce0 <= ap_const_logic_1;
        else 
            v166_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v166_0_d0 <= v7_reg_653;

    v166_0_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            v166_0_we0 <= ap_const_logic_1;
        else 
            v166_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v169_fu_292_p2 <= std_logic_vector(unsigned(v169_0_reg_182) + unsigned(ap_const_lv5_1));
    v173_fu_356_p2 <= std_logic_vector(unsigned(v173_0_reg_204) + unsigned(ap_const_lv5_1));
    zext_ln273_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v171_0_0_reg_193),12));
    zext_ln273_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_306_p3),12));
    zext_ln281_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v175_0_0_reg_215),12));
    zext_ln281_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_370_p3),12));
    zext_ln291_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln291_fu_485_p2),64));
    zext_ln298_1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d2_0_0_reg_237),10));
    zext_ln298_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d2_0_0_reg_237),12));
    zext_ln298_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_434_p3),12));
end behav;
